package com.focus.Pages;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;

public class Focus10FinancialsReportsPage extends BaseEngine {
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]")
	private static WebElement financialsMenu; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]")
	private static WebElement financialsReportsMenu; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	/*
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	*/
	
	
	// 1st 
	
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
				private static WebElement sbr1strow_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
				private static WebElement sbr1strow_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
				private static WebElement sbr1strow_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
				private static WebElement sbr1strow_5thColumn;
				
				// 2nd 
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
				private static WebElement sbr2ndrow_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
				private static WebElement sbr2ndrow_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
				private static WebElement sbr2ndrow_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
				private static WebElement sbr2ndrow_5thColumn;
				
				//3rd
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
				private static WebElement sbr3rdrow_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
				private static WebElement sbr3rdrow_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
				private static WebElement sbr3rdrow_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
				private static WebElement sbr3rdrow_5thColumn;
				
				// 4th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
				private static WebElement sbr4throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
				private static WebElement sbr4throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
				private static WebElement sbr4throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
				private static WebElement sbr4throw_5thColumn;
				
				
				
				// 5th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[2]")
				private static WebElement sbr5throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[3]")
				private static WebElement sbr5throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[4]")
				private static WebElement sbr5throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[5]")
				private static WebElement sbr5throw_5thColumn;
					
					
				// 6th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[2]")
				private static WebElement sbr6throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[3]")
				private static WebElement sbr6throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[4]")
				private static WebElement sbr6throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[5]")				
				private static WebElement sbr6throw_5thColumn;
					
				
				
				// 7th

				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[2]")
				private static WebElement sbr7throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[3]")
				private static WebElement sbr7throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[4]")
				private static WebElement sbr7throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[5]")
				private static WebElement sbr7throw_5thColumn;
					
					
				// 8th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[2]")
				private static WebElement sbr8throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[3]")
				private static WebElement sbr8throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[4]")
				private static WebElement sbr8throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[5]")
				private static WebElement sbr8throw_5thColumn;
					
					
				
				// 9th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[2]")
				private static WebElement sbr9throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[3]")
				private static WebElement sbr9throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[4]")
				private static WebElement sbr9throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[5]")
				private static WebElement sbr9throw_5thColumn;
					
					
				// 10th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[2]")
					private static WebElement sbr10throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[3]")
					private static WebElement sbr10throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[4]")
					private static WebElement sbr10throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[5]")
					private static WebElement sbr10throw_5thColumn;
					
				// 11th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[2]")
					private static WebElement sbr11throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[3]")
					private static WebElement sbr11throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[4]")
					private static WebElement sbr11throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[5]")
					private static WebElement sbr11throw_5thColumn;
					
				// 12th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[2]")
					private static WebElement sbr12throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[3]")
					private static WebElement sbr12throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[4]")
					private static WebElement sbr12throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[5]")
					private static WebElement sbr12throw_5thColumn;
					
				// 13th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[2]")
					private static WebElement sbr13throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[3]")
					private static WebElement sbr13throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[4]")
					private static WebElement sbr13throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[5]")
					private static WebElement sbr13throw_5thColumn;
				
				// 14th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[2]")
					private static WebElement sbr14throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[3]")
					private static WebElement sbr14throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[4]")
					private static WebElement sbr14throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[5]")
					private static WebElement sbr14throw_5thColumn;
		       	
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
					private static List<WebElement> stockLedgerHometableRowCount;
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[12]")
					private static List<WebElement> stockLedgerHometableItemNamesList;
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[11]")
					private static List<WebElement> ledgerHometableItemNamesList;
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[8]/div/label/input")
					private static List<WebElement> stockLedgerHometableItemChkboxList;
					
					@FindBy(xpath="(//div[@id='dvReportDetails']/div/table/thead)[1]/tr/th")
					private static List<WebElement> reportsHeaderList;
					
					@FindBy(xpath="//select[@id='DateOptions_']")
					private static WebElement sl_DateOptionDropdown;
					
					@FindBy(xpath="//input[@id='id_starting_date_']")
					private static WebElement sl_StartDateTxt;
					
					@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
					private static WebElement sl_StartDateCalanderBtn;
					
					@FindBy(xpath="//input[@id='id_ending_date_']")
					private static WebElement sl_EndDateTxt;
					
					@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
					private static WebElement sl_EndDateCalanderBtn;
					
					 // Reports Table Row List  
				  //	@FindBy(xpath="//*[@id='trRender_0']/td[2]")
					//private static List<WebElement> reportsRow1List;
					
				  	@FindBy(xpath="(//tr[@id='trRender_0'])[1]/td")
					private static List<WebElement> reportsRow1List;
				  	
					@FindBy(xpath="(//tr[@id='trRender_1'])[1]/td")
					private static List<WebElement> reportsRow2List;
					
					@FindBy(xpath="(//tr[@id='trRender_2'])[1]/td")
					private static List<WebElement> reportsRow3List;
					
					@FindBy(xpath="(//tr[@id='trRender_3'])[1]/td")
					private static List<WebElement> reportsRow4List;
					
					@FindBy(xpath="(//tr[@id='trRender_4'])[1]/td")
					private static List<WebElement> reportsRow5List;
					
					@FindBy(xpath="(//tr[@id='trRender_5'])[1]/td")
					private static List<WebElement> reportsRow6List;
					
					@FindBy(xpath="(//tr[@id='trRender_6'])[1]/td")
					private static List<WebElement> reportsRow7List;
					
					@FindBy(xpath="(//tr[@id='trRender_7'])[1]/td")
					private static List<WebElement> reportsRow8List;
					
					@FindBy(xpath="(//tr[@id='trRender_8'])[1]/td")
					private static List<WebElement> reportsRow9List;
					
					@FindBy(xpath="(//tr[@id='trRender_9'])[1]/td")
					private static List<WebElement> reportsRow10List;
					
					@FindBy(xpath="(//tr[@id='trRender_10'])[1]/td")
					private static List<WebElement> reportsRow11List;
					
					@FindBy(xpath="(//tr[@id='trRender_11'])[1]/td")
					private static List<WebElement> reportsRow12List;
					
					@FindBy(xpath="(//tr[@id='trRender_12'])[1]/td")
					private static List<WebElement> reportsRow13List;
					
					@FindBy(xpath="(//tr[@id='trRender_13'])[1]/td")
					private static List<WebElement> reportsRow14List;
					
					@FindBy(xpath="(//tr[@id='trRender_14'])[1]/td")
					private static List<WebElement> reportsRow15List;
					
					@FindBy(xpath="(//tr[@id='trRender_15'])[1]/td")
					private static List<WebElement> reportsRow16List;
					
					@FindBy(xpath="(//tr[@id='trRender_16'])[1]/td")
					private static List<WebElement> reportsRow17List;
					
					@FindBy(xpath="(//tr[@id='trRender_17'])[1]/td")
					private static List<WebElement> reportsRow18List;
					
					@FindBy(xpath="(//tr[@id='trRender_18'])[1]/td")
					private static List<WebElement> reportsRow19List;
					
					@FindBy(xpath="(//tr[@id='trRender_19'])[1]/td")
					private static List<WebElement> reportsRow20List;

	
	
	
	

					public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
					{
					        try
					        {
					                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
					                String actErrorMessage=errorMessage.getText();
					                String expErrorMessage=ExpMessage;

					                try
					                {
					                
						                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
						                errorMessageCloseBtn.click();
					                	
						                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
						                
						                return actErrorMessage;
					                }
					                catch(Exception ee)
					                {
					                	
					                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
					                	
					                	return actErrorMessage;
					                }
					        }
					        catch(Exception e)
					        {
					                System.err.println("Error Message NOT Found or NOT Clickable");
					                System.err.println(e.getMessage());
					                
					                String Exception=e.getMessage();
					            
					                return Exception;
					        }
					}
					

					public boolean checkLoginTOAutomationCompany() throws InterruptedException
					{

						 getDriver().navigate().refresh();
						 Thread.sleep(1999);
						 
						// getDriver().navigate().refresh();
						 //Thread.sleep(1999);

						LoginPage lp=new LoginPage(getDriver()); 

						String unamelt="su";
								      
						String pawslt="su";
								      
						LoginPage.enterUserName(unamelt);

						Thread.sleep(1000);
								
						LoginPage.enterPassword(pawslt);

						String compname="Automation Company : 08/10/2020 5:43 PM (070)";

						 Select oSelect = new Select(companyDropDownList);
						 
						 List <WebElement> elementCount = oSelect.getOptions();

						 int cqSize = elementCount.size();
						 
						 System.out.println("CompanyDropdownList Count :"+cqSize);
						 oSelect.selectByIndex(7);

						/*    int i;
						  
							for(i=0; i<elementCount.size(); i++) 
							{
							
							  elementCount.get(i).getText();
							  
						      String optionName = elementCount.get(i).getText();
						      System.err.println(optionName);
						      
						  /*   if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
						     {
							  System.out.println("q"+elementCount.get(i).getText());
								  elementCount.get(i).click();
							 }*/
						    /*  if(optionName.equalsIgnoreCase("Automation Company : 08/10/2020 5:43 PM (070)"))
						      {
								  elementCount.get(i).click();

						      }
						 
						    }*/
							
					        Thread.sleep(1000);
							
							LoginPage.clickOnSignInBtn();
								
							//checkRefershPopOnlogin();
							        
						//checkPopUpWindow();

						//Thread.sleep(2000);
								           	
						String userInfo=userNameDisplay.getText();
								    	
						System.out.println("User Info : "+userInfo);
								    	
						System.out.println("User Info Capture Text :"+userNameDisplay.getText());
								    	
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
								    	
						companyLogo.click();
								    	
						if(homeMenu.isDisplayed()==true)
						{

							System.out.println("Test Pass :Logined to BRS Company");
							return true;
							
						}
						else
						{
							System.out.println("Test Fail :Logined to BRS Company");
								return false;

							}
						
					}
					

	
		@FindBy (xpath="(//div[@id='dvReportDetails']/div/table/tbody)[1]/tr/td ")
		private static List<WebElement> reportTableCells;
	
	public boolean checkFinancialLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();
		
		Thread.sleep(3000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 0; i < rowcount; i++) 
		{
			String actName = ledgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") 
					|| actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportPage1Count = reportTableCells.size();
		ArrayList<String> reportPage1ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage1Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage1ListArray.add(data);
		}
		String actPage1List = reportPage1ListArray.toString();
		String expPage1List = "[1, BR COGS ACC INV BR COGS ACC INV, 2, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 10.00, , 10.00, 0.70, , 0.70, 10.00, , 10.00, Indian Rupees, 3, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, , 30.00, 1.40, , 2.10, 20.00, , 30.00, Indian Rupees, 4, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 10.00, , 40.00, , , 2.10, 10.00, , 40.00, Indian Rupees, 5, 23/11/2021, NDT50 : 1, COGS POSTING ACC, , 8.75, 31.25, , 0.61, 1.49, , 8.75, 31.25, Indian Rupees, 6, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 10.00, 21.25, , 0.70, 0.79, , 10.00, 21.25, Indian Rupees, 7, Sub Total, , , 40.00, 18.75, 21.25, 2.10, 1.31, 0.79, 40.00, 18.75, 21.25, , 8, FIFO COGS ACC INV FIFO COGS ACC INV, 9, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 10.00, 0.70, , 0.70, 10.00, , 10.00, Indian Rupees, 10, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 20.00, 0.70, , 1.40, 10.00, , 20.00, Indian Rupees, 11, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 30.00, 0.70, , 2.10, 10.00, , 30.00, Indian Rupees, 12, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 10.00, , 40.00, , , 2.10, 10.00, , 40.00, Indian Rupees]";
		
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
			report_PreviousBtn.click();
			Thread.sleep(2000);
		}
		
		int reportPage2Count = reportTableCells.size();
		ArrayList<String> reportPage2ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage2Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage2ListArray.add(data);
		}
		String actPage2List = reportPage2ListArray.toString();
		String expPage2List = "[13, 23/11/2021, NDT50 : 4, COGS POSTING ACC, , 3.33, 36.67, , 0.23, 1.87, , 3.33, 36.67, Indian Rupees, 14, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 5.00, 31.67, , 0.35, 1.52, , 5.00, 31.67, Indian Rupees, 15, Sub Total, , , 40.00, 8.33, 31.67, 2.10, 0.58, 1.52, 40.00, 8.33, 31.67, , 16, WA COGS ACC INV WA COGS ACC INV, 17, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, 120.00, , 120.00, 8.40, , 8.40, 120.00, , 120.00, Indian Rupees, 18, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, 100.00, , 220.00, 7.00, , 15.40, 100.00, , 220.00, Indian Rupees, 19, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 100.00, , 320.00, , , 15.40, 100.00, , 320.00, Indian Rupees, 20, 23/11/2021, NDT50 : 5, COGS POSTING ACC, , 22.23, 297.77, , 1.56, 13.84, , 22.23, 297.77, Indian Rupees, 21, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 74.11, 223.66, , 5.19, 8.66, , 74.11, 223.66, Indian Rupees, 22, Sub Total, , , 320.00, 96.34, 223.66, 15.40, 6.74, 8.66, 320.00, 96.34, 223.66, , 23, STD RATE COGS ACC INV STD RATE COGS ACC INV, 24, 23/11/2021, NDT57 : SU/IND/TEXT1, Vendor B, 240.00, , 240.00, 16.80, , 16.80, 240.00, , 240.00, Indian Rupees]";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage3Count = reportTableCells.size();
		ArrayList<String> reportPage3ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage3Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage3ListArray.add(data);
		}
		String actPage3List = reportPage3ListArray.toString();
		String expPage3List = "[25, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, 120.00, , 360.00, 8.40, , 25.20, 120.00, , 360.00, Indian Rupees, 26, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, 240.00, , 600.00, 16.80, , 42.00, 240.00, , 600.00, Indian Rupees, 27, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 10.00, , 610.00, , , 42.00, 10.00, , 610.00, Indian Rupees, 28, 23/11/2021, NDT50 : 6, COGS POSTING ACC, , 120.00, 490.00, , 8.40, 33.60, , 120.00, 490.00, Indian Rupees, 29, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 120.00, 370.00, , 8.40, 25.20, , 120.00, 370.00, Indian Rupees, 30, 23/11/2021, SalRet : 1, SR COGS POSTING ACC, 120.00, , 490.00, 8.40, , 33.60, 120.00, , 490.00, Indian Rupees, 31, Sub Total, , , 730.00, 240.00, 490.00, 50.40, 16.80, 33.60, 730.00, 240.00, 490.00, , 32, Grand Total, , , 1,130.00, 363.42, 766.58, 70.00, 25.44, 44.56, 1,130.00, 363.42, 766.58, ]";
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage4Count = reportTableCells.size();
		ArrayList<String> reportPage4ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage4Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage4ListArray.add(data);
		}
		String actPage4List = reportPage4ListArray.toString();
		String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
		
		System.out.println("*****************************************checkFinancialLedgerReports***************************************");
		
		System.out.println(actPage1List);
		System.out.println(expPage1List);
		
		System.out.println(actPage2List);
		System.out.println(expPage2List);
		
		System.out.println(actPage3List);
		System.out.println(expPage3List);
		
		/*System.out.println(actPage4List);
		System.out.println(expPage4List);*/
		
		if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
			/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
		
	@FindBy(xpath="(//a[contains(text(),'Item')]//i)[1]")
	private static WebElement  report_FilterItemExpansion;
	
	@FindBy(xpath="(//*[@id='5021'])[1]")
	private static WebElement  report_FilterItemNameChkbox;
	
	@FindBy(xpath="//*[@id='FilterFields_500_0']/ul[4]/li[1]/div/label/span")
	private static WebElement  ledgerreport_FilterItemNameChkbox;
	
	@FindBy(xpath="(//input[@class='FButton-Primary'])[1]")
	private static WebElement  reports_Filter_Customize_OkBtn;
	
	@FindBy(xpath="//*[@id='FOption_500_0_DefaultFilter_0']")
	private static WebElement  ledger_DefaultFilterTxt;
	
	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;
	
	@FindBy(xpath="//*[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshConditionBtn;
	
	
	
	@FindBy(xpath="//*[@id='filter_Okbtn_']")
	private static WebElement  report_FilterOkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;
	
	
	@FindBy(xpath="(//table[@class='CommonReportTable']/tbody)[1]/tr")
	private static List<WebElement> reportsRowsCount;
	
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[2]")
	private static List<WebElement> reportTableColumn1RowsList;
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[3]")
	private static List<WebElement> reportTableColumn3RowsList;
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[4]")
	private static List<WebElement> reportTableColumn4RowsList;
	
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[8]")
	private static List<WebElement> reportTableColumn7RowsList;
	
	
	@FindBy (xpath="//*[@id='id_reportmenudisplay']/ul/li[7]")
	private static WebElement sl_BackTrackBtn;
	
	
	@FindBy (xpath="(//*[@id='navbarSupportedContent2']/ul/li/a/i)[3]")
	private static WebElement BackTrackItemDetailsBackBtn;
	
	@FindBy (xpath="(//*[@id='navbarSupportedContent2']/ul/li/a/i)[2]")
	private static WebElement BackTrackMonthDetailsBackBtn;
	
	@FindBy (xpath="(//*[@id='navbarSupportedContent2']/ul/li/a/i)[1]")
	private static WebElement BackTrackDateDetailsBackBtn;
	
	
	
	
	public boolean checkFinancialLedgerReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
				
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
		report_FilterItemExpansion.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==false) 
		{
			ledgerreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger_DefaultFilterTxt));
		ledger_DefaultFilterTxt.click();
		ledger_DefaultFilterTxt.sendKeys("FIFO COGS ITEM");
		
		Thread.sleep(2000);
		
		ledger_DefaultFilterTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(3000);
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "FIFO COGS ACC INV FIFO COGS ACC INV";
		
		

		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = "[NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 20.00, 0.70, , 1.40, 10.00, , 20.00, Indian Rupees]";
	

		
		int reportsRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsRow3ListArray.add(data);
		}
		String actRow3List = reportsRow3ListArray.toString();
		String expRow3List = "[23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 30.00, 0.70, , 2.10, 10.00, , 30.00, Indian Rupees]";
		
		
		
		int reportsRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsRow4ListArray.add(data);
		}
		String actRow4List = reportsRow4ListArray.toString();
		String expRow4List = "[23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 30.00, 0.70, , 2.10, 10.00, , 30.00, Indian Rupees]";
		
		int reportsRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsRow5ListArray.add(data);
		}
		String actRow5List = reportsRow5ListArray.toString();
		String expRow5List = "[Grand Total, , , 30.00, , 30.00, 2.10, , 2.10, 30.00, , 30.00, ]";
		
		
		System.out.println("***************************checkLedgerReportFilterOption*********************************");
		
		System.out.println(actRow1List);
		System.out.println(expRow1List);
		
		System.out.println(actRow2List);
		System.out.println(expRow2List);
		
		System.out.println(actRow3List);
		System.out.println(expRow3List);
		
		System.out.println(actRow4List);
		System.out.println(expRow4List);
		
		System.out.println(actRow5List);
		System.out.println(expRow5List);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==true) 
		{
			ledgerreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
		report_Filter_RefreshConditionBtn.click();

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(2000);
		
		int actRowCount = reportsRowsCount.size();
		int expRowCount = 12; 
		
		System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount==expRowCount)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	
	public boolean checkFinancialLedgerReportBackTrackOption() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();
		
		Thread.sleep(3000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 0; i < rowcount; i++) 
		{
			String actName = ledgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") 
					|| actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(2000);
		
			
		
		int reportItemGridListCount=reportTableColumn2RowsList.size();
    for (int i = 0; i < reportItemGridListCount; i++) 
    {
         String data=reportTableColumn2RowsList.get(i).getText();
         //String data1=reportTableColumn2RowsList.get(i).getText();
         
         System.err.println(data);
         
         if (data.equalsIgnoreCase("NDT50 : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
         {
    		 reportTableColumn2RowsList.get(i).click();
    		 Thread.sleep(1000);
    		 break;
         }
	     }
    
    Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
	sl_BackTrackBtn.click();
	
	Thread.sleep(2000);
		
	
	
	ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
	
	int actOpenWindowsCount = getDriver().getWindowHandles().size();
	int expOpenWindowsCount = 2;

 	getDriver().switchTo().window(openTabs.get(1));
 
 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocNo = documentNumberTxt.getAttribute("value");
	String expDocNo = "1";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
	String actVendor = vendorAccountTxt.getAttribute("value");
	String expVendor = "Customer A";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	String actCurrency = voucherHeaderCurrency.getAttribute("value");
	String expCurrency = "INR";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	String actDepartment = departmentTxt.getAttribute("value");
	String expDepartment = "DUBAI ";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
	String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
	String expPlaceOfSupply = "Abu Dhabi";

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	String actJurisdiction = jurisdictionTxt.getAttribute("value");
	String expJurisdiction = "Dubai";

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	String actR1Warehouse = select1stRow_1stColumn.getText();
	String expR1Warehouse = "HYDERABAD";
	
	String actR1Item = select1stRow_2ndColumn.getText();
	String expR1Item = "BR COGS ITEM";
	
	String actR1TaxCode = select1stRow_3rdColumn.getText();
	String expR1TaxCode = "Std Rate";
	
	String actR1PurchaseAccount = select1stRow_4thColumn.getText();
	String expR1PurchaseAccount = "Sales - Computers";
	
	String actR1Units = select1stRow_5thColumn.getText();
	String expR1Units = "Pcs";
	
	String actR1Quantity = select1stRow_9thColumn.getText();
	String expR1Quantity = "0.00";
	
	String actR1Rate = select1stRow_11thColumn.getText();
	String expR1Rate = "10.00";
	
	String actR1Gross = select1stRow_12thColumn.getText();
	String expR1Gross = "SalOrd:1";
	
	String actR1Batch = select1stRow_16thColumn.getText();
	String expR1Batch = "0.00";

	String actR1Expiry = select1stRow_18thColumn.getText();
	DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
	Calendar R1cal=Calendar.getInstance();
	R1cal.add(Calendar.DATE, 2); 
	//String expR1Expiry=dtf.format(R1cal.getTime());
	String expR1Expiry="100.00";
	
	/*
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
	String actR2Warehouse = select2ndRow_1stColumn.getText();
	String expR2Warehouse = "";
	
	String actR2Item = select2ndRow_2ndColumn.getText();
	String expR2Item = "";
	
	String actR2TaxCode = select2ndRow_3rdColumn.getText();
	String expR2TaxCode = "";
	
	String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
	String expR2PurchaseAccount = "";
	
	String actR2Units = select2ndRow_5thColumn.getText();
	String expR2Units = "";
	
	String actR2Quantity = select2ndRow_9thColumn.getText();
	String expR2Quantity = "";
	
	String actR2Rate = select2ndRow_11thColumn.getText();
	String expR2Rate = "";
	
	String actR2Gross = select2ndRow_12thColumn.getText();
	String expR2Gross = "";
	
	String actR2Batch = select2ndRow_16thColumn.getText();
	String expR2Batch = "";

	String actR2Expiry = select2ndRow_18thColumn.getText();
	Calendar R2cal=Calendar.getInstance();
	R2cal.add(Calendar.DATE, 5); 
	String expR2Expiry=dtf.format(R2cal.getTime());
 	*/
	System.out.println("**********************checkLedgerReportBackTrackOption*********************");
	 
	System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
	
	System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
	System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
	System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
	System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
	System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
	System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
	
	System.out.println("*******************************ROW1**********************************");
	
	System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
	System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
	System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
	System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
	System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
	System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
	System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
	System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
	System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
	System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
	
	/*
	System.out.println("*******************************ROW2**********************************");
	
	System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
	System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
	System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
	System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
	System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
	System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
	System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
	System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
	System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
	System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
	*/
	
	getDriver().switchTo().window(openTabs.get(1)).close();
	
	Thread.sleep(1000);
	
	getDriver().switchTo().window(openTabs.get(0));
	
	Thread.sleep(1000);
	
	
	
	
	if ( actOpenWindowsCount==expOpenWindowsCount
		  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
		   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
		   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
		   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
		   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
		   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) && actR1Expiry.equalsIgnoreCase(expR1Expiry)
		  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
		   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
		   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
		   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return true;
	}
	else
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return false;
	}
}


@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[3]")
private static WebElement ledgerDetails;
	
	
	public boolean checkFinancialLedgerDetailsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledgerDetails.click();
		
		Thread.sleep(3000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 0; i < rowcount; i++) 
		{
			String actName = ledgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") 
					|| actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportPage1Count = reportTableCells.size();
		ArrayList<String> reportPage1ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage1Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage1ListArray.add(data);
		}
		String actPage1List = reportPage1ListArray.toString();
		String expPage1List = "[1, BR COGS ACC INV BR COGS ACC INV, 2, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 10.00, , 10.00, 10.00, , 10.00, 10.00, , 10.00, 3, 23/11/2021, NDT50 : 1, COGS POSTING ACC, , 8.75, 1.25, , 0.61, 9.39, , 8.75, 1.25, 4, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 10.00, 8.75, , 0.70, 8.69, , 10.00, 8.75, 5, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 10.00, , 1.25, 0.70, , 9.39, 10.00, , 1.25, 6, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, , 21.25, 1.40, , 10.79, 20.00, , 21.25, 7, Sub Total, , , 40.00, 18.75, 21.25, 12.10, 1.31, 10.79, 40.00, 18.75, 21.25, 8, FIFO COGS ACC INV FIFO COGS ACC INV, 9, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 10.00, , 10.00, 10.00, , 10.00, 10.00, , 10.00, 10, 23/11/2021, NDT50 : 4, COGS POSTING ACC, , 3.33, 6.67, , 0.23, 9.77, , 3.33, 6.67, 11, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 5.00, 1.67, , 0.35, 9.42, , 5.00, 1.67, 12, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 11.67, 0.70, , 10.12, 10.00, , 11.67]";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
			report_PreviousBtn.click();
			Thread.sleep(2000);
		}
		
		int reportPage2Count = reportTableCells.size();
		ArrayList<String> reportPage2ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage2Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage2ListArray.add(data);
		}
		String actPage2List = reportPage2ListArray.toString();
		String expPage2List = "[13, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 21.67, 0.70, , 10.82, 10.00, , 21.67, 14, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 31.67, 0.70, , 11.52, 10.00, , 31.67, 15, Sub Total, , , 40.00, 8.33, 31.67, 12.10, 0.58, 11.52, 40.00, 8.33, 31.67, 16, WA COGS ACC INV WA COGS ACC INV, 17, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 100.00, , 100.00, 100.00, , 100.00, 100.00, , 100.00, 18, 23/11/2021, NDT50 : 5, COGS POSTING ACC, , 22.23, 77.77, , 1.56, 98.44, , 22.23, 77.77, 19, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 74.11, 3.66, , 5.19, 93.26, , 74.11, 3.66, 20, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, 120.00, , 123.66, 8.40, , 101.66, 120.00, , 123.66, 21, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, 100.00, , 223.66, 7.00, , 108.66, 100.00, , 223.66, 22, Sub Total, , , 320.00, 96.34, 223.66, 115.40, 6.74, 108.66, 320.00, 96.34, 223.66, 23, STD RATE COGS ACC INV STD RATE COGS ACC INV, 24, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, 10.00, , 10.00, 10.00, , 10.00, 10.00, , 10.00]";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage3Count = reportTableCells.size();
		ArrayList<String> reportPage3ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage3Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage3ListArray.add(data);
		}
		String actPage3List = reportPage3ListArray.toString();
		String expPage3List = "[25, 23/11/2021, NDT50 : 6, COGS POSTING ACC, , 120.00, 110.00, , 8.40, 1.60, , 120.00, 110.00, 26, 23/11/2021, NDT50 : 7, COGS POSTING ACC, , 120.00, 230.00, , 8.40, 6.80, , 120.00, 230.00, 27, 23/11/2021, NDT57 : SU/IND/TEXT1, Vendor B, 240.00, , 10.00, 16.80, , 10.00, 240.00, , 10.00, 28, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, 240.00, , 250.00, 16.80, , 26.80, 240.00, , 250.00, 29, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, 120.00, , 370.00, 8.40, , 35.20, 120.00, , 370.00, 30, 23/11/2021, SalRet : 1, SR COGS POSTING ACC, 120.00, , 490.00, 8.40, , 43.60, 120.00, , 490.00, 31, Sub Total, , , 730.00, 240.00, 490.00, 60.40, 16.80, 43.60, 730.00, 240.00, 490.00, 32, Grand Total, , , 1,130.00, 363.42, 766.58, 200.00, 25.44, 174.56, 1,130.00, 363.42, 766.58]";
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage4Count = reportTableCells.size();
		ArrayList<String> reportPage4ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage4Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage4ListArray.add(data);
		}
		String actPage4List = reportPage4ListArray.toString();
		String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
		
		System.out.println("*****************************************checkLedgerDetailsReports***************************************");
		
		System.out.println(actPage1List);
		System.out.println(expPage1List);
		
		System.out.println(actPage2List);
		System.out.println(expPage2List);
		
		System.out.println(actPage3List);
		System.out.println(expPage3List);
		
		/*System.out.println(actPage4List);
		System.out.println(expPage4List);*/
		
		if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
			/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	@FindBy(xpath="(//*[@id='FilterFields_658_0']/ul[4]/li[1]/div/label/span)[1]")
	private static WebElement ledgerDetailsreport_FilterItemNameChkbox;
	
	@FindBy(xpath="//*[@id='FOption_658_0_DefaultFilter_0']")
	private static WebElement ledgerDetails_DefaultFilterTxt;
	
	
	public boolean checkFinancialLedgerDetailsReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
				
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
		report_FilterItemExpansion.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetailsreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==false) 
		{
			ledgerDetailsreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetails_DefaultFilterTxt));
		ledgerDetails_DefaultFilterTxt.click();
		ledgerDetails_DefaultFilterTxt.sendKeys("STD RATE COGS ITEM");
		
		Thread.sleep(2000);
		
		ledgerDetails_DefaultFilterTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(3000);
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
			System.err.println("first row"+data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[STD RATE COGS ACC INV STD RATE COGS ACC INV]";
		
		

		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = "[NDT57 : SU/IND/TEXT1, Vendor B, 240.00, , 240.00, 16.80, , 16.80, 240.00, , 240.00]";
	

		
		int reportsRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsRow3ListArray.add(data);
		}
		String actRow3List = reportsRow3ListArray.toString();
		String expRow3List = "[NDT57 : SU/IND/TEXT3, Vendor B, 120.00, , 360.00, 8.40, , 25.20, 120.00, , 360.00]";
		
		
		
		int reportsRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsRow4ListArray.add(data);
		}
		String actRow4List = reportsRow4ListArray.toString();
		String expRow4List = "[23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, 240.00, , 600.00, 16.80, , 42.00, 240.00, , 600.00]";
		
		int reportsRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsRow5ListArray.add(data);
		}
		String actRow5List = reportsRow5ListArray.toString();
		String expRow5List = "[Grand Total, , , 600.00, , 600.00, 42.00, , 42.00, 600.00, , 600.00]";
		
		
		System.out.println("***************************checkLedgerDetailsReportFilterOption*********************************");
		
		System.out.println(actRow1List);
		System.out.println(expRow1List);
		
		System.out.println(actRow2List);
		System.out.println(expRow2List);
		
		System.out.println(actRow3List);
		System.out.println(expRow3List);
		
		System.out.println(actRow4List);
		System.out.println(expRow4List);
		
		System.out.println(actRow5List);
		System.out.println(expRow5List);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetailsreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==true) 
		{
			ledgerDetailsreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
		report_Filter_RefreshConditionBtn.click();

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(2000);
		
		int actRowCount = reportsRowsCount.size();
		int expRowCount = 12; 
		
		System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount==expRowCount)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public boolean checkFinancialLedgerDetailsReportBackTrackOption() throws InterruptedException
	{
		
				
		int reportItemGridListCount=reportTableColumn2RowsList.size();
    for (int i = 0; i < reportItemGridListCount; i++) 
    {
         String data=reportTableColumn2RowsList.get(i).getText();
         //String data1=reportTableColumn2RowsList.get(i).getText();
         
         System.err.println(data);
         
         if (data.equalsIgnoreCase("NDT50 : 7") /*&& data1.equalsIgnoreCase("28.00")*/)
         {
    		 reportTableColumn2RowsList.get(i).click();
    		 Thread.sleep(1000);
    		 break;
         }
	     }
    
    Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
	sl_BackTrackBtn.click();
	
	Thread.sleep(2000);
		
	
	
	ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
	
	int actOpenWindowsCount = getDriver().getWindowHandles().size();
	int expOpenWindowsCount = 2;

 	getDriver().switchTo().window(openTabs.get(1));
 
 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocNo = documentNumberTxt.getAttribute("value");
	String expDocNo = "7";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
	String actVendor = vendorAccountTxt.getAttribute("value");
	String expVendor = "Customer A";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	String actCurrency = voucherHeaderCurrency.getAttribute("value");
	String expCurrency = "INR";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	String actDepartment = departmentTxt.getAttribute("value");
	String expDepartment = "DUBAI ";
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
	String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
	String expPlaceOfSupply = "Abu Dhabi";

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	String actJurisdiction = jurisdictionTxt.getAttribute("value");
	String expJurisdiction = "Dubai";

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	String actR1Warehouse = select1stRow_1stColumn.getText();
	String expR1Warehouse = "SECUNDERABAD";
	
	String actR1Item = select1stRow_2ndColumn.getText();
	String expR1Item = "BR COGS ITEM";
	
	String actR1TaxCode = select1stRow_3rdColumn.getText();
	String expR1TaxCode = "Std Rate";
	
	String actR1PurchaseAccount = select1stRow_4thColumn.getText();
	String expR1PurchaseAccount = "Sales - Computers";
	
	String actR1Units = select1stRow_5thColumn.getText();
	String expR1Units = "Pcs";
	
	String actR1Quantity = select1stRow_9thColumn.getText();
	String expR1Quantity = "6.00";
	
	String actR1Rate = select1stRow_11thColumn.getText();
	String expR1Rate = "12.00";
	
	String actR1Gross = select1stRow_12thColumn.getText();
	String expR1Gross = "";
	
	String actR1Batch = select1stRow_16thColumn.getText();
	String expR1Batch = "0.00";

	/*String actR1Expiry = select1stRow_18thColumn.getText();
	DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
	Calendar R1cal=Calendar.getInstance();
	R1cal.add(Calendar.DATE, 2); 
	//String expR1Expiry=dtf.format(R1cal.getTime());
	String expR1Expiry="100.00";
	*/
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
	String actR2Warehouse = select3rdRow_1stColumn.getText();
	String expR2Warehouse = "SECUNDERABAD";
	
	String actR2Item = select2ndRow_2ndColumn.getText();
	String expR2Item = "FIFO COGS ITEM ";
	
	String actR2TaxCode = select2ndRow_3rdColumn.getText();
	String expR2TaxCode = "Std Rate";
	
	String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
	String expR2PurchaseAccount = "Sales - Computers";
	
	String actR2Units = select2ndRow_5thColumn.getText();
	String expR2Units = "Pcs";
	
	String actR2Quantity = select2ndRow_9thColumn.getText();
	String expR2Quantity = "0.00";
	
	String actR2Rate = select2ndRow_11thColumn.getText();
	String expR2Rate = " 9.00 ";
	
	String actR2Gross = select2ndRow_12thColumn.getText();
	String expR2Gross = "";
	
	String actR2Batch = select2ndRow_16thColumn.getText();
	String expR2Batch = "0.00";

		
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
	String actR3Warehouse = select2ndRow_1stColumn.getText();
	String expR3Warehouse = "SECUNDERABAD ";
	
	String actR3Item = select3rdRow_2ndColumn.getText();
	String expR3Item = "WA COGS ITEM";
	
	String actR3TaxCode = select3rdRow_3rdColumn.getText();
	String expR3TaxCode = "Std Rate";
	
	String actR3PurchaseAccount = select3rdRow_4thColumn.getText();
	String expR3PurchaseAccount = "Sales - Computers";
	
	String actR3Units = select3rdRow_5thColumn.getText();
	String expR3Units = "Pcs";
	
	String actR3Quantity = select3rdRow_9thColumn.getText();
	String expR3Quantity = "0.00";
	
	String actR3Rate = select3rdRow_11thColumn.getText();
	String expR3Rate = "10.00";
	
	String actR3Gross = select3rdRow_12thColumn.getText();
	String expR3Gross = "";
	
	String actR3Batch = select3rdRow_16thColumn.getText();
	String expR3Batch = "0.00";

	
	
	
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
	String actR4Warehouse = select4thRow_1stColumn.getText();
	String expR4Warehouse = "SECUNDERABAD";
	
	String actR4Item = select4thRow_2ndColumn.getText();
	String expR4Item = "STD RATE COGS ITEM";
	
	String actR4TaxCode = select4thRow_3rdColumn.getText();
	String expR4TaxCode = "Std Rate";
	
	String actR4PurchaseAccount = select4thRow_4thColumn.getText();
	String expR4PurchaseAccount = "Sales - Computers";
	
	String actR4Units = select2ndRow_5thColumn.getText();
	String expR4Units = "Pcs";
	
	String actR4Quantity = select4thRow_9thColumn.getText();
	String expR4Quantity = "0.00";
	
	String actR4Rate = select4thRow_11thColumn.getText();
	String expR4Rate = "12.00";
	
	String actR4Gross = select4thRow_12thColumn.getText();
	String expR4Gross = "";
	
	String actR4Batch = select4thRow_16thColumn.getText();
	String expR4Batch = "0.00";

	

 	
	System.out.println("**********************checkLedgerDetailsReportBackTrackOption*********************");
	 
	System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
	
	System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
	System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
	System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
	System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
	System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
	System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
	
	System.out.println("*******************************ROW1**********************************");
	
	System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
	System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
	System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
	System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
	System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
	System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
	System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
	System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
	System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
	
	
	
	System.out.println("*******************************ROW2**********************************");
	
	System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
	System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
	System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
	System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
	System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
	System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
	System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
	System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
	System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
	
	
System.out.println("*******************************ROW3**********************************");
	
	System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
	System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
	System.out.println("TaxCode         : "+actR3TaxCode			+"  Value Expected  "+expR3TaxCode);
	System.out.println("PurchaseAccount : "+actR3PurchaseAccount	+"  Value Expected  "+expR3PurchaseAccount);
	System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
	System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
	System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
	System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
	System.out.println("Batch           : "+actR3Batch				+"  Value Expected  "+expR3Batch);
	
	
System.out.println("*******************************ROW4**********************************");
	
	System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
	System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
	System.out.println("TaxCode         : "+actR4TaxCode			+"  Value Expected  "+expR4TaxCode);
	System.out.println("PurchaseAccount : "+actR4PurchaseAccount	+"  Value Expected  "+expR4PurchaseAccount);
	System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
	System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
	System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
	System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
	System.out.println("Batch           : "+actR4Batch				+"  Value Expected  "+expR4Batch);
	
	
	getDriver().switchTo().window(openTabs.get(1)).close();
	
	Thread.sleep(1000);
	
	getDriver().switchTo().window(openTabs.get(0));
	
	Thread.sleep(1000);
	
	
	
	
	if ( actOpenWindowsCount==expOpenWindowsCount
		  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
		   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
		   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
		   
		   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
		   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
		   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
		  /* && actR1Gross.equalsIgnoreCase(expR1Gross)*/ && actR1Batch.equalsIgnoreCase(expR1Batch) 
		  
		   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
		   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
		   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
		  /* && actR2Gross.equalsIgnoreCase(expR2Gross)*/ && actR2Batch.equalsIgnoreCase(expR2Batch)
		  
		   &&actR2Warehouse.equalsIgnoreCase(expR3Warehouse) 
		   && actR3Item.equalsIgnoreCase(expR3Item) && actR3TaxCode.equalsIgnoreCase(expR3TaxCode) && actR3PurchaseAccount.equalsIgnoreCase(expR3PurchaseAccount) 
		   && actR3Units.equalsIgnoreCase(expR3Units) && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) 
		   /*&& actR3Gross.equalsIgnoreCase(expR3Gross)*/ && actR3Batch.equalsIgnoreCase(expR3Batch)
		  
		   &&actR4Warehouse.equalsIgnoreCase(expR4Warehouse) 
		   && actR4Item.equalsIgnoreCase(expR4Item) && actR4TaxCode.equalsIgnoreCase(expR4TaxCode) && actR4PurchaseAccount.equalsIgnoreCase(expR4PurchaseAccount) 
		   && actR4Units.equalsIgnoreCase(expR4Units) && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) 
		   /*&& actR4Gross.equalsIgnoreCase(expR4Gross)*/ && actR4Batch.equalsIgnoreCase(expR4Batch) ) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return true;
	}
	else
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return false;
	}
}

	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[4]")
	private static WebElement subledger;
	
	
		
	@FindBy(xpath="//*[@id='MasterGroup__101']")
	private static WebElement accountName;
	
		public boolean checkFinancialSubLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			subledger.click();
			
			Thread.sleep(3000);
			
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys("Bank");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Bank 121-001, 2, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 30.00, , 2.10, 2.10, , 30.00, 30.00, Indian Rupees, 3, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 63.00, , 2.31, 4.41, , 33.00, 63.00, Indian Rupees, 4, 23/11/2021, NDT44 : 1, Customer A, 100.00, , 37.00, 7.00, , 2.59, 100.00, , 37.00, Indian Rupees, 5, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 87.00, 3.50, , 6.09, 50.00, , 87.00, Indian Rupees, 6, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 55.50, , 2.21, 3.89, , 31.50, 55.50, Indian Rupees, 7, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 24.00, , 2.21, 1.68, , 31.50, 24.00, Indian Rupees, 8, 23/11/2021, Rct : 1, Customer A, 6.00, , 30.00, 6.00, , 7.68, 6.00, , 30.00, Indian Rupees, 9, 23/11/2021, Rct : 2, HDFC, 6.00, , 36.00, 6.00, , 13.68, 6.00, , 36.00, Indian Rupees, 10, 23/11/2021, Pmt : 1, Customer A, , 6.00, 30.00, , 6.00, 7.68, , 6.00, 30.00, Indian Rupees, 11, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 24.00, , 0.42, 7.26, , 6.00, 24.00, Indian Rupees, 12, 23/11/2021, Pmt : 2, HDFC, 6.00, , 30.00, 6.00, , 13.26, 6.00, , 30.00, Indian Rupees]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, Grand Total, , , 168.00, 138.00, 30.00, 28.50, 15.24, 13.26, 168.00, 138.00, 30.00, ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkSubLedgerDetailsReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		@FindBy(xpath="(//a[contains(text(),'Account')]//i)[1]")
		private static WebElement report_FilterAccountExpansion;
				
				
		@FindBy(xpath="(//*[@id='5002'])[1]")
		private static WebElement report_FilterAccountNameChkbox;
				
		@FindBy(xpath="(//*[@id='FilterFields_501_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement subledgerreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_501_0_DefaultFilter_0']")
		private static WebElement subledger_DefaultFilterTxt;
		
		
		public boolean checkFinancialSubLedgerReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(subledgerreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				subledgerreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(subledger_DefaultFilterTxt));
			subledger_DefaultFilterTxt.click();
			subledger_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			subledger_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow1ListCount;i++)
			{
				Thread.sleep(2000);
				
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
				System.err.println("first row"+data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[1, Bank 121-001]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[NDT44 : 1, Customer A, 100.00, , 100.00, 7.00, , 7.00, 100.00, , 100.00, Indian Rupees]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Rct : 1, Customer A, 6.00, , 106.00, 6.00, , 13.00, 6.00, , 106.00, Indian Rupees]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, Pmt : 1, Customer A, , 6.00, 100.00, , 6.00, 7.00, , 6.00, 100.00, Indian Rupees]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , 106.00, 6.00, 100.00, 13.00, 6.00, 7.00, 106.00, 6.00, 100.00, ]";
			
			
			System.out.println("***************************checkSubLedgerReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(subledgerreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				subledgerreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		

		public boolean checkFinancialSubLedgerReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT44 : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI ";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
			
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "100.00";
		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference = "NDT50:1 : 23 Nov 2021";
		
		String actR1VAT = select1stRow_7thColumn.getText();
		String expR1VAT = "0.00";
		
				

	 	
		System.out.println("**********************checkSubLedgerReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Account          : "+actAccount			+"  Value Expected  "+actAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName       : "+actAccount			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount 			: "+actR1Amount			+"  Value Expected  "+expR1Amount);
		System.out.println("Reference           : "+actR1Reference				+"  Value Expected  "+expR1Reference);
		System.out.println("VAT		        : "+actR1VAT			+"  Value Expected  "+expR1VAT);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Account.equalsIgnoreCase(expR1Account) 
			  && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1Amount.equalsIgnoreCase(expR1Amount) 
			   && actR1Reference.equalsIgnoreCase(expR1Reference) && actR1VAT.equalsIgnoreCase(expR1VAT) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		@FindBy(xpath="//select[@id='RITCombobox__5']")
		private static WebElement sortingOption;
		
		public boolean checkFinancialSubLedgerReportwithSortingOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			subledger.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sortingOption));
			sortingOption.click();
			Select s1=new Select(sortingOption);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys("Bank");
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Bank 121-001, 2, , Indian Rupees, , , , , , , , , , , , 3, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 31.50, , 2.21, 2.21, , 31.50, 31.50, Indian Rupees, 4, 23/11/2021, Pmt : 1, Customer A, , 6.00, 37.50, , 6.00, 8.21, , 6.00, 37.50, Indian Rupees, 5, 23/11/2021, Pmt : 2, HDFC, 6.00, , 31.50, 6.00, , 2.21, 6.00, , 31.50, Indian Rupees, 6, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 63.00, , 2.21, 4.41, , 31.50, 63.00, Indian Rupees, 7, 23/11/2021, NDT44 : 1, Customer A, 100.00, , 37.00, 7.00, , 2.59, 100.00, , 37.00, Indian Rupees, 8, 23/11/2021, Rct : 1, Customer A, 6.00, , 43.00, 6.00, , 8.59, 6.00, , 43.00, Indian Rupees, 9, 23/11/2021, Rct : 2, HDFC, 6.00, , 49.00, 6.00, , 14.59, 6.00, , 49.00, Indian Rupees, 10, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 19.00, , 2.10, 12.49, , 30.00, 19.00, Indian Rupees, 11, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 14.00, , 2.31, 10.18, , 33.00, 14.00, Indian Rupees, 12, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 20.00, , 0.42, 9.76, , 6.00, 20.00, Indian Rupees]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 30.00, 3.50, , 13.26, 50.00, , 30.00, Indian Rupees, 14, , Indian Rupees, , 168.00, 138.00, 30.00, 28.50, 15.24, 13.26, 168.00, 138.00, 30.00, , 15, Grand Total, , , 168.00, 138.00, 30.00, 28.50, 15.24, 13.26, 168.00, 138.00, 30.00, ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkSubLedgerReportwithSortingOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[5]")
		private static WebElement cashAndBankBooksMenu;
		
		@FindBy(xpath="(//span[contains(text(),'Cash Book')])[1]")
		private static WebElement cashBook;
		
		@FindBy(xpath="(//span[contains(text(),'Bank Book')])[2]")
		private static WebElement bankBook;
		
		@FindBy(xpath="//span[contains(text(),'Petty Cash Book')]")
		private static WebElement pettyCashBook;
		
		@FindBy(xpath="//span[contains(text(),'Day Book')]")
		private static WebElement dayBook;
		
		@FindBy(xpath="//span[contains(text(),'Virtual Bank Ledger')]")
		private static WebElement virtualBankLedger;
		
		@FindBy(xpath="(//span[contains(text(),'Bank Reconciliation')])[1]")
		private static WebElement bankReconciliation;
		
		@FindBy(xpath="//span[contains(text(),'Bank Reconciliation Import')]")
		private static WebElement bankReconciliationImport;
		
		@FindBy(xpath="//span[contains(text(),'Customer Vendor Reconciliation')]")
		private static WebElement customerVendorReconciliation;
		
		@FindBy(xpath="//span[contains(text(),'Bank Reconciliation Statement')]")
		private static WebElement bankReconciliationStatement;
		
		@FindBy(xpath="//span[contains(text(),'Cheque Discounting')]")
		private static WebElement chequeDiscounting;
		
		
		public boolean checkCashBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook));
			cashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys("Current Assets");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 2, 23/11/2021, Pmt : 2, HDFC, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 3, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 4, 23/11/2021, Rct : 2, HDFC, 6.00, , 12.00, 6.00, , 12.00, 6.00, , 12.00, 5, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, 12.00, 100.00, 100.00, 12.00, 7.00, 7.00, 12.00, 6, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 18.00, , 30.00, 18.00, , 2.10, 9.90, 7, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 51.00, , 33.00, 51.00, , 2.31, 7.59, 8, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 57.00, , 6.00, 57.00, , 0.42, 7.17, 9, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 63.00, , 6.00, 63.00, , 0.42, 6.75, 10, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 37.00, 100.00, , 37.00, 7.00, , 13.75, 11, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 97.00, 60.00, , 97.00, 4.20, , 17.95, 12, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 127.00, 30.00, , 127.00, 2.10, , 20.05]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 247.00, 120.00, , 247.00, 8.40, , 28.45, 14, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 367.00, 120.00, , 367.00, 8.40, , 36.85, 15, 23/11/2021, NDT50 : 7, Sales - Computers, 90.00, , 457.00, 90.00, , 457.00, 6.30, , 43.15, 16, 23/11/2021, NDT50 : 7, Sales - Computers, 100.00, , 557.00, 100.00, , 557.00, 7.00, , 50.15, 17, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 677.00, 120.00, , 677.00, 8.40, , 58.55, 18, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 19, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 20, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 21, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 22, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 23, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}


		@FindBy(xpath="(//*[@id='FilterFields_510_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement cashBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_510_0_DefaultFilter_0']")
		private static WebElement cashBook_DefaultFilterTxt;
		
		
		@FindBy(xpath="//*[@id='dvReportDetails']/div//th")
		private static List<WebElement> cashBook_headerList;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[2]")
		private static WebElement sortBtn;
		
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[2]//ul/li[1]")
		private static WebElement ascendingBtn;
		
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[2]//ul/li[2]")
		private static WebElement decendingBtn;
		
		public boolean checkCashBookReportwithAscendingOrderColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook));
			cashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys("Current Assets");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			Thread.sleep(1000);
			
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook_3rdColumnList));
			
			int reportHeaderCount=cashBook_headerList.size();
			ArrayList<String> reportHeader1ListArray = new ArrayList<String>();

			for(int i=0;i<reportHeaderCount;i++){
				String data=cashBook_headerList.get(i).getText();
				reportHeader1ListArray.add(data);
				System.err.println(data);
				
				if(data.equals("Account")){
					cashBook_headerList.get(i).click();
					sortBtn.click();
					Thread.sleep(1000);
					
					//for ascending order
					ascendingBtn.click();
					Thread.sleep(1000);
					
				/*	
					//for descendingOrder
					decendingBtn.click();
					Thread.sleep(1000);*/
				}
			}
			
			
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, , 100.00, 100.00, , 7.00, 7.00, , 2, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 3, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 4, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 6.00, , 6.00, 6.00, , 0.42, 0.42, 5, 23/11/2021, Rct : 2, HDFC, 6.00, , , 6.00, , , 6.00, , 5.58, 6, 23/11/2021, Pmt : 2, HDFC, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 11.58, 7, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 106.00, 100.00, , 106.00, 7.00, , 18.58, 8, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 166.00, 60.00, , 166.00, 4.20, , 22.78, 9, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 196.00, 30.00, , 196.00, 2.10, , 24.88, 10, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 316.00, 120.00, , 316.00, 8.40, , 33.28, 11, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 436.00, 120.00, , 436.00, 8.40, , 41.68, 12, 23/11/2021, NDT50 : 7, Sales - Computers, 90.00, , 526.00, 90.00, , 526.00, 6.30, , 47.98]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 7, Sales - Computers, 100.00, , 626.00, 100.00, , 626.00, 7.00, , 54.98, 14, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 746.00, 120.00, , 746.00, 8.40, , 63.38, 15, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 626.00, , 120.00, 626.00, , 8.40, 54.98, 16, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 596.00, , 30.00, 596.00, , 2.10, 52.88, 17, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 563.00, , 33.00, 563.00, , 2.31, 50.57, 18, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 613.00, 50.00, , 613.00, 3.50, , 54.07, 19, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 581.50, , 31.50, 581.50, , 2.21, 51.87, 20, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 550.00, , 31.50, 550.00, , 2.21, 49.66, 21, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 544.00, , 6.00, 544.00, , 0.42, 49.24, 22, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 23, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		public boolean checkCashBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				cashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook_DefaultFilterTxt));
			cashBook_DefaultFilterTxt.click();
			cashBook_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			cashBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 2, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 3, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, , 100.00, 100.00, , 7.00, 7.00, , 4, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 6.00, , 6.00, 6.00, , 0.42, 0.42, 5, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 94.00, 100.00, , 94.00, 7.00, , 6.58, 6, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 154.00, 60.00, , 154.00, 4.20, , 10.78, 7, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 184.00, 30.00, , 184.00, 2.10, , 12.88, 8, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 304.00, 120.00, , 304.00, 8.40, , 21.28, 9, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 424.00, 120.00, , 424.00, 8.40, , 29.68, 10, 23/11/2021, NDT50 : 7, Sales - Computers, 90.00, , 514.00, 90.00, , 514.00, 6.30, , 35.98, 11, 23/11/2021, NDT50 : 7, Sales - Computers, 100.00, , 614.00, 100.00, , 614.00, 7.00, , 42.98, 12, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 734.00, 120.00, , 734.00, 8.40, , 51.38]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 614.00, , 120.00, 614.00, , 8.40, 42.98, 14, , Total, , 852.00, 238.00, 614.00, 852.00, 238.00, 614.00, 70.80, 27.82, 42.98, 15, , Closing balance, , 614.00, , , 614.00, , , 42.98, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReportFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
		
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				cashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
					/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
				{
					return true;
				}
				else
				{
					return false;
				}
		}
		
		

		public boolean checkCashBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT44 : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI ";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
			
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "100.00";
		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference = "NDT50:1 : 23 Nov 2021";
		
		String actR1VAT = select1stRow_7thColumn.getText();
		String expR1VAT = "0.00";
		
				

	 	
		System.out.println("**********************checkCashBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Account          : "+actAccount			+"  Value Expected  "+actAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName       : "+actAccount			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount 			: "+actR1Amount			+"  Value Expected  "+expR1Amount);
		System.out.println("Reference           : "+actR1Reference				+"  Value Expected  "+expR1Reference);
		System.out.println("VAT		        : "+actR1VAT			+"  Value Expected  "+expR1VAT);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Account.equalsIgnoreCase(expR1Account) 
			  && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1Amount.equalsIgnoreCase(expR1Amount) 
			   && actR1Reference.equalsIgnoreCase(expR1Reference)/* && actR1VAT.equalsIgnoreCase(expR1VAT)*/ ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}
	
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement showConsolidatedAmountsOption;
	
		@FindBy(xpath="//select[@id='RITCombobox__1']")
		private static WebElement balancingTypeDropDown;
		
		public boolean checkCashBookReportwithShowconsolidatedamountsOptionandBalancingType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook));
			cashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(showConsolidatedAmountsOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showConsolidatedAmountsOption));
			showConsolidatedAmountsOption.click();
			
			Thread.sleep(2000);
			
			
			
			accountName.sendKeys("Current Assets");
			Thread.sleep(2000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balancingTypeDropDown));
			balancingTypeDropDown.click();
			Select s1=new Select(balancingTypeDropDown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 2, 23/11/2021, Pmt : 2, HDFC, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 3, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 4, 23/11/2021, Rct : 2, HDFC, 6.00, , 12.00, 6.00, , 12.00, 6.00, , 12.00, 5, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, 12.00, 100.00, 100.00, 12.00, 7.00, 7.00, 12.00, 6, 23/11/2021, NDT45 : 1, Vendor B, , 63.00, 51.00, , 63.00, 51.00, , 4.41, 7.59, 7, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 57.00, , 6.00, 57.00, , 0.42, 7.17, 8, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 63.00, , 6.00, 63.00, , 0.42, 6.75, 9, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 37.00, 100.00, , 37.00, 7.00, , 13.75, 10, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 97.00, 60.00, , 97.00, 4.20, , 17.95, 11, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 127.00, 30.00, , 127.00, 2.10, , 20.05, 12, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 247.00, 120.00, , 247.00, 8.40, , 28.45]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 7, Sales - Computers, 430.00, , 677.00, 430.00, , 677.00, 30.10, , 58.55, 14, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 15, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 16, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 17, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 18, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 19, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		

		
		public boolean checkBankBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBook));
			bankBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys("Bank");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, 2, 23/11/2021, Pmt : 2, HDFC, 6.00, , , 6.00, , , 6.00, , , 3, 23/11/2021, Rct : 1, Customer A, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 4, 23/11/2021, Rct : 2, HDFC, 6.00, , 12.00, 6.00, , 12.00, 6.00, , 12.00, 5, 23/11/2021, NDT44 : 1, Customer A, 100.00, , 112.00, 100.00, , 112.00, 7.00, , 19.00, 6, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 82.00, , 30.00, 82.00, , 2.10, 16.90, 7, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 49.00, , 33.00, 49.00, , 2.31, 14.59, 8, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 43.00, , 6.00, 43.00, , 0.42, 14.17, 9, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 11.50, , 31.50, 11.50, , 2.21, 11.97, 10, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 61.50, 50.00, , 61.50, 3.50, , 15.47, 11, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 30.00, , 31.50, 30.00, , 2.21, 13.26, 12, , Total, , 168.00, 138.00, 30.00, 168.00, 138.00, 30.00, 28.50, 15.24, 13.26]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, , Closing balance, , 30.00, , , 30.00, , , 13.26, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkBankBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}


		@FindBy(xpath="(//*[@id='FilterFields_511_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement bankBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_511_0_DefaultFilter_0']")
		private static WebElement bankBook_DefaultFilterTxt;
		
		
		public boolean checkBankBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				bankBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBook_DefaultFilterTxt));
			bankBook_DefaultFilterTxt.click();
			bankBook_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			bankBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				Thread.sleep(2000);
				
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
				System.err.println("first row"+data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Pmt : 1, Customer A, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Rct : 1, Customer A, 6.00, , , 6.00, , , 6.00, , ]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT44 : 1, Customer A, 100.00, , 100.00, 100.00, , 100.00, 7.00, , 7.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[, Total, , 106.00, 6.00, 100.00, 106.00, 6.00, 100.00, 13.00, 6.00, 7.00]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, Closing balance, , 100.00, , , 100.00, , , 7.00, , ]";
			
			
			System.out.println("***************************checkBankBookReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				bankBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		@FindBy(xpath="//input[@id='id_header_67108866']")
		private static WebElement chequeNOTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108981']")
		private static WebElement pdcNOTxt;

		public boolean checkBankBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("RCT : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String  actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeNOTxt));
		String actChequeNo = chequeNOTxt.getAttribute("value");
		String expChequeNo = "PDR1";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcNOTxt));
		String actPDCNo = pdcNOTxt.getAttribute("value");
		String expPDCNo = "1";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
			
		String actR1Amount = select1stRow_2ndColumn.getText();
		String expR1Amount = "6.00";
		
		String actR1Reference = select1stRow_3rdColumn.getText();
		String expR1Reference = "New Reference";
		
		
		
				

	 	
		System.out.println("**********************checkBankBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs	:"		+		actOpenWindowsCount 	+		"Value Expected"	+	expOpenWindowsCount);
		
		System.out.println("Document No:"		+		actDocNo				+		"Value Expected"	+	expDocNo);
		System.out.println("Account: "			+actAccount						+		"Value Expected"	+	actAccount);
		System.out.println("Department: "		+actDepartment					+		"Value Expected"	+	expDepartment);
		System.out.println("ChequeNo: "			+actChequeNo					+		"Value Expected  "	+		expChequeNo);
		System.out.println("PDCNo: "			+actPDCNo						+		"Value Expected  "	+	expPDCNo);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName: "		+		actAccount		+		"Value Expected  "		+		expR1Account);
		System.out.println("Amount: "			+		actR1Amount		+		"Value Expected  "		+		expR1Amount);
		System.out.println("Reference: "		+		actR1Reference	+		"Value Expected  "		+		expR1Reference);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actChequeNo.equalsIgnoreCase(expChequeNo) 
			   && actPDCNo.equalsIgnoreCase(expPDCNo) && actR1Account.equalsIgnoreCase(expR1Account) 
			   && actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference)  ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}
	
		
			
		public boolean checkBankBookReportwithShowconsolidatedamountsOptionandBalancingType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBook));
			bankBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(showConsolidatedAmountsOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showConsolidatedAmountsOption));
			showConsolidatedAmountsOption.click();
			
			Thread.sleep(2000);
			
			
			
			accountName.sendKeys("Bank");
			Thread.sleep(2000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balancingTypeDropDown));
			balancingTypeDropDown.click();
			Select s1=new Select(balancingTypeDropDown);
			s1.selectByValue("2");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, 2, 23/11/2021, Pmt : 2, HDFC, 6.00, , , 6.00, , , 6.00, , , 3, 23/11/2021, Rct : 1, Customer A, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 4, 23/11/2021, Rct : 2, HDFC, 6.00, , 12.00, 6.00, , 12.00, 6.00, , 12.00, 5, 23/11/2021, NDT44 : 1, Customer A, 100.00, , 112.00, 100.00, , 112.00, 7.00, , 19.00, 6, 23/11/2021, NDT45 : 1, Vendor B, , 63.00, 49.00, , 63.00, 49.00, , 4.41, 14.59, 7, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 43.00, , 6.00, 43.00, , 0.42, 14.17, 8, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 11.50, , 31.50, 11.50, , 2.21, 11.97, 9, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 61.50, 50.00, , 61.50, 3.50, , 15.47, 10, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 30.00, , 31.50, 30.00, , 2.21, 13.26, 11, , week-99 total, , 168.00, 138.00, 30.00, 168.00, 138.00, 30.00, 28.50, 15.24, 13.26, 12, , Closing balance, , 30.00, , , 30.00, , , 13.26, , ]";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
		/*	int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 7, Sales - Computers, 430.00, , 677.00, 430.00, , 677.00, 30.10, , 58.55, 14, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 15, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 16, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 17, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 18, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 19, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkBankBookReportswithShowconsolidatedamountsOptionandBalancingType***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
			//System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) //&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}


			
		public boolean checkPettyCashBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBook));
			pettyCashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys("Current Assets");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 2, 23/11/2021, Pmt : 2, HDFC, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 3, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 4, 23/11/2021, Rct : 2, HDFC, 6.00, , 12.00, 6.00, , 12.00, 6.00, , 12.00, 5, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, 12.00, 100.00, 100.00, 12.00, 7.00, 7.00, 12.00, 6, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 18.00, , 30.00, 18.00, , 2.10, 9.90, 7, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 51.00, , 33.00, 51.00, , 2.31, 7.59, 8, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 57.00, , 6.00, 57.00, , 0.42, 7.17, 9, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 63.00, , 6.00, 63.00, , 0.42, 6.75, 10, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 37.00, 100.00, , 37.00, 7.00, , 13.75, 11, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 97.00, 60.00, , 97.00, 4.20, , 17.95, 12, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 127.00, 30.00, , 127.00, 2.10, , 20.05]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 247.00, 120.00, , 247.00, 8.40, , 28.45, 14, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 367.00, 120.00, , 367.00, 8.40, , 36.85, 15, 23/11/2021, NDT50 : 7, Sales - Computers, 90.00, , 457.00, 90.00, , 457.00, 6.30, , 43.15, 16, 23/11/2021, NDT50 : 7, Sales - Computers, 100.00, , 557.00, 100.00, , 557.00, 7.00, , 50.15, 17, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 677.00, 120.00, , 677.00, 8.40, , 58.55, 18, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 19, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 20, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 21, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 22, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 23, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkPettyCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}


		@FindBy(xpath="//*[@id='FilterFields_512_0']/ul[1]/li[1]/div/label/span")
		private static WebElement pettyCashBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_512_0_DefaultFilter_0']")
		private static WebElement pettyCashBook_DefaultFilterTxt;
		
		
		public boolean checkPettyCashBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				pettyCashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBook_DefaultFilterTxt));
			pettyCashBook_DefaultFilterTxt.click();
			pettyCashBook_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			pettyCashBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 2, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 3, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, , 100.00, 100.00, , 7.00, 7.00, , 4, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 6.00, , 6.00, 6.00, , 0.42, 0.42, 5, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 94.00, 100.00, , 94.00, 7.00, , 6.58, 6, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 154.00, 60.00, , 154.00, 4.20, , 10.78, 7, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 184.00, 30.00, , 184.00, 2.10, , 12.88, 8, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 304.00, 120.00, , 304.00, 8.40, , 21.28, 9, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 424.00, 120.00, , 424.00, 8.40, , 29.68, 10, 23/11/2021, NDT50 : 7, Sales - Computers, 90.00, , 514.00, 90.00, , 514.00, 6.30, , 35.98, 11, 23/11/2021, NDT50 : 7, Sales - Computers, 100.00, , 614.00, 100.00, , 614.00, 7.00, , 42.98, 12, 23/11/2021, NDT50 : 7, Sales - Computers, 120.00, , 734.00, 120.00, , 734.00, 8.40, , 51.38]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 614.00, , 120.00, 614.00, , 8.40, 42.98, 14, , Total, , 852.00, 238.00, 614.00, 852.00, 238.00, 614.00, 70.80, 27.82, 42.98, 15, , Closing balance, , 614.00, , , 614.00, , , 42.98, , ]";			
			System.out.println("***************************checkPettyCashBookReportFilterOption*********************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			;
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				pettyCashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List)
					 && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
	

		public boolean checkPettyCashBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT44 : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String  actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
		String actR1Taxcode= select1stRow_2ndColumn.getText();
		String expR1Taxcode="Std Rate";
			
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "100.00";
		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference = "NDT50:1 : 23 Nov 2021";
		
		
		
				

	 	
		System.out.println("**********************checkBankBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs		:"			+	actOpenWindowsCount 	+		"Value Expected"		+	expOpenWindowsCount);
		
		System.out.println("Document No		:"		+		actDocNo		+		"Value Expected"		+		expDocNo);
		System.out.println("Account			:"		+		actAccount		+		"Value Expected"		+		actAccount);
		System.out.println("Department		:"		+actDepartment			+		"Value Expected"		+		expDepartment);
		System.out.println("Placeofsupply	:"		+actPlaceOfSupply			+		"Value Expected"		+	expPlaceOfSupply);
		System.out.println("Jurcidition		:"		+actJurisdiction			+		"Value Expected"		+	expJurisdiction);

		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR1Account);
		System.out.println("Taccode:"			+actR1Taxcode			+		"Value Expected  "+expR1Taxcode);

		System.out.println("Amount: "			+actR1Amount		+		"Value Expected  "		+expR1Amount);
		System.out.println("Reference: "		+actR1Reference		+		"Value Expected  "		+expR1Reference);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		/*if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Account.equalsIgnoreCase(expR1Account) 
			   && actR1Taxcode.equalsIgnoreCase(expR1Taxcode)&& actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference)  )*/
		if(actDocNo.equalsIgnoreCase(expDocNo))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}
	
		
			
		public boolean checkPettyCashBookReportwithShowconsolidatedamountsOptionandBalancingType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBook));
			pettyCashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(showConsolidatedAmountsOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showConsolidatedAmountsOption));
			showConsolidatedAmountsOption.click();
			
			Thread.sleep(2000);
			
			
			
			accountName.sendKeys("Current Assets");
			Thread.sleep(2000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balancingTypeDropDown));
			balancingTypeDropDown.click();
			Select s1=new Select(balancingTypeDropDown);
			s1.selectByValue("2");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Customer A, 6.00, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 2, 23/11/2021, Pmt : 2, HDFC, 6.00, , 6.00, 6.00, , 6.00, 6.00, , 6.00, 3, 23/11/2021, Rct : 1, Customer A, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 6.00, 4, 23/11/2021, Rct : 2, HDFC, 6.00, , 12.00, 6.00, , 12.00, 6.00, , 12.00, 5, 23/11/2021, NDT44 : 1, Customer A, 100.00, 100.00, 12.00, 100.00, 100.00, 12.00, 7.00, 7.00, 12.00, 6, 23/11/2021, NDT45 : 1, Vendor B, , 63.00, 51.00, , 63.00, 51.00, , 4.41, 7.59, 7, 23/11/2021, NDT46 : 2, HDFC, , 6.00, 57.00, , 6.00, 57.00, , 0.42, 7.17, 8, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 63.00, , 6.00, 63.00, , 0.42, 6.75, 9, 23/11/2021, NDT50 : 1, Sales - Computers, 100.00, , 37.00, 100.00, , 37.00, 7.00, , 13.75, 10, 23/11/2021, NDT50 : 4, Sales - Computers, 60.00, , 97.00, 60.00, , 97.00, 4.20, , 17.95, 11, 23/11/2021, NDT50 : 5, Sales - Computers, 30.00, , 127.00, 30.00, , 127.00, 2.10, , 20.05, 12, 23/11/2021, NDT50 : 6, Sales - Computers, 120.00, , 247.00, 120.00, , 247.00, 8.40, , 28.45]";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			*/
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
		/*	int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 7, Sales - Computers, 430.00, , 677.00, 430.00, , 677.00, 30.10, , 58.55, 14, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 15, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 16, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 17, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 18, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 19, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkPettyCashBookReportswithShowconsolidatedamountsOptionandBalancingType***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
			//System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) //&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}



		
		
		
		
		public boolean checkDayBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBook));
			dayBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
						
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, , Opening Balance, , , , , , 500.00, , 500.00, , 10.00, , 55.50, 2, Sub Total, , , , , , , 500.00, , 500.00, , 10.00, , 55.50, 3, 01-01-2020, 4, OpeBal : 1, Opening Balances Control A/C, , , , , 1,500.00, 1,000.00, 1,000.00, 1,500.00, 20.00, 30.00, 111.00, 166.50, 5, Sub Total, , , , , , 1,500.00, 1,000.00, 1,000.00, 1,500.00, 20.00, 30.00, 111.00, 166.50, 6, 23-11-2021, 7, SalRet : 1, STD RATE COGS ACC INV, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 8, NDT50 : 1, COGS POSTING ACC, , , , , 8.75, , , 8.75, , 8.75, , 0.61, 9, ExeStk : 2, FIFO COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00, 10, Rct : 1, Bank, , , 6.00, , , , , 6.00, , 6.00, , 6.00, 11, NDT44 : 1, Customer A, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 12, ExeStk : 2, BR COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("6")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, NDT50 : 7, STD RATE COGS ACC INV, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 14, NDT50 : 5, Sales - Computers, , , , , , 30.00, 30.00, , 30.00, , 2.10, , 15, NDT50 : 5, WA COGS ACC INV, , , , , , 22.23, 22.23, , 22.23, , 1.56, , 16, NDT50 : 5, COGS POSTING ACC, , , , , 22.23, , , 22.23, , 22.23, , 1.56, 17, NDT50 : 1, BR COGS ACC INV, , , , , , 8.75, 8.75, , 8.75, , 0.61, , 18, NDT57 : SU/IND/TEXT5, WA COGS ACC INV, , , , , 231.00, , , 231.00, , 231.00, , 16.17, 19, NDT52 : 1, Vendor B, , , , , , 50.00, 50.00, , 50.00, , 3.50, , 20, NDT50 : 1, Customer A, , , , , 100.00, , , 100.00, , 100.00, , 7.00, 21, NDT50 : 4, Sales - Computers, , , , , , 60.00, 60.00, , 60.00, , 4.20, , 22, NDT57 : SU/IND/TEXT3, Vendor B, , , , , , 361.50, 361.50, , 361.50, , 25.31, , 23, NDT50 : 4, COGS POSTING ACC, , , , , 3.33, , , 3.33, , 3.33, , 0.23, 24, NDT50 : 4, Customer A, , , , , 60.00, , , 60.00, , 60.00, , 4.20]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, NDT57 : SU/IND/TEXT1, STD RATE COGS ACC INV, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 26, NDT45 : 1, Bank, , , , 63.00, , , 63.00, , 63.00, , 4.41, , 27, NDT50 : 7, BR COGS ACC INV, , , , , , 10.00, 10.00, , 10.00, , 0.70, , 28, NDT50 : 6, Customer A, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 29, NDT57 : SU/IND/TEXT3, STD RATE COGS ACC INV, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 30, NDT50 : 7, Sales - Computers, , , , , , 430.00, 430.00, , 430.00, , 30.10, , 31, NDT50 : 6, STD RATE COGS ACC INV, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 32, Pmt : 2, Bank, , , 6.00, , , , , 6.00, , 6.00, , 6.00, 33, NDT50 : 4, FIFO COGS ACC INV, , , , , , 3.33, 3.33, , 3.33, , 0.23, , 34, Rct : 2, HDFC, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 35, Rct : 1, Customer A, , , , , , 6.00, 6.00, , 6.00, , 6.00, , 36, NDT52 : 1, Bank, , , 50.00, , , , , 50.00, , 50.00, , 3.50]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[37, NDT44 : 1, Bank, , , 100.00, , , , , 100.00, , 100.00, , 7.00, 38, NDT57 : SU/IND/TEXT2, BR COGS ACC INV, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 39, NDT57 : SU/IND/TEXT4, FIFO COGS ACC INV, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 40, NDT55 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 41, NDT51 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 42, NDT50 : 7, COGS POSTING ACC, , , , , 209.11, , , 209.11, , 209.11, , 14.64, 43, ExeStk : 2, WA COGS ACC INV, , , , , 100.00, , , 100.00, , 100.00, , 100.00, 44, NDT50 : 5, Customer A, , , , , 30.00, , , 30.00, , 30.00, , 2.10, 45, NDT45 : 1, Vendor B, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 46, SalRet : 1, Customer A, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 47, NDT50 : 7, FIFO COGS ACC INV, , , , , , 5.00, 5.00, , 5.00, , 0.35, , 48, ExeStk : 2, EXCESS COGS POSTING ACC, , , , , , 130.00, 130.00, , 130.00, , 130.00, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List = "[49, NDT57 : SU/IND/TEXT3, , 330.00, , , , , , , 330.00, , 330.00, , 23.10, 50, NDT50 : 1, Sales - Computers, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 51, NDT46 : 2, VAT INPUT, , , , , , 0.29, 0.29, , 0.29, , 0.02, , 52, NDT46 : 2, Customer A, , , , , , 6.00, 6.00, , 6.00, , 0.42, , 53, NDT51 : 1, VAT ADVANCE PURCHASE, , , , , , 1.50, 1.50, , 1.50, , 0.11, , 54, Pmt : 1, Bank, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 55, SalRet : 1, SR COGS POSTING ACC, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 56, Pmt : 1, Customer A, , , , , 6.00, , , 6.00, , 6.00, , 6.00, 57, ExeStk : 2, STD RATE COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00, 58, NDT47 : 2, Bank, , , , 6.00, , , 6.00, , 6.00, , 0.42, , 59, NDT57 : SU/IND/TEXT2, Vendor B, , , , , , 31.50, 31.50, , 31.50, , 2.21, , 60, NDT57 : SU/IND/TEXT1, , 180.00, , , , , , , 180.00, , 180.00, , 12.60]";
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
			}
			String actPage6List = reportPage5ListArray.toString();
			String expPage6List = "[49, NDT57 : SU/IND/TEXT3, , 330.00, , , , , , , 330.00, , 330.00, , 23.10, 50, NDT50 : 1, Sales - Computers, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 51, NDT46 : 2, VAT INPUT, , , , , , 0.29, 0.29, , 0.29, , 0.02, , 52, NDT46 : 2, Customer A, , , , , , 6.00, 6.00, , 6.00, , 0.42, , 53, NDT51 : 1, VAT ADVANCE PURCHASE, , , , , , 1.50, 1.50, , 1.50, , 0.11, , 54, Pmt : 1, Bank, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 55, SalRet : 1, SR COGS POSTING ACC, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 56, Pmt : 1, Customer A, , , , , 6.00, , , 6.00, , 6.00, , 6.00, 57, ExeStk : 2, STD RATE COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00, 58, NDT47 : 2, Bank, , , , 6.00, , , 6.00, , 6.00, , 0.42, , 59, NDT57 : SU/IND/TEXT2, Vendor B, , , , , , 31.50, 31.50, , 31.50, , 2.21, , 60, NDT57 : SU/IND/TEXT1, , 180.00, , , , , , , 180.00, , 180.00, , 12.60]";
			
			
			System.out.println("*****************************************checkDayBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
			System.out.println(actPage6List);
			System.out.println(expPage6List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&& actPage5List.equalsIgnoreCase(expPage5List)&& actPage6List.equalsIgnoreCase(expPage6List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}


		@FindBy(xpath="(//*[@id='FilterFields_513_0']/li[2])[1]")
		private static WebElement report_FilterCashBankACExpansion;
		
		@FindBy(xpath="(//*[@id='FilterFields_513_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement dayBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="(//input[@id='5002'])[2]")
		private static WebElement report_FilterCashbankACNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_513_0_DefaultFilter_0']")
		private static WebElement dayBook_DefaultFilterTxt;
		
		
		public boolean checkDayBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCashBankACExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBookreport_FilterAccountNameChkbox));
			
			if (report_FilterCashbankACNameChkbox.isSelected()==false) 
			{
				dayBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBook_DefaultFilterTxt));
			dayBook_DefaultFilterTxt.click();
			dayBook_DefaultFilterTxt.sendKeys("Assets");
			
			Thread.sleep(2000);
			
			dayBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23-11-2021, 2, NDT50 : 7, Customer A, , , , , 430.00, , , 430.00, , 430.00, , 30.10, 3, NDT46 : 2, HDFC, , , 6.00, , , , , 6.00, , 6.00, , 0.42, 4, NDT51 : 1, Bank, , , , 31.50, , , 31.50, , 31.50, , 2.21, , 5, NDT47 : 2, Vendor B, , , , , 6.00, , , 6.00, , 6.00, , 0.42, 6, Rct : 2, Bank, , , 6.00, , , , , 6.00, , 6.00, , 6.00, 7, NDT50 : 6, Sales - Computers, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 8, NDT55 : 1, Bank, , , , 31.50, , , 31.50, , 31.50, , 2.21, , 9, SalRet : 1, Sales - Computers, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 10, Pmt : 2, HDFC, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 11, Pmt : 1, Customer A, , , , , 6.00, , , 6.00, , 6.00, , 6.00, 12, NDT47 : 2, Bank, , , , 6.00, , , 6.00, , 6.00, , 0.42, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, NDT50 : 1, Sales - Computers, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 14, Pmt : 1, Bank, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 15, NDT46 : 2, Customer A, , , , , , 6.00, 6.00, , 6.00, , 0.42, , 16, NDT50 : 5, Customer A, , , , , 30.00, , , 30.00, , 30.00, , 2.10, 17, SalRet : 1, Customer A, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 18, NDT45 : 1, Vendor B, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 19, NDT51 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 20, NDT55 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 21, NDT52 : 1, Bank, , , 50.00, , , , , 50.00, , 50.00, , 3.50, 22, NDT44 : 1, Bank, , , 100.00, , , , , 100.00, , 100.00, , 7.00, 23, Rct : 1, Customer A, , , , , , 6.00, 6.00, , 6.00, , 6.00, , 24, Pmt : 2, Bank, , , 6.00, , , , , 6.00, , 6.00, , 6.00]";			
			System.out.println("***************************checkDayBookReportFilterOption*********************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			;
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBookreport_FilterAccountNameChkbox));
			
			if (report_FilterCashbankACNameChkbox.isSelected()==true) 
			{
				dayBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List)
					 && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
	

		public boolean checkDayBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Bank") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String  actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";
		*/
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
	/*	String actR1Taxcode= select1stRow_2ndColumn.getText();
		String expR1Taxcode="Std Rate";
	*/		
		String actR1Amount = select1stRow_2ndColumn.getText();
		String expR1Amount = "6.00";
		
		String actR1Reference = select1stRow_3rdColumn.getText();
		String expR1Reference = "New Reference";
	/*	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account = "Bank";
		
		String actR2Taxcode= select2ndRow_2ndColumn.getText();
		String expR2Taxcode="Std Rate";
			
		String actR2Amount = select2ndRow_3rdColumn.getText();
		String expR2Amount = "100.00";
		
		String actR2Reference = select2ndRow_4thColumn.getText();
		String expR2Reference = "NDT50:1 : 23 Nov 2021";
		*/
		
		
				

	 	
		System.out.println("**********************checkDayBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs		:"			+	actOpenWindowsCount 	+		"Value Expected"		+	expOpenWindowsCount);
		
		System.out.println("Document No		:"		+		actDocNo		+		"Value Expected"		+		expDocNo);
		System.out.println("Account			:"		+		actAccount		+		"Value Expected"		+		actAccount);
		System.out.println("Department		:"		+actDepartment			+		"Value Expected"		+		expDepartment);
	//	System.out.println("Placeofsupply	:"		+actPlaceOfSupply			+		"Value Expected"		+	expPlaceOfSupply);
	//	System.out.println("Jurcidition		:"		+actJurisdiction			+		"Value Expected"		+	expJurisdiction);

		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR1Account);
	//	System.out.println("Taxcode:"			+actR1Taxcode			+		"Value Expected  "+expR1Taxcode);

		System.out.println("Amount: "			+actR1Amount		+		"Value Expected  "		+expR1Amount);
		System.out.println("Reference: "		+actR1Reference		+		"Value Expected  "		+expR1Reference);
/*		
System.out.println("*******************************ROW2**********************************");
		
		System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR2Account);
		System.out.println("Taxcode:"			+actR2Taxcode			+		"Value Expected  "+expR2Taxcode);

		System.out.println("Amount: "			+actR2Amount		+		"Value Expected  "		+expR2Amount);
		System.out.println("Reference: "		+actR2Reference		+		"Value Expected  "		+expR2Reference);
		
		*/	
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment)/* && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction)*/ && actR1Account.equalsIgnoreCase(expR1Account) 
			  /* && actR1Taxcode.equalsIgnoreCase(expR1Taxcode)*/&& actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference) 
			  /* &&actR2Account.equalsIgnoreCase(expR2Account)  && actR2Taxcode.equalsIgnoreCase(expR2Taxcode)&& actR2Amount.equalsIgnoreCase(expR2Amount)&& actR2Reference.equalsIgnoreCase(expR2Reference) */ )
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}
	
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[4]/label/span")
		private static WebElement clubCashSalesfortheDayOption;
			
		public boolean checkDayBookReportwithClubCashSalesfortheDay() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBook));
			dayBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(clubCashSalesfortheDayOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clubCashSalesfortheDayOption));
			clubCashSalesfortheDayOption.click();
			
			Thread.sleep(2000);
			
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, , Opening Balance, , , , , , 500.00, , 500.00, , 10.00, , 55.50, 2, Sub Total, , , , , , , 500.00, , 500.00, , 10.00, , 55.50, 3, 01-01-2020, 4, OpeBal : 1, Opening Balances Control A/C, , , , , 1,500.00, 1,000.00, 1,000.00, 1,500.00, 20.00, 30.00, 111.00, 166.50, 5, Sub Total, , , , , , 1,500.00, 1,000.00, 1,000.00, 1,500.00, 20.00, 30.00, 111.00, 166.50, 6, 23-11-2021, 7, NDT57 : SU/IND/TEXT1, , 180.00, , , , , , , 180.00, , 180.00, , 12.60, 8, NDT57 : SU/IND/TEXT1, STD RATE COGS ACC INV, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 9, NDT57 : SU/IND/TEXT1, Vendor B, , , , , , 243.00, 243.00, , 243.00, , 17.01, , 10, NDT57 : SU/IND/TEXT2, BR COGS ACC INV, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 11, NDT57 : SU/IND/TEXT2, Vendor B, , , , , , 31.50, 31.50, , 31.50, , 2.21, , 12, NDT57 : SU/IND/TEXT3, , 330.00, , , , , , , 330.00, , 330.00, , 23.10]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("6")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, NDT57 : SU/IND/TEXT3, STD RATE COGS ACC INV, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 14, NDT57 : SU/IND/TEXT3, Vendor B, , , , , , 361.50, 361.50, , 361.50, , 25.31, , 15, NDT57 : SU/IND/TEXT4, FIFO COGS ACC INV, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 16, NDT57 : SU/IND/TEXT4, Vendor B, , , , , , 31.50, 31.50, , 31.50, , 2.21, , 17, NDT57 : SU/IND/TEXT5, Vendor B, , , , , , 231.00, 231.00, , 231.00, , 16.17, , 18, NDT57 : SU/IND/TEXT5, WA COGS ACC INV, , , , , 231.00, , , 231.00, , 231.00, , 16.17, 19, NDT45 : 1, Bank, , , , 63.00, , , 63.00, , 63.00, , 4.41, , 20, NDT45 : 1, Vendor B, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 21, ExeStk : 2, BR COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00, 22, ExeStk : 2, EXCESS COGS POSTING ACC, , , , , , 130.00, 130.00, , 130.00, , 130.00, , 23, ExeStk : 2, FIFO COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00, 24, ExeStk : 2, STD RATE COGS ACC INV, , , , , 10.00, , , 10.00, , 10.00, , 10.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, ExeStk : 2, WA COGS ACC INV, , , , , 100.00, , , 100.00, , 100.00, , 100.00, 26, NDT50 : 1, BR COGS ACC INV, , , , , , 8.75, 8.75, , 8.75, , 0.61, , 27, NDT50 : 1, COGS POSTING ACC, , , , , 8.75, , , 8.75, , 8.75, , 0.61, 28, NDT50 : 1, Customer A, , , , , 100.00, , , 100.00, , 100.00, , 7.00, 29, NDT50 : 1, Sales - Computers, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 30, NDT50 : 4, COGS POSTING ACC, , , , , 3.33, , , 3.33, , 3.33, , 0.23, 31, NDT50 : 4, Customer A, , , , , 60.00, , , 60.00, , 60.00, , 4.20, 32, NDT50 : 4, FIFO COGS ACC INV, , , , , , 3.33, 3.33, , 3.33, , 0.23, , 33, NDT50 : 4, Sales - Computers, , , , , , 60.00, 60.00, , 60.00, , 4.20, , 34, NDT50 : 5, COGS POSTING ACC, , , , , 22.23, , , 22.23, , 22.23, , 1.56, 35, NDT50 : 5, Customer A, , , , , 30.00, , , 30.00, , 30.00, , 2.10, 36, NDT50 : 5, Sales - Computers, , , , , , 30.00, 30.00, , 30.00, , 2.10, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[37, NDT50 : 5, WA COGS ACC INV, , , , , , 22.23, 22.23, , 22.23, , 1.56, , 38, NDT50 : 6, COGS POSTING ACC, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 39, NDT50 : 6, Customer A, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 40, NDT50 : 6, Sales - Computers, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 41, NDT50 : 6, STD RATE COGS ACC INV, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 42, NDT50 : 7, BR COGS ACC INV, , , , , , 10.00, 10.00, , 10.00, , 0.70, , 43, NDT50 : 7, COGS POSTING ACC, , , , , 209.11, , , 209.11, , 209.11, , 14.64, 44, NDT50 : 7, Customer A, , , , , 430.00, , , 430.00, , 430.00, , 30.10, 45, NDT50 : 7, FIFO COGS ACC INV, , , , , , 5.00, 5.00, , 5.00, , 0.35, , 46, NDT50 : 7, Sales - Computers, , , , , , 430.00, 430.00, , 430.00, , 30.10, , 47, NDT50 : 7, STD RATE COGS ACC INV, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 48, NDT50 : 7, WA COGS ACC INV, , , , , , 74.11, 74.11, , 74.11, , 5.19, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List = "[49, SalRet : 1, Customer A, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 50, SalRet : 1, Sales - Computers, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 51, SalRet : 1, SR COGS POSTING ACC, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 52, SalRet : 1, STD RATE COGS ACC INV, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 53, NDT44 : 1, Bank, , , 100.00, , , , , 100.00, , 100.00, , 7.00, 54, NDT44 : 1, Customer A, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 55, NDT52 : 1, Bank, , , 50.00, , , , , 50.00, , 50.00, , 3.50, 56, NDT52 : 1, Vendor B, , , , , , 50.00, 50.00, , 50.00, , 3.50, , 57, NDT51 : 1, Bank, , , , 31.50, , , 31.50, , 31.50, , 2.21, , 58, NDT51 : 1, VAT ADVANCE PURCHASE, , , , , , 1.50, 1.50, , 1.50, , 0.11, , 59, NDT51 : 1, VAT INPUT, , , , , 1.50, , , 1.50, , 1.50, , 0.11, 60, NDT51 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21]";
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
			}
			String actPage6List = reportPage5ListArray.toString();
			String expPage6List = "[49, SalRet : 1, Customer A, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 50, SalRet : 1, Sales - Computers, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 51, SalRet : 1, SR COGS POSTING ACC, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 52, SalRet : 1, STD RATE COGS ACC INV, , , , , 120.00, , , 120.00, , 120.00, , 8.40, 53, NDT44 : 1, Bank, , , 100.00, , , , , 100.00, , 100.00, , 7.00, 54, NDT44 : 1, Customer A, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 55, NDT52 : 1, Bank, , , 50.00, , , , , 50.00, , 50.00, , 3.50, 56, NDT52 : 1, Vendor B, , , , , , 50.00, 50.00, , 50.00, , 3.50, , 57, NDT51 : 1, Bank, , , , 31.50, , , 31.50, , 31.50, , 2.21, , 58, NDT51 : 1, VAT ADVANCE PURCHASE, , , , , , 1.50, 1.50, , 1.50, , 0.11, , 59, NDT51 : 1, VAT INPUT, , , , , 1.50, , , 1.50, , 1.50, , 0.11, 60, NDT51 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21]";
			
			
			System.out.println("*****************************************checkDayBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
			System.out.println(actPage6List);
			System.out.println(expPage6List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&& actPage5List.equalsIgnoreCase(expPage5List)&& actPage6List.equalsIgnoreCase(expPage6List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[1]/div/label/span")
		private static WebElement selectAllChckbox;

		
		public boolean checkVirtualBankLedgerBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualBankLedger));
			virtualBankLedger.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllChckbox));
			selectAllChckbox.click();
			Thread.sleep(1000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
						
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Bank 121-001, 2, 23/11/2021, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 28.50, 14.82, 13.68, 0.02, 0.42, 0.40, 3, Sub Total, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 28.50, 14.82, 13.68, 0.02, 0.42, 0.40, 4, HDFC HDFC, 5, 23/11/2021, , 12.00, 12.00, 6.29, , 6.29, , 12.00, 12.00, 6.29, , 6.29, , 12.00, 12.00, 0.44, , 0.44, 6, Sub Total, , 12.00, 12.00, 6.29, , 6.29, , 12.00, 12.00, 6.29, , 6.29, , 12.00, 12.00, 0.44, , 0.44, 7, Grand Total, 168.00, 144.00, 24.00, 6.58, 6.00, 0.58, 168.00, 144.00, 24.00, 6.58, 6.00, 0.58, 28.50, 26.82, 1.68, 0.46, 0.42, 0.04]";
			
									
			
			System.out.println("*****************************************checkVirtualBankLedgerBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			
			
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List)  ) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}


				
		@FindBy(xpath="(//*[@id='FilterFields_722_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement VirtualBankLedgerBookreport_FilterAccountNameChkbox;
		
		//@FindBy(xpath="(//input[@id='5002'])[2]")
		//private static WebElement report_FilterCashbankACNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_722_0_DefaultFilter_0']")
		private static WebElement VirtualBankLedgerBook_DefaultFilterTxt;
		
		
		public boolean checkVirtualBankLedgerBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VirtualBankLedgerBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				VirtualBankLedgerBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VirtualBankLedgerBook_DefaultFilterTxt));
			VirtualBankLedgerBook_DefaultFilterTxt.click();
			VirtualBankLedgerBook_DefaultFilterTxt.sendKeys("Current Assets");
			
			Thread.sleep(2000);
			
			VirtualBankLedgerBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Bank 121-001, 2, 23/11/2021, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 28.50, 14.82, 13.68, 0.02, 0.42, 0.40, 3, Sub Total, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 168.00, 132.00, 36.00, 0.29, 6.00, 5.71, 28.50, 14.82, 13.68, 0.02, 0.42, 0.40, 4, HDFC HDFC, 5, 23/11/2021, , 12.00, 12.00, 6.00, , 6.00, , 12.00, 12.00, 6.00, , 6.00, , 12.00, 12.00, 0.42, , 0.42, 6, Sub Total, , 12.00, 12.00, 6.00, , 6.00, , 12.00, 12.00, 6.00, , 6.00, , 12.00, 12.00, 0.42, , 0.42, 7, Grand Total, 168.00, 144.00, 24.00, 6.29, 6.00, 0.29, 168.00, 144.00, 24.00, 6.29, 6.00, 0.29, 28.50, 26.82, 1.68, 0.44, 0.42, 0.02]";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, Pmt : 1, Bank, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 14, NDT50 : 1, Sales - Computers, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 15, NDT46 : 2, Customer A, , , , , , 6.00, 6.00, , 6.00, , 0.42, , 16, NDT45 : 1, Vendor B, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 17, NDT50 : 5, Customer A, , , , , 30.00, , , 30.00, , 30.00, , 2.10, 18, SalRet : 1, Customer A, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 19, NDT55 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 20, NDT51 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 21, Rct : 1, Customer A, , , , , , 6.00, 6.00, , 6.00, , 6.00, , 22, NDT44 : 1, Bank, , , 100.00, , , , , 100.00, , 100.00, , 7.00, 23, NDT52 : 1, Bank, , , 50.00, , , , , 50.00, , 50.00, , 3.50, 24, Rct : 2, HDFC, , , , 6.00, , , 6.00, , 6.00, , 6.00, ]";			
			*/
			System.out.println("***************************checkVirtualBankLedgerBookReportFilterOption*********************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
			//System.out.println(actPage2List);
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VirtualBankLedgerBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				VirtualBankLedgerBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 7; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) 
					 && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		@FindBy (xpath="//*[@id='id_reportmenudisplay']/ul/li[4]")
		private static WebElement sl_ReportPrintBtn;
		
		public boolean checkVirtualBankLedgerPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkVirtualBankLedgerPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		@FindBy(xpath="//*[@id='dvmainBacktracking']/div[2]/div/table")
		private static WebElement backTrackItemDetailsMonthsTable;

		@FindBy(xpath="//*[@id='dvmainBacktracking']/div[2]/div/table/tbody//td[1]")
		private static List<WebElement> backTrackItemDetailsMonthsTableList;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[2]/table")
		private static WebElement backTrackItemDetailsDaysTable;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[2]/table/tbody//td[1]")
		private static List<WebElement> backTrackItemDetailsDaysTableList;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[3]/table/tbody//td[1]")
		private static List<WebElement> backTrackItemDetailsVouchersTableList;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[3]/table")
		private static WebElement backTrackItemDetailsVouchersTable;

		public boolean checkVirtualBankLedgerBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase("168.00"))
                         {
                    		 
                    		 reportTableColumn2RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("November 2021");
/*
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");*/
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("November 2021")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("23");
/*
			expDayList.add("1");
			expDayList.add("");
			expDayList.add("36.00");
			expDayList.add("");
			expDayList.add("36.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("36.00");
			expDayList.add("");*/
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("23")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT45:1");
			expVouchersList.add("NDT55:1");
			expVouchersList.add("NDT47:2");
			expVouchersList.add("NDT52:1");
			expVouchersList.add("Rct:1");
			expVouchersList.add("NDT51:1");
			expVouchersList.add("Pmt:1");
			expVouchersList.add("Pmt:2");
			expVouchersList.add("Rct:2");
			expVouchersList.add("NDT44:1");
			expVouchersList.add("");

			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase("NDT45:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
				String expDocNo = "1";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount = "Bank";
				
			
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = "INDIA";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply = "Abu Dhabi";

				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction = "Dubai";
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Account = select1stRow_1stColumn.getText();
				String expR1Account = "Bank";
				
				String actR1Taxcode= select1stRow_2ndColumn.getText();
				String expR1Taxcode="Standard Rated Purchase - Recoverable";
					
				String actR1Amount = select1stRow_3rdColumn.getText();
				String expR1Amount = "30.00";
				
				String actR1Reference = select1stRow_4thColumn.getText();
				String expR1Reference = "NDT57:SU/IND/TEXT1 : 23 Nov 2021";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				String actR2Account = select2ndRow_1stColumn.getText();
				String expR2Account = "Bank";
				
				String actR2Taxcode= select2ndRow_2ndColumn.getText();
				String expR2Taxcode="Standard Rated Purchase - Recoverable";
					
				String actR2Amount = select2ndRow_3rdColumn.getText();
				String expR2Amount = "33.00";
				
				String actR2Reference = select2ndRow_4thColumn.getText();
				String expR2Reference = "NDT57:SU/IND/TEXT1 : 23 Nov 2021";
				
				
				
						

			 	
				System.out.println("**********************checkDayBookReportBackTrackOption*********************");
				 
				System.out.println("Open Tabs		:"			+	actOpenWindowsCount 	+		"Value Expected"		+	expOpenWindowsCount);
				
				System.out.println("Document No		:"		+		actDocNo		+		"Value Expected"		+		expDocNo);
				System.out.println("Account			:"		+		actAccount		+		"Value Expected"		+		actAccount);
				System.out.println("Department		:"		+actDepartment			+		"Value Expected"		+		expDepartment);
				System.out.println("Placeofsupply	:"		+actPlaceOfSupply			+		"Value Expected"		+	expPlaceOfSupply);
				System.out.println("Jurcidition		:"		+actJurisdiction			+		"Value Expected"		+	expJurisdiction);

				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR1Account);
				System.out.println("Taxcode:"			+actR1Taxcode			+		"Value Expected  "+expR1Taxcode);

				System.out.println("Amount: "			+actR1Amount		+		"Value Expected  "		+expR1Amount);
				System.out.println("Reference: "		+actR1Reference		+		"Value Expected  "		+expR1Reference);
				
		System.out.println("*******************************ROW2**********************************");
				
				System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR2Account);
				System.out.println("Taxcode:"			+actR2Taxcode			+		"Value Expected  "+expR2Taxcode);

				System.out.println("Amount: "			+actR2Amount		+		"Value Expected  "		+expR2Amount);
				System.out.println("Reference: "		+actR2Reference		+		"Value Expected  "		+expR2Reference);
				
					
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				if ( actOpenWindowsCount==expOpenWindowsCount
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Account.equalsIgnoreCase(expR1Account) 
					   && actR1Taxcode.equalsIgnoreCase(expR1Taxcode)&& actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference) 
					   &&actR2Account.equalsIgnoreCase(expR2Account)  && actR2Taxcode.equalsIgnoreCase(expR2Taxcode)&& actR2Amount.equalsIgnoreCase(expR2Amount)&& actR2Reference.equalsIgnoreCase(expR2Reference)  )
				//if(actDocNo.equalsIgnoreCase(expDocNo))
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return false;
				}
			
			}
	
	
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[6]")
		private static WebElement salesReportMenu;
		
		@FindBy(xpath="//span[contains(text(),'Sales Register')]")
		private static WebElement salesRegister;
		
		@FindBy(xpath="//span[contains(text(),'Summary Sales Book')]")
		private static WebElement summarySalesBook;
		
		@FindBy(xpath="//span[contains(text(),'Sales Return Register')]")
		private static WebElement salesReturnRegister;
		
		@FindBy(xpath="//span[contains(text(),'Monthly Sales Book')]")
		private static WebElement monthlySalesBook;
		
		@FindBy(xpath="//span[contains(text(),'Top Customers List')]")
		private static WebElement topCustomersList;
		
		
		
		
		
		public boolean checkSalesRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegister));
			salesRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT50 : 1, BR COGS ITEM, 100.00, 10.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT50 : 4, FIFO COGS ITEM, 60.00, 6.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT50 : 5, WA COGS ITEM, 30.00, 3.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT50 : 6, STD RATE COGS ITEM, 120.00, 12.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT50 : 7, BR COGS ITEM, 120.00, 12.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[23/11/2021, NDT50 : 7, BR COGS ITEM, 120.00, 12.00, 23/11/2021, NDT50 : 7, FIFO COGS ITEM, 90.00, 9.00]";
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[23/11/2021, NDT50 : 7, WA COGS ITEM, 100.00, 10.00]";
					
					
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[23/11/2021, NDT50 : 7, STD RATE COGS ITEM, 120.00, 12.00]";
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[Grand Total, , , 740.00, 74.00]";
			
			System.out.println("*********************************checkSalesRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) 
				&& actRow8List.equalsIgnoreCase(expRow8List)&& actRow9List.equalsIgnoreCase(expRow9List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				;
				return false;
			}
		}
		
		
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
		
		public boolean checkSalesRegisterReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegister));
			salesRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT50 : 1, BR COGS ITEM, 100.00, 10.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, SalRet : 1, STD RATE COGS ITEM, 120.00, 12.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT50 : 4, FIFO COGS ITEM, 60.00, 6.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT50 : 5, WA COGS ITEM, 30.00, 3.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT50 : 6, STD RATE COGS ITEM, 120.00, 12.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[23/11/2021, NDT50 : 6, STD RATE COGS ITEM, 120.00, 12.00, 23/11/2021, NDT50 : 7, BR COGS ITEM, 120.00, 12.00]";
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[23/11/2021, NDT50 : 7, FIFO COGS ITEM, 90.00, 9.00]";
					
					
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[23/11/2021, NDT50 : 7, WA COGS ITEM, 100.00, 10.00]";
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[23/11/2021, NDT50 : 7, STD RATE COGS ITEM, 120.00, 12.00]";
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[, November total, , 620.00, 62.00]";
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Grand Total, , , 620.00, 62.00]";
			
			
			
			
			
			System.out.println("*********************************checkSalesRegisterReportwithIncludeSalesOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) 
				&& actRow8List.equalsIgnoreCase(expRow8List)&& actRow9List.equalsIgnoreCase(expRow9List)
				&& actRow10List.equalsIgnoreCase(expRow10List)&& actRow11List.equalsIgnoreCase(expRow11List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
				
		
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;

		@FindBy(xpath="//*[@id='FOption_503_0_DefaultFilter_0']")
		private static WebElement salesRegister_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_503_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement salesRegisterreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkSalesRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				salesRegisterreport_FilterWarehouseNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegister_DefaultFilterTxt));
			salesRegister_DefaultFilterTxt.click();
			salesRegister_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(2000);
			
			salesRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT50 : 1, BR COGS ITEM, 100.00, 10.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT50 : 4, FIFO COGS ITEM, 60.00, 6.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT50 : 5, WA COGS ITEM, 30.00, 3.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT50 : 6, STD RATE COGS ITEM, 120.00, 12.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , 310.00, 31.00]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[]";
			
			System.out.println("****************************checkSalesRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				salesRegisterreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 9; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		public boolean checkSalesRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT50 : 7") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "7";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Customer A";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI ";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "SECUNDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = "Sales - Computers";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Pcs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "6.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "12.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select3rdRow_1stColumn.getText();
		String expR2Warehouse = "SECUNDERABAD";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "FIFO COGS ITEM ";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "Std Rate";
		
		String actR2SalesAccount = select2ndRow_4thColumn.getText();
		String expR2SalesAccount = "Sales - Computers";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "Pcs";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "0.00";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = " 9.00 ";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "0.00";

			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		String actR3Warehouse = select2ndRow_1stColumn.getText();
		String expR3Warehouse = "SECUNDERABAD ";
		
		String actR3Item = select3rdRow_2ndColumn.getText();
		String expR3Item = "WA COGS ITEM";
		
		String actR3TaxCode = select3rdRow_3rdColumn.getText();
		String expR3TaxCode = "Std Rate";
		
		String actR3SalesAccount = select3rdRow_4thColumn.getText();
		String expR3SalesAccount = "Sales - Computers";
		
		String actR3Units = select3rdRow_5thColumn.getText();
		String expR3Units = "Pcs";
		
		String actR3Quantity = select3rdRow_9thColumn.getText();
		String expR3Quantity = "0.00";
		
		String actR3Rate = select3rdRow_11thColumn.getText();
		String expR3Rate = "10.00";
		
		String actR3Gross = select3rdRow_12thColumn.getText();
		String expR3Gross = "";
		
		String actR3Batch = select3rdRow_16thColumn.getText();
		String expR3Batch = "0.00";

		
		
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		String actR4Warehouse = select4thRow_1stColumn.getText();
		String expR4Warehouse = "SECUNDERABAD";
		
		String actR4Item = select4thRow_2ndColumn.getText();
		String expR4Item = "STD RATE COGS ITEM";
		
		String actR4TaxCode = select4thRow_3rdColumn.getText();
		String expR4TaxCode = "Std Rate";
		
		String actR4SalesAccount = select4thRow_4thColumn.getText();
		String expR4SalesAccount = "Sales - Computers";
		
		String actR4Units = select2ndRow_5thColumn.getText();
		String expR4Units = "Pcs";
		
		String actR4Quantity = select4thRow_9thColumn.getText();
		String expR4Quantity = "0.00";
		
		String actR4Rate = select4thRow_11thColumn.getText();
		String expR4Rate = "12.00";
		
		String actR4Gross = select4thRow_12thColumn.getText();
		String expR4Gross = "";
		
		String actR4Batch = select4thRow_16thColumn.getText();
		String expR4Batch = "0.00";

		

	 	
		System.out.println("**********************checkSalesRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("SalesAccount : "+actR2SalesAccount	+"  Value Expected  "+expR2SalesAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		
		
	System.out.println("*******************************ROW3**********************************");
		
		System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
		System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
		System.out.println("TaxCode         : "+actR3TaxCode			+"  Value Expected  "+expR3TaxCode);
		System.out.println("SalesAccount : "+actR3SalesAccount	+"  Value Expected  "+expR3SalesAccount);
		System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
		System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
		System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
		System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
		System.out.println("Batch           : "+actR3Batch				+"  Value Expected  "+expR3Batch);
		
		
	System.out.println("*******************************ROW4**********************************");
		
		System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
		System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
		System.out.println("TaxCode         : "+actR4TaxCode			+"  Value Expected  "+expR4TaxCode);
		System.out.println("SalesAccount : "+actR4SalesAccount	+"  Value Expected  "+expR4SalesAccount);
		System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
		System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
		System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
		System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
		System.out.println("Batch           : "+actR4Batch				+"  Value Expected  "+expR4Batch);
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  
			   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2SalesAccount.equalsIgnoreCase(expR2SalesAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch)
			  
			   &&actR2Warehouse.equalsIgnoreCase(expR3Warehouse) 
			   && actR3Item.equalsIgnoreCase(expR3Item) && actR3TaxCode.equalsIgnoreCase(expR3TaxCode) && actR3SalesAccount.equalsIgnoreCase(expR3SalesAccount) 
			   && actR3Units.equalsIgnoreCase(expR3Units) && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) 
			   && actR3Gross.equalsIgnoreCase(expR3Gross) && actR3Batch.equalsIgnoreCase(expR3Batch)
			  
			   &&actR4Warehouse.equalsIgnoreCase(expR4Warehouse) 
			   && actR4Item.equalsIgnoreCase(expR4Item) && actR4TaxCode.equalsIgnoreCase(expR4TaxCode) && actR4SalesAccount.equalsIgnoreCase(expR4SalesAccount) 
			   && actR4Units.equalsIgnoreCase(expR4Units) && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) 
			   && actR4Gross.equalsIgnoreCase(expR4Gross) && actR4Batch.equalsIgnoreCase(expR4Batch) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		public boolean checkSalesRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(3000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		

		public boolean checkSalesReturnsRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegister));
			salesReturnRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, SalRet : 1, Customer A, STD RATE COGS ITEM, 12.00, 10.00, 120.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , , 12.00, 10.00, 120.00]";
			
			
			
						
			System.out.println("*********************************checkSalesReturnRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)) 
			{
			
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_504_0_DefaultFilter_0']")
		private static WebElement salesReturnRegister_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_504_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement salesReturnRegisterreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkSalesReturnRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				salesReturnRegisterreport_FilterWarehouseNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegister_DefaultFilterTxt));
			salesReturnRegister_DefaultFilterTxt.click();
			salesReturnRegister_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(2000);
			
			salesReturnRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[23/11/2021, SalRet : 1, Customer A, STD RATE COGS ITEM, 12.00, 10.00, 120.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , , 12.00, 10.00, 120.00]";
			
			
			
				
			System.out.println("****************************checkSalesReturnRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				salesReturnRegisterreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		public boolean checkSalesReturnRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("SalRet : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Customer A";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI ";
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";
*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "STD RATE COGS ITEM";
		
		String actR1SalesAccount = select1stRow_3rdColumn.getText();
		String expR1SalesAccount = "Sales - Computers";
		
		//String actR1TaxCode = select1stRow_3rdColumn.getText();
		//String expR1TaxCode = "Std Rat";
		
		
		
		String actR1Units = select1stRow_4thColumn.getText();
		String expR1Units = "Pcs";
		
		String actR1Quantity = select1stRow_6thColumn.getText();
		String expR1Quantity = "12.00";
		
		String actR1Rate = select1stRow_8thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "";
		
		//String actR1Batch = select1stRow_16thColumn.getText();
		//String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
		
		

	 	
		System.out.println("**********************checkSalesReturnReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		//System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		//System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) //&& actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			  // && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) /*&& actR1TaxCode.equalsIgnoreCase(expR1TaxCode) */&& actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)// && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  
			  ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		public boolean checkSalesReturnRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesReturnRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}



		
		
		
		public boolean checkSummarySalesRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBook));
			summarySalesBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT50 : 1, Customer A, 100.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT50 : 4, Customer A, 60.00]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT50 : 5, Customer A, 30.00]";
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT50 : 6, Customer A, 120.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT50 : 7, Customer A, 430.00]";
			
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 740.00]";
			
			
			
						
			System.out.println("*********************************checkSummarySalesBookReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)
					&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)) 
			{
			
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_505_0_DefaultFilter_0']")
		private static WebElement summarySalesBook_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_505_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement summarySalesBookreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkSummarySalesBookReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				summarySalesBookreport_FilterWarehouseNameChkbox.click();
			}
			
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBook_DefaultFilterTxt));
			summarySalesBook_DefaultFilterTxt.click();
			summarySalesBook_DefaultFilterTxt.sendKeys("FIFO COGS ITEM");
			
			Thread.sleep(2000);
			
			summarySalesBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT50 : 1, Customer A, 100.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT50 : 4, Customer A, 60.00]";
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT50 : 5, Customer A, 30.00]";
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "";
			
			
				
			System.out.println("****************************checkSummarySalesBookReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				summarySalesBookreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 6; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRow3List.equalsIgnoreCase(expRow3List)&&actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		public boolean checkSummarySalesBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT50 : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Customer A";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI ";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = "Sales - Computers";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Pcs";
		
		String actR1Quantity = select1stRow_11thColumn.getText();
		String expR1Quantity = "10.00";
		
		String actR1Rate = select1stRow_14thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross = "100.00";
		
		String actR1Batch = select1stRow_19thColumn.getText();
		String expR1Batch = "PVATR2#V1";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
		
		

	 	
		System.out.println("**********************checkSalesReturnReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  
			  ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

			
		public boolean checkSummarySalesBookReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBook));
			summarySalesBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT50 : 1, Customer A, 100.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT50 : 4, Customer A, 60.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT50 : 5, Customer A, 30.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT50 : 6, Customer A, 120.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT50 : 7, Customer A, 430.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[23/11/2021, NDT50 : 7, Customer A, 430.00, 23/11/2021, SalRet : 1, Customer A, 120.00]";
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[, November total, , 620.00]";
					
					
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[Grand Total, , , 620.00]";
			
			
			
			
			
			
			
			System.out.println("*********************************checkSummarySalesRegisterReportwithIncludeSalesOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) 
				&& actRow8List.equalsIgnoreCase(expRow8List)/*&& actRow9List.equalsIgnoreCase(expRow9List)
				//&& actRow10List.equalsIgnoreCase(expRow10List)&& actRow11List.equalsIgnoreCase(expRow11List)*/)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		

		
		public boolean checkMonthlySalesBookReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBook));
			monthlySalesBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[November, 740.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 740.00]";
			
			
			
						
			System.out.println("*********************************checkMonthlySalesBookReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)) 
			{
			
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_628_0_DefaultFilter_0']")
		private static WebElement monthlySalesBook_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_628_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement monthlySalesBookreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkMonthlySalesBookReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				monthlySalesBookreport_FilterWarehouseNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBook_DefaultFilterTxt));
			monthlySalesBook_DefaultFilterTxt.click();
			monthlySalesBook_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(2000);
			
			monthlySalesBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[November, 310.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 310.00]";
			
			
			
				
			System.out.println("****************************checkMonthlySalesBookReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				monthlySalesBookreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}

			
		public boolean checkMonthlySalesBookPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkMonthlysSalesBookPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

			
		
		
		
	
		
		
		
		public boolean checkTopCustomersListReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(topCustomersList));
			topCustomersList.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Customer A, 620.00, 620.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 620.00, 620.00]";
			
			
			
						
			System.out.println("*********************************checkCustomersListReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)) 
			{
			
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_629_0_DefaultFilter_0']")
		private static WebElement TopCustomersList_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_629_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement TopCustomersListreport_FilterAccountNameChkbox;
		
		
		
		
		public boolean checkTopCustomersListReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			Thread.sleep(2000);
			getAction().moveToElement(report_FilterAccountExpansion).build().perform();


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			getAction().moveToElement(TopCustomersListreport_FilterAccountNameChkbox).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TopCustomersListreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				TopCustomersListreport_FilterAccountNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TopCustomersList_DefaultFilterTxt));
			TopCustomersList_DefaultFilterTxt.click();
			TopCustomersList_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			TopCustomersList_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Customer A, 620.00, 620.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 620.00, 620.00]";
			
			
			
				
			System.out.println("****************************checkTopCustomersListReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TopCustomersListreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				TopCustomersListreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}

		
		
		
		
		
		
		public boolean checTopCustomersListReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase("Customer A"))
                         {
                    		 
                    		 reportTableColumn1RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("November 2021");
			expMonthlyList.add("");
			//expMonthlyList.add("746.00");
			//expMonthlyList.add("232.00");
			//expMonthlyList.add("514.00 Dr");
			
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("November 2021")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("23");
			expDayList.add("");
			//expDayList.add("746.00");
			//expDayList.add("232");
			//expDayList.add("36.00");
			//expDayList.add("514.00 Dr");
			
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("23")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT50:7");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("Rct:1");
			expVouchersList.add("NDT46:2");
			expVouchersList.add("Pmt:1");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("NDT44:1");
			expVouchersList.add("NDT50:5");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase("NDT50:4")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
				String expDocNo = "4";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount = "Customer A";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				String actCurrency = voucherHeaderCurrency.getAttribute("value");
				String expCurrency = "INR";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = "DUBAI";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply = "Abu Dhabi";

				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction = "Dubai";
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Warehouse = select1stRow_1stColumn.getText();
				String expR1Warehouse = "HYDERABAD";
				
				String actR1Item = select1stRow_2ndColumn.getText();
				String expR1Item = "FIFO COGS ITEM";
				
				String actR1SalesAccount = select1stRow_4thColumn.getText();
				String expR1SalesAccount = "Sales - Computers";
				
				String actR1TaxCode = select1stRow_3rdColumn.getText();
				String expR1TaxCode = "Std Rate";
				
				
				
				String actR1Units = select1stRow_5thColumn.getText();
				String expR1Units = "Pcs";
				
				String actR1Quantity = select1stRow_11thColumn.getText();
				String expR1Quantity = "6.00";
				
				String actR1Rate = select1stRow_14thColumn.getText();
				String expR1Rate = "10.00";
				
				String actR1Gross = select1stRow_15thColumn.getText();
				String expR1Gross = "60.00 ";
				
				String actR1Batch = select1stRow_19thColumn.getText();
				String expR1Batch = "";

				/*String actR1Expiry = select1stRow_18thColumn.getText();
				DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
				Calendar R1cal=Calendar.getInstance();
				R1cal.add(Calendar.DATE, 2); 
				//String expR1Expiry=dtf.format(R1cal.getTime());
				String expR1Expiry="100.00";
				*/
				
				
				

			 	
				System.out.println("**********************checkTopCustomersListBackTrackOption*********************");
				 
				System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
				
				System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
				System.out.println("Vendor          : "+actAccount			+"  Value Expected  "+expAccount);
				System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
				System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
				System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
				System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
				
				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
				System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
				System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
				System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
				System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
				System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
				System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
				System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
				System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
				
				
				
				
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				
				if ( actOpenWindowsCount==expOpenWindowsCount
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount) && actCurrency.equalsIgnoreCase(expCurrency) 
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
					   
					   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
					   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
					   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
					   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
					  
					  ) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return false;
				}
			}

		
//Purchase Reports
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[7]")
		private static WebElement purchaseReportsMenu;
		
		@FindBy(xpath="//span[contains(text(),'Purchase Register')]")
		private static WebElement purchaseRegister;
		
		@FindBy(xpath="//span[contains(text(),'Purchase Return Register')]")
		private static WebElement purchaseReturnRegister;
		
		@FindBy(xpath="//span[contains(text(),'Summary Purchase Book')]")
		private static WebElement summaryPurchaseBook;

		
		public boolean checkPurchaseRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( purchaseReportsMenu));
			 purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister));
			purchaseRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
			accountName.sendKeys(Keys.TAB);
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
		/*	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[]";
			*/
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, BR COGS ITEM, 2.00, 10.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 30.00, , 3.00, 20.00]";
			
			
					
			System.out.println("*********************************checkPurchaseRegisterReport*****************************************");
			
		//	System.out.println(actRow1List);
		//	System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			if(/*actRow1List.equalsIgnoreCase(expRow1List) &&*/ actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				;
				return false;
			}
		}
		
		
		
	/*	@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
	*/	
		public boolean checkPurchaseRegisterReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReportsMenu));
			purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister));
			purchaseRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, BR COGS ITEM, 2.00, 10.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[, November total, , 30.00, , 3.00, 20.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Grand Total, , , 30.00, , 3.00, 20.00]";
			
			
			
			
			
			
			System.out.println("*********************************checkPurchaseRegisterReportwithIncludePurchaseReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) )
				
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
				
	/*	
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_507_0_DefaultFilter_0']")
		private static WebElement purchaseRegister_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_507_0']/ul[2]/li[1]/div/label/span")
		private static WebElement purchaseRegisterreport_FilterItemNameChkbox;
		
		
		
		
		public boolean checkPurchaseRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				purchaseRegisterreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister_DefaultFilterTxt));
			purchaseRegister_DefaultFilterTxt.click();
			purchaseRegister_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(2000);
			
			purchaseRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 10.00, BR COGS ITEM, 1.00, 10.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, BR COGS ITEM, 2.00, 10.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 30.00, , 3.00, 20.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			
		
			
			System.out.println("****************************checkPurchaseRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				purchaseRegisterreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)  
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		public boolean checkPurchaseRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT57 : SU/IND/TEXT2") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "SU/IND/TEXT2";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Standard Rated Purchase - Recoverable";
		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = "BR COGS ACC INV";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "1.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "10.00";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "PVATR1#V1";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkPurchaseRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		public boolean checkPurchaseRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchaseRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}


		
	
		
		
		
		
		public boolean checkPurchaseReturnRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( purchaseReportsMenu));
			 purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnRegister));
			purchaseReturnRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, BR COGS ITEM, 2.00, 10.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 30.00, , 3.00, 20.00]";
			
			
					
			System.out.println("*********************************checkPurchaseReturnRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			if(/*actRow1List.equalsIgnoreCase(expRow1List) &&*/ actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				;
				return false;
			}
		}
		
		
		
	
		
		
		
		
				
	
		@FindBy(xpath="//*[@id='FOption_508_0_DefaultFilter_0']")
		private static WebElement purchaseReturnRegister_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_508_0']/ul[2]/li[1]/div/label/span")
		private static WebElement purchaseReturnRegisterreport_FilterItemNameChkbox;
		
		
		
		
		public boolean checkPurchaseReturnRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				purchaseReturnRegisterreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister_DefaultFilterTxt));
			purchaseReturnRegister_DefaultFilterTxt.click();
			purchaseReturnRegister_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			purchaseReturnRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 20.00, BR COGS ITEM, 2.00, 10.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 30.00, , 3.00, 20.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			
		
			
			System.out.println("****************************checkPurchaseReturnRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				purchaseReturnRegisterreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)  
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		public boolean checkPurchaseReturnRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT57 : SU/IND/TEXT2") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "SU/IND/TEXT2";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Standard Rated Purchase - Recoverable";
		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = "BR COGS ACC INV";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "1.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "10.00";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "PVATR1#V1";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkPurchaseReturnRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		public boolean checkPurchaseReturnRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchaseReturnRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}



		public boolean checkSummaryPurchaseBookReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( purchaseReportsMenu));
			 purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summaryPurchaseBook));
			summaryPurchaseBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 30.00]";
			
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[]";
			
			*/
					
			System.out.println("*********************************checkSummaryPurchaseBookReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		*/	
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List)*/ 
			)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				;
				return false;
			}
		}
		
		
		
	/*	@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
	*/	
		public boolean checkSummaryPurchaseBookReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReportsMenu));
			purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summaryPurchaseBook));
			summaryPurchaseBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, November total, , 30.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 30.00]";
			
			
		/*
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			
			*/
			
			
			
			System.out.println("*********************************checkSummaryPurchaseBookReportwithIncludePurchaseReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
	/*		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List)*/ )
				
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
				
	/*	
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_509_0_DefaultFilter_0']")
		private static WebElement SummaryPurchaseBook_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_509_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement SummaryPurchaseBookreport_FilterItemNameChkbox;
		
		
		
		
		public boolean checkSummaryPurchaseBookReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryPurchaseBookreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				SummaryPurchaseBookreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryPurchaseBook_DefaultFilterTxt));
			SummaryPurchaseBook_DefaultFilterTxt.click();
			SummaryPurchaseBook_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			SummaryPurchaseBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, 30.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 30.00]";
			
			
	/*		
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			*/
		
			
			System.out.println("****************************checkSummaryPurchaseBookReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			*/
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryPurchaseBookreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				SummaryPurchaseBookreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)*/  
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		public boolean checkSummaryPurchaseBookReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT57 : SU/IND/TEXT2") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "SU/IND/TEXT2";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Standard Rated Purchase - Recoverable";
		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = "BR COGS ACC INV";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "1.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "10.00";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "PVATR1#V1";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkSummaryPurchaseBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		
	
		
		
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[8]")
		private static WebElement vatMenu;
		
		@FindBy(xpath="//span[contains(text(),'Purchase Account Report')]")
		private static WebElement purchaseAccountReport;
		
		@FindBy(xpath="//span[contains(text(),'VAT detailed report')]")
		private static WebElement VATdetailedreport;
		
		@FindBy(xpath="//span[contains(text(),'Sales Account Report')]")
		private static WebElement salesAccountReport;
		
		@FindBy(xpath="//span[contains(text(),'Sales by Customer Report')]")
		private static WebElement salesbyCustomerReport;
		
		@FindBy(xpath="//span[contains(text(),'VAT summary report')]")
		private static WebElement VATSummaryreport;
		
		@FindBy(xpath="//span[contains(text(),'GST Audit File')]")
		private static WebElement GSTAuditFile;
		
		@FindBy(xpath="//span[contains(text(),'VAT audit file')]")
		private static WebElement VATauditfile;
		
		@FindBy(xpath="//span[contains(text(),'VAT return report')]")
		private static WebElement VATreturnreport;
		
		@FindBy(xpath="//span[contains(text(),'Sales advance VAT report')]")
		private static WebElement SalesadvanceVATreport;
		
		
		@FindBy(xpath="//select[@id='RITCombobox__1']")
		private static WebElement pa_TransactionTypeDropdown;
	
		
		

		public boolean checkVATPurchaseAccountReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( vatMenu));
			 vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountReport));
			purchaseAccountReport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(1);
			Thread.sleep(2000);
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57:SU/IND/TEXT1, , 60.00, 3.00, , , , , , , , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57:SU/IND/TEXT2, , 10.00, 0.50, , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT57:SU/IND/TEXT2, , 20.00, 1.00, , , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT57:SU/IND/TEXT3, , 20.00, 1.00, , , , , , , , , ]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT57:SU/IND/TEXT3, , 10.00, 0.50, , , , , , , , , ]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[23/11/2021, NDT57:SU/IND/TEXT5, , 120.00, 6.00, , , , , , , , , ]";
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[23/11/2021, NDT57:SU/IND/TEXT5, , 100.00, 5.00, , , , , , , , , ]";
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Grand Total, , , 370.00, 18.50, , , , , , , , , ]";
			
			
					
			System.out.println("*********************************checkVATPurchaseAccountReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&&actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
			&&actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
			&&actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return false;
			}
		}
		
		
		
	/*	@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
	*/	
		public boolean checkPurchaseAccountReportswithIncludePurchaseReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountReport));
			purchaseAccountReport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
		/*	getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57:SU/IND/TEXT1, , 60.00, 3.00, , , , , , , , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57:SU/IND/TEXT2, , 10.00, 0.50, , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT57:SU/IND/TEXT2, , 20.00, 1.00, , , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT57:SU/IND/TEXT3, , 20.00, 1.00, , , , , , , , , ]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT57:SU/IND/TEXT3, , 10.00, 0.50, , , , , , , , , ]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[23/11/2021, NDT57:SU/IND/TEXT5, , 120.00, 6.00, , , , , , , , , ]";
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[23/11/2021, NDT57:SU/IND/TEXT5, , 100.00, 5.00, , , , , , , , , ]";
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Grand Total, , , 370.00, 18.50, , , , , , , , , ]";
			
			
					
			System.out.println("*********************************checkVATPurchaseAccountReportwithncludePurchaseReturnOption***********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&&actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
			&&actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
			&&actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
				
	/*	
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_208_0_DefaultFilter_0']")
		private static WebElement purchaseAccount_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_208_0']/ul[3]/li[1]/div/label/span")
		private static WebElement purchaseAccountreport_FilterItemNameChkbox;
		
		@FindBy (xpath="(//input[@id='5042'])[1]")
		private static WebElement report_FilterDepartmentNameChkbox;
		
		@FindBy (xpath="(//a[contains(text(),'Department')]//i)[1]")
		private static WebElement report_FilterDepartmentExpansion;
		
		
		public boolean checkPurchaseAccountReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountreport_FilterItemNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				purchaseAccountreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccount_DefaultFilterTxt));
			purchaseAccount_DefaultFilterTxt.click();
			purchaseAccount_DefaultFilterTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			purchaseAccount_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[23/11/2021, NDT57:SU/IND/TEXT1, , 60.00, 3.00, , , , , , , , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[23/11/2021, NDT57:SU/IND/TEXT2, , 10.00, 0.50, , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[23/11/2021, NDT57:SU/IND/TEXT2, , 20.00, 1.00, , , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[23/11/2021, NDT57:SU/IND/TEXT3, , 20.00, 1.00, , , , , , , , , ]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[23/11/2021, NDT57:SU/IND/TEXT3, , 10.00, 0.50, , , , , , , , , ]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[23/11/2021, NDT57:SU/IND/TEXT4, , 10.00, 0.50, , , , , , , , , ]";
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[23/11/2021, NDT57:SU/IND/TEXT5, , 120.00, 6.00, , , , , , , , , ]";
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[23/11/2021, NDT57:SU/IND/TEXT5, , 100.00, 5.00, , , , , , , , , ]";
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Grand Total, , , 370.00, 18.50, , , , , , , , , ]";
			
			
					
			System.out.println("*********************************checkVATPurchaseAccountReportwithFilterOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountreport_FilterItemNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				purchaseAccountreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 11; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&&actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
			&&actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
			&&actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List))
			{
				
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
			
			
			
			
		
		public boolean checkPurchaseAccountReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT2") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "SU/IND/TEXT2";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Standard Rated Purchase - Recoverable";
		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = "BR COGS ACC INV";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "1.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "10.00";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "PVATR1#V1";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkPurchaseAccountReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		
		@FindBy(xpath="//select[@id='RITCombobox__2']")
		private static WebElement pa_CountryDropdown;
		
		
		
		
		public boolean checkVATDetailedReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport));
			VATdetailedreport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Sales, 2, 23/11/2021, NDT50 : 1, Customer A, Sales - Computers, 100.00, , , , , , 3, 23/11/2021, NDT50 : 4, Customer A, Sales - Computers, 60.00, , , , , , 4, 23/11/2021, NDT50 : 5, Customer A, Sales - Computers, 30.00, , , , , , 5, 23/11/2021, NDT50 : 6, Customer A, Sales - Computers, 120.00, , , , , , 6, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 120.00, , , , , , 7, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 100.00, , , , , , 8, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 90.00, , , , , , 9, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 120.00, , , , , , 10, Sub Total, , , , 740.00, , , , , , 11, Purchases, 12, 23/11/2021, NDT57 : SU/IND/TEXT1, Vendor B, STD RATE COGS ACC INV, 60.00, 57.00, 5.00, 3.00, , 60.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, BR COGS ACC INV, 20.00, 19.00, 5.00, 1.00, , 20.00, 14, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, BR COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 15, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, STD RATE COGS ACC INV, 20.00, 19.00, 5.00, 1.00, , 20.00, 16, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, STD RATE COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 17, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, FIFO COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 18, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, FIFO COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 19, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, FIFO COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 20, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, WA COGS ACC INV, 100.00, 95.00, 5.00, 5.00, , 100.00, 21, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, WA COGS ACC INV, 120.00, 114.00, 5.00, 6.00, , 120.00, 22, 23/11/2021, NDT45 : 1, Bank, Vendor B, 30.00, , 15.00, , , , 23, 23/11/2021, NDT45 : 1, Bank, Vendor B, 33.00, , 15.00, , , , 24, 23/11/2021, NDT44 : 1, Bank, Customer A, 100.00, , 15.00, , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, 23/11/2021, NDT52 : 1, Vendor B, Bank, 50.00, , 15.00, , , , 26, 23/11/2021, NDT51 : 1, Vendor B, Bank, 31.50, 30.00, 15.00, 1.50, , 31.50, 27, 23/11/2021, NDT55 : 1, Bank, Vendor B, 31.50, , 15.00, , , , 28, 23/11/2021, NDT46 : 2, HDFC, Customer A, 6.00, 5.71, 15.00, 0.29, , 6.00, 29, 23/11/2021, NDT47 : 2, Bank, Vendor B, 6.00, , 15.00, , , , 30, Sub Total, , , , 446.00, 375.79, 170.00, 19.71, , 395.50, 31, Grand Total, , , , 294.00, 375.79, 170.00, 19.71, , 395.50]";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATDetailedReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		public boolean checkVATDetailedReportswithLocalAmountBasedFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport));
			VATdetailedreport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
		/*	getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Sales, 2, 23/11/2021, NDT50 : 1, Customer A, Sales - Computers, 100.00, , , , , , 3, 23/11/2021, NDT50 : 4, Customer A, Sales - Computers, 60.00, , , , , , 4, 23/11/2021, NDT50 : 5, Customer A, Sales - Computers, 30.00, , , , , , 5, 23/11/2021, NDT50 : 6, Customer A, Sales - Computers, 120.00, , , , , , 6, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 120.00, , , , , , 7, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 100.00, , , , , , 8, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 90.00, , , , , , 9, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 120.00, , , , , , 10, Sub Total, , , , 740.00, , , , , , 11, Purchases, 12, 23/11/2021, NDT57 : SU/IND/TEXT1, Vendor B, STD RATE COGS ACC INV, 60.00, 57.00, 5.00, 3.00, , 60.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, BR COGS ACC INV, 20.00, 19.00, 5.00, 1.00, , 20.00, 14, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, BR COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 15, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, STD RATE COGS ACC INV, 20.00, 19.00, 5.00, 1.00, , 20.00, 16, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, STD RATE COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 17, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, FIFO COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 18, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, FIFO COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 19, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, FIFO COGS ACC INV, 10.00, 9.50, 5.00, 0.50, , 10.00, 20, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, WA COGS ACC INV, 100.00, 95.00, 5.00, 5.00, , 100.00, 21, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, WA COGS ACC INV, 120.00, 114.00, 5.00, 6.00, , 120.00, 22, 23/11/2021, NDT45 : 1, Bank, Vendor B, 30.00, , 15.00, , , , 23, 23/11/2021, NDT45 : 1, Bank, Vendor B, 33.00, , 15.00, , , , 24, 23/11/2021, NDT44 : 1, Bank, Customer A, 100.00, , 15.00, , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, 23/11/2021, NDT52 : 1, Vendor B, Bank, 50.00, , 15.00, , , , 26, 23/11/2021, NDT51 : 1, Vendor B, Bank, 31.50, 30.00, 15.00, 1.50, , 31.50, 27, 23/11/2021, NDT55 : 1, Bank, Vendor B, 31.50, , 15.00, , , , 28, 23/11/2021, NDT46 : 2, HDFC, Customer A, 6.00, 5.71, 15.00, 0.29, , 6.00, 29, 23/11/2021, NDT47 : 2, Bank, Vendor B, 6.00, , 15.00, , , , 30, Sub Total, , , , 446.00, 375.79, 170.00, 19.71, , 395.50, 31, Grand Total, , , , 294.00, 375.79, 170.00, 19.71, , 395.50]";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATDetailedReportswithLocalAmountBasedOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
		@FindBy(xpath="(//a[contains(text(),'Account2')]//i)[1]")
		private static WebElement report_FilterAccount2Expansion;
		
		@FindBy(xpath="(//input[@id='5002'])[1]")
		private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="(//*[@id='FilterFields_659_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement VATdetailedreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_659_0_DefaultFilter_0']")
		private static WebElement VATdetailedreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkVATDetailedReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				VATdetailedreport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport_DefaultFilterTxt));
			VATdetailedreport_DefaultFilterTxt.click();
			VATdetailedreport_DefaultFilterTxt.sendKeys("Assets");
			
			Thread.sleep(2000);
			
			VATdetailedreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Sales, 2, 23/11/2021, NDT50 : 1, Customer A, Sales - Computers, 100.00, , , , , , 3, 23/11/2021, NDT50 : 4, Customer A, Sales - Computers, 60.00, , , , , , 4, 23/11/2021, NDT50 : 5, Customer A, Sales - Computers, 30.00, , , , , , 5, 23/11/2021, NDT50 : 6, Customer A, Sales - Computers, 120.00, , , , , , 6, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 120.00, , , , , , 7, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 90.00, , , , , , 8, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 100.00, , , , , , 9, 23/11/2021, NDT50 : 7, Customer A, Sales - Computers, 120.00, , , , , , 10, Sub Total, , , , 740.00, , , , , , 11, Purchases, 12, 23/11/2021, NDT45 : 1, Bank, Vendor B, 30.00, , 15.00, , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT45 : 1, Bank, Vendor B, 33.00, , 15.00, , , , 14, 23/11/2021, NDT44 : 1, Bank, Customer A, 100.00, , 15.00, , , , 15, 23/11/2021, NDT52 : 1, Vendor B, Bank, 50.00, , 15.00, , , , 16, 23/11/2021, NDT51 : 1, Vendor B, Bank, 31.50, 30.00, 15.00, 1.50, , 31.50, 17, 23/11/2021, NDT55 : 1, Bank, Vendor B, 31.50, , 15.00, , , , 18, 23/11/2021, NDT46 : 2, HDFC, Customer A, 6.00, 5.71, 15.00, 0.29, , 6.00, 19, 23/11/2021, NDT47 : 2, Bank, Vendor B, 6.00, , 15.00, , , , 20, Sub Total, , , , 76.00, 24.29, 120.00, 1.21, , 25.50, 21, Grand Total, , , , 664.00, 24.29, 120.00, 1.21, , 25.50]";
			
			
			System.out.println("*****************************************checkVATDetailedReportswithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATdetailedreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List))
			
			{
				
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
			
			
			
			
		
		public boolean checkVATDetailedReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("SU/IND/TEXT1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "7";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Customer A";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Std Rat";
		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = "Sales - Computers";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Pcs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "0.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "SalOrd:1";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "0.00";

		String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATDetailedReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) && actR1Expiry.equalsIgnoreCase(expR1Expiry)
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
	
		
		
		public boolean checkVATSalesAccountReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountReport));
			salesAccountReport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			pa_TransactionTypeDropdown.click();
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, NDT50:1, 100.00, , , , , , , , , , , , 2, 23/11/2021, NDT50:4, 60.00, , , , , , , , , , , , 3, 23/11/2021, NDT50:5, 30.00, , , , , , , , , , , , 4, 23/11/2021, NDT50:6, 120.00, , , , , , , , , , , , 5, 23/11/2021, NDT50:7, 120.00, , , , , , , , , , , , 6, 23/11/2021, NDT50:7, 100.00, , , , , , , , , , , , 7, 23/11/2021, NDT50:7, 90.00, , , , , , , , , , , , 8, 23/11/2021, NDT50:7, 120.00, , , , , , , , , , , , 9, Grand Total, , 740.00, , , , , , , , , , , ]";
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATSalesAccountReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		public boolean checkVATSalesAccountReportswithIncludeSalesReturnVocher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountReport));
			salesAccountReport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			pa_TransactionTypeDropdown.click();
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
		/*	getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, NDT50:1, 100.00, , , , , , , , , , , , 2, 23/11/2021, NDT50:4, 60.00, , , , , , , , , , , , 3, 23/11/2021, NDT50:5, 30.00, , , , , , , , , , , , 4, 23/11/2021, NDT50:6, 120.00, , , , , , , , , , , , 5, 23/11/2021, NDT50:7, 120.00, , , , , , , , , , , , 6, 23/11/2021, NDT50:7, 100.00, , , , , , , , , , , , 7, 23/11/2021, NDT50:7, 90.00, , , , , , , , , , , , 8, 23/11/2021, NDT50:7, 120.00, , , , , , , , , , , , 9, Grand Total, , 740.00, , , , , , , , , , , ]";
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATSalesAccountReportswithIncludesSalesReturnVocher***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List)/* && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
		@FindBy(xpath="//*[@id='FilterFields_209_0']/li[2]/a/i")
		private static WebElement salesAccountreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FilterFields_209_0']/ul[2]/li[1]/div/label/span")
		private static WebElement VATSalesAccountreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_209_0_DefaultFilter_0']")
		private static WebElement VATsalesAccountreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkVATSalesAccountReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAccountreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				VATSalesAccountreport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATsalesAccountreport_DefaultFilterTxt));
			VATsalesAccountreport_DefaultFilterTxt.click();
			VATsalesAccountreport_DefaultFilterTxt.sendKeys("Assets");
			
			Thread.sleep(2000);
			
			VATsalesAccountreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, NDT50:1, 100.00, , , , , , , , , , , , 2, 23/11/2021, NDT50:4, 60.00, , , , , , , , , , , , 3, 23/11/2021, NDT50:5, 30.00, , , , , , , , , , , , 4, 23/11/2021, NDT50:6, 120.00, , , , , , , , , , , , 5, 23/11/2021, NDT50:7, 120.00, , , , , , , , , , , , 6, 23/11/2021, NDT50:7, 100.00, , , , , , , , , , , , 7, 23/11/2021, NDT50:7, 90.00, , , , , , , , , , , , 8, 23/11/2021, NDT50:7, 120.00, , , , , , , , , , , , 9, Grand Total, , 740.00, , , , , , , , , , , ]";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			*/
			
			System.out.println("*****************************************checkVATSalesAccountReportswithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		*/

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAccountreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATSalesAccountreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 9; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List)*/)
			
			{
				
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
			
			
			
			
		
		public boolean checkVATSalesAccountReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT50:1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Customer A";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = "Sales - Computers";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Pcs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "0.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1SalesOrder = select1stRow_12thColumn.getText();
		String expR1SalesOrder = "SalOrd:1";
		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross = "100.00";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		//String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATSalesAccountReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("SalesOrder      : "+actR1SalesOrder			+"  Value Expected  "+expR1SalesOrder);

		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		//System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)&& actR1SalesOrder.equalsIgnoreCase(expR1SalesOrder) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
		
		
		@FindBy(xpath="//select[@id='RITCombobox__3']")
		private static WebElement sByC_SelectDelears;
	
		
		public boolean checkVATSalesByCustomerReportwithVocherTypeSalesandDelearsType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerReport));
			salesByCustomerReport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("0");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			sByC_SelectDelears.click();
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Sales - Computers, 8, , , 8, , , 8, , , 8, , 8, , , 8, , , 8, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 8, , , 8, , , 8, , , 8, , 8, , , 8, , , 8, ]";
			
			
			
			
			System.out.println("*****************************************checkVATSalesByCustomerReportswithVocherTypeSalesandDelearType***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
		
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
				
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		public boolean checkVATSalesByCustomerReportwithVocherTypePurchaseandDelearsType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerReport));
			salesByCustomerReport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			sByC_SelectDelears.click();
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ACC INV, 2, , , 2, , , 2, , , 2, 31.50, 2, , , 2, , , 2, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ACC INV, 3, , , 3, , , 3, , , 3, 31.50, 3, , , 3, , , 3, ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[STD RATE COGS ACC INV, 3, , , 3, , , 3, , , 3, 94.50, 3, , , 3, , , 3, ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[WA COGS ACC INV, 2, , , 2, , , 2, , , 2, 231.00, 2, , , 2, , , 2, ]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 10, , , 10, , , 10, , , 10, 388.50, 10, , , 10, , , 10, ]";
			System.out.println("*****************************************checkVATSalesByCustomerReportswithPurchaseVocherandDelearType***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		
			
			
		
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)
				&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
				&&actRow5List.equalsIgnoreCase(expRow5List) )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
	
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_210_0']/li[2]/a/i")
		private static WebElement salesBycustomerreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FilterFields_210_0']/ul[2]/li[1]/div/label/span")
		private static WebElement VATSalesByCustomerreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_210_0_DefaultFilter_0']")
		private static WebElement VATsalesByCustomerreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkVATSalesByCustomerReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesByCustomerreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				VATSalesByCustomerreport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATsalesByCustomerreport_DefaultFilterTxt));
			VATsalesByCustomerreport_DefaultFilterTxt.click();
			VATsalesByCustomerreport_DefaultFilterTxt.sendKeys("Assets");
			
			Thread.sleep(2000);
			
			VATsalesByCustomerreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Sales - Computers, 8, , , 8, , , 8, , , 8, , 8, , , 8, , , 8, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 8, , , 8, , , 8, , , 8, , 8, , , 8, , , 8, ]";
			
			
		
			System.out.println("*****************************************checkVATSalesByCustomerReportswithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesByCustomerreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATSalesByCustomerreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}			
			
			
			
			
			
		
		public boolean checkVATSalesByCustomerReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("BR COGS ACC INV	") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Customer A";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "BR COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = "Sales - Computers";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Pcs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "0.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "10.00";
		
		String actR1SalesOrder = select1stRow_12thColumn.getText();
		String expR1SalesOrder = "SalOrd:1";
		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross = "100.00";
		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		//String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATSalesByCustomerReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("SalesOrder      : "+actR1SalesOrder			+"  Value Expected  "+expR1SalesOrder);

		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		//System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)&& actR1SalesOrder.equalsIgnoreCase(expR1SalesOrder) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
		


		
		
		
		public boolean checkSalesAdavanceVATReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);",SalesadvanceVATreport);
			
			Thread.sleep(2000);
			
			//getAction().moveToElement(SalesadvanceVATreport).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SalesadvanceVATreport));
			SalesadvanceVATreport.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, OpeBal:1, 01/01/2020, , , 1,000.00, , , , 2, OpeBal:1, 01/01/2020, , , 1,500.00, , , , 3, NDT57:SU/IND/TEXT1, 23/11/2021, 63.00, , 63.00, , , , 4, NDT57:SU/IND/TEXT2, 23/11/2021, 21.00, , 21.00, , , , 5, NDT57:SU/IND/TEXT2, 23/11/2021, 10.50, , 10.50, , , , 6, NDT57:SU/IND/TEXT3, 23/11/2021, 21.00, , 21.00, , , , 7, NDT57:SU/IND/TEXT3, 23/11/2021, 10.50, , 10.50, , , , 8, NDT57:SU/IND/TEXT4, 23/11/2021, 10.50, , 10.50, , , , 9, NDT57:SU/IND/TEXT4, 23/11/2021, 10.50, , 10.50, , , , 10, NDT57:SU/IND/TEXT4, 23/11/2021, 10.50, , 10.50, , , , 11, NDT57:SU/IND/TEXT5, 23/11/2021, 105.00, , 105.00, , , , 12, NDT57:SU/IND/TEXT5, 23/11/2021, 126.00, , 126.00, , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, NDT45:1, 23/11/2021, 33.00, , 33.00, , , , 14, NDT45:1, 23/11/2021, 30.00, , 30.00, , , , 15, NDT50:1, 23/11/2021, 100.00, , 100.00, , , , 16, NDT50:4, 23/11/2021, 60.00, , 60.00, , , , 17, NDT50:5, 23/11/2021, 30.00, , 30.00, , , , 18, NDT50:6, 23/11/2021, 120.00, , 120.00, , , , 19, NDT50:7, 23/11/2021, 100.00, , 100.00, , , , 20, NDT50:7, 23/11/2021, 90.00, , 90.00, , , , 21, NDT50:7, 23/11/2021, 120.00, , 120.00, , , , 22, NDT50:7, 23/11/2021, 120.00, , 120.00, , , , 23, SalRet:1, 23/11/2021, , , 120.00, , , , 24, NDT44:1, 23/11/2021, 100.00, , 100.00, , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, NDT52:1, 23/11/2021, 50.00, , 50.00, , , , 26, NDT51:1, 23/11/2021, 31.50, , 31.50, , , , 27, NDT55:1, 23/11/2021, 31.50, , 31.50, , , , 28, Rct:1, 23/11/2021, , , 6.00, , , , 29, NDT46:2, 23/11/2021, 6.00, , 6.00, , , , 30, Rct:2, 23/11/2021, , , 6.00, , , , 31, Pmt:1, 23/11/2021, , , 6.00, , , , 32, NDT47:2, 23/11/2021, 6.00, , 6.00, , , , 33, Pmt:2, 23/11/2021, , , 6.00, , , , 34, Grand Total, , 338.50, , 718.50, , , ]";
			
			
			System.out.println("*****************************************checkSalesAdvanceVATReport***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List)&& actPage3List.equalsIgnoreCase(expPage3List)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	//	@FindBy(xpath="//*[@id='FilterFields_209_0']/li[2]/a/i")
	//	private static WebElement salesAccountreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="(//*[@id='FilterFields_677_0']/ul[4]/li[1]/div/label/span)[1]")
		private static WebElement VATSalesAdvancereport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_677_0_DefaultFilter_0']")
		private static WebElement VATsalesAdvancereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkSalesAdvanceVATReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAdvancereport_FilterAccount2NameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				VATSalesAdvancereport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATsalesAdvancereport_DefaultFilterTxt));
			VATsalesAdvancereport_DefaultFilterTxt.click();
			VATsalesAdvancereport_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			VATsalesAdvancereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT57:SU/IND/TEXT2, 23/11/2021, 10.50, , 10.50, , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT57:SU/IND/TEXT2, 23/11/2021, 21.00, , 21.00, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT50:1, 23/11/2021, 100.00, , 100.00, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT50:7, 23/11/2021, 120.00, , 120.00, , , ]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , 188.50, , 188.50, , , ]";
			System.out.println("*****************************************checkSalesAdvanceVATReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		
						
		
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAdvancereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATSalesAdvancereport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkSalesAdvanceVATReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn1RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("SU/IND/TEXT1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn1RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "SU/IND/TEXT1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = "HYDERABAD";
		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = "STD RATE COGS ITEM";
		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = "Standard Rated Purchase - Recoverable";
		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = "STD RATE COGS ACC INV";
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = "2.00";
		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = "30.00";
		
	//	String actR1SalesOrder = select1stRow_12thColumn.getText();
	//	String expR1SalesOrder = "SalOrd:1";
		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross = "60.00";
		
		//String actR1Batch = select1stRow_16thColumn.getText();
		//String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		//String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATSalesAccountReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		//System.out.println("SalesOrder      : "+actR1SalesOrder			+"  Value Expected  "+expR1SalesOrder);

		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
	//	System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		//System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
		
		
		
		
		//Registers Menu
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[9]")
		private static WebElement registersMenu;
		
		@FindBy(xpath="//span[contains(text(),'Opening Balance Register')]")
		private static WebElement openingBalanceRegister;
		
		@FindBy(xpath="//span[contains(text(),'Journal Entries Register')]")
		private static WebElement journalEntriesRegister;
		
		@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
		private static WebElement creditNoteRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Debit Note Register')]")
		private static WebElement debitNoteRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Receipt Register')]")
		private static WebElement receiptRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Payment Register')]")
		private static WebElement paymentRegister;;
		
		@FindBy(xpath="//span[contains(text(),'PDC Receipts Register')]")
		private static WebElement PDCReceiptsRegister;;
		
		@FindBy(xpath="//span[contains(text(),'PDC Payments Register')]")
		private static WebElement PDCPaymentsRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Entry Journal Register')]")
		private static WebElement entryJournalRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Entry journal detail report')]")
		private static WebElement entryJournalDetailReport;;
		
	
		
		public boolean checkOpeningBalanceRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			//((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);",SalesadvanceVATreport);
			
			//Thread.sleep(2000);
			
			//getAction().moveToElement(SalesadvanceVATreport).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalanceRegister));
			openingBalanceRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[OpeBal : 1, Vendor B, 1,000.00, , 20.00, , 111.00, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[OpeBal : 1, Vendor A, , 1,500.00, , 30.00, , 166.50]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 1,000.00, 1,500.00, 20.00, 30.00, 111.00, 166.50]";
			
			
			
		
			System.out.println("*****************************************checkOpeningBalanceRegister***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	//	@FindBy(xpath="//*[@id='FilterFields_209_0']/li[2]/a/i")
	//	private static WebElement salesAccountreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FilterFields_516_0']/ul[2]/li[1]/div/label/span")
		private static WebElement openingBalancereport_FilterDepartmentNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_516_0_DefaultFilter_0']")
		private static WebElement openingBalancereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkOpeningBalanceRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancereport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				openingBalancereport_FilterDepartmentNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancereport_DefaultFilterTxt));
			openingBalancereport_DefaultFilterTxt.click();
			openingBalancereport_DefaultFilterTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			openingBalancereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[OpeBal : 1, Vendor B, 1,000.00, , 20.00, , 111.00, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[OpeBal : 1, Vendor A, , 1,500.00, , 30.00, , 166.50]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 1,000.00, 1,500.00, 20.00, 30.00, 111.00, 166.50]";
			
			
			
			
			System.out.println("*****************************************checkOpeningBalanceRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
		
						
		
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancereport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				openingBalancereport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRow3List.equalsIgnoreCase(expRow3List)
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkOpeningBalanceRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Vendor A") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Vendor A";
		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit = "";
		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit = "30.00";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account = "Vendor B";
		
		String actR2Debit = select2ndRow_2ndColumn.getText();
		String expR2Debit = "20.00";
		
		String actR2Credit = select2ndRow_3rdColumn.getText();
		String expR2Credit = "";
		
		System.out.println("**********************checkOpeningBalanceRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		System.out.println("*******************************ROW2**********************************");
		System.out.println("Account       : "+actR2Account			+"  Value Expected  "+expR2Account);
		System.out.println("Debit            : "+actR2Debit				+"  Value Expected  "+expR2Debit);
		System.out.println("Credit         : "+actR2Credit			+"  Value Expected  "+expR2Credit);
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit)
			   &&actR2Account.equalsIgnoreCase(expR2Account)
			   &&actR2Debit.equalsIgnoreCase(expR2Debit)&&actR2Credit.equalsIgnoreCase(expR2Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
		
	
		public boolean checkJournalEntriesRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesRegister));
			journalEntriesRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT55 : 1, Vendor B, , 31.50, , 31.50, , 2.21]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , , 31.50, , 31.50, , 2.21]";
			
			
			
			
			
			
			
		
			System.out.println("*****************************************checkJournalEntriesRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="(//*[@id='FilterFields_515_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement journalEntriesreport_FilterDepartmentNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_515_0_DefaultFilter_0']")
		private static WebElement journalEntriesreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkJournalEntriesRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				journalEntriesreport_FilterDepartmentNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesreport_DefaultFilterTxt));
			journalEntriesreport_DefaultFilterTxt.click();
			journalEntriesreport_DefaultFilterTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			journalEntriesreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT55 : 1, Vendor B, , 31.50, , 31.50, , 2.21]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , , 31.50, , 31.50, , 2.21]";
			
			
			
		
			
			
			
			
			System.out.println("*****************************************checkOpeningBalanceRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				journalEntriesreport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkJournalEntriesRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Vendor B") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Vendor B";
		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit = "Bank";
		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit = "Std Rate";
		
		
		
		System.out.println("**********************checkJournalEntriesRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

	
		
		
		
		public boolean checkCreditNoteRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteRegister));
			creditNoteRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT52 : 1, Bank, 50.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 50.00]";
			
			
			
			
			
			
			
		
			System.out.println("*****************************************checkCreditNoteRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_609_0']/ul[2]/li[1]/div/label/span")
		private static WebElement creditNotereport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_609_0_DefaultFilter_0']")
		private static WebElement creditNotereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkCreditNoteRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				creditNotereport_FilterAccount2NameChkbox.click();
			}
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotereport_DefaultFilterTxt));
			creditNotereport_DefaultFilterTxt.click();
			creditNotereport_DefaultFilterTxt.sendKeys("Bank");
			
			Thread.sleep(1000);
			
			creditNotereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT52 : 1, Bank, 50.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 50.00]";
			
			
			
		
			
			
			
			
			System.out.println("*****************************************checkCreditNoteRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				creditNotereport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkCreditNoteRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Bank") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "50.00";
		
		
		
		System.out.println("**********************checkCreditNoteRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1TaxCode.equalsIgnoreCase(expR1TaxCode)&&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

		
		
		
		
		
	
		public boolean checkDebitNoteRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNoteRegister));
			debitNoteRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT51 : 1, VAT INPUT, 1.50]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT51 : 1, Bank, 31.50]";
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 30.00]";
			
			
			
			
			
			
			
		
			System.out.println("*****************************************checkDebitNoteRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&	actRow3List.equalsIgnoreCase(expRow3List)) 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_610_0']/ul[2]/li[1]/div/label/span")
		private static WebElement DebitNotereport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_610_0_DefaultFilter_0']")
		private static WebElement DebitNotereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkDebitNoteRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DebitNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				DebitNotereport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DebitNotereport_DefaultFilterTxt));
			DebitNotereport_DefaultFilterTxt.click();
			DebitNotereport_DefaultFilterTxt.sendKeys("Bank");
			
			Thread.sleep(2000);
			
			DebitNotereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT51 : 1, Bank, 31.50]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 31.50]";
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "";
		
			
			
			
			
			System.out.println("*****************************************checkDebitNoteRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DebitNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				DebitNotereport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkDebitNoteRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Bank") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Vendor B";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "31.50";
		
		
		
		System.out.println("**********************checkDebitNoteRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1TaxCode.equalsIgnoreCase(expR1TaxCode)&&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

		
		
		
		

		public boolean checkReceiptRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptRegister));
			receiptRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT44 : 1, Customer A, 100.00, , 100.00, , 7.00, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Rct : 1, Customer A, 6.00, , 6.00, , 6.00, ]";
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Rct : 2, HDFC, 6.00, , 6.00, , 6.00, ]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Grand Total, , , 112.00, , 112.00, , 19.00, ]";
			
			
		/*	
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Rct : 4, HDFC, 4.00, , 4.00, , 4.00, ]";
			
			
			

			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 126.00, , 126.00, , 33.00, ]";
			
			*/
			
		
			System.out.println("*****************************************checkReceiptRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		/*	
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&	actRow3List.equalsIgnoreCase(expRow3List)
					&& actRow4List.equalsIgnoreCase(expRow4List)/*&&	actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/) 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="(//*[@id='FilterFields_598_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement ReceiptRegisterreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_598_0_DefaultFilter_0']")
		private static WebElement ReceiptRegisterreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkReceiptRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ReceiptRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				ReceiptRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ReceiptRegisterreport_DefaultFilterTxt));
			ReceiptRegisterreport_DefaultFilterTxt.click();
			ReceiptRegisterreport_DefaultFilterTxt.sendKeys("Bank");
			
			Thread.sleep(1000);
			
			ReceiptRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(1000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT44 : 1, Customer A, 100.00, , 100.00, , 7.00, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Rct : 1, Customer A, 6.00, , 6.00, , 6.00, ]";
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Rct : 2, HDFC, 6.00, , 6.00, , 6.00, ]";
		
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Grand Total, , , 112.00, , 112.00, , 19.00, ]";
			/*
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Rct : 4, HDFC, 4.00, , 4.00, , 4.00, ]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 126.00, , 126.00, , 33.00, ]";
			
			*/
			
			System.out.println("*****************************************checkReceiptRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		/*	
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
*/
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ReceiptRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				ReceiptRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 4; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount==expRowCount&&
					actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)/*&&
					actRow5List.equalsIgnoreCase(expRow5List)&&
					actRow6List.equalsIgnoreCase(expRow6List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkReceiptRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Customer A") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Customer A";
		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "100.00";
		
		
		
		System.out.println("**********************checkReceiptRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1TaxCode.equalsIgnoreCase(expR1TaxCode)&&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

		

		
		
		public boolean checkPaymentRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentRegister));
			paymentRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT45 : 1, Vendor B, , 33.00, , 33.00, , 2.31]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT45 : 1, Vendor B, , 30.00, , 30.00, , 2.10]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Pmt : 1, Customer A, , 6.00, , 6.00, , 6.00]";
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Pmt : 2, Bank, , 6.00, , 6.00, , 6.00]";
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , , 75.00, , 75.00, , 16.41]";
			
			
			
		
			System.out.println("*****************************************checkPaymentRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&actRow5List.equalsIgnoreCase(expRow5List)
					)
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="(//*[@id='FilterFields_599_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement PaymentRegisterreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_599_0_DefaultFilter_0']")
		private static WebElement PaymentRegisterreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkPaymentRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				PaymentRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PaymentRegisterreport_DefaultFilterTxt));
			PaymentRegisterreport_DefaultFilterTxt.click();
			PaymentRegisterreport_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			PaymentRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Pmt : 1, Customer A, , 6.00, , 6.00, , 6.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , , 6.00, , 6.00, , 6.00]";
			
			
			
			
			
			
			
			System.out.println("*****************************************checkPaymentRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
		
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				PaymentRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkPaymentRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Customer A") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Customer A";
		
		//String actR1TaxCode = select1stRow_2ndColumn.getText();
		//String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_2ndColumn.getText();
		String expR1Amount = "6.00";
		
		
		
		System.out.println("**********************checkPaymentRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		//System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

		
	
		
		public boolean checkPDCReceiptsRegisterReportwithAllIncludePDC() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCReceiptsRegister));
			PDCReceiptsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(0);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(0);
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT46 : 1, Bank, VAT INPUT, 0.29, 23/11/2021]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT46 : 1, Bank, Customer A, 6.00, 23/11/2021]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[NDT46 : 2, HDFC, VAT INPUT, 0.29, 23/11/2021]";
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[NDT46 : 2, HDFC, Customer A, 6.00, 23/11/2021]";
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , , 12.58, ]";
		/*	
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[NDT46 : 3, Bank, Customer A, 10.00, 20/12/2021]";
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "[NDT46 : 4, HDFC, Customer B, 4.00, 20/12/2021]";
			
			int reportsByWarehouseRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsByWarehouseRow8ListArray.add(data);
			}
			String actRow8List = reportsByWarehouseRow8ListArray.toString();
			String expRow8List = "[NDT46 : 4, HDFC, VAT INPUT, 0.19, 20/12/2021]";
			
			int reportsByWarehouseRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsByWarehouseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsByWarehouseRow9ListArray.add(data);
			}
			String actRow9List = reportsByWarehouseRow9ListArray.toString();
			String expRow9List = "[Grand Total, , , , 27.25, ]";
			
			
			*/
		
			System.out.println("*****************************************checkPDCReceiptsRegisterReportwithALLincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		/*	
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&actRow5List.equalsIgnoreCase(expRow5List)
					/*&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List)&&
					actRow8List.equalsIgnoreCase(expRow8List)&&actRow9List.equalsIgnoreCase(expRow9List)*/
					)
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[7]/label/span")
		private static WebElement PDCConsolidatedAmount;
		
		public boolean checkPDCReceiptsRegisterReportwithUnConvertedIncludePDCandincludeConvertedPDCandConsolidatedCheckboxes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCReceiptsRegister));
			PDCReceiptsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(2);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(1);
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			
			Thread.sleep(2000);
			
			getAction().moveToElement(PDCConsolidatedAmount).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCConsolidatedAmount));
			PDCConsolidatedAmount.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT46 : 1, Bank, VAT INPUT, 0.29, 23/11/2021]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT46 : 2, HDFC, VAT INPUT, 0.29, 23/11/2021]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[, , , 0.58, ]";
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[NDT46 : 4, HDFC, VAT INPUT, 0.19, 20/12/2021]";
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , , 1.25, ]";
			
			
			
			
		
			System.out.println("*****************************************checkPDCReceiptsRegisterReportwithUnConvertedincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&actRow5List.equalsIgnoreCase(expRow5List)
					)
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
		
		@FindBy(xpath="(//*[@id='FilterFields_518_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement pdcReceiptsRegisterreport_FilterAccount2NameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_518_0_DefaultFilter_0']")
		private static WebElement PDCReceiptsRegisterreport_DefaultFilterTxt;
		
		
		
		public boolean checkPDCReceiptRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReceiptsRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				pdcReceiptsRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCReceiptsRegisterreport_DefaultFilterTxt));
			PDCReceiptsRegisterreport_DefaultFilterTxt.click();
			PDCReceiptsRegisterreport_DefaultFilterTxt.sendKeys("HDFC");
			
			Thread.sleep(2000);
			
			PDCReceiptsRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT46 : 2, HDFC, Customer A, 6.00, 23/11/2021]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT46 : 2, HDFC, VAT INPUT, 0.29, 23/11/2021]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[, , , 6.29, ]";
			
			

			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "";
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "";
			
			
			
			
			
			
			System.out.println("*****************************************checkPDCReceiptRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
*/
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReceiptsRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				pdcReceiptsRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)/*&&
					actRow4List.equalsIgnoreCase(expRow4List)&&	actRow5List.equalsIgnoreCase(expRow5List)*/&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkPDCReceiptsRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Bank") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Customer A";
		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "6.00";
		
		
		
		System.out.println("**********************checkPaymentRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) &&  actR1TaxCode.equalsIgnoreCase(expR1TaxCode)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

		
		
		
		public boolean checkPDCPaymentRegisterReportwithAllIncludePDC() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentsRegister));
			PDCPaymentsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(0);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(0);
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT47 : 1, Bank, Customer A, 6.00, 23/11/2021]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT47 : 2, Bank, Vendor B, 6.00, 23/11/2021]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , , 12.00, ]";
			
			
			
			
		
			System.out.println("*****************************************checkPDCPaymentRegisterReportwithALLincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List))
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
		
	//	@FindBy(xpath="//*[@id='dvReportInputs']/div[7]/label/span")
	//	private static WebElement PDCConsolidatedAmount;
		
		public boolean checkPDCPaymentRegisterReportwithUnConvertedIncludePDCandincludeConvertedPDCandConsolidatedCheckboxes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentsRegister));
			PDCPaymentsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(2);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(1);
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			
			Thread.sleep(2000);
			
			getAction().moveToElement(PDCConsolidatedAmount).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCConsolidatedAmount));
			PDCConsolidatedAmount.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "";
			
			
			
			
			
		
			System.out.println("*****************************************checkPDCPaymentRegisterReportwithUnConvertedincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					)
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
		
		@FindBy(xpath="//*[@id='FilterFields_519_0']/ul[2]/li[1]/div/label/span")
		private static WebElement PDCPaymentRegisterreport_FilterAccount2NameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_519_0_DefaultFilter_0']")
		private static WebElement PDCPaymentRegisterreport_DefaultFilterTxt;
		
		
		
		public boolean checkPDCPaymentRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				PDCPaymentRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentRegisterreport_DefaultFilterTxt));
			PDCPaymentRegisterreport_DefaultFilterTxt.click();
			PDCPaymentRegisterreport_DefaultFilterTxt.sendKeys("Bank");
			
			Thread.sleep(2000);
			
			PDCPaymentRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[NDT47 : 1, Bank, Customer A, 6.00, 23/11/2021]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[NDT47 : 2, Bank, Vendor B, 6.00, 23/11/2021]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , , 12.00, ]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPDCPaymentsRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				PDCPaymentRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkPDCPaymentRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Bank") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Customer A";
		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "6.00";
		
		
		
		System.out.println("**********************checkPaymentRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) &&  actR1TaxCode.equalsIgnoreCase(expR1TaxCode)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
	
		
		public boolean checkEntryJournalRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryJournalRegister));
			entryJournalRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 01/01/2020, OpeBal : 1, Opening Balances Control A/C, , 1,000.00, 1,000.00, OBC, , 20.00, 20.00, , 111.00, 111.00, 2, 01/01/2020, OpeBal : 1, Opening Balances Control A/C, 1,500.00, , 500.00, OBC, 30.00, , 10.00, 166.50, , 55.50, 3, 01/01/2020, OpeBal : 1, Vendor B, 1,000.00, , 1,500.00, 033-002, 20.00, , 30.00, 111.00, , 166.50, 4, 01/01/2020, OpeBal : 1, Vendor A, , 1,500.00, , 033-001, , 30.00, , , 166.50, , 5, 23/11/2021, Pmt : 1, Customer A, 6.00, , 6.00, 122-001, 6.00, , 6.00, 6.00, , 6.00, 6, 23/11/2021, Pmt : 1, Bank, , 6.00, , 121-001, , 6.00, , , 6.00, , 7, 23/11/2021, Pmt : 2, HDFC, , 6.00, 6.00, HDFC, , 6.00, 6.00, , 6.00, 6.00, 8, 23/11/2021, Pmt : 2, Bank, 6.00, , , 121-001, 6.00, , , 6.00, , , 9, 23/11/2021, Rct : 1, Customer A, , 6.00, 6.00, 122-001, , 6.00, 6.00, , 6.00, 6.00, 10, 23/11/2021, Rct : 1, Bank, 6.00, , , 121-001, 6.00, , , 6.00, , , 11, 23/11/2021, Rct : 2, HDFC, , 6.00, 6.00, HDFC, , 6.00, 6.00, , 6.00, 6.00, 12, 23/11/2021, Rct : 2, Bank, 6.00, , , 121-001, 6.00, , , 6.00, , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("9")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT44 : 1, Bank, 100.00, , 100.00, 121-001, 100.00, , 100.00, 7.00, , 7.00, 14, 23/11/2021, NDT44 : 1, Customer A, , 100.00, , 122-001, , 100.00, , , 7.00, , 15, 23/11/2021, NDT45 : 1, Bank, , 33.00, 33.00, 121-001, , 33.00, 33.00, , 2.31, 2.31, 16, 23/11/2021, NDT45 : 1, Vendor B, 33.00, , , 033-002, 33.00, , , 2.31, , , 17, 23/11/2021, NDT45 : 1, Vendor B, 30.00, , 30.00, 033-002, 30.00, , 30.00, 2.10, , 2.10, 18, 23/11/2021, NDT45 : 1, Bank, , 30.00, , 121-001, , 30.00, , , 2.10, , 19, 23/11/2021, NDT46 : 2, Customer A, , 6.00, 6.00, 122-001, , 6.00, 6.00, , 0.42, 0.42, 20, 23/11/2021, NDT46 : 2, HDFC, 6.00, , , HDFC, 6.00, , , 0.42, , , 21, 23/11/2021, NDT46 : 2, HDFC, 0.29, , 0.29, HDFC, 0.29, , 0.29, 0.02, , 0.02, 22, 23/11/2021, NDT46 : 2, VAT INPUT, , 0.29, , VAT INPUT, , 0.29, , , 0.02, , 23, 23/11/2021, NDT47 : 2, Vendor B, 6.00, , 6.00, 033-002, 6.00, , 6.00, 0.42, , 0.42, 24, 23/11/2021, NDT47 : 2, Bank, , 6.00, , 121-001, , 6.00, , , 0.42, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, 23/11/2021, NDT50 : 1, Sales - Computers, , 100.00, 100.00, 071-001, , 100.00, 100.00, , 7.00, 7.00, 26, 23/11/2021, NDT50 : 1, COGS POSTING ACC, 8.75, , 91.25, COGS POSTING ACC, 8.75, , 91.25, 0.61, , 6.39, 27, 23/11/2021, NDT50 : 1, BR COGS ACC INV, , 8.75, 100.00, BR COGS ACC INV, , 8.75, 100.00, , 0.61, 7.00, 28, 23/11/2021, NDT50 : 1, Customer A, 100.00, , , 122-001, 100.00, , , 7.00, , , 29, 23/11/2021, NDT50 : 4, FIFO COGS ACC INV, , 3.33, 3.33, FIFO COGS ACC INV, , 3.33, 3.33, , 0.23, 0.23, 30, 23/11/2021, NDT50 : 4, Sales - Computers, , 60.00, 63.33, 071-001, , 60.00, 63.33, , 4.20, 4.43, 31, 23/11/2021, NDT50 : 4, COGS POSTING ACC, 3.33, , 60.00, COGS POSTING ACC, 3.33, , 60.00, 0.23, , 4.20, 32, 23/11/2021, NDT50 : 4, Customer A, 60.00, , , 122-001, 60.00, , , 4.20, , , 33, 23/11/2021, NDT50 : 5, COGS POSTING ACC, 22.23, , 22.23, COGS POSTING ACC, 22.23, , 22.23, 1.56, , 1.56, 34, 23/11/2021, NDT50 : 5, WA COGS ACC INV, , 22.23, , WA COGS ACC INV, , 22.23, , , 1.56, , 35, 23/11/2021, NDT50 : 5, Sales - Computers, , 30.00, 30.00, 071-001, , 30.00, 30.00, , 2.10, 2.10, 36, 23/11/2021, NDT50 : 5, Customer A, 30.00, , , 122-001, 30.00, , , 2.10, , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[37, 23/11/2021, NDT50 : 6, STD RATE COGS ACC INV, , 120.00, 120.00, STD RATE COGS ACC INV, , 120.00, 120.00, , 8.40, 8.40, 38, 23/11/2021, NDT50 : 6, Customer A, 120.00, , , 122-001, 120.00, , , 8.40, , , 39, 23/11/2021, NDT50 : 6, COGS POSTING ACC, 120.00, , 120.00, COGS POSTING ACC, 120.00, , 120.00, 8.40, , 8.40, 40, 23/11/2021, NDT50 : 6, Sales - Computers, , 120.00, , 071-001, , 120.00, , , 8.40, , 41, 23/11/2021, NDT50 : 7, COGS POSTING ACC, 10.00, , 10.00, COGS POSTING ACC, 10.00, , 10.00, 0.70, , 0.70, 42, 23/11/2021, NDT50 : 7, BR COGS ACC INV, , 10.00, , BR COGS ACC INV, , 10.00, , , 0.70, , 43, 23/11/2021, NDT50 : 7, Sales - Computers, , 100.00, 100.00, 071-001, , 100.00, 100.00, , 7.00, 7.00, 44, 23/11/2021, NDT50 : 7, STD RATE COGS ACC INV, , 120.00, 220.00, STD RATE COGS ACC INV, , 120.00, 220.00, , 8.40, 15.40, 45, 23/11/2021, NDT50 : 7, Customer A, 100.00, , 120.00, 122-001, 100.00, , 120.00, 7.00, , 8.40, 46, 23/11/2021, NDT50 : 7, Customer A, 90.00, , 30.00, 122-001, 90.00, , 30.00, 6.30, , 2.10, 47, 23/11/2021, NDT50 : 7, Sales - Computers, , 90.00, 120.00, 071-001, , 90.00, 120.00, , 6.30, 8.40, 48, 23/11/2021, NDT50 : 7, COGS POSTING ACC, 5.00, , 115.00, COGS POSTING ACC, 5.00, , 115.00, 0.35, , 8.05]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List = "[49, 23/11/2021, NDT50 : 7, Customer A, 120.00, , 5.00, 122-001, 120.00, , 5.00, 8.40, , 0.35, 50, 23/11/2021, NDT50 : 7, Sales - Computers, , 120.00, 115.00, 071-001, , 120.00, 115.00, , 8.40, 8.05, 51, 23/11/2021, NDT50 : 7, WA COGS ACC INV, , 74.11, 189.11, WA COGS ACC INV, , 74.11, 189.11, , 5.19, 13.24, 52, 23/11/2021, NDT50 : 7, COGS POSTING ACC, 120.00, , 69.11, COGS POSTING ACC, 120.00, , 69.11, 8.40, , 4.84, 53, 23/11/2021, NDT50 : 7, COGS POSTING ACC, 74.11, , 5.00, COGS POSTING ACC, 74.11, , 5.00, 5.19, , 0.35, 54, 23/11/2021, NDT50 : 7, Sales - Computers, , 120.00, 115.00, 071-001, , 120.00, 115.00, , 8.40, 8.05, 55, 23/11/2021, NDT50 : 7, Customer A, 120.00, , 5.00, 122-001, 120.00, , 5.00, 8.40, , 0.35, 56, 23/11/2021, NDT50 : 7, FIFO COGS ACC INV, , 5.00, , FIFO COGS ACC INV, , 5.00, , , 0.35, , 57, 23/11/2021, NDT51 : 1, Vendor B, 31.50, , 31.50, 033-002, 31.50, , 31.50, 2.21, , 2.21, 58, 23/11/2021, NDT51 : 1, VAT ADVANCE PURCHASE, , 1.50, 30.00, VAT ADVANCE PURCHASE, , 1.50, 30.00, , 0.11, 2.10, 59, 23/11/2021, NDT51 : 1, VAT INPUT, 1.50, , 31.50, VAT INPUT, 1.50, , 31.50, 0.11, , 2.21, 60, 23/11/2021, NDT51 : 1, Bank, , 31.50, , 121-001, , 31.50, , , 2.21, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
			}
			String actPage6List = reportPage6ListArray.toString();
			String expPage6List = "[61, 23/11/2021, NDT52 : 1, Bank, 50.00, , 50.00, 121-001, 50.00, , 50.00, 3.50, , 3.50, 62, 23/11/2021, NDT52 : 1, Vendor B, , 50.00, , 033-002, , 50.00, , , 3.50, , 63, 23/11/2021, NDT55 : 1, Bank, , 31.50, 31.50, 121-001, , 31.50, 31.50, , 2.21, 2.21, 64, 23/11/2021, NDT55 : 1, Vendor B, 31.50, , , 033-002, 31.50, , , 2.21, , , 65, 23/11/2021, ExeStk : 2, WA COGS ACC INV, 100.00, , 100.00, WA COGS ACC INV, 100.00, , 100.00, 100.00, , 100.00, 66, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, , 100.00, , EXCESS COGS POSTING ACC, , 100.00, , , 100.00, , 67, 23/11/2021, ExeStk : 2, STD RATE COGS ACC INV, 10.00, , 10.00, STD RATE COGS ACC INV, 10.00, , 10.00, 10.00, , 10.00, 68, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, , 10.00, , EXCESS COGS POSTING ACC, , 10.00, , , 10.00, , 69, 23/11/2021, ExeStk : 2, FIFO COGS ACC INV, 10.00, , 10.00, FIFO COGS ACC INV, 10.00, , 10.00, 10.00, , 10.00, 70, 23/11/2021, ExeStk : 2, BR COGS ACC INV, 10.00, , 20.00, BR COGS ACC INV, 10.00, , 20.00, 10.00, , 20.00, 71, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, , 10.00, 10.00, EXCESS COGS POSTING ACC, , 10.00, 10.00, , 10.00, 10.00, 72, 23/11/2021, ExeStk : 2, EXCESS COGS POSTING ACC, , 10.00, , EXCESS COGS POSTING ACC, , 10.00, , , 10.00, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage7Count = reportTableCells.size();
			ArrayList<String> reportPage7ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage7Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage7ListArray.add(data);
			}
			String actPage7List = reportPage7ListArray.toString();
			String expPage7List = "[73, 23/11/2021, SalRet : 1, Sales - Computers, 120.00, , 120.00, 071-001, 120.00, , 120.00, 8.40, , 8.40, 74, 23/11/2021, SalRet : 1, STD RATE COGS ACC INV, 120.00, , 240.00, STD RATE COGS ACC INV, 120.00, , 240.00, 8.40, , 16.80, 75, 23/11/2021, SalRet : 1, SR COGS POSTING ACC, , 120.00, 120.00, SR COGS POSTING ACC, , 120.00, 120.00, , 8.40, 8.40, 76, 23/11/2021, SalRet : 1, Customer A, , 120.00, , 122-001, , 120.00, , , 8.40, , 77, 23/11/2021, NDT57 : SU/IND/TEXT1, STD RATE COGS ACC INV, 240.00, , 240.00, STD RATE COGS ACC INV, 240.00, , 240.00, 16.80, , 16.80, 78, 23/11/2021, NDT57 : SU/IND/TEXT1, VAT INPUT, 3.00, , 243.00, VAT INPUT, 3.00, , 243.00, 0.21, , 17.01, 79, 23/11/2021, NDT57 : SU/IND/TEXT1, Vendor B, , 63.00, 180.00, 033-002, , 63.00, 180.00, , 4.41, 12.60, 80, 23/11/2021, NDT57 : SU/IND/TEXT1, PURCHASE VARIANCE, , 180.00, , PURCHASE VARIANCE, , 180.00, , , 12.60, , 81, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, , 10.50, 10.50, 033-002, , 10.50, 10.50, , 0.74, 0.74, 82, 23/11/2021, NDT57 : SU/IND/TEXT2, BR COGS ACC INV, 10.00, , 0.50, BR COGS ACC INV, 10.00, , 0.50, 0.70, , 0.04, 83, 23/11/2021, NDT57 : SU/IND/TEXT2, Vendor B, , 21.00, 21.50, 033-002, , 21.00, 21.50, , 1.47, 1.51, 84, 23/11/2021, NDT57 : SU/IND/TEXT2, VAT INPUT, 0.50, , 21.00, VAT INPUT, 0.50, , 21.00, 0.04, , 1.47]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage8Count = reportTableCells.size();
			ArrayList<String> reportPage8ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage8Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage8ListArray.add(data);
			}
			String actPage8List = reportPage8ListArray.toString();
			String expPage8List = "[85, 23/11/2021, NDT57 : SU/IND/TEXT2, VAT INPUT, 1.00, , 20.00, VAT INPUT, 1.00, , 20.00, 0.07, , 1.40, 86, 23/11/2021, NDT57 : SU/IND/TEXT2, BR COGS ACC INV, 20.00, , , BR COGS ACC INV, 20.00, , , 1.40, , , 87, 23/11/2021, NDT57 : SU/IND/TEXT3, VAT INPUT, 0.50, , 0.50, VAT INPUT, 0.50, , 0.50, 0.04, , 0.04, 88, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, , 21.00, 20.50, 033-002, , 21.00, 20.50, , 1.47, 1.44, 89, 23/11/2021, NDT57 : SU/IND/TEXT3, Vendor B, , 10.50, 31.00, 033-002, , 10.50, 31.00, , 0.74, 2.17, 90, 23/11/2021, NDT57 : SU/IND/TEXT3, PURCHASE VARIANCE, , 330.00, 361.00, PURCHASE VARIANCE, , 330.00, 361.00, , 23.10, 25.27, 91, 23/11/2021, NDT57 : SU/IND/TEXT3, VAT INPUT, 1.00, , 360.00, VAT INPUT, 1.00, , 360.00, 0.07, , 25.20, 92, 23/11/2021, NDT57 : SU/IND/TEXT3, STD RATE COGS ACC INV, 240.00, , 120.00, STD RATE COGS ACC INV, 240.00, , 120.00, 16.80, , 8.40, 93, 23/11/2021, NDT57 : SU/IND/TEXT3, STD RATE COGS ACC INV, 120.00, , , STD RATE COGS ACC INV, 120.00, , , 8.40, , , 94, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, , 10.50, 10.50, 033-002, , 10.50, 10.50, , 0.74, 0.74, 95, 23/11/2021, NDT57 : SU/IND/TEXT4, VAT INPUT, 0.50, , 10.00, VAT INPUT, 0.50, , 10.00, 0.04, , 0.70, 96, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, , 10.50, 20.50, 033-002, , 10.50, 20.50, , 0.74, 1.44]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage9Count = reportTableCells.size();
			ArrayList<String> reportPage9ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage9Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage9ListArray.add(data);
			}
			String actPage9List = reportPage9ListArray.toString();
			String expPage9List = "[97, 23/11/2021, NDT57 : SU/IND/TEXT4, VAT INPUT, 0.50, , 20.00, VAT INPUT, 0.50, , 20.00, 0.04, , 1.40, 98, 23/11/2021, NDT57 : SU/IND/TEXT4, FIFO COGS ACC INV, 10.00, , 10.00, FIFO COGS ACC INV, 10.00, , 10.00, 0.70, , 0.70, 99, 23/11/2021, NDT57 : SU/IND/TEXT4, VAT INPUT, 0.50, , 9.50, VAT INPUT, 0.50, , 9.50, 0.04, , 0.67, 100, 23/11/2021, NDT57 : SU/IND/TEXT4, FIFO COGS ACC INV, 10.00, , 0.50, FIFO COGS ACC INV, 10.00, , 0.50, 0.70, , 0.04, 101, 23/11/2021, NDT57 : SU/IND/TEXT4, FIFO COGS ACC INV, 10.00, , 10.50, FIFO COGS ACC INV, 10.00, , 10.50, 0.70, , 0.74, 102, 23/11/2021, NDT57 : SU/IND/TEXT4, Vendor B, , 10.50, , 033-002, , 10.50, , , 0.74, , 103, 23/11/2021, NDT57 : SU/IND/TEXT5, VAT INPUT, 6.00, , 6.00, VAT INPUT, 6.00, , 6.00, 0.42, , 0.42, 104, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, , 105.00, 99.00, 033-002, , 105.00, 99.00, , 7.35, 6.93, 105, 23/11/2021, NDT57 : SU/IND/TEXT5, Vendor B, , 126.00, 225.00, 033-002, , 126.00, 225.00, , 8.82, 15.75, 106, 23/11/2021, NDT57 : SU/IND/TEXT5, WA COGS ACC INV, 100.00, , 125.00, WA COGS ACC INV, 100.00, , 125.00, 7.00, , 8.75, 107, 23/11/2021, NDT57 : SU/IND/TEXT5, VAT INPUT, 5.00, , 120.00, VAT INPUT, 5.00, , 120.00, 0.35, , 8.40, 108, 23/11/2021, NDT57 : SU/IND/TEXT5, WA COGS ACC INV, 120.00, , , WA COGS ACC INV, 120.00, , , 8.40, , ]";
			
			System.out.println("*****************************************checkEntryJournalRegisterReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
			System.out.println(actPage6List);
			System.out.println(expPage6List);
			
			System.out.println(actPage7List);
			System.out.println(expPage7List);
			
			System.out.println(actPage8List);
			System.out.println(expPage8List);
			
			System.out.println(actPage9List);
			System.out.println(expPage9List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&&actPage5List.equalsIgnoreCase(expPage5List) && actPage6List.equalsIgnoreCase(expPage6List) && actPage7List.equalsIgnoreCase(expPage7List) 
				&& actPage8List.equalsIgnoreCase(expPage8List)&& actPage9List.equalsIgnoreCase(expPage9List))


			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_517_0']/ul[2]/li[1]/div/label/span")
		private static WebElement entryjournalreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_517_0_DefaultFilter_0']")
		private static WebElement entryjournalreport_DefaultFilterTxt;
		
	
		
		
		
		
		
		public boolean checkEntryJournalRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				entryjournalreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalreport_DefaultFilterTxt));
			entryjournalreport_DefaultFilterTxt.click();
			entryjournalreport_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			entryjournalreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, 23/11/2021, Pmt : 1, Bank, , 6.00, 6.00, 121-001, , 6.00, 6.00, , 6.00, 6.00, 2, 23/11/2021, Pmt : 1, Customer A, 6.00, , , 122-001, 6.00, , , 6.00, , , 3, 23/11/2021, Rct : 1, Bank, 6.00, , 6.00, 121-001, 6.00, , 6.00, 6.00, , 6.00, 4, 23/11/2021, Rct : 1, Customer A, , 6.00, , 122-001, , 6.00, , , 6.00, , 5, 23/11/2021, NDT44 : 1, Bank, 100.00, , 100.00, 121-001, 100.00, , 100.00, 7.00, , 7.00, 6, 23/11/2021, NDT44 : 1, Customer A, , 100.00, , 122-001, , 100.00, , , 7.00, , 7, 23/11/2021, NDT46 : 2, HDFC, 6.00, , 6.00, HDFC, 6.00, , 6.00, 0.42, , 0.42, 8, 23/11/2021, NDT46 : 2, Customer A, , 6.00, , 122-001, , 6.00, , , 0.42, , 9, 23/11/2021, NDT50 : 1, Customer A, 100.00, , 100.00, 122-001, 100.00, , 100.00, 7.00, , 7.00, 10, 23/11/2021, NDT50 : 1, Sales - Computers, , 100.00, , 071-001, , 100.00, , , 7.00, , 11, 23/11/2021, NDT50 : 4, Sales - Computers, , 60.00, 60.00, 071-001, , 60.00, 60.00, , 4.20, 4.20, 12, 23/11/2021, NDT50 : 4, Customer A, 60.00, , , 122-001, 60.00, , , 4.20, , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("9")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 5, Sales - Computers, , 30.00, 30.00, 071-001, , 30.00, 30.00, , 2.10, 2.10, 14, 23/11/2021, NDT50 : 5, Customer A, 30.00, , , 122-001, 30.00, , , 2.10, , , 15, 23/11/2021, NDT50 : 6, Sales - Computers, , 120.00, 120.00, 071-001, , 120.00, 120.00, , 8.40, 8.40, 16, 23/11/2021, NDT50 : 6, Customer A, 120.00, , , 122-001, 120.00, , , 8.40, , , 17, 23/11/2021, NDT50 : 7, Sales - Computers, , 120.00, 120.00, 071-001, , 120.00, 120.00, , 8.40, 8.40, 18, 23/11/2021, NDT50 : 7, Customer A, 120.00, , , 122-001, 120.00, , , 8.40, , , 19, 23/11/2021, NDT50 : 7, Sales - Computers, , 100.00, 100.00, 071-001, , 100.00, 100.00, , 7.00, 7.00, 20, 23/11/2021, NDT50 : 7, Sales - Computers, , 90.00, 190.00, 071-001, , 90.00, 190.00, , 6.30, 13.30, 21, 23/11/2021, NDT50 : 7, Customer A, 120.00, , 70.00, 122-001, 120.00, , 70.00, 8.40, , 4.90, 22, 23/11/2021, NDT50 : 7, Customer A, 100.00, , 30.00, 122-001, 100.00, , 30.00, 7.00, , 2.10, 23, 23/11/2021, NDT50 : 7, Customer A, 90.00, , 120.00, 122-001, 90.00, , 120.00, 6.30, , 8.40, 24, 23/11/2021, NDT50 : 7, Sales - Computers, , 120.00, , 071-001, , 120.00, , , 8.40, ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, 23/11/2021, SalRet : 1, Sales - Computers, 120.00, , 120.00, 071-001, 120.00, , 120.00, 8.40, , 8.40, 26, 23/11/2021, SalRet : 1, Customer A, , 120.00, , 122-001, , 120.00, , , 8.40, , 27, Grand Total, , , 978.00, 978.00, 214.00, , 978.00, 978.00, 214.00, 79.62, 79.62, 14.98]";
		
			
			
			
			
			System.out.println("*****************************************checkEntryJournalRegisterReportwithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			System.out.println(actPage3List);
			System.out.println(actPage3List);
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				entryjournalreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&
					actPage2List.equalsIgnoreCase(expPage2List)&&actPage3List.equalsIgnoreCase(expPage3List)&&

					actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkEntryJournalRegisterReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Vendor B") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Vendor A";
		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit = "";
		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit = "30.00";
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account = "Vendor B";
		
		String actR2Debit = select2ndRow_2ndColumn.getText();
		String expR2Debit = "20.00";
		
		String actR2Credit = select2ndRow_3rdColumn.getText();
		String expR2Credit = "";
		
		
		
		System.out.println("**********************checkEntryJournalRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Account       : "+actR2Account			+"  Value Expected  "+expR2Account);
		System.out.println("Debit            : "+actR2Debit				+"  Value Expected  "+expR2Debit);
		System.out.println("Credit         : "+actR2Credit			+"  Value Expected  "+expR2Credit);
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit)
			   && actR2Account.equalsIgnoreCase(expR2Account)
			   &&actR2Debit.equalsIgnoreCase(expR2Debit)&&actR2Credit.equalsIgnoreCase(expR2Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

	
		
		public boolean checkEntryJournalDetailReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryJournalDetailReport));
			entryJournalDetailReport.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, OpeBal : 1, 01/01/2020, Opening Balances Control A/C, , 1,500.00, 2, OpeBal : 1, 01/01/2020, , Vendor A, 1,500.00, 3, OpeBal : 1, 01/01/2020, Vendor B, , 1,000.00, 4, OpeBal : 1, 01/01/2020, , Opening Balances Control A/C, 1,000.00, 5, NDT57 : SU/IND/TEXT1, 23/11/2021, STD RATE COGS ACC INV, , 240.00, 6, NDT57 : SU/IND/TEXT1, 23/11/2021, , Vendor B, 63.00, 7, NDT57 : SU/IND/TEXT1, 23/11/2021, VAT INPUT, , 3.00, 8, NDT57 : SU/IND/TEXT1, 23/11/2021, , PURCHASE VARIANCE, 180.00, 9, NDT57 : SU/IND/TEXT2, 23/11/2021, BR COGS ACC INV, , 10.00, 10, NDT57 : SU/IND/TEXT2, 23/11/2021, , Vendor B, 10.50, 11, NDT57 : SU/IND/TEXT2, 23/11/2021, VAT INPUT, , 0.50, 12, NDT57 : SU/IND/TEXT2, 23/11/2021, BR COGS ACC INV, , 20.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("9")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, NDT57 : SU/IND/TEXT2, 23/11/2021, , Vendor B, 21.00, 14, NDT57 : SU/IND/TEXT2, 23/11/2021, VAT INPUT, , 1.00, 15, NDT57 : SU/IND/TEXT3, 23/11/2021, STD RATE COGS ACC INV, , 120.00, 16, NDT57 : SU/IND/TEXT3, 23/11/2021, , Vendor B, 10.50, 17, NDT57 : SU/IND/TEXT3, 23/11/2021, VAT INPUT, , 0.50, 18, NDT57 : SU/IND/TEXT3, 23/11/2021, STD RATE COGS ACC INV, , 240.00, 19, NDT57 : SU/IND/TEXT3, 23/11/2021, , Vendor B, 21.00, 20, NDT57 : SU/IND/TEXT3, 23/11/2021, VAT INPUT, , 1.00, 21, NDT57 : SU/IND/TEXT3, 23/11/2021, , PURCHASE VARIANCE, 330.00, 22, NDT57 : SU/IND/TEXT4, 23/11/2021, FIFO COGS ACC INV, , 10.00, 23, NDT57 : SU/IND/TEXT4, 23/11/2021, , Vendor B, 10.50, 24, NDT57 : SU/IND/TEXT4, 23/11/2021, FIFO COGS ACC INV, , 10.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[25, NDT57 : SU/IND/TEXT4, 23/11/2021, , Vendor B, 10.50, 26, NDT57 : SU/IND/TEXT4, 23/11/2021, VAT INPUT, , 0.50, 27, NDT57 : SU/IND/TEXT4, 23/11/2021, VAT INPUT, , 0.50, 28, NDT57 : SU/IND/TEXT4, 23/11/2021, FIFO COGS ACC INV, , 10.00, 29, NDT57 : SU/IND/TEXT4, 23/11/2021, , Vendor B, 10.50, 30, NDT57 : SU/IND/TEXT4, 23/11/2021, VAT INPUT, , 0.50, 31, NDT57 : SU/IND/TEXT5, 23/11/2021, WA COGS ACC INV, , 120.00, 32, NDT57 : SU/IND/TEXT5, 23/11/2021, , Vendor B, 126.00, 33, NDT57 : SU/IND/TEXT5, 23/11/2021, VAT INPUT, , 6.00, 34, NDT57 : SU/IND/TEXT5, 23/11/2021, WA COGS ACC INV, , 100.00, 35, NDT57 : SU/IND/TEXT5, 23/11/2021, , Vendor B, 105.00, 36, NDT57 : SU/IND/TEXT5, 23/11/2021, VAT INPUT, , 5.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[37, NDT45 : 1, 23/11/2021, Vendor B, , 30.00, 38, NDT45 : 1, 23/11/2021, , Bank, 30.00, 39, NDT45 : 1, 23/11/2021, Vendor B, , 33.00, 40, NDT45 : 1, 23/11/2021, , Bank, 33.00, 41, ExeStk : 2, 23/11/2021, STD RATE COGS ACC INV, , 10.00, 42, ExeStk : 2, 23/11/2021, , EXCESS COGS POSTING ACC, 10.00, 43, ExeStk : 2, 23/11/2021, BR COGS ACC INV, , 10.00, 44, ExeStk : 2, 23/11/2021, , EXCESS COGS POSTING ACC, 10.00, 45, ExeStk : 2, 23/11/2021, FIFO COGS ACC INV, , 10.00, 46, ExeStk : 2, 23/11/2021, , EXCESS COGS POSTING ACC, 10.00, 47, ExeStk : 2, 23/11/2021, WA COGS ACC INV, , 100.00, 48, ExeStk : 2, 23/11/2021, , EXCESS COGS POSTING ACC, 100.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List = "[49, NDT50 : 1, 23/11/2021, Customer A, , 100.00, 50, NDT50 : 1, 23/11/2021, , Sales - Computers, 100.00, 51, NDT50 : 1, 23/11/2021, COGS POSTING ACC, , 8.75, 52, NDT50 : 1, 23/11/2021, , BR COGS ACC INV, 8.75, 53, NDT50 : 4, 23/11/2021, Customer A, , 60.00, 54, NDT50 : 4, 23/11/2021, , Sales - Computers, 60.00, 55, NDT50 : 4, 23/11/2021, COGS POSTING ACC, , 3.33, 56, NDT50 : 4, 23/11/2021, , FIFO COGS ACC INV, 3.33, 57, NDT50 : 5, 23/11/2021, Customer A, , 30.00, 58, NDT50 : 5, 23/11/2021, , Sales - Computers, 30.00, 59, NDT50 : 5, 23/11/2021, COGS POSTING ACC, , 22.23, 60, NDT50 : 5, 23/11/2021, , WA COGS ACC INV, 22.23]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
			}
			String actPage6List = reportPage6ListArray.toString();
			String expPage6List = "[61, NDT50 : 6, 23/11/2021, Customer A, , 120.00, 62, NDT50 : 6, 23/11/2021, , Sales - Computers, 120.00, 63, NDT50 : 6, 23/11/2021, COGS POSTING ACC, , 120.00, 64, NDT50 : 6, 23/11/2021, , STD RATE COGS ACC INV, 120.00, 65, NDT50 : 7, 23/11/2021, Customer A, , 120.00, 66, NDT50 : 7, 23/11/2021, , Sales - Computers, 120.00, 67, NDT50 : 7, 23/11/2021, Customer A, , 90.00, 68, NDT50 : 7, 23/11/2021, , Sales - Computers, 90.00, 69, NDT50 : 7, 23/11/2021, Customer A, , 100.00, 70, NDT50 : 7, 23/11/2021, , Sales - Computers, 100.00, 71, NDT50 : 7, 23/11/2021, Customer A, , 120.00, 72, NDT50 : 7, 23/11/2021, , Sales - Computers, 120.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage7Count = reportTableCells.size();
			ArrayList<String> reportPage7ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage7Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage7ListArray.add(data);
			}
			String actPage7List = reportPage7ListArray.toString();
			String expPage7List = "[73, NDT50 : 7, 23/11/2021, COGS POSTING ACC, , 10.00, 74, NDT50 : 7, 23/11/2021, , BR COGS ACC INV, 10.00, 75, NDT50 : 7, 23/11/2021, COGS POSTING ACC, , 5.00, 76, NDT50 : 7, 23/11/2021, , FIFO COGS ACC INV, 5.00, 77, NDT50 : 7, 23/11/2021, COGS POSTING ACC, , 74.11, 78, NDT50 : 7, 23/11/2021, , WA COGS ACC INV, 74.11, 79, NDT50 : 7, 23/11/2021, COGS POSTING ACC, , 120.00, 80, NDT50 : 7, 23/11/2021, , STD RATE COGS ACC INV, 120.00, 81, SalRet : 1, 23/11/2021, Sales - Computers, , 120.00, 82, SalRet : 1, 23/11/2021, , Customer A, 120.00, 83, SalRet : 1, 23/11/2021, STD RATE COGS ACC INV, , 120.00, 84, SalRet : 1, 23/11/2021, , SR COGS POSTING ACC, 120.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage8Count = reportTableCells.size();
			ArrayList<String> reportPage8ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage8Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage8ListArray.add(data);
			}
			String actPage8List = reportPage8ListArray.toString();
			String expPage8List = "[85, NDT44 : 1, 23/11/2021, Bank, , 100.00, 86, NDT44 : 1, 23/11/2021, , Customer A, 100.00, 87, NDT52 : 1, 23/11/2021, Bank, , 50.00, 88, NDT52 : 1, 23/11/2021, , Vendor B, 50.00, 89, NDT51 : 1, 23/11/2021, Vendor B, , 31.50, 90, NDT51 : 1, 23/11/2021, , Bank, 31.50, 91, NDT51 : 1, 23/11/2021, VAT INPUT, , 1.50, 92, NDT51 : 1, 23/11/2021, , VAT ADVANCE PURCHASE, 1.50, 93, NDT55 : 1, 23/11/2021, Vendor B, , 31.50, 94, NDT55 : 1, 23/11/2021, , Bank, 31.50, 95, Rct : 1, 23/11/2021, Bank, , 6.00, 96, Rct : 1, 23/11/2021, , Customer A, 6.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage9Count = reportTableCells.size();
			ArrayList<String> reportPage9ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage9Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage9ListArray.add(data);
			}
			String actPage9List = reportPage9ListArray.toString();
			String expPage9List = "[97, NDT46 : 2, 23/11/2021, HDFC, , 6.00, 98, NDT46 : 2, 23/11/2021, , Customer A, 6.00, 99, NDT46 : 2, 23/11/2021, HDFC, , 0.29, 100, NDT46 : 2, 23/11/2021, , VAT INPUT, 0.29, 101, Rct : 2, 23/11/2021, Bank, , 6.00, 102, Rct : 2, 23/11/2021, , HDFC, 6.00, 103, Pmt : 1, 23/11/2021, Customer A, , 6.00, 104, Pmt : 1, 23/11/2021, , Bank, 6.00, 105, NDT47 : 2, 23/11/2021, Vendor B, , 6.00, 106, NDT47 : 2, 23/11/2021, , Bank, 6.00, 107, Pmt : 2, 23/11/2021, Bank, , 6.00, 108, Pmt : 2, 23/11/2021, , HDFC, 6.00]";
			
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage10Count = reportTableCells.size();
			ArrayList<String> reportPage10ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage10Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage10ListArray.add(data);
			}
			String actPage10List = reportPage10ListArray.toString();
			String expPage10List = "[109, Grand Total, , , , ]";
			
			
			
			
			
			
			
			
			System.out.println("*****************************************checkEntryJournalDetailedReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
			System.out.println(actPage6List);
			System.out.println(expPage6List);
			
			System.out.println(actPage7List);
			System.out.println(expPage7List);
			
			System.out.println(actPage8List);
			System.out.println(expPage8List);
			
			System.out.println(actPage9List);
			System.out.println(expPage9List);
			
			System.out.println(actPage10List);
			System.out.println(expPage10List);
			
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&&actPage5List.equalsIgnoreCase(expPage5List) && actPage6List.equalsIgnoreCase(expPage6List) && actPage7List.equalsIgnoreCase(expPage7List) 
				&& actPage8List.equalsIgnoreCase(expPage8List)&& actPage9List.equalsIgnoreCase(expPage9List)
				&& actPage10List.equalsIgnoreCase(expPage10List))


			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_674_0']/ul[2]/li[1]/div/label/span")
		private static WebElement entryjournalDetailreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_674_0_DefaultFilter_0']")
		private static WebElement entryjournalDetailreport_DefaultFilterTxt;
		
	
		
		
		
		
		
		public boolean checkEntryJournalDetailsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalDetailreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				entryjournalDetailreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalDetailreport_DefaultFilterTxt));
			entryjournalDetailreport_DefaultFilterTxt.click();
			entryjournalDetailreport_DefaultFilterTxt.sendKeys("Customer A");
			
			Thread.sleep(2000);
			
			entryjournalDetailreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, NDT50 : 1, 23/11/2021, Customer A, , 100.00, 2, NDT50 : 4, 23/11/2021, Customer A, , 60.00, 3, NDT50 : 5, 23/11/2021, Customer A, , 30.00, 4, NDT50 : 6, 23/11/2021, Customer A, , 120.00, 5, NDT50 : 7, 23/11/2021, Customer A, , 120.00, 6, NDT50 : 7, 23/11/2021, Customer A, , 90.00, 7, NDT50 : 7, 23/11/2021, Customer A, , 100.00, 8, NDT50 : 7, 23/11/2021, Customer A, , 120.00, 9, SalRet : 1, 23/11/2021, , Customer A, 120.00, 10, NDT44 : 1, 23/11/2021, , Customer A, 100.00, 11, Rct : 1, 23/11/2021, , Customer A, 6.00, 12, NDT46 : 2, 23/11/2021, , Customer A, 6.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, Pmt : 1, 23/11/2021, Customer A, , 6.00, 14, Grand Total, , , , 514.00]";
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
		
			*/
			
			
			
			System.out.println("*****************************************checkEntryJournalDetailsReportwithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			//System.out.println(actPage3List);
			//System.out.println(actPage3List);
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalDetailreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				entryjournalDetailreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&
					actPage2List.equalsIgnoreCase(expPage2List)/*&&actPage3List.equalsIgnoreCase(expPage3List)*/&&

					actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkEntryJournalDetailsReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("Vendor B") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Vendor A";
		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit = "";
		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit = "30.00";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account = "Vendor B";
		
		String actR2Debit = select2ndRow_2ndColumn.getText();
		String expR2Debit = "20.00";
		
		String actR2Credit = select2ndRow_3rdColumn.getText();
		String expR2Credit = "";
		
		
		System.out.println("**********************checkEntryJournalDetailsReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		
	System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Account       : "+actR2Account			+"  Value Expected  "+expR2Account);
		System.out.println("Debit            : "+actR2Debit				+"  Value Expected  "+expR2Debit);
		System.out.println("Credit         : "+actR2Credit			+"  Value Expected  "+expR2Credit);
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit)
			   && actR2Account.equalsIgnoreCase(expR2Account)
			   &&actR2Debit.equalsIgnoreCase(expR2Debit)&&actR2Credit.equalsIgnoreCase(expR2Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

	
		
	//Sales and Purchase Analysis
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[10]")
		private static WebElement salesAndPurchasesMenu;
		
		
				
		@FindBy(xpath="//span[contains(text(),'Sales Grouped by Customer')]")
		private static WebElement salesGroupedByCustomer;
		
		@FindBy(xpath="//span[contains(text(),'Sales Grouped by Item')]")
		private static WebElement salesGroupedByItem;
		
		@FindBy(xpath="//span[contains(text(),'Sales Grouped by Department')]")
		private static WebElement salesGroupedByDepartment;
		
		@FindBy(xpath="//span[contains(text(),'Purchases Grouped by Vendor')]")
		private static WebElement purchasesGroupedByVendor;
		
		@FindBy(xpath="//span[contains(text(),'Purchases Grouped by Item')]")
		private static WebElement purchasesGroupedByItem;
		
		@FindBy(xpath="//span[contains(text(),'Purchases Grouped by Department')]")
		private static WebElement purchasesGroupedByDepartment;
		
	
		
		
		
		
		public boolean checkSalesGroupedByCustomerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByCustomer));
			salesGroupedByCustomer.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Customer A, BR COGS ITEM, 22.00, 220.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Customer A, FIFO COGS ITEM, 15.00, 150.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Customer A, STD RATE COGS ITEM, 24.00, 240.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			
		
			System.out.println("*****************************************checkSalesGroupedByCustomerReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List))
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	
		
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_524_0']/ul[3]/li[1]/div/label/span")
		private static WebElement salesByCustomerreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_524_0_DefaultFilter_0']")
		private static WebElement salesByCustomerreport_DefaultFilterTxt;
		
		
		
		public boolean checkSalesGroupedByCustomerReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				salesByCustomerreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerreport_DefaultFilterTxt));
			salesByCustomerreport_DefaultFilterTxt.click();
			salesByCustomerreport_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			
			
			salesByCustomerreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 13.00, 130.00]";
			
		/*	int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "";
			
			*/

			
			
			
			
			
			
			System.out.println("*****************************************checkSalesGroupedByCustomerReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			//System.out.println(actRow3List);
			//System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				salesByCustomerreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(1000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 6; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)/*&&actRow3List.equalsIgnoreCase(expRow3List)*/&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		

		public boolean checkSalesGroupedByCustomerReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase("WA COGS ITEM"))
                         {
                    		 
                    		 reportTableColumn2RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("November 2021");
			expMonthlyList.add("");
			//expMonthlyList.add("746.00");
			//expMonthlyList.add("232.00");
			//expMonthlyList.add("514.00 Dr");
			
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("November 2021")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("23");
			expDayList.add("");
			//expDayList.add("746.00");
			//expDayList.add("232.00");
			//expDayList.add("36.00");
			//expDayList.add("514.00 Dr");
			
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("23")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT50:7");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("Rct:1");
			expVouchersList.add("NDT46:2");
			expVouchersList.add("Pmt:1");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("NDT44:1");
			expVouchersList.add("NDT50:5");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase("NDT50:4")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
				String expDocNo = "4";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount = "Customer A";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				String actCurrency = voucherHeaderCurrency.getAttribute("value");
				String expCurrency = "INR";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = "DUBAI";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply = "Abu Dhabi";

				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction = "Dubai";
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Warehouse = select1stRow_1stColumn.getText();
				String expR1Warehouse = "HYDERABAD";
				
				String actR1Item = select1stRow_2ndColumn.getText();
				String expR1Item = "FIFO COGS ITEM";
				
				String actR1SalesAccount = select1stRow_4thColumn.getText();
				String expR1SalesAccount = "Sales - Computers";
				
				String actR1TaxCode = select1stRow_3rdColumn.getText();
				String expR1TaxCode = "Std Rate";
				
				
				
				String actR1Units = select1stRow_5thColumn.getText();
				String expR1Units = "Pcs";
				
				String actR1Quantity = select1stRow_11thColumn.getText();
				String expR1Quantity = "6.00";
				
				String actR1Rate = select1stRow_14thColumn.getText();
				String expR1Rate = "10.00";
				
				String actR1Gross = select1stRow_15thColumn.getText();
				String expR1Gross = "60.00 ";
				
				String actR1Batch = select1stRow_19thColumn.getText();
				String expR1Batch = "";

				/*String actR1Expiry = select1stRow_18thColumn.getText();
				DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
				Calendar R1cal=Calendar.getInstance();
				R1cal.add(Calendar.DATE, 2); 
				//String expR1Expiry=dtf.format(R1cal.getTime());
				String expR1Expiry="100.00";
				*/
				
				
				

			 	
				System.out.println("**********************checkSalesGroupedByCustomerBackTrackOption*********************");
				 
				System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
				
				System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
				System.out.println("Vendor          : "+actAccount			+"  Value Expected  "+expAccount);
				System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
				System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
				System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
				System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
				
				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
				System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
				System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
				System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
				System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
				System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
				System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
				System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
				System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
				
				
				
				
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				
				if ( actOpenWindowsCount==expOpenWindowsCount
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount) && actCurrency.equalsIgnoreCase(expCurrency) 
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
					   
					   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
					   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
					   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
					   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
					  
					  ) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return false;
				}
			}
		
		
		
		
		public boolean checkSalesGroupedByCustomerReportswithSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByCustomer));
			salesGroupedByCustomer.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Customer A, BR COGS ITEM, 22.00, 220.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Customer A, FIFO COGS ITEM, 15.00, 150.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Customer A, STD RATE COGS ITEM, 24.00, 240.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 62.00, 620.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[, , 62.00, 620.00, Grand Total, , 62.00, 620.00]";
			
			
			
			
			
			System.out.println("*********************************checkSalesGroupedByCustomerReportwithIncludeSalesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		

		public boolean checkSalesGroupedByItemReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByItem));
			salesGroupedByItem.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, Customer A, 22.00, 220.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 22.00, 220.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, Customer A, 15.00, 150.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[, , 15.00, 150.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, Customer A, 24.00, 240.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[, , 24.00, 240.00]";
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "[WA COGS ITEM, Customer A, 13.00, 130.00]";
			
			int reportsByWarehouseRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsByWarehouseRow8ListArray.add(data);
			}
			String actRow8List = reportsByWarehouseRow8ListArray.toString();
			String expRow8List = "[, , 13.00, 130.00]";
			
			int reportsByWarehouseRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsByWarehouseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsByWarehouseRow9ListArray.add(data);
			}
			String actRow9List = reportsByWarehouseRow9ListArray.toString();
			String expRow9List = "[Grand Total, , 74.00, 740.00]";
			
			
		
			System.out.println("*****************************************checkSalesGroupedByItemReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
					&&actRow7List.equalsIgnoreCase(expRow7List)&&
					actRow8List.equalsIgnoreCase(expRow8List)&&actRow9List.equalsIgnoreCase(expRow9List))
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	
		
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_525_0']/ul[3]/li[1]/div/label/span")
		private static WebElement salesByItemreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_525_0_DefaultFilter_0']")
		private static WebElement salesByItemreport_DefaultFilterTxt;
		
		
		
		public boolean checkSalesGroupedByItemReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				salesByItemreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByItemreport_DefaultFilterTxt));
			salesByItemreport_DefaultFilterTxt.click();
			salesByItemreport_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(2000);
			
			salesByItemreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, Customer A, 13.00, 130.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 13.00, 130.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 13.00, 130.00]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkSalesGroupedByItemReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				salesByItemreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 9; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		

		public boolean checkSalesGroupedByItemPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesGroupedByItemPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}		
		
		
		public boolean checkSalesGroupedByItemReportswithSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByItem));
			salesGroupedByItem.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, Customer A, 22.00, 220.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 22.00, 220.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, Customer A, 15.00, 150.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[, , 15.00, 150.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, Customer A, 12.00, 120.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[, , 12.00, 120.00]";
			
			

			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[WA COGS ITEM, Customer A, 13.00, 130.00]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[, , 13.00, 130.00]";
			
			

			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[Grand Total, , 62.00, 620.00]";
			
			
			
			System.out.println("*********************************checkSalesGroupedByItemReportwithIncludeSalesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		public boolean checkSalesGroupedByDepartmentReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByDepartment));
			salesGroupedByDepartment.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[DUBAI, FIFO COGS ITEM, 15.00, 150.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[DUBAI, BR COGS ITEM, 22.00, 220.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[DUBAI, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[DUBAI, STD RATE COGS ITEM, 24.00, 240.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			/*
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "";
			
			int reportsByWarehouseRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsByWarehouseRow8ListArray.add(data);
			}
			String actRow8List = reportsByWarehouseRow8ListArray.toString();
			String expRow8List = "";
			
			int reportsByWarehouseRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsByWarehouseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsByWarehouseRow9ListArray.add(data);
			}
			String actRow9List = reportsByWarehouseRow9ListArray.toString();
			String expRow9List = "";
			*/
			
		
			System.out.println("*****************************************checkSalesGroupedByDepartmentReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
		/*	
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
					/*&&actRow7List.equalsIgnoreCase(expRow7List)&&
					actRow8List.equalsIgnoreCase(expRow8List)&&actRow9List.equalsIgnoreCase(expRow9List)*/)
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	
		
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_526_0']/ul[2]/li[1]/div/label/span")
		private static WebElement salesByDepartmentreport_FilterDepartmentNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_526_0_DefaultFilter_0']")
		private static WebElement salesByDepartmentreport_DefaultFilterTxt;
		
		
		
		public boolean checkSalesGroupedByDepartmentReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				salesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByDepartmentreport_DefaultFilterTxt));
			salesByDepartmentreport_DefaultFilterTxt.click();
			salesByDepartmentreport_DefaultFilterTxt.sendKeys("DUBAI");
			
			Thread.sleep(2000);
			
			salesByDepartmentreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[DUBAI, STD RATE COGS ITEM, 24.00, 240.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[DUBAI, BR COGS ITEM, 22.00, 220.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[DUBAI, FIFO COGS ITEM, 15.00, 150.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[DUBAI, WA COGS ITEM, 13.00, 130.00]";
			
			

			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			

			
			
			
			
			
			
			System.out.println("*****************************************checkSalesGroupedByDepartmentReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				salesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 6; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)&&


					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		

		public boolean checkSalesGroupedByDepartmentPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesGroupedByDepartmentPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}		
		
		
		public boolean checkSalesGroupedByDepartmentReportswithSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByDepartment));
			salesGroupedByDepartment.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Sales - Computers");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[DUBAI, FIFO COGS ITEM, 15.00, 150.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[DUBAI, BR COGS ITEM, 22.00, 220.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[DUBAI, WA COGS ITEM, 13.00, 130.00]";
			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[DUBAI, STD RATE COGS ITEM, 24.00, 120.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 62.00, 620.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 62.00, 620.00]";
			
			
/*
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "";
			
			

			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "";
			
			*/
			
			System.out.println("*********************************checkSalesGroupedByDepartmentReportwithIncludeSalesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
		/*	
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)/*&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
			


		
		
		
		public boolean checkPurchasesGroupedByVendorReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByVendor));
			purchasesGroupedByVendor.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Vendor B, BR COGS ITEM, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			/*
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
		
			System.out.println("*****************************************checkPurchasesGroupedByVendorReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					/*&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/)
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	

		@FindBy(xpath="//a[contains(text(),'PurchaseAC')]//i")
		private static WebElement report_FilterPurchaseACExpansion;
		
		@FindBy(xpath="(//*[@id='5002'])[1]")
		private static WebElement report_FilterPurchaseACNameChkbox;
		
		
		@FindBy(xpath="(//*[@id='FilterFields_527_0']/ul[3]/li[1]/div/label/span)[1]")
		private static WebElement purchasessByVendorreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_527_0_DefaultFilter_0']")
		private static WebElement purchasesByVendorreport_DefaultFilterTxt;
		
		
		
		public boolean checkPurchasesGroupedByVendorReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterPurchaseACExpansion));
			report_FilterPurchaseACExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasessByVendorreport_FilterItemNameChkbox));
			
			if (report_FilterPurchaseACNameChkbox.isSelected()==false) 
			{
				purchasessByVendorreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByVendorreport_DefaultFilterTxt));
			purchasesByVendorreport_DefaultFilterTxt.click();
			purchasesByVendorreport_DefaultFilterTxt.sendKeys("BR COGS ACC INV");
			
			Thread.sleep(2000);
			
			purchasesByVendorreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Vendor B, BR COGS ITEM, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPurchasesGroupedByVendorReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasessByVendorreport_FilterItemNameChkbox));
			
			if (report_FilterPurchaseACNameChkbox.isSelected()==true) 
			{
				purchasessByVendorreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		

		public boolean checkPurchasesGroupedByVendorReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase("Vendor B"))
                         {
                    		 
                    		 reportTableColumn1RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("November 2021");
			expMonthlyList.add("");
			//expMonthlyList.add("746.00");
			//expMonthlyList.add("232.00");
			//expMonthlyList.add("514.00 Dr");
			
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("November 2021")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("23");
			expDayList.add("");
			//expDayList.add("746.00");
			//expDayList.add("232.00");
			//expDayList.add("36.00");
			//expDayList.add("514.00 Dr");
			
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("23")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("NDT45:1");
			expVouchersList.add("NDT55:1");
			expVouchersList.add("NDT47:2");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT52:1");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("NDT57:SU/IND/TEXT5");
			expVouchersList.add("NDT51:1");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
				String expDocNo = "SU/IND/TEXT2";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount = "Vendor B";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				String actCurrency = voucherHeaderCurrency.getAttribute("value");
				String expCurrency = "INR";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = "INDIA";
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply = "Abu Dhabi";

				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction = "Dubai";
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Warehouse = select1stRow_1stColumn.getText();
				String expR1Warehouse = "HYDERABAD";
				
				String actR1Item = select1stRow_2ndColumn.getText();
				String expR1Item = "BR COGS ITEM";
				
				String actR1PurchasesAccount = select1stRow_4thColumn.getText();
				String expR1PurchasesAccount = "BR COGS ACC INV";
				
				String actR1TaxCode = select1stRow_3rdColumn.getText();
				String expR1TaxCode = "Standard Rated Purchase - Recoverable";
				
				
				
				String actR1Units = select1stRow_5thColumn.getText();
				String expR1Units = "Dozs";
				
				String actR1Quantity = select1stRow_9thColumn.getText();
				String expR1Quantity = "1.00";
				
				String actR1Rate = select1stRow_11thColumn.getText();
				String expR1Rate = "10.00";
				
				String actR1Gross = select1stRow_12thColumn.getText();
				String expR1Gross = "10.00 ";
				
				String actR1Batch = select1stRow_16thColumn.getText();
				String expR1Batch = "";

				/*String actR1Expiry = select1stRow_18thColumn.getText();
				DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
				Calendar R1cal=Calendar.getInstance();
				R1cal.add(Calendar.DATE, 2); 
				//String expR1Expiry=dtf.format(R1cal.getTime());
				String expR1Expiry="100.00";
				*/
				
				
				

			 	
				System.out.println("**********************checkPurchasesGroupedByVendorBackTrackOption*********************");
				 
				System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
				
				System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
				System.out.println("Vendor          : "+actAccount			+"  Value Expected  "+expAccount);
				System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
				System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
				System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
				System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
				
				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
				System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
				System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
				System.out.println("SalesAccount : "+actR1PurchasesAccount	+"  Value Expected  "+expR1PurchasesAccount);
				System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
				System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
				System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
				System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
				System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
				
				
				
				
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				
				if ( actOpenWindowsCount==expOpenWindowsCount
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount) && actCurrency.equalsIgnoreCase(expCurrency) 
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
					   
					   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
					   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchasesAccount.equalsIgnoreCase(expR1PurchasesAccount) 
					   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
					   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
					  
					  ) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					return false;
				}
			}
		
		
		
		
		public boolean checkPurchasesGroupedByVendorReportswithPurchasesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByVendor));
			purchasesGroupedByVendor.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Vendor B, BR COGS ITEM, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			/*
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
			
			
			
			System.out.println("*********************************checkPurchasesGroupedByVendorReportwithIncludePurchasesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		

		public boolean checkPurchasesGroupedByItemReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByItem));
			purchasesGroupedByItem.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, Vendor B, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			/*
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
		
			System.out.println("*****************************************checkPurchasesGroupedByItemReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					/*&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/)
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	

	//	@FindBy(xpath="//a[contains(text(),'PurchaseAC')]//i")
		//private static WebElement report_FilterPurchaseACExpansion;
		
		//@FindBy(xpath="(//*[@id='5002'])[1]")
		//private static WebElement report_FilterPurchaseACNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FilterFields_528_0']/ul[3]/li[1]/div/label/span")
		private static WebElement purchasesByItemreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_528_0_DefaultFilter_0']")
		private static WebElement purchasesByItemreport_DefaultFilterTxt;
		
		
		
		public boolean checkPurchaseGroupedByItemReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				purchasesByItemreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByItemreport_DefaultFilterTxt));
			purchasesByItemreport_DefaultFilterTxt.click();
			purchasesByItemreport_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			purchasesByItemreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, Vendor B, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPurchasesGroupedByItemReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				purchasesByItemreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		

		public boolean checkPurchasesGroupedByItemPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchasesGroupedByItemPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}		
		
		
		
		
		public boolean checkPurchasesGroupedByItemReportswithPurchasesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByItem));
			purchasesGroupedByItem.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, Vendor B, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			/*
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
			
			
			
			System.out.println("*********************************checkPurchasesGroupedByItemReportwithIncludePurchasesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}

		
		
		
		
		
		public boolean checkPurchasesGroupedByDepartmentReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", purchasesGroupedByDepartment);
		
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByDepartment));
			purchasesGroupedByDepartment.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[INDIA, BR COGS ITEM, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			/*
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS Department, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
		
			System.out.println("*****************************************checkPurchasesGroupedByVendorReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					/*&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/)
					
					 
 
 
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	

	//	@FindBy(xpath="//a[contains(text(),'PurchaseAC')]//i")
		//private static WebElement report_FilterPurchaseACExpansion;
		
		//@FindBy(xpath="(//*[@id='5002'])[1]")
		//private static WebElement report_FilterPurchaseACNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FilterFields_529_0']/ul[2]/li[1]/div/label/span")
		private static WebElement purchasesByDepartmentreport_FilterDepartmentNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_529_0_DefaultFilter_0']")
		private static WebElement purchasesByDepartmentreport_DefaultFilterTxt;
		
		
		
		public boolean checkPurchasesGroupedByDepartmentReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				purchasesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByDepartmentreport_DefaultFilterTxt));
			purchasesByDepartmentreport_DefaultFilterTxt.click();
			purchasesByDepartmentreport_DefaultFilterTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			purchasesByDepartmentreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[INDIA, BR COGS ITEM, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPurchasesGroupedByDepartmentReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				purchasesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		

		public boolean checkPurchasesGroupedByDepartmentPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchasesGroupedByDepartmentPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}		
		
		
		
		
		public boolean checkPurchasesGroupedByDepartmentReportswithPurchasesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", purchasesGroupedByDepartment);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByDepartment));
			purchasesGroupedByDepartment.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("BR COGS ACC INV");
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[INDIA, BR COGS ITEM, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			/*
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
			
			
			
			System.out.println("*********************************checkPurchasesGroupedByDepartmentReportwithIncludePurchasesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
	
		
		
		//Miscellaneous Analysis
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[11]")
		private static WebElement miscellaneousAnalysisMenu;
		
		@FindBy(xpath="//span[contains(text(),'Peak and Low Balances')]")
		private static WebElement peakAndLowBalances;
		
		@FindBy(xpath="//span[contains(text(),'Comprative Analysis')]")
		private static WebElement comparativeAnalysis;
		
		@FindBy(xpath="//span[contains(text(),'Transactions Type Analysis')]")
		private static WebElement transactionsTypeAnalysis;
		
		@FindBy(xpath="(//span[contains(text(),'ABC Analysis')])[1]")
		private static WebElement ABCAnalysis;
		
		
		@FindBy(xpath="//span[contains(text(),'Interest Calculation')]")
		private static WebElement interestCalculation;
		
		
		
		
		
		public boolean checkPeakAndLowBalancesAmountReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalances));
			peakAndLowBalances.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ACC INV, 0, , , 8.75, 23/11/2021, 10.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ACC INV, 0, , , 3.33, 23/11/2021, 5.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[STD RATE COGS ACC INV, 0, , , 120.00, 23/11/2021, 120.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[WA COGS ACC INV, 0, , , 22.23, 23/11/2021, 74.11]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , , , , 154.31, , 209.11]";
			
			System.out.println("*********************************checkPeakAndLowBalancesReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//*[@id='FOption_569_0_DefaultFilter_0']")
		private static WebElement peakAndLowBalance_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_569_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement palb_report_FilterWarehouseNameChkbox;
		
		
		public boolean checkPeakAndLowBalancesReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(palb_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				palb_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalance_DefaultFilterTxt));
			peakAndLowBalance_DefaultFilterTxt.click();
			peakAndLowBalance_DefaultFilterTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			peakAndLowBalance_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ACC INV, 0, , , 8.75, 23/11/2021, 8.75]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ACC INV, 0, , 0, , 23/11/2021, 3.33, 23/11/2021, 3.33]";
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[STD RATE COGS ACC INV, 0, , 0, , 23/11/2021, 120.00, 23/11/2021, 120.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[WA COGS ACC INV, 0, , 0, , 23/11/2021, 22.23, 23/11/2021, 22.23]";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , , , , 154.31, , 154.31]";
			
			
			System.out.println("****************************checkPeakAndLowBalancesReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(palb_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				palb_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount
					&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List) )
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkPeakAndLowBalancesReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("BR COGS ACC INV"))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
		/*	expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			//expMonthlyList.add(Row2Month);*/
			expMonthlyList.add("November 2021");
			expMonthlyList.add("December 2021");
		/*	expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");*/
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("November 2021")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);

			expDayList.add("23");
			/*expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");*/
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("23")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("");
			/*expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");*/
			//expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "BR COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "100.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		 	String actBatch = select1stRow_19thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	
			System.out.println("**********************checkPeakAndLowBalancesReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) &&actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		

		public boolean checkPeakAndLowBalancesReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalances));
			peakAndLowBalances.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Bank, 23/11/2021, , 23/11/2021, 100.00, 23/11/2021, , 23/11/2021, 33.00, 2, BR COGS ACC INV, 0, , 0, , 23/11/2021, 8.75, 23/11/2021, 10.00, 3, Customer A, 23/11/2021, , 23/11/2021, 120.00, 23/11/2021, , 23/11/2021, 120.00, 4, EXCESS COGS POSTING ACC, 0, , 0, , 23/11/2021, 10.00, 23/11/2021, 100.00, 5, FIFO COGS ACC INV, 0, , 0, , 23/11/2021, 3.33, 23/11/2021, 5.00, 6, HDFC, 23/11/2021, , 23/11/2021, 6.00, 23/11/2021, , 23/11/2021, 6.00, 7, Opening Balances Control A/C, 01/01/2020, , 01/01/2020, 1,500.00, 01/01/2020, , 01/01/2020, 1,000.00, 8, SR COGS POSTING ACC, 0, , 0, , 23/11/2021, 120.00, 23/11/2021, 120.00, 9, STD RATE COGS ACC INV, 0, , 0, , 23/11/2021, 120.00, 23/11/2021, 120.00, 10, VAT ADVANCE PURCHASE, 0, , 0, , 23/11/2021, 1.50, 23/11/2021, 1.50, 11, Vendor B, 23/11/2021, , 23/11/2021, 31.50, 23/11/2021, , 22/12/2021, 1,200.00, 12, WA COGS ACC INV, 0, , 0, , 23/11/2021, 22.23, 23/11/2021, 74.11]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, Grand Total, , , , 1,757.50, , 285.81, , 2,789.61]";
			
			
			Thread.sleep(2000);
						
			System.out.println("*********************************checkPeakAndLowBalancesReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&actPage2List.equalsIgnoreCase(expPage2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
	
		
		
		public boolean checkComparitiveAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparativeAnalysis));
			comparativeAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 960.00, , , , , , , , , , 960.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 960.00, , , , , , , , , , 960.00]";
			
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 223.66, , , , , , , , , 223.66, ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 490.00, , , , , , , , , 490.00, ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 766.58, , , , , , , , , , , 766.58, ]";
			*/
			System.out.println("*********************************checkComparativeAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
	/*		System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		*/	
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_570_0_DefaultFilter_0']")
		private static WebElement comparitive_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_570_0']/ul[3]/li[1]/div/label/span)[1]")
		private static WebElement comparitive_report_FilterDepartmentNameChkbox;
		
		
		public boolean checkComparitiveAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparitive_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				comparitive_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparitive_DefaultFilterTxt));
			comparitive_DefaultFilterTxt.click();
			comparitive_DefaultFilterTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			comparitive_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 960.00, , , , , , , , , , 960.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 960.00, , , , , , , , , , , , 960.00]";
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 220.00, , , , , , , , , , , 220.00, ]";
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 600.00, , , , , , , , , , , 600.00, ]";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 880.00, , , , , , , , , , , 880.00, ]";
			*/
			System.out.println("****************************checkComparitiveAnalysisReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		*/	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparitive_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				comparitive_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount
					/*&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List)*/ )
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkComparitiveAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             System.err.println(data);
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ACC INV"))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
		/*	expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");*/
			expMonthlyList.add(Row2Month);
			//expMonthlyList.add("November 2021");
		/*	expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");*/
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);

			expDayList.add("22");
			/*expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");*/
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("22")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="SU/IND/TEXT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor="Vendor B";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "Dubai";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Standard Rated Purchase - Recoverable";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "STD RATE COGS ACC INV";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Dozs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity = "2.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate = "11.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross = "22.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) &&actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		

		public boolean checkComparitiveAnalysisReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparativeAnalysis));
			comparativeAnalysis.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Vendor B, 82.00, , , , , , , , , , , , 82.00, 2, STD RATE COGS ACC INV, 960.00, , , , , , , , , , , , 960.00, 3, PURCHASE VARIANCE, 878.00, , , , , , , , , , , , 878.00, 4, Grand Total, , , , , , , , , , , , , ]";
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, PURCHASE VARIANCE, 510.00, , , , , , , , , , , 510.00, , 14, VAT INPUT, 19.71, , , , , , , , , , , 19.71, , 15, HDFC, 5.71, , , , , , , , , , , 5.71, , 16, Grand Total, 1,000.00, 1,000.00, , , , , , , , , , , ]";
			
			*/
			Thread.sleep(2000);
						
			System.out.println("*********************************checkComparitiveAnalysiswithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
		/*	
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			*/
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
	
		
	
		
		public boolean checkTransactionsTypeAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsTypeAnalysis));
			transactionsTypeAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 960.00, , 82.00, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 960.00, , 82.00, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
			
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 1,423.66, , 1,491.00, , , , , , , 96.34, , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 490.00, , 94.50, , 120.00, , , , , 240.00, , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 2,166.58, , , 1,858.50, , , 120.00, , , , , 363.42, , , , , , , , , , , , , , , , , , , , , , , , ]";
			*/
			System.out.println("*********************************checkTransactionsTypeAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			*/
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_571_0_DefaultFilter_0']")
		private static WebElement transaction_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_571_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement transaction_report_FilterWarehouseNameChkbox;
		
		
		public boolean checkTransactionsTypeAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transaction_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				transaction_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transaction_DefaultFilterTxt));
			transaction_DefaultFilterTxt.click();
			transaction_DefaultFilterTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			transaction_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 960.00, , 82.00, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 960.00, , 82.00, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
			
		/*	
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "";
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "";
			
			*/
			
			System.out.println("****************************checkTransactionsTypeAnalysisReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
	/*		
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		*/	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transaction_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				transaction_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount
					/*&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List)*/ )
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkTransactionsTypeAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ACC INV"))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
		/*	expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");*/
			expMonthlyList.add(Row2Month);
			//expMonthlyList.add("November 2021");
		/*	expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");*/
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);

			expDayList.add("22");
			/*expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");*/
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("22")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="SU/IND/TEXT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor="Vendor B";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "Dubai";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Standard Rated Purchase - Recoverable";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "STD RATE COGS ACC INV";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Dozs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity = "2.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate = "11.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross = "22.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) &&actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}

		public boolean checkTransactionsTypeAnalysisReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsTypeAnalysis));
			transactionsTypeAnalysis.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Vendor B, 82.00, , , 82.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , 2, STD RATE COGS ACC INV, 960.00, , , 82.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , 3, PURCHASE VARIANCE, 878.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 4, Grand Total, , , , 164.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
		/*	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, EXCESS COGS POSTING ACC, 130.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 14, VAT ADVANCE PURCHASE, 1.50, , , , , , , , , , , , , , , , , , 1.50, , , , , , , , , , , , , , , , , , 15, PURCHASE VARIANCE, 510.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 16, VAT INPUT, 19.71, , , , , , , , , , , , , , , , , , 1.50, , , , , , , , , , , 0.29, , , , , , , 17, HDFC, 5.71, , , , , , , , , , , , , , , , , , , , , , , 6.00, , 6.00, , , , 6.29, , , , , , , 18, Grand Total, , 1,000.00, , 777.00, , , 480.00, , , , , 753.16, , , , , , , 60.00, , , 100.00, , 24.00, 200.00, 24.00, 126.00, , , 12.58, , , 12.00, , , 63.00]";
		*/	
			
			Thread.sleep(2000);
						
			System.out.println("*********************************checkTransactionsTypeAnalysisReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
		/*	
			System.out.println(actPage2List);
			System.out.println(expPage2List);
		*/	
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
	@FindBy(xpath="//*[@id='RITCombobox__2']")
	private static WebElement reportsBasedOnDropdown;
	
	
	@FindBy(xpath="//*[@id='RITCombobox__3']")
	private static WebElement considerDropdown;
		
		
		public boolean checkABCAnalysiswithReportBasedonBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABCAnalysis));
			ABCAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsBasedOnDropdown));
			Select s1=new Select(reportsBasedOnDropdown);
			s1.selectByIndex(0);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(considerDropdown));
			Select s2=new Select(considerDropdown);
			s2.selectByIndex(0);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 490.00, 63.92]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ACC INV, 223.66, 29.18]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ACC INV, 31.67, 4.13]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ACC INV, 21.25, 2.77]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 766.58, 100.00]";
			
			System.out.println("*********************************checkABCAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		public boolean checkABCAnalysiswithReportBasedonTurnover() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABCAnalysis));
			ABCAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsBasedOnDropdown));
			Select s1=new Select(reportsBasedOnDropdown);
			s1.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(considerDropdown));
			Select s2=new Select(considerDropdown);
			s2.selectByIndex(1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 120.00, 57.39]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ACC INV, 74.11, 35.44]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ACC INV, 10.00, 4.78]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[FIFO COGS ACC INV, 5.00, 2.39]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 209.11, 100.00]";
			
			System.out.println("*********************************checkABCAnalysisReportwithTurnover*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	
		
		
		
		@FindBy (xpath="//input[@id='FOption_572_0_DefaultFilter_0']")
		private static WebElement ABC_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_572_0']/ul[3]/li[1]/div/label/span)[1]")
		private static WebElement ABC_report_FilterDepartmentNameChkbox;
		
	
		public boolean checkABCAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABC_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				ABC_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABC_DefaultFilterTxt));
			ABC_DefaultFilterTxt.click();
			ABC_DefaultFilterTxt.sendKeys("Bank");
			
			Thread.sleep(2000);
			
			ABC_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ACC INV, 960.00, 100.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 960.00, 100.00]";
			
		/*	
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "";
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "";
			*/
			System.out.println("****************************checkABCAnalysisReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			/*
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			*/
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABC_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				ABC_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 2; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount
					/*&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List)*/)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkABCAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ACC INV"))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
		/*	expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");*/
			expMonthlyList.add(Row2Month);
	//expMonthlyList.add("November 2021");
		/*	expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");*/
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("November 2021")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);

			expDayList.add("22");
			/*expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");*/
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("23")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="SU/IND/TEXT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor="Vendor B";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "Dubai";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Standard Rated Purchase - Recoverable";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "STD RATE COGS ACC INV";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Dozs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity = "2.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate = "11.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross = "22.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) &&actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}


		

		public boolean checkABCAnalysisReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABCAnalysis));
			ABCAnalysis.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, STD RATE COGS ACC INV, 960.00, 100.00, 2, Grand Total, 960.00, 100.00]";
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			
			*/
			Thread.sleep(2000);
						
			System.out.println("*********************************checkABCAnalysisReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
		//	System.out.println(expPage2List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		public boolean checkInterestCalculationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", interestCalculation);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interestCalculation));
			interestCalculation.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ACC INV, 0.30]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ACC INV, 0.45]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 3.20]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 7.01]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 10.96]";
			
			System.out.println("*********************************checkInterestCalculationReportwithFilterOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	
		
		
		
		@FindBy (xpath="//input[@id='FOption_597_0_DefaultFilter_0']")
		private static WebElement interest_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_597_0']/ul[2]/li[1]/div/label/span")
		private static WebElement interest_report_FilterAccount2NameChkbox;
		
	
		public boolean checkInterestCalculationReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interest_report_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				interest_report_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interest_DefaultFilterTxt));
			interest_DefaultFilterTxt.click();
			interest_DefaultFilterTxt.sendKeys("HDFC");
			
			Thread.sleep(2000);
			
			interest_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Vendor B, 0.08]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[STD RATE COGS ACC INV, 0.95]";
			
			

			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[PURCHASE VARIANCE, 0.87]";
			
			

			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Grand Total, ]";
			
			
			
			System.out.println("****************************checkInterestCalculationReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interest_report_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				interest_report_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 4; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount
					&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List))
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkInterestCalculationReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ACC INV"))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
		/*	expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");*/
			expMonthlyList.add(Row2Month);
			//expMonthlyList.add("November 2021");
		/*	expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");*/
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);

			expDayList.add("22");
			/*expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");*/
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("22")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="SU/IND/TEXT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor="Vendor B";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "Dubai";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Standard Rated Purchase - Recoverable";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "STD RATE COGS ACC INV";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Dozs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity = "2.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate = "11.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross = "22.00";
		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) &&actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		

		public boolean checkInterestCalculationReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", interestCalculation);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interestCalculation));
			interestCalculation.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsBasedOnDropdown));
			Select s1=new Select(reportsBasedOnDropdown);
			s1.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, Vendor B, 0.08, 2, STD RATE COGS ACC INV, 0.95, 3, PURCHASE VARIANCE, 0.87, 4, Grand Total, ]";
			
	/*		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, SR COGS POSTING ACC, 1.72, 14, EXCESS COGS POSTING ACC, 1.86, 15, VAT ADVANCE PURCHASE, 0.02, 16, PURCHASE VARIANCE, 7.29, 17, VAT INPUT, 0.28, 18, Grand Total, ]";
		*/	
			
			Thread.sleep(2000);
						
			System.out.println("*********************************checkInterestCalculationReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
	/*		System.out.println(actPage2List);
			System.out.println(expPage2List);
		*/	
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		//Masters Information
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[12]")
		private static WebElement mastersInformationMenu;
		
		
		@FindBy(xpath="(//span[contains(text(),'Master Info')])[2]")
		private static WebElement masterInfo;
		
		
		@FindBy(xpath="//span[contains(text(),'Item Label')]")
		private static WebElement itemLabel;
		
		@FindBy(xpath="//span[contains(text(),'Unit conversion report')]")
		private static WebElement unitConversionReport;
		
		@FindBy(xpath="//span[contains(text(),'Skid Definition')]")
		private static WebElement skidDefinition;
		
		@FindBy(xpath="//span[contains(text(),'Carton RFID Generator')]")
		private static WebElement cartonRFIDGenerator;
		
		
		
		
		//Audit Trail
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[13]")
		private static WebElement auditTrailMenu;
		
		
		@FindBy(xpath="//span[contains(text(),'Audit Trail transactions')]")
		private static WebElement auditTrailTransactions;
		
		
		@FindBy(xpath="//span[contains(text(),'Audit Trail logins')]")
		private static WebElement auditTrailLogins;
		
		@FindBy(xpath="//span[contains(text(),'Audit trial preferences')]")
		private static WebElement auditTrailPreferences;
		
		@FindBy(xpath="//*[@id='RITTable__0']")
		private static WebElement vocherType;
		
		
		public boolean checkAuditTrailTransactionsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailMenu));
			auditTrailMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailTransactions));
			auditTrailTransactions.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocherType));

			vocherType.sendKeys("Material Requisition");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[MatReq : 1, 23/11/2021, 10:29:53, , , , Deleted, , SU, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[MatReq : 1, 23/11/2021, 10:30:15, , 20.00, Unchecked, Modified, , SU, ]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[MatReq : 2, 23/11/2021, 10:30:36, , , , Modified, , SU, ]";
			
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[MatReq : 2, 23/11/2021, 10:30:44, , , , Modified, , SU, ]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[MatReq : 2, 23/11/2021, 10:30:55, , , , Modified, , SU, ]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[MatReq : 2, 23/11/2021, 10:31:04, , , , Deleted, , SU, ]";
			
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "[Grand Total, , , , 20.00, , , , , ]";
			
		
			System.out.println("*****************************************checkAuditTrailReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)
					&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List))
				
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
	

	
		
		@FindBy(xpath="//*[@id='FilterFields_521_0']/ul[4]/li[1]/div/label/span")
		private static WebElement auditreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_521_0_DefaultFilter_0']")
		private static WebElement auditreport_DefaultFilterTxt;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[10]")
		private static WebElement auditreport_FilterBtn;
		
		
		
		public boolean checkAuditTrailTransactionsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			//Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterBtn));
			auditreport_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				auditreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_DefaultFilterTxt));
			auditreport_DefaultFilterTxt.click();
			auditreport_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			auditreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, Vendor B, 3.00, 30.00]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[, , 3.00, 30.00]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 3.00, 30.00]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkAuditTrailTransactionReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterBtn));
			auditreport_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				auditreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 3; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[5]")
		private static WebElement at_ReportPrintBtn;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[8]")
		private static WebElement at_BackTrackBtn;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[14]")
		private static WebElement at_report_CloseBtn;
		
		
		public boolean checkAuditTrailTransactionsPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_ReportPrintBtn));
			at_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkAuditTrailTransactionPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}	
		
		
		public boolean checkAuditTrailTransactionsReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn1RowsList.get(i).getText();
	         String data1=reportTableColumn7RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("MatReq : 1") && data1.equalsIgnoreCase("Modified"))
	         {
	    		 reportTableColumn1RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_BackTrackBtn));
		at_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		String actPurchaseAccount = purchaseAccountTxt.getAttribute("value");
		String expPurchaseAccount = "STD RATE COGS ACC INV";
	
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Item = select1stRow_1stColumn.getText();
		String expR1Item = "STD RATE COGS ITEM";
		
		String actR1Units = select1stRow_2ndColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_3rdColumn.getText();
		String expR1Quantity = "2.00";
		
		String actR1Rate = select1stRow_4thColumn.getText();
		String expR1Rate = "30.00";
		
		String actR1Gross = select1stRow_5thColumn.getText();
		String expR1Gross = "60.00";
		
		
		
		
		System.out.println("**********************checkAuditTrailTransactionsReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Purchase Account : "+actPurchaseAccount			+"  Value Expected  "+expPurchaseAccount);
		//System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Item       			: "+actR1Item				+"  Value Expected  "	+expR1Item);
		System.out.println("Units           	: "+actR1Units				+"  Value Expected  "	+expR1Units);
		System.out.println("Quantity         	: "+actR1Quantity			+"  Value Expected  "	+expR1Quantity);
		System.out.println("Rate            	: "+actR1Rate				+"  Value Expected  "	+expR1Rate);
		System.out.println("Gross         		: "+actR1Gross				+"  Value Expected  "	+expR1Gross);
		
		
	
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Item.equalsIgnoreCase(expR1Item)
			   &&actR1Units.equalsIgnoreCase(expR1Units)&&actR1Quantity.equalsIgnoreCase(expR1Quantity)
			   && actR1Rate.equalsIgnoreCase(expR1Rate)
			   &&actR1Gross.equalsIgnoreCase(expR1Gross))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_report_CloseBtn));
			at_report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_report_CloseBtn));
			at_report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}

		@FindBy(xpath="//*[@id='id_mainreportmenuheadings']/ul/li[5]/a/i")
		private static WebElement atLogin_OkBtn;

		
		public boolean checkAuditTrailLoginsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailMenu));
			auditTrailMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailLogins));
			auditTrailLogins.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocherType));

			vocherType.sendKeys("UserAllOptionsST");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(atLogin_OkBtn));
			atLogin_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Warehouse, 22/11/2021, 22:10:33, 22/11/2021, 22:10:59, 22/11/2021, 22:10:45, 22/11/2021, 22:10:59, ::1, FOCUS-QA-4, ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Warehouse, 22/11/2021, 22:12:50, 22/11/2021, 22:13:16, 22/11/2021, 22:13:02, 22/11/2021, 22:13:16, ::1, FOCUS-QA-4, ]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Material Requisition, 23/11/2021, 10:31:42, 23/11/2021, 10:32:03, 23/11/2021, 10:31:50, 23/11/2021, 10:32:03, ::1, FOCUS-QA-4, ]";
			
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Purchases Orders, 23/11/2021, 10:32:51, 23/11/2021, 10:33:17, 23/11/2021, 10:32:59, 23/11/2021, 10:33:17, ::1, FOCUS-QA-4, ]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Purchases Orders, 23/11/2021, 10:34:23, 23/11/2021, 10:34:42, 23/11/2021, 10:34:32, 23/11/2021, 10:34:42, ::1, FOCUS-QA-4, ]";
			
		/*	
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "";
			
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "";
		*/	
		
			System.out.println("*****************************************checkAuditTrailLoginsReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		/*
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
		*/	
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)
					/*&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List)*/)
				
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		public boolean checkAuditTrailLoginsPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkAuditTrailLoginsPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}	
		
		
		
		
		
		//Account Query
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[14]")
		private static WebElement accountQueryMenu;
		
		@FindBy(xpath="//*[@id='accountQuery']")
		private static WebElement accountQueryDropdown;
		
		@FindBy(xpath="//input[@class='FButton-Primary']")
		private static WebElement getDetailsBtn;
		
		
		@FindBy(xpath="//*[@id='openingBal']")
		private static WebElement openingBalTxt;
		
		@FindBy(xpath="//*[@id='credit']")
		private static WebElement creditTxt;
		
		@FindBy(xpath="//*[@id='debit']")
		private static WebElement debitTxt;
		
		@FindBy(xpath="//*[@id='balance']")
		private static WebElement balanceTxt;
		
		
		@FindBy(xpath="//*[@id='creditTransTable']//td[1]")
		private static WebElement aq_1stRow1stcolumn;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[1]//td")
		private static List<WebElement> aqReportsRow1List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[2]//td")
		private static List<WebElement> aqReportsRow2List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[3]//td")
		private static List<WebElement> aqReportsRow3List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[4]//td")
		private static List<WebElement> aqReportsRow4List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[5]//td")
		private static List<WebElement> aqReportsRow5List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[6]//td")
		private static List<WebElement> aqReportsRow6List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[7]//td")
		private static List<WebElement> aqReportsRow7List;
		
		
		@FindBy(xpath="//*[@id='debitTransTable']//td[1]")
		private static WebElement aqdebit_1stRow1stcolumn;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[1]//td")
		private static List<WebElement> aqdebitReportsRow1List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[2]//td")
		private static List<WebElement> aqdebitReportsRow2List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[3]//td")
		private static List<WebElement> aqdebitReportsRow3List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[4]//td")
		private static List<WebElement> aqdebitReportsRow4List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[5]//td")
		private static List<WebElement> aqdebitReportsRow5List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[6]//td")
		private static List<WebElement> aqdebitReportsRow6List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[7]//td")
		private static List<WebElement> aqdebitReportsRow7List;
		
		
		@FindBy(xpath="//*[@id='page_Content']/div/div[2]/div[7]/div[1]/span")
		private static WebElement departmentWiseBalanceExpansion;
		
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//td[1]")
		private static WebElement aqdepartment_1stRow1stcolumn;
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//tr[1]//td")
		private static List<WebElement> aqdepartmentReportsRow1List;
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//tr[2]//td")
		private static List<WebElement> aqdepartmentReportsRow2List;
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//tr[3]//td")
		private static List<WebElement> aqdepartmentReportsRow3List;
		
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[2]")
		private static WebElement aq_ReportCloseBtn;;
		
		public boolean checkAccountQueryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountQueryMenu));
			accountQueryMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountQueryDropdown));
			accountQueryDropdown.sendKeys("Bank");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getDetailsBtn));
			getDetailsBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalTxt));
			//System.err.println(openingBalTxt.getText());
			String actOpeningBal=openingBalTxt.getText();
			String expOpeningBal="0.00";
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditTxt));
			//System.err.println(creditTxt.getText());
			String actCredit=creditTxt.getText();
			String expCredit="138.00";
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitTxt));
			//System.err.println(debitTxt.getText());
			String actDebit=debitTxt.getText();
			String expDebit="168.00";
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balanceTxt));
			//System.err.println(balanceTxt.getText());
			String actBalance=balanceTxt.getText();
			String expBalance="30.00 Dr";
			Thread.sleep(2000);
			
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aq_1stRow1stcolumn));
			
			int reportsByCreditRow1ListCount = aqReportsRow1List.size();
			ArrayList<String> reportsByCreditRow1ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow1ListCount;i++)
			{
				String data = aqReportsRow1List.get(i).getText();
				
				reportsByCreditRow1ListArray.add(data);
			}
			String actRow1List = reportsByCreditRow1ListArray.toString();
			String expRow1List = "[Pmt : 1, Customer A, 6.00]";
			
			
			int reportsByCreditRow2ListCount = aqReportsRow2List.size();
			ArrayList<String> reportsByCreditRow2ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow2ListCount;i++)
			{
				String data = aqReportsRow2List.get(i).getText();
				
				reportsByCreditRow2ListArray.add(data);
			}
			String actRow2List = reportsByCreditRow2ListArray.toString();
			String expRow2List = "[NDT51 : 1, Vendor B, 31.50]";
			
			
			
			int reportsByCreditRow3ListCount = aqReportsRow3List.size();
			ArrayList<String> reportsByCreditRow3ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow3ListCount;i++)
			{
				String data = aqReportsRow3List.get(i).getText();
				
				reportsByCreditRow3ListArray.add(data);
			}
			String actRow3List = reportsByCreditRow3ListArray.toString();
			String expRow3List = "[NDT47 : 1, Customer A, 6.00]";
			
			int reportsByCreditRow4ListCount = aqReportsRow4List.size();
			ArrayList<String> reportsByCreditRow4ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow4ListCount;i++)
			{
				String data = aqReportsRow4List.get(i).getText();
				
				reportsByCreditRow4ListArray.add(data);
			}
			String actRow4List = reportsByCreditRow4ListArray.toString();
			String expRow4List = "[NDT55 : 1, Vendor B, 31.50]";
			
			
			int reportsByCreditRow5ListCount = aqReportsRow5List.size();
			ArrayList<String> reportsByCreditRow5ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow5ListCount;i++)
			{
				String data = aqReportsRow5List.get(i).getText();
				
				reportsByCreditRow5ListArray.add(data);
			}
			String actRow5List = reportsByCreditRow5ListArray.toString();
			String expRow5List = "[NDT45 : 1, Vendor B, 33.00]";
			
			
			
			int reportsByCreditRow6ListCount = aqReportsRow6List.size();
			ArrayList<String> reportsByCreditRow6ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow6ListCount;i++)
			{
				String data = aqReportsRow6List.get(i).getText();
				
				reportsByCreditRow6ListArray.add(data);
			}
			String actRow6List = reportsByCreditRow6ListArray.toString();
			String expRow6List = "[NDT45 : 1, Vendor B, 30.00]";
			
			
			
			int reportsByCreditRow7ListCount = aqReportsRow7List.size();
			ArrayList<String> reportsByCreditRow7ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow7ListCount;i++)
			{
				String data = aqReportsRow7List.get(i).getText();
				
				reportsByCreditRow7ListArray.add(data);
			}
			String actRow7List = reportsByCreditRow7ListArray.toString();
			String expRow7List = "[NDT47 : 2, Vendor B, 6.00]";

		
			System.out.println("*****************************************checkAccountQueryReport***************************************");
			
			System.out.println("Opening Balance			:"+	actOpeningBal		+		"	Expected"		+	expOpeningBal);
			System.out.println("Credit					:"+	actCredit			+		"	Expected"		+	expCredit);
			
			System.out.println("Debit					:"+	actDebit			+		"	Expected"		+	expDebit);
			System.out.println("Balance					:"+	actBalance			+		"	Expected"		+	expBalance);
			
			
			System.out.println("*****************************************LastCreditTransactions***************************************");

			
						
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aqdebit_1stRow1stcolumn));
			
			int reportsByDebitRow1ListCount = aqdebitReportsRow1List.size();
			ArrayList<String> reportsByDebitRow1ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow1ListCount;i++)
			{
				String data = aqdebitReportsRow1List.get(i).getText();
				
				reportsByDebitRow1ListArray.add(data);
			}
			String actDebitRow1List = reportsByDebitRow1ListArray.toString();
			String expDebitRow1List = "[Rct : 2, HDFC, 6.00]";
			
			
			int reportsByDebitRow2ListCount = aqdebitReportsRow2List.size();
			ArrayList<String> reportsByDebitRow2ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow2ListCount;i++)
			{
				String data = aqdebitReportsRow2List.get(i).getText();
				
				reportsByDebitRow2ListArray.add(data);
			}
			String actDebitRow2List = reportsByDebitRow2ListArray.toString();
			String expDebitRow2List = "[NDT52 : 1, Vendor B, 50.00]";
			
			
			
			int reportsByDebitRow3ListCount = aqdebitReportsRow3List.size();
			ArrayList<String> reportsByDebitRow3ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow3ListCount;i++)
			{
				String data = aqdebitReportsRow3List.get(i).getText();
				
				reportsByDebitRow3ListArray.add(data);
			}
			String actDebitRow3List = reportsByDebitRow3ListArray.toString();
			String expDebitRow3List = "[Pmt : 2, HDFC, 6.00]";
			
			int reportsByDebitRow4ListCount = aqdebitReportsRow4List.size();
			ArrayList<String> reportsByDebitRow4ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow4ListCount;i++)
			{
				String data = aqdebitReportsRow4List.get(i).getText();
				
				reportsByDebitRow4ListArray.add(data);
			}
			String actDebitRow4List = reportsByDebitRow4ListArray.toString();
			String expDebitRow4List = "[Rct : 1, Customer A, 6.00]";
			
			
			int reportsByDebitRow5ListCount = aqdebitReportsRow5List.size();
			ArrayList<String> reportsByDebitRow5ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow5ListCount;i++)
			{
				String data = aqdebitReportsRow5List.get(i).getText();
				
				reportsByDebitRow5ListArray.add(data);
			}
			String actDebitRow5List = reportsByDebitRow5ListArray.toString();
			String expDebitRow5List = "[NDT46 : 1, VAT INPUT, 0.29]";
			
			
			
			int reportsByDebitRow6ListCount = aqdebitReportsRow6List.size();
			ArrayList<String> reportsByDebitRow6ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow6ListCount;i++)
			{
				String data = aqdebitReportsRow6List.get(i).getText();
				
				reportsByDebitRow6ListArray.add(data);
			}
			String actDebitRow6List = reportsByDebitRow6ListArray.toString();
			String expDebitRow6List = "[NDT46 : 1, Customer A, 6.00]";
			
			
			
			int reportsByDebitRow7ListCount = aqdebitReportsRow7List.size();
			ArrayList<String> reportsByDebitRow7ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow7ListCount;i++)
			{
				String data = aqdebitReportsRow7List.get(i).getText();
				
				reportsByDebitRow7ListArray.add(data);
			}
			String actDebitRow7List = reportsByDebitRow7ListArray.toString();
			String expDebitRow7List = "[NDT44 : 1, Customer A, 100.00]";

		
		
			System.out.println("*****************************************LastDebitTransactions***************************************");

						
			
			System.out.println(actDebitRow1List);
			System.out.println(expDebitRow1List);
			
			System.out.println(actDebitRow2List);
			System.out.println(expDebitRow2List);
			
			System.out.println(actDebitRow3List);
			System.out.println(expDebitRow3List);
			
		
			System.out.println(actDebitRow4List);
			System.out.println(expDebitRow4List);
			
			System.out.println(actDebitRow5List);
			System.out.println(expDebitRow5List);
		
			System.out.println(actDebitRow6List);
			System.out.println(expDebitRow6List);
			
			
			System.out.println(actDebitRow7List);
			System.out.println(expDebitRow7List);
		
			Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentWiseBalanceExpansion));
		
		departmentWiseBalanceExpansion.click();
		Thread.sleep(2000);
		
		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", aqdepartment_1stRow1stcolumn);	

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aqdepartment_1stRow1stcolumn));
		
		int reportsByDepartmentRow1ListCount = aqdepartmentReportsRow1List.size();
		ArrayList<String> reportsByDepartmentRow1ListArray = new ArrayList<String>();
		
		for(int i=1;i<reportsByDepartmentRow1ListCount;i++)
		{
			String data = aqdepartmentReportsRow1List.get(i).getText();
			
			reportsByDepartmentRow1ListArray.add(data);
		}
		String actDepartmentRow1List = reportsByDepartmentRow1ListArray.toString();
		String expDepartmentRow1List = "[INDIA, 70.00 Cr]";
		
		
		int reportsByDepartmentRow2ListCount = aqdepartmentReportsRow2List.size();
		ArrayList<String> reportsByDepartmentRow2ListArray = new ArrayList<String>();
		
		for(int i=1;i<reportsByDepartmentRow2ListCount;i++)
		{
			String data = aqdepartmentReportsRow2List.get(i).getText();
			
			reportsByDepartmentRow2ListArray.add(data);
		}
		String actDepartmentRow2List = reportsByDepartmentRow2ListArray.toString();
		String expDepartmentRow2List = "[DUBAI, 100.00 Dr]";
		
		
		
		int reportsByDepartmentRow3ListCount = aqdepartmentReportsRow3List.size();
		ArrayList<String> reportsByDepartmentRow3ListArray = new ArrayList<String>();
		
		for(int i=1;i<reportsByDepartmentRow3ListCount;i++)
		{
			String data = aqdepartmentReportsRow3List.get(i).getText();
			
			reportsByDepartmentRow3ListArray.add(data);
		}
		String actDepartmentRow3List = reportsByDepartmentRow3ListArray.toString();
		String expDepartmentRow3List = "[30.00 Dr]";
		
		
		System.out.println("*****************************************DepartmentWiseBalance***************************************");

		
		
		System.out.println(actDepartmentRow1List);
		System.out.println(expDepartmentRow1List);
		
		System.out.println(actDepartmentRow2List);
		System.out.println(expDepartmentRow2List);
		
		System.out.println(actDepartmentRow3List);
		System.out.println(expDepartmentRow3List);
		
		
		if(	actOpeningBal.equalsIgnoreCase(expOpeningBal)&&actCredit.equalsIgnoreCase(expCredit)
				&&actDebit.equalsIgnoreCase(expDebit)&&actBalance.equalsIgnoreCase(expBalance)
				&&actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)
					&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List)
					&&actDebitRow1List.equalsIgnoreCase(expDebitRow1List)&&
					actDebitRow2List.equalsIgnoreCase(expDebitRow2List)&&actDebitRow3List.equalsIgnoreCase(expDebitRow3List)
					&&actDebitRow4List.equalsIgnoreCase(expDebitRow4List)&&
					actDebitRow5List.equalsIgnoreCase(expDebitRow5List)
					&&actDebitRow6List.equalsIgnoreCase(expDebitRow6List)&&actDebitRow7List.equalsIgnoreCase(expDebitRow7List)
					&&actDepartmentRow1List.equalsIgnoreCase(expDepartmentRow1List)&&
					actDepartmentRow2List.equalsIgnoreCase(expDepartmentRow2List)
					&&actDepartmentRow3List.equalsIgnoreCase(expDepartmentRow3List)
				)
				
				
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aq_ReportCloseBtn));
				aq_ReportCloseBtn.click();
	
			return true;
			}
			else
			{
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aq_ReportCloseBtn));
				aq_ReportCloseBtn.click();
				return false;
			}
					
		}
		
		
		//Transaction Authorization Report
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[15]")
		private static WebElement transactionAuthorizationReportMenu;
		
		//Master Authorization Report
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[16]")
		private static WebElement masterAuthorizationReportMenu;
		
		
		public boolean checkTransactionAuthorizationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", transactionAuthorizationReportMenu);	

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationReportMenu));
			transactionAuthorizationReportMenu.click();
			
			Thread.sleep(2000);
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocherType));

			vocherType.sendKeys("Material Requisition");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[MatReq:1, 23/11/2021, UserAllOptionsST, 23/11/2021, 10:31:57, Authorized, ]";
			
			

		
			System.out.println("*****************************************checkTransactionAuthorizationReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List))
				
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
		
		public boolean checkTransactionAuthorizationReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkTransactionsAuthorizationReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}	
		
		
		public boolean checkTransactionAuthorizationReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn1RowsList.get(i).getText();
	         //String data1=reportTableColumn7RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("MatReq:1") )
	         {
	    		 reportTableColumn1RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		String actPurchaseAccount = purchaseAccountTxt.getAttribute("value");
		String expPurchaseAccount = "STD RATE COGS ACC INV";
	
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "INDIA";
		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Item = select1stRow_1stColumn.getText();
		String expR1Item = "STD RATE COGS ITEM";
		
		String actR1Units = select1stRow_2ndColumn.getText();
		String expR1Units = "Dozs";
		
		String actR1Quantity = select1stRow_3rdColumn.getText();
		String expR1Quantity = "2.00";
		
		String actR1Rate = select1stRow_4thColumn.getText();
		String expR1Rate = "30.00";
		
		String actR1Gross = select1stRow_5thColumn.getText();
		String expR1Gross = "60.00";
		
		
		
		
		System.out.println("**********************checkTransactionAuthorizationReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Purchase Account : "+actPurchaseAccount			+"  Value Expected  "+expPurchaseAccount);
		//System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Item       			: "+actR1Item				+"  Value Expected  "	+expR1Item);
		System.out.println("Units           	: "+actR1Units				+"  Value Expected  "	+expR1Units);
		System.out.println("Quantity         	: "+actR1Quantity			+"  Value Expected  "	+expR1Quantity);
		System.out.println("Rate            	: "+actR1Rate				+"  Value Expected  "	+expR1Rate);
		System.out.println("Gross         		: "+actR1Gross				+"  Value Expected  "	+expR1Gross);
		
		
	
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Item.equalsIgnoreCase(expR1Item)
			   &&actR1Units.equalsIgnoreCase(expR1Units)&&actR1Quantity.equalsIgnoreCase(expR1Quantity)
			   && actR1Rate.equalsIgnoreCase(expR1Rate)
			   &&actR1Gross.equalsIgnoreCase(expR1Gross))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
		}
		
		
		//Bank Reconciliation
		@FindBy(xpath="//*[@id='OptCtrlBank']")
		private static WebElement bankOption;
		
		
		@FindBy(xpath="//select[@id='sortOrder']")
		private static WebElement bc_SortorderDropdown;
		
		
		
		@FindBy(xpath="//select[@id='selectStatus']")
		private static WebElement bc_StatusDropdown;
		
		
		@FindBy(xpath="//select[@id='DatePeriod']")
		private static WebElement bc_DateDropdown;
		
		
		@FindBy(xpath="//*[@id='ClearanceDate']")
		private static WebElement clearanceDate;
		
		@FindBy(xpath="//select[@id='SelectDebit']")
		private static WebElement bc_debitDropdown;
		
		@FindBy(xpath="//*[@id='btnSaveDisableImmediate']")
		private static WebElement bc_SaveBtn;
		
		@FindBy(xpath="//*[@id='selectContainer']/div[5]/div[2]/div/input[3]")
		private static WebElement bc_LoadBtn;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//td[2]")
		private static WebElement bc_1stRow1stCol;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//td[4]")
		private static List<WebElement> bc_reports4thColRowsList;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[9]//td[1]")
		private static WebElement bc_9thRow1stCol;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[1]//td")
		private static List<WebElement> bc_1stRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[2]//td")
		private static List<WebElement> bc_2ndRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[3]//td")
		private static List<WebElement> bc_3rdRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[4]//td")
		private static List<WebElement> bc_4thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[5]//td")
		private static List<WebElement> bc_5thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[6]//td")
		private static List<WebElement> bc_6thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[7]//td")
		private static List<WebElement> bc_7thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[8]//td")
		private static List<WebElement> bc_8thRowList;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[9]//td")
		private static List<WebElement> bc_9thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[10]//td")
		private static List<WebElement> bc_10thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[11]//td")
		private static List<WebElement> bc_11thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[12]//td")
		private static List<WebElement> bc_12thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[13]//td")
		private static List<WebElement> bc_13thRowList;
		
		
		@FindBy(xpath="//*[@id='bookBal']")
		private static WebElement bookBalance;
		
		
		@FindBy(xpath="//*[@id='outDebits']")
		private static WebElement outDebits;
		
		
		@FindBy(xpath="//*[@id='outCredits']")
		private static WebElement outCredits;
		
		
		@FindBy(xpath="//*[@id='clearedBal']")
		private static WebElement clearedBalance;
		
		
		@FindBy(xpath="//*[@id='OpeningBalance']")
		private static WebElement openingBalance;
		
		
		@FindBy(xpath="//*[@id='debitCounts']")
		private static WebElement debitCounts;
		
		
		@FindBy(xpath="//*[@id='creditCounts']")
		private static WebElement creditCounts;
		
		
		@FindBy(xpath="//*[@id='bankBal']")
		private static WebElement bankBalance;
		
		
		@FindBy(xpath="//*[@id='diff']")
		private static WebElement difference;
		
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[5]")
		private static WebElement bc_CloseBtn;
		
		
		public boolean checkBankReconciliationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliation));
			bankReconciliation.click();
			Thread.sleep(2000);
						
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankOption));
			bankOption.sendKeys("Bank");
			bankOption.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SortorderDropdown));
			bc_SortorderDropdown.click();
			Select s=new Select(bc_SortorderDropdown);
			s.selectByValue("1");
			bc_SortorderDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_StatusDropdown));
			bc_StatusDropdown.click();
					
			Select s1=new Select(bc_StatusDropdown);
			//s1.selectByValue("2");
			bc_StatusDropdown.sendKeys("ALL");

			Thread.sleep(1000);
			bc_StatusDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clearanceDate));
			clearanceDate.sendKeys(Keys.TAB);;
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_DateDropdown));
			bc_DateDropdown.click();
			Select s2=new Select(bc_DateDropdown);
			//s2.selectByValue("1");
			bc_DateDropdown.sendKeys("As on date");
			bc_DateDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getAction().moveToElement(bc_debitDropdown).build().perform();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_debitDropdown));
			bc_debitDropdown.click();
			
			Select s3=new Select(bc_debitDropdown);
			//s3.selectByValue("2");
			bc_debitDropdown.sendKeys("Both");
			bc_debitDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
		//	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SaveBtn));
		//	bc_SaveBtn.click();
		//	Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_LoadBtn));
			bc_LoadBtn.click();
		
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("window.scrollBy(0,1000)");
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_1stRow1stCol));
			
			int reportsBybankConcilationRow1ListCount = bc_1stRowList.size();
			ArrayList<String> reportsBybankConcilationRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow1ListCount;i++)
			{
				String data = bc_1stRowList.get(i).getText();
				reportsBybankConcilationRow1ListArray.add(data);
			}
			String actRow1List = reportsBybankConcilationRow1ListArray.toString();
			String expRow1List = "[Pending, 23/11/2021, NDT51:1, 23/11/2021, 0.00, 31.50, , Debit Notes VAT, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow2ListCount = bc_2ndRowList.size();
			ArrayList<String> reportsBybankConcilationRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow2ListCount;i++)
			{
				String data = bc_2ndRowList.get(i).getText();
				reportsBybankConcilationRow2ListArray.add(data);
			}
			String actRow2List = reportsBybankConcilationRow2ListArray.toString();
			String expRow2List = "[Pending, 23/11/2021, NDT52:1, 23/11/2021, 50.00, 0.00, , Credit Notes VAT, , , ]";
			
			
			int reportsBybankConcilationRow3ListCount = bc_3rdRowList.size();
			ArrayList<String> reportsBybankConcilationRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow3ListCount;i++)
			{
				String data = bc_3rdRowList.get(i).getText();
				reportsBybankConcilationRow3ListArray.add(data);
			}
			String actRow3List = reportsBybankConcilationRow3ListArray.toString();
			String expRow3List = "[Pending, 23/11/2021, Rct:1, 23/11/2021, 6.00, 0.00, PDR1, Receipts, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow4ListCount = bc_4thRowList.size();
			ArrayList<String> reportsBybankConcilationRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow4ListCount;i++)
			{
				String data = bc_4thRowList.get(i).getText();
				reportsBybankConcilationRow4ListArray.add(data);
			}
			String actRow4List = reportsBybankConcilationRow4ListArray.toString();
			String expRow4List = "[Pending, 23/11/2021, Rct:2, 23/11/2021, 6.00, 0.00, PDR2, Receipts, , , ]";
			
			
			int reportsBybankConcilationRow5ListCount = bc_5thRowList.size();
			ArrayList<String> reportsBybankConcilationRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow5ListCount;i++)
			{
				String data = bc_5thRowList.get(i).getText();
				reportsBybankConcilationRow5ListArray.add(data);
			}
			String actRow5List = reportsBybankConcilationRow5ListArray.toString();
			String expRow5List = "[Pending, 23/11/2021, NDT44:1, 23/11/2021, 100.00, 0.00, , Receipts VAT, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow6ListCount = bc_6thRowList.size();
			ArrayList<String> reportsBybankConcilationRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow6ListCount;i++)
			{
				String data = bc_6thRowList.get(i).getText();
				reportsBybankConcilationRow6ListArray.add(data);
			}
			String actRow6List = reportsBybankConcilationRow6ListArray.toString();
			String expRow6List = "[Pending, 23/11/2021, Pmt:1, 23/11/2021, 0.00, 6.00, PDPVAT1, Payments, , , ]";
			
			
			int reportsBybankConcilationRow7ListCount = bc_7thRowList.size();
			ArrayList<String> reportsBybankConcilationRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow7ListCount;i++)
			{
				String data = bc_7thRowList.get(i).getText();
				reportsBybankConcilationRow7ListArray.add(data);
			}
			String actRow7List = reportsBybankConcilationRow7ListArray.toString();
			String expRow7List = "[Pending, 23/11/2021, Pmt:2, 23/11/2021, 6.00, 0.00, PDPVAT2, Payments, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow8ListCount = bc_8thRowList.size();
			ArrayList<String> reportsBybankConcilationRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow8ListCount;i++)
			{
				String data = bc_8thRowList.get(i).getText();
				reportsBybankConcilationRow8ListArray.add(data);
			}
			String actRow8List = reportsBybankConcilationRow8ListArray.toString();
			String expRow8List = "[Pending, 23/11/2021, NDT45:1, 23/11/2021, 0.00, 30.00, , Payments VAT, , , ]";
			
			//((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", bc_9thRowList);
			getAction().moveToElement(bc_9thRow1stCol).build().perform();
			Thread.sleep(2000);
			
			

			int reportsBybankConcilationRow9ListCount = bc_9thRowList.size();
			ArrayList<String> reportsBybankConcilationRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow9ListCount;i++)
			{
				String data = bc_9thRowList.get(i).getText();
				reportsBybankConcilationRow9ListArray.add(data);
			}
			String actRow9List = reportsBybankConcilationRow9ListArray.toString();
			String expRow9List = "[Pending, 23/11/2021, NDT45:1, 23/11/2021, 0.00, 33.00, , Payments VAT, , , ]";
			
			
			int reportsBybankConcilationRow10ListCount = bc_10thRowList.size();
			ArrayList<String> reportsBybankConcilationRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow10ListCount;i++)
			{
				String data = bc_10thRowList.get(i).getText();
				reportsBybankConcilationRow10ListArray.add(data);
			}
			String actRow10List = reportsBybankConcilationRow10ListArray.toString();
			String expRow10List = "[Pending, 23/11/2021, NDT47:2, 23/11/2021, 0.00, 6.00, PDPVAT2, PDP VAT, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow11ListCount = bc_11thRowList.size();
			ArrayList<String> reportsBybankConcilationRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow11ListCount;i++)
			{
				String data = bc_11thRowList.get(i).getText();
				reportsBybankConcilationRow11ListArray.add(data);
			}
			String actRow11List = reportsBybankConcilationRow11ListArray.toString();
			String expRow11List = "[Pending, 23/11/2021, NDT55:1, 23/11/2021, 0.00, 31.50, , JV VAT View, , , ]";
			
			String actBookBal=bookBalance.getText();
			String expBookBal="30.00 Dr";
			
			String actOutDebits=outDebits.getText();
			String expOutDebits="168.00 Dr";
			
			String actOutCredits=outCredits.getText();
			String expOutCredits="138.00 Cr";
			
			String actClearedBal=clearedBalance.getText();
			String expClearedBal="0.00";
			
			String actOpeningBal=openingBalance.getText();
			String expOpeningBal="0.00";
			
			
			
			String actDebitsCount=debitCounts.getText();
			String expDebitsCount="5";
			
			String actCreditsCount=creditCounts.getText();
			String expCreditsCount="6";
					
			
			
			String actBankBal=bankBalance.getAttribute("value");
			String expBankBal="0.0000";
			
			String actDiff=difference.getText();
			String expDiff="0.00";
			
		
			System.out.println("*****************************************checkBankConcalitationReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println("********************************************************************************");
			System.out.println("Book Balance		:"	+	actBookBal 		+		"Value Expected"	+	expBookBal );
			System.out.println("OutCredits			:"	+	actOutCredits 	+		"Value Expected"	+	expOutCredits );
			System.out.println("OutDebits			:"	+	actOutDebits 	+		"Value Expected"	+	expOutDebits );
			System.out.println("Cleared Balance		:"	+	actClearedBal 	+		"Value Expected"	+	expClearedBal );
			System.out.println("Opening Balance		:"	+	actOpeningBal 	+		"Value Expected"	+	expOpeningBal );
			System.out.println("DebitsCount			:"	+	actDebitsCount 	+		"Value Expected"	+	expDebitsCount );
			System.out.println("CreditsCount		:"	+	actCreditsCount +		"Value Expected"	+	expCreditsCount );
			System.out.println("Bank Balance		:"	+	actBankBal 		+		"Value Expected"	+	expBankBal );
			System.out.println("Difference			:"	+	actDiff 		+		"Value Expected"	+	expDiff );


			
		if(actRow1List.equalsIgnoreCase(expRow1List)&&actRow2List.equalsIgnoreCase(expRow2List)
				&&actRow3List.equalsIgnoreCase(expRow3List)&&actRow4List.equalsIgnoreCase(expRow4List)
				&&actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
				&&actRow7List.equalsIgnoreCase(expRow7List)&&actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List)&&actRow10List.equalsIgnoreCase(expRow10List)
				&&actRow11List.equalsIgnoreCase(expRow11List)
				&&actBookBal.equalsIgnoreCase(expBookBal)&&actOutCredits.equalsIgnoreCase(expOutCredits)
				&&actOutDebits.equalsIgnoreCase(expOutDebits)&&actClearedBal.equalsIgnoreCase(expClearedBal)
				&&actOpeningBal.equalsIgnoreCase(expOpeningBal)&&actDebitsCount.equalsIgnoreCase(expDebitsCount)
				&&actCreditsCount.equalsIgnoreCase(expCreditsCount)&&actBankBal.equalsIgnoreCase(expBankBal)
				&&actDiff.equalsIgnoreCase(expDiff))

			
			{
				//bc_CloseBtn.click();
				return true;
			}
			else
			{
				//bc_CloseBtn.click();

				return false;
			}
			
		}

		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[5]/ul/li[9]")
		private static WebElement customerReconciliation;
		
		public boolean checkCustomerVendorReconciliationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerReconciliation));
			customerReconciliation.click();
			Thread.sleep(2000);
						
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankOption));
			bankOption.sendKeys("Customer A");
			bankOption.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SortorderDropdown));
			bc_SortorderDropdown.click();
			Select s=new Select(bc_SortorderDropdown);
			s.selectByValue("1");
			bc_SortorderDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_StatusDropdown));
			bc_StatusDropdown.click();
					
			Select s1=new Select(bc_StatusDropdown);
			//s1.selectByValue("2");
			bc_StatusDropdown.sendKeys("ALL");

			Thread.sleep(1000);
			bc_StatusDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clearanceDate));
			clearanceDate.sendKeys(Keys.TAB);;
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_DateDropdown));
			bc_DateDropdown.click();
			Select s2=new Select(bc_DateDropdown);
			//s2.selectByValue("1");
			bc_DateDropdown.sendKeys("As on date");
			bc_DateDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getAction().moveToElement(bc_debitDropdown).build().perform();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_debitDropdown));
			bc_debitDropdown.click();
			
			Select s3=new Select(bc_debitDropdown);
			//s3.selectByValue("2");
			bc_debitDropdown.sendKeys("Both");
			bc_debitDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
		//	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SaveBtn));
		//	bc_SaveBtn.click();
		//	Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_LoadBtn));
			bc_LoadBtn.click();
		
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("window.scrollBy(0,1000)");
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_1stRow1stCol));
			
			int reportsBybankConcilationRow1ListCount = bc_1stRowList.size();
			ArrayList<String> reportsBybankConcilationRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow1ListCount;i++)
			{
				String data = bc_1stRowList.get(i).getText();
				reportsBybankConcilationRow1ListArray.add(data);
			}
			String actRow1List = reportsBybankConcilationRow1ListArray.toString();
			String expRow1List = "[Pending, 23/11/2021, SalRet:1, 23/11/2021, 0.00, 120.00, , Sales Returns, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow2ListCount = bc_2ndRowList.size();
			ArrayList<String> reportsBybankConcilationRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow2ListCount;i++)
			{
				String data = bc_2ndRowList.get(i).getText();
				reportsBybankConcilationRow2ListArray.add(data);
			}
			String actRow2List = reportsBybankConcilationRow2ListArray.toString();
			String expRow2List = "[Pending, 23/11/2021, NDT50:1, 23/11/2021, 100.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			int reportsBybankConcilationRow3ListCount = bc_3rdRowList.size();
			ArrayList<String> reportsBybankConcilationRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow3ListCount;i++)
			{
				String data = bc_3rdRowList.get(i).getText();
				reportsBybankConcilationRow3ListArray.add(data);
			}
			String actRow3List = reportsBybankConcilationRow3ListArray.toString();
			String expRow3List = "[Pending, 23/11/2021, NDT50:4, 23/11/2021, 60.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow4ListCount = bc_4thRowList.size();
			ArrayList<String> reportsBybankConcilationRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow4ListCount;i++)
			{
				String data = bc_4thRowList.get(i).getText();
				reportsBybankConcilationRow4ListArray.add(data);
			}
			String actRow4List = reportsBybankConcilationRow4ListArray.toString();
			String expRow4List = "[Pending, 23/11/2021, NDT50:5, 23/11/2021, 30.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			int reportsBybankConcilationRow5ListCount = bc_5thRowList.size();
			ArrayList<String> reportsBybankConcilationRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow5ListCount;i++)
			{
				String data = bc_5thRowList.get(i).getText();
				reportsBybankConcilationRow5ListArray.add(data);
			}
			String actRow5List = reportsBybankConcilationRow5ListArray.toString();
			String expRow5List = "[Pending, 23/11/2021, NDT50:6, 23/11/2021, 120.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow6ListCount = bc_6thRowList.size();
			ArrayList<String> reportsBybankConcilationRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow6ListCount;i++)
			{
				String data = bc_6thRowList.get(i).getText();
				reportsBybankConcilationRow6ListArray.add(data);
			}
			String actRow6List = reportsBybankConcilationRow6ListArray.toString();
			String expRow6List = "[Pending, 23/11/2021, NDT50:7, 23/11/2021, 120.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			int reportsBybankConcilationRow7ListCount = bc_7thRowList.size();
			ArrayList<String> reportsBybankConcilationRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow7ListCount;i++)
			{
				String data = bc_7thRowList.get(i).getText();
				reportsBybankConcilationRow7ListArray.add(data);
			}
			String actRow7List = reportsBybankConcilationRow7ListArray.toString();
			String expRow7List = "[Pending, 23/11/2021, NDT50:7, 23/11/2021, 100.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow8ListCount = bc_8thRowList.size();
			ArrayList<String> reportsBybankConcilationRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow8ListCount;i++)
			{
				String data = bc_8thRowList.get(i).getText();
				reportsBybankConcilationRow8ListArray.add(data);
			}
			String actRow8List = reportsBybankConcilationRow8ListArray.toString();
			String expRow8List = "[Pending, 23/11/2021, NDT50:7, 23/11/2021, 90.00, 0.00, , Sales invoice VAT, , , ]";
			
			//((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", bc_9thRowList);
			getAction().moveToElement(bc_9thRow1stCol).build().perform();
			Thread.sleep(4000);
			
			

			int reportsBybankConcilationRow9ListCount = bc_9thRowList.size();
			ArrayList<String> reportsBybankConcilationRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow9ListCount;i++)
			{
				String data = bc_9thRowList.get(i).getText();
				reportsBybankConcilationRow9ListArray.add(data);
			}
			String actRow9List = reportsBybankConcilationRow9ListArray.toString();
			String expRow9List = "[Pending, 23/11/2021, NDT50:7, 23/11/2021, 120.00, 0.00, , Sales invoice VAT, , , ]";
			
			
			int reportsBybankConcilationRow10ListCount = bc_10thRowList.size();
			ArrayList<String> reportsBybankConcilationRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow10ListCount;i++)
			{
				String data = bc_10thRowList.get(i).getText();
				reportsBybankConcilationRow10ListArray.add(data);
			}
			String actRow10List = reportsBybankConcilationRow10ListArray.toString();
			String expRow10List = "[Pending, 23/11/2021, Rct:1, 23/11/2021, 0.00, 6.00, PDR1, Receipts, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow11ListCount = bc_11thRowList.size();
			ArrayList<String> reportsBybankConcilationRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow11ListCount;i++)
			{
				String data = bc_11thRowList.get(i).getText();
				reportsBybankConcilationRow11ListArray.add(data);
			}
			String actRow11List = reportsBybankConcilationRow11ListArray.toString();
			String expRow11List = "[Pending, 23/11/2021, NDT44:1, 23/11/2021, 0.00, 100.00, , Receipts VAT, , , ]";
			
			
			int reportsBybankConcilationRow12ListCount = bc_12thRowList.size();
			ArrayList<String> reportsBybankConcilationRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow12ListCount;i++)
			{
				String data = bc_12thRowList.get(i).getText();
				reportsBybankConcilationRow12ListArray.add(data);
			}
			String actRow12List = reportsBybankConcilationRow12ListArray.toString();
			String expRow12List = "[Pending, 23/11/2021, Pmt:1, 23/11/2021, 6.00, 0.00, PDPVAT1, Payments, , , ]";
			
			
			
			
			
			int reportsBybankConcilationRow13ListCount = bc_13thRowList.size();
			ArrayList<String> reportsBybankConcilationRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow13ListCount;i++)
			{
				String data = bc_13thRowList.get(i).getText();
				reportsBybankConcilationRow13ListArray.add(data);
			}
			String actRow13List = reportsBybankConcilationRow13ListArray.toString();
			String expRow13List = "[Pending, 23/11/2021, NDT46:2, 23/11/2021, 0.00, 6.00, PDR2, PDR VAT, , , ]";
			
			
			
			
			String actBookBal=bookBalance.getText();
			String expBookBal="514.00 Dr";
			
			String actOutDebits=outDebits.getText();
			String expOutDebits="746.00 Dr";
			
			String actOutCredits=outCredits.getText();
			String expOutCredits="232.00 Cr";
			
			String actClearedBal=clearedBalance.getText();
			String expClearedBal="0.00";
			
			String actOpeningBal=openingBalance.getText();
			String expOpeningBal="0.00";
			
			
			
			String actDebitsCount=debitCounts.getText();
			String expDebitsCount="9";
			
			String actCreditsCount=creditCounts.getText();
			String expCreditsCount="4";
					
			
			
			String actBankBal=bankBalance.getAttribute("value");
			String expBankBal="0.0000";
			
			String actDiff=difference.getText();
			String expDiff="0.00";
			
		
			System.out.println("*****************************************checkCustomer/VendorConcalitationReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			
			
			System.out.println("********************************************************************************");
			System.out.println("Book Balance		:"	+	actBookBal 		+		"Value Expected"	+	expBookBal );
			System.out.println("OutCredits		:"	+	actOutCredits 	+		"Value Expected"	+	expOutCredits );
			System.out.println("OutDebits		:"	+	actOutDebits 	+		"Value Expected"	+	expOutDebits );
			System.out.println("Cleared Balance		:"	+	actClearedBal 	+		"Value Expected"	+	expClearedBal );
			System.out.println("Opening Balance		:"	+	actOpeningBal 	+		"Value Expected"	+	expOpeningBal );
			System.out.println("DebitsCount		:"	+	actDebitsCount 	+		"Value Expected"	+	expDebitsCount );
			System.out.println("CreditsCount		:"	+	actCreditsCount +		"Value Expected"	+	expCreditsCount );
			System.out.println("Bank Balance		:"	+	actBankBal 		+		"Value Expected"	+	expBankBal );
			System.out.println("Difference		:"	+	actDiff 		+		"Value Expected"	+	expDiff );

			
			
		if(actRow1List.equalsIgnoreCase(expRow1List)&&actRow2List.equalsIgnoreCase(expRow2List)
				&&actRow3List.equalsIgnoreCase(expRow3List)&&actRow4List.equalsIgnoreCase(expRow4List)
				&&actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
				&&actRow7List.equalsIgnoreCase(expRow7List)&&actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List)&&actRow10List.equalsIgnoreCase(expRow10List)
				&&actRow11List.equalsIgnoreCase(expRow11List)&&actRow12List.equalsIgnoreCase(expRow12List)
				&&actRow13List.equalsIgnoreCase(expRow13List)
				&&actBookBal.equalsIgnoreCase(expBookBal)&&actOutCredits.equalsIgnoreCase(expOutCredits)
				&&actOutDebits.equalsIgnoreCase(expOutDebits)&&actClearedBal.equalsIgnoreCase(expClearedBal)
				&&actOpeningBal.equalsIgnoreCase(expOpeningBal)&&actDebitsCount.equalsIgnoreCase(expDebitsCount)
				&&actCreditsCount.equalsIgnoreCase(expCreditsCount)&&actBankBal.equalsIgnoreCase(expBankBal)
				&&actDiff.equalsIgnoreCase(expDiff))

			
			{
			
			
			
				return true;
			}
			else
			{
				
				return false;
			}
			
		}
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[3]")
		private static WebElement bc_BackTrackBtn;
		
		public void checkCustomerReconcilitionReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=bc_reports4thColRowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=bc_reports4thColRowsList.get(i).getText();
	         //String data1=reportTableColumn7RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT50:1") )
	         {
	        	 bc_reports4thColRowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
	    ((JavascriptExecutor)getDriver()).executeScript("window.scrollBy(1249,-353)");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( bc_BackTrackBtn));
		 bc_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
		}
		
		
		
		
		
	
		public boolean checkBankReconcilationStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationStatement));
			bankReconciliationStatement.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Bank");
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, , Balance as per Books, , 30.00, , , , 30.00, , , , 13.26, , , , 2, 23/11/2021, NDT45 : 1, Vendor B, , 30.00, 30.00, 60.00, , 30.00, 30.00, 60.00, , 2.10, 2.10, 15.36, 3, 23/11/2021, NDT45 : 1, Vendor B, , 33.00, 63.00, 93.00, , 33.00, 63.00, 93.00, , 2.31, 4.41, 17.67, 4, 23/11/2021, NDT44 : 1, Customer A, 100.00, , 37.00, 7.00, 100.00, , 37.00, 7.00, 7.00, , 2.59, 10.67, 5, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 87.00, 57.00, 50.00, , 87.00, 57.00, 3.50, , 6.09, 7.17, 6, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 55.50, 25.50, , 31.50, 55.50, 25.50, , 2.21, 3.89, 9.38, 7, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 24.00, 6.00, , 31.50, 24.00, 6.00, , 2.21, 1.68, 11.58, 8, 23/11/2021, Rct : 1, Customer A, 6.00, , 30.00, , 6.00, , 30.00, , 6.00, , 7.68, 5.58, 9, 23/11/2021, Rct : 2, HDFC, 6.00, , 36.00, 6.00, 6.00, , 36.00, 6.00, 6.00, , 13.68, 0.42, 10, 23/11/2021, Pmt : 1, Customer A, , 6.00, 30.00, , , 6.00, 30.00, , , 6.00, 7.68, 5.58, 11, 23/11/2021, NDT47 : 2, Vendor B, , 6.00, 24.00, 6.00, , 6.00, 24.00, 6.00, , 0.42, 7.26, 6.00, 12, 23/11/2021, Pmt : 2, HDFC, 6.00, , 30.00, , 6.00, , 30.00, , 6.00, , 13.26, ]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
		
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, Grand Total, , , 168.00, 138.00, 260.50, 69.50, 168.00, 138.00, 260.50, 69.50, 28.50, 15.24, 57.30, 88.57]";
			
			
			
			System.out.println("************************************************checkBankReconciliationStatement*********************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&actPage2List.equalsIgnoreCase(expPage2List))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
		
		@FindBy(xpath="(//*[@id='FilterFields_537_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement bankreport_FilterWarehouseNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_537_0_DefaultFilter_0']")
		private static WebElement bankreport_DefaultFilterTxt;
		
		
		public boolean checkBankReconcilationStatementReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				bankreport_FilterWarehouseNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankreport_DefaultFilterTxt));
			bankreport_DefaultFilterTxt.click();
			bankreport_DefaultFilterTxt.sendKeys("MUMBAI");
			
			Thread.sleep(2000);
			
			bankreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Balance as per Books, , 30.00, , , , 30.00, , , , 13.26, , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Balance as per Bank, , 30.00, , , , 30.00, , , , 13.26, , , ]";
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , , , , , , , , , , , , ]";
			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkBankReconciliationStatementReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				bankreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 12; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount==expRowCount
					)
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
		public boolean checkBankReconciliationStatementReportBackTrackOption() throws InterruptedException
		{
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase("NDT44 : 1") /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = "1";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = "Bank";
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = "DUBAI";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = "Bank";
		
			
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = "100.00";
		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference = "NDT50:1 : 23 Nov 2021";
		
		String actR1VAT = select1stRow_7thColumn.getText();
		String expR1VAT = "0.00";
		
				

	 	
		System.out.println("**********************checkBankReconciliationStatementReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Account          : "+actAccount			+"  Value Expected  "+actAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName     : "+actAccount			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount 			: "+actR1Amount			+"  Value Expected  "+expR1Amount);
		System.out.println("Reference       : "+actR1Reference				+"  Value Expected  "+expR1Reference);
		System.out.println("VAT		        : "+actR1VAT			+"  Value Expected  "+expR1VAT);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Account.equalsIgnoreCase(expR1Account) 
			  && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1Amount.equalsIgnoreCase(expR1Amount) 
			   && actR1Reference.equalsIgnoreCase(expR1Reference) && actR1VAT.equalsIgnoreCase(expR1VAT) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			return false;
		}
	}

		@FindBy(xpath="//*[@id='dvReportInputs']/div[8]/label/span")
		private static WebElement includeOpeningBalOption;
		
		
		public boolean checkBankReconcilationStatementReportwithIncludeOptionsCheckbox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationStatement));
			bankReconciliationStatement.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys("Bank");
			Thread.sleep(2000);
			
			accountName.sendKeys(Keys.TAB);
			
			getAction().moveToElement(includesSalesReturnVocherOption).build().perform();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));

			includesSalesReturnVocherOption.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCConsolidatedAmount));

			PDCConsolidatedAmount.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includeOpeningBalOption));

			includeOpeningBalOption.click();
			Thread.sleep(2000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, , Balance as per Books, , 30.00, , , , 30.00, , , , 13.26, , , , 2, 23/11/2021, NDT45 : 1, , , 63.00, 63.00, 93.00, , 63.00, 63.00, 93.00, , 4.41, 4.41, 17.67, 3, 23/11/2021, NDT44 : 1, , 100.00, , 37.00, 7.00, 100.00, , 37.00, 7.00, 7.00, , 2.59, 10.67, 4, 23/11/2021, NDT52 : 1, , 50.00, , 87.00, 57.00, 50.00, , 87.00, 57.00, 3.50, , 6.09, 7.17, 5, 23/11/2021, NDT51 : 1, , , 31.50, 55.50, 25.50, , 31.50, 55.50, 25.50, , 2.21, 3.89, 9.38, 6, 23/11/2021, NDT55 : 1, , , 31.50, 24.00, 6.00, , 31.50, 24.00, 6.00, , 2.21, 1.68, 11.58, 7, 23/11/2021, NDT46 : 1, , 0.29, , 24.29, 5.71, 0.29, , 24.29, 5.71, 0.02, , 1.70, 11.56, 8, 23/11/2021, Rct : 1, , 6.00, , 30.29, 0.29, 6.00, , 30.29, 0.29, 6.00, , 7.70, 5.56, 9, 23/11/2021, Rct : 2, , 6.00, , 36.29, 6.29, 6.00, , 36.29, 6.29, 6.00, , 13.70, 0.44, 10, 23/11/2021, Pmt : 1, , , 6.00, 30.29, 0.29, , 6.00, 30.29, 0.29, , 6.00, 7.70, 5.56, 11, 23/11/2021, NDT47 : 2, , , 6.00, 24.29, 5.71, , 6.00, 24.29, 5.71, , 0.42, 7.28, 5.98, 12, 23/11/2021, Pmt : 2, , 6.00, , 30.29, 0.29, 6.00, , 30.29, 0.29, 6.00, , 13.28, 0.02]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
		
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, , Balance as per Bank, , , 0.29, , , , 0.29, , , , 0.02, , , 14, Grand Total, , , 168.29, 138.00, 316.24, 13.76, 168.29, 138.00, 316.24, 13.76, 28.52, 15.24, 61.20, 84.66]";
			
			
			
			System.out.println("************************************************checkBankReconciliationStatementWithIncludeOptions*********************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&actPage2List.equalsIgnoreCase(expPage2List))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		
		
		@FindBy(xpath="//select[@id='ddlVATHomeRepOutPut']")
		private static WebElement outputDropdown;
		
		@FindBy(xpath="//select[@id='ddlVATHomeRepDateOpt']")
		private static WebElement Vat_DateDropdown;
		
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[2]")
		private static WebElement VATSummary_OKBtn;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//th")
		private static List<WebElement> VatSummary_SalesHeader;
		
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[1]//td")
		private static List<WebElement> VatSummary_SalesRow1List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[2]//td")
		private static List<WebElement> VatSummary_SalesRow2List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[3]//td")
		private static List<WebElement> VatSummary_SalesRow3List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[4]//td")
		private static List<WebElement> VatSummary_SalesRow4List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[5]//td")
		private static List<WebElement> VatSummary_SalesRow5List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[6]//td")
		private static List<WebElement> VatSummary_SalesRow6List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[7]//td")
		private static List<WebElement> VatSummary_SalesRow7List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[8]//td")
		private static List<WebElement> VatSummary_SalesRow8List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[9]//td")
		private static List<WebElement> VatSummary_SalesRow9List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[10]//td")
		private static List<WebElement> VatSummary_SalesRow10List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[11]//td")
		private static List<WebElement> VatSummary_SalesRow11List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[12]//td")
		private static List<WebElement> VatSummary_SalesRow12List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[13]//td")
		private static List<WebElement> VatSummary_SalesRow13List;
		
		
		
		
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr//th")
		private static List<WebElement> VatSummary_PurchaseHeader;
		
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[1]//td")
		private static List<WebElement> VatSummary_PurchaseRow1List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[2]//td")
		private static List<WebElement> VatSummary_PurchaseRow2List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[3]//td")
		private static List<WebElement> VatSummary_PurchaseRow3List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[4]//td")
		private static List<WebElement> VatSummary_PurchaseRow4List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[5]//td")
		private static List<WebElement> VatSummary_PurchaseRow5List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[6]//td")
		private static List<WebElement> VatSummary_PurchaseRow6List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[7]//td")
		private static List<WebElement> VatSummary_PurchaseRow7List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[8]//td")
		private static List<WebElement> VatSummary_PurchaseRow8List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[9]//td")
		private static List<WebElement> VatSummary_PurchaseRow9List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[10]//td")
		private static List<WebElement> VatSummary_PurchaseRow10List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[11]//td")
		private static List<WebElement> VatSummary_PurchaseRow11List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[12]//td")
		private static List<WebElement> VatSummary_PurchaseRow12List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[13]//td")
		private static List<WebElement> VatSummary_PurchaseRow13List;
		
		
		@FindBy(xpath="//*[@id='txt_totalPurchase']")
		private static WebElement totalPurchase;
		
		@FindBy(xpath="//*[@id='txt_totalVATPurchase']")
		private static WebElement totalVATPurchase;
		
		@FindBy(xpath="//*[@id='txt_totalSales']")
		private static WebElement totalSales;
		
		@FindBy(xpath="//*[@id='txt_totalVATSales']")
		private static WebElement totalVATSales;
		
		@FindBy(xpath="//*[@id='txt_totalVATdue']")
		private static WebElement totalVATDue;
		
		@FindBy(xpath="//*[@id='txt_Correction']")
		private static WebElement totalCorrection;
		
		@FindBy(xpath="//*[@id='txt_VATCredit']")
		private static WebElement totalVATCredit;
		
		@FindBy(xpath="//*[@id='txt_NetVATdue']")
		private static WebElement totalNetVATDue;
		
		
		public boolean checkVATSummaryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSummaryreport));
			VATSummaryreport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Vat_DateDropdown));
			Vat_DateDropdown.click();
			Select s=new Select(Vat_DateDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outputDropdown));
			outputDropdown.click();
			Select s1=new Select(outputDropdown);
			s1.selectByValue("0");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSummary_OKBtn));
			VATSummary_OKBtn.click();
		
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VatSummary_SalesHeader));
			
			int reportSalesHeaderCount = VatSummary_SalesHeader.size();
			ArrayList<String> reportSalesHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportSalesHeaderCount;i++)
			{
				String data = VatSummary_SalesHeader.get(i).getText();
				reportSalesHeaderListArray.add(data);
			}
			String actSalesheaderList = reportSalesHeaderListArray.toString();
			String expSalesheaderList = "[Sno., Sales Region, Region, Sales Value, Adjustments, VAT Amount]";
			
			int reportsRow1ListCount = VatSummary_SalesRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				Thread.sleep(2000);
				
				String data = VatSummary_SalesRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Sales UAE, ABU DHABI, 0.00, 0.00, 0.00]";
			
			
			int reportsRow2ListCount = VatSummary_SalesRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				
				String data = VatSummary_SalesRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[, AJMAN, 0.00, 0.00, 0.00]";
			
			
			int reportsRow3ListCount = VatSummary_SalesRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				
				String data = VatSummary_SalesRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[, DUBAI, 740.00, 0.00, 0.00]";
			
			
			int reportsRow4ListCount = VatSummary_SalesRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				
				String data = VatSummary_SalesRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[, FUJAIRAH, 0.00, 0.00, 0.00]";
			
			
			int reportsRow5ListCount = VatSummary_SalesRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
			
				
				String data = VatSummary_SalesRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, RAS AL-KHAIMAH, 0.00, 0.00, 0.00]";
			
			
			int reportsRow6ListCount = VatSummary_SalesRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				
				String data = VatSummary_SalesRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[, SHARJAH, 0.00, 0.00, 0.00]";
			
			
			int reportsRow7ListCount = VatSummary_SalesRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[, UMM AL-QUWAIN, 0.00, 0.00, 0.00]";
			
			
			int reportsRow8ListCount = VatSummary_SalesRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[, TOTAL UAE, 740.00, 0.00, 0.00]";
			
			
			int reportsRow9ListCount = VatSummary_SalesRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[Sales GCC, , 0.00, 0.00, 0.00]";
			
			int reportsRow10ListCount = VatSummary_SalesRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[Zero Rate Sales, , 0.00, 0.00, 0.00]";
			
			
			int reportsRow11ListCount = VatSummary_SalesRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Exempt Sales, , 0.00, 0.00, 0.00]";
			
			
			int reportsRow12ListCount = VatSummary_SalesRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Sales Export, , 0.00, 0.00, 0.00]";
			
			
			int reportsRow13ListCount = VatSummary_SalesRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow13ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[, Total Sales, 740.00, 0.00, 0.00]";
			
			int reportPurchaseHeaderCount = VatSummary_PurchaseHeader.size();
			ArrayList<String> reportPurchaseHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportPurchaseHeaderCount;i++)
			{
				String data = VatSummary_PurchaseHeader.get(i).getText();
				reportPurchaseHeaderListArray.add(data);
			}
			String actPurchaseheaderList = reportPurchaseHeaderListArray.toString();
			String expPurchaseheaderList = "[Sno., Purchase Region, Region, Purchase Value, Adjustment, VAT Amount]";
			
			int reportsPurchaseRow1ListCount = VatSummary_PurchaseRow1List.size();
			ArrayList<String> reportsPurchaseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow1ListCount;i++)
			{
			
				
				String data = VatSummary_PurchaseRow1List.get(i).getText();
				reportsPurchaseRow1ListArray.add(data);
			}
			String actPurchaseRow1List = reportsPurchaseRow1ListArray.toString();
			String expPurchaseRow1List = "[Purchase UAE, ABU DHABI, 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow2ListCount = VatSummary_PurchaseRow2List.size();
			ArrayList<String> reportsPurchaseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow2ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow2List.get(i).getText();
				reportsPurchaseRow2ListArray.add(data);
			}
			String actPurchaseRow2List = reportsPurchaseRow2ListArray.toString();
			String expPurchaseRow2List = "[, AJMAN, 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow3ListCount = VatSummary_PurchaseRow3List.size();
			ArrayList<String> reportsPurchaseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow3ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow3List.get(i).getText();
				reportsPurchaseRow3ListArray.add(data);
			}
			String actPurchaseRow3List = reportsPurchaseRow3ListArray.toString();
			String expPurchaseRow3List = "[, DUBAI, 370.00, 0.00, 18.50]";
			
			
			int reportsPurchaseRow4ListCount = VatSummary_PurchaseRow4List.size();
			ArrayList<String> reportsPurchaseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow4ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow4List.get(i).getText();
				reportsPurchaseRow4ListArray.add(data);
			}
			String actPurchaseRow4List = reportsPurchaseRow4ListArray.toString();
			String expPurchaseRow4List = "[, FUJAIRAH, 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow5ListCount = VatSummary_PurchaseRow5List.size();
			ArrayList<String> reportsPurchaseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow5ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow5List.get(i).getText();
				reportsPurchaseRow5ListArray.add(data);
			}
			String actPurchaseRow5List = reportsPurchaseRow5ListArray.toString();
			String expPurchaseRow5List = "[, RAS AL-KHAIMAH, 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow6ListCount = VatSummary_PurchaseRow6List.size();
			ArrayList<String> reportsPurchaseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow6ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow6List.get(i).getText();
				reportsPurchaseRow6ListArray.add(data);
			}
			String actPurchaseRow6List = reportsPurchaseRow6ListArray.toString();
			String expPurchaseRow6List = "[, SHARJAH, 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow7ListCount = VatSummary_PurchaseRow7List.size();
			ArrayList<String> reportsPurchaseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow7ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow7List.get(i).getText();
				reportsPurchaseRow7ListArray.add(data);
			}
			String actPurchaseRow7List = reportsPurchaseRow7ListArray.toString();
			String expPurchaseRow7List = "[, UMM AL-QUWAIN, 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow8ListCount = VatSummary_PurchaseRow8List.size();
			ArrayList<String> reportsPurchaseRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow8ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow8List.get(i).getText();
				reportsPurchaseRow8ListArray.add(data);
			}
			String actPurchaseRow8List = reportsPurchaseRow8ListArray.toString();
			String expPurchaseRow8List = "[, TOTAL UAE, 370.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow9ListCount = VatSummary_PurchaseRow9List.size();
			ArrayList<String> reportsPurchaseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow9ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow9List.get(i).getText();
				reportsPurchaseRow9ListArray.add(data);
			}
			String actPurchaseRow9List = reportsPurchaseRow9ListArray.toString();
			String expPurchaseRow9List = "[Purchase GCC, , 0.00, 0.00, 0.00]";
			
			int reportsPurchaseRow10ListCount = VatSummary_PurchaseRow10List.size();
			ArrayList<String> reportsPurchaseRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow10ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow10List.get(i).getText();
				reportsPurchaseRow10ListArray.add(data);
			}
			String actPurchaseRow10List = reportsPurchaseRow10ListArray.toString();
			String expPurchaseRow10List = "[Zero Rate Purchase, , 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow11ListCount = VatSummary_PurchaseRow11List.size();
			ArrayList<String> reportsPurchaseRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow11ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow11List.get(i).getText();
				reportsPurchaseRow11ListArray.add(data);
			}
			String actPurchaseRow11List = reportsPurchaseRow11ListArray.toString();
			String expPurchaseRow11List = "[Exempt Purchase, , 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow12ListCount = VatSummary_PurchaseRow12List.size();
			ArrayList<String> reportsPurchaseRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow12ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow12List.get(i).getText();
				reportsPurchaseRow12ListArray.add(data);
			}
			String actPurchaseRow12List = reportsPurchaseRow12ListArray.toString();
			String expPurchaseRow12List = "[Purchase Export, , 0.00, 0.00, 0.00]";
			
			
			int reportsPurchaseRow13ListCount = VatSummary_PurchaseRow13List.size();
			ArrayList<String> reportsPurchaseRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow13ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow13List.get(i).getText();
				reportsPurchaseRow13ListArray.add(data);
			}
			String actPurchaseRow13List = reportsPurchaseRow13ListArray.toString();
			String expPurchaseRow13List = "[, Total Purchase, 370.00, 0.00, 18.50]";
			
			String actTotalPurchase=totalPurchase.getAttribute("value");
			String expTotalPurchase="370.00";
			
			String actTotalVATPurchase=totalVATPurchase.getAttribute("value");
			String expTotalVATPurchase="18.50";
			
			String actTotalSales=totalSales.getAttribute("value");
			String expTotalSales="740.00";
			
			String actTotalVATSales=totalVATSales.getAttribute("value");
			String expTotalVATSales="0.00";
			
			String actTotalVATDue=totalVATDue.getAttribute("value");
			String expTotalVATDue="0.00";
			
			String actCorrection=totalCorrection.getAttribute("value");
			String expCorrection="0.00";
			
			String actTotalVATCredit=totalVATCredit.getAttribute("value");
			String expTotalVATCredit="0.00";
			
			String actTotalNetVATDue=totalNetVATDue.getAttribute("value");
			String expTotalNetVATDue="0.00";
			
			
			System.out.println("*****************************************checkVATSummaryReports***************************************");
			
			System.out.println(actSalesheaderList);
			System.out.println(expSalesheaderList);
			
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			System.out.println(actPurchaseheaderList);
			System.out.println(expPurchaseheaderList);
			
			System.out.println(actPurchaseRow1List);
			System.out.println(expPurchaseRow1List);
			
			System.out.println(actPurchaseRow2List);
			System.out.println(expPurchaseRow2List);
			
			System.out.println(actPurchaseRow3List);
			System.out.println(expPurchaseRow3List);
			
			
			System.out.println(actPurchaseRow4List);
			System.out.println(expPurchaseRow4List);
			
			
			System.out.println(actPurchaseRow5List);
			System.out.println(expPurchaseRow5List);
			
			
			System.out.println(actPurchaseRow6List);
			System.out.println(expPurchaseRow6List);
			
			
			System.out.println(actPurchaseRow7List);
			System.out.println(expPurchaseRow7List);
			
			
			System.out.println(actPurchaseRow8List);
			System.out.println(expPurchaseRow8List);
			
			
			System.out.println(actPurchaseRow9List);
			System.out.println(expPurchaseRow9List);
			
			System.out.println(actPurchaseRow10List);
			System.out.println(expPurchaseRow10List);
			
			System.out.println(actPurchaseRow11List);
			System.out.println(expPurchaseRow11List);
			
			System.out.println(actPurchaseRow12List);
			System.out.println(expPurchaseRow12List);
			
			System.out.println(actPurchaseRow13List);
			System.out.println(expPurchaseRow13List);
			
			
			System.out.println(actPurchaseRow1List);
			System.out.println(expPurchaseRow1List);
			
			
			System.out.println(actTotalPurchase);
			System.out.println(expTotalPurchase);
			
			System.out.println(actTotalVATPurchase);
			System.out.println(expTotalVATPurchase);
			
			
			System.out.println(actTotalSales);
			System.out.println(expTotalSales);
			
			System.out.println(actTotalVATSales);
			System.out.println(expTotalVATSales);
			
			
			System.out.println(actTotalVATDue);
			System.out.println(expTotalVATDue);
			
			System.out.println(actCorrection);
			System.out.println(expCorrection);
			
			System.out.println(actTotalVATCredit);
			System.out.println(expTotalVATCredit);
			
			System.out.println(actTotalNetVATDue);
			System.out.println(actTotalNetVATDue);
			
			
			if(actTotalPurchase.equalsIgnoreCase(expTotalPurchase)&&actTotalVATPurchase.equalsIgnoreCase(expTotalVATPurchase)
					&&actTotalSales.equalsIgnoreCase(expTotalSales)&&actTotalVATSales.equalsIgnoreCase(expTotalVATSales)
					&&actTotalVATDue.equalsIgnoreCase(expTotalVATDue)&&actCorrection.equalsIgnoreCase(expCorrection)
					&&actTotalVATCredit.equalsIgnoreCase(expTotalVATCredit)&&actTotalNetVATDue.equalsIgnoreCase(expTotalNetVATDue))
			{
				return true;
			}
			else
			{
				return false;
			}
					
		}
		
		
		public Focus10FinancialsReportsPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}

	
	
}
