/* Minification failed. Returning unminified contents.
(2483,86-87): run-time error JS1195: Expected expression: >
(2484,47-48): run-time error JS1195: Expected expression: >
(2486,18-19): run-time error JS1004: Expected ';': )
(2487,13-14): run-time error JS1195: Expected expression: )
(2779,5-6): run-time error JS1002: Syntax error: }
(2781,59-60): run-time error JS1004: Expected ';': {
(2805,6-7): run-time error JS1195: Expected expression: ,
(2808,37-38): run-time error JS1004: Expected ';': {
(2900,6-7): run-time error JS1195: Expected expression: ,
(2903,57-58): run-time error JS1004: Expected ';': {
(3163,6-7): run-time error JS1195: Expected expression: ,
(3166,30-31): run-time error JS1195: Expected expression: )
(3166,32-33): run-time error JS1004: Expected ';': {
(3185,6-7): run-time error JS1195: Expected expression: ,
(3188,31-32): run-time error JS1195: Expected expression: )
(3188,33-34): run-time error JS1004: Expected ';': {
(3195,6-7): run-time error JS1195: Expected expression: ,
(3198,25-26): run-time error JS1195: Expected expression: )
(3198,27-28): run-time error JS1004: Expected ';': {
(3224,6-7): run-time error JS1195: Expected expression: ,
(3227,33-34): run-time error JS1004: Expected ';': {
(3238,6-7): run-time error JS1195: Expected expression: ,
(3241,52-53): run-time error JS1004: Expected ';': {
(3267,6-7): run-time error JS1195: Expected expression: ,
(3269,58-59): run-time error JS1004: Expected ';': {
(3275,6-7): run-time error JS1195: Expected expression: ,
(3278,36-37): run-time error JS1195: Expected expression: )
(3278,38-39): run-time error JS1004: Expected ';': {
(3371,6-7): run-time error JS1195: Expected expression: ,
(3374,62-63): run-time error JS1004: Expected ';': {
(3419,6-7): run-time error JS1195: Expected expression: ,
(3422,30-31): run-time error JS1195: Expected expression: )
(3422,32-33): run-time error JS1004: Expected ';': {
(3476,6-7): run-time error JS1195: Expected expression: ,
(3479,53-54): run-time error JS1004: Expected ';': {
(3507,6-7): run-time error JS1195: Expected expression: ,
(3510,28-29): run-time error JS1195: Expected expression: )
(3510,30-31): run-time error JS1004: Expected ';': {
(3542,6-7): run-time error JS1195: Expected expression: ,
(3545,25-33): run-time error JS1197: Too many errors. The file might not be a JavaScript file: function
(3521,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3529,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3505,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3451,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3460,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3382,17-29): run-time error JS1018: 'return' statement outside of function: return false
(3391,17-29): run-time error JS1018: 'return' statement outside of function: return false
(3408,17-29): run-time error JS1018: 'return' statement outside of function: return false
(3297,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3316,25-37): run-time error JS1018: 'return' statement outside of function: return false
(3327,25-37): run-time error JS1018: 'return' statement outside of function: return false
(3338,25-37): run-time error JS1018: 'return' statement outside of function: return false
(3251,13-25): run-time error JS1018: 'return' statement outside of function: return false
(3184,9-17): run-time error JS1018: 'return' statement outside of function: return c
(2918,13-25): run-time error JS1018: 'return' statement outside of function: return false
(2925,13-25): run-time error JS1018: 'return' statement outside of function: return false
(2789,17-23): run-time error JS1018: 'return' statement outside of function: return
(2703,17-29): run-time error JS1018: 'return' statement outside of function: return false
(2765,17-29): run-time error JS1018: 'return' statement outside of function: return false
(2773,17-29): run-time error JS1018: 'return' statement outside of function: return false
 */
var CopyAllRows;
var arrGridCopiedData;
var IsPBPated = false;
var CopySettingUL;
var IsDateFilterEdited = 0;
var IsRateEdited = 0;
var PrevDatePickerLocation = '';
var PrevDatePickerId = '';
var iCustomizeDisplay = 0;
var SellerPriceBookId = "";
var PB_id; var PT_id; var DPT_id; var CUST_id; var CURR_id; var STRDATE_id; var ENDDATE_id; var UNT_id;
var selected = 0;
var scrolled = 0;
var itemlist = $('#MainDivForchkbody');
var typeId;
var CopiedTypeId;
var PriceBookText;
var pageNo = 1;
var RowsCount = 15;
var currentPage = 0;
var IsExportedAfterLoad = false;
var GetPBResourceMessages;
var PBValueColumnNames;
var PriceBookGridData = [];
var PriceBookGridDataPageNo = [];
var iLocalPageNo = 0;
var ischangeClicked = false;
var selectedRow = 0;
var isLoadedFromDB = 0;
var arrTempSetAuthDetails = [];
var bSetAuthorizationStatusSuccess = false;
var bPBActiveStutus_OLD = false;
var addDataToFilter = [];
var iAlertId;
var iAlertPriceBookId;
var DepViewId;
var CusViewId;
var ProdViewId;
var CurrenViewId;
var UnitViewId;
var GridCustomizeColumnFields;
var iCustomizeDisplayForAppend;
var TotalTempArray = [];
var bMapFields = false;
var m_iCalenderType;
PRICEBOOK = {

    SetCustomizableColumnsData: function (sGridId, iRow) {
        debugger;
        var arrRowData_PreviousRow = FGRIDCONTROL.getRowValue(sGridId, (iRow - 1));

        var objDepartment_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 3);
        if (objDepartment_CurrentRow.cell.style.display != "none") {
            if (parseInt(arrRowData_PreviousRow[2].Value) > 0 && parseInt(objDepartment_CurrentRow.getCellData("value")) <= 0) {
                objDepartment_CurrentRow.setCellData("value", arrRowData_PreviousRow[2].Value);
                objDepartment_CurrentRow.setCellText(arrRowData_PreviousRow[2].Text);
            }
        }

        var objStartingDate_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 4);
        if (objStartingDate_CurrentRow.cell.style.display != "none") {
            if (parseInt(arrRowData_PreviousRow[3].Value) > 0 && parseInt(objStartingDate_CurrentRow.getCellData("value")) <= 0) {
                objStartingDate_CurrentRow.setCellData("value", arrRowData_PreviousRow[3].Value);
                objStartingDate_CurrentRow.setCellText(arrRowData_PreviousRow[3].Text);
            }
        }

        var objEndingDate_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 5);
        if (objEndingDate_CurrentRow.cell.style.display != "none") {
            if (parseInt(arrRowData_PreviousRow[4].Value) > 0 && parseInt(objEndingDate_CurrentRow.getCellData("value")) <= 0) {
                objEndingDate_CurrentRow.setCellData("value", arrRowData_PreviousRow[4].Value);
                objEndingDate_CurrentRow.setCellText(arrRowData_PreviousRow[4].Text);
            }
        }

        var objCustomer_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 6);
        if (objCustomer_CurrentRow.cell.style.display != "none") {
            if (parseInt(arrRowData_PreviousRow[5].Value) > 0 && parseInt(objCustomer_CurrentRow.getCellData("value")) <= 0) {
                objCustomer_CurrentRow.setCellData("value", arrRowData_PreviousRow[5].Value);
                objCustomer_CurrentRow.setCellText(arrRowData_PreviousRow[5].Text);
            }
        }

        var objCurrency_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 7);
        if (objCurrency_CurrentRow.cell.style.display != "none") {
            if (parseInt(arrRowData_PreviousRow[6].Value) > 0 && parseInt(objCurrency_CurrentRow.getCellData("value")) <= 0) {
                objCurrency_CurrentRow.setCellData("value", arrRowData_PreviousRow[6].Value);
                objCurrency_CurrentRow.setCellText(arrRowData_PreviousRow[6].Text);
            }
        }

        var objMinQty_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 8);
        if (objMinQty_CurrentRow.cell.style.display != "none") {
            if (parseFloat(arrRowData_PreviousRow[7].Value) > 0 && parseFloat(objMinQty_CurrentRow.getCellData("value")) <= 0) {
                objMinQty_CurrentRow.setCellData("value", arrRowData_PreviousRow[7].Value);
                objMinQty_CurrentRow.setCellText(arrRowData_PreviousRow[7].Text);
            }
        }

        var objMaxQty_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 9);
        if (objMaxQty_CurrentRow.cell.style.display != "none") {
            if (parseFloat(arrRowData_PreviousRow[8].Value) > 0 && parseFloat(objMaxQty_CurrentRow.getCellData("value")) <= 0) {
                objMaxQty_CurrentRow.setCellData("value", arrRowData_PreviousRow[8].Value);
                objMaxQty_CurrentRow.setCellText(arrRowData_PreviousRow[8].Text);
            }
        }

        var objUnit_CurrentRow = FGRIDCONTROL.getCellObject(sGridId, iRow, 10);
        if (objUnit_CurrentRow.cell.style.display != "none") {
            if (parseInt(arrRowData_PreviousRow[9].Value) > 0 && parseInt(objUnit_CurrentRow.getCellData("value")) <= 0) {
                objUnit_CurrentRow.setCellData("value", arrRowData_PreviousRow[9].Value);
                objUnit_CurrentRow.setCellText(arrRowData_PreviousRow[9].Text);
            }
        }
    },

    setHeight: function (onLoadHeight) {
        //debugger;
        if (parseInt($("#hdnMenuId").val()) > 0) {
            if ($(window).width() > 768) {
                if ($(window).width() <= 991) {
                    //debugger;
                    $('#myPager').removeClass("myPagerSmallScreen");
                    $('#myPager').removeClass("myPager");
                    $('#myPager').removeClass("myPager1024");
                    $('#myPager').removeClass("myPager1200");
                    $('#myPager').addClass("myPager914");
                    var leftPriceBookDiv = document.getElementById("leftPriceBookDiv");
                    //leftPriceBookDiv.style.height = GLOBAL.getPageHeight() - (leftPriceBookDiv.getBoundingClientRect().top) + 132 + "px";

                    var PriceBookWebGrid = document.getElementById("PriceBookWebGrid");
                    //PriceBookWebGrid.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid.getBoundingClientRect().top) - 130 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv = document.getElementById("rightPriceBookDiv");
                    //rightPriceBookDiv.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv.getBoundingClientRect().top) + 40 + "px";

                    var PriceBookWebGrid_body = document.getElementById("PriceBookWebGrid_body");
                    PriceBookWebGrid_body.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid_body.getBoundingClientRect().top) - 40 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv2 = document.getElementById("rightPriceBookDiv2");
                    //rightPriceBookDiv2.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv2.getBoundingClientRect().top) + 46+ "px";

                    var fieldSetId = document.getElementById("fieldSetId");
                    if (fieldSetId != null) {
                        if ($("#hdnLanguageId").val() == 2) {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 120 + "px";

                        }
                        else {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 100 + "px";
                        }
                    }
                }
                else if ($(window).width() <= 1024) {
                    if ($('#leftPriceBookDiv').is(':visible')) {
                        $('#myPager').removeClass("myPagerSmallScreen");
                        $('#myPager').removeClass("myPager");
                        $('#myPager').removeClass("myPager914");
                        $('#myPager').removeClass("myPager1200");
                        $('#myPager').addClass("myPager1024");
                    }
                    else {
                        $('#myPager').removeClass("myPagerSmallScreen");
                        $('#myPager').removeClass("myPager");
                        $('#myPager').removeClass("myPager914");
                        $('#myPager').removeClass("myPager1200");
                        $('#myPager').removeClass("myPager1024");
                    }
                    //debugger;
                    var leftPriceBookDiv = document.getElementById("leftPriceBookDiv");
                    //leftPriceBookDiv.style.height = GLOBAL.getPageHeight() - (leftPriceBookDiv.getBoundingClientRect().top) + 40 + "px";

                    var PriceBookWebGrid = document.getElementById("PriceBookWebGrid");
                    //PriceBookWebGrid.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid.getBoundingClientRect().top) - 130 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv = document.getElementById("rightPriceBookDiv");
                    //rightPriceBookDiv.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv.getBoundingClientRect().top) - 70 + "px";

                    var PriceBookWebGrid_body = document.getElementById("PriceBookWebGrid_body");
                    PriceBookWebGrid_body.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid_body.getBoundingClientRect().top) - 40 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv2 = document.getElementById("rightPriceBookDiv2");
                    //rightPriceBookDiv2.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv2.getBoundingClientRect().top) + 46 + "px";

                    var fieldSetId = document.getElementById("fieldSetId");
                    if (fieldSetId != null) {
                        if ($("#hdnLanguageId").val() == 2) {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 120 + "px";

                        }
                        else {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 100 + "px";
                        }
                    }
                }
                else if ($(window).width() <= 1199) {
                    //debugger;
                    $('#myPager').removeClass("myPagerSmallScreen");
                    $('#myPager').removeClass("myPager");
                    $('#myPager').removeClass("myPager914");
                    $('#myPager').removeClass("myPager1200");
                    $('#myPager').addClass("myPager1024");
                    var leftPriceBookDiv = document.getElementById("leftPriceBookDiv");
                    //leftPriceBookDiv.style.height = GLOBAL.getPageHeight() - (leftPriceBookDiv.getBoundingClientRect().top) + 40 + "px";

                    var PriceBookWebGrid = document.getElementById("PriceBookWebGrid");
                    //PriceBookWebGrid.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid.getBoundingClientRect().top) - 130 + parseInt(onLoadHeight) + "px";

                    var PriceBookWebGrid_body = document.getElementById("PriceBookWebGrid_body");
                    PriceBookWebGrid_body.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid_body.getBoundingClientRect().top) - 40 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv = document.getElementById("rightPriceBookDiv");
                    //rightPriceBookDiv.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv.getBoundingClientRect().top) - 70 + "px";

                    var rightPriceBookDiv2 = document.getElementById("rightPriceBookDiv2");
                    //rightPriceBookDiv2.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv2.getBoundingClientRect().top) + 46 + "px";

                    var fieldSetId = document.getElementById("fieldSetId");
                    if (fieldSetId != null) {
                        if ($("#hdnLanguageId").val() == 2) {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 120 + "px";

                        }
                        else {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 100 + "px";
                        }
                    }

                }
                else if ($(window).width() <= 1366) {
                    //debugger
                    $('#myPager').removeClass("myPagerSmallScreen");
                    $('#myPager').removeClass("myPager");
                    $('#myPager').removeClass("myPager914");
                    $('#myPager').removeClass("myPager1024");
                    $('#myPager').addClass("myPager");

                    var leftPriceBookDiv = document.getElementById("leftPriceBookDiv");
                    //leftPriceBookDiv.style.height = GLOBAL.getPageHeight() - (leftPriceBookDiv.getBoundingClientRect().top) + 45 + "px";

                    var PriceBookWebGrid = document.getElementById("PriceBookWebGrid");
                    //PriceBookWebGrid.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid.getBoundingClientRect().top) - 72 + parseInt(onLoadHeight) + "px";

                    var PriceBookWebGrid_body = document.getElementById("PriceBookWebGrid_body");
                    PriceBookWebGrid_body.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid_body.getBoundingClientRect().top) - 40 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv = document.getElementById("rightPriceBookDiv");
                    //rightPriceBookDiv.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv.getBoundingClientRect().top) - 12 + "px";

                    var rightPriceBookDiv2 = document.getElementById("rightPriceBookDiv2");
                    //rightPriceBookDiv2.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv2.getBoundingClientRect().top) + 45 + "px";

                    var fieldSetId = document.getElementById("fieldSetId");
                    if (fieldSetId != null) {
                        if ($("#hdnLanguageId").val() == 2) {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 120 + "px";

                        }
                        else {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 100 + "px";
                        }
                    }
                }
                else {
                    //debugger;
                    $('#myPager').removeClass("myPagerSmallScreen");
                    $('#myPager').removeClass("myPager");
                    $('#myPager').removeClass("myPager914");
                    $('#myPager').removeClass("myPager1024");
                    $('#myPager').addClass("myPager");
                    var leftPriceBookDiv = document.getElementById("leftPriceBookDiv");
                    //leftPriceBookDiv.style.height = GLOBAL.getPageHeight() - (leftPriceBookDiv.getBoundingClientRect().top) + 40 + "px";

                    var PriceBookWebGrid = document.getElementById("PriceBookWebGrid");
                    //PriceBookWebGrid.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid.getBoundingClientRect().top) - 73 + parseInt(onLoadHeight) + "px";

                    var PriceBookWebGrid_body = document.getElementById("PriceBookWebGrid_body");
                    PriceBookWebGrid_body.style.height = GLOBAL.getPageHeight() - (PriceBookWebGrid_body.getBoundingClientRect().top) - 40 + parseInt(onLoadHeight) + "px";

                    var rightPriceBookDiv = document.getElementById("rightPriceBookDiv");
                    //rightPriceBookDiv.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv.getBoundingClientRect().top) - 15 + "px";

                    var rightPriceBookDiv2 = document.getElementById("rightPriceBookDiv2");
                    //rightPriceBookDiv2.style.height = GLOBAL.getPageHeight() - (rightPriceBookDiv2.getBoundingClientRect().top) + 46 + "px";

                    var fieldSetId = document.getElementById("fieldSetId");
                    if (fieldSetId != null) {
                        if ($("#hdnLanguageId").val() == 2) {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 120 + "px";

                        }
                        else {
                            //fieldSetId.style.height = GLOBAL.getPageHeight() - (fieldSetId.getBoundingClientRect().top) + 100 + "px";
                        }
                    }
                }
            }
        }
    },

    showHidePreviewModal: function () {
        debugger
        $('#PriceBookPopUp_Preview').modal('hide');  
    },

    onPBActiveStatusChange: function (ele) {
        debugger;
        if (bPBActiveStutus_OLD != (!ele.checked)) {
            iIsEdited = 1;
        }
    },

    //To Updated the SerialNo on Page Change
    setSerialNoColumn: function (iStartRowIndex, bAppendOk) {
        //debugger;
        var iTotalRow = parseInt($("#PriceBookWebGrid_body")[0].children.length);
        for (iSerialRow = 1; iSerialRow <= iTotalRow; iSerialRow++) {
            if (iSerialRow > 15 && bAppendOk == false) {
                if (iSerialRow == iTotalRow) {
                    FGRIDCONTROL.deleteRows("PriceBookWebGrid", 16, 1);
                }
                else {
                    FGRIDCONTROL.deleteRows("PriceBookWebGrid", iSerialRow, 1);
                }
            }
            cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iSerialRow, 0);
            if (cellobj != undefined) {
                iStartRowIndex++;
                cellobj.setCellText(iStartRowIndex);
            }
        }
    },

    validateInputNumber: function (eleInput, iType, evt) {
        // 0 For Signed Integer
        // 1 For Unsigned Integer
        // 2 For Signed Decimal
        // 3 For Unsingned Decimal
        //debugger;
        var charCode = null;

        try {
            bResult = false;

            if (evt.which == 0 || evt.which == 8) {
                return (true);
            }

            charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode == 45) { // -
                if ((iType == 0 || iType == 2)
                    && eleInput.value.length == 0) { // Signed Integer, Signed Decimal
                    return (true);
                }
            }
            else if (charCode == 46) { // .
                var splitedValue = parseInt(eleInput.value.split('.')[0]);
                if ((iType == 2 || iType == 3)
                    && (eleInput.value.indexOf(".") == -1 || splitedValue == 0)) { // Signed Decimal, Unsingned Decimal
                    return (true);
                }
            }
            else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                return (true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{PRICEBOOK.validateInputNumber} " + err.message, "Exception");
        }

        return (false);
    },

    enableIsEdited: function (cellobj, event) {
        debugger;
        iIsEdited = 1;
        iRowIndex = 0;
        cell = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowIndex + 1, 26);//cellobj.parentElement.parentElement.rowIndex
        cell.setCellData("value", parseInt(iIsEdited));
        cell.setCellText(COMMON.prototype.getObjectFirstPropertyValue("" + iIsEdited));
    },

    rightPriceBookDiv2_scroll: function (ele, event) {
        OPTIONCONTROL.collapseAllPopups();
    },
    
    getResourceValue: function (sKey, GetResourceMessages) {
        // debugger;
        var value = "";
        var result = null;

        result = PRICEBOOK.findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },
    findKeyValue: function (sKey, arrKeyValue) {
        // debugger;
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    },


    OnlyNumeric: function (evt) {
        debugger;
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        else {
            return true;
        }
    },


    UploadExcelFile: function (element) {
        debugger
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        $('#SpanValidation').html("");
        // debugger
        var objExcelFile = document.getElementById("uploadBtn1").files;
        var sFileName = objExcelFile[0].name;
        if ($(element).attr('id') == "btnSheetOk" && $("#ulSheetName").find("li.highlightLi").length == "0") {
            alert(getResourceValue("SelectSheet", GetPBResourceMessages));
            return false;
        }

        var sCurExtension = [".xlsx", ".xls"];
        var fileExt = (sFileName).substring((sFileName).lastIndexOf('.')).toLowerCase();
        if (sCurExtension.indexOf(fileExt) >= 0) {
            $('#uploadFile').val(sFileName);
            if (objExcelFile != null && objExcelFile.length > 0) {
                var excel_SelectedSheet = $("#ulSheetName").find("li.highlightLi").length == "0" ? "" : $("#ulSheetName").find("li.highlightLi")[0].innerHTML.trim();
                if (excel_SelectedSheet != "") {
                    bMapFields = confirm(PRICEBOOK.getResourceValue("msgLoadMapQuestion", GetPBResourceMessages)) ? true : false;
                }
                debugger;
                var obj = {};
                obj.url = GLOBAL.getContextPath("LoadDataFromExcel", "PriceBook", "CoreMasters"),
                obj.Excel_FileName = objExcelFile[0].name;
                obj.bMapFields = bMapFields;
                obj.PriceBook = PriceBookName;

                $("#SheetNameId").find("li.highlightLi").length == "0" ? "" : $("#SheetNameId").find("li.highlightLi")[0].innerHTML.trim();
                obj.Excel_SelectedSheet = excel_SelectedSheet;
                NETWORK.uploadFile(obj,
                                    true,
                                    objExcelFile[0],
                                    "",
                                    true,
                                    "PRICEBOOK.onLoadImportData",
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd");
            }

        }
        else {
            alert(PRICEBOOK.getResourceValue("msgImportSheetFormat", GetPBResourceMessages));
            return false;
        }

    },

    SheetModalClose: function () {
        debugger
        $("#divSelectSheet").modal("hide");
        $("#ulSheetName").find(".highlightLi").removeClass("highlightLi");
    },

    onLoadImportData: function (bs, data) {
        debugger
        if (ischangeClicked) {
            if (bs == true && data[1].length > 0 && data[2].length == 0) {
                if (data[3] != undefined) {
                    PRICEBOOK.SheetModalClose();
                    // AID.BindingMappingDataToGrid(data[1], bMapFields, data[4]);
                    if (data[1].length > 0) {
                        lstSheetFields = data[1];
                        for (var irow = 0; irow < FGRIDCONTROL.getTotalRows("ImportGrid") ; irow++) {

                            cellobj = FGRIDCONTROL.getCellObject("ImportGrid", irow + 1, 2);
                            if (cellobj == undefined) {
                                return;
                            }
                            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {

                                var SelectElement = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                SelectElement.options.length = 0;
                                var option = document.createElement('option');
                                option.text = "";
                                option.value = "";
                                SelectElement.appendChild(option);
                                for (var i = 0; i < data[1].length; i++) {
                                    var option = document.createElement('option');
                                    option.text = data[1][i].Name;
                                    option.value = data[1][i].Name;
                                    SelectElement.appendChild(option);
                                }


                            }

                        }
                        for (var irow = 0; irow < data[4].length > 0 ; irow++) {
                            if (bMapFields) {
                                fcellobj = FGRIDCONTROL.getCellObject("ImportGrid", irow + 1, 1);
                                if (fcellobj == undefined) return;
                                if (fcellobj.iColumn == 1) {
                                    fcellobj.setCellData("value", data[4][irow].LocalFieldName);
                                    fcellobj.setCellText(data[4][irow].LocalFieldName);
                                }

                                cellobj = FGRIDCONTROL.getCellObject("ImportGrid", irow + 1, 2);
                                if (cellobj == undefined) return;
                                if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {

                                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                    if (element != null && data[4][irow].ExternalFieldName != null) {
                                        element.value = data[4][irow].ExternalFieldName.trim();
                                        cellobj.setCellData("value", data[4][irow].ExternalFieldName.trim());
                                        cellobj.setCellText($(element).find("option:selected").text());


                                    }

                                }

                            }
                            else {
                                cellobj = FGRIDCONTROL.getCellObject("ImportGrid", irow + 1, 2);
                                if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {
                                    cellobj.setCellText("");
                                    cellobj.setCellData("value", "");
                                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                    element.value = "";

                                }
                            }

                        }
                    }
                    bMapFields = false;
                }
                else {
                    $("#ulSheetName").html("");
                    for (var i = 0; i < data[1].length; i++) {
                        var li = '<li class="clsSheetName" style="margin-top:7px;margin-bottom:7px;cursor:pointer;">' + data[1][i].Name + '</li>';
                        $("#ulSheetName").append(li);
                    }
                    $("#divSelectSheet").modal("show");

                }
            }
            else {
                COMMON.prototype.showMessage(data[2]);
                return false;
            }
        } else {
            if (bflag == true && data != null) {
                debugger
            }
            else {
                alert("Error in importing excel data");
            }
            $("#divSelectSheet").modal("hide");
        }

    },

    hideViewPriceControls: function (e) {
        debugger;
        var selectedValue = e.value;
        if (selectedValue == "2") {
            $("#txtIncreaseDecrease").hide();
            $("#ddlIncreaseDecreaseControl").hide();
        }
        else {
            $("#txtIncreaseDecrease").show();
            $("#ddlIncreaseDecreaseControl").show();
        }
    },

    LoadViewPriceGrid: function () {
        debugger;
        $('#myPagerUPT button').remove();
        //$("#btnClear").trigger("click");
        //$('#myPager li').remove();
        result = NETWORK.executeServerMethod(
                        GLOBAL.getContextPath("LoadViewPriceGrid", "PriceBook", "CoreMasters"),
                        false,
                        null,
                        "",
                        true,
                        "PRICEBOOK.LoadViewPriceGridSuccess",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd");
    },
    LoadViewPriceGridSuccess: function (flag, html) {
        debugger;
        $('#WebGridUPT3Div').html(html);
        PRICEBOOK.btnClearForView_Click();
        //if (DepViewId > 0 || CusViewId > 0 || ProdViewId > 0 || CurrenViewId > 0 || UnitViewId > 0) {
        //    PRICEBOOK.LoadViewPriceData();
        //}

        $('#ctrlOnDateUPH2_container').hide();
    },
    //onInputChange: function () {
    //    debugger;
    //    //  iIsEdited = 1;
    //},

    //FUNCTION CALLED TO HIDE THE DROPDOWN MENU ON CLICK OF DOCUMENT
    ToggleDropDown: function (e) {
        if (!$(e.target).is(".iconCustamizeMagePage,li.lblClass, .chk, .lblDropDown")) {
            $('.ddlMenuOnLoad').hide();
            $('.ddlclsBlueColor').addClass('clsBlueColor');
            $('.ddlclsBlueColor').removeClass('ddlclsBlueColor');
        }
    },
    //FUNCTION TO IMPLEMENT THE RESPONSIVE FUNCTIONALITY ON SCREEN SIZE <= 767
    ResponsiveNew: function () {
        if ($(window).width() <= 768) {
            $('#myPager').removeClass("myPager");
            $('#myPager').addClass("myPagerSmallScreen");
            $('#PriceBookMainDiv').addClass("MainLeftRow");
            //$('#divInActive').css("margin-top", "5px");
            $('#ResultSpan').css("margin-left", "0px");
            $("#ShowFilter").click();
            $('#leftPriceBookDiv').removeClass("Form-Tabs-Container");
            $('#leftPriceBookDiv').css("padding-right", "auto");
            $('.clsLastRow').css("margin-top", "15px");
            $('.toggleDropDowndiv1').css("margin-top", "-10px");
            $('.iconCustamizeMagePage').css("margin-left", "0px");
            $('.iconCustamizeMagePage').css("margin-top", "22px");
            $('.iconCustamizepopUpPage').css("margin-left", "19px");
            $('.iconCustamizepopUpPage').css("margin-top", "0px");
            //$('#btnsDiv').css("margin-left", "-27px");
            //if ($("#hdnLanguageId").val() == 1) {
            //    $('#btnsDiv').css("float", "right");
            //}
            //else {
            //    $('#btnsDiv').css("float", "left");
            //}
            //$('#btnsDiv').css("margin-top", "10px");
            //$('#btnsDiv').css("margin-bottom", "25px");
            $('#rightPriceBookDiv2').css("margin-top", "15px");
            $('#rightPriceBookDiv').removeClass("rightPageLoadClass");
            $('#rightPriceBookDiv').removeClass("rightPageLoadClassThierd");
            $('#rightPriceBookDiv').removeClass("rightPageLoadClassFourth1");
            $('#rightPriceBookDiv').addClass("rightPageLoadClassAfter");
            $('#rightPriceBookDiv2').removeClass("rightPageLoadClass");
            $('#rightPriceBookDiv2').removeClass("rightPageLoadClassThierd");
            $('#rightPriceBookDiv2').removeClass("rightPageLoadClassFourth1");
            $('#rightPriceBookDiv2').addClass("rightPageLoadClassAfter");
            //$('.custom-file-upload').css("margin-top", "24px");
            //$('.custom-file-upload').css("height", "24px");
            $('#txtXMLLabel').css("margin-top", "2px");
            $('.rowClass').removeClass("AutoMargin");
            $('.rowClass').addClass("FixedAutoMargin");
            $('#ResultSpan').css("margin-top", "10px");
            $('#ResultSpan').css("margin-top", "0px");
            //$('.Fpanel-footer').css("margin-left", "-15px");
        }
        else {
            $('#myPager').addClass("myPager");
            $('#myPager').removeClass("myPagerSmallScreen");
            $('#ResultSpan').css("margin-left", "15px");
            //if ($("#hdnLanguageId").val() == 1) {
            //    $('#btnsDiv').css("float", "left");
            //}
            //else {
            //    $('#btnsDiv').css("float", "right");
            //}
            $('#PriceBookMainDiv').removeClass("MainLeftRow");
            if ($(window).width() <= 991) {
                //$('#divInActive').css("margin-top", "5px");
                $('.iconCustamizeMagePage').css("margin-top", "5px");
                $('.toggleDropDowndiv1').css("margin-top", "-10px");
                $('#leftPriceBookDiv').css("margin-top", "15px");
                $('#rightPriceBookDiv2').css("margin-top", "15px");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClass");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv').addClass("rightPageLoadClassFourth1");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClass");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv2').addClass("rightPageLoadClassFourth1");
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#btnFilter').css("margin-right", "17px");
                //$('.custom-file-upload').css("height", "24.5px");
                //$('#btnsDiv').css("margin-top", "-55px");
                //$('#ResultSpan').css("margin-left", "14px");
                //$('#ResultSpan').css("margin-top", "5px");
                $('.rowClass').removeClass("FixedAutoMargin");
                $('.rowClass').addClass("AutoMargin");
                //$('.Fpanel-footer').css("margin-left", "auto");
            }
            else if ($(window).width() <= 1024) {
                //$('#divInActive').css("margin-top", "-5px");
                $('.iconCustamizeMagePage').css("margin-top", "5px");
                $('#leftPriceBookDiv').css("margin-top", "15px");
                $('#rightPriceBookDiv2').css("margin-top", "15px");
                $('.toggleDropDowndiv1').css("margin-top", "-10px");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClass");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassThierd");
                $('#rightPriceBookDiv').addClass("rightPageLoadClassFourth1");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClass");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassThierd");
                $('#rightPriceBookDiv2').addClass("rightPageLoadClassFourth1");
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#btnFilter').css("margin-right", "17px");
                //$('.custom-file-upload').css("height", "24.5px");
                //$('#btnsDiv').css("margin-top", "-115px");
                //$('#ResultSpan').css("margin-left", "14px");
                //$('#ResultSpan').css("margin-top", "5px");
                $('.rowClass').removeClass("FixedAutoMargin");
                $('.rowClass').removeClass("AutoMargin");
                $('.rowClass').addClass("AutoMarginThierd");
                //$('.Fpanel-footer').css("margin-left", "auto");
            }
            else if ($(window).width() <= 1200) {
                $('#leftPriceBookDiv').css("margin-top", "0px");
                //$('#divInActive').css("margin-top", "-5px");
                $('.iconCustamizeMagePage').css("margin-top", "5px");
                $('.iconCustamizepopUpPage').css("margin-left", "19px");
                $('#leftPriceBookDiv').css("margin-top", "17px");
                $('.toggleDropDowndiv1').css("margin-top", "-10px");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassSecond");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassThierd");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassFourth1");
                $('#rightPriceBookDiv2').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassSecond");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassThierd");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassFourth1");
                $('#rightPriceBookDiv2').css("margin-top", "17px");
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#btnFilter').css("margin-right", "17px");
                //$('.custom-file-upload').css("height", "24.5px");
                //$('#btnsDiv').css("margin-top", "-75px");
                //$('#ResultSpan').css("margin-left", "14px");
                //$('#ResultSpan').css("margin-top", "5px");
                $('.rowClass').removeClass("FixedAutoMargin");
                $('.rowClass').removeClass("AutoMargin");
                $('.rowClass').addClass("AutoMarginThierd");
                //$('.Fpanel-footer').css("margin-left", "auto");
                //if ($("#hdnLanguageId").val() == 1) {
                //    $('.Fpanel-footer').css("float", "right");
                //}
                //else {
                //    $('.Fpanel-footer').css("float", "left");
                //}
            }
            else if ($(window).width() <= 1280) {
                $('#leftPriceBookDiv').css("margin-top", "0px");
                $('.toggleDropDowndiv1').css("margin-top", "-16px");
                //$('#divInActive').css("margin-top", "-5px");
                $('.icon-custamize').css("margin-top", "-5px");
                $('.icon-custamize').css("margin-left", "45px");
                $('.iconCustamizeMagePage').css("margin-left", "45px");
                $('.iconCustamizeMagePage').css("margin-top", "-5px");
                $('.iconCustamizepopUpPage').css("margin-left", "19px");
                $('.iconCustamizepopUpPage').css("margin-top", "0px");
                $('#leftPriceBookDiv').css("margin-top", "0px");
                $('#rightPriceBookDiv2').css("margin-top", "0px");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassSecond");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassThierd");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassFourth1");
                $('#rightPriceBookDiv2').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassSecond");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassThierd");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassFourth1");
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#btnFilter').css("margin-right", "17px");
                //$('.custom-file-upload').css("height", "24.5px");
                //$('#btnsDiv').css("margin-top", "-50px");
                //$('#ResultSpan').css("margin-left", "14px");
                //$('#ResultSpan').css("margin-top", "5px");
                $('.rowClass').removeClass("FixedAutoMargin");
                $('.rowClass').removeClass("AutoMargin");
                $('.rowClass').addClass("AutoMarginThierd");
                //$('.Fpanel-footer').css("margin-left", "auto");
                //if ($("#hdnLanguageId").val() == 1) {
                //    $('.Fpanel-footer').css("float", "right");
                //}
                //else {
                //    $('.Fpanel-footer').css("float", "left");
                //}
            }
            else {
                $('#leftPriceBookDiv').css("margin-top", "0px");
                //$('#divInActive').css("margin-top", "-5px");
                $('#txtXMLLabel').css("margin-top", "1px");
                //$('.custom-file-upload').css("margin-top", "0px");
                //$('.custom-file-upload').css("margin-bottom", "0px");
                //$('.custom-file-upload').css("height", "28.2px");
                //$('#btnsDiv').css("margin-top", "-27px");
                //$('#btnsDiv').css("margin-bottom", "auto");
                //$('.iconCustamizeMagePage').css("margin-left", "55px");
                $('.iconCustamizeMagePage').css("margin-top", "0px");
                $('.iconCustamizepopUpPage').css("margin-left", "19px");
                $('.iconCustamizepopUpPage').css("margin-top", "0px");
                $('#rightPriceBookDiv2').css("margin-top", "0px");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv').removeClass("rightPageLoadClassFourth1");
                $('#rightPriceBookDiv2').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassAfter");
                $('#rightPriceBookDiv2').removeClass("rightPageLoadClassFourth1");
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('.clsLastRow').css("margin-top", "30px");
                //$('.toggleDropDowndiv1').css("margin-top", "-35px");
                $('.rowClass').removeClass("FixedAutoMargin");
                $('.rowClass').addClass("AutoMargin");
                $('#ResultSpan').css("margin-top", "25px");
                //$('.Fpanel-footer').css("margin-left", "auto");
                //if ($("#hdnLanguageId").val() == 1) {
                //    $('.Fpanel-footer').css("float", "left");
                //}
                //else {
                //    $('.Fpanel-footer').css("float", "right");
                //}
            }
        }
    },
    //SAVE DATA BUTTON CLICK
    //SaveData: function () {
    //    var Abbreviation;
    //    var ProductId = 0;
    //    var Alias = '';
    //    var TagId = 0;
    //    var AccountId = 0;
    //    var CurrencyId = 0;
    //    var StartDate;
    //    var EndDate;
    //    var iUnitId = 0;
    //    iCustomizeDisplay = 0;
    //    FGRIDCONTROL.update("PriceBookWebGrid");
    //    var optioncontrolValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
    //    PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
    //    debugger;
    //    var ProductCellObj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", 1, 1);
    //    var selectedPro = isNaN(parseInt(ProductCellObj.getCellData("value"))) ? 0 : parseInt(ProductCellObj.getCellData("value"));
    //    //var selectedPro = parseInt($($("#PriceBookWebGrid_col_1-1")[0]).find("input").length > 0 ? $($("#PriceBookWebGrid_col_1-1")[0]).find("input")[0].value : ($("#PriceBookWebGrid_col_1-1")[0].dataset.value == undefined || $("#PriceBookWebGrid_col_1-1")[0].dataset.value == '' || $("#PriceBookWebGrid_col_1-1")[0].dataset.value == '0' ? 0 : $("#PriceBookWebGrid_col_1-1")[0].dataset.value));
    //    //debugger;
    //    if ($('#ResultSpan').html() == PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages)) {
    //        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages)).hide();
    //        $('#ResultSpan').css("color", "red");
    //        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages));
    //        //$('#ResultSpan').hide();
    //        ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //        return false;
    //    }
    //    else {
    //        if ($('#txtAbbreviation').val() == "") {
    //            Abbreviation = $('#PriceBook').val();
    //        }
    //        else {
    //            Abbreviation = $('#txtAbbreviation').val();
    //        }
    //        if (PriceBookText == "") {
    //            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages)).hide();

    //            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
    //            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);

    //            return false;
    //        }

    //        else if (selectedPro <= 0) {
    //            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages)).hide();
    //            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
    //            $('#ResultSpan').css("color", "red");
    //            //$('#ResultSpan').hide();
    //            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //            return false;
    //        }
    //        else {
    //            var myTableArray = [];
    //            var synMgrid = document.getElementById('PriceBookWebGrid');
    //            for (var index = 2; index < synMgrid.rows.length; index++) {
    //                //debugger
    //                var selectedRowPro = parseInt($(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].value : (synMgrid.rows[index].cells[1].dataset.value == undefined || synMgrid.rows[index].cells[1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[1].dataset.value));
    //                if (selectedRowPro > 0) {
    //                    if (parseFloat($(synMgrid.rows[index].cells[10 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[10 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[10 + 1].dataset.value == undefined || synMgrid.rows[index].cells[10 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[11 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[11 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[11 + 1].dataset.value == undefined || synMgrid.rows[index].cells[11 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[11 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[12 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[12 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[12 + 1].dataset.value == undefined || synMgrid.rows[index].cells[12 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[12 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[13 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[13 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[13 + 1].dataset.value == undefined || synMgrid.rows[index].cells[13 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[13 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[14 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[14 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[14 + 1].dataset.value == undefined || synMgrid.rows[index].cells[14 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[14 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[15 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[15 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[15 + 1].dataset.value == undefined || synMgrid.rows[index].cells[15 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[15 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[16 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[16 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[16 + 1].dataset.value == undefined || synMgrid.rows[index].cells[16 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[16 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[17 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[17 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[17 + 1].dataset.value == undefined || synMgrid.rows[index].cells[17 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[17 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[18 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[18 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[18 + 1].dataset.value == undefined || synMgrid.rows[index].cells[18 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[18 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[19 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[19 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[19 + 1].dataset.value == undefined || synMgrid.rows[index].cells[19 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[19 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[20 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[20 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[20 + 1].dataset.value == undefined || synMgrid.rows[index].cells[20 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[20 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[21 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[21 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[21 + 1].dataset.value == undefined || synMgrid.rows[index].cells[21 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[21 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[22 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[22 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[22 + 1].dataset.value == undefined || synMgrid.rows[index].cells[22 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[22 + 1].dataset.value)) ||
    //                                       parseFloat($(synMgrid.rows[index].cells[23 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[23 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[23 + 1].dataset.value == undefined || synMgrid.rows[index].cells[23 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[23 + 1].dataset.value))) {

    //                        TagId = synMgrid.rows[index].cells[2 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[2 + 1].dataset.value;
    //                        // debugger;
    //                        if (synMgrid.rows[index + 1] != undefined) {
    //                            if (parseFloat($(synMgrid.rows[index + 1].cells[10 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[10 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[10 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[10 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[10 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[11 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[11 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[11 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[11 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[11 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[12 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[12 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[12 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[12 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[12 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[13 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[13 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[13 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[13 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[13 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[14 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[14 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[14 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[14 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[14 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[15 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[15 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[15 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[15 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[15 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[16 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[16 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[16 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[16 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[16 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[17 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[17 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[17 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[17 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[17 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[18 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[18 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[18 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[18 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[18 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[19 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[19 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[19 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[19 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[19 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[20 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[20 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[20 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[20 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[20 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[21 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[21 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[21 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[21 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[21 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[22 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[22 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[22 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[22 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[22 + 1].dataset.value) ||
    //                                                                                               parseFloat($(synMgrid.rows[index + 1].cells[23 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[23 + 1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[23 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[23 + 1].dataset.value != '' ? 0 : synMgrid.rows[index + 1].cells[23 + 1].dataset.value)) {


    //                                var iRate = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[10 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[10 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[10 + 1].dataset.value);
    //                                var iVal1 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[11 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[11 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[11 + 1].dataset.value);
    //                                var iVal2 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[12 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[12 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[12 + 1].dataset.value);
    //                                var iVal3 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[13 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[13 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[13 + 1].dataset.value);
    //                                var iVal4 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[14 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[14 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[14 + 1].dataset.value);
    //                                var iVal5 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[15 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[15 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[15 + 1].dataset.value);
    //                                var iVal6 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[16 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[16 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[16 + 1].dataset.value);
    //                                var iVal7 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[17 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[17 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[17 + 1].dataset.value);
    //                                var iVal8 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[18 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[18 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[18 + 1].dataset.value);
    //                                var iVal9 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[19 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[19 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[19 + 1].dataset.value);
    //                                var iVal10 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[20 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[20 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[20 + 1].dataset.value);
    //                                var iVal11 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[21 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[21 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[21 + 1].dataset.value);
    //                                var iVal12 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[22 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[22 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[22 + 1].dataset.value);
    //                                var iVal13 = parseFloat(parseFloat($(synMgrid.rows[index + 1].cells[23 + 1]).find("input").length) > 0 ? $(synMgrid.rows[index + 1].cells[23 + 1]).find("input")[0].value : synMgrid.rows[index + 1].cells[23 + 1].dataset.value);
    //                                debugger;
    //                                var nextProductRow = parseInt($(synMgrid.rows[index + 1].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index + 1].cells[1]).find("input")[0].value : (synMgrid.rows[index + 1].cells[1].dataset.value == undefined || synMgrid.rows[index + 1].cells[1].dataset.value == '' ? 0 : synMgrid.rows[index + 1].cells[1].dataset.value));
    //                                if ((nextProductRow == undefined || nextProductRow == 0) && (iRate > 0 || iVal1 > 0 || iVal2 > 0 || iVal3 > 0 || iVal4 > 0 || iVal5 > 0 || iVal6 > 0 || iVal7 > 0 || iVal8 > 0 || iVal9 > 0 || iVal10 > 0 || iVal11 > 0 || iVal12 > 0 || iVal13 > 0)) {
    //                                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
    //                                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
    //                                    $('#ResultSpan').css("color", "red");
    //                                    //$('#ResultSpan').hide();
    //                                    ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                                    return false;
    //                                }
    //                                else {
    //                                    ProductId = parseInt($(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].value : (synMgrid.rows[index].cells[1].dataset.value == undefined || synMgrid.rows[index].cells[1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[1].dataset.value));
    //                                    Alias = $(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].dataset.salias : (synMgrid.rows[index].cells[1].dataset.salias == undefined || synMgrid.rows[index].cells[1].dataset.salias == '' ? 0 : synMgrid.rows[index].cells[1].dataset.salias);
    //                                    //ProductId = synMgrid.rows[index].cells[1].dataset.value;
    //                                    //Alias = synMgrid.rows[index].cells[1].innerHTML;
    //                                    $('#ResultSpan').html("");
    //                                    $('#ResultSpan').css("color", "green");
    //                                    $('#ResultSpan').hide();
    //                                }

    //                            }
    //                            if (synMgrid.rows[index + 1].cells[3 + 1].dataset.value != undefined || synMgrid.rows[index + 1].cells[4 + 1].dataset.value != undefined) {
    //                                if (synMgrid.rows[index + 1].cells[1].dataset.value == undefined) {
    //                                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
    //                                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
    //                                    $('#ResultSpan').css("color", "red");
    //                                    //$('#ResultSpan').hide();
    //                                    ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                                    return false;
    //                                }
    //                                else {
    //                                    ProductId = parseInt($(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].value : (synMgrid.rows[index].cells[1].dataset.value == undefined || synMgrid.rows[index].cells[1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[1].dataset.value));
    //                                    Alias = $(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].dataset.salias : (synMgrid.rows[index].cells[1].dataset.salias == undefined || synMgrid.rows[index].cells[1].dataset.salias == '' ? 0 : synMgrid.rows[index].cells[1].dataset.salias);
    //                                    //ProductId = synMgrid.rows[index].cells[1].dataset.value;
    //                                    //Alias = synMgrid.rows[index].cells[1].innerHTML;
    //                                    $('#ResultSpan').html("");
    //                                    $('#ResultSpan').css("color", "green");
    //                                    $('#ResultSpan').hide();
    //                                }
    //                            }
    //                            else {
    //                                ProductId = parseInt($(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].value : (synMgrid.rows[index].cells[1].dataset.value == undefined || synMgrid.rows[index].cells[1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[1].dataset.value));
    //                                Alias = $(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].dataset.salias : (synMgrid.rows[index].cells[1].dataset.salias == undefined || synMgrid.rows[index].cells[1].dataset.salias == '' ? 0 : synMgrid.rows[index].cells[1].dataset.salias);
    //                                //ProductId = synMgrid.rows[index].cells[1].dataset.value;
    //                                //Alias = synMgrid.rows[index].cells[1].innerHTML;
    //                                $('#ResultSpan').html("");
    //                                $('#ResultSpan').css("color", "green");
    //                                $('#ResultSpan').hide();
    //                            }
    //                        }
    //                        else {
    //                            ProductId = parseInt($(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].value : (synMgrid.rows[index].cells[1].dataset.value == undefined || synMgrid.rows[index].cells[1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[1].dataset.value));
    //                            Alias = $(synMgrid.rows[index].cells[1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[1]).find("input")[0].dataset.salias : (synMgrid.rows[index].cells[1].dataset.salias == undefined || synMgrid.rows[index].cells[1].dataset.salias == '' ? 0 : synMgrid.rows[index].cells[1].dataset.salias);
    //                            //ProductId = synMgrid.rows[index].cells[1].dataset.value;
    //                            //Alias = synMgrid.rows[index].cells[1].innerHTML;
    //                            $('#ResultSpan').html("");
    //                            $('#ResultSpan').css("color", "green");
    //                            $('#ResultSpan').hide();
    //                        }
    //                        // debugger;
    //                        if (index == 2) {
    //                            StartDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("StartingDateH") : synMgrid.rows[index].cells[3 + 1].dataset.value;
    //                            EndDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("EndingDateH") : synMgrid.rows[index].cells[4 + 1].dataset.value;
    //                        }
    //                        else {
    //                            if (synMgrid.rows[index].cells[3 + 1].dataset.value == undefined) {
    //                                if (synMgrid.rows[index].cells[3 + 1].children.length > 0 || !$("#chkDateRange").is(":checked")) {
    //                                    StartDate = DATEPICKER.getDate("PriceBookWebGrid_option_StartingDate");
    //                                    EndDate = DATEPICKER.getDate("PriceBookWebGrid_option_EndingDate");
    //                                }
    //                                else {
    //                                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBSelectStDate", GetPBResourceMessages));
    //                                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBSelectStDate", GetPBResourceMessages));
    //                                    $('#ResultSpan').css("color", "red");
    //                                    //$('#ResultSpan').hide();
    //                                    ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                                    return false;
    //                                }
    //                            }
    //                            else {
    //                                debugger;
    //                                StartDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("StartingDateH") : synMgrid.rows[index].cells[3 + 1].dataset.value;
    //                                EndDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("EndingDateH") : synMgrid.rows[index].cells[4 + 1].dataset.value;
    //                                if ((EndDate < StartDate) && EndDate > 0) {
    //                                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages));
    //                                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages));
    //                                    $('#ResultSpan').css("color", "red");
    //                                    //$('#ResultSpan').hide();
    //                                    ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                                    return false;
    //                                }
    //                                else {
    //                                    $('#ResultSpan').html("");
    //                                    $('#ResultSpan').css("color", "green");
    //                                    $('#ResultSpan').hide();
    //                                }

    //                            }
    //                        }
    //                        AccountId = synMgrid.rows[index].cells[5 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[5 + 1].dataset.value;
    //                        CurrencyId = synMgrid.rows[index].cells[6 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[6 + 1].dataset.value;
    //                        iUnitId = synMgrid.rows[index].cells[9 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[9 + 1].dataset.value;
    //                        //  debugger;
    //                        Val0 = parseInt($(synMgrid.rows[index].cells[10 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[10 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[10 + 1].dataset.value == undefined || synMgrid.rows[index].cells[10 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value));
    //                        debugger
    //                        var objsyncMdetailes = {
    //                            PriceBookId: optioncontrolValue,
    //                            PriceBookName: PriceBookText,
    //                            sAbbr: Abbreviation,
    //                            ProductId: ProductId,
    //                            Alias: Alias,
    //                            TagId: TagId,
    //                            // IsEdited: IsEdited,
    //                            // RateEdited: RateEdited,
    //                            AccountId: AccountId,
    //                            CurrencyId: CurrencyId,
    //                            UnitId: iUnitId,
    //                            StartDate: StartDate,
    //                            EndDate: EndDate,
    //                            MinQty: parseFloat($(synMgrid.rows[index].cells[7 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[7 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[7 + 1].dataset.value == undefined || synMgrid.rows[index].cells[7 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[7 + 1].dataset.value)),
    //                            MaxQty: parseFloat($(synMgrid.rows[index].cells[8 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[8 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[8 + 1].dataset.value == undefined || synMgrid.rows[index].cells[8 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[8 + 1].dataset.value)),
    //                            Val0: parseFloat($(synMgrid.rows[index].cells[10 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[10 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[10 + 1].dataset.value == undefined || synMgrid.rows[index].cells[10 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value)),                                                        // Val0 Means Rate
    //                            Val1: parseFloat($(synMgrid.rows[index].cells[11 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[11 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[11 + 1].dataset.value == undefined || synMgrid.rows[index].cells[11 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[11 + 1].dataset.value)),
    //                            Val2: parseFloat($(synMgrid.rows[index].cells[12 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[12 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[12 + 1].dataset.value == undefined || synMgrid.rows[index].cells[12 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[12 + 1].dataset.value)),
    //                            Val3: parseFloat($(synMgrid.rows[index].cells[13 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[13 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[13 + 1].dataset.value == undefined || synMgrid.rows[index].cells[13 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[13 + 1].dataset.value)),
    //                            Val4: parseFloat($(synMgrid.rows[index].cells[14 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[14 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[14 + 1].dataset.value == undefined || synMgrid.rows[index].cells[14 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[14 + 1].dataset.value)),
    //                            Val5: parseFloat($(synMgrid.rows[index].cells[15 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[15 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[15 + 1].dataset.value == undefined || synMgrid.rows[index].cells[15 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[15 + 1].dataset.value)),
    //                            Val6: parseFloat($(synMgrid.rows[index].cells[16 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[16 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[16 + 1].dataset.value == undefined || synMgrid.rows[index].cells[16 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[16 + 1].dataset.value)),
    //                            Val7: parseFloat($(synMgrid.rows[index].cells[17 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[17 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[17 + 1].dataset.value == undefined || synMgrid.rows[index].cells[17 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[17 + 1].dataset.value)),
    //                            Val8: parseFloat($(synMgrid.rows[index].cells[18 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[18 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[18 + 1].dataset.value == undefined || synMgrid.rows[index].cells[18 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[18 + 1].dataset.value)),
    //                            Val9: parseFloat($(synMgrid.rows[index].cells[19 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[19 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[19 + 1].dataset.value == undefined || synMgrid.rows[index].cells[19 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[19 + 1].dataset.value)),
    //                            Val10: parseFloat($(synMgrid.rows[index].cells[20 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[20 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[20 + 1].dataset.value == undefined || synMgrid.rows[index].cells[20 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[20 + 1].dataset.value)),
    //                            Val11: parseFloat($(synMgrid.rows[index].cells[21 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[21 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[21 + 1].dataset.value == undefined || synMgrid.rows[index].cells[21 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[21 + 1].dataset.value)),
    //                            Val12: parseFloat($(synMgrid.rows[index].cells[22 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[22 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[22 + 1].dataset.value == undefined || synMgrid.rows[index].cells[22 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[22 + 1].dataset.value)),
    //                            Val13: parseFloat($(synMgrid.rows[index].cells[23 + 1]).find("input").length > 0 ? $(synMgrid.rows[index].cells[23 + 1]).find("input")[0].value : (synMgrid.rows[index].cells[23 + 1].dataset.value == undefined || synMgrid.rows[index].cells[23 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[23 + 1].dataset.value)),
    //                            SequenceNumber: synMgrid.rows[index].cells[24 + 1].dataset.value == undefined ? 0 : parseInt(synMgrid.rows[index].cells[24 + 1].dataset.value),
    //                            IsEdited: IsDateFilterEdited == false ? synMgrid.rows[index].cells[25 + 1].dataset.value == undefined ? 0 : parseInt(synMgrid.rows[index].cells[25 + 1].dataset.value && (iIsEdited = parseInt(synMgrid.rows[index].cells[25 + 1].dataset.value))) : true,
    //                            RateEidted: synMgrid.rows[index].cells[26 + 1].dataset.value == undefined ? 0 : parseInt(synMgrid.rows[index].cells[26 + 1].dataset.value) && (IsRateEdited = parseInt(synMgrid.rows[index].cells[26 + 1].dataset.value) && (iIsEdited = parseInt(synMgrid.rows[index].cells[26 + 1].dataset.value))),
    //                            AuthStatus: synMgrid.rows[index].cells[27 + 1].dataset.value == undefined ? 0 : parseInt(synMgrid.rows[index].cells[27 + 1].dataset.value),

    //                        }
    //                        myTableArray.push(objsyncMdetailes)
    //                        //debugger;
    //                    }
    //                    else {
    //                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterRate", GetPBResourceMessages) + " In Row Number " + (index - 2) + "");
    //                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterRate", GetPBResourceMessages) + " In Row Number " + (index - 2) + "");

    //                        $('#ResultSpan').css("color", "red");
    //                        //$('#ResultSpan').hide();
    //                        ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                        return false;
    //                    }
    //                }
    //                else {

    //                }
    //            }
    //        }
    //        if ($('#InActive').is(':checked')) {
    //            var InActive = false;
    //        }
    //        else {
    //            InActive = true;
    //        }

    //        iCustomizeDisplay += 8;     //Becouse Product is always in body
    //        if ($('#chkDateRange').is(':checked')) {
    //            iCustomizeDisplay += 2;
    //        }
    //        else {
    //            iCustomizeDisplay += 1;
    //        }
    //        if ($('#chkCustomer').is(':checked')) {
    //            iCustomizeDisplay += 32;
    //        }
    //        else {
    //            iCustomizeDisplay += 0;
    //        }
    //        if ($('#chkDepartment').is(':checked')) {
    //            iCustomizeDisplay += 128;
    //        }
    //        else {
    //            iCustomizeDisplay += 0;
    //        }
    //        if ($('#chkQtyRange').is(':checked')) {
    //            iCustomizeDisplay += 512;
    //        }
    //        else {
    //            iCustomizeDisplay += 0;
    //        }
    //        if ($('#chkCurrency').is(':checked')) {
    //            iCustomizeDisplay += 2048;
    //        }
    //        else {
    //            iCustomizeDisplay += 0;
    //        }
    //        if ($('#chkUnit').is(':checked')) {
    //            iCustomizeDisplay += 8192;
    //        }
    //        else {
    //            iCustomizeDisplay += 0;
    //        }

    //        debugger;
    //        if (iIsEdited == 0) {
    //            if (IsRateEdited == 0 || IsRateEdited == undefined) {
    //                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgThereAreNoRecords", GetPBResourceMessages));
    //                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgThereAreNoRecords", GetPBResourceMessages));
    //                $('#ResultSpan').css("color", "red");
    //                $('#ResultSpan').hide();
    //                ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                return false;
    //            }
    //        }
    //        // debugger;
    //        var objPriceBookHeader = {
    //            PriceBookId: OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH),
    //            PriceBookName: OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH),
    //            sAbbr: Abbreviation,
    //            Active: InActive,
    //            CustomizeDisplay: iCustomizeDisplay,
    //            PBDetails: myTableArray
    //        }
    //        debugger;
    //        for (var i = 0; i < objPriceBookHeader.PBDetails.length; i++) {
    //            if (objPriceBookHeader.PBDetails[i].MinQty > objPriceBookHeader.PBDetails[i].MaxQty) {
    //                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgUPQtyRangeFU", GetPBResourceMessages));
    //                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgUPQtyRangeFU", GetPBResourceMessages));
    //                $('#ResultSpan').css("color", "red");
    //                //$('#ResultSpan').hide();
    //                ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
    //                return false;
    //            }
    //        }
    //        debugger;
    //        result = NETWORK.executeServerMethod(
    //                    GLOBAL.getContextPath("SaveData", "PriceBook", "CoreMasters"),
    //                    true,
    //                    { objPriceBookHeader: objPriceBookHeader },
    //                    "",
    //                    true,
    //                    "PRICEBOOK.SaveDataSuccess",
    //                    "GLOBAL.LoadingStart",
    //                    "GLOBAL.LoadingEnd");
    //    }


    //},


    //SAVE DATA BUTTON CLICK
    SaveData: function () {
        //debugger

        var Abbreviation;
        var TagId = 0;
        var StartDate;
        var EndDate;
        iCustomizeDisplay = 0;
        FGRIDCONTROL.update("PriceBookWebGrid");
        var optioncontrolValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        debugger;
        var ProductCellObj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", 1, 1);
        var selectedPro = isNaN(parseInt(ProductCellObj.getCellData("value"))) ? 0 : parseInt(ProductCellObj.getCellData("value"));
        if ($('#ResultSpan').html() == PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages)) {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages)).hide();
            $('#ResultSpan').css("color", "red");
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages));
            return false;
        }
        else {
            if ($('#txtAbbreviation').val() == "") {
                Abbreviation = $('#PriceBook').val();
            }
            else {
                Abbreviation = $('#txtAbbreviation').val();
            }
            if (PriceBookText == "") {
                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages)).hide();
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
                return false;
            }
            else if (selectedPro <= 0) {
                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages)).hide();
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
                $('#ResultSpan').css("color", "red");
                return false;
            }
            else {
                // debugger;
                if (iIsEdited == 0 && TotalTempArray == null && TotalTempArray.length == 0) {
                    if (IsRateEdited == 0 || IsRateEdited == undefined) {
                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgThereAreNoRecords", GetPBResourceMessages));
                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgThereAreNoRecords", GetPBResourceMessages));
                        $('#ResultSpan').css("color", "red");
                        $('#ResultSpan').hide();
                        return false;
                    }
                }
                var myTableArray = [];
                var synMgrid = document.getElementById('PriceBookWebGrid');
                for (var index = 3; index < synMgrid.rows.length; index++) {
                    var iPBProductId = parseInt(synMgrid.rows[index].cells[1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[1].dataset.value);
                    var sPBAlias = parseInt(synMgrid.rows[index].cells[1].dataset.salias == undefined ? 0 : synMgrid.rows[index].cells[1].dataset.salias);
                    var iPBTagId = parseInt(synMgrid.rows[index].cells[2 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[2 + 1].dataset.value);
                    var iPBStartDate = parseInt(synMgrid.rows[index].cells[3 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[3 + 1].dataset.value);
                    var iPBEndDate = parseInt(synMgrid.rows[index].cells[4 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[4 + 1].dataset.value);
                    var iPBAccountId = parseInt(synMgrid.rows[index].cells[5 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[5 + 1].dataset.value);
                    var iPBCurrencyId = parseInt(synMgrid.rows[index].cells[6 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[6 + 1].dataset.value);
                    var iPBMinQty = parseFloat(synMgrid.rows[index].cells[7 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[7 + 1].dataset.value);
                    var iPBMaxQty = parseFloat(synMgrid.rows[index].cells[8 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[8 + 1].dataset.value);
                    var iPBUnitId = parseInt(synMgrid.rows[index].cells[9 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[9 + 1].dataset.value);
                    var iPBRate = parseFloat(synMgrid.rows[index].cells[10 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value);
                    var iPBVal1 = parseFloat(synMgrid.rows[index].cells[11 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[11 + 1].dataset.value);
                    var iPBVal2 = parseFloat(synMgrid.rows[index].cells[12 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[12 + 1].dataset.value);
                    var iPBVal3 = parseFloat(synMgrid.rows[index].cells[13 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[13 + 1].dataset.value);
                    var iPBVal4 = parseFloat(synMgrid.rows[index].cells[14 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[14 + 1].dataset.value);
                    var iPBVal5 = parseFloat(synMgrid.rows[index].cells[15 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[15 + 1].dataset.value);
                    var iPBVal6 = parseFloat(synMgrid.rows[index].cells[16 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[16 + 1].dataset.value);
                    var iPBVal7 = parseFloat(synMgrid.rows[index].cells[17 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[17 + 1].dataset.value);
                    var iPBVal8 = parseFloat(synMgrid.rows[index].cells[18 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[18 + 1].dataset.value);
                    var iPBVal9 = parseFloat(synMgrid.rows[index].cells[19 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[19 + 1].dataset.value);
                    var iPBVal10 = parseFloat(synMgrid.rows[index].cells[20 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[20 + 1].dataset.value);
                    var iPBVal11 = parseFloat(synMgrid.rows[index].cells[21 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[21 + 1].dataset.value);
                    var iPBVal12 = parseFloat(synMgrid.rows[index].cells[22 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[22 + 1].dataset.value);
                    var iPBVal13 = parseFloat(synMgrid.rows[index].cells[23 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[23 + 1].dataset.value);
                    var iPBSequenceNumber = parseInt(synMgrid.rows[index].cells[24 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[24 + 1].dataset.value);
                    var iPBIsEdited = parseInt(synMgrid.rows[index].cells[25 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[25 + 1].dataset.value);
                    var iPBRateEidted = parseInt(synMgrid.rows[index].cells[26 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[26 + 1].dataset.value);
                    var iPBAuthStatus = parseInt(synMgrid.rows[index].cells[27 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[27 + 1].dataset.value);
                    var iPBLocationId = parseInt(synMgrid.rows[index].cells[28 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[28 + 1].dataset.value);

                    if (iPBProductId > 0) {
                        if (iPBRate > 0 || iPBVal1 > 0 || iPBVal2 > 0 || iPBVal3 > 0 || iPBVal4 > 0 || iPBVal5 > 0 || iPBVal6 > 0 || iPBVal7 > 0 || iPBVal8 > 0 || iPBVal9 > 0 || iPBVal10 > 0 || iPBVal11 > 0 || iPBVal12 > 0 || iPBVal13 > 0) {
                            if (synMgrid.rows[index + 1] != undefined) {
                                if (iPBRate > 0 || iPBVal1 > 0 || iPBVal2 > 0 || iPBVal3 > 0 || iPBVal4 > 0 || iPBVal5 > 0 || iPBVal6 > 0 || iPBVal7 > 0 || iPBVal8 > 0 || iPBVal9 > 0 || iPBVal10 > 0 || iPBVal11 > 0 || iPBVal12 > 0 || iPBVal13 > 0) {
                                    debugger;
                                    var iPB_NextRow_ProductId = parseInt(synMgrid.rows[index + 1].cells[1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[1].dataset.value);
                                    var iPB_NextRow_Rate = parseFloat(synMgrid.rows[index + 1].cells[10 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[10 + 1].dataset.value);
                                    var iPB_NextRow_Val1 = parseFloat(synMgrid.rows[index + 1].cells[11 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[11 + 1].dataset.value);
                                    var iPB_NextRow_Val2 = parseFloat(synMgrid.rows[index + 1].cells[12 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[12 + 1].dataset.value);
                                    var iPB_NextRow_Val3 = parseFloat(synMgrid.rows[index + 1].cells[13 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[13 + 1].dataset.value);
                                    var iPB_NextRow_Val4 = parseFloat(synMgrid.rows[index + 1].cells[14 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[14 + 1].dataset.value);
                                    var iPB_NextRow_Val5 = parseFloat(synMgrid.rows[index + 1].cells[15 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[15 + 1].dataset.value);
                                    var iPB_NextRow_Val6 = parseFloat(synMgrid.rows[index + 1].cells[16 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[16 + 1].dataset.value);
                                    var iPB_NextRow_Val7 = parseFloat(synMgrid.rows[index + 1].cells[17 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[17 + 1].dataset.value);
                                    var iPB_NextRow_Val8 = parseFloat(synMgrid.rows[index + 1].cells[18 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[18 + 1].dataset.value);
                                    var iPB_NextRow_Val9 = parseFloat(synMgrid.rows[index + 1].cells[19 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[19 + 1].dataset.value);
                                    var iPB_NextRow_Val10 = parseFloat(synMgrid.rows[index + 1].cells[20 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[20 + 1].dataset.value);
                                    var iPB_NextRow_Val11 = parseFloat(synMgrid.rows[index + 1].cells[21 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[21 + 1].dataset.value);
                                    var iPB_NextRow_Val12 = parseFloat(synMgrid.rows[index + 1].cells[22 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[22 + 1].dataset.value);
                                    var iPB_NextRow_Val13 = parseInt(synMgrid.rows[index + 1].cells[23 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index + 1].cells[23 + 1].dataset.value);

                                    if (iPB_NextRow_ProductId == 0 && (iPB_NextRow_Rate > 0 || iPB_NextRow_Val1 > 0 || iPB_NextRow_Val2 > 0 || iPB_NextRow_Val3 > 0 || iPB_NextRow_Val4 > 0 || iPB_NextRow_Val5 > 0 || iPB_NextRow_Val6 > 0 || iPB_NextRow_Val7 > 0 || iPB_NextRow_Val8 > 0 || iPB_NextRow_Val9 > 0 || iPB_NextRow_Val10 > 0 || iPB_NextRow_Val11 > 0 || iPB_NextRow_Val12 > 0 || iPB_NextRow_Val13 > 0)) {
                                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
                                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
                                        $('#ResultSpan').css("color", "red");
                                        return false;
                                    }
                                    else {
                                        $('#ResultSpan').html("");
                                        $('#ResultSpan').css("color", "green");
                                        $('#ResultSpan').hide();
                                    }
                                }
                            }
                            if (index == 2) {
                                StartDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("StartingDateH") : iPBStartDate;
                                EndDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("EndingDateH") : iPBEndDate;
                            }
                            else {
                                if (synMgrid.rows[index].cells[3 + 1].dataset.value == undefined) {
                                    if (synMgrid.rows[index].cells[3 + 1].children.length > 0 || !$("#chkDateRange").is(":checked")) {
                                        StartDate = DATEPICKER.getDate("PriceBookWebGrid_option_StartingDate");
                                        EndDate = DATEPICKER.getDate("PriceBookWebGrid_option_EndingDate");
                                    }
                                    else {
                                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBSelectStDate", GetPBResourceMessages));
                                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBSelectStDate", GetPBResourceMessages));
                                        $('#ResultSpan').css("color", "red");
                                        return false;
                                    }
                                }
                                else {
                                    StartDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("StartingDateH") : iPBStartDate;
                                    EndDate = !$("#chkDateRange").is(":checked") ? DATEPICKER.getDate("EndingDateH") : iPBEndDate;
                                    if ((EndDate < StartDate) && EndDate > 0) {
                                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages));
                                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBDateRange", GetPBResourceMessages));
                                        $('#ResultSpan').css("color", "red");
                                        return false;
                                    }
                                    else {
                                        $('#ResultSpan').html("");
                                        $('#ResultSpan').css("color", "green");
                                        $('#ResultSpan').hide();
                                    }
                                }
                            }
                            var objsyncMdetailes = {
                                PriceBookId: optioncontrolValue,
                                PriceBookName: PriceBookText,
                                sAbbr: Abbreviation,
                                ProductId: iPBProductId,
                                Alias: sPBAlias,
                                TagId: iPBTagId,
                                AccountId: iPBAccountId,
                                CurrencyId: iPBCurrencyId,
                                UnitId: iPBUnitId,
                                StartDate: StartDate,
                                EndDate: EndDate,
                                MinQty: iPBMinQty,
                                MaxQty: iPBMaxQty,
                                Val0: iPBRate,
                                Val1: iPBVal1,
                                Val2: iPBVal2,
                                Val3: iPBVal3,
                                Val4: iPBVal4,
                                Val5: iPBVal5,
                                Val6: iPBVal6,
                                Val7: iPBVal7,
                                Val8: iPBVal8,
                                Val9: iPBVal9,
                                Val10: iPBVal10,
                                Val11: iPBVal11,
                                Val12: iPBVal12,
                                Val13: iPBVal13,
                                SequenceNumber: iPBSequenceNumber,
                                IsEdited: IsDateFilterEdited == false ? iPBIsEdited : true,
                                RateEidted: iPBRateEidted,
                                AuthStatus: iPBAuthStatus,
                                LocatoinId: iPBLocationId,
                            }
                            myTableArray.push(objsyncMdetailes)
                        }
                        else {
                            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterRate", GetPBResourceMessages) + " In Row Number " + (index - 2) + "");
                            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterRate", GetPBResourceMessages) + " In Row Number " + (index - 2) + "");
                            $('#ResultSpan').css("color", "red");
                            return false;
                        }
                    }
                }
            }
            if ($('#InActive').is(':checked')) {
                var InActive = false;
            }
            else {
                InActive = true;
            }
            iCustomizeDisplay += 8;     //Becouse Product is always in body
            if ($('#chkDateRange').is(':checked')) {
                iCustomizeDisplay += 2;
            }
            else {
                iCustomizeDisplay += 1;
            }
            if ($('#chkCustomer').is(':checked')) {
                iCustomizeDisplay += 32;
            }
            else {
                iCustomizeDisplay += 0;
            }
            if ($('#chkDepartment').is(':checked')) {
                iCustomizeDisplay += 128;
            }
            else {
                iCustomizeDisplay += 0;
            }
            if ($('#chkQtyRange').is(':checked')) {
                iCustomizeDisplay += 512;
            }
            else {
                iCustomizeDisplay += 0;
            }
            if ($('#chkCurrency').is(':checked')) {
                iCustomizeDisplay += 2048;
            }
            else {
                iCustomizeDisplay += 0;
            }
            if ($('#chkUnit').is(':checked')) {
                iCustomizeDisplay += 8192;
            }
            else {
                iCustomizeDisplay += 0;
            }
            var objPriceBookHeader;
            if (TotalTempArray != null && TotalTempArray.length > 0 && myTableArray == null) {
                objPriceBookHeader = {
                    PriceBookId: OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH),
                    PriceBookName: OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH),
                    sAbbr: Abbreviation,
                    Active: InActive,
                    CustomizeDisplay: iCustomizeDisplay,
                    PBDetails: TotalTempArray,
                }

            }
            else if (TotalTempArray != null && TotalTempArray.length > 0 && myTableArray != null && myTableArray.length > 0) {
                for (var i = 0; i < TotalTempArray.length; i++) {
                    myTableArray.push(TotalTempArray[i]);
                }
                objPriceBookHeader = {
                    PriceBookId: OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH),
                    PriceBookName: OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH),
                    sAbbr: Abbreviation,
                    Active: InActive,
                    CustomizeDisplay: iCustomizeDisplay,
                    PBDetails: myTableArray,
                }
            }
            else {
                objPriceBookHeader = {
                    PriceBookId: OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH),
                    PriceBookName: OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH),
                    sAbbr: Abbreviation,
                    Active: InActive,
                    CustomizeDisplay: iCustomizeDisplay,
                    PBDetails: myTableArray,
                }

            }
            for (var i = 0; i < objPriceBookHeader.PBDetails.length; i++) {
                if (objPriceBookHeader.PBDetails[i].MinQty > objPriceBookHeader.PBDetails[i].MaxQty) {
                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgUPQtyRangeFU", GetPBResourceMessages));
                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgUPQtyRangeFU", GetPBResourceMessages));
                    $('#ResultSpan').css("color", "red");
                    return false;
                }
            }
            debugger;
            result = NETWORK.executeServerMethod(
                        GLOBAL.getContextPath("SaveData", "PriceBook", "CoreMasters"),
                        true,
                        { objPriceBookHeader: objPriceBookHeader },
                        "",
                        true,
                        "PRICEBOOK.SaveDataSuccess",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd");
        }
    },

    //SAVE DATA BUTTON CLICK SUCCESS
    SaveDataSuccess: function (flag, data) {
        var str = data;
        var temp = new Array();
        temp = str.split(",");
        debugger;
        $('#WebGrid tr').removeClass("PriceBookSelectedRowColor");
        if ((temp[0] == 0 || temp[0] == "0") && temp[1] == "") {
            IsRowEdited = 0;
            IsRateEdited = 0;
            PRICEBOOK.btnClear_Click();
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBSuccess", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBSuccess", GetPBResourceMessages));
            $('#ResultSpan').css("color", "#004d00");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
        else if ((temp[0] == 0 || temp[0] == "0") && temp[1] != "") {
            $('#ResultSpan').html(temp[1]);
            COMMON.prototype.showMessage(temp[1]);
            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
        else if ((temp[0] != 0 || temp[0] != "0") && temp[1] != "") {
            if (temp[1].indexOf("duplicate") >= 0) {
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBDuplicateData", GetPBResourceMessages));
            }
            else {
                COMMON.prototype.showMessage(temp[1]);
            }
            //PRICEBOOK.btnClear_Click();
            //$('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBDuplicateData", GetPBResourceMessages));
            //$('#ResultSpan').html(temp[1]);
            //$('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
        else {
            IsRowEdited = 0;
            IsRateEdited = 0;
            PRICEBOOK.btnClear_Click();
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBUpdate", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBUpdate", GetPBResourceMessages));
            $('#ResultSpan').css("color", "#004d00");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
        TotalTempArray = [];
    },
    //DELETE BUTTON CLICK
    DeleteData: function () {
        debugger;
        var Abbreviation;
        var iUnitId = 0;
        var iTotalPriceBookRows = 0;
        PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        PriceBookValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        if ($('#txtAbbreviation').val() == "") {
            Abbreviation = $('#PriceBook').val();
        }
        else {
            Abbreviation = $('#txtAbbreviation').val();
        }
        if (PriceBookValue == "" || PriceBookValue == "0" || PriceBookValue == null) {

            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgSelectPriceBook", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgSelectPriceBook", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        var optioncontrolValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);

        var IsTotalPriceBook = $('#PriceBookWebGrid> tbody> tr.PriceBookSelectedRowColor').length;
        if (IsTotalPriceBook == 1) {
            if (confirm(PRICEBOOK.getResourceValue("msgPBDelSelectedRow", GetPBResourceMessages))) {
                var myTableArrayForDelete = [];
                var synMgrid = document.getElementById('PriceBookWebGrid');
                if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
                    var rowIndex = $('#PriceBookWebGrid> tbody> tr.PriceBookSelectedRowColor')[0].rowIndex;
                    ProductId = synMgrid.rows[rowIndex].cells[1].dataset.value;
                    Alias = synMgrid.rows[rowIndex].cells[1].innerHTML;
                    TagId = synMgrid.rows[rowIndex].cells[2 + 1].dataset.value == undefined ? 0 : synMgrid.rows[rowIndex].cells[2 + 1].dataset.value;
                    StartDate = synMgrid.rows[rowIndex].cells[3 + 1].dataset.value == undefined ? DATEPICKER.getDate("StartingDateH") : synMgrid.rows[rowIndex].cells[3 + 1].dataset.value;
                    EndDate = synMgrid.rows[rowIndex].cells[4 + 1].dataset.value == undefined ? DATEPICKER.getDate("EndingDateH") : synMgrid.rows[rowIndex].cells[4 + 1].dataset.value;
                    AccountId = synMgrid.rows[rowIndex].cells[5 + 1].dataset.value == undefined ? 0 : synMgrid.rows[rowIndex].cells[5 + 1].dataset.value;
                    CurrencyId = synMgrid.rows[rowIndex].cells[6 + 1].dataset.value == undefined ? 0 : synMgrid.rows[rowIndex].cells[6 + 1].dataset.value;
                    iUnitId = synMgrid.rows[rowIndex].cells[9 + 1].dataset.value == undefined ? 0 : synMgrid.rows[rowIndex].cells[9 + 1].dataset.value;

                    var obj = {
                        PriceBookId: optioncontrolValue,
                        PriceBookName: PriceBookText,
                        sAbbr: Abbreviation,
                        ProductId: ProductId,
                        Alias: Alias,
                        TagId: TagId,
                        AccountId: AccountId,
                        CurrencyId: CurrencyId,
                        UnitId: iUnitId,
                        StartDate: StartDate,
                        EndDate: EndDate,
                        MinQty: synMgrid.rows[rowIndex].cells[7 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[7 + 1].dataset.value,
                        MaxQty: synMgrid.rows[rowIndex].cells[8 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[8 + 1].dataset.value,
                        Val0: synMgrid.rows[rowIndex].cells[10 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[10 + 1].dataset.value,                                                        // Val0 Means Rate
                        Val1: synMgrid.rows[rowIndex].cells[11 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[11 + 1].dataset.value,
                        Val2: synMgrid.rows[rowIndex].cells[12 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[12 + 1].dataset.value,
                        Val3: synMgrid.rows[rowIndex].cells[13 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[13 + 1].dataset.value,
                        Val4: synMgrid.rows[rowIndex].cells[14 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[14 + 1].dataset.value,
                        Val5: synMgrid.rows[rowIndex].cells[15 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[15 + 1].dataset.value,
                        Val6: synMgrid.rows[rowIndex].cells[16 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[16 + 1].dataset.value,
                        Val7: synMgrid.rows[rowIndex].cells[17 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[17 + 1].dataset.value,
                        Val8: synMgrid.rows[rowIndex].cells[18 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[18 + 1].dataset.value,
                        Val9: synMgrid.rows[rowIndex].cells[19 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[19 + 1].dataset.value,
                        Val10: synMgrid.rows[rowIndex].cells[20 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[20 + 1].dataset.value,
                        Val11: synMgrid.rows[rowIndex].cells[21 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[21 + 1].dataset.value,
                        Val12: synMgrid.rows[rowIndex].cells[22 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[22 + 1].dataset.value,
                        Val13: synMgrid.rows[rowIndex].cells[23 + 1].dataset.value == '' ? 0 : synMgrid.rows[rowIndex].cells[23 + 1].dataset.value,
                        //SequenceNumber: Tr.cells[24+1].dataset.value,
                    }
                    if ((obj.ProductId != "" && obj.Val0 != "")) {
                        if (obj.ProductId != undefined && obj.Val0 != undefined) {
                            myTableArrayForDelete.push(obj)
                        }
                    }
                }
                var PriceBookId = (OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH));
                var PBDetails = { myTableArrayForDelete: myTableArrayForDelete }
                bTotalPBDeleted = false;
                selectedRow = parseInt(parseInt($('#PriceBookWebGrid> tbody> tr.PriceBookSelectedRowColor')[0].rowIndex) - 2);
                FGRIDCONTROL.update("PriceBookWebGrid");
                FGRIDCONTROL.deleteRows("PriceBookWebGrid", selectedRow, 1);
                result = NETWORK.executeServerMethod(
                        GLOBAL.getContextPath("DeletePriceBook", "PriceBook", "CoreMasters"),
                        true,
                        { PBDetails: myTableArrayForDelete, PriceBookId: PriceBookId, bTotalPBDeleted: bTotalPBDeleted },
                        "JSON",
                        true,
                        "PRICEBOOK.DeletePriceBookSuccess",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd");
            }
        }
        else {

            var myTableArrayForDelete = [];
            var synMgrid = document.getElementById('PriceBookWebGrid');
            for (var index = 2; index < synMgrid.rows.length; index++) {
                ProductId = synMgrid.rows[index].cells[1].dataset.value;
                Alias = synMgrid.rows[index].cells[1].innerHTML;
                TagId = synMgrid.rows[index].cells[2 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[2 + 1].dataset.value;
                StartDate = synMgrid.rows[index].cells[3 + 1].dataset.value == undefined ? DATEPICKER.getDate("StartingDateH") : synMgrid.rows[index].cells[3 + 1].dataset.value;
                EndDate = synMgrid.rows[index].cells[4 + 1].dataset.value == undefined ? DATEPICKER.getDate("EndingDateH") : synMgrid.rows[index].cells[4 + 1].dataset.value;
                AccountId = synMgrid.rows[index].cells[5 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[5 + 1].dataset.value;
                CurrencyId = synMgrid.rows[index].cells[6 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[6 + 1].dataset.value;
                iUnitId = synMgrid.rows[index].cells[9 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[9 + 1].dataset.value;
                var obj = {
                    PriceBookId: optioncontrolValue,
                    PriceBookName: PriceBookText,
                    sAbbr: Abbreviation,
                    ProductId: ProductId,
                    Alias: Alias,
                    TagId: TagId,
                    AccountId: AccountId,
                    CurrencyId: CurrencyId,
                    UnitId: iUnitId,
                    StartDate: StartDate,
                    EndDate: EndDate,
                    MinQty: synMgrid.rows[index].cells[7 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[7 + 1].dataset.value,
                    MaxQty: synMgrid.rows[index].cells[8 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[8 + 1].dataset.value,
                    Val0: synMgrid.rows[index].cells[10 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value,                                                        // Val0 Means Rate
                    Val1: synMgrid.rows[index].cells[11 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[11 + 1].dataset.value,
                    Val2: synMgrid.rows[index].cells[12 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[12 + 1].dataset.value,
                    Val3: synMgrid.rows[index].cells[13 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[13 + 1].dataset.value,
                    Val4: synMgrid.rows[index].cells[14 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[14 + 1].dataset.value,
                    Val5: synMgrid.rows[index].cells[15 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[15 + 1].dataset.value,
                    Val6: synMgrid.rows[index].cells[16 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[16 + 1].dataset.value,
                    Val7: synMgrid.rows[index].cells[17 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[17 + 1].dataset.value,
                    Val8: synMgrid.rows[index].cells[18 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[18 + 1].dataset.value,
                    Val9: synMgrid.rows[index].cells[19 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[19 + 1].dataset.value,
                    Val10: synMgrid.rows[index].cells[20 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[20 + 1].dataset.value,
                    Val11: synMgrid.rows[index].cells[21 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[21 + 1].dataset.value,
                    Val12: synMgrid.rows[index].cells[22 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[22 + 1].dataset.value,
                    Val13: synMgrid.rows[index].cells[23 + 1].dataset.value == '' ? 0 : synMgrid.rows[index].cells[23 + 1].dataset.value,
                    //SequenceNumber: Tr.cells[24+1].dataset.value,
                }
                if ((obj.ProductId != "" && obj.Val0 != "")) {
                    if (obj.ProductId != undefined && obj.Val0 != undefined) {
                        myTableArrayForDelete.push(obj)
                    }
                }

                var PriceBookId = (OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH));
                var PBDetails = { myTableArrayForDelete: myTableArrayForDelete }
                bTotalPBDeleted = true;
            }

            if ($("#isRowsHighlighted").val() == 1 && myTableArrayForDelete.length == $("#iTotalRecordsPerPage").val()) {
                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgMandatoryRowPB", GetPBResourceMessages));
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgMandatoryRowPB", GetPBResourceMessages));
                $('#ResultSpan').css("color", "red");
                //$('#ResultSpan').hide();
                ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
            else {
                if (confirm(PRICEBOOK.getResourceValue("msgDelTotalPB", GetPBResourceMessages))) {
                    result = NETWORK.executeServerMethod(
                    GLOBAL.getContextPath("DeletePriceBook", "PriceBook", "CoreMasters"),
                    true,
                    { PBDetails: myTableArrayForDelete, PriceBookId: PriceBookId, bTotalPBDeleted: bTotalPBDeleted },
                    "JSON",
                    true,
                    "PRICEBOOK.DeletePriceBookSuccess",
                    "GLOBAL.LoadingStart",
                    "GLOBAL.LoadingEnd");
                }
            }
        }
    },

    //DELETE BUTTON CLICK SUCCESS
    DeletePriceBookSuccess: function (flag, data) {
        if (data == true) {
            PRICEBOOK.btnClear_Click();
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPbDelSuccess", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPbDelSuccess", GetPBResourceMessages));
            $('#ResultSpan').css("color", "green");
            if (iAlertId > 0) {
                LAYOUT.UpdateAlerts();
            }
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
        else {
            //PRICEBOOK.LoadData();
            PriceBookGridData[0].splice(selectedRow - 1, 1);
            $('#PriceBookWebGrid> tbody> tr').removeClass("PriceBookSelectedRowColor");
            //$('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPbDelSuccess", GetPBResourceMessages));
            //$('#ResultSpan').css("color", "green");
            ////$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
    },

    //OK BUTTON CLICK INSIDE UPDATE PRICEBOOK PAGE
    UpdatePriceList: function () {
        var arr = []
        var PriceBookType = $('#BasisOn').val();
        var AppendOrOverride;
        var Action = 0;
        var ActionType;
        var PriceBId;
        var PriceBName;
        var ProdId;
        var DepId;
        var CusId;
        var CurrenId;
        var UnId;
        var Sdte;
        var Edt;
        var Mqty;
        var Maqty;
        var Rate;
        if ($('#BasisOn').val() == "0") {
            $("#btnOkForUpdate").removeAttr("data-dismiss");
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgBasisOn", GetPBResourceMessages));
            return false;
        }
        else {
            $('#ResultSpan2').html("");
            $('#btnOkForUpdate').click(function () {
                $("#btnOkForUpdate").attr("data-dismiss", "modal");
            })
        }
        if ($('#chk1').is(":checked")) {
            PriceBId = OPTIONCONTROL.getControlValue(ctrlPriceBookUPH);
            PriceBName = OPTIONCONTROL.getControlText(ctrlPriceBookUPH);
        }
        else {
            PriceBId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
            PriceBName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        }
        if ($('#chk2').is(":checked")) {
            ProdId = OPTIONCONTROL.getControlValue(ctrlOptionProUPH);
        }
        else {
            ProdId = 0;
        }
        if ($('#chk3').is(":checked")) {
            DepId = OPTIONCONTROL.getControlValue(ctrlOptionDeptUPH);
        }
        else {
            DepId = 0;
        }
        if ($('#chk4').is(":checked")) {
            CusId = OPTIONCONTROL.getControlValue(ctrlOptionCustUPH);
        }
        else {
            CusId = 0;
        }
        if ($('#chk5').is(":checked")) {
            CurrenId = OPTIONCONTROL.getControlValue(ctrlOptionCurrUPH);
        }
        else {
            CurrenId = 0;
        }
        if ($('#chk6').is(":checked")) {
            UnId = OPTIONCONTROL.getControlValue(ctrlOptionUnitUPH);
        }
        else {
            UnId = 0;
        }
        if ($('#chk7').is(":checked")) {
            Sdte = DATEPICKER.getDate(ctrlStartingDateUPH);
            Edt = DATEPICKER.getDate(ctrlEndingDateUPH);
        }
        else {
            Sdte = 0;
            Edt = 0;
        }
        if ($('#chk8').is(":checked")) {
            Mqty = $('#MinQtyUPH').val();
            Maqty = $('#MaxQtyUPH').val();
        }
        else {
            Mqty = 0;
            Maqty = 0;
        }
        if ($('#rdoAppend1').is(':checked')) {
            AppendOrOverride = true;
        }
        else {
            AppendOrOverride = false;
        }
        var selectedAction = $('#ddlIncreaseDecrease').val();
        switch (selectedAction) {
            case "0":
                Action = 1;
                break;
            case "1":
                Action = 2;
                break;
            case "2":
                Action = 3;
                break;
            default:
                Action = 0;
                break;
        }
        if ($('#ddlIncreaseDecreaseControl').val() == 0) {
            ActionType = true;
        }
        else if ($('#ddlIncreaseDecreaseControl').val() == 1) {
            ActionType = false;
        }
        else {
            ActionType = null;
        }
        if (Action > 0) {
            Rate = $('#txtIncreaseDecrease').val();
            $("#btnOkForUpdate").attr("data-dismiss", "modal");
            $('#ResultSpan2').html("");
        }
        else {
            $("#btnOkForUpdate").removeAttr("data-dismiss");
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgAction", GetPBResourceMessages));
            return false;
        }

        var PriceBIdN;
        var PriceBNameN;
        var SdteN;
        var EdtN;
        var MqtyN;
        var MaqtyN;
        var ProdIdN;
        var DepIdN;
        var CusIdN;
        var CurrenIdN;
        var UnIdN;
        var RateN = 0;

        if ($('#chk1').is(":checked")) {
            PriceBIdN = OPTIONCONTROL.getControlValue(ctrlPriceBookUPH);
            PriceBNameN = OPTIONCONTROL.getControlText(ctrlPriceBookUPH);
        }
        else {
            PriceBIdN = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
            PriceBNameN = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        }
        if ($('#ctrlStartingDateUP').val() == "") {
            SdteN = -1;
        }
        else {
            SdteN = DATEPICKER.getDate(ctrlStartingDateUP);
        }
        if ($('#ctrlEndingDateUP').val() == "") {
            EdtN = -1;
        }
        else {
            EdtN = DATEPICKER.getDate(ctrlEndingDateUP);
        }
        if ($('#MinQtyUP').val() == "") {
            MqtyN = -1;
        }
        else {
            MqtyN = $('#MinQtyUP').val();
        }
        if ($('#MaxQtyUP').val() == "") {
            MaqtyN = -1;
        }
        else {
            MaqtyN = $('#MaxQtyUP').val();
        }
        if ($('#ctrlOptionProUP').val() == "") {
            ProdIdN = -1;
        }
        else {
            ProdIdN = OPTIONCONTROL.getControlValue(ctrlOptionProUP);
        }
        if ($('#ctrlOptionDeptUP').val() == "") {
            DepIdN = -1;
        }
        else {
            DepIdN = OPTIONCONTROL.getControlValue(ctrlOptionDeptUP);
        }
        if ($('#ctrlOptionCustUP').val() == "") {
            CusIdN = -1;
        }
        else {
            CusIdN = OPTIONCONTROL.getControlValue(ctrlOptionCustUP);
        }
        if ($('#ctrlOptionCurrUP').val() == "") {
            CurrenIdN = -1;
        }
        else {
            CurrenIdN = OPTIONCONTROL.getControlValue(ctrlOptionCurrUP);
        }
        if ($('#ctrlOptionUnitUP').val() == "") {
            UnIdN = -1;
        }
        else {
            UnIdN = OPTIONCONTROL.getControlValue(ctrlOptionUnitUP);
        }

        var values1 =
        {
            //for filter-class:
            PriceBookId: PriceBId,
            PriceBookName: PriceBName,
            ProductId: ProdId,
            TagId: DepId,
            AccountId: CusId,
            CurrencyId: CurrenId,
            UnitId: UnId,
            StartDate: Sdte,
            EndDate: Edt,
            MinQty: Mqty,
            MaxQty: Maqty,
            Val0: Rate,

        }
        arr.push(values1)

        var values2 =
        {
            //for find & update-class:
            PriceBookId: PriceBIdN,
            PriceBookName: PriceBNameN,
            StartDate: SdteN,
            EndDate: EdtN,
            MinQty: MqtyN,
            MaxQty: MaqtyN,
            ProductId: ProdIdN,
            TagId: DepIdN,
            AccountId: CusIdN,
            CurrencyId: CurrenIdN,
            UnitId: UnIdN,
            Val0: RateN,
        }
        arr.push(values2);
        result = NETWORK.executeServerMethod(
                       GLOBAL.getContextPath("UpdatePriceListData", "PriceBook", "CoreMasters"),
                       true,
                       { arr: arr, AppendOrOverride: AppendOrOverride, ActionType: ActionType, iPriceBookType: PriceBookType, iAction: Action },
                       "JSON",
                       true,
                       "PRICEBOOK.UpdatePriceListDataSuccess",
                       "GLOBAL.LoadingStart",
                       "GLOBAL.LoadingEnd");
    },

    //OK BUTTON CLICK INSIDE UPDATE PRICEBOOK PAGE SUCCESS
    UpdatePriceListDataSuccess: function (flag, data) {
        FGRIDCONTROL.clearData("PriceBookWebGrid", true);
        //PRICEBOOK.setSerialNoColumn(0, false);
        OPTIONCONTROL.clear("FilterProduct");
        OPTIONCONTROL.clear("FilterCurrency");
        OPTIONCONTROL.clear("FilterCustomer");
        OPTIONCONTROL.clear("FilterDepartment");

        $('#myPagerAuthPopup button').remove();
        $('#myPagerUPT button').remove();
        $('#myPager button').remove();
        $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $(".panel1").hide("slow");
        $('input[type=text]').show();
        //$('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBUpdate", GetPBResourceMessages));
        //$('#ResultSpan').css("color", "#004d00");
        ////$('#ResultSpan').hide();
        //////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        if (data == "Success") {
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBUpdate", GetPBResourceMessages));
        }
        else {
            COMMON.prototype.showMessage(data);
        }        
        return false;
        $('#btnLoad').click();
    },

    //FILTER AND LOAD BUTTON CLICK
    LoadData: function (e) {
        debugger;
        $('#PriceBookWebGrid tbody tr').show();
        $('#trAddRowDynamically').hide();
        $("#myPager").show();
        //OPTIONCONTROL.clear("FilterProduct");
        //OPTIONCONTROL.clear("FilterCurrency");
        //OPTIONCONTROL.clear("FilterCustomer");
        //OPTIONCONTROL.clear("FilterDepartment");
        var PriceBookId = (OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH));
        var PriceBookIdText = (OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH));
        iIsEdited = 0;
        IsRateEdited = 0;
        var bActive = true;
        var localGridData = [];
        var iStartRowIndex = 0;
        var iEndRowIndex = 0;
        var bLoadGroupData = false;

        if ($("#ShowGroupItems").is(':checked')) {
            bLoadGroupData = true;
        }
        else {
            bLoadGroupData = false;
        }

        if ($("#InActive").is(':checked')) {
            var bActive = false;
        }
        else {
            var bActive = true;
        }
        debugger;
        $(".activePager").on("click", function () {
            pageNo = $(this).val();
        })
        $('#ResultSpan').hide();
        if (PriceBookId == "0" && (PriceBookId != null && PriceBookIdText != "")) {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));

            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        if ((PriceBookId == null && PriceBookIdText == "") || PriceBookId == "0") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else {
            var ProductFilterValue = OPTIONCONTROL.getControlValue("FilterProduct");
            var CurrencyFilterValue = OPTIONCONTROL.getControlValue("FilterCurrency");
            var CustomerFilterValue = OPTIONCONTROL.getControlValue("FilterCustomer");
            var DepartmentsFilterValue = OPTIONCONTROL.getControlValue("FilterDepartment");
            var iStartDate = DATEPICKER.getDate("StartingDateH");
            var iEndDate = DATEPICKER.getDate("EndingDateH");
            ProductFilterValue = ProductFilterValue == null || ProductFilterValue == 0 ? -1 : ProductFilterValue;
            CurrencyFilterValue = CurrencyFilterValue == null || CurrencyFilterValue == 0 ? -1 : CurrencyFilterValue;
            CustomerFilterValue = CustomerFilterValue == null || CustomerFilterValue == 0 ? -1 : CustomerFilterValue;
            DepartmentsFilterValue = DepartmentsFilterValue == null || DepartmentsFilterValue == 0 ? -1 : DepartmentsFilterValue;
        }
        if (e != undefined) {
            debugger
            isLoadedFromDB = 0;
            var textValue = e.text;
            var SlectedIndexNo = parseInt($('.clsSelectedIndex')[0].parentElement.value);
            if (textValue == PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages)) {
                pageNo = SlectedIndexNo - 1;
            }
            else if (textValue == PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages)) {
                pageNo = SlectedIndexNo + 1;
            }
            else {
                pageNo = e.parentElement.value;
            }
            debugger
            $('.AactivePager').css("background-color", "white");
            $('.AactivePager').css("color", "black");
            $('.AactivePager').removeClass("clsSelectedIndex");
            $('#AactivePager' + pageNo).addClass("theme_background-color theme_color")
            $('#AactivePager' + pageNo).css("color", "#ffffff");
            $('#AactivePager' + pageNo).addClass("clsSelectedIndex");
            if (pageNo == 1) {
                $('.first_link').addClass('disable');
                $('.prev_link').addClass('disable');
                $('.next_link').removeClass('disable');
                $('.last_link').removeClass('disable');
            }
            else if (pageNo == e.parentElement.parentElement.children.length - 4) {
                $('.next_link').addClass('disable');
                $('.prev_link').removeClass('disable');
                $('.first_link').removeClass('disable');
                $('.last_link').addClass('disable');
            }
            else {
                $('.first_link').removeClass('disable');
                $('.prev_link').removeClass('disable');
                $('.next_link').removeClass('disable');
                $('.last_link').removeClass('disable');
            }
        }
        else {
            debugger;
            iLocalPageNo = 0;
            IsDateFilterEdited = 0;
            isLoadedFromDB = 1;
            pageNo = 1;
            PriceBookGridData = [];
            PriceBookGridDataPageNo = [];
            $("#myPager").empty();
        }

        var IsPageAlreadyLoadedFromServer = $.inArray(pageNo, PriceBookGridDataPageNo);
        var bFromPaste = false;
        if ((pageNo > iLocalPageNo) || (IsDateFilterEdited == 1) || (IsPageAlreadyLoadedFromServer == -1)) {
            iLocalPageNo = pageNo;
            result = NETWORK.executeServerMethod(
           GLOBAL.getContextPath("myLoadData", "PriceBook", "CoreMasters"),
           true,
           {
               iPriceBookId: PriceBookId, typeId: typeId, iStartDate: iStartDate, iEndDate: iEndDate, ProductFilterValue: ProductFilterValue, CurrencyFilterValue: CurrencyFilterValue,
               CustomerFilterValue: CustomerFilterValue, DepartmentsFilterValue: DepartmentsFilterValue, pageNo: pageNo, RowsCount: RowsCount, bActive: bActive, bLoadGroupData: bLoadGroupData
           },
           "JSON",
           true,
           "PRICEBOOK.myLoadDataSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", bFromPaste);
        }
        else {
            iStartRowIndex = 15 * (pageNo - 1);
            iEndRowIndex = iStartRowIndex + 15;

            localGridData = PriceBookGridData[0].filter(function (obj) { return (obj.PageNo == pageNo); });
            //localGridData = PriceBookGridData[0].slice(iStartRowIndex, iEndRowIndex);
            if (localGridData != null && localGridData.length > 0) {
                for (var i = 0; i < localGridData.length; i++) {
                    if (localGridData[i].PageNo == undefined) {
                        localGridData[i].PageNo = pageNo;
                    }
                }
            }
            FGRIDCONTROL.clearData("PriceBookWebGrid", true);
            for (var i = 0; i < FGRIDCONTROL.getTotalRows("PriceBookWebGrid") > 0; i++) {
                var celob = FGRIDCONTROL.getCellObject("PriceBookWebGrid", i + 1, 10);
                OPTIONCONTROL.setFilter(celob.ColumnAttribute.ctrlid, "");
            }
            var iRowCounter = 0;
            var iColCounter = 0;
            var cellobj = null;
            var objData = null;
            var iValue = 0;
            var tag = null;
            var bRowPresent = false;
            //Append the data when there is a pagination
            if (PriceBookGridData != PRICEBOOK.getResourceValue("lblNoRecords", GetPBResourceMessages)) {
                if (TotalTempArray != null && TotalTempArray.length > 0) {
                    for (var i = 0; i < TotalTempArray.length; i++) {
                        if (TotalTempArray[i].PageNo == pageNo) {
                            localGridData.push(TotalTempArray[i]);
                        }
                    }
                }
                var totalrows = FGRIDCONTROL.getTotalRows("PriceBookWebGrid");
                var iSelectedPageNo = 1;
                FGRIDCONTROL.clearData("PriceBookWebGrid", true);
                if (localGridData.length > 15 || totalrows > 15 || totalrows < localGridData.length) {
                    FGRIDCONTROL.deleteRows("PriceBookWebGrid", 1, totalrows);
                }

                for (iRowCounter = 1; iRowCounter <= localGridData.length; iRowCounter++) {
                    iSelectedPageNo = parseInt(localGridData[iRowCounter - 1].PageNo) - 1;

                    if (localGridData.length > 15 || totalrows > 15 || totalrows < localGridData.length) {
                        FGRIDCONTROL.insertRows("PriceBookWebGrid", iRowCounter, 1);
                    }

                    for (iColCounter = 1; iColCounter <= 29; iColCounter++) {
                        objData = localGridData[iRowCounter - 1];
                        cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter, iColCounter);
                        if (objData.SequenceNumber == 0) {
                            var eleRow = FGRIDCONTROL.getRowElement("PriceBookWebGrid", iRowCounter);
                            $(eleRow).addClass("LocTbodyColor");
                        }
                        var StartDateFilter = DATEPICKER.getDate("StartingDateH");
                        var EndDateFilter = DATEPICKER.getDate("EndingDateH");
                        if (objData.StartDate >= StartDateFilter) {
                            try {
                                if (objData.PageNo == pageNo) {
                                    bRowPresent = true;
                                    switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                                        case MasterDataType.get('DATE'):
                                            if (cellobj.ColumnAttribute.scolumnname == "StartDate") {
                                                iValue = objData.StartDate;
                                            }
                                            else {
                                                iValue = objData.EndDate
                                            }
                                            cellobj.setCellData("value", iValue);
                                            cellobj.setCellText(DATEPICKER.convertDateIntoString(cellobj.ColumnAttribute.ctrlid, iValue));

                                            break;
                                        case MasterDataType.get("FRACTION"):
                                            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.index) == true) {
                                                cellobj.setCellData("value", objData["Val" + cellobj.ColumnAttribute.index]);
                                                cellobj.setCellText(Number(objData["Val" + cellobj.ColumnAttribute.index]).toFixed(parseInt($("#NoOfDecimal").val())) == "NaN" ? "" : Number(objData["Val" + cellobj.ColumnAttribute.index]).toFixed(parseInt($("#NoOfDecimal").val())));
                                            }
                                            else if (cellobj.ColumnAttribute.scolumnname == "MinQty") {
                                                cellobj.setCellData("value", objData["MinQty"]);
                                                cellobj.setCellText(objData["MinQty"]);
                                            }
                                            else if (cellobj.ColumnAttribute.scolumnname == "MaxQty") {
                                                cellobj.setCellData("value", objData["MaxQty"]);
                                                cellobj.setCellText(objData["MaxQty"]);
                                            }
                                            else if (cellobj.ColumnAttribute.scolumnname == "SequenceNo") {
                                                cellobj.setCellData("value", objData["SequenceNumber"]);
                                                cellobj.setCellText(objData["SequenceNumber"]);
                                            }
                                            break;
                                        default:
                                            if (cellobj.ColumnAttribute.ctrlid == "Alias_First") {
                                                cellobj.setCellData("value", objData["Alias"]);
                                                cellobj.setCellText(objData["Alias"]);
                                            }
                                            else if (cellobj.ColumnAttribute.ctrlid == "IsEdited_First") {
                                                cellobj.setCellData("value", objData["IsEdited"]);
                                                cellobj.setCellText(objData["IsEdited"]);
                                            }
                                            else if (cellobj.ColumnAttribute.ctrlid == "IsRateEdited_First") {
                                                cellobj.setCellData("value", objData["RateEdited"]);
                                                cellobj.setCellText(objData["RateEdited"]);
                                            }
                                            else if (cellobj.ColumnAttribute.scolumnname == "AuthStatus" && objData["SequenceNumber"] > 0) {
                                                cellobj.setCellData("value", objData["AuthStatus"]);
                                                if (objData["AuthStatus"] == 0) {
                                                    cellobj.setCellText("Pending");
                                                }
                                                else if (objData["AuthStatus"] == 1) {
                                                    cellobj.setCellText("Authorized");
                                                }
                                                else if (objData["AuthStatus"] == 2) {
                                                    cellobj.setCellText("Rejected");
                                                }
                                                else if (objData["AuthStatus"] == 3) {
                                                    cellobj.setCellText("Stopped");
                                                }
                                                else {
                                                    cellobj.setCellText("Edited");
                                                }
                                            }
                                            else if (cellobj.ColumnAttribute.ctrlid == "LocationId") {
                                                cellobj.setCellData("value", objData["LocatoinId"]);
                                                cellobj.setCellText(objData["LocatoinId"]);
                                            }
                                            break;
                                    }
                                }
                            }
                            catch (err) {
                                COMMON.prototype.showMessage(err.message, "Exception");
                            }
                        }
                        FGRIDCONTROL.update("PriceBookWebGrid");
                        if (bRowPresent == false) {
                            $('#myPager button').remove();
                            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                            $('#ResultSpan').css("color", "red");
                            //$('#ResultSpan').hide();
                            ////setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                            return false;
                        }
                    }
                }
                for (var iSerialNo = 1; iSerialNo <= totalrows; iSerialNo++) {
                    eleRow = FGRIDCONTROL.getRowElement(document.getElementById("PriceBookWebGrid"), iSerialNo);
                    FGRIDCONTROL.setSerialNo(eleRow.children[0], (parseInt(totalrows) * iSelectedPageNo) + iSerialNo);
                }
                //PRICEBOOK.setSerialNoColumn(iStartRowIndex);

                if (localGridData.length > 0) {
                    tag = {};
                    tag.iColumnIndex = 1;
                    tag.GridCtrlId = "PriceBookWebGrid";
                    tag.arrIds = [];
                    for (iRowCounter = 1; iRowCounter <= localGridData.length; iRowCounter++) {
                        objData = localGridData[iRowCounter - 1];
                        tag.arrIds.push(objData.ProductId);
                    }
                    cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true, true);
                    tag = {};
                    tag.iColumnIndex = 3;
                    tag.GridCtrlId = "PriceBookWebGrid";
                    tag.arrIds = [];
                    for (iRowCounter = 1; iRowCounter <= localGridData.length; iRowCounter++) {
                        objData = localGridData[iRowCounter - 1];
                        tag.arrIds.push(objData.TagId);
                    }
                    cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true, true);

                    tag = {};
                    tag.iColumnIndex = 6;
                    tag.GridCtrlId = "PriceBookWebGrid";
                    tag.arrIds = [];
                    for (iRowCounter = 1; iRowCounter <= localGridData.length; iRowCounter++) {
                        objData = localGridData[iRowCounter - 1];
                        tag.arrIds.push(objData.AccountId);

                    }
                    cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true, true);


                    tag = {};
                    tag.iColumnIndex = 7;
                    tag.GridCtrlId = "PriceBookWebGrid";
                    tag.arrIds = [];
                    for (iRowCounter = 1; iRowCounter <= localGridData.length; iRowCounter++) {
                        objData = localGridData[iRowCounter - 1];
                        tag.arrIds.push(objData.CurrencyId);
                    }
                    cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true, true);

                    tag = {};
                    tag.iColumnIndex = 10;
                    tag.GridCtrlId = "PriceBookWebGrid";
                    tag.arrIds = [];
                    for (iRowCounter = 1; iRowCounter <= localGridData.length; iRowCounter++) {
                        objData = localGridData[iRowCounter - 1];
                        tag.arrIds.push(objData.UnitId);
                    }
                    cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true, true);
                }
                if (localGridData.length == 0 || (localGridData.length == 1 && localGridData.ProductId == 0)) {
                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                    $('#ResultSpan').css("color", "red");
                    //$('#ResultSpan').hide();
                    //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                    return false;
                }
                if (isLoadedFromDB == 1) {
                    debugger
                    if (PriceBookGridData[1] > 1) {
                        $("#myPager").append('<button id="first_link" type="button" class="Fbutton first_link" value="' + 1 + '" style="padding:2px 5px; margin-right:5px;"><a href="#" id="' + 1 + '" onclick="return PRICEBOOK.LoadData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOEFirst", GetPBResourceMessages) + '</a></button>');

                        //$("#myPager").append('<li><a href="#" class="prev_link" onclick="return PRICEBOOK.LoadData(this)">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></li>');
                        $("#myPager").append('<button type="button" class="Fbutton" style="padding:2px 5px; margin-right:5px;"><a href="#" class="prev_link" onclick="return PRICEBOOK.LoadData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></button>');

                        //for (var i = 0; i < PriceBookGridData[1]; i++) {
                        //    $("#myPager").append('<li id="activePager' + (i + 1) + '" class="activePager" value="' + (i + 1) + '"><a href="#" onclick="return PRICEBOOK.LoadData(this)"  id="AactivePager' + (i + 1) + '" class="AactivePager">' + (i + 1) + '</a></li>');
                        //}
                        for (var i = 0; i < PriceBookGridData[1]; i++) {
                            $("#myPager").append('<button type="button" id="activePager' + (i + 1) + '" value="' + (i + 1) + '" style="padding:2px 0px; width:20px; margin-right:5px;background-color:#44799b !important;" class="Fbutton activePager"><a href="#" style="border-radius:0px;text-decoration:none;color:black;padding:2px 0px;" id="AactivePager' + (i + 1) + '" class="AactivePager">' + (i + 1) + '</a></button>');
                        }

                        //$("#myPager").append('<li><a href="#" class="next_link" onclick="return PRICEBOOK.LoadData(this)">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></li>');
                        $("#myPager").append('<button type="button" id="next_link" class="Fbutton" style="padding:2px 5px;" ><a href="#" class=" next_link" onclick="return PRICEBOOK.LoadData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></button>');

                        $("#myPager").append('<button id="last_link" type="button" class="Fbutton last_link" value="' + parseInt(Math.ceil(arrNew[1])) + '" style="padding:2px 5px;" ><a href="#" onclick="return PRICEBOOK.LoadData(this)" id="' + parseInt(Math.ceil(arrNew[1])) + '" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOELast", GetPBResourceMessages) + '</a></button>');

                        $('#AactivePager1').addClass("theme_background-color theme_color")
                        $('#AactivePager1').css("color", "#ffffff");
                        $('#AactivePager1').addClass("clsSelectedIndex");
                        $('.first_link').addClass('disable');
                        $('.prev_link').addClass('disable');
                        $(".activePager").hide();
                        $($('.clsSelectedIndex')[0].parentNode).show()
                        PRICEBOOK.setHeight(0);
                    }
                    else {
                        $("#myPager").hide();
                        //PRICEBOOK.setHeight(27);
                        PRICEBOOK.setHeight(0);
                    }
                }
                else {
                    $("#myPager").show();
                    $(".activePager").hide();
                    $($('.clsSelectedIndex')[0].parentNode).show();
                }
            }
            else {
                $('#ResultSpan').html(PriceBookGridData);
                COMMON.prototype.showMessage(PriceBookGridData);
                $('#ResultSpan').css("color", "red");
                //$('#ResultSpan').hide();
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
            if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
                $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor')
            }
        }
    },

    //FILTER&LOAD BUTTON CLICK SUCCESS
    myLoadDataSuccess: function (flag, arrNew, bFromPaste) {
        debugger;
        FGRIDCONTROL.clearData("PriceBookWebGrid", true);
        IsDateFilterEdited = 0;
        if (arrNew[0].length > 0) {
            var bAllAuthorizedRecords = arrNew[2];
            if (parseInt(arrNew[3]) != 1) {
                if (!bAllAuthorizedRecords) {
                    $("#AuthorizeLI").css("pointer-events", "none");
                }
                else {
                    $("#AuthorizeLI").css("pointer-events", "auto");
                }
            }

            //if (arrNew[0][0].IsPending == true) {
            //    $("#AuthorizeLI").css("pointer-events", "auto");
            //}
            //else {
            //    $("#AuthorizeLI").css("pointer-events", "none");
            //}
        }

        $("#iTotalRecordsPerPage").val(arrNew[0].length);
        if (PriceBookGridData.length == 0) {
            if (arrNew != PRICEBOOK.getResourceValue("lblNoRecords", GetPBResourceMessages)) {
                PriceBookGridData = arrNew;
            }
            iLocalPageNo = 0;
        }
            //else if (arrNew[0].length < 15) {
            //    iLocalPageNo = 0;
            //}
        else {
            if (!bFromPaste) {
                for (var iRowCounter = 0; iRowCounter < arrNew[0].length ; iRowCounter++) {
                    PriceBookGridData[0].push(arrNew[0][iRowCounter]);
                }
            }
            //To Remove Duplicate Records in PriceBookGridData[0]
            PriceBookGridData[0] = PriceBookGridData[0].filter((thing, index, self) =>
                index === self.findIndex((t) => (
                  t.SequenceNumber === thing.SequenceNumber
                ))
            )
        }
        var iStartRowIndex;
        if (iLocalPageNo > 1) {
            iStartRowIndex = (parseInt(RowsCount) * (parseInt(iLocalPageNo) - 1));
        }
        else {
            iLocalPageNo = 1;
            iStartRowIndex = 0;
        }

        var IsPageAlreadyLoadedFromServer = $.inArray(pageNo, PriceBookGridDataPageNo);
        if (IsPageAlreadyLoadedFromServer == -1) {
            PriceBookGridDataPageNo.push(iLocalPageNo);
        }


        var iRowCounter = 0;
        var iColCounter = 0;
        var cellobj = null;
        var objData = null;
        var iValue = 0;
        var tag = null;

        if (arrNew != PRICEBOOK.getResourceValue("lblNoRecords", GetPBResourceMessages)) {
            if (arrNew[0] != null && arrNew[0].length > 0) {
                for (var i = 0; i < arrNew[0].length; i++) {
                    if (arrNew[0][i].PageNo == undefined) {
                        arrNew[0][i].PageNo = pageNo;
                    }
                }
            }
            if (TotalTempArray != null && TotalTempArray.length > 0) {
                for (var i = 0; i < TotalTempArray.length; i++) {
                    if (TotalTempArray[i].PageNo == pageNo) {
                        arrNew[0].push(TotalTempArray[i]);
                    }
                }
            }
            var totalrows = FGRIDCONTROL.getTotalRows("PriceBookWebGrid");
            var iSelectedPageNo = 1;
            FGRIDCONTROL.clearData("PriceBookWebGrid", true);
            if (arrNew[0].length > 15 || totalrows > 15 || totalrows < arrNew[0].length) {
                FGRIDCONTROL.deleteRows("PriceBookWebGrid", 1, totalrows);
            }
            for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                iSelectedPageNo = parseInt(arrNew[0][iRowCounter - 1].PageNo) - 1;
                if (arrNew[0].length > 15 || totalrows > 15 || totalrows < arrNew[0].length) {
                    FGRIDCONTROL.insertRows("PriceBookWebGrid", iRowCounter, 1);
                }

                for (iColCounter = 1; iColCounter <= 29; iColCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    if (objData.SequenceNumber == 0) {
                        var eleRow = FGRIDCONTROL.getRowElement("PriceBookWebGrid", iRowCounter);
                        $(eleRow).addClass("LocTbodyColor");
                    }
                    cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter, iColCounter);
                    try {
                        if (objData.PageNo == pageNo) {
                            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                                case MasterDataType.get('DATE'):
                                    if (cellobj.ColumnAttribute.scolumnname == "StartDate") {
                                        if (objData.StartDate == undefined) {
                                            objData.StartDate = 0;
                                        }
                                        iValue = objData.StartDate;
                                    }
                                    else {
                                        if (objData.EndDate == undefined) {
                                            objData.EndDate = 0;
                                        }
                                        iValue = objData.EndDate
                                    }
                                    cellobj.setCellData("value", iValue);
                                    cellobj.setCellText(DATEPICKER.convertDateIntoString(cellobj.ColumnAttribute.ctrlid, iValue));
                                    //debugger;
                                    DATEPICKER.setDate("PriceBookWebGrid_option_StartingDate", objData.StartDate, true);
                                    DATEPICKER.setDate("PriceBookWebGrid_option_EndingDate", objData.EndDate, true);

                                    break;
                                case MasterDataType.get("FRACTION"):
                                    if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.index) == true) {
                                        cellobj.setCellData("value", objData["Val" + cellobj.ColumnAttribute.index]);
                                        cellobj.setCellText(Number(objData["Val" + cellobj.ColumnAttribute.index]).toFixed(parseInt($("#NoOfDecimal").val())));
                                    }
                                    else if (cellobj.ColumnAttribute.scolumnname == "MinQty") {
                                        cellobj.setCellData("value", objData["MinQty"]);
                                        cellobj.setCellText(objData["MinQty"]);
                                    }
                                    else if (cellobj.ColumnAttribute.scolumnname == "MaxQty") {
                                        cellobj.setCellData("value", objData["MaxQty"]);
                                        cellobj.setCellText(objData["MaxQty"]);
                                    }
                                    else if (cellobj.ColumnAttribute.scolumnname == "SequenceNo") {
                                        cellobj.setCellData("value", objData["SequenceNumber"]);
                                        cellobj.setCellText(objData["SequenceNumber"]);
                                    }
                                    break;
                                default:
                                    if (cellobj.ColumnAttribute.ctrlid == "Alias_First") {
                                        cellobj.setCellData("value", objData["Alias"]);
                                        cellobj.setCellText(objData["Alias"]);
                                    }
                                    else if (cellobj.ColumnAttribute.ctrlid == "IsEdited_First") {
                                        cellobj.setCellData("value", objData["IsEdited"]);
                                        cellobj.setCellText(objData["IsEdited"]);
                                    }
                                    else if (cellobj.ColumnAttribute.ctrlid == "IsRateEdited_First") {
                                        cellobj.setCellData("value", objData["RateEdited"]);
                                        cellobj.setCellText(objData["RateEdited"]);
                                    }
                                    else if (cellobj.ColumnAttribute.scolumnname == "AuthStatus" && objData["SequenceNumber"] > 0) {
                                        cellobj.setCellData("value", objData["AuthStatus"]);
                                        if (objData["AuthStatus"] == 0) {
                                            cellobj.setCellText("Pending");
                                        }
                                        else if (objData["AuthStatus"] == 1) {
                                            cellobj.setCellText("Authorized");
                                        }
                                        else if (objData["AuthStatus"] == 2) {
                                            cellobj.setCellText("Rejected");
                                        }
                                        else if (objData["AuthStatus"] == 3) {
                                            cellobj.setCellText("Stopped");
                                        }
                                        else {
                                            cellobj.setCellText("Edited");
                                        }
                                    }
                                    else if (cellobj.ColumnAttribute.ctrlid == "LocationId") {
                                        cellobj.setCellData("value", objData["LocatoinId"]);
                                        cellobj.setCellText(objData["LocatoinId"]);
                                    }
                                    break;
                            }
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage(err.message, "Exception");
                    }
                }
                FGRIDCONTROL.update("PriceBookWebGrid");
            }
            for (var iSerialNo = 1; iSerialNo <= totalrows; iSerialNo++) {
                eleRow = FGRIDCONTROL.getRowElement(document.getElementById("PriceBookWebGrid"), iSerialNo);
                FGRIDCONTROL.setSerialNo(eleRow.children[0], (parseInt(totalrows) * iSelectedPageNo) + iSerialNo);
            }
            if (arrNew[0].length > 0) {
                tag = {};
                tag.iColumnIndex = 1;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.ProductId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                tag = {};
                tag.iColumnIndex = 3;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.TagId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                tag = {};
                tag.iColumnIndex = 6;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.AccountId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                tag = {};
                tag.iColumnIndex = 7;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.CurrencyId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);

                tag = {};
                tag.iColumnIndex = 10;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.UnitId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);
                //debugger
            }
            PRICEBOOK.setSerialNoColumn(iStartRowIndex);

            if (arrNew[0].length == 0 || (arrNew[0].length == 1 && arrNew[0].ProductId == 0)) {
                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                $('#ResultSpan').css("color", "red");
                //$('#ResultSpan').hide();
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
            if (isLoadedFromDB == 1) {

                debugger;
                if (arrNew[1] > 1) {
                    //$("#myPager").append('<li id="first_link" class="first_link" value="' + 1 + '"><a href="#" onclick="return PRICEBOOK.LoadData(this)"  id="' + 1 + '">' + PRICEBOOK.getResourceValue("cboOEFirst", GetPBResourceMessages) + '</a></li>');
                    $("#myPager").append('<button id="first_link" type="button" class="Fbutton first_link" value="' + 1 + '" style="padding:2px 5px; margin-right:5px;"><a href="#" id="' + 1 + '" onclick="return PRICEBOOK.LoadData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOEFirst", GetPBResourceMessages) + '</a></button>');

                    //$("#myPager").append('<li><a href="#" class="prev_link" onclick="return PRICEBOOK.LoadData(this)">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></li>');
                    $("#myPager").append('<button type="button" class="Fbutton" style="padding:2px 5px; margin-right:5px;"><a href="#" class="prev_link" onclick="return PRICEBOOK.LoadData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></button>');

                    //for (var i = 0; i < arrNew[1]; i++) {
                    //      $("#myPager").append('<li id="activePager' + (i + 1) + '" class="activePager" value="' + (i + 1) + '"><a href="#" id="AactivePager' + (i + 1) + '" class="AactivePager">' + (i + 1) + '</a></li>');
                    //   }
                    for (var i = 0; i < arrNew[1]; i++) {
                        $("#myPager").append('<button type="button" id="activePager' + (i + 1) + '" value="' + (i + 1) + '" style="padding:2px 0px; width:20px; margin-right:5px;background-color:#44799b !important;" class="Fbutton activePager"><a href="#" style="border-radius:0px;text-decoration:none;color:black;padding:2px 0px;" id="AactivePager' + (i + 1) + '" class="AactivePager">' + (i + 1) + '</a></button>');
                    }

                    //$("#myPager").append('<li><a href="#" class="next_link" onclick="return PRICEBOOK.LoadData(this)">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></li>');
                    $("#myPager").append('<button type="button" class="Fbutton" style="padding:2px 5px;" ><a href="#" class="next_link" onclick="return PRICEBOOK.LoadData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></button>');

                    //$("#myPager").append('<li id="last_link" class="last_link" value="' + Math.ceil(arrNew[1]) + '"><a href="#" onclick="return PRICEBOOK.LoadData(this)"  id="' + Math.ceil(arrNew[1]) + '">' + PRICEBOOK.getResourceValue("cboOELast", GetPBResourceMessages) + '</a></li>');
                    $("#myPager").append('<button id="last_link" type="button" class="Fbutton last_link" value="' + parseInt(Math.ceil(arrNew[1])) + '" style="padding:2px 5px;" ><a href="#" onclick="return PRICEBOOK.LoadData(this)" id="' + parseInt(Math.ceil(arrNew[1])) + '" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOELast", GetPBResourceMessages) + '</a></button>');

                    $('#AactivePager1').addClass("theme_background-color theme_color")
                    $('#AactivePager1').css("color", "#ffffff");
                    $('#AactivePager1').addClass("clsSelectedIndex");
                    $('.prev_link').addClass('disable');
                    $('.first_link').addClass('disable');
                    $(".activePager").hide();
                    if ($('.clsSelectedIndex')[0] != undefined) {
                        $($('.clsSelectedIndex')[0].parentNode).show();
                    }
                    PRICEBOOK.setHeight(0);
                }

                else {
                    $("#myPager").hide();
                    //PRICEBOOK.setHeight(27);
                    PRICEBOOK.setHeight(0);
                }
            }
            else {
                $("#myPager").show();
                $(".activePager").hide();
                if ($('.clsSelectedIndex')[0] != undefined) {
                    $($('.clsSelectedIndex')[0].parentNode).show();
                }
            }
            if ($("#hdnAdd").val() == "true") {
                Celldisable(arrNew[0].length);
            }
        }
        else {
            if (arrNew == PRICEBOOK.getResourceValue("lblNoRecords", GetPBResourceMessages)) {
                $('#myPager button').remove();
                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
                $('#ResultSpan').css("color", "red");
                //$('#ResultSpan').hide();
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
            else {
                $('#ResultSpan').html(arrNew);
                COMMON.prototype.showMessage(arrNew);
                $('#ResultSpan').css("color", "red");
                //$('#ResultSpan').hide();
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
        }
        if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
            $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor')
        }
    },

    onOptionDataLoadedPriceBook: function (id, data, tag) {
        var iRowCounter = 0;
        var iCounter = 0;
        var iMasterId = 0;
        var cell = null;
        var sName = "";
        if (tag.CustomData != null) {
            if (COMMON.prototype.isValidObject(data) == false || data.length == 0) {
                return;
            }
            for (iRowCounter = 0; iRowCounter < tag.CustomData.arrIds.length; iRowCounter++) {
                for (iCounter = 0; iCounter < data.length; iCounter++) {
                    iMasterId = parseInt(data[iCounter][0].sValue);
                    if (tag.CustomData.arrIds[iRowCounter] == iMasterId) {
                        sName = data[iCounter][1].sValue;

                        cell = FGRIDCONTROL.getCellObject(tag.CustomData.GridCtrlId, iRowCounter + 1, tag.CustomData.iColumnIndex);
                        cell.setCellData("value", iMasterId);
                        cell.setCellText(sName);
                        break;
                    }
                }
            }
        }
    },

    //LOAD BUTTON CLICK INSIDE VIEW PRICEBOOK PAGE
    LoadViewPriceData: function (e) {
        debugger

        var OnDate;
        if ($('#ctrlOptionDeptUPH2').val() == "") {
            DepViewId = 0;
        }
        else {
            DepViewId = OPTIONCONTROL.getControlValue(ctrlOptionDeptUPH2);
        }
        if ($('#ctrlOptionCustUPH2').val() == "") {
            CusViewId = 0;
        }
        else {
            CusViewId = OPTIONCONTROL.getControlValue(ctrlOptionCustUPH2);
        }
        if ($('#ctrlOptionProUPH2').val() == "") {
            ProdViewId = 0;
        }
        else {
            ProdViewId = OPTIONCONTROL.getControlValue(ctrlOptionProUPH2);
        }
        if ($('#ctrlOptionCurrUPH2').val() == "") {
            CurrenViewId = 0;
        }
        else {
            CurrenViewId = OPTIONCONTROL.getControlValue(ctrlOptionCurrUPH2);
        }
        if ($('#ctrlOptionUnitUPH2').val() == "") {
            UnitViewId = 0;
        }
        else {
            UnitViewId = OPTIONCONTROL.getControlValue(ctrlOptionUnitUPH2);
        }
        OnDate = DATEPICKER.getDate(ctrlOnDateUPH2);
        if (e != undefined) {
            var textValue = e.text;
            var SlectedIndexNo2 = parseInt($('.clsSelected')[0].parentElement.value);
            if (textValue == PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages)) {
                currentPage = SlectedIndexNo2 - 1;
            }
            else if (textValue == PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages)) {
                currentPage = SlectedIndexNo2 + 1;
            }
            else {
                currentPage = e.parentElement.value;
            }
            $('.ActivePager').css("background-color", "white");
            $('.ActivePager').css("color", "black");
            $('.ActivePager').removeClass("clsSelected");
            $('#ActivePager' + currentPage).addClass("theme_background-color theme_color")
            $('#ActivePager' + currentPage).css("color", "#ffffff");
            $('#ActivePager' + currentPage).addClass("clsSelected");
            debugger;
            if (currentPage == 1) {
                //$('.prev_link').hide();
                $('.ViewPricefirst_link').addClass('disable');
                $('.ViewPriceprev_link').addClass('disable');
                $('.ViewPricenext_link').removeClass('disable');
                $('.ViewPricelast_link').removeClass('disable');
                //$('.next_link').show();
                //$('.last_link').show();
            }
            else if (currentPage == e.parentElement.parentElement.children.length - 4) {
                //$('.next_link').hide();
                $('.ViewPricenext_link').addClass('disable');
                $('.ViewPricelast_link').addClass('disable');
                $('.ViewPricefirst_link').removeClass('disable');
                $('.ViewPriceprev_link').removeClass('disable');
                //$('.prev_link').show();
                //$('.first_link').show();
            }
            else {
                $('.ViewPricefirst_link').removeClass('disable');
                $('.ViewPriceprev_link').removeClass('disable');
                $('.ViewPricenext_link').removeClass('disable');
                $('.ViewPricelast_link').removeClass('disable');
                //$('.first_link').show();
                //$('.prev_link').show();
                //$('.next_link').show();
                //$('.last_link').hide();
            }
        }
        result = NETWORK.executeServerMethod(
                     GLOBAL.getContextPath("myLoadViewPriceData", "PriceBook", "CoreMasters"),
                     true,
                     { AccountId: CusViewId, ProductId: ProdViewId, TagId: DepViewId, OnDate: OnDate, CurrencyId: CurrenViewId, UnitId: UnitViewId, RowsCount: RowsCount, currentPage: currentPage > 0 ? currentPage - 1 : currentPage },
                     "JSON",
                     true,
                     "PRICEBOOK.myLoadViewPriceDataSuccess",
                     "GLOBAL.LoadingStart",
                     "GLOBAL.LoadingEnd");
    },

    //LOAD BUTTON CLICK INSIDE VIEW PRICEBOOK PAGE SUCCESS
    myLoadViewPriceDataSuccess: function (flag, arrNew) {
        debugger
        FGRIDCONTROL.clearData("WebGridUPT3", true);
        var iRowCounter = 0;
        var iColCounter = 0;
        var cellobj = null;
        var objData = null;
        var iValue = 0;
        IsExportedAfterLoad = true;

        if (flag == true && arrNew.length == 0) {
            $('#ResultSpan3').html(PRICEBOOK.getResourceValue("msgNoRecordFound", GetPBResourceMessages));
            $('#ResultSpan3').css("color", "red");
            $('#ResultSpan3').hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgNoRecordFound", GetPBResourceMessages));
            return false;
        }
        else if (flag == true && Object.keys(arrNew[0]).length == 0) {
            $('#ResultSpan3').html(PRICEBOOK.getResourceValue("msgNoRecordFound", GetPBResourceMessages));
            $('#ResultSpan3').css("color", "red");
            $('#ResultSpan3').hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgNoRecordFound", GetPBResourceMessages));
            return false;
        }
        else {
            $('#ResultSpan3').html("");
            $('#ResultSpan3').css("color", "green");
            $('#ResultSpan3').hide();
            for (iRowCounter = 0; iRowCounter < Object.keys(arrNew[0]).length; iRowCounter++) {
                objData = arrNew[0][iRowCounter];
                for (var icolum = 1; icolum <= GridCustomizeColumnFields.length; icolum++) {
                    var strFieldName = GridCustomizeColumnFields[icolum - 1].sFieldName;

                    switch (strFieldName) {
                        case "iPriceBookId":
                            cellobj1 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj1.setCellData("value", objData.PriceBookId);
                            cellobj1.setCellText(objData.PriceBookName);
                            break;
                        case "PriceBookName":
                            cellobj2 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj2.setCellData("value", objData.PriceBookName);
                            cellobj2.setCellText(objData.PriceBookName);
                            break;
                        case "ProductCode":
                            cellobj3 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj3.setCellData("value", objData.ProductCode);
                            cellobj3.setCellText(objData.ProductCode);
                            break;
                        case "iProductId":
                            cellobj4 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj4.setCellData("value", objData.ProductName);
                            cellobj4.setCellText(objData.ProductName);
                            break;
                        case "iCurrency":
                            cellobj5 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj5.setCellData("value", objData.CurrencyName);
                            cellobj5.setCellText(objData.CurrencyName);
                            break;
                        case "MinQty":
                            cellobj6 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj6.setCellData("value", objData.MinQty);
                            cellobj6.setCellText(objData.MinQty);
                            break;
                        case "MaxQty":
                            cellobj7 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj7.setCellData("value", objData.MaxQty);
                            cellobj7.setCellText(objData.MaxQty);
                            break;
                        case "iUnit":
                            cellobj8 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj8.setCellData("value", objData.UnitName);
                            cellobj8.setCellText(objData.UnitName);
                            break;
                        case "fVal0":
                        case "Val0":
                            cellobj9 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj9.setCellData("value", objData.Val0);
                            cellobj9.setCellText(Number(objData.Val0).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "StartDate":
                            cellobj10 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj10.setCellData("value", objData.StartDate);
                            cellobj10.setCellText(DATE.prototype.intToString(objData.StartDate, 'dd/MM/yyyy', m_iCalenderType));
                            //cellobj10.setCellText(DATEPICKER.convertDateIntoString(cellobj10.ColumnAttribute.ctrlid, objData.StartDate));
                            break;
                        case "EndDate":
                            cellobj11 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj11.setCellData("value", objData.EndDate);
                            cellobj11.setCellText(DATE.prototype.intToString(objData.EndDate, 'dd/MM/yyyy', m_iCalenderType));
                            //cellobj11.setCellText(DATEPICKER.convertDateIntoString(cellobj11.ColumnAttribute.ctrlid, objData.EndDate));
                            break;
                        case "CreatedBy":
                            cellobj12 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj12.setCellData("value", objData.CreatedBy);
                            cellobj12.setCellText(objData.CreatedBy);
                            break;
                        case "ModifiedBy":
                            cellobj12 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj12.setCellData("value", objData.ModifiedBy);
                            cellobj12.setCellText(objData.ModifiedBy);
                            break;

                        case "iAccountId":
                            cellobj13 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj13.setCellData("value", objData.AccountName);
                            cellobj13.setCellText(objData.AccountName);
                            break;
                        case "iTagId":
                            cellobj14 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj14.setCellData("value", objData.TagName);
                            cellobj14.setCellText(objData.TagName);
                            break;
                        case "ModifiedDate":
                            cellobj15 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj15.setCellData("value", objData.ModifiedDate);
                            cellobj15.setCellText(DATE.prototype.intToString(objData.ModifiedDate, 'dd/MM/yyyy', m_iCalenderType));
                            //cellobj15.setCellText(DATEPICKER.convertDateIntoString(cellobj15.ColumnAttribute.ctrlid, objData.ModifiedDate));
                            break;
                        case "CreatedDate":
                            cellobj16 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj16.setCellData("value", objData.CreatedDate);
                            cellobj16.setCellText(DATE.prototype.intToString(objData.CreatedDate, 'dd/MM/yyyy', m_iCalenderType));
                            //cellobj16.setCellText(DATEPICKER.convertDateIntoString(cellobj16.ColumnAttribute.ctrlid, objData.CreatedDate));
                            break;
                        case "CurrencyCode":
                            cellobj17 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj17.setCellData("value", objData.CurrencyCode);
                            cellobj17.setCellText(objData.CurrencyCode);
                            break;
                        case "UnitCode":
                            cellobj18 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj18.setCellData("value", objData.UnitCode);
                            cellobj18.setCellText(objData.UnitCode);
                            break;
                        case "Val1":
                            cellobj19 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj19.setCellData("value", objData.Val1);
                            cellobj19.setCellText(Number(objData.Val1).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val2":
                            cellobj20 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj20.setCellData("value", objData.Val2);
                            cellobj20.setCellText(Number(objData.Val2).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val3":
                            cellobj21 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj21.setCellData("value", objData.Val3);
                            cellobj21.setCellText(Number(objData.Val3).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val4":
                            cellobj22 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj22.setCellData("value", objData.Val4);
                            cellobj22.setCellText(Number(objData.Val4).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val5":
                            cellobj23 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj23.setCellData("value", objData.Val5);
                            cellobj23.setCellText(Number(objData.Val5).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val6":
                            cellobj24 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj24.setCellData("value", objData.Val6);
                            cellobj24.setCellText(Number(objData.Val6).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val7":
                            cellobj25 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj25.setCellData("value", objData.Val7);
                            cellobj25.setCellText(Number(objData.Val7).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val8":
                            cellobj26 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj26.setCellData("value", objData.Val8);
                            cellobj26.setCellText(Number(objData.Val8).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val9":
                            cellobj27 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj27.setCellData("value", objData.Val9);
                            cellobj27.setCellText(Number(objData.Val9).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val10":
                            cellobj28 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj28.setCellData("value", objData.Val10);
                            cellobj28.setCellText(Number(objData.Val10).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val11":
                            cellobj29 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj29.setCellData("value", objData.Val11);
                            cellobj29.setCellText(Number(objData.Val11).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val12":
                            cellobj30 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj30.setCellData("value", objData.Val12);
                            cellobj30.setCellText(Number(objData.Val12).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "Val13":
                            cellobj31 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj31.setCellData("value", objData.Val13);
                            cellobj31.setCellText(Number(objData.Val13).toFixed(parseInt($("#NoOfDecimal").val())));
                            break;
                        case "ProductAlias":
                            cellobj32 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj32.setCellData("value", objData.ProductAlias);
                            cellobj32.setCellText(objData.ProductAlias);
                            break;
                        case "AccountCode":
                            cellobj33 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj33.setCellData("value", objData.AccountCode);
                            cellobj33.setCellText(objData.AccountCode);
                            break;
                        case "TagCode":
                            cellobj34 = FGRIDCONTROL.getCellObject("WebGridUPT3", iRowCounter + 1, icolum);
                            cellobj34.setCellData("value", objData.TagCode);
                            cellobj34.setCellText(objData.TagCode);
                            break;
                    }
                }

            }

            $('#ResultSpan3').html("");
            $('#ResultSpan3').css("color", "green");
            $('#ResultSpan3').hide();
            $('#WebGridUPT3> tbody> tr').css('display', 'block');
        }
        

        if ($('#myPagerUPT button').length == 0) {
            if (arrNew[1] > 1) {
             
                $("#myPagerUPT").append('<button id="first_link" type="button" class="Fbutton ViewPricefirst_link disable" value="' + 1 + '" style="padding:2px 5px; margin-right:5px;"><a href="#" id="' + 1 + '" onclick="return PRICEBOOK.LoadViewPriceData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOEFirst", GetPBResourceMessages) + '</a></button>');
               
                $("#myPagerUPT").append('<button type="button" class="Fbutton" style="padding:2px 5px; margin-right:5px;"><a href="#" class="ViewPriceprev_link disable" onclick="return PRICEBOOK.LoadViewPriceData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></button>');

                for (var i = 0; i < arrNew[1]; i++) {
                    $("#myPagerUPT").append('<button type="button" id="aactivePager' + (i + 1) + '" value="' + (i + 1) + '" style="padding:2px 0px; width:20px; margin-right:5px;background-color:#44799b !important;" class="Fbutton aactivePager"><a href="#" style="border-radius:0px;text-decoration:none;color:black;padding:2px 0px;" id="ActivePager' + (i + 1) + '" class="ActivePager">' + (i + 1) + '</a></button>');
                }

                $("#myPagerUPT").append('<button type="button" id="next_link" class="Fbutton " style="padding:2px 5px;" ><a href="#" class="ViewPricenext_link" onclick="return PRICEBOOK.LoadViewPriceData(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></button>');
            
                $("#myPagerUPT").append('<button id="last_link" type="button" class="Fbutton ViewPricelast_link" value="' + parseInt(Math.ceil(arrNew[1])) + '" style="padding:2px 5px;" ><a href="#" onclick="return PRICEBOOK.LoadViewPriceData(this)" id="' + parseInt(Math.ceil(arrNew[1])) + '" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOELast", GetPBResourceMessages) + '</a></button>');

                $('#ActivePager1').addClass("theme_background-color theme_color")
                $('#ActivePager1').css("color", "#ffffff");
                $('#ActivePager1').addClass("clsSelected");
                $(".aactivePager").hide();
                //$(".aactivePager").css("display", "none");

                if ($('.clsSelected')[0] != undefined) {
                    $($('.clsSelected')[0].parentNode).show();                 
                }              
            }           
        }

        else {
            $(".aactivePager").hide();
            if ($('.clsSelected')[0] != undefined) {
                $($('.clsSelected')[0].parentNode).show();
            }          
        }
    },

    //GET ROWS TO APPEND DYNAMICAALY IN VIEW PRICEBBOK PAGE ON CLICK OF LOAD BUTTON
    GetRowForView: function () {
        c = $('#gidUPT > tr:first-of-type').clone();
        d = 0;
        c.find('td,input').each(function () {
            id = v = $(this).prop('id');
            var tlength = document.getElementById('gidUPT').rows.length;
            v = tlength
            ++v;
            id = id.replace(/(\d)[^\d]*$/, v);
            $(this).prop('id', id);
            d = v;
        });
        r = c.find('tr').text();
        t = c.find('td:first').text()
        var tlength = document.getElementById('gidUPT').rows.length;
        t = tlength
        ++t;
        c.find('td:first').text(t)
        return c;
    },

    //BASISON CHECKBOX CHECK/UNCKECK
    OnBaseOfChange: function () {
        if ($('#BasisOn').val() == 4) {
            $('#rdoProfitdiv').show();
        }
        else {
            $('#rdoProfitdiv').hide();
        }
    },

    //TO SHOW/HIDE THE TABLE COLUMNS AND ALSO SETS THE WIDTH ON CHECK/UNCHECK OF CHECKBOXES IN CUSTOMIZE BUTTON POPUP
    toggleMe: function () {
        debugger;
        $("input[type=checkbox]").each(function (i, item) {
            for2 = $(this).data('for')
            if (for2 != undefined) {
                $('.' + for2).hide();
            }
        });
        $("input[type=checkbox]:checked").each(function (i, item) {
            if ($(this).parents().hasClass('highlight')) {
                w = $('#WidthOfS').val();
            }
            else {
                w = 150;
            }
            for2 = $(this).data('for');
            $('.' + for2).css({ width: w + 'px' }).show();
            $('.' + for2 + ' input').css({ width: w + 'px' });
            if (w.length == 0) {
                $('.' + for2 + ' input').css({ width: '150px' });
            }
        })
        var PixcelValue = $('#WidthOfS').val();
        if ($('.highlight').find('input').is(":checked")) {
            $($('.highlight').find('input')).attr("data-content", PixcelValue);
        }
    },

    //TO Show and hide the dropdown on click on label in ImportDataFromExcel button PopUp Modal.
    ddlShowHide: function (ddl) {
        if ($(ddl)[0].children[1].length > 6) {
            var LabelId = $(ddl)[0].closest('td').children[0].id
            var iSelectedIndex = $(ddl)[0].children[1].selectedIndex;
            $('#' + LabelId).html($(ddl)[0].children[1][iSelectedIndex].text);
        }
        $('.ddlImportFromExcel').css("display", "none");
        $('.lbl').css("display", "block");
        $(ddl).find('label').html($(ddl)[0].children[1].SelectedText);
        $(ddl).find('select').show();
        $(ddl).find('label').hide();
    },

    //To Open PopUp Modal on click of ImportDataFromExcel button without DropDown Data.
    LoadTableImportDataFromExcel: function (event) {
        debugger;
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        if (PriceBookName == "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else {
            $('#uploadFile').val('');
            $('#uploadBtn').val('');
            $('#uploadFile').attr('readonly', true);
            result = NETWORK.executeServerMethod(
                          GLOBAL.getContextPath("LoadDataFromExcel", "PriceBook", "CoreMasters"),
                              true,
                              {},
                              "html",
                              true,
                              "PRICEBOOK.LoadDataFromExcelTableSuccess",
                              "GLOBAL.LoadingStart",
                              "GLOBAL.LoadingEnd");
        }
    },

    LoadDataFromExcelTableSuccess: function (flag, data) {
        debugger;
        $('#ResultSpan').html('');
        $('#SpanValidation').html('');
        $('#LoadTableImportFromExcel').html(data);
        $('#myModalImportFromExcel').modal('show');
    },

    //On Click of ImportData Button click in PopUp Modal.
    ImportDataFromExcel: function () {
        debugger
        var ImportgridId = "ImportGrid";
        var typeId = window.localStorage.getItem('typeId');
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        var FileName = $('#uploadFile').val();
        var rdoselectedValue = "";
        var selected = $("input[type='radio'][name='NCB']:checked");
        if (selected.length > 0) {
            rdoselectedValue = parseInt(selected.val());
        }
        var ArrLocalFieldName = [];
        var ArrExternalFieldName = [];

        if ($("#uploadFile").val() == "") {
            $('#SpanValidation').html(PRICEBOOK.getResourceValue("msgPleaseselectthefiletoimport", GetPBResourceMessages));
            $('#SpanValidation').hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPleaseselectthefiletoimport", GetPBResourceMessages));
            return false;
        }
        else {
            for (var irow = 0; irow < FGRIDCONTROL.getTotalRows(ImportgridId) ; irow++) {
                LocalFieldNamecellobj = FGRIDCONTROL.getCellObject(ImportgridId, irow + 1, 1);
                var LocalFieldName = LocalFieldNamecellobj.getCellText().trim();

                ExternalFieldNamecellobj = FGRIDCONTROL.getCellObject(ImportgridId, irow + 1, 2);
                var ExternalFieldName = $(ExternalFieldNamecellobj.cell).find('select').length > 0 ? $(ExternalFieldNamecellobj.cell).find('select option:selected').text().trim() : ExternalFieldNamecellobj.getCellText().trim();


                debugger
                if (LocalFieldName.toLowerCase() == "PriceBook".toLowerCase()) {
                    if (ExternalFieldName != "") {
                        ArrLocalFieldName.push(LocalFieldName);
                        ArrExternalFieldName.push(ExternalFieldName);
                    }
                    else {
                        COMMON.prototype.showMessage(LocalFieldName + " Name Mandatory");
                        return false;
                    }

                }
                else if (LocalFieldName.toLowerCase() == "Product".toLowerCase()) {
                    if (ExternalFieldName != "") {
                        ArrLocalFieldName.push(LocalFieldName);
                        ArrExternalFieldName.push(ExternalFieldName);
                    }
                    else {
                        COMMON.prototype.showMessage(getResourceValue("msgPBProdNameMandatory", GetPBResourceMessages));
                        return false;
                    }

                }
                else if (LocalFieldName.toLowerCase() == "Rate".toLowerCase()) {
                    if (ExternalFieldName != "") {
                        ArrLocalFieldName.push(LocalFieldName);
                        ArrExternalFieldName.push(ExternalFieldName);
                    }
                    else {
                        COMMON.prototype.showMessage(getResourceValue("msgPBRateMandatory", GetPBResourceMessages));
                        return false;
                    }

                }


                else {
                    ArrLocalFieldName.push(LocalFieldName);
                    ArrExternalFieldName.push(ExternalFieldName);
                }

            }
        }
        debugger;



        var bOverride = false;
        if ($("#chkOverride").is(':checked')) {
            bOverride = true;
        }
        else {
            bOverride = false;
        }
        result = NETWORK.executeServerMethod(
                                  GLOBAL.getContextPath("ImportDataFromExcel", "PriceBook", "CoreMasters"),
                                      true,
                                      { typeId: typeId, PriceBookId: PriceBookId, PriceBookName: PriceBookName, rdoselectedValue: rdoselectedValue, LocalFieldName: ArrLocalFieldName, ExternalFieldName: ArrExternalFieldName, FileName: FileName, IsOverride: bOverride },
                                      "json",
                                      true,
                                      "PRICEBOOK.ImportDataFromExcelSuccess",
                                      "GLOBAL.LoadingStart",
                                      "GLOBAL.LoadingEnd");
    },

    //On Click of ImportData Button click in PopUp Modal Success.
    ImportDataFromExcelSuccess: function (flag, ErrorStatus) {
        PRICEBOOK.btnClear_Click();
        if (ErrorStatus != "") {
            if (ErrorStatus == PRICEBOOK.getResourceValue("msgImproperFieldMap", GetPBResourceMessages)) {
                $('#SpanValidation').html(ErrorStatus);
                $('#SpanValidation').css("color", "red");
                $('#SpanValidation').hide();
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgImproperFieldMap", GetPBResourceMessages));
                return false;
            }
            else if (ErrorStatus == PRICEBOOK.getResourceValue("msgItemExists", GetPBResourceMessages)) {
                $('#myModalImportFromExcel').modal('hide');
                $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgItemExists", GetPBResourceMessages));
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgItemExists", GetPBResourceMessages));
                //$('#ResultSpan').hide();
                $('#ResultSpan').css("color", "red");
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
            else if (ErrorStatus == PRICEBOOK.getResourceValue("msgPBImportSuc", GetPBResourceMessages) + ". Please Check PriceBookDataLog File For Reference") {
                $('#myModalImportFromExcel').modal('hide');
                $('#ResultSpan').html(ErrorStatus);
                COMMON.prototype.showMessage(ErrorStatus);
                //$('#ResultSpan').hide();
                $('#ResultSpan').css("color", "#004d00");
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            }
            else {
                $('#myModalImportFromExcel').modal('hide');
                $('#ResultSpan').html(ErrorStatus);
                COMMON.prototype.showMessage(ErrorStatus);
                //$('#ResultSpan').hide();
                $('#ResultSpan').css("color", "red");
                //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
                return false;
            }
        }
        else {
            $('#myModalImportFromExcel').modal('hide');
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBImportSuc", GetPBResourceMessages));
            //$('#ResultSpan').hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBImportSuc", GetPBResourceMessages));
            $('#ResultSpan').css("color", "#004d00");
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
    },

    //EXPORT TO EXCEL
    ExporttoExcel: function () {
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);

        var ProductFilterValue = OPTIONCONTROL.getControlValue("FilterProduct");
        var CurrencyFilterValue = OPTIONCONTROL.getControlValue("FilterCurrency");
        var CustomerFilterValue = OPTIONCONTROL.getControlValue("FilterCustomer");
        var DepartmentsFilterValue = OPTIONCONTROL.getControlValue("FilterDepartment");
        var iStartDate = DATEPICKER.getDate("StartingDateH");
        var iEndDate = DATEPICKER.getDate("EndingDateH");
        var bLoadGroupData = false;
        ProductFilterValue = ProductFilterValue == null || ProductFilterValue == 0 ? -1 : ProductFilterValue;
        CurrencyFilterValue = CurrencyFilterValue == null || CurrencyFilterValue == 0 ? -1 : CurrencyFilterValue;
        CustomerFilterValue = CustomerFilterValue == null || CustomerFilterValue == 0 ? -1 : CustomerFilterValue;
        DepartmentsFilterValue = DepartmentsFilterValue == null || DepartmentsFilterValue == 0 ? -1 : DepartmentsFilterValue;

        if ($("#ShowGroupItems").is(':checked')) {
            bLoadGroupData = true;
        }
        else {
            bLoadGroupData = false;
        }

        if (PriceBookName == "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgSelectPriceBookExport", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgSelectPriceBookExport", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            $('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else if (PriceBookId == 0) {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));

            $('#ResultSpan').css("color", "red");
            $('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else {
            result = NETWORK.executeServerMethod(
                                    GLOBAL.getContextPath("ExportToExcel", "PriceBook", "CoreMasters"),
                                        true,
                                        {
                                            iPriceBookId: PriceBookId, PriceBookName: PriceBookName, PBValueColumnNames: PBValueColumnNames, iStartDate: iStartDate, iEndDate: iEndDate, ProductFilterValue: ProductFilterValue, CurrencyFilterValue: CurrencyFilterValue,
                                            CustomerFilterValue: CustomerFilterValue, DepartmentsFilterValue: DepartmentsFilterValue, bLoadGroupData: bLoadGroupData
                                        },
                                        "",
                                        true,
                                        "PRICEBOOK.ExportToExcelSuccess",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd");
        }
    },

    //EXPORT TO EXCEL SUCCESS
    ExportToExcelSuccess: function (flag, fileName) {
        debugger;
        $('#WebGrid tr').removeClass("PriceBookSelectedRowColor");
        if (fileName != "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBExportSuc", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBExportSuc", GetPBResourceMessages));

            //$('#ResultSpan').css("display", "block");
            $('#ResultSpan').css("color", "#004d00");
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            //window.location = window.location.href + '/PriceBook/Download?file=' + fileName;
            var sUrl = window.location.href.replace(/\#/g, "");
            if (!sUrl.includes("file")) {
                window.location = sUrl + '/PriceBook/Download?file=' + fileName.trim();
            }
            else {
                window.location = sUrl;
            }
        }
        else {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));

            $('#ResultSpan').css("color", "red");
            $('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
    },

    // EXPORT TO XML
    ExporttoXML: function () {
        debugger;
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        if (PriceBookName == "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgSelectPriceBookExport", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgSelectPriceBookExport", GetPBResourceMessages));

            $('#ResultSpan').css("color", "red");
            $('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else if (PriceBookId == 0) {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            $('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else {
            result = NETWORK.executeServerMethod(
                                    GLOBAL.getContextPath("ExporttoXML", "PriceBook", "CoreMasters"),
                                        true,
                                        { iPriceBookId: PriceBookId, PriceBookName: PriceBookName },
                                        "",
                                        true,
                                        "PRICEBOOK.ExporttoXMLSuccess",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd");
        }
    },

    // EXPORT TO XML SUCCESS
    ExporttoXMLSuccess: function (flag, fileName) {
        $('#WebGrid tr').removeClass("PriceBookSelectedRowColor");
        if (fileName != "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBExportSuc", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBExportSuc", GetPBResourceMessages));
            //$('#ResultSpan').css("display", "block");
            $('#ResultSpan').css("color", "#004d00");
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            //window.location = '/Focus9/PriceBook/DownloadXML?file=' + fileName;
            var sUrl = window.location.href.replace(/\#/g, "");
            if (!sUrl.includes("file")) {
                window.location = sUrl + '/PriceBook/DownloadXML?file=' + fileName;
            }
            else {
                window.location = sUrl;
            }
        }
        else {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgSynStatObjectIsnull", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgSynStatObjectIsnull", GetPBResourceMessages));

            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
    },

    //Import From XML
    validateXMLImport: function () {
        var PriceBookValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH)
        var PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        if (PriceBookText.trim() == "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages)).hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            return false;
        }
    },

    XMLImport: function (element) {
        debugger;
        var PriceBookValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH)
        var PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        if (PriceBookText.trim() == "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages)).hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }
        else {
            var sFileName = $(element)[0].files[0].name;
            var sExtension = [".xml"];
            var fileExt = (element.value).substring((element.value).lastIndexOf('.')).toLowerCase();
            if (sExtension.indexOf(fileExt) >= 0) {
                $('#uploadFile').val(sFileName);
                var obj = {};
                if (element.files != null && element.files.length > 0) {
                    obj.url = GLOBAL.getContextPath("ImportFromXML", "PriceBook", "CoreMasters"),
                    //obj.Excel_FileName = element.files[0].name;
                    obj.Excel_FileName = PriceBookText;
                    NETWORK.uploadFile(obj,
                                        true,
                                        element.files[0],
                                        "html",
                                        true,
                                        "PRICEBOOK.XMLImportSuccess",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd");
                }
            }
            else {
                alert("Please Import XML File Format.");
                return false;
            }
        }
    },

    XMLImportSuccess: function (bs, data) {
        if (data == "1") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBImportSuc", GetPBResourceMessages));
            $('#ResultSpan').css("color", "green");
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBImportSuc", GetPBResourceMessages));
            //$('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
        else {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgXMLFileEmpty", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgXMLFileEmpty", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            //$('#ResultSpan').hide();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        }
    },

    GetViewPriceCustomizeFields: function (event) {
        debugger;
        var result = "";
        result = NETWORK.executeServerMethod(
                        GLOBAL.getContextPath("GetViewPriceCustomizeFields", "PriceBook", "CoreMasters"),
                        false,
                        null,
                        "",
                        true,
                        "PRICEBOOK.GetViewPriceCustomizeFieldsSuccess",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd");
    },

    GetViewPriceCustomizeFieldsSuccess: function (flag, html) {
        debugger;
        $('#MainDivForchkbody').html(html);
        $('#myCustomizePopup').modal('show');
    },
    //EXPORTViewPrice TO EXCEL
    ExportViewPricetoExcel: function () {
        debugger;
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        var DepViewId;
        var CusViewId;
        var ProdViewId;
        var CurrenViewId;
        var UnitViewId;
        var OnDate;
        if ($('#ctrlOptionDeptUPH2').val() == "") {
            DepViewId = 0;
        }
        else {
            DepViewId = OPTIONCONTROL.getControlValue(ctrlOptionDeptUPH2);
        }
        if ($('#ctrlOptionCustUPH2').val() == "") {
            CusViewId = 0;
        }
        else {
            CusViewId = OPTIONCONTROL.getControlValue(ctrlOptionCustUPH2);
        }
        if ($('#ctrlOptionProUPH2').val() == "") {
            ProdViewId = 0;
        }
        else {
            ProdViewId = OPTIONCONTROL.getControlValue(ctrlOptionProUPH2);
        }
        if ($('#ctrlOptionCurrUPH2').val() == "") {
            CurrenViewId = 0;
        }
        else {
            CurrenViewId = OPTIONCONTROL.getControlValue(ctrlOptionCurrUPH2);
        }
        if ($('#ctrlOptionUnitUPH2').val() == "") {
            UnitViewId = 0;
        }
        else {
            UnitViewId = OPTIONCONTROL.getControlValue(ctrlOptionUnitUPH2);
        }
        OnDate = DATEPICKER.getDate(ctrlOnDateUPH2);
        var currentPage = 0;
        result = NETWORK.executeServerMethod(
                                   GLOBAL.getContextPath("ExportViewPriceToExcel", "PriceBook", "CoreMasters"),
                                       true,
                                       { IsExportedAfterLoad: IsExportedAfterLoad, AccountId: CusViewId, ProductId: ProdViewId, TagId: DepViewId, OnDate: OnDate, CurrencyId: CurrenViewId, UnitId: UnitViewId, RowsCount: RowsCount, currentPage: currentPage > 0 ? currentPage - 1 : currentPage },
                                       "",
                                       true,
                                       "PRICEBOOK.ExportViewPriceToExcelSuccess",
                                       "GLOBAL.LoadingStart",
                                       "GLOBAL.LoadingEnd");
    },

    //EXPORT TO EXCEL SUCCESS
    ExportViewPriceToExcelSuccess: function (flag, fileName) {
        if (fileName != "") {
            $('#ResultSpan3').html(PRICEBOOK.getResourceValue("msgPBExportSuc", GetPBResourceMessages));
            $('#ResultSpan3').css("display", "none");
            $('#ResultSpan3').css("color", "#004d00");
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBExportSuc", GetPBResourceMessages));
            //$('input[type=text]:not(".dateinput")').val('');
            //$('#gid> tr:gt(0)').remove();
            //$('input[type=text]').show();
            //$(".panel1").hide("slow");

            //window.location = '/Focus9/PriceBook/DownloadViewPrice?file=' + fileName;
            var sUrl = window.location.href.replace(/\#/g, "");
            if (!sUrl.includes("file")) {
                window.location = sUrl + '/PriceBook/DownloadViewPrice?file=' + fileName;
            }
            else {
                window.location = sUrl;
            }
        }
        else {
            $('#ResultSpan3').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            $('#ResultSpan3').css("color", "red");
            $('#ResultSpan3').hide();
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
            return false;
        }
    },

    LoadExtraHeaderFieldsSuccess: function (flag, lstExtraFields) {
        debugger;
        $('#ResultSpan').html("");
        bPBActiveStutus_OLD = lstExtraFields.IsActive;
        CustomizeDisplayForAppend = "";
        if (lstExtraFields.sAbbr != null) {
            DATEPICKER.setDate("StartingDateH", lstExtraFields.iStartDate, true);
            if (lstExtraFields.iEndDate > 0) {
                DATEPICKER.setDate("EndingDateH", lstExtraFields.iEndDate, true);
            }
            else {
                DATEPICKER.disableControl("EndingDateH", true);
                $('#EndingDateH_checkbox').prop('checked', false);
            }
            if (lstExtraFields.sAbbr != "") {
                $('#txtAbbreviation').val(lstExtraFields.sAbbr);
            }
            if (lstExtraFields.sAbbr != "") {
                if (lstExtraFields.IsActive == true) {
                    $('#InActive').prop('checked', false);
                }
                else {
                    $('#InActive').prop('checked', true);
                }
            }
            else {
                $('#InActive').prop('checked', false);
            }
            var iCustomizedDisplayValue = lstExtraFields.CustomizeDisplay;
            iCustomizeDisplayForAppend = lstExtraFields.CustomizeDisplay;
            PRICEBOOK.SetCustomizeDisplay(iCustomizedDisplayValue);
        }
        else {
            var iCustomizedDisplayValue = lstExtraFields.CustomizeDisplay;
            iCustomizeDisplayForAppend = lstExtraFields.CustomizeDisplay;
            PRICEBOOK.SetCustomizeDisplay(iCustomizedDisplayValue);
        }
        if ($("#hdnAdd").val() == "true") {
            CellEnable();
        }
    },

    SetCustomizeDisplay: function (iCustomizeDisplay) {
        var iCount = 0;
        var arrbTemp = [];
        var bDateRangeSelected = iCustomizeDisplay > 8 ? true : false;
        while (iCount < 14) {
            arrbTemp[iCount] = Boolean(iCustomizeDisplay % 2);
            iCustomizeDisplay = parseInt(iCustomizeDisplay / 2);
            iCount++;
            if (iCustomizeDisplay == 0 || iCustomizeDisplay == 1) {
                arrbTemp[iCount] = Boolean(iCustomizeDisplay);
                break;
            }
        }
        selectedArrayLength = arrbTemp.length;
        if (selectedArrayLength < 14) {
            for (var i = 0; i < 14 - selectedArrayLength; i++) {
                arrbTemp.push(false);
            }
        }
        if (arrbTemp[0] == true) {
            $('#chkDateRange').prop("checked", false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, true);
        }
        else {
            if (bDateRangeSelected == true) {
                $('#chkDateRange').prop("checked", true);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
            }
            else {
                $('#chkDateRange').prop("checked", false);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, true);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, true);
            }
        }
        if (arrbTemp[5] == true) {
            $('#chkCustomer').prop("checked", true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 6, false);
        }
        else {
            $('#chkCustomer').prop("checked", false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 6, true);
        }
        if (arrbTemp[7] == true) {
            $('#chkDepartment').prop("checked", true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false);
        }
        else {
            $('#chkDepartment').prop("checked", false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, true);
        }
        if (arrbTemp[9] == true) {
            $('#chkQtyRange').prop("checked", true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
        }
        else {
            $('#chkQtyRange').prop("checked", false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, true);
        }
        if (arrbTemp[11] == true) {
            $('#chkCurrency').prop("checked", true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
        }
        else {
            $('#chkCurrency').prop("checked", false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, true);
        }

        if (arrbTemp[13] == true) {
            $('#chkUnit').prop("checked", true);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 10, false);
        }
        else {
            $('#chkUnit').prop("checked", false);
            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 10, true);
        }
    },

    //SetCustomizeDisplay: function (iCustomizeDisplay) {
    //     debugger;
    //    (iCustomizeDisplay == "2") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, true);
    //    (iCustomizeDisplay == "2") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, true);
    //    (iCustomizeDisplay == "8192") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, true);
    //    (iCustomizeDisplay == "512") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, true);
    //    (iCustomizeDisplay == "512") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, true);
    //    (iCustomizeDisplay == "192") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, true);
    //    (iCustomizeDisplay == "48") ? FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false) : FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, true);

    //    (iCustomizeDisplay == "2") ? $('#chkDateRange').prop("checked", true) : $('#chkDateRange').prop("checked", false);
    //    (iCustomizeDisplay == "2") ? $('#chkDateRange').prop("checked", true) : $('#chkDateRange').prop("checked", false);
    //    (iCustomizeDisplay == "8192") ? $('#chkUnit').prop("checked", true) : $('#chkUnit').prop("checked", false);
    //    (iCustomizeDisplay == "512") ? $('#chkQtyRange').prop("checked", true) : $('#chkQtyRange').prop("checked", false);
    //    (iCustomizeDisplay == "512") ? $('#chkQtyRange').prop("checked", true) : $('#chkQtyRange').prop("checked", false);
    //    (iCustomizeDisplay == "192") ? $('#chkDepartment').prop("checked", true) : $('#chkDepartment').prop("checked", false);
    //    (iCustomizeDisplay == "48") ? $('#chkCustomer').prop("checked", true) : $('#chkCustomer').prop("checked", false);

    //    if (iCustomizeDisplay < "8192") {
    //        if (iCustomizeDisplay < "512") {
    //            if (iCustomizeDisplay < "192") {
    //                if (iCustomizeDisplay < "48" && iCustomizeDisplay != 0) {
    //                    FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                    FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                    $('#chkDateRange').prop("checked", true)
    //                }
    //                else if (iCustomizeDisplay == "50") {
    //                    FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                    FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                    FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                    $('#chkCustomer').prop("checked", true)
    //                    $('#chkDateRange').prop("checked", true)
    //                }
    //            }
    //            else if (iCustomizeDisplay == "194") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                $('#chkDepartment').prop("checked", true)
    //                $('#chkDateRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "240") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                $('#chkCustomer').prop("checked", true)
    //                $('#chkDepartment').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "242") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                $('#chkCustomer').prop("checked", true)
    //                $('#chkDepartment').prop("checked", true)
    //                $('#chkDateRange').prop("checked", true)
    //            }
    //        }
    //        else {
    //            if (iCustomizeDisplay == "752") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                $('#chkCustomer').prop("checked", true)
    //                $('#chkDepartment').prop("checked", true)
    //                $('#chkQtyRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "704") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                $('#chkDepartment').prop("checked", true)
    //                $('#chkQtyRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "560") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                $('#chkCustomer').prop("checked", true)
    //                $('#chkQtyRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "514") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                $('#chkQtyRange').prop("checked", true)
    //                $('#chkDateRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "754") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                $('#chkCustomer').prop("checked", true)
    //                $('#chkDepartment').prop("checked", true)
    //                $('#chkQtyRange').prop("checked", true)
    //                $('#chkDateRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "562") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                $('#chkCustomer').prop("checked", true)
    //                $('#chkQtyRange').prop("checked", true)
    //                $('#chkDateRange').prop("checked", true)
    //            }
    //            else if (iCustomizeDisplay == "706") {
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //                FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //                $('#chkDepartment').prop("checked", true)
    //                $('#chkQtyRange').prop("checked", true)
    //                $('#chkDateRange').prop("checked", true)
    //            }
    //        }
    //    }
    //    else {
    //        if (iCustomizeDisplay == "8944") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        if (iCustomizeDisplay == "8946") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8704") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8706") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8384") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8386") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8240") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8242") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8896") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8898") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8752") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8754") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 7, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkQtyRange').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8432") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8434") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 2, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkCustomer').prop("checked", true)
    //            $('#chkDepartment').prop("checked", true)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //        else if (iCustomizeDisplay == "8194") {
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, false);
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, false)
    //            FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, false)
    //            $('#chkUnit').prop("checked", true)
    //            $('#chkDateRange').prop("checked", true)
    //        }
    //    }
    //},


    //VALIDATION ON CLICK OF UPDATE LIST BUTTON
    openUpdatePriceList: function () {
        debugger;
        PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        if (PriceBookText != '') {
            $("#btnUpdatePriceList").attr("data-bs-toggle", "modal");
        }
        else {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));

            $('#ResultSpan').css("color", "red");
            // $("#ResultSpan").show();
            //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
            return false;
        }

        $("#BasisOn").val(0);
        $(".chkUPH").attr("checked", false);

        if ($("#ctrlPriceBookUPH").length > 0) {
            OPTIONCONTROL.clear("ctrlPriceBookUPH");
        }
        if ($("#ctrlOptionProUPH").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionProUPH");
        }
        if ($("#ctrlOptionDeptUPH").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionDeptUPH");
        }
        if ($("#ctrlOptionCustUPH").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionCustUPH");
        }
        if ($("#ctrlOptionCurrUPH").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionCurrUPH");
        }
        if ($("#ctrlOptionUnitUPH").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionUnitUPH");
        }
        if ($("#ctrlOptionProUP").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionProUP");
        }
        if ($("#ctrlOptionDeptUP").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionDeptUP");
        }
        if ($("#ctrlOptionCustUP").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionCustUP");
        }
        if ($("#ctrlOptionCurrUP").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionCurrUP");
        }
        if ($("#ctrlOptionUnitUP").length > 0) {
            OPTIONCONTROL.clear("ctrlOptionUnitUP");
        }

        $("#MinQtyUPH").val("");
        $("#MinQtyUP").val("");
        $("#MaxQtyUPH").val("");
        $("#MaxQtyUP").val("");
        $("#rdoOverride1").attr("checked", false);
        $('input:radio[name=rdAction]').each(function () { $(this).prop('checked', false); });
        $("#txtIncreaseDecrease").val("");
        $("#ddlIncreaseDecrease").val(0);
        $("#ddlIncreaseDecreaseControl").val(0);
        $("#ddlIncreaseDecreasediv").hide();
        var tempId = parseInt($('#hdnTempDataForTypeId').val());
        result = NETWORK.executeServerMethod(
                       GLOBAL.getContextPath("OpenUpdatePriceList", "PriceBook", "CoreMasters"),
                       true,
                      null,
                       "",
                       true,
                       "PRICEBOOK.OpenUpdatePriceListSuccess",
                       "GLOBAL.LoadingStart",
                       "GLOBAL.LoadingEnd");
    },
    OpenUpdatePriceListSuccess: function (flag, data) {
        debugger;
        $("#rightPriceBookDiv").hide();
        $("#myPagerDiv").hide();
        $("#btnsDiv").hide();
        $("#rightPriceBookDiv2").show();
        $("#toggleDropDown").hide();
        $("#rightPriceBookDiv2").html(data);
        $('#headerRow,#leftPriceBookDiv').css({ 'pointer-events': 'none' });
        $('#rightPriceBookDiv2').css({ 'pointer-events': 'auto' });
        $('#headerRow,#leftPriceBookDiv').addClass('BlurContainer');
        $('#headerRow,#leftPriceBookDiv').removeClass('RemoveBlurContainer');

        $('#myNavbar ul').css({ 'pointer-events': 'none' });
        $('#myNavbar ul').addClass('BlurContainer');
        $('#myNavbar ul').removeClass('RemoveBlurContainer');


        ////CALLING THE METHOD OF SETTING HEIGHT OF PAGE CONTAINERS DYNAMICALLY ON DIFFRENT SCREENS
        //COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreMasters/Css/PriceBook.css", "PRICEBOOK.setHeight");

        PRICEBOOK.setHeight(27);

        //CALLING RESPONSIVE FUNCTION USED FOR SCREEN <= 767px
        PRICEBOOK.ResponsiveNew();

    },
    CloseUpdatePriceList: function () {
        $("#rightPriceBookDiv").show();
        $("#myPagerDiv").show();
        $("#btnsDiv").show();
        $("#toggleDropDown").show();
        $("#rightPriceBookDiv2").hide();
        $("#rightPriceBookDiv2").html("");
        $('#headerRow,#leftPriceBookDiv').css({ 'pointer-events': 'auto' });
        $('#rightPriceBookDiv2').css({ 'pointer-events': 'auto' });
        $('#headerRow,#leftPriceBookDiv').removeClass('BlurContainer');
        $('#headerRow,#leftPriceBookDiv').addClass('RemoveBlurContainer');

        $('#myNavbar ul').css({ 'pointer-events': 'auto' });
        $('#myNavbar ul').removeClass('BlurContainer');
        $('#myNavbar ul').addClass('RemoveBlurContainer');

        ////CALLING THE METHOD OF SETTING HEIGHT OF PAGE CONTAINERS DYNAMICALLY ON DIFFRENT SCREENS
        //COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreMasters/Css/PriceBook.css", "PRICEBOOK.setHeight");

        ////CALLING RESPONSIVE FUNCTION USED FOR SCREEN <= 767px
        //PRICEBOOK.ResponsiveNew();

        PRICEBOOK.setHeight(27);
    },
    loadPBDataonLeave: function () {
        var iPriceBookId = parseInt(OPTIONCONTROL.getControlValue("ctrlOptionProPriceBookH"));
        if (iPriceBookId <= 0) {
            $('#txtAbbreviation').val("");
            if ($('#txtAbbreviation').val() == "" || $('#txtAbbreviation').val() != OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH)) {
                $("#txtAbbreviation").val(OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH));
            }
            if ($("#hdnAdd").val() == "true") {
                CellEnable();
            }
            //PRICEBOOK.onPriceBookLeave();
        }
        else {
            PRICEBOOK.onPriceBookLeave();
        }
    },

    //PRICEBOOK OPTIONCONTROL BLUR
    onPriceBookLeave: function () {
        isLoadedFromDB = 0;
        pageNo = 1;
        iLocalPageNo = 0;
        PriceBookGridData = [];
        PriceBookGridDataPageNo = [];
        arrTempSetAuthDetails = [];
        FGRIDCONTROL.clearData("PriceBookWebGrid", true);
        //PRICEBOOK.setSerialNoColumn(0, false);
        $("#PriceBookWebGrid > tbody > tr").show();
        var TodaysDate = DATEPICKER.getDate("hdnDatepickerToSetTodayDate");
        debugger;
        DATEPICKER.setDate("StartingDateH", TodaysDate);
        DATEPICKER.setDate("EndingDateH", TodaysDate);
        //DATEPICKER.setDate("PriceBookWebGrid_option_StartingDate", TodaysDate);
        //DATEPICKER.setDate("PriceBookWebGrid_option_EndingDate", TodaysDate);
        $('#InActive').prop('checked', false);
        for (var i = 0; i < FGRIDCONTROL.getTotalRows("PriceBookWebGrid") > 0; i++) {
            var celob = FGRIDCONTROL.getCellObject("PriceBookWebGrid", i + 1, 10);
            OPTIONCONTROL.setFilter(celob.ColumnAttribute.ctrlid, "");
        }
        OPTIONCONTROL.clear("FilterProduct");
        OPTIONCONTROL.clear("FilterCurrency");
        OPTIONCONTROL.clear("FilterCustomer");
        OPTIONCONTROL.clear("FilterDepartment");
        var TotalRow = parseInt($("#PriceBookWebGrid_body")[0].children.length);
        for (Row = 1; Row <= TotalRow; Row++) {
            if (Row > 15) {
                if (Row == TotalRow) {
                    FGRIDCONTROL.deleteRows("PriceBookWebGrid", 16, 1);
                }
                else {
                    FGRIDCONTROL.deleteRows("PriceBookWebGrid", Row, 1);
                }
            }
        }
        $('#myPagerAuthPopup button').remove();
        $('#myPagerUPT button').remove();
        $('#myPager button').remove();
        $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $('#GridPBAuthorize> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $('#ResultSpan').html("");
        $('#txtAbbreviation').val("");
        $("#isRowsHighlighted").val(0);
        var iPriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        $("#" + PB_id).val($('#ctrlOptionProPriceBookH').val());
        $("#" + PB_id).attr("data-value", iPriceBookId);

        $("#" + PB_id).attr("data-text", OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH));
        if ($('#txtAbbreviation').val() == "" || $('#txtAbbreviation').val() != OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH)) {
            $("#txtAbbreviation").val(OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH));
        }

        result = NETWORK.executeServerMethod(
            GLOBAL.getContextPath("LoadExtraHeaderFields", "PriceBook", "CoreMasters"),
            true,
            { iPriceBookId: iPriceBookId, typeId: typeId },
            "",
            false,
            "PRICEBOOK.LoadExtraHeaderFieldsSuccess");
    },

    SaveCustomizedPopUpModel: function () {
        debugger
        var HighlightedText = $('#MainDivForchkbody').find('.PriceBookSelectedRowColor').find('label').text().trim();
        var Exist = [];
        $("#MainDivForchkbody > label").each(function () {
            var chkIndex = $(this).index();
            var chk = $(this).find('input');
            if (chk.is(":checked") == true) {
                var existVal = true;
                var inputChk = $(this).find("input")[0];
                var widthVal = inputChk.dataset.content;
                var fieldId = inputChk.dataset.fieldid;
                var fieldName = inputChk.dataset.fieldname;
                var data = {
                    Exist: existVal,
                    iWidth: widthVal,
                    iColumnIndex: chkIndex,
                    iFieldId: fieldId,
                    sFieldName: fieldName
                }
            }
            else {
                var existVal = false;
                var inputChk = $(this).find("input")[0];
                var widthVal = inputChk.dataset.content;
                var fieldId = inputChk.dataset.fieldid;
                var fieldName = inputChk.dataset.fieldname;
                var data = {
                    Exist: existVal,
                    iWidth: widthVal,
                    iColumnIndex: chkIndex,
                    iFieldId: fieldId,
                    sFieldName: fieldName
                }
            }

            Exist.push(data);

        })
        result = NETWORK.executeServerMethod(
         GLOBAL.getContextPath("SaveCustomizePopUp", "PriceBook", "CoreMasters"),
         true,
         { arrFieldData: Exist, HighlightedText: HighlightedText },
         "html",
         true,
         "PRICEBOOK.SaveCustomizeButtonPopUpSuccess",
        "GLOBAL.LoadingStart",
         "GLOBAL.LoadingEnd");
    },

    SaveCustomizeButtonPopUpSuccess: function (flag, data) {
        PRICEBOOK.LoadViewPriceGrid();
    },

    GetEmailTemplateView: function () {
        debugger;
        var HeaderGroup = null; var iVouchertype = "";
        var productid = OPTIONCONTROL.getControlValue("PRHProduct") == null ? 0 : OPTIONCONTROL.getControlValue("PRHProduct");
        var layoutid = OPTIONCONTROL.getControlValue("PRHLayout") == null ? 0 : OPTIONCONTROL.getControlValue("PRHLayout");
        var url = GLOBAL.getContextPath("GetEmailTemplateView", "PriceBook", "CoreMasters");
        var fnResult = NETWORK.executeServerMethod(url, true,
                    { iProductId: productid, IspriceBookPage: $("#IspriceBookPage").val() }, "JSON", false);

        if (fnResult.lValue == 1) {
            HeaderGroup = fnResult.data.lstheaderGroup;
        }
        try {
            result = NETWORK.executeServerMethod(
                                              GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                             true,
                                              {
                                                  LayoutId: layoutid,
                                                  iVouchertype: 76,
                                                  HeaderGroup: HeaderGroup, bSaveHTMLSource: true,
                                                  ModuleType: parseInt($("#hdnModuleType").val()),
                                              },
                                             "",
                                             true,
                                             "PRICEBOOK.GetEmailTemplateViewSuccess",
                                             "GLOBAL.LoadingStart",
                                             "GLOBAL.LoadingEnd"
                         );
            //PRICEBOOK.closePopup();

        }
        catch (e) {
            COMMON.prototype.showMessage(e.message);
            return;
        }
    },

    //closePopup: function () {
    //    $(PRICEBOOK.getPopupElement()).modal('hide');
    //    if ($(PRICEBOOK.getPopupElement()).hasClass("fade")) { $(".modal-backdrop").remove(); }
    //    $(PRICEBOOK.getPopupElement()).remove();        
    //},

    //getPopupElement: function () {
    //    var elePopup = null;
    //    elePopup = document.getElementById("PrintRateHistoryModal");
    //    return (elePopup);
    //},

    GetEmailTemplateViewSuccess: function (bSuccess, html) {
       // debugger;
        try {
            if (bSuccess == true) {                
                $("#EmailTemplatePRH").html(html);
                $("#PrintRateHistoryModal").modal("hide");
                $("#PrintRateHistoryModal").css({ 'display': 'none' });
                $("#divEmailTemplatePRH").modal({ backdrop: 'static' }, "show");                
                $("#divEmailTemplatePRH").css({ 'display': 'block' });
                document.getElementById("EmailTemplatePRH_btnCancel").setAttribute("onclick", "PRICEBOOK.CloseEmailTemplateView('divEmailTemplatePRH')");

                if (document.getElementById("id_InvoiceDesingCancel") != null) {
                    document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "PRICEBOOK.CloseEmailTemplateView('divEmailTemplatePRH')");
                    document.getElementById("li_InvoicePreview").setAttribute("onclick", "PRICEBOOK.PRHPreview(this);");
                    //document.getElementById("id_InvoicePrint").nextElementSibling.children[0].children[1].setAttribute("onclick", "PRICEBOOK.PRHPreview(this);");
                    //document.getElementById("id_InvoicePrint").nextElementSibling.children[0].children[0].setAttribute("onclick", "PRICEBOOK.PRHprint(this);");

                    document.getElementById("menu-preview").setAttribute("onclick", "PRICEBOOK.PRHPreview(this);");
                    document.getElementById("menu-print").setAttribute("onclick", "PRICEBOOK.PRHprint(this);");
                }
            }
        } catch (e) {
            COMMON.prototype.showMessage(e.message);
            return;
        }
    },

    CloseEmailTemplateView: function (id) {
        //debugger;       
        $('#' + id).modal('hide');
        $('#' + id).css({ 'display': 'none' });
        $("#PrintRateHistoryModal").modal("show");
        $("#PrintRateHistoryModal").css({ 'display': 'block' });
    },

    PRHClear: function () {
        if ($("#PRHProduct") != null && $("#PRHLayout") != null) {
            OPTIONCONTROL.clear("PRHProduct");
            OPTIONCONTROL.clear("PRHLayout");
        }
    },

    PRHClose: function () {      
        PRICEBOOK.PRHClear();       
        $("#PrintRateHistoryModal").modal('hide');        
    },

    PRHprint: function (printEle) {
        var iproductid;
        var ilayoutid;
        var isFromInvoiceDesigner = false;
        var invoicePrint = null;
        var callservermethod = true;
        try {
            if (document.getElementById("id_InvoicePrint"))
                invoicePrint = document.getElementById("id_InvoicePrint").nextElementSibling.children[0].children[0];
            if (invoicePrint) {
                isFromInvoiceDesigner = invoicePrint.getAttribute("data-sfromdesigner");
                isFromInvoiceDesigner = isFromInvoiceDesigner == "true" ? true : false;
                if (printEle != invoicePrint) {
                    isFromInvoiceDesigner = false;
                }
            }
            if (isFromInvoiceDesigner) {
                ilayoutid = parseInt(invoicePrint.getAttribute("data-layoutid"));
            }
            else {
                ilayoutid = OPTIONCONTROL.getControlValue("PRHLayout") == null ? 0 : OPTIONCONTROL.getControlValue("PRHLayout");
                callservermethod = PRICEBOOK.ValidatePrint();
            }
            if (callservermethod) {
                iproductid = OPTIONCONTROL.getControlValue("PRHProduct") == null ? 0 : OPTIONCONTROL.getControlValue("PRHProduct");
                ilayoutid = OPTIONCONTROL.getControlValue("PRHLayout") == null ? 0 : OPTIONCONTROL.getControlValue("PRHLayout");
                result = NETWORK.executeServerMethod(
                GLOBAL.getContextPath("PrintLayout", "PriceBook", "CoreMasters"),
                                    true,
                                    {
                                        iTypeId: $('#hdnTypeId').val(), layouId: ilayoutid,
                                        layoutText: OPTIONCONTROL.getControlText("PRHLayout"), iproductid: iproductid,
                                        IspriceBookPage: $('#IspriceBookPage').val(), objLayoutInfoParam: objLayoutInformation,
                                        iVoucherType: 76, iHeaderId: 0, bPrintLayout: true, bFromDesigner: isFromInvoiceDesigner
                                    },
                                    "",
                                    true,
                                    "PRICEBOOK.PrintLayoutSuccess",
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd"
                                );
            } else {
                return;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{PRICEBOOK.PRHprint}" + err.message, "EXCEPTION")
        }
    },

    PrintLayoutSuccess: function (bSuccess, data) {
        var strmsg = data;
        var bisPrint = true;
        if (bSuccess == false) {
            return;
        }
        if (data != undefined) {
            var w = window.open("", "_blank");
            if (FCommon.UI.isValidObject(w)) {
                w.location = GLOBAL.getContextPath("GetDocumentToPrintFromSource", "PriceBook", "CoreMasters") + '?sFilePath=' + data;
            }
            else {
                var msg = "popup is blocked for this page";
                COMMON.prototype.showMessage(msg);
                return;
            }
        }
    },

    PRHPreview: function (previewEle) {
        var iproductid;
        var ilayoutid;
        var isFromInvoiceDesigner = false;
        var invoicePreview = null; var invoicePreview2 = null;
        var successcallback = "";
        var callservermethod = true;
        try {
            invoicePreview = document.getElementById("li_InvoicePreview");
            if (document.getElementById("id_InvoicePrint"))
                invoicePreview2 = document.getElementById("id_InvoicePrint").nextElementSibling.children[0].children[1];
            if (invoicePreview) {
                isFromInvoiceDesigner = invoicePreview.getAttribute("data-sfromdesigner");
                isFromInvoiceDesigner = isFromInvoiceDesigner == "true" ? true : false;
                if (previewEle != invoicePreview && previewEle != invoicePreview2) {
                    isFromInvoiceDesigner = false;
                }
            }
            if (isFromInvoiceDesigner) {
                successcallback = invoicePreview.getAttribute("data-successcallback");
                ilayoutid = parseInt(invoicePreview.getAttribute("data-layoutid"));
            }
            else {
                successcallback = "PRICEBOOK.PreviewLayoutSuccess";
                ilayoutid = OPTIONCONTROL.getControlValue("PRHLayout") == null ? 0 : OPTIONCONTROL.getControlValue("PRHLayout");
                callservermethod = PRICEBOOK.ValidatePrint();
            }

            if (callservermethod) {
                iproductid = OPTIONCONTROL.getControlValue("PRHProduct") == null ? 0 : OPTIONCONTROL.getControlValue("PRHProduct");

                result = NETWORK.executeServerMethod(
                GLOBAL.getContextPath("PreviewLayout", "PriceBook", "CoreMasters"),
                                    true,
                                    {
                                        iTypeId: $('#hdnTypeId').val(), layouId: ilayoutid, layoutText: OPTIONCONTROL.getControlText("PRHLayout"),
                                        iproductid: iproductid, IspriceBookPage: $('#IspriceBookPage').val(), objLayoutInfoParam: objLayoutInformation,
                                        iVoucherType: 76, iHeaderId: 0, bPrintLayout: false, bFromDesigner: isFromInvoiceDesigner
                                    },
                                    "",
                                    true,
                                    successcallback,
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd"
                                );
            }
            else {
                return;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{PRICEBOOK.PRHPreview}" + err.message, "EXCEPTION");
        }
    },

    PreviewLayoutSuccess: function (bSuccess, data) {
        debugger;            
        $('#PriceBookPopUp_Preview').modal('show');
        $("#PriceBookPopUp_Preview_Body").html(data);        
        document.getElementById("PriceBookPopUp_Preview_Body").style.height = "500px";
    },

    //On click of Avd Excel Import button
    AdvExcelImport: function () {
        debugger;
        PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        result = NETWORK.executeServerMethod(
                                  GLOBAL.getContextPath("AdvanceImportData", "PriceBook", "CoreMasters"),
                                  true,
                                  { sPriceBookName: PriceBookName },
                                  "html",
                                  true,
                                  "PRICEBOOK.AdvanceImportDataSuccess",
                                  "GLOBAL.LoadingStart",
                                   "GLOBAL.LoadingEnd");



    },

    //AvdExcelImport click success method for Showing Popup.
    AdvanceImportDataSuccess: function (flag, data) {
        try {
            if (flag) {
                $('#AdvExcelImportdiv').html('');
                $('#AdvExcelImportdiv').html(data);
                $('#AdvanceImportModalDiv').modal('show');

            }
            else {
                COMMON.prototype.showMessage(data.strErrorMsg);
                document.getElementById('AIDtxtFilepath').value = "";
                return false;
            }
            if ($('.modal-backdrop').length > 0) {
                $('.modal-backdrop').removeClass('modal-backdrop');
            }
        } catch (e) {
            COMMON.prototype.showMessage(e.message);
            document.getElementById('AIDtxtFilepath').value = "";
            return false;
        }
    },

    ValidatePrint: function () {
        var iproductid = OPTIONCONTROL.getControlValue("PRHProduct") == null ? 0 : OPTIONCONTROL.getControlValue("PRHProduct");
        if (iproductid <= 0) {
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgAUSelProd", GetPBResourceMessages));
            return false;
        }
        var ilayoutid = OPTIONCONTROL.getControlValue("PRHLayout") == null ? 0 : OPTIONCONTROL.getControlValue("PRHLayout");
        if (ilayoutid <= 0) {
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgSelectLayout", GetPBResourceMessages));
            return false;
        }
        return true;
    },

    GetPriceBookDetailsForAuthorization: function (e) {
        arrTempSetAuthDetails = [];
        //$('#myPagerAuthPopup li').remove();
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH) == null ? 0 : OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        if (PriceBookId > 0) {
            $("#btnAuthorize").attr("data-toggle", "modal");
            var PoductId = OPTIONCONTROL.getControlValue("FilterProduct") > 0 ? OPTIONCONTROL.getControlValue("FilterProduct") : 0;
            var AccountId = OPTIONCONTROL.getControlValue("FilterCustomer") > 0 ? OPTIONCONTROL.getControlValue("FilterCustomer") : 0;
            var TagId = OPTIONCONTROL.getControlValue("FilterDepartment") > 0 ? OPTIONCONTROL.getControlValue("FilterDepartment") : 0;
            var CurrencyId = OPTIONCONTROL.getControlValue("FilterCurrency") > 0 ? OPTIONCONTROL.getControlValue("FilterCurrency") : 0;
            StartDate = DATEPICKER.getDate("StartingDateH");
            EndDate = DATEPICKER.getDate("EndingDateH");
            var StartRowIndex = 1;
            var bActive = false;

            if (e != undefined) {
                var textValue = e.text;
                var SlectedIndex = $('#myPagerAuthPopup .clsSelectedIndex')[0].parentElement.value;
                if (textValue == PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages)) {
                    StartRowIndex = SlectedIndex - 1;
                }
                else if (textValue == PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages)) {
                    StartRowIndex = SlectedIndex + 1;
                }
                else {
                    StartRowIndex = e.parentElement.value;
                }
            }
            if ($("#InActive").is(':checked')) {
                bActive = false;
            }
            else {
                bActive = true;
            }
            result = NETWORK.executeServerMethod(
                         GLOBAL.getContextPath("GetPriceBookDetailsForAuthorization", "PriceBook", "CoreMasters"),
                         true,
                         { iPriceBookId: PriceBookId, iPoductId: PoductId, iAccountId: AccountId, iTagId: TagId, iStartDate: StartDate, iEndDate: EndDate, iCurrencyId: CurrencyId, bActive: bActive, iCurrSelectedRowIndex: StartRowIndex },
                         "JSON",
                         false,
                         "PRICEBOOK.GetPriceBookDetailsForAuthorizationSuccess",
                         "",
                         "", StartRowIndex);
        }
        else {
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBSelect", GetPBResourceMessages));
            return false;
        }
    },

    GetPriceBookDetailsForAuthorizationSuccess: function (flag, data, StartRowIndex) {
        FGRIDCONTROL.clearData("GridPBAuthorize", true);
        $("#myAuthorizePopup").modal('show');
        $('#myPagerAuthPopup button').remove();
        $('#GridPBAuthorize> tbody> tr').removeClass('PriceBookSelectedRowColor');

        var objData = null;
        var arrNew = data;
        if ((flag == true && arrNew[0].length == 0)) {
            if (bSetAuthorizationStatusSuccess == false) {
                COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgNoRecordFound", GetPBResourceMessages));
                return false;
            }
        }
        else {
            debugger
            if (arrNew[0][0].ProductId == 0) {
                if (bSetAuthorizationStatusSuccess == false) {
                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgNoRecordFound", GetPBResourceMessages));
                    return false;
                }
            }
            else {
                tag = {};
                tag.iColumnIndex = 2;
                tag.GridCtrlId = "GridPBAuthorize";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.ProductId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);

                tag = {};
                tag.iColumnIndex = 4;
                tag.GridCtrlId = "GridPBAuthorize";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.AccountId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);

                tag = {};
                tag.iColumnIndex = 5;
                tag.GridCtrlId = "GridPBAuthorize";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.TagId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                for (iRowCounter = 0; iRowCounter < Object.keys(arrNew[0]).length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter];

                    cellobj1 = FGRIDCONTROL.getCellObject("GridPBAuthorize", iRowCounter + 1, 1);
                    cellobj1.setCellData("value", objData.SequenceNumber);
                    cellobj1.setCellText(objData.SequenceNumber);

                    cellobj3 = FGRIDCONTROL.getCellObject("GridPBAuthorize", iRowCounter + 1, 3);
                    cellobj3.setCellData("value", objData.Val0);
                    cellobj3.setCellText(Number(objData.Val0).toFixed(parseInt($("#NoOfDecimal").val())));

                    cellobj6 = FGRIDCONTROL.getCellObject("GridPBAuthorize", iRowCounter + 1, 6);
                    cellobj6.setCellData("value", objData.AuthReason);
                    cellobj6.setCellText(objData.AuthReason);

                    for (var i = 0; i < arrTempSetAuthDetails.length; i++) {
                        if (parseInt(objData.SequenceNumber) == parseInt(arrTempSetAuthDetails[i][0].Data.value)) {
                            $(cellobj1.cell).find('input').prop("checked", true);
                        }
                    }
                }
            }
        }

        if ($('#myPagerAuthPopup button').length == 0) {


            if (arrNew[1] > 1) {

                //$("#myPagerAuthPopup").append('<li><a href="#" class="first_link disable" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)">' + PRICEBOOK.getResourceValue("cboOEFirst", GetPBResourceMessages) + '</a></li>');
                $("#myPagerAuthPopup").append('<button type="button" class="Fbutton" style="padding:2px 5px; margin-right:5px;"><a href="#" class="first_link disable" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOEFirst", GetPBResourceMessages) + '</a></button>');

                //$("#myPagerAuthPopup").append('<li><a href="#" class="prev_link disable" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></li>');
                $("#myPagerAuthPopup").append('<button type="button" class="Fbutton" style="padding:2px 5px; margin-right:5px;"><a href="#" class="prev_link disable" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("Previous", GetPBResourceMessages) + '</a></button>');

                //for (var i = 0; i < arrNew[1]; i++) {
                //    $("#myPagerAuthPopup").append('<li id="activePager' + (i + 1) + '" class="activePager" value="' + (i + 1) + '"><a href="#" id="AactivePagerAuth' + (i + 1) + '" class="AactivePagerAuth">' + (i + 1) + '</a></li>');
                //}
                for (var i = 0; i < arrNew[1]; i++) {
                    $("#myPagerAuthPopup").append('<button type="button" id="activePager' + (i + 1) + '" value="' + (i + 1) + '" style="padding:2px 0px; width:20px; margin-right:5px;background-color:#44799b !important;" class="Fbutton activePager"><a href="#" style="border-radius:0px;text-decoration:none;color:black;padding:2px 0px;" id="AactivePagerAuth' + (i + 1) + '" class="AactivePagerAuth">' + (i + 1) + '</a></button>');
                }

                //$("#myPagerAuthPopup").append('<li><a href="#" class="next_link" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></li>');
                $("#myPagerAuthPopup").append('<button type="button" class="Fbutton" style="padding:2px 5px;" ><a href="#" class="next_link" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("lblNext", GetPBResourceMessages) + '</a></button>');

                //$("#myPagerAuthPopup").append('<li><a href="#" class="last_link" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)">' + PRICEBOOK.getResourceValue("cboOELast", GetPBResourceMessages) + '</a></li>');
                $("#myPagerAuthPopup").append('<button type="button" class="Fbutton" style="padding:2px 5px;" ><a href="#" class="last_link" onclick="return PRICEBOOK.GetPriceBookDetailsForAuthorization(this)" style="border-radius:0px;text-decoration:none;color:black;">' + PRICEBOOK.getResourceValue("cboOELast", GetPBResourceMessages) + '</a></button>');

                //$('#AactivePager1').addClass("theme_background-color theme_color")
                //$('#AactivePager1').css("color", "#ffffff");
                //$('#AactivePager1').addClass("clsSelectedIndex");

                $('.AactivePagerAuth').css("background-color", "white");
                $('.AactivePagerAuth').css("color", "black");
                $('.AactivePagerAuth').removeClass("clsSelectedIndex");
                $('#AactivePagerAuth' + StartRowIndex).addClass("theme_background-color theme_color")
                $('#AactivePagerAuth' + StartRowIndex).css("color", "#ffffff");
                $('#AactivePagerAuth' + StartRowIndex).addClass("clsSelectedIndex");

                if (StartRowIndex == 1) {
                    //$('.prev_link').hide();
                    $('.first_link').addClass('disable');
                    $('.prev_link').addClass('disable');
                    $('.next_link').removeClass('disable');
                    $('.last_link').removeClass('disable');
                    //$('.next_link').show();
                    //$('.last_link').show();
                }
                else if (StartRowIndex == $('#AactivePagerAuth' + StartRowIndex)[0].parentElement.parentElement.children.length - 4) {
                    //$('.next_link').hide();
                    $('.next_link').addClass('disable');
                    $('.last_link').addClass('disable');
                    $('.first_link').removeClass('disable');
                    $('.prev_link').removeClass('disable');
                    //$('.prev_link').show();
                    //$('.first_link').show();
                }
                else {
                    $('.prev_link').removeClass('disable');
                    $('.first_link').removeClass('disable');
                    $('.next_link').removeClass('disable');
                    $('.last_link').removeClass('disable');
                    //$('.prev_link').show();
                    //$('.first_link').show();
                    //$('.next_link').show();
                    //$('.last_link').show();
                }
                $(".activePager").hide();
                $($('#myPagerAuthPopup .clsSelectedIndex')[0].parentNode).show();
                $($('.clsSelectedIndex')[0].parentNode).show();
            }
        }
        else {
            $(".activePager").hide();
            $($('.clsSelectedIndex')[0].parentNode).show();
            $($('.clsSelectedIndex')[0].parentNode).show()
            $($('#myPagerAuthPopup .clsSelectedIndex')[0].parentNode).show();
            $($('#myPagerAuthPopup .clsSelectedIndex')[0].parentNode).show()
        }
        bSetAuthorizationStatusSuccess = false;
    },

    FillTempSetAuthDetailsArray: function (data, event) {     
        if (data.bChecked==true) {
            $("#GridPBAuthorize_row_" + data.iRow + "").addClass("PriceBookSelectedRowColor");
        }
         else{
            $("#GridPBAuthorize_row_" + data.iRow + "").removeClass("PriceBookSelectedRowColor");
        }
        CurrRowDataRemoved = false;
        if (data.iRow > 0) {
            var cellObj = FGRIDCONTROL.getCellObject("GridPBAuthorize", data.iRow, data.iColumn);
            var CurrSeqNo = parseInt(cellObj.iRow);//cellObj.getCellText()
            var CurrRowData = FGRIDCONTROL.getRowValue("GridPBAuthorize", data.iRow);
            if (arrTempSetAuthDetails.length > 0) {
                for (var i = 0; i < arrTempSetAuthDetails.length ; i++) {
                    var AlreadyCheckedSeqNo = parseInt(arrTempSetAuthDetails[i][0].iRow);
                    if (CurrSeqNo == AlreadyCheckedSeqNo) {
                        arrTempSetAuthDetails.splice(i, 1);
                        CurrRowDataRemoved = true;
                    }
                }
            }
            if (CurrRowDataRemoved == false) {
                if (CurrRowData[2].Value != "") {
                    arrTempSetAuthDetails.push(CurrRowData);
                }
            }
        }
        else {           
            $(data.Grid.children[1]).find('input[type="checkbox"]').each(function () {
                var rowIndex = this.parentElement.parentElement.rowIndex - 2;
                var cellObj = FGRIDCONTROL.getCellObject("GridPBAuthorize", rowIndex, data.iColumn);
                var CurrSeqNo = parseInt(cellObj.iRow);//cellObj.getCellText()
                var CurrRowData = FGRIDCONTROL.getRowValue("GridPBAuthorize", data.iRow);
                CurrRowData = FGRIDCONTROL.getRowValue("GridPBAuthorize", rowIndex);
                if (arrTempSetAuthDetails.length > 0) {
                    for (var i = 0; i < arrTempSetAuthDetails.length ; i++) {
                        var AlreadyCheckedSeqNo = parseInt(arrTempSetAuthDetails[i][0].Value == true ? CurrSeqNo : arrTempSetAuthDetails[i][0].Value);
                        if (CurrSeqNo == AlreadyCheckedSeqNo) {
                            if (data.Checkbox.checked == false) {
                                arrTempSetAuthDetails.splice(i, 1);
                                CurrRowDataRemoved = true;
                            }
                        }
                    }
                }
                if (CurrRowDataRemoved == false) {
                    if (CurrRowData[1].Value != "") {
                        arrTempSetAuthDetails.push(CurrRowData);
                    }
                }
            })
        }
    },

    SetAuthorizationStatus: function (ele) {
        debugger;
        bSetAuthorizationStatusSuccess = false;
        FGRIDCONTROL.update("GridPBAuthorize");
        var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH) == null ? 0 : OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        if (PriceBookId > 0) {
            var Status = $(ele).attr("data-val");
            var resourceMessage = "";
            var arraySequenceNos = [];
            var arrayAuthReason = [];
            if (arrTempSetAuthDetails.length > 0) {
                for (var i = 0; i < arrTempSetAuthDetails.length ; i++) {
                    if (arrTempSetAuthDetails[i] != undefined) {
                        if (arrTempSetAuthDetails[i].length > 0) {
                            arraySequenceNos.push(parseInt(arrTempSetAuthDetails[i][0].Data.value));
                            arrayAuthReason.push(arrTempSetAuthDetails[i][5].Data.value);
                        }
                    }
                }

                result = NETWORK.executeServerMethod(
                            GLOBAL.getContextPath("SetAuthorizationStatus", "PriceBook", "CoreMasters"),
                            true,
                            { iPriceBookId: PriceBookId, sPriceBookName: PriceBookName, iSelectedStatus: Status, arrSequenceNos: arraySequenceNos, arrAuthReason: arrayAuthReason },
                            "JSON",
                            false,
                            "PRICEBOOK.SetAuthorizationStatusSuccess",
                            "",
                            "", Status);
            }
            else {
                switch (iSelectedStatus) {
                    case "1":
                        resourceMessage = PRICEBOOK.getResourceValue("AuthIns1", GetPBResourceMessages);
                        break;
                    case "2":
                        resourceMessage = PRICEBOOK.getResourceValue("AuthIns2", GetPBResourceMessages);
                        break;
                    case "3":
                        resourceMessage = PRICEBOOK.getResourceValue("AuthIns3", GetPBResourceMessages);
                        break;
                    default:
                        resourceMessage = "";
                        break;
                }
                COMMON.prototype.showMessage(resourceMessage);
                return false;
            }
        }
        else {
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBSelect", GetPBResourceMessages));
            return false;
        }
    },

    SetAuthorizationStatusSuccess: function (flag, data, Status) {
        debugger;
        if (flag && data == true) {
            bSetAuthorizationStatusSuccess = true;
            PRICEBOOK.GetPriceBookDetailsForAuthorization();
            $("#btnSelectAllAuth").val("Select All");
            switch (Status) {
                case "1":
                    resourceMessage = PRICEBOOK.getResourceValue("msgPBAuthorizeSuccess", GetPBResourceMessages);
                    break;
                case "2":
                    resourceMessage = PRICEBOOK.getResourceValue("msgPBRejectSuccess", GetPBResourceMessages);
                    break;
                case "3":
                    resourceMessage = PRICEBOOK.getResourceValue("msgPBStopSuccess", GetPBResourceMessages);
                    break;
                default:
                    resourceMessage = "";
                    break;
            }
            debugger;
            COMMON.prototype.showMessage(resourceMessage);
            PRICEBOOK.UpdateAlerts();
            return false;
        }
        else {
            COMMON.prototype.showMessage(data);
            return false;
        }
    },

    FilterData: function () {
        var filteredData = [];
        var PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
        var synMgrid = document.getElementById('PriceBookWebGrid');
        if (PriceBookText == "") {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterName", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            return false;
        }
        else if (PriceBookText != "" && isLoadedFromDB == 0) {
            $('#ResultSpan').html(PRICEBOOK.getResourceValue("PB_LoadPBDataToFilter", GetPBResourceMessages));
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("PB_LoadPBDataToFilter", GetPBResourceMessages));
            $('#ResultSpan').css("color", "red");
            return false;
        }
        else {
            var ProductFilterValue = (OPTIONCONTROL.getControlText("FilterProduct")).trim();
            var CurrencyFilterValue = (OPTIONCONTROL.getControlText("FilterCurrency")).trim();
            var CustomerFilterValue = (OPTIONCONTROL.getControlText("FilterCustomer")).trim();
            var DepartmentsFilterValue = (OPTIONCONTROL.getControlText("FilterDepartment")).trim();
            var StartingDateFilter = DATEPICKER.getDate("StartingDateH");
            var EndingDateFilter = DATEPICKER.getDate("EndingDateH");
            for (var iRowIndex = 3; iRowIndex < synMgrid.rows.length; iRowIndex++) {
                var rowData = FGRIDCONTROL.getRowValue("PriceBookWebGrid", iRowIndex - 2);
                if (addDataToFilter.length < 15) {
                    addDataToFilter.push(rowData);
                }
            }
            debugger;
            for (var iRowCount = 0; iRowCount < addDataToFilter.length; iRowCount++) {
                if ((ProductFilterValue == addDataToFilter[iRowCount][0].Text.trim() || (ProductFilterValue == "")) &&
                    (DepartmentsFilterValue == addDataToFilter[iRowCount][2].Text.trim() || (DepartmentsFilterValue == "")) &&
                    (CurrencyFilterValue == addDataToFilter[iRowCount][6].Text.trim() || (CurrencyFilterValue == "")) &&
                    (CustomerFilterValue == addDataToFilter[iRowCount][5].Text.trim() || (CustomerFilterValue == "")) &&
                    (parseInt(addDataToFilter[iRowCount][3].Value.trim()) >= StartingDateFilter || (StartingDateFilter == "")) &&
                    (parseInt(addDataToFilter[iRowCount][4].Value.trim()) <= EndingDateFilter || (EndingDateFilter == ""))) {
                    filteredData.push(addDataToFilter[iRowCount]);
                }
            }
            debugger;
            FGRIDCONTROL.clearData("PriceBookWebGrid", true);
            for (var iRowCounter = 0; iRowCounter < filteredData.length; iRowCounter++) {

                if (parseInt(filteredData[iRowCounter][0].Value) > 0) {
                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 1);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, filteredData[iRowCounter][0].Value);
                    var sProductText = OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", filteredData[iRowCounter][0].Value);
                    cellobj.setCellText(sProductText);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 2);
                    cellobj.setCellData("value", filteredData[iRowCounter][0].Value);
                    cellobj.setCellText(filteredData[iRowCounter][1].Value);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 3);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, filteredData[iRowCounter][2].Value);
                    var sTagText = OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", filteredData[iRowCounter][2].Value);
                    cellobj.setCellText(sTagText);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 6);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, filteredData[iRowCounter][5].Value);
                    var sCustomerText = OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", filteredData[iRowCounter][5].Value);
                    cellobj.setCellText(sCustomerText);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 7);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, filteredData[iRowCounter][6].Value);
                    var sCurrText = OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", filteredData[iRowCounter][6].Value);
                    cellobj.setCellText(sCurrText);


                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 10);
                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, filteredData[iRowCounter][9].Value);
                    var sUnitText = OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", filteredData[iRowCounter][9].Value);
                    cellobj.setCellText(sUnitText);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 4);
                    cellobj.setCellData("value", filteredData[iRowCounter][3].Value);
                    cellobj.setCellText(filteredData[iRowCounter][3].Text);
                    debugger;
                    DATEPICKER.setDate("PriceBookWebGrid_option_StartingDate", filteredData[iRowCounter][3].Value, true);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 5);
                    cellobj.setCellData("value", filteredData[iRowCounter][4].Value);
                    cellobj.setCellText(filteredData[iRowCounter][4].Text);
                    debugger;
                    DATEPICKER.setDate("PriceBookWebGrid_option_EndingDate", filteredData[iRowCounter][4].Value, true);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 8);
                    cellobj.setCellData("value", filteredData[iRowCounter][7].Value);
                    cellobj.setCellText(filteredData[iRowCounter][7].Value);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 9);
                    cellobj.setCellData("value", filteredData[iRowCounter][8].Value);
                    cellobj.setCellText(filteredData[iRowCounter][8].Value);

                    for (var iRate = 10; iRate < 25; iRate++) {
                        var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, iRate + 1);
                        cellobj.setCellData("value", filteredData[iRowCounter][iRate].Value);
                        cellobj.setCellText(Number(filteredData[iRowCounter][iRate].Value).toFixed(parseInt($("#NoOfDecimal").val())));
                    }

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 25);
                    cellobj.setCellData("value", filteredData[iRowCounter][24].Value);
                    cellobj.setCellText(filteredData[iRowCounter][24].Value);

                    var cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter + 1, 28);
                    cellobj.setCellData("value", filteredData[iRowCounter][27].Value);
                    switch (parseInt(filteredData[iRowCounter][27].Value)) {
                        case 0:
                            cellobj.setCellText("Pending");
                            break;
                        case 1:
                            cellobj.setCellText("Authorized");
                            break;
                        case 2:
                            cellobj.setCellText("Rejected");
                            break;
                        case 3:
                            cellobj.setCellText("Stopped");
                            break;
                        default:
                            cellobj.setCellText("Edited");
                            break;
                    }
                }

            }
            $("#myPager").hide();
            PRICEBOOK.setHeight(27);
        }
    },

    toggleCustomizeDropDown: function () {
        $('#ddlMenu').toggle();
        if ($(window).width() > 768) {
            if ($(window).width() >= 768 && $(window).width() <= 991) {
                if ($("#hdnLanguageId").val() != 0 && $("#hdnLanguageId").val() != 4) {
                    //$('.ddlMenuOnLoad').css("margin", "31px -145px 0px 0px");
                }
                else {
                    //$('.ddlMenuOnLoad').css("margin", "31px 96px 0px 0px");
                }
            }
            else {
                if ($("#hdnLanguageId").val() != 0 && $("#hdnLanguageId").val() != 4) {
                    //$('.ddlMenuOnLoad').css("margin", "43px -145px 0px 0px");
                }
                else {
                    //$('.ddlMenuOnLoad').css("margin", "44px 96px 0px 0px");
                }
            }
        }
        else {
            if ($("#hdnLanguageId").val() != 0 && $("#hdnLanguageId").val() != 4) {
                //$('.ddlMenuOnLoad').css("margin", "1px -44px -42px 57px");
            }
            $('#ddlMenu').removeClass("ddlMenuOnLoad");
            $('#ddlMenu').addClass("ddlMenuOnLoadSmall");
        }
        if ($($(this).find('i')).hasClass('clsBlueColor')) {
            $($(this).find('i')).removeClass('clsBlueColor');
            $($(this).find('i')).addClass('ddlclsBlueColor');
        }
        else {
            $($(this).find('i')).addClass('clsBlueColor');
            $($(this).find('i')).removeClass('ddlclsBlueColor');
        }
        //e.stopimmediatepropagation();
    },
    
    CustomizechkClick: function (ele) {
        debugger
        $('#ddlMenu').toggle();
        var chkId = $($(ele)[0]).find("input")[0].id;
        var chkValue = $("#" + chkId).val();
        var iColumn = parseInt(chkValue) + 1;
        var iColumnForQtyRange = 9;
        var iColumnForDateRange = 5;
        iIsEdited = 1;
        if (!$("#" + chkId).is(":checked")) {
            if (iColumn == 7) {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, true);
            }
            else if (iColumn == 8) {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, true);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumnForQtyRange, true);
            }
            else if (iColumn == 4) {
                debugger;
                var TodaysDate = DATEPICKER.getDate("hdnDatepickerToSetTodayDate");
                DATEPICKER.setDate("PriceBookWebGrid_option_StartingDate", TodaysDate);
                DATEPICKER.setDate("PriceBookWebGrid_option_EndingDate", TodaysDate);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, true);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumnForDateRange, true);
            }
            else {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, true);
            }
        }
        else {
            if (iColumn == 7) {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, false);
            }
            else if (iColumn == 8) {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, false);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumnForQtyRange, false);
            }
            else if (iColumn == 4) {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, false);
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumnForDateRange, false);
                //var synMgrid = document.getElementById('PriceBookWebGrid');
                //cell = FGRIDCONTROL.getCellObject(synMgrid, 1, 3);
                //cell2 = FGRIDCONTROL.getCellObject(synMgrid, 1, 4);
                //var StartingDateValue = OPTIONCONTROL.getControlValue("PriceBookWebGrid_option_StartingDate");
                //var StartingDateText = OPTIONCONTROL.getControlText("PriceBookWebGrid_option_StartingDate");
                //cell.setCellData("value", StartingDateValue);
                //cell.setCellText(StartingDateText);
                //var EndingDateValue = OPTIONCONTROL.getControlValue("PriceBookWebGrid_option_EndingDate");
                //var EndingDateText = OPTIONCONTROL.getControlText("PriceBookWebGrid_option_EndingDate");
                //cell2.setCellData("value", EndingDateValue);
                //cell2.setCellText(EndingDateText);
            }
            else {
                FGRIDCONTROL.hideColumn("PriceBookWebGrid", iColumn, false);
            }
        }
        //e.stopimmediatepropagation();
    },

    hideFilterPannel: function () {
        if ($(window).width() > 768) {
            //$('#leftPriceBookDiv').removeClass("Form-Tabs-Container");
            $('#rightPriceBookDiv').removeClass("rightPageLoadClass");
            $('#rightPriceBookDiv').removeClass('rightPageLoadClass');
            //$('#leftPriceBookDiv').removeClass('Form-Tabs-Container');
            $('#rightPriceBookDiv').addClass('AfterRightToggleClass');
            $('#leftPriceBookDiv').addClass('AfterLeftToggleClass');
            $('#toggleDropDown').css("margin-bottom", "-15px");
            $('#leftPriceBookDiv').hide();
            $('#ShowFilter').show();
            //$('#btnsDiv').removeClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
            //$('#btnsDiv').addClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
            //$('#toggleDropDowndiv').css("margin-top", "-27px");
            $('#myPager').removeClass("myPager");
            $('#myPager').removeClass("myPagerSmallScreen");
            $('#myPager').removeClass("myPager");
            $('#myPager').removeClass("myPager914");
            $('#myPager').removeClass("myPager1024");
            $('#myPager').addClass('myPagerToggleClick');
            //$('#btnsDiv').css("margin-top", "-15px");
            $('#btnsDiv').css("margin-top", "25px");

            if ($("#hdnLanguageId").val() != 0 && $("#hdnLanguageId").val() != 4) {
                $("#rightPriceBookDiv").addClass("PriceBookPage_ToggleFilter")
            }
            //COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreMasters/Css/PriceBook.css", "PRICEBOOK.setHeight");

            PRICEBOOK.setHeight(27);

            $('#ClosedDiv').show();
            $("#rightPriceBookDiv").removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12').addClass('col-lg-11 col-md-11 col-sm-12 col-xs-12')
        }
    },

    showFilterPannel: function () {
        debugger;
        if ($(window).width() > 768) {
            if ($(window).width() <= 991) {
                $('#myPager').removeClass("myPager");
                $('#myPager').removeClass("myPagerSmallScreen");
                $('#myPager').removeClass("myPager914");
                $('#myPager').removeClass("myPager1024");
                $('#myPager').removeClass('myPagerToggleClick');
                $('#myPager').addClass("myPager");
                //$('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').addClass('rightPageLoadClass');
                //$('#leftPriceBookDiv').addClass('Form-Tabs-Container');
                $('#rightPriceBookDiv').removeClass('AfterRightToggleClass');
                $('#leftPriceBookDiv').removeClass('AfterLeftToggleClass');
                $('#toggleDropDown').css("margin-bottom", "auto");
                $('#leftPriceBookDiv').show();
                $('#ShowFilter').hide();
                //$('#btnsDiv').css("margin-top", "-115px");
                //$('#btnsDiv').removeClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
                //$('#btnsDiv').addClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
                //$('#toggleDropDowndiv').css("margin-top", "-10px");

            }
            else if ($(window).width() <= 1024) {
                $('#myPager').removeClass("myPager");
                $('#myPager').removeClass("myPagerSmallScreen");
                $('#myPager').removeClass("myPager914");
                $('#myPager').removeClass("myPager1024");
                $('#myPager').removeClass('myPagerToggleClick');
                $('#myPager').addClass("myPager");
                //$('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').addClass('rightPageLoadClass');
                //$('#leftPriceBookDiv').addClass('Form-Tabs-Container');
                $('#rightPriceBookDiv').removeClass('AfterRightToggleClass');
                $('#leftPriceBookDiv').removeClass('AfterLeftToggleClass');
                $('#toggleDropDown').css("margin-bottom", "auto");
                $('#leftPriceBookDiv').show();
                $('#ShowFilter').hide();
                //$('#btnsDiv').css("margin-top", "-115px");
                //$('#btnsDiv').removeClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
                //$('#btnsDiv').addClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
                //$('#toggleDropDowndiv').css("margin-top", "-10px");

            }
            else if ($(window).width() <= 1200) {
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').addClass('rightPageLoadClass');
                $('#leftPriceBookDiv').addClass('Form-Tabs-Container');
                $('#rightPriceBookDiv').removeClass('AfterRightToggleClass');
                $('#leftPriceBookDiv').removeClass('AfterLeftToggleClass');
                $('#toggleDropDown').css("margin-bottom", "0px");
                //$('#toggleDropDowndiv').css("margin-top", "-10px");
                $('#leftPriceBookDiv').show();
                $('#ShowFilter').hide();
                //$('#btnsDiv').css("margin-top", "-50px");
                //$('#btnsDiv').removeClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
                //$('#btnsDiv').addClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
                $('#myPager').removeClass("myPager");
                $('#myPager').removeClass("myPagerSmallScreen");
                $('#myPager').removeClass("myPager914");
                $('#myPager').removeClass("myPager1024");
                $('#myPager').removeClass('myPagerToggleClick');
                $('#myPager').addClass("myPager");
            }
            else if ($(window).width() <= 1280) {
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').addClass('rightPageLoadClass');
                $('#leftPriceBookDiv').addClass('Form-Tabs-Container');
                $('#rightPriceBookDiv').removeClass('AfterRightToggleClass');
                $('#leftPriceBookDiv').removeClass('AfterLeftToggleClass');
                $('#toggleDropDown').css("margin-bottom", "auto");
                $('#leftPriceBookDiv').show();
                $('#ShowFilter').hide();
                //$('#btnsDiv').css("margin-top", "-27px");
                //$('#btnsDiv').removeClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
                //$('#btnsDiv').addClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
                $('#myPager').removeClass("myPager");
                $('#myPager').removeClass("myPagerSmallScreen");
                $('#myPager').removeClass("myPager914");
                $('#myPager').removeClass("myPager1024");
                $('#myPager').removeClass('myPagerToggleClick');
                $('#myPager').addClass("myPager");
            }
            else {
                $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
                $('#rightPriceBookDiv').addClass("rightPageLoadClass");
                $('#rightPriceBookDiv').addClass('rightPageLoadClass');
                $('#leftPriceBookDiv').addClass('Form-Tabs-Container');
                $('#rightPriceBookDiv').removeClass('AfterRightToggleClass');
                $('#leftPriceBookDiv').removeClass('AfterLeftToggleClass');
                $('#toggleDropDown').css("margin-bottom", "auto");
                $('#leftPriceBookDiv').show();
                $('#ShowFilter').hide();
                //$('#btnsDiv').css("margin-top", "-27px");
                //$('#btnsDiv').removeClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
                //$('#btnsDiv').addClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
                $('#myPager').removeClass("myPager");
                $('#myPager').removeClass("myPagerSmallScreen");
                $('#myPager').removeClass("myPager914");
                $('#myPager').removeClass("myPager1024");
                $('#myPager').removeClass('myPagerToggleClick');
                $('#myPager').addClass("myPager");
            }
        } else {
            $('#leftPriceBookDiv').addClass("Form-Tabs-Container");
            $('#rightPriceBookDiv').addClass("rightPageLoadClass");
            $('#rightPriceBookDiv').addClass('rightPageLoadClass');
            $('#leftPriceBookDiv').addClass('Form-Tabs-Container');
            $('#rightPriceBookDiv').removeClass('AfterRightToggleClass');
            $('#leftPriceBookDiv').removeClass('AfterLeftToggleClass');
            $('#toggleDropDown').css("margin-bottom", "auto");
            $('#leftPriceBookDiv').show();
            $('#ShowFilter').hide();
            //$('#btnsDiv').css("margin-top", "-27px");
            //$('#btnsDiv').removeClass("col-lg-12 col-md-12 col-sm-12 col-xs-12 col-vsm-12");
            //$('#btnsDiv').addClass("col-lg-9 col-md-9 col-sm-9 col-xs-9 col-vsm-9");
            $('#myPager').removeClass("myPager");
            $('#myPager').removeClass("myPagerSmallScreen");
            $('#myPager').removeClass("myPager914");
            $('#myPager').removeClass("myPager1024");
            $('#myPager').removeClass('myPagerToggleClick');
            $('#myPager').addClass("myPager");
        }

        if ($("#hdnLanguageId").val() != 0 && $("#hdnLanguageId").val() != 4) {
            $("#rightPriceBookDiv").removeClass("PriceBookPage_ToggleFilter")
        }
        //COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreMasters/Css/PriceBook.css", "PRICEBOOK.setHeight");
        PRICEBOOK.setHeight();
        $('#ClosedDiv').hide();
        $("#rightPriceBookDiv").removeClass('col-lg-11 col-md-11 col-sm-12 col-xs-12').addClass('col-lg-9 col-md-9 col-sm-12 col-xs-12')
    },

    uploadBtn_Click: function () {
        debugger;
        $("#uploadBtn").val("");
        $("#uploadFile").val("");
        $("#ulSheetName").html("");
        $("#hdnIsuploadFileClicked").val(true);
        $("#hdnIsSheetModelOpen").val(true);
        ischangeClicked = true;
    },

    btnClearForUpdate_Click: function () {
        $('#BasisOn').val(0);
        var TodaysDate = DATEPICKER.getDate("hdnDatepickerToSetTodayDate");
        debugger;
        DATEPICKER.setDate("ctrlStartingDateUPH", TodaysDate);
        DATEPICKER.setDate("ctrlEndingDateUPH", TodaysDate);
        DATEPICKER.setDate("ctrlStartingDateUP", TodaysDate);
        DATEPICKER.setDate("ctrlEndingDateUP", TodaysDate);
        OPTIONCONTROL.clear("ctrlPriceBookUPH");
        OPTIONCONTROL.clear("ctrlOptionProUPH");
        OPTIONCONTROL.clear("ctrlOptionDeptUPH");
        OPTIONCONTROL.clear("ctrlOptionCustUPH");
        OPTIONCONTROL.clear("ctrlOptionCurrUPH");
        OPTIONCONTROL.clear("ctrlOptionUnitUPH");
        $('#MinQtyUPH').val("0");
        $('#MaxQtyUPH').val("0");
        $('#ddlIncreaseDecrease').val(0);
        $('#txtIncreaseDecrease').val("0");
        $('#ddlIncreaseDecreaseControl').val(0);
        $('#rdoAppend1').prop('checked', true);

        OPTIONCONTROL.clear("ctrlOptionProUP");
        OPTIONCONTROL.clear("ctrlOptionDeptUP");
        OPTIONCONTROL.clear("ctrlOptionCustUP");
        OPTIONCONTROL.clear("ctrlOptionCurrUP");
        OPTIONCONTROL.clear("ctrlOptionUnitUP");

        $('#ResultSpan2').html("");
        $('.chkTop').removeAttr('checked');
        $('.txtBottom').val('0');
    },

    btnClear_Click: function () {
        isLoadedFromDB = 0;
        IsDateFilterEdited = 0;
        var TodaysDate = DATEPICKER.getDate("hdnDatepickerToSetTodayDate");
        debugger;
        DATEPICKER.setDate("StartingDateH", TodaysDate);
        DATEPICKER.setDate("EndingDateH", TodaysDate);
        //DATEPICKER.setDate("PriceBookWebGrid_option_StartingDate", TodaysDate);
        //DATEPICKER.setDate("PriceBookWebGrid_option_EndingDate", TodaysDate);
        $('#InActive').prop('checked', false);
        FGRIDCONTROL.clearData("PriceBookWebGrid", true);
        FGRIDCONTROL.deleteRows("PriceBookWebGrid", 1, 15);
        for (iRowCounter = 1; iRowCounter <= 15; iRowCounter++) {
            FGRIDCONTROL.insertRows("PriceBookWebGrid", iRowCounter, 1);
        }
        //PRICEBOOK.setSerialNoColumn(0, false);
        OPTIONCONTROL.clear("ctrlOptionProPriceBookH");
        OPTIONCONTROL.clear("FilterProduct");
        OPTIONCONTROL.clear("FilterCurrency");
        OPTIONCONTROL.clear("FilterCustomer");
        OPTIONCONTROL.clear("FilterDepartment");
        $('#myPagerAuthPopup button').remove();
        $('#myPagerUPT button').remove();
        $('#myPager button').remove();
        $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $("#PriceBookWebGrid > tbody > tr").show();
        $('#GridPBAuthorize> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $('#ResultSpan').html("");
        $('#txtAbbreviation').val("");

        $('#chkDateRange').prop("checked", false);
        $('#chkCustomer').prop("checked", false);
        $('#chkDepartment').prop("checked", false);
        $('#chkQtyRange').prop("checked", false);
        $('#chkUnit').prop("checked", false);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 3, true);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 4, true);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 5, true);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 6, true);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 8, true);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 9, true);
        FGRIDCONTROL.hideColumn("PriceBookWebGrid", 10, true);
        $("#isRowsHighlighted").val(0);
        $("#AuthorizeLI").css("pointer-events", "none");
        TotalTempArray = [];
    },
    btnFilterClear_Click: function () {
        debugger;
        var TodaysDate = DATEPICKER.getDate("hdnDatepickerToSetTodayDate");
        DATEPICKER.setDate("StartingDateH", TodaysDate);
        DATEPICKER.setDate("EndingDateH", TodaysDate);
        $('#InActive').prop('checked', false);
        OPTIONCONTROL.clear("FilterProduct");
        OPTIONCONTROL.clear("FilterCurrency");
        OPTIONCONTROL.clear("FilterCustomer");
        OPTIONCONTROL.clear("FilterDepartment");
        $('#ShowGroupItems').prop('checked', false);
    },

    btnClearForView_Click: function () {
        debugger;
        FGRIDCONTROL.clearData("WebGridUPT3", true);         
        $('#WebGridUPT3> tbody> tr').css('display', 'none');
        $('#WebGridUPT3_row_1').css('display', 'block');
        $('#WebGridUPT3_row_1').css('height', '20px');        
        $('#ResultSpan').html("");
        $('#ResultSpan3').html("");
        $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $('#myPagerUPT button').remove();
        //$('#myPager button').remove();
        OPTIONCONTROL.clear("ctrlOptionDeptUPH2");
        OPTIONCONTROL.clear("ctrlOptionCustUPH2");
        OPTIONCONTROL.clear("ctrlOptionProUPH2");
        OPTIONCONTROL.clear("ctrlOptionCurrUPH2");
        OPTIONCONTROL.clear("ctrlOptionUnitUPH2");
        DATEPICKER.clear("ctrlOnDateUPH2");
        IsExportedAfterLoad = false;
        $("#isRowsHighlighted").val(0);
    },

    btnClearAuth_Click: function () {
        $("#btnSelectAllAuth").val("Select All");
        FGRIDCONTROL.clearData("GridPBAuthorize", true);
        $('#GridPBAuthorize> tbody> tr').removeClass('PriceBookSelectedRowColor');
        $('#myPagerAuthPopup button').remove();
        $('#myPagerUPT button').remove();
        $('#myPager button').remove();
        OPTIONCONTROL.clear("ctrlOptionDeptUPH2");
        OPTIONCONTROL.clear("ctrlOptionCustUPH2");
        OPTIONCONTROL.clear("ctrlOptionProUPH2");
        OPTIONCONTROL.clear("ctrlOptionCurrUPH2");
        OPTIONCONTROL.clear("ctrlOptionUnitUPH2");
        DATEPICKER.clear("ctrlOnDateUPH2");
        IsExportedAfterLoad = false;
        $("#isRowsHighlighted").val(0);
    },

    btnSelectAllAuth_Click: function () {
        if (!$('#GridPBAuthorize_control_heading_ctrl_1').is(':checked')) {
            $(this).val("UnSelect All");
        }
        else {
            $(this).val("Select All");
        }
        $("#GridPBAuthorize_control_heading_ctrl_1").trigger("click");
    },

    UpdateAlerts: function () {
        NETWORK.executeServerMethod(
                    GLOBAL.getContextPath("GetAlerts", "Home", ""),
                    true,
                    null,
                    "",
                    true,
                    "PRICEBOOK.UpdateAlertsSuccess",
                    "GLOBAL.LoadingStart",
                    "GLOBAL.LoadingEnd"
             );
    },


    // It is callback of UpdateAlerts
    UpdateAlertsSuccess: function (bSuccess, html) {
        if (bSuccess) {
            $("#alertsUL").html(html);
        }
    },

    ClearStatusColumn: function () {
        debugger;
        var synMgrid = document.getElementById('PriceBookWebGrid');
        for (var index = 3; index < synMgrid.rows.length; index++) {
            var objCell = FGRIDCONTROL.getCellObject("PriceBookWebGrid", (index - 2), 28);
            objCell.setCellData("value", "-1");
            objCell.setCellText("");
        }
    }

}

function enableRowEdited() {
    IsDateFilterEdited = 1;
    PriceBookGridData[0] = [];
    PriceBookGridDataPageNo = [];
}
function onPBSerialNoHover(obj, event) {
    //debugger;
    var sControl = "";
    var sContent = "";
    var bSelect = true;
    var innerTextString = obj.Cell.innerText.replace(/\s/g, "");
    var iRowNum = innerTextString.replace(/\D/g, '');
    if (obj.bEnter == true) {
        FCommon.UI.setText(obj.Cell, "");

        obj.Cell.style.paddingLeft = "";

        sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
        sControl += iRowNum;
        sControl += "</div>";

        $(obj.Cell).html(sControl);

        sContent = "<table>";
        sContent += "<tbody class='grid_row_menu'>";

        bSelect = false;
        if (isPBRowSelected(obj.iRow) == false) {
            bSelect = true;
        }

        sContent += "<tr class='highlightPopUpItems' onclick='onPBSelectRow(" + obj.iRow + ", " + bSelect + ", event);' style='cursor: pointer;'>";

        if (bSelect == true) {
            sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + PRICEBOOK.getResourceValue("lblSelectRow", GetPBResourceMessages) + "</div></td>";
        }
        else {
            sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + PRICEBOOK.getResourceValue("lblUnselectRow", GetPBResourceMessages) + "</div></td>";
        }
        sContent += "</tr>";
       
        sContent += "<tr class='highlightPopUpItems' onclick='onPBInsertRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Add Row Above' style='cursor: pointer;'>";
        sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + PRICEBOOK.getResourceValue("lblInsertRow", GetPBResourceMessages) + "</div></td>";
        sContent += "</tr>";

        sContent += "<tr onclick='onPBDuplicateRow(" + obj.iRow + ",event);' data-toggle='tooltip' title='Duplicate Row'>";
        sContent += "<td><span class='icon-clone icon-font8'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + PRICEBOOK.getResourceValue("lblDuplicateRow", GetPBResourceMessages) + "</div></td>";
        sContent += "</tr>";

        sContent += "</tbody>";
        sContent += "</table>";

        $("#id_row_popup").popover({
            type: "tooltip",
            trigger: "manual",
            placement: $("#hdnLanguageId").val() == "0" || $("#hdnLanguageId").val() == "4" ? "right" : "left",
            html: true,
            content: sContent
        });
        $("#id_row_popup").popover('show');
    }
    else {
        $("#id_row_popup").popover('destroy');
        FCommon.UI.removeChildren(obj.Cell);
        FCommon.UI.setText(obj.Cell, iRowNum);
        obj.Cell.style.paddingLeft = "3px;";
    }
}


function onSerialNo_RightClick(obj, evt) {
    debugger
    //let sContent = "";
    let bRtl = false;
    //let objSetRowInfo = null;
    let rectContainer = null;
    let rectMenu = null;
    let eleA = null;
    let eleLabel = null;
    let eleMenu = null;
    let eleSpan = null;
    let bSelect = true;
    debugger

    try {
        FCommon.UI.stopKeyProcess(evt);

        if (EntryMainBody.isRowReadOnly(obj.iRow) == true) {
            return;
        }

        obj.Cell.setAttribute("data-bs-target", "id_PriceBookGrid_body_menu");

        eleMenu = document.getElementById("id_PriceBookGrid_body_menu");//
        FUIElement.removeChild(eleMenu);

        if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
            bRtl = true;
        }

        eleSpan = document.createElement("span");
        eleSpan.style.position = "absolute";
        eleSpan.style.color = "#ccc";

        if (bRtl == true) {
            eleSpan.className = "icon-left-arrow";
            eleSpan.style.right = "-5px";
        }
        else {
            eleSpan.className = "icon-right-arrow";
            eleSpan.style.left = "-5px";
        }

        eleMenu.appendChild(eleSpan);

        //eleA = document.createElement("a");
        //eleA.className = "dropdown-item py-0";
        //eleA.href = "#";        
        //eleA.setAttribute("onclick", "onPBDeleteRow(" + obj.iRow + ", event);"); //#

        //eleA.setAttribute("data-toggle", "tooltip");
        //eleA.setAttribute("title", "Delete Current Row");

        //eleLabel = document.createElement("label");
        //eleLabel.className = "labeltext";
        //eleLabel.style.margin = "0px !important";       
        //$(eleLabel).text(PRICEBOOK.getResourceValue("lblDeleteRow", GetPBResourceMessages));       

        //eleA.appendChild(eleLabel);
        //eleMenu.appendChild(eleA);

        if (transEntryInfo.isStockAdjustment == false) {
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "onPBInsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(PRICEBOOK.getResourceValue("lblInsertRow", GetPBResourceMessages));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);
        }

        bSelect = false;
        if (isPBRowSelected(obj.iRow) == false) {
            bSelect = true;
        }

        eleA = document.createElement("a");
        eleA.className = "dropdown-item py-0";
        eleA.href = "#";
        eleA.setAttribute("onclick", "onSelectRow(" + obj.iRow + ", " + bSelect + ", event);");//#

        eleLabel = document.createElement("label");
        eleLabel.className = "labeltext";
        eleLabel.style.margin = "0px !important";

        if (bSelect == true) {
            $(eleLabel).text(PRICEBOOK.getResourceValue("lblSelectRow", GetPBResourceMessages));
        }
        else {
            $(eleLabel).text(PRICEBOOK.getResourceValue("lblUnselectRow", GetPBResourceMessages));
        }

        eleA.appendChild(eleLabel);
        eleMenu.appendChild(eleA);

        eleA = document.createElement("a");
        eleA.className = "dropdown-item py-0";
        eleA.href = "#";
        eleA.setAttribute("onclick", "onPBDuplicateRow(" + obj.iRow + ", null, event);");//#
        eleA.setAttribute("data-toggle", "tooltip");
        eleA.setAttribute("title", "Duplicate Row");

        eleLabel = document.createElement("label");
        eleLabel.className = "labeltext";
        eleLabel.style.margin = "0px !important";
        $(eleLabel).text(PRICEBOOK.getResourceValue("lblDuplicateRow", GetPBResourceMessages));

        eleA.appendChild(eleLabel);
        eleMenu.appendChild(eleA);
        // }

        togglePriceBookEntryMore(obj.Cell, evt);

        rectContainer = obj.Cell.getBoundingClientRect();
        rectMenu = eleMenu.getBoundingClientRect();

        if (bRtl == true) {
            eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
        }
        else {
            eleMenu.style.left = rectContainer.right + "px";
        }

        eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

        eleMenu.style.top = (rectContainer.top - (rectMenu.height / 2) + 10) + "px";
    }
    catch (err) {
        transEntryGlobal.showAlert("{onSerialNo_Click}" + err.message, "Exception");
    }
}
function isPBRowSelected(iRow) {
    debugger;
    let bSelected = false;
    let eleRow = null;

    eleRow = FGRIDCONTROL.getRowElement("PriceBookWebGrid", iRow);
    if (FCommon.UI.isValidObject(eleRow) == true) {
        if ($(eleRow).hasClass("PriceBookSelectedRowColor") == true) {
            bSelected = true;
        }
    }

    return (bSelected);
}

/*function for Showing popup block on SrialNo. RightClick of PriceBook Grid*/
function togglePriceBookEntryMore(ele, evt) {
    debugger;
    let eleMenu = null;

    try {
        FCommon.UI.stopKeyProcess(evt);

        eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
        if (FCommon.UI.isValidObject(eleMenu) == false) {
            return;
        }

        if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
            $(eleMenu).toggle(); // hide first
        }

        $(eleMenu).toggle();
    }
    catch (err) {
        WriteConsoleLog("Exception: {togglePriceBookEntryMore} " + err.message, "red");
    }
}

/*function for SelectRow on SerialNo. RightClick of PriceBook Grid*/
function onSelectRow(iRow, bSelect, evt) {
    debugger;
    let eleRow = null;
    try {
        FCommon.UI.stopKeyProcess(event);
        eleRow = FGRIDCONTROL.getRowElement("PriceBookWebGrid", iRow);
        if (bSelect == true) {
            $(eleRow).addClass("PriceBookSelectedRowColor");
            //eleRow.style.backgroundColor = "rgb(222, 245, 253)";
        }
        else {
            $(eleRow).removeClass("PriceBookSelectedRowColor");
            //eleRow.style.backgroundColor = "";
        }
    }
    catch (err) {
        //transEntryGlobal.showAlert("{onSelectRow}" + err.message, GlobalPref.getResourceValue("Exception"))
        COMMON.prototype.showMessage(err.message, "Exception")
    }

}

/*function for InsertRow on SerialNo. RightClick of PriceBook Grid*/
function onPBInsertRow(iRow, evt) {
    debugger;
    try {
        FCommon.UI.stopKeyProcess(event);
        FGRIDCONTROL.update("PriceBookWebGrid");
        FGRIDCONTROL.insertRows("PriceBookWebGrid", iRow, 1);
        iLocalPageNo = pageNo;
        var iStartRowIndex;
        if (iLocalPageNo > 1) {
            iStartRowIndex = (parseInt(RowsCount) * (parseInt(iLocalPageNo) - 1));
        }
        else {
            iLocalPageNo = 1;
            iStartRowIndex = 0;
        }
        //PRICEBOOK.setSerialNoColumn(iStartRowIndex, true);
    }
    catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
    }
}

/*function for DuplicateRow on SerialNo. RightClick of PriceBook Grid*/
function onPBDuplicateRow(iRow, evt) {
    debugger;
    try {
        if (FCommon.UI.isValidObject(evt) == true) {
            FCommon.UI.stopKeyProcess(evt);
        }
        onPBInsertRow(iRow + 1, evt);
        for (var iCounter = 0; iCounter < FGRIDCONTROL.getTotalColumns("PriceBookWebGrid") - 5 ; iCounter++) {
            FGRIDCONTROL.copyColumnData("PriceBookWebGrid", iRow, iCounter + 1, iRow + 1, iCounter + 1);
        }
        iLocalPageNo = pageNo;
        var iStartRowIndex;
        if (iLocalPageNo > 1) {
            iStartRowIndex = (parseInt(RowsCount) * (parseInt(iLocalPageNo) - 1));
        }
        else {
            iLocalPageNo = 1;
            iStartRowIndex = 0;
        }
        //PRICEBOOK.setSerialNoColumn(iStartRowIndex, true);

    }
    catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception");
    }
}




//function onPBDeleteRow(iRow, event) {
//    var PriceBookValue = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
//    var PriceBookText = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
//    if (PriceBookValue > 0) {
//        var currCellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 0);
//        var currRowobj = currCellobj.cell.parentElement;
//        $("#PriceBookWebGrid> tbody> tr").removeClass("PriceBookSelectedRowColor");
//        $(currRowobj).addClass("PriceBookSelectedRowColor");
//        PRICEBOOK.DeleteData();
//        FCommon.UI.stopKeyProcess(event);
//        if (getTotalRows() == 1) {
//            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCannotDeleteRow", GetPBResourceMessages));
//            return;
//        }
//    }
//    else {
//        if (PriceBookText.trim() == "") {
//            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBSelect", GetPBResourceMessages));
//            return;
//        }
//        else {
//            FGRIDCONTROL.clearRowData("PriceBookWebGrid", iRow, false);
//        }
//    }
//}

function getTotalRows() {
    //debugger;
    return document.getElementById('PriceBookWebGrid_body').rows.length;
}

function CellEnable() {
    var TotalRows = FGRIDCONTROL.getTotalRows("PriceBookWebGrid");


    for (var iRow = 1; iRow <= TotalRows; iRow++) {
        var objCell1 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 1);
        if (objCell1.cell != undefined) {
            $(objCell1.cell).css("pointer-events", "auto");
        }

        var objCell2 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 2);
        if (objCell2.cell != undefined) {
            $(objCell2.cell).css("pointer-events", "auto");
        }

        var objCell3 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 3);
        if (objCell3.cell != undefined) {
            $(objCell3.cell).css("pointer-events", "auto");
        }

        var objCell4 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 5);
        if (objCell4.cell != undefined) {
            $(objCell4.cell).css("pointer-events", "auto");
        }

        var objCell6 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 6);
        if (objCell6.cell != undefined) {
            $(objCell6.cell).css("pointer-events", "auto");
        }

        var objCell7 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 7);
        if (objCell7.cell != undefined) {
            $(objCell7.cell).css("pointer-events", "auto");
        }

        var objCell8 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 8);
        if (objCell8.cell != undefined) {
            $(objCell8.cell).css("pointer-events", "auto");
        }
        else {
            $(objCell8.cell).css("pointer-events", "none");

        } var objCell9 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 9);
        if (objCell9.cell != undefined) {
            $(objCell9.cell).css("pointer-events", "auto");
        }

        var objCell10 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 10);
        if (objCell10.cell != undefined) {
            $(objCell10.cell).css("pointer-events", "auto");
        }

        var objCell11 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 11);
        if (objCell11.cell != undefined) {
            $(objCell11.cell).css("pointer-events", "auto");
        }

        var objCell12 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 12);
        if (objCell12.cell != undefined) {
            $(objCell12.cell).css("pointer-events", "auto");
        }

        var objCell13 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 13);
        if (objCell13.cell != undefined) {
            $(objCell13.cell).css("pointer-events", "auto");
        }

        var objCell14 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 14);
        if (objCell14.cell != undefined) {
            $(objCell14.cell).css("pointer-events", "auto");
        }
        var objCell15 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 15);
        if (objCell15.cell != undefined) {
            $(objCell15.cell).css("pointer-events", "auto");
        }

        var objCell16 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 16);
        if (objCell16.cell != undefined) {
            $(objCell16.cell).css("pointer-events", "auto");
        }

        var objCell17 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 17);
        if (objCell17.cell != undefined) {
            $(objCell17.cell).css("pointer-events", "auto");
        }
        var objCell18 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 18);
        if (objCell18.cell != undefined) {
            $(objCell18.cell).css("pointer-events", "auto");
        }

        var objCell19 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 19);
        if (objCell19.cell != undefined) {
            $(objCell19.cell).css("pointer-events", "auto");
        }

        var objCell20 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 20);
        if (objCell20.cell != undefined) {
            $(objCell20.cell).css("pointer-events", "auto");
        }

        var objCell21 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 21);
        if (objCell21.cell != undefined) {
            $(objCell21.cell).css("pointer-events", "auto");
        }

        var objCell22 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 22);
        if (objCell22.cell != undefined) {
            $(objCell22.cell).css("pointer-events", "auto");
        }

        var objCell23 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 23);
        if (objCell23.cell != undefined) {
            $(objCell23.cell).css("pointer-events", "auto");
        }

        var objCell24 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 24);
        if (objCell24.cell != undefined) {
            $(objCell24.cell).css("pointer-events", "auto");
        }

        var objCell25 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 25);
        if (objCell25.cell != undefined) {
            $(objCell25.cell).css("pointer-events", "auto");
        }

        var objCell26 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 26);
        if (objCell26.cell != undefined) {
            $(objCell26.cell).css("pointer-events", "auto");
        }
        var objCell27 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 27);
        if (objCell27.cell != undefined) {
            $(objCell27.cell).css("pointer-events", "auto");
        }

        var objCell28 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 28);
        if (objCell28.cell != undefined) {
            $(objCell28.cell).css("pointer-events", "auto");
        }



    }

}

function Celldisable(TotalRows) {


    for (var iRow = 1; iRow <= TotalRows; iRow++) {
        var objCell1 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 1);
        if (objCell1.cell != undefined) {
            $(objCell1.cell).css("pointer-events", "none");
        }

        var objCell2 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 2);
        if (objCell2.cell != undefined) {
            $(objCell2.cell).css("pointer-events", "none");
        }

        var objCell3 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 3);
        if (objCell3.cell != undefined) {
            $(objCell3.cell).css("pointer-events", "none");
        }

        var objCell4 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 5);
        if (objCell4.cell != undefined) {
            $(objCell4.cell).css("pointer-events", "none");
        }

        var objCell6 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 6);
        if (objCell6.cell != undefined) {
            $(objCell6.cell).css("pointer-events", "none");
        }

        var objCell7 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 7);
        if (objCell7.cell != undefined) {
            $(objCell7.cell).css("pointer-events", "none");
        }

        var objCell8 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 8);
        if (objCell8.cell != undefined) {
            $(objCell8.cell).css("pointer-events", "none");
        }
        else {
            $(objCell8.cell).css("pointer-events", "none");

        } var objCell9 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 9);
        if (objCell9.cell != undefined) {
            $(objCell9.cell).css("pointer-events", "none");
        }

        var objCell10 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 10);
        if (objCell10.cell != undefined) {
            $(objCell10.cell).css("pointer-events", "none");
        }

        var objCell11 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 11);
        if (objCell11.cell != undefined) {
            $(objCell11.cell).css("pointer-events", "none");
        }

        var objCell12 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 12);
        if (objCell12.cell != undefined) {
            $(objCell12.cell).css("pointer-events", "none");
        }

        var objCell13 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 13);
        if (objCell13.cell != undefined) {
            $(objCell13.cell).css("pointer-events", "none");
        }

        var objCell14 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 14);
        if (objCell14.cell != undefined) {
            $(objCell14.cell).css("pointer-events", "none");
        }
        var objCell15 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 15);
        if (objCell15.cell != undefined) {
            $(objCell15.cell).css("pointer-events", "none");
        }

        var objCell16 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 16);
        if (objCell16.cell != undefined) {
            $(objCell16.cell).css("pointer-events", "none");
        }

        var objCell17 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 17);
        if (objCell17.cell != undefined) {
            $(objCell17.cell).css("pointer-events", "none");
        }
        var objCell18 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 18);
        if (objCell18.cell != undefined) {
            $(objCell18.cell).css("pointer-events", "none");
        }

        var objCell19 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 19);
        if (objCell19.cell != undefined) {
            $(objCell19.cell).css("pointer-events", "none");
        }

        var objCell20 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 20);
        if (objCell20.cell != undefined) {
            $(objCell20.cell).css("pointer-events", "none");
        }

        var objCell21 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 21);
        if (objCell21.cell != undefined) {
            $(objCell21.cell).css("pointer-events", "none");
        }

        var objCell22 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 22);
        if (objCell22.cell != undefined) {
            $(objCell22.cell).css("pointer-events", "none");
        }

        var objCell23 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 23);
        if (objCell23.cell != undefined) {
            $(objCell23.cell).css("pointer-events", "none");
        }

        var objCell24 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 24);
        if (objCell24.cell != undefined) {
            $(objCell24.cell).css("pointer-events", "none");
        }

        var objCell25 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 25);
        if (objCell25.cell != undefined) {
            $(objCell25.cell).css("pointer-events", "none");
        }

        var objCell26 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 26);
        if (objCell26.cell != undefined) {
            $(objCell26.cell).css("pointer-events", "none");
        }
        var objCell27 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 27);
        if (objCell27.cell != undefined) {
            $(objCell27.cell).css("pointer-events", "none");
        }

        var objCell28 = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 28);
        if (objCell28.cell != undefined) {
            $(objCell28.cell).css("pointer-events", "none");
        }



    }

}
//for append data methods added by rizwana

//customize display method for append
function SetCustomizeDisplayForAppend() {
    //debugger;
    var iCount = 0;
    var arrbTemp = [];
    var iCustomizeDisplay = iCustomizeDisplayForAppend;
    var bDateRangeSelected = iCustomizeDisplay > 8 ? true : false;
    while (iCount < 14) {
        arrbTemp[iCount] = Boolean(iCustomizeDisplay % 2);
        iCustomizeDisplay = parseInt(iCustomizeDisplay / 2);
        iCount++;
        if (iCustomizeDisplay == 0 || iCustomizeDisplay == 1) {
            arrbTemp[iCount] = Boolean(iCustomizeDisplay);
            break;
        }
    }
    selectedArrayLength = arrbTemp.length;
    if (selectedArrayLength < 14) {
        for (var i = 0; i < 14 - selectedArrayLength; i++) {
            arrbTemp.push(false);
        }
    }
    if (arrbTemp[0] == true) {
        $('#chkDateRange').prop("checked", false);
        FGRIDCONTROL.hideColumn("AppendGrid", 5, true);
        FGRIDCONTROL.hideColumn("AppendGrid", 6, true);
    }
    else {
        if (bDateRangeSelected == true) {
            $('#chkDateRange').prop("checked", true);
            FGRIDCONTROL.hideColumn("AppendGrid", 5, false);
            FGRIDCONTROL.hideColumn("AppendGrid", 6, false);
        }
        else {
            $('#chkDateRange').prop("checked", false);
            FGRIDCONTROL.hideColumn("AppendGrid", 5, true);
            FGRIDCONTROL.hideColumn("AppendGrid", 6, true);
        }
    }
    if (arrbTemp[5] == true) {
        $('#chkCustomer').prop("checked", true);
        FGRIDCONTROL.hideColumn("AppendGrid", 7, false);
    }
    else {
        $('#chkCustomer').prop("checked", false);
        FGRIDCONTROL.hideColumn("AppendGrid", 7, true);
    }
    if (arrbTemp[7] == true) {
        $('#chkDepartment').prop("checked", true);
        FGRIDCONTROL.hideColumn("AppendGrid", 4, false);
    }
    else {
        $('#chkDepartment').prop("checked", false);
        FGRIDCONTROL.hideColumn("AppendGrid", 4, true);
    }
    if (arrbTemp[9] == true) {
        $('#chkQtyRange').prop("checked", true);
        FGRIDCONTROL.hideColumn("AppendGrid", 9, false);
        FGRIDCONTROL.hideColumn("AppendGrid", 10, false);
    }
    else {
        $('#chkQtyRange').prop("checked", false);
        FGRIDCONTROL.hideColumn("AppendGrid", 9, true);
        FGRIDCONTROL.hideColumn("AppendGrid", 10, true);
    }
    if (arrbTemp[11] == true) {
        $('#chkCurrency').prop("checked", true);
        FGRIDCONTROL.hideColumn("AppendGrid", 8, false);
    }
    else {
        $('#chkCurrency').prop("checked", false);
        FGRIDCONTROL.hideColumn("AppendGrid", 8, true);
    }

    if (arrbTemp[13] == true) {
        $('#chkUnit').prop("checked", true);
        FGRIDCONTROL.hideColumn("AppendGrid", 11, false);
    }
    else {
        $('#chkUnit').prop("checked", false);
        FGRIDCONTROL.hideColumn("AppendGrid", 11, true);
    }
}

var PriceBookAppendData = [];
var TempArray = [];
var AppendOkData = [];
//var CheckTempArray=[];
//after selecting rows in pricebookgrid for opening popup we call dis method
function btnAppendclick() { //to open popup
    debugger;
    var arrGridAppendData = [];
    PriceBookAppendData = [];
    var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
    var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
    var Abbreviation = $('#txtAbbreviation').val();
    var synMgrid = document.getElementById('PriceBookWebGrid');
    for (var index = 3; index < synMgrid.rows.length; index++) {
        var iPBProductId = parseInt(synMgrid.rows[index].cells[1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[1].dataset.value);
        var sPBAlias = parseInt(synMgrid.rows[index].cells[1].dataset.salias == undefined ? 0 : synMgrid.rows[index].cells[1].dataset.salias);
        var iPBTagId = parseInt(synMgrid.rows[index].cells[2 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[2 + 1].dataset.value);
        var iPBStartDate = parseInt(synMgrid.rows[index].cells[3 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[3 + 1].dataset.value);
        var iPBEndDate = parseInt(synMgrid.rows[index].cells[4 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[4 + 1].dataset.value);
        var iPBAccountId = parseInt(synMgrid.rows[index].cells[5 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[5 + 1].dataset.value);
        var iPBCurrencyId = parseInt(synMgrid.rows[index].cells[6 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[6 + 1].dataset.value);
        var iPBMinQty = parseFloat(synMgrid.rows[index].cells[7 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[7 + 1].dataset.value);
        var iPBMaxQty = parseFloat(synMgrid.rows[index].cells[8 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[8 + 1].dataset.value);
        var iPBUnitId = parseInt(synMgrid.rows[index].cells[9 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[9 + 1].dataset.value);
        var iPBRate = parseFloat(synMgrid.rows[index].cells[10 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value);
        var iPBVal1 = parseFloat(synMgrid.rows[index].cells[11 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[11 + 1].dataset.value);
        var iPBVal2 = parseFloat(synMgrid.rows[index].cells[12 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[12 + 1].dataset.value);
        var iPBVal3 = parseFloat(synMgrid.rows[index].cells[13 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[13 + 1].dataset.value);
        var iPBVal4 = parseFloat(synMgrid.rows[index].cells[14 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[14 + 1].dataset.value);
        var iPBVal5 = parseFloat(synMgrid.rows[index].cells[15 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[15 + 1].dataset.value);
        var iPBVal6 = parseFloat(synMgrid.rows[index].cells[16 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[16 + 1].dataset.value);
        var iPBVal7 = parseFloat(synMgrid.rows[index].cells[17 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[17 + 1].dataset.value);
        var iPBVal8 = parseFloat(synMgrid.rows[index].cells[18 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[18 + 1].dataset.value);
        var iPBVal9 = parseFloat(synMgrid.rows[index].cells[19 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[19 + 1].dataset.value);
        var iPBVal10 = parseFloat(synMgrid.rows[index].cells[20 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[20 + 1].dataset.value);
        var iPBVal11 = parseFloat(synMgrid.rows[index].cells[21 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[21 + 1].dataset.value);
        var iPBVal12 = parseFloat(synMgrid.rows[index].cells[22 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[22 + 1].dataset.value);
        var iPBVal13 = parseFloat(synMgrid.rows[index].cells[23 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[23 + 1].dataset.value);
        var iPBSequenceNumber = parseInt(synMgrid.rows[index].cells[24 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[24 + 1].dataset.value);
        var iPBIsEdited = parseInt(synMgrid.rows[index].cells[25 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[25 + 1].dataset.value);
        var iPBRateEidted = parseInt(synMgrid.rows[index].cells[26 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[26 + 1].dataset.value);
        var iPBAuthStatus = parseInt(synMgrid.rows[index].cells[27 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[27 + 1].dataset.value);

        if (iPBProductId > 0 && iPBProductId != "0" && iPBProductId != null) {
            var objsyncMdetailes = {
                PriceBookId: PriceBookId,
                PriceBookName: PriceBookName,
                sAbbr: Abbreviation,
                ProductId: iPBProductId,
                Alias: sPBAlias,
                TagId: iPBTagId,
                AccountId: iPBAccountId,
                CurrencyId: iPBCurrencyId,
                UnitId: iPBUnitId,
                StartDate: iPBStartDate,
                EndDate: iPBEndDate,
                MinQty: iPBMinQty,
                MaxQty: iPBMaxQty,
                Val0: iPBRate,
                Val1: iPBVal1,
                Val2: iPBVal2,
                Val3: iPBVal3,
                Val4: iPBVal4,
                Val5: iPBVal5,
                Val6: iPBVal6,
                Val7: iPBVal7,
                Val8: iPBVal8,
                Val9: iPBVal9,
                Val10: iPBVal10,
                Val11: iPBVal11,
                Val12: iPBVal12,
                Val13: iPBVal13,
                SequenceNumber: iPBSequenceNumber,
                IsEdited: iPBIsEdited,
                RateEidted: iPBRateEidted,
                AuthStatus: iPBAuthStatus,
            }
            PriceBookAppendData.push(objsyncMdetailes)
        }

    }
    for (var i = 0; i < PriceBookAppendData.length; i++) {
        if (PriceBookAppendData[i].StartDate == undefined) {
            PriceBookAppendData[i].StartDate = 0;

        }
        if (PriceBookAppendData[i].EndDate == undefined) {
            PriceBookAppendData[i].EndDate = 0;
        }
    }
    if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
        var arrselectedData = [];
        var iTotalRows = FGRIDCONTROL.getTotalRows("PriceBookWebGrid");
        for (var iRow = 1; iRow <= iTotalRows; iRow++) {
            var objCellData = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRow, 1);
            if ($(objCellData.Grid.children[1].children[iRow - 1]).hasClass("PriceBookSelectedRowColor")) {
                var selectedPro = isNaN(parseInt(objCellData.getCellData("value"))) ? 0 : parseInt(objCellData.getCellData("value"));
                if (selectedPro <= 0) {
                    $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages)).hide();
                    COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgCheckProduct", GetPBResourceMessages));
                    $('#ResultSpan').css("color", "red");
                    if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
                        $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor')
                    }
                    return false;
                }
                else {
                    arrselectedData.push(PriceBookAppendData[iRow - 1]);
                }

            }
        }
        arrGridAppendData[0] = arrselectedData;
        arrGridAppendData[1] = 1;

    }
    if (arrGridAppendData != null && arrGridAppendData.length > 0) {
        if (arrGridAppendData[0].length > 0) {
            $('#myAppendPopup').modal('show');
        }
        else {
            COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("lblSelectRow", GetPBResourceMessages));
            $('#myAppendPopup').modal('hide');
        }
    }
    else {
        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("lblSelectRow", GetPBResourceMessages));
        $('#myAppendPopup').modal('hide');
    }
    // PRICEBOOK.setSerialNoColumn(0, false);
    iLocalPageNo = pageNo;
    var iStartRowIndex;
    if (iLocalPageNo > 1) {
        iStartRowIndex = (parseInt(RowsCount) * (parseInt(iLocalPageNo) - 1));
    }
    else {
        iLocalPageNo = 1;
        iStartRowIndex = 0;
    }
    //PRICEBOOK.setSerialNoColumn(iStartRowIndex, true);
    SetCustomizeDisplayForAppend();
    AppendClick_Success(true, arrGridAppendData);
}
//success method for popup to load the data in append grid
function AppendClick_Success(flag, arrNew) {
    debugger;
    var totalrows = FGRIDCONTROL.getTotalRows("AppendGrid");
    FGRIDCONTROL.clearData("AppendGrid", true);
    FGRIDCONTROL.deleteRows("AppendGrid", 1, totalrows);
    var iRowCounter = 0;
    var iColCounter = 0;
    var cellobj = null;
    var objData = null;
    var iValue = 0;
    var tag = null;

    if (arrNew != null && arrNew[0].length > 0) {

        debugger
        for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
            FGRIDCONTROL.insertRows("AppendGrid", iRowCounter, 1);
            for (iColCounter = 1; iColCounter <= 28; iColCounter++) {
                objData = arrNew[0][iRowCounter - 1];
                cellobj = FGRIDCONTROL.getCellObject("AppendGrid", iRowCounter, iColCounter);
                document.getElementById("AppendGrid_control_heading_ctrl_1").checked = true;
                FGRIDCONTROL.setColumnCheckboxState("AppendGrid", iRowCounter, 1, true);
                try {
                    debugger;
                    switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                        case MasterDataType.get('DATE'):
                            if (cellobj.ColumnAttribute.scolumnname == "StartDate") {
                                if (objData.StartDate == undefined) {
                                    objData.StartDate = 0;
                                }
                                cellobj.setCellData("value", objData.StartDate);
                                cellobj.setCellText(DATEPICKER.convertDateIntoString(cellobj.ColumnAttribute.ctrlid, objData.StartDate));
                                DATEPICKER.setDate("AppendGrid_option_StartingDate", objData.StartDate, true);
                            }
                            else {
                                if (objData.EndDate == undefined) {
                                    objData.EndDate = 0;
                                }
                                cellobj.setCellData("value", objData.EndDate);
                                cellobj.setCellText(DATEPICKER.convertDateIntoString(cellobj.ColumnAttribute.ctrlid, objData.EndDate));
                                DATEPICKER.setDate("AppendGrid_option_EndingDate", objData.EndDate, true);
                            }

                            break;
                        case MasterDataType.get("FRACTION"):
                            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.index) == true) {
                                cellobj.setCellData("value", objData["Val" + cellobj.ColumnAttribute.index]);
                                cellobj.setCellText(Number(objData["Val" + cellobj.ColumnAttribute.index]).toFixed(parseInt($("#NoOfDecimal").val())));
                            }
                            else if (cellobj.ColumnAttribute.scolumnname == "MinQty") {
                                cellobj.setCellData("value", objData["MinQty"]);
                                cellobj.setCellText(objData["MinQty"]);
                            }
                            else if (cellobj.ColumnAttribute.scolumnname == "MaxQty") {
                                cellobj.setCellData("value", objData["MaxQty"]);
                                cellobj.setCellText(objData["MaxQty"]);
                            }
                            else if (cellobj.ColumnAttribute.scolumnname == "SequenceNo") {
                                cellobj.setCellData("value", objData["SequenceNumber"]);
                                cellobj.setCellText(objData["SequenceNumber"]);
                            }
                            break;
                        default:
                            if (cellobj.ColumnAttribute.ctrlid == "Alias_First") {
                                cellobj.setCellData("value", objData["Alias"]);
                                cellobj.setCellText(objData["Alias"]);
                            }
                            else if (cellobj.ColumnAttribute.ctrlid == "IsEdited_First") {
                                cellobj.setCellData("value", objData["IsEdited"]);
                                cellobj.setCellText(objData["IsEdited"]);
                            }
                            else if (cellobj.ColumnAttribute.ctrlid == "IsRateEdited_First") {
                                cellobj.setCellData("value", objData["RateEdited"]);
                                cellobj.setCellText(objData["RateEdited"]);
                            }
                            else if (cellobj.ColumnAttribute.scolumnname == "AuthStatus" && objData["SequenceNumber"] > 0) {
                                cellobj.setCellData("value", objData["AuthStatus"]);
                                if (objData["AuthStatus"] == 0) {
                                    cellobj.setCellText("Pending");
                                }
                                else if (objData["AuthStatus"] == 1) {
                                    cellobj.setCellText("Authorized");
                                }
                                else if (objData["AuthStatus"] == 2) {
                                    cellobj.setCellText("Rejected");
                                }
                                else if (objData["AuthStatus"] == 3) {
                                    cellobj.setCellText("Stopped");
                                }
                                else {
                                    cellobj.setCellText("Edited");
                                }
                            }
                            else if (cellobj.ColumnAttribute.ctrlid == "LocationId") {
                                cellobj.setCellData("value", objData["LocatoinId"]);
                                cellobj.setCellText(objData["LocatoinId"]);
                            }
                            break;
                    }
                    FGRIDCONTROL.update("AppendGrid");

                }
                catch (err) {
                    COMMON.prototype.showMessage(err.message, "Exception");
                }
            }
        }
        tag = {};
        tag.iColumnIndex = 2;
        tag.GridCtrlId = "AppendGrid";
        tag.arrIds = [];
        for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
            objData = arrNew[0][iRowCounter - 1];
            tag.arrIds.push(objData.ProductId);
        }
        cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
        OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


        tag = {};
        tag.iColumnIndex = 4;
        tag.GridCtrlId = "AppendGrid";
        tag.arrIds = [];
        for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
            objData = arrNew[0][iRowCounter - 1];
            tag.arrIds.push(objData.TagId);
        }
        cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
        OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


        tag = {};
        tag.iColumnIndex = 7;
        tag.GridCtrlId = "AppendGrid";
        tag.arrIds = [];
        for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
            objData = arrNew[0][iRowCounter - 1];
            tag.arrIds.push(objData.AccountId);
        }
        cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
        OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


        tag = {};
        tag.iColumnIndex = 8;
        tag.GridCtrlId = "AppendGrid";
        tag.arrIds = [];
        for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
            objData = arrNew[0][iRowCounter - 1];
            tag.arrIds.push(objData.CurrencyId);
        }
        cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
        OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);

        tag = {};
        tag.iColumnIndex = 11;
        tag.GridCtrlId = "AppendGrid";
        tag.arrIds = [];
        for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
            objData = arrNew[0][iRowCounter - 1];
            tag.arrIds.push(objData.UnitId);
        }
        cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
        OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);
    }

    if (arrNew[0].length == 0 || (arrNew[0].length == 1 && arrNew[0][0].ProductId == 0)) {
        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEmpty", GetPBResourceMessages));
        $('#ResultSpan').css("color", "red");
        //$('#ResultSpan').hide();
        //setTimeout(function () { $("#ResultSpan").hide(); }, 7000);
        return false;
    }
}


//after editing the rows to append the data in pricebook grid
function btnAppendOk() {//to append data in grid
    debugger;
    var arrGridAppendData = [];
    var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
    var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
    var Abbreviation = $('#txtAbbreviation').val();
    AppendOkData = [];
    TempArray = [];
    AppendOkData = PriceBookAppendData;//For temporary grid data which is not save in db to get that data in an array
    var iTypeId = $('#hdnTypeId').val();
    var synMgrid = document.getElementById('AppendGrid');
    for (var index = 3; index < synMgrid.rows.length; index++) {
        var iPBProductId = parseInt(synMgrid.rows[index].cells[2].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[2].dataset.value);
        var sPBAlias = parseInt(synMgrid.rows[index].cells[2].dataset.salias == undefined ? 0 : synMgrid.rows[index].cells[2].dataset.salias);
        var iPBTagId = parseInt(synMgrid.rows[index].cells[3 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[3 + 1].dataset.value);
        var iPBStartDate = parseInt(synMgrid.rows[index].cells[4 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[4 + 1].dataset.value);
        var iPBEndDate = parseInt(synMgrid.rows[index].cells[5 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[5 + 1].dataset.value);
        var iPBAccountId = parseInt(synMgrid.rows[index].cells[6 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[6 + 1].dataset.value);
        var iPBCurrencyId = parseInt(synMgrid.rows[index].cells[7 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[7 + 1].dataset.value);
        var iPBMinQty = parseFloat(synMgrid.rows[index].cells[8 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[8 + 1].dataset.value);
        var iPBMaxQty = parseFloat(synMgrid.rows[index].cells[9 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[9 + 1].dataset.value);
        var iPBUnitId = parseInt(synMgrid.rows[index].cells[10 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[10 + 1].dataset.value);
        var iPBRate = parseFloat(synMgrid.rows[index].cells[11 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[11 + 1].dataset.value);
        var iPBVal1 = parseFloat(synMgrid.rows[index].cells[12 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[12 + 1].dataset.value);
        var iPBVal2 = parseFloat(synMgrid.rows[index].cells[13 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[13 + 1].dataset.value);
        var iPBVal3 = parseFloat(synMgrid.rows[index].cells[14 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[14 + 1].dataset.value);
        var iPBVal4 = parseFloat(synMgrid.rows[index].cells[15 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[15 + 1].dataset.value);
        var iPBVal5 = parseFloat(synMgrid.rows[index].cells[16 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[16 + 1].dataset.value);
        var iPBVal6 = parseFloat(synMgrid.rows[index].cells[17 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[17 + 1].dataset.value);
        var iPBVal7 = parseFloat(synMgrid.rows[index].cells[18 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[18 + 1].dataset.value);
        var iPBVal8 = parseFloat(synMgrid.rows[index].cells[19 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[19 + 1].dataset.value);
        var iPBVal9 = parseFloat(synMgrid.rows[index].cells[20 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[20 + 1].dataset.value);
        var iPBVal10 = parseFloat(synMgrid.rows[index].cells[21 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[21 + 1].dataset.value);
        var iPBVal11 = parseFloat(synMgrid.rows[index].cells[22 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[22 + 1].dataset.value);
        var iPBVal12 = parseFloat(synMgrid.rows[index].cells[23 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[23 + 1].dataset.value);
        var iPBVal13 = parseFloat(synMgrid.rows[index].cells[24 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[24 + 1].dataset.value);
        var iPBSequenceNumber = parseInt(synMgrid.rows[index].cells[25 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[25 + 1].dataset.value);
        var iPBIsEdited = parseInt(synMgrid.rows[index].cells[26 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[26 + 1].dataset.value);
        var iPBRateEidted = parseInt(synMgrid.rows[index].cells[27 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[27 + 1].dataset.value);
        var iPBAuthStatus = parseInt(synMgrid.rows[index].cells[28 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[28 + 1].dataset.value);
        var iPBLocationId = parseInt(synMgrid.rows[index].cells[29 + 1].dataset.value == undefined ? 0 : synMgrid.rows[index].cells[29 + 1].dataset.value);
        var bPBcheck = FGRIDCONTROL.getColumnCheckboxState("AppendGrid", index - 2, 1);
        var iPageNo = pageNo;
        if (iPBProductId != "" && iPBProductId != undefined && iPBProductId > 0) {
            var obj = {
                PriceBookId: PriceBookId,
                PriceBookName: PriceBookName,
                sAbbr: Abbreviation,
                ProductId: iPBProductId,
                Alias: sPBAlias,
                TagId: iPBTagId,
                AccountId: iPBAccountId,
                CurrencyId: iPBCurrencyId,
                UnitId: iPBUnitId,
                StartDate: iPBStartDate,
                EndDate: iPBEndDate,
                MinQty: iPBMinQty,
                MaxQty: iPBMaxQty,
                Val0: iPBRate,
                Val1: iPBVal1,
                Val2: iPBVal2,
                Val3: iPBVal3,
                Val4: iPBVal4,
                Val5: iPBVal5,
                Val6: iPBVal6,
                Val7: iPBVal7,
                Val8: iPBVal8,
                Val9: iPBVal9,
                Val10: iPBVal10,
                Val11: iPBVal11,
                Val12: iPBVal12,
                Val13: iPBVal13,
                SequenceNumber: iPBSequenceNumber,
                IsEdited: iPBIsEdited,
                RateEdited: iPBRateEidted,
                AuthStatus: iPBAuthStatus,
                bcheck: bPBcheck,
                PageNo: iPageNo,
                LocatoinId: iPBLocationId,
            }
            if (bPBcheck == true) {
                if ((obj.ProductId != "" && obj.Val0 != "") && (obj.ProductId != undefined && obj.Val0 != undefined)) {

                    if (obj.Val0 == 0) {
                        TempArray = [];
                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgPBEnterRate", GetPBResourceMessages) + " In Row Number " + (index - 2) + "");
                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgPBEnterRate", GetPBResourceMessages) + " In Row Number " + (index - 2) + "");
                        $('#ResultSpan').css("color", "red");
                        return false;
                    }
                    if (obj.MinQty > obj.MaxQty) {
                        TempArray = [];
                        $('#ResultSpan').html(PRICEBOOK.getResourceValue("msgUPQtyRangeFU", GetPBResourceMessages));
                        COMMON.prototype.showMessage(PRICEBOOK.getResourceValue("msgUPQtyRangeFU", GetPBResourceMessages));
                        $('#ResultSpan').css("color", "red");
                        return false;
                    }

                }

                if (AppendOkData.length > 0 && obj.Val0 > 0) {
                    for (var b = 0; b < AppendOkData.length; b++) {
                        if (AppendOkData[b].PriceBookId == obj.PriceBookId && AppendOkData[b].AccountId == obj.AccountId &&
                                    AppendOkData[b].ProductId == obj.ProductId && AppendOkData[b].UnitId == obj.UnitId && AppendOkData[b].TagId == obj.TagId
                                    && AppendOkData[b].StartDate == obj.StartDate && AppendOkData[b].EndDate == obj.EndDate && AppendOkData[b].MinQty == obj.MinQty
                                    && AppendOkData[b].MaxQty == obj.MaxQty && AppendOkData[b].CurrencyId == obj.CurrencyId && AppendOkData[b].SequenceNumber == obj.SequenceNumber && AppendOkData[b].Val0 != obj.Val0) {
                            TempArray = [];
                            COMMON.prototype.showMessage("Row" + (index - 2) + " in Append Grid ,Please Edit Another Column To Append The data");
                            return false;
                        }
                    }
                    obj.RateEdited = 1;
                    for (var b = 0; b < AppendOkData.length; b++) {
                        if (AppendOkData[b].PriceBookId == obj.PriceBookId && AppendOkData[b].ProductId == obj.ProductId && AppendOkData[b].SequenceNumber == obj.SequenceNumber) {
                            obj.IsEdited = 0;
                        }

                        else {
                            obj.IsEdited = 1;
                        }
                    }

                    TempArray.push(obj);
                }
            }
        }
    }
    if (TempArray != null && TempArray.length > 0) {
        var result = NETWORK.executeServerMethod(
        GLOBAL.getContextPath("AppendData", "PriceBook", "CoreMasters"),
        true,
        {
            iPriceBookId: PriceBookId, typeId: typeId, objPriceBookDetails: TempArray
        },
        "JSON",
        true,
        "AppendDataSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

    }
    else {
        TempArray = [];
        COMMON.prototype.showMessage("There is no data to append in PriceBook Grid,please select checkbox in append grid");
        return false;
    }




}

function AppendDataSuccess(data, arr) {
    //debugger;
    var btnAppendOk = true;
    var arrGridAppendData = [];
    var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);
    if (data == true && arr != null) {
        if (arr[0].length > 0) {
            ////debugger
            TempArray = [];
            for (var i = 0; i < arr[0].length; i++) {
                document.getElementById("AppendGrid_control_heading_ctrl_1").checked = false;
                FGRIDCONTROL.setColumnCheckboxState("AppendGrid", i + 1, 1, false);
                COMMON.prototype.showMessage("Row" + (i + 1) + " in Append Grid is already exists in " + (PriceBookName) + " pricebook");
            }
            return false;

        }
        else {
            if (TempArray.length > 0 && TempArray != null) {
                for (var t = 0; t < TempArray.length; t++) {
                    for (var b = 0; b < AppendOkData.length; b++) {
                        TempArray[t].SequenceNumber = 0;
                    }

                    AppendOkData.push(TempArray[t]);
                    TotalTempArray.push(TempArray[t]);
                }
            }

            arrGridAppendData[0] = AppendOkData;
            arrGridAppendData[1] = arr[1];


            if (arrGridAppendData[0].length > 0) {
                $('#myAppendPopup').modal('hide');
            }
            if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
                $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor')
            }
            myAppendLoadDataSuccess(true, arrGridAppendData, true);
        }

    }
}

function btnAppendCancel() {
    $('#myAppendPopup').modal('hide');
    if ($('#PriceBookWebGrid> tbody> tr').hasClass('PriceBookSelectedRowColor')) {
        $('#PriceBookWebGrid> tbody> tr').removeClass('PriceBookSelectedRowColor')
    }
    iLocalPageNo = pageNo;
    var iStartRowIndex;
    if (iLocalPageNo > 1) {
        iStartRowIndex = (parseInt(RowsCount) * (parseInt(iLocalPageNo) - 1));
    }
    else {
        iLocalPageNo = 1;
        iStartRowIndex = 0;
    }
    //PRICEBOOK.setSerialNoColumn(iStartRowIndex, true);

}
function myAppendLoadDataSuccess(flag, arrNew, bAppendOk) {
    //debugger;
    var isLoadedFromDB = 1;
    if (flag == true && arrNew != null) {

        if (arrNew[0].length > 0 && bAppendOk == true) {

            var iRowCounter = 0;
            var iColCounter = 0;
            var cellobj = null;
            var objData = null;
            var iValue = 0;
            var tag = null;
            iLocalPageNo = pageNo;
            var iStartRowIndex;
            if (iLocalPageNo > 1) {
                iStartRowIndex = (parseInt(RowsCount) * (parseInt(iLocalPageNo) - 1));
            }
            else {
                iLocalPageNo = 1;
                iStartRowIndex = 0;
            }
            var totalrows = FGRIDCONTROL.getTotalRows("PriceBookWebGrid");
            FGRIDCONTROL.clearData("PriceBookWebGrid", true);
            if (arrNew[0].length > 15 || totalrows > 15 || totalrows < arrNew[0].length) {
                FGRIDCONTROL.deleteRows("PriceBookWebGrid", 1, totalrows);
            }

            for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                if (arrNew[0].length > 15 || totalrows > 15 || totalrows < arrNew[0].length) {
                    FGRIDCONTROL.insertRows("PriceBookWebGrid", iRowCounter, 1);
                }

                for (iColCounter = 1; iColCounter <= 28; iColCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    cellobj = FGRIDCONTROL.getCellObject("PriceBookWebGrid", iRowCounter, iColCounter);
                    if (objData.SequenceNumber == 0) {
                        var eleRow = FGRIDCONTROL.getRowElement("PriceBookWebGrid", iRowCounter);                       
                        //$(eleRow).addClass("LocTbodyColor");
                        $(eleRow).addClass("PriceBookTbodyColor");
                    }
                    try {
                        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                            case MasterDataType.get('DATE'):
                                if (cellobj.ColumnAttribute.scolumnname == "StartDate") {
                                    if (objData.StartDate == undefined) {
                                        objData.StartDate = 0;
                                    }
                                    iValue = objData.StartDate;
                                }
                                else {
                                    if (objData.EndDate == undefined) {
                                        objData.EndDate = 0;
                                    }
                                    iValue = objData.EndDate
                                }
                                cellobj.setCellData("value", iValue);
                                cellobj.setCellText(DATEPICKER.convertDateIntoString(cellobj.ColumnAttribute.ctrlid, iValue));
                                debugger;
                                DATEPICKER.setDate("PriceBookWebGrid_option_StartingDate", objData.StartDate, true);
                                DATEPICKER.setDate("PriceBookWebGrid_option_EndingDate", objData.EndDate, true);

                                break;
                            case MasterDataType.get("FRACTION"):
                                if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.index) == true) {
                                    cellobj.setCellData("value", objData["Val" + cellobj.ColumnAttribute.index]);
                                    cellobj.setCellText(Number(objData["Val" + cellobj.ColumnAttribute.index]).toFixed(parseInt($("#NoOfDecimal").val())));
                                }
                                else if (cellobj.ColumnAttribute.scolumnname == "MinQty") {
                                    cellobj.setCellData("value", objData["MinQty"]);
                                    cellobj.setCellText(objData["MinQty"]);
                                }
                                else if (cellobj.ColumnAttribute.scolumnname == "MaxQty") {
                                    cellobj.setCellData("value", objData["MaxQty"]);
                                    cellobj.setCellText(objData["MaxQty"]);
                                }
                                else if (cellobj.ColumnAttribute.scolumnname == "SequenceNo") {
                                    cellobj.setCellData("value", objData["SequenceNumber"]);
                                    cellobj.setCellText(objData["SequenceNumber"]);
                                }
                                break;
                            default:
                                if (cellobj.ColumnAttribute.ctrlid == "Alias_First") {
                                    cellobj.setCellData("value", objData["Alias"]);
                                    cellobj.setCellText(objData["Alias"]);
                                }
                                else if (cellobj.ColumnAttribute.ctrlid == "IsEdited_First") {
                                    cellobj.setCellData("value", objData["IsEdited"]);
                                    cellobj.setCellText(objData["IsEdited"]);
                                }
                                else if (cellobj.ColumnAttribute.ctrlid == "IsRateEdited_First") {
                                    cellobj.setCellData("value", objData["RateEdited"]);
                                    cellobj.setCellText(objData["RateEdited"]);
                                }
                                else if (cellobj.ColumnAttribute.scolumnname == "AuthStatus" && objData["SequenceNumber"] > 0) {
                                    cellobj.setCellData("value", objData["AuthStatus"]);
                                    if (objData["AuthStatus"] == 0) {
                                        cellobj.setCellText("Pending");
                                    }
                                    else if (objData["AuthStatus"] == 1) {
                                        cellobj.setCellText("Authorized");
                                    }
                                    else if (objData["AuthStatus"] == 2) {
                                        cellobj.setCellText("Rejected");
                                    }
                                    else if (objData["AuthStatus"] == 3) {
                                        cellobj.setCellText("Stopped");
                                    }
                                    else {
                                        cellobj.setCellText("Edited");
                                    }
                                }
                                break;
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage(err.message, "Exception");
                    }
                }
                FGRIDCONTROL.update("PriceBookWebGrid");
            }

            if (arrNew[0].length > 0) {
                tag = {};
                tag.iColumnIndex = 1;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.ProductId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                tag = {};
                tag.iColumnIndex = 3;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.TagId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                tag = {};
                tag.iColumnIndex = 6;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.AccountId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);


                tag = {};
                tag.iColumnIndex = 7;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.CurrencyId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);

                tag = {};
                tag.iColumnIndex = 10;
                tag.GridCtrlId = "PriceBookWebGrid";
                tag.arrIds = [];
                for (iRowCounter = 1; iRowCounter <= arrNew[0].length; iRowCounter++) {
                    objData = arrNew[0][iRowCounter - 1];
                    tag.arrIds.push(objData.UnitId);
                }
                cellobj = FGRIDCONTROL.getCellObject(tag.GridCtrlId, 1, tag.iColumnIndex);
                OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, tag.arrIds, tag, true);
                //debugger              
            }
            //To Updated the SerialNo on Page Change
            //PRICEBOOK.setSerialNoColumn(iStartRowIndex, true);

            // debugger;

        }
    }
}
function ImportcellChange(cellobj, event) {
    if (cellobj.bLeave == true) {
        return (ImportonLeave(cellobj, event));
    }
    else {
        ImportonEnter(cellobj, event);
    }
}

function ImportonLeave(cellobj, event) {
    //debugger

    if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {

        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
        cellobj.setCellData("value", element.value);
        cellobj.setCellText($(element).find("option:selected").text());
    }


    return true;
}
function ImportonEnter(cellobj, event) {
    debugger
    var element = null;

    sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);


    if (cellobj.iColumn == 2) {
        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
        if (cellobj.getCellData("value") == null) {
            cellobj.setControl(element, "0");
        }
        else {
            cellobj.setControl(element, cellobj.getCellData("value"));
        }

    }



}
function ExternalfieldChage(element) {
    debugger
    var ctrlId = element.parentElement.id.trim();
    if (ctrlId != null) {

        var row = ctrlId.substring(ctrlId.lastIndexOf("_") + 1).split("-")[0];
        var col = ctrlId.substring(ctrlId.lastIndexOf("_") + 1).split("-")[1];
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(element.parentElement);
        var cellobj = FGRIDCONTROL.getCellObject(sGridCtrlId, row, col);
        cellobj.setCellText(element.options[element.selectedIndex].text,
                element.options[element.selectedIndex].value);
        cellobj.setControl(element, cellobj.getCellData("value"));
    }
}
;
var bFromAdvanceFilter = false;
var bMapFields = false;
var lstSheetFields=[];
AID = {
    ImportGridcellChange: function (cellobj, event) {
        if (cellobj.bLeave == true) {
            return (AID.ImportAIDonLeave(cellobj, event));
        }
        else {
            AID.ImportAIDonEnter(cellobj, event);
        }
    },

    ImportAIDonLeave: function (cellobj, event) {
        debugger

        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {

            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            cellobj.setCellData("value", element.value);
            cellobj.setCellText($(element).find("option:selected").text());
        }
        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 3) {

            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            cellobj.setCellData("value", element.value);
            cellobj.setCellText($(element).find("option:selected").text());
        }

        element = null;

        return true;
    },
    ImportAIDonEnter: function (cellobj, event) {
        debugger
        var element = null;

        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);


        if (cellobj.iColumn == 2 || cellobj.iColumn == 3) {
            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            if (cellobj.getCellData("value") == null) {
                cellobj.setControl(element, "0");
            }
            else {
                cellobj.setControl(element, cellobj.getCellData("value"));
            }

        }



    },

    ExternalfieldChage: function (element) {
        debugger
        var ctrlId = element.parentElement.id.trim();
        if (ctrlId != null) {

            var row = ctrlId.substring(ctrlId.lastIndexOf("_") + 1).split("-")[0];
            var col = ctrlId.substring(ctrlId.lastIndexOf("_") + 1).split("-")[1];
            sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(element.parentElement);
            var cellobj = FGRIDCONTROL.getCellObject(sGridCtrlId, row, col);
            cellobj.setCellText(element.options[element.selectedIndex].text,
                    element.options[element.selectedIndex].value);
            cellobj.setControl(element, cellobj.getCellData("value"));
        }
    },
    getfilepathwithtype: function () {
        debugger
        bFromAdvanceFilter = true;
        document.getElementById('ImportAIDfileInput').click();

    },

    getfilepathToImport: function (element) {
        debugger
        var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);

        if (bFromAdvanceFilter == true) {
            var objExcelFile = document.getElementById("ImportAIDfileInput").files;
            var sFileName = objExcelFile[0].name;
            if ($(element).attr('id') == "btnSheetOkAID" && $("#ulSheetNameAID").find("li.highlightLi").length == "0") {
                alert(getResourceValue("SelectSheet", GetPBResourceMessages));
                return false;
            }

            var sCurExtension = [".xlsx", ".xls"];
            var fileExt = (sFileName).substring((sFileName).lastIndexOf('.')).toLowerCase();
            if (sCurExtension.indexOf(fileExt) >= 0) {
                $('#AIDtxtFilepath').val(sFileName);
                if (objExcelFile != null && objExcelFile.length > 0) {
                    var obj = {};
                    obj.url = GLOBAL.getContextPath("LoadDataFromExcel", "PriceBook", "CoreMasters"),
                    obj.Excel_FileName = objExcelFile[0].name;
                    obj.bFromAdvanceFilter = bFromAdvanceFilter;
                    obj.bMapFields = bMapFields;
                    obj.PriceBook = PriceBookName;
                    var excel_SelectedSheet = $("#ulSheetNameAID").find("li.highlightLi").length == "0" ? "" : $("#ulSheetNameAID").find("li.highlightLi")[0].innerHTML.trim();
                    $("#SheetNameId").find("li.highlightLi").length == "0" ? "" : $("#SheetNameId").find("li.highlightLi")[0].innerHTML.trim();
                    obj.Excel_SelectedSheet = excel_SelectedSheet;
                    NETWORK.uploadFile(obj,
                                        true,
                                        objExcelFile[0],
                                        "",
                                        true,
                                        "AID.LoadFieldNamesFromExcelSucess",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd");
                }

            }
            else {
                alert(PRICEBOOK.getResourceValue("msgImportSheetFormat", GetPBResourceMessages));
                return false;
            }
        }


        //var sExtension = [".xlsx", ".xls", ".odt"];
        //var fileName = element.files[0].name;
        //if (fileName.length > 0) {
        //    if ((element.files && element.files[0])) {
        //        var fileType = element.files[0].type;
        //        //if (fileType == "application/xml" || fileType == "text/xml" || fileType == "application/vnd.ms-excel" || fileType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
        //        var fileExt = (element.value).substring((element.value).lastIndexOf('.')).toLowerCase();
        //        if (sExtension.indexOf(fileExt) >= 0) {
        //            document.getElementById("AIDtxtFilepath").value = fileName;
        //            var fd = new FormData();
        //            fd.append("file", $(element)[0].files[0]);
        //            var obj = {};
        //            obj.url = GLOBAL.getContextPath("LoadDataFromExcel", "BudgetPlanning", "CoreTransactions");
        //            obj.Excel_FileName = fileName;

        //            NETWORK.uploadFile(obj, true, element.files[0], "json", true, "AID.LoadFieldNamesFromExcelSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //        }
        //        else {
        //            COMMON.prototype.showMessage("Invalid file selected, valid files are of " +
        //              sExtension.toString() + " types.");
        //            return false;
        //        }
        //    }

        //}



    },
    CallImportMethod: function (element) {
        debugger

        bMapFields = confirm(PRICEBOOK.getResourceValue("msgLoadMapQuestion", GetPBResourceMessages)) ? true : false;


        bFromAdvanceFilter = true;
        AID.getfilepathToImport(element);
    },
    SheetModalClose: function () {
        debugger
        $("#AIDsheetdiv").modal("hide");
        $("#ulSheetNameAID").find(".highlightLi").removeClass("highlightLi");
    },
    LoadFieldNamesFromExcelSucess: function (bflag, data) {

        debugger
        if (bFromAdvanceFilter) {
            if (bflag == true && data[1].length > 0 && data[2].length == 0) {
                if (data[3] != undefined) {
                    AID.SheetModalClose();
                    //if (confirm(PRICEBOOK.getResourceValue("msgLoadMapQuestion", GetPBResourceMessages))) {
                    AID.BindingMappingDataToGrid(data[1], bMapFields, data[4]);
                    bMapFields = false;
                    //} else {
                    //    AID.BindingMappingDataToGrid(data[1], false);
                    //}


                }
                else {
                    $("#ulSheetNameAID").html("");
                    for (var i = 0; i < data[1].length; i++) {
                        var li = '<li class="clsSheetName" style="margin-top:7px;margin-bottom:7px;cursor:pointer;">' + data[1][i].Name + '</li>';
                        $("#ulSheetNameAID").append(li);
                    }
                    $("#AIDsheetdiv").modal("show");

                }
                bFromAdvanceFilter = false;
            }
            else {
                COMMON.prototype.showMessage(data[2]);
                return false;
                //AID.SheetModalClose();
            }
        } else {
            if (bflag == true && data != null) {
                debugger
            }
            else {
                alert("Error in importing excel data");
            }
            $("#AIDsheetdiv").modal("hide");
        }




        //if (bflag && data.success) {
        //    debugger
        //    lstHeaderItems = data.lstHeaderItems;
        //    if (confirm(getResourceValue("msgLoadMapQuestion", GetPBResourceMessages))) {
        //        for (var irow = 0; irow < FGRIDCONTROL.getTotalRows("AIDImportGrid") ; irow++) {
        //            debugger
        //            cellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 2);
        //            debugger
        //            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {
        //                var SelectElement = document.getElementById(cellobj.ColumnAttribute.ctrlid);
        //                SelectElement.options.length = 0;
        //                var option = document.createElement('option');
        //                option.text = "";
        //                option.value = "";
        //                SelectElement.appendChild(option);
        //                for (var i = 0; i < lstHeaderItems.length; i++) {
        //                    var option = document.createElement('option');
        //                    option.text = lstHeaderItems[i].Name;
        //                    option.value = lstHeaderItems[i].ID;
        //                    option.setAttribute('data-tag', lstHeaderItems[i].Tag);
        //                    SelectElement.appendChild(option);
        //                }
        //            }
        //            else {
        //                for (var irow = 0; irow < FGRIDCONTROL.getTotalRows("AIDImportGrid") ; irow++) {
        //                    cellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 2);
        //                    var selectelement = document.getElementById(cellobj.ColumnAttribute.ctrlid).options.length = 0;
        //                }

        //            }

        //        }
        //    }
        //}
        //else {
        //    COMMON.prototype.showMessage(data.strErrorMsg != undefined ? data : data.strErrorMsg);
        //    document.getElementById('AIDtxtFilepath').value = "";
        //    return false;

        //}

    },

    BindingMappingDataToGrid: function (lstHeaderItems, bMap, lstMappingData) {
        debugger
        try {
            if (lstHeaderItems.length > 0) {
                lstSheetFields = lstHeaderItems;
                // FGRIDCONTROL.clearData("AIDImportGrid", true);
                for (var irow = 0; irow < FGRIDCONTROL.getTotalRows("AIDImportGrid") ; irow++) {
                    
                    cellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 2);
                    if (cellobj==undefined) {
                        return;
                    }
                    if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {

                        var SelectElement = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        SelectElement.options.length = 0;
                        var option = document.createElement('option');
                        option.text = "";
                        option.value = "";
                        SelectElement.appendChild(option);
                        for (var i = 0; i < lstHeaderItems.length; i++) {
                            var option = document.createElement('option');
                            option.text = lstHeaderItems[i].Name;
                            option.value = lstHeaderItems[i].Name;
                            SelectElement.appendChild(option);
                        }


                    }
                     
                }
                for (var irow = 0; irow < lstMappingData.length>0 ; irow++) {
                    if (bMap) {
                        //for (var i = 0; i < lstHeaderItems.length > 0; i++) {
                            fcellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 1);
                            if (fcellobj == undefined) return;
                            if (fcellobj.iColumn == 1) {
                                fcellobj.setCellData("value", lstMappingData[irow].LocalFieldName);
                                fcellobj.setCellText(lstMappingData[irow].LocalFieldName);
                            }

                            cellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 2);
                            if (cellobj == undefined) return;
                            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {

                                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                if (element != null && lstMappingData[irow].ExternalFieldName != null) { 
                                        element.value = lstMappingData[irow].ExternalFieldName.trim();
                                        cellobj.setCellData("value", lstMappingData[irow].ExternalFieldName.trim());
                                        cellobj.setCellText($(element).find("option:selected").text());
                                   

                                }

                            }
                            tcellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 3);
                            if (tcellobj == undefined) return;
                            if (tcellobj.iColumn == 3) {
                                element = document.getElementById(tcellobj.ColumnAttribute.ctrlid);
                                element.value = lstMappingData[irow].MasterSelectionType;
                                tcellobj.setCellData("value", element.value);
                                tcellobj.setCellText($(element).find("option:selected").text());
                            }
                       // }

                    }
                    else {
                        cellobj = FGRIDCONTROL.getCellObject("AIDImportGrid", irow + 1, 2);
                        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true && cellobj.iColumn == 2) {
                            cellobj.setCellText("");
                            cellobj.setCellData("value", "");
                            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                            element.value = "";
                            //if (element != null) {

                            //    element.value = lstHeaderItems[irow].Name.trim();
                            //    cellobj.setCellData("value", lstHeaderItems[irow].Name.trim());
                            //    cellobj.setCellText(element.value);

                            //}
                            //var SelectElement = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                            //SelectElement.options.length = 0;
                            //var option = document.createElement('option');
                            //option.text = "";
                            //option.value = "";
                            //SelectElement.appendChild(option);
                            //for (var i = 0; i < lstHeaderItems.length; i++) {
                            //    var option = document.createElement('option');
                            //    option.text = lstHeaderItems[i].Name;
                            //    option.value = lstHeaderItems[i].Name;
                            //    SelectElement.appendChild(option);
                            //} 
                        }
                    }

                }
            }
        } catch (ex) {
            debugger
            COMMON.prototype.showMessage(ex.message);
            return false;
        }
        
    },
    clearImportGird: function () {
        debugger
        document.getElementById('AIDtxtFilepath').value = "";
        FGRIDCONTROL.clearData("AIDImportGrid", true);

        //$('#BudgetplanningImportDiv').modal('hide');
    },
    PBImportDataClick: function (element) {
        debugger
        var ImportgridId = "AIDImportGrid";
        var arrayOfImportExcelFile = [];
        try {
            var typeId = window.localStorage.getItem('typeId');
            var PriceBookId = OPTIONCONTROL.getControlValue(ctrlOptionProPriceBookH);
            var PriceBookName = OPTIONCONTROL.getControlText(ctrlOptionProPriceBookH);

            if (document.getElementById('AIDtxtFilepath').value.trim() == "") {
                COMMON.prototype.showMessage("Please Select File to Map Fields");
                return false;
            }
            else {
                for (var irow = 0; irow < FGRIDCONTROL.getTotalRows(ImportgridId) ; irow++) {
                    LocalFieldNamecellobj = FGRIDCONTROL.getCellObject(ImportgridId, irow + 1, 1);
                    var LocalFieldName = LocalFieldNamecellobj.getCellText().trim();

                    ExternalFieldNamecellobj = FGRIDCONTROL.getCellObject(ImportgridId, irow + 1, 2);
                    var ExternalFieldName = $(ExternalFieldNamecellobj.cell).find('select').length > 0 ? $(ExternalFieldNamecellobj.cell).find('select option:selected').text().trim() : ExternalFieldNamecellobj.getCellText().trim();

                    MasterSelectionTypecellobj = FGRIDCONTROL.getCellObject(ImportgridId, irow + 1, 3);
                    var MasterSelectionType = $(MasterSelectionTypecellobj.cell).find('select').length > 0 ? $(MasterSelectionTypecellobj.cell).find('select option:selected').val().trim() : MasterSelectionTypecellobj.getCellData("value").trim();

                    debugger
                    if (LocalFieldName.toLowerCase() == "PriceBook".toLowerCase()) {
                        if (ExternalFieldName != "") {
                            arrayOfImportExcelFile.push({ LocalFieldName: LocalFieldName, ExternalFieldName: ExternalFieldName, MasterSelectionType: MasterSelectionType });
                        }
                        else {
                            COMMON.prototype.showMessage(LocalFieldName + " Name Mandatory");
                            return false;
                        }

                    }
                    else if (LocalFieldName.toLowerCase() == "Product".toLowerCase()) {
                        if (ExternalFieldName != "") {
                            arrayOfImportExcelFile.push({ LocalFieldName: LocalFieldName, ExternalFieldName: ExternalFieldName, MasterSelectionType: MasterSelectionType });
                        }
                        else {
                           // arrayOfImportExcelFile.push({ LocalFieldName: LocalFieldName, ExternalFieldName: ExternalFieldName, MasterSelectionType: MasterSelectionType });
                            COMMON.prototype.showMessage(getResourceValue("msgPBProdNameMandatory", GetPBResourceMessages));
                            return false;
                        }

                    }
                    else if (LocalFieldName.toLowerCase() == "Rate".toLowerCase()) {
                        if (ExternalFieldName != "") {
                            arrayOfImportExcelFile.push({ LocalFieldName: LocalFieldName, ExternalFieldName: ExternalFieldName, MasterSelectionType: MasterSelectionType });
                        }
                        else {
                            //arrayOfImportExcelFile.push({ LocalFieldName: LocalFieldName, ExternalFieldName: ExternalFieldName, MasterSelectionType: MasterSelectionType });
                            COMMON.prototype.showMessage(getResourceValue("msgPBRateMandatory", GetPBResourceMessages));
                            return false;
                        }

                    }


                    else {
                        //(LocalFieldName.toLowerCase()!="account" || LocalFieldName.toLowerCase()!="amount") {
                        arrayOfImportExcelFile.push({ LocalFieldName: LocalFieldName, ExternalFieldName: ExternalFieldName, MasterSelectionType: MasterSelectionType });
                        //}


                    }

                }
                debugger;

                if (arrayOfImportExcelFile != null && arrayOfImportExcelFile.length > 0) {
                    result = NETWORK.executeServerMethod(
                                     GLOBAL.getContextPath("AdvanceImportMethod", "PriceBook", "CoreMasters"),
                                         true,
                                         {
                                             typeId: typeId,

                                             lstImportExcelFile: arrayOfImportExcelFile,
                                             FileName: $("#AIDtxtFilepath").val()

                                         },
                                         "json",
                                         true,
                                         "AID.AdvanceImportMethodSuccess",
                                         "GLOBAL.LoadingStart",
                                         "GLOBAL.LoadingEnd");
                }

            }
        } catch (e) {
            COMMON.prototype.showMessage(e.message);
            return;
        }

    },
    AdvanceImportMethodSuccess: function (flag, data) {
        debugger
        try {
            if (flag && data.success) {
                COMMON.prototype.showMessage(data.strErrorMsg);
                $('#AdvanceImportModalDiv').modal('hide');

            } else {
                //window.location = '/Focus9/PriceBook/Download?file=' + data.strErrorMsg;
                COMMON.prototype.showMessage(data.strErrorMsg);
                $('#AdvanceImportModalDiv').modal('hide');
                return;
            }
        } catch (e) {
            COMMON.prototype.showMessage(e.message);
            return;
        }

    }

};
;
var m_bReversePosting = false;
var GetPDCResourceMessages;
var iCounter = 0;
PDCCONVERSION = {
    //FUNCTIONALITY ON OPTIONCONTROLL PAGE LOAD
    opOptionLoadedPDC: function (id, data, tag) {
        debugger
        try {
            var iColCounter = 4;
            var cellobj = null;
            if (tag.CustomData != null && data != null) {
                cellobj = FGRIDCONTROL.getCellObject("mytable", tag.CustomData, iColCounter);
                cellobj.setCellData("value", data[0].sValue);
                cellobj.setCellText(data[1].sValue);
                if (MappingDetails != undefined) {
                    iCounter = iCounter >= MappingDetails.length ? 0 : iCounter;
                }
                MappingDetails[iCounter].ConvertedDocName = data[1].sValue;
                iCounter++;
            }
        } catch (ex) {
            alert("Exception=>ConvertMaturedPDC.optionCtrlLoaded " + ex.message);
        }
    },
    getResourceValue: function (sKey, GetResourceMessages) {
        debugger;
        var value = "";
        var result = null;

        result = PDCCONVERSION.findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },
    findKeyValue: function (sKey, arrKeyValue) {
        debugger;
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    },


    ClosePDCConversionScreen: function () {
        debugger;
        GLOBAL.gotoHomePage();
    },
    //To Functionality Of Reassigned Chechbox(show and hide textbox on CheckBox click)
    EnablePrefix: function (e) {
        var Prefix = [];
        var iColCounter = 6;
        var IsEnable = $("#chkReassign").prop("checked")
        for (var iRowCounter = 0; iRowCounter < $('#hdnMappingDetails').val() ; iRowCounter++) {
            debugger
            cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter + 1, iColCounter);
            var CellText = cellobj.cell.children.length > 0 ? cellobj.cell.children[0].value : cellobj.cell.textContent;
            if (IsEnable == true) {
                $('#mytable th:nth-child(6), table td:nth-child(6)').removeClass('clscolorReadonly');
                $(".clsPrefix").removeAttr("disabled");
                $(".clsPrefix").focus();
            } else {
                $('#mytable th:nth-child(6), table td:nth-child(6)').addClass('clscolorReadonly');
                $(".clsPrefix").attr("disabled", "disabled");
                if (CellText != "") {
                    FMessageBox.Show("PDC Conversion", PDCCONVERSION.getResourceValue("msgClearReassign", GetPDCResourceMessages), Button_enum.YESNO, 'PDCCONVERSION.YesClick');
                    return false;
                    //cellobj.setCellText("");
                    //cellobj.setCellData("value", "");
                    //$('.clsPrefix').val("");
                    //$('.lblPrefix').html('');
                    //$("#chkReassign").prop("checked", false);

                    //$('#spnValidation').html("Prefix Values Are Cleared");
                    //$('#spnValidation').html("");
                    //$('#spnValidation').delay(5000).fadeOut(400)
                }
            }
        }
    },

    DisablePOD: function (bClear) {
        debugger;
        var bDisable = $('#chkPostOnDate').is(":checked");
        if (bDisable == false || bClear == true) {
            $('#chkPostOnDate').prop("checked", false);
            var iAsOnDate = DATEPICKER.getDate("start_date");
            DATEPICKER.setDate("post_date", iAsOnDate);
            $("#post_date").css("background-color", "rgb(235, 235, 228)");
            $("#post_date").attr("disabled", true);
        }
        else {
            $("#post_date").css("background-color", "");
            $("#post_date").attr("disabled", false);
            $('#chkPostOnDate').attr("checked", true);

        }
    },

    YesClick: function (txt) {
        debugger
        if (txt == "0") {
            for (var iRowCounter = 1; iRowCounter <= $('#hdnMappingDetails').val() ; iRowCounter++) {

                cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter, 6);
                cellobj.setCellText("");
                cellobj.setCellData("value", "");
            }

            cellobj.setCellText("");
            cellobj.setCellData("value", "");
            $('.clsPrefix').val("");
            $('.lblPrefix').html('');
            $("#chkReassign").prop("checked", false);
        }
    },





    SavePDCDoc: function (ele) {
       debugger;
        var m_iBankIdForReversePosting = OPTIONCONTROL.getControlValue("mytableoptReversePosting");
        if (m_iBankIdForReversePosting == null) {
            m_iBankIdForReversePosting = 0;
        }
        //iAsOnDate variable to send data to Controller
        var iAsOnDate = DATEPICKER.getDate("start_date");
        //iPostOnDate variable to send data to Controller
        var iPostOnDate = DATEPICKER.getDate("post_date");
        //bIsPostOnDateChecked variable to send data to Controller
        var bIsPostOnDateChecked;
        if ($("#chkPostOnDate").prop("checked") == true) {
            bIsPostOnDateChecked = true;
        }
        else {
            bIsPostOnDateChecked = false;
        }
        if ($(".vNoClass ").is(":checked")) {
            bChkVNo = true;
        }
        else {
            bChkVNo = false;
        }

        //Prefix Array to send data to Controller
        var Prefix = [];
        var iColCounter = 6;
        for (var iRowCounter = 0; iRowCounter < $('#hdnMappingDetails').val() ; iRowCounter++) {
            cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter + 1, iColCounter);
            var CellText = cellobj.cell.children.length > 0 ? cellobj.cell.children[0].value : cellobj.cell.textContent;

            if (CellText != null) {
                Prefix.push(CellText)
            }
            else {
                Prefix.push("");
            }
        }

        //ChkVoucherNo Array to send data to Controller
        var ChkVoucherNo = [];
        for (var i = 0; i < $('#hdnMappingDetails').val() ; i++) {
            var strid = "chk" + i;
            if ($('#vNo' + (i + 1) + '').prop("checked") == true) {
                strid = true;
            }
            else {
                strid = false;
            }
            ChkVoucherNo.push(strid)
        }

        //chkPDCDate Array to send data to Controller
        var chkPDCDate = [];
        for (var i = 0; i < $('#hdnMappingDetails').val() ; i++) {
            var strid = "chkDate" + i;
            if ($('#DateNo' + (i + 1) + '').prop("checked") == true) {
                strid = true;
            }
            else {
                strid = false;
            }
            chkPDCDate.push(strid)
        }

        //Select Array to send data to Controller
        var Select = [];
        for (var i = 0; i < $('#hdnMappingDetails').val() ; i++) {
            var strid = "Select" + i;
            if ($('#chkSelect' + (i + 1) + '').prop("checked") == true) {
                strid = true;
            }
            else {
                strid = false;
            }
            Select.push(strid)
        }


        //Select Array to send data to Controller
        // debugger;
        var BankId = [];
        for (var i = 0; i < $('#hdnMappingDetails').val() ; i++) {
            var _bankId = "_bank" + i;

            if ($('#chkSelect' + (i + 1) + '').prop("checked") == true) {
                var optionBankId = OPTIONCONTROL.getControlValue("mytableoptReversePosting");
                if ($($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[5].dataset.value != undefined || $($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[5].children.length > 0) {
                    _bankId = $($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[5].dataset.value == undefined ? optionBankId : $($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[5].dataset.value
                }
                else {
                    _bankId = 0;
                }
            }
            else {
                _bankId = 0;
            }
            BankId.push(_bankId)
        }

        //Converted Document Array to send data From OPTION CONTROL to Controller
        var ConvertedDocument = [];
        var iColCounter = 3;
        for (var iRowCounter = 0; iRowCounter < $('#hdnMappingDetails').val() ; iRowCounter++) {
            cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter + 1, iColCounter);
            var CellText = cellobj.cell.textContent;

            if (CellText != null) {
                ConvertedDocument.push(CellText)
            }
            else {
                ConvertedDocument.push("");
            }
        }

        //Added by Sagar 20/03/2018---for selected Converted Document

        var ConvertedDocumentName = [];
        var ConvertedDocumentID = [];
        var iColCounter = 4;
        for (var iRowCounter = 0; iRowCounter < $('#hdnMappingDetails').val() ; iRowCounter++) {
            debugger
            cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter + 1, iColCounter);
            var CellText = cellobj.cell.textContent;
            var converteddocumentval = cellobj.cell.dataset.value;

            if (CellText != null && CellText != "" && CellText != undefined) {
                ConvertedDocumentName.push(CellText)
            }
            else {
                ConvertedDocumentName.push("");
            }

            if (converteddocumentval != null && converteddocumentval != NaN && converteddocumentval != undefined && converteddocumentval != "") {
                ConvertedDocumentID.push(converteddocumentval);
            }
            else {
                ConvertedDocumentID.push(0);
            }
        }



        //added by Sagar ---Validating Empty Document Name
        if ($(".chkSelect:checked").length > 0) {
            debugger
            for (var i = 0; i < $('#hdnMappingDetails').val() ; i++) {
                if ($('#chkSelect' + (i + 1) + '').prop("checked") == true) {
                    var optioctrlConvetedDocument = OPTIONCONTROL.getControlValue("mytable_ConvertedDocument");
                    if ($($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[4].dataset.value != "0" && $($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[4].dataset.value != undefined && $($('#chkSelect' + (i + 1) + '').parent()).parent()[0].children[4].dataset.value != "NaN") {

                    }
                    else {
                        COMMON.prototype.showMessage("Invalid mapping");
                        return false;
                    }
                }

            }







        }
        //ended

        //debugger;
        if ($(".chkSelect:checked").length <= 0) {
            //$('#spnValidation').html(PDCCONVERSION.getResourceValue("msgSelectOnerow_PDC", GetPDCResourceMessages));
            COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgSelectOnerow_PDC", GetPDCResourceMessages));
            return false;


        }
        //if (iPostOnDate > 0) {
        //    if (iAsOnDate > iPostOnDate) {
        //        $('#spnValidation').html("Posting date should not be less than matured date");
        //        return false;
        //    }
        //}

        if (m_bReversePosting == true) {
            // debugger;
            var appliedBankId = new Array();
            $(".chkSelect").each(function () {
                debugger;
                var _bankId;
                //var iRow = $(this)[0].closest('tr').rowIndex;
                var iRow = this.parentElement.parentElement.rowIndex;
                var iColumn = 5;
                cellobj = FGRIDCONTROL.getCellObject("mytable", iRow - 2, iColumn);
                if (cellobj.cell.children.length > 0) {
                    _bankId = OPTIONCONTROL.getControlValue(mytableoptReversePosting);
                }
                else {
                    _bankId = cellobj.CellData.value;
                }
                if (_bankId != null) {
                    appliedBankId.push(_bankId);
                }
                else {
                    appliedBankId.push(null);
                }
            });
            for (var i = 0; i < Select.length; i++) {
                debugger
                if (Select[i] == true && (appliedBankId[i] == null || appliedBankId[i] == "0" || appliedBankId[i] == "NaN")) {
                    COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgSelectReversePostin_PDC", GetPDCResourceMessages));
                    return false;
                }
            }
            var clsSelectLength = $(".chkSelect").length;
            var clsVNoLength = $(".vNoClass").length;
            var chkSelectLength = $('.chkSelect:checked').length;
            var chkVNoLength = $('.vNoClass:checked').length;
            debugger;
            for (var i = 0; i < Select.length; i++) {
                if (clsSelectLength == chkSelectLength && chkVNoLength == 0) {
                    bChkVNo = true;
                    continue;
                }
                else if (clsSelectLength == chkSelectLength) {
                    if (Select[i] == true) {
                        if (ChkVoucherNo[i] == false) {
                            bChkVNo = true;
                            //   $('#spnValidation').html(PDCCONVERSION.getResourceValue("msgSelVoucherNo_PDC", GetPDCResourceMessages));
                            COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgSelVoucherNo_PDC", GetPDCResourceMessages));
                            return false;
                        }
                        else {
                            bChkVNo = false;
                            continue;
                        }
                    }
                }
                else {
                    if (Select[i] == true) {
                        if (ChkVoucherNo[i] == false) {
                            bChkVNo = true;
                            continue;
                        }
                        else {
                            bChkVNo = false;
                            continue;
                        }
                    }
                }
            }
        }
        else {
            var clsSelectLength = $(".chkSelect").length;
            var clsVNoLength = $(".vNoClass").length;
            var chkSelectLength = $('.chkSelect:checked').length;
            var chkVNoLength = $('.vNoClass:checked').length;
            debugger;
            for (var i = 0; i < Select.length; i++) {
                if (clsSelectLength == chkSelectLength && chkVNoLength == 0) {
                    bChkVNo = true;
                    continue;
                }
                else if (clsSelectLength == chkSelectLength) {
                    if (Select[i] == true) {
                        if (ChkVoucherNo[i] == false) {
                            bChkVNo = true;
                            //  $('#spnValidation').html(PDCCONVERSION.getResourceValue("msgSelVoucherNo_PDC", GetPDCResourceMessages));
                            COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgSelVoucherNo_PDC", GetPDCResourceMessages));
                            return false;
                        }
                        else {
                            bChkVNo = false;
                            continue;
                        }
                    }
                }
                else {
                    if (Select[i] == true) {
                        if (ChkVoucherNo[i] == false) {
                            bChkVNo = true;
                            continue;
                        }
                        else {
                            bChkVNo = false;
                            continue;
                        }
                    }
                }
            }
        }
        debugger;
        NETWORK.executeServerMethod(
                         GLOBAL.getContextPath("PDCVoucherDetails", "PDC", "CoreTransactions"),
                        true,
                        { iAsOnDate: iAsOnDate, iPostOnDate: iPostOnDate, bIsPostOnDateChecked: bIsPostOnDateChecked, Prefix: Prefix, ChkVoucherNo: ChkVoucherNo, chkPDCDate: chkPDCDate, Select: Select, m_bReversePosting: m_bReversePosting, m_iBankIdForReversePosting: m_iBankIdForReversePosting, ConvertedDocument: ConvertedDocument, bChkVNo: bChkVNo, BankId: BankId, ConvertedDocumentName: ConvertedDocumentName, ConvertedDocumentID: ConvertedDocumentID },
                        "",
                        true,
                         "GLOBAL.LoadScreen", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd");
       
        //result = NETWORK.executeServerMethod(
        //                    $(ele).attr("href"),
        //                    true,
        //                    { iAsOnDate: iAsOnDate, iPostOnDate: iPostOnDate, bIsPostOnDateChecked: bIsPostOnDateChecked, Prefix: Prefix, ChkVoucherNo: ChkVoucherNo, chkPDCDate: chkPDCDate, Select: Select, m_bReversePosting: m_bReversePosting, m_iBankIdForReversePosting: m_iBankIdForReversePosting, ConvertedDocument: ConvertedDocument, bChkVNo: bChkVNo, BankId: BankId, ConvertedDocumentName: ConvertedDocumentName, ConvertedDocumentID: ConvertedDocumentID },
        //                    "HTML",
        //                    true,
        //                    "GLOBAL.LoadScreen");
        
    },

    ClearAll: function (e) {
        debugger
        OPTIONCONTROL.clear("mytableoptReversePosting", true);
        for (iRowCounter = 1; iRowCounter < MappingDetails.length + 1; iRowCounter++) {
            debugger
            cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter, 4);
            cellobj.setCellData("value", MappingDetails[iRowCounter-1].ConvertedDocNo);
            cellobj.setCellText(MappingDetails[iRowCounter-1].ConvertedDocName);

            cellobj = FGRIDCONTROL.getCellObject("mytable", iRowCounter, 5);
            cellobj.setCellData("value", 0);
            cellobj.setCellText("");
        }
        //$('.clrDepostingBanktxt').text('');
        //$('.clrDepostingBanktxt')[0].dataset.value = 0
        //$('.clrVoucherDateChk').prop("checked", false);
        $($('.clrVoucherDateChk')[0].childNodes).prop("checked", false);
        $($('.clrVoucherDateChk')[1].childNodes).prop("checked", false);
        //$('.clrConvertedDocument')[0].dataset.value = 0//added for checking validation invalid Mapping
        //$('.clrConvertedDocument').text('');
        PDCCONVERSION.DisablePOD(true);
        $(".chkSelect").prop("checked", false);
        $("#chkSelectAll").prop("checked", false);
        $($('#mytable >tbody').find('table')).hide();
        $("#chkReassign").prop("checked", false);
        PDCCONVERSION.EnablePrefix();
        $('.lblOptionControl').text('');
        $('#spnValidation').html("");



    }
}


;
var FMessageBox = {
    Show: function (HeaderText, Body, strButtons, sCallback) {
        var btns = Button_enum.get(strButtons);
        var btnArray = btns.split(',');
        var div = document.createElement('div');
        var ele = null;
        var sHtml = "";

        //After commit
        if ($("#id_FocusModalPOPup").length > 0) {
            $("#id_FocusModalPOPup").remove();
        }

       
        sHtml = "<div class='modal-dialog m_dialog' style='padding: 28px;width: 37%;min-width: 300px;margin-top: 17%;'data-dismiss='false'> \
                <div class='modal-content'> \
                <div class='modal-header theme_background-color theme_color' style='border-radius:5px;max-width: 100%;min-width: 50%;margin: 3px 3px 3px 3px;height: 32px;'>\
                <button type='button' class='close theme_color' data-dismiss='modal' style='color: rgb(25, 1, 1);font-size:35px;font-size: 32px;margin-top: -13px;font-size: 27px;'>\
                <span aria-hidden='true' ";
        sHtml += " onclick=\"FMessageBox.Result(null, event);\">×</span>";
        sHtml += "<span class='sr-only'>Close</span>\
                </button>\
                <h4 class='modal-title' id='id_title' style='color:white;line-height: 1.429;font-size: 14px;margin: -2%;'></h4>\
                </div>\
                <div class='modal-body' style='border-top: 1px solid;border-top: 1px solid rgb(238, 238, 238);padding: 20px 0px 20px 18px;'>\
                <div style='height: 80px;width:120px;font:16px/26px Georgia, Garamond, Serif;overflow:auto;overflow-x: hidden;height: 80px;width:100%;margin: -20px 0px -20px;line-height: 19px;'>\
                <p id='id_body' style='font-size: 14px;position: relative;top: 50%;transform: perspective(1px) translateY(-50%);'></p>\
                </div></div>\
                <div class='modal-footer'  id='id_footer' style='padding: 6px 20px 7px;'>\
                </div></div></div>";

        div.id = FMessageBox.getContainerId();
        div.className = "modal";

        if (FCommon.String.isNullOrEmpty(sCallback, true) == false) {
            div.setAttribute("data-callback", sCallback);
        }
        
        document.getElementsByTagName('body')[0].appendChild(div);
        //document.getElementById("myModal").innerHTML = "<div class='modal-dialog m_dialog' style='padding: 28px;width: 37%;min-width: 300px;margin-top: 17%;'data-dismiss='false'><div class='modal-content'><div class='modal-header' style='background-color:#34c4f9;border-radius:5px;max-width: 100%;min-width: 50%;margin: 3px 3px 3px 3px;height: 32px;'><button type='button' class='close' data-dismiss='modal' style='color: rgb(25, 1, 1);font-size:35px;font-size: 32px;margin-top: -13px;font-size: 27px;'><span aria-hidden='true'>×</span><span class='sr-only'>Close</span></button><h4 class='modal-title'  id='id_title' style='color:white;line-height: 1.429;font-size: 14px;margin: -2%;'></h4></div><div class='modal-body' style='border-top: 1px solid;border-top: 1px solid rgb(238, 238, 238);padding: 20px 0px 20px 18px;'><div style='height: 80px;width:120px;font:16px/26px Georgia, Garamond, Serif;overflow:auto;overflow-x: hidden;height: 80px;width:100%;margin: -20px 0px -20px;line-height: 19px;'><p id='id_body' style='font-size: 14px;position: relative;top: 50%;transform: perspective(1px) translateY(-50%);'></p></div></div><div class='modal-footer'  id='id_footer' style='padding: 6px 20px 7px;'></div></div></div>"
        $("#" + FMessageBox.getContainerId()).html(sHtml);


        var obj = [];
        for (iCounter = 4; iCounter < arguments.length; iCounter++) {
            obj.push(arguments[iCounter]);
        }


        if (btnArray.length > 0) {

            switch (btnArray.length) {
                case 1:
                    ele = document.createElement("button");
                    ele.className = "btn Fbutton fixed";
                    ele.setAttribute("data-dismiss", "modal");
                    ele.setAttribute("style", "margin-bottom:-2px;margin-top:-2px;height: 24px;;font-size: 12px;");
                    FCommon.UI.setText(ele, btnArray[0]);
                    ele.onclick = function (event) {
                        FMessageBox.Result(btnArray[0], event, obj);
                    };

                    document.getElementById("id_footer").appendChild(ele);


                    break;
                case 2:
                    ele = document.createElement("button");
                    ele.className = "btn Fbutton fixed";
                    ele.setAttribute("data-dismiss", "modal");
                    ele.setAttribute("style", "margin-bottom:-2px;margin-top:-2px;height: 24px;;font-size: 12px;");
                    FCommon.UI.setText(ele, btnArray[0]);
                    ele.onclick = function (event) {
                        FMessageBox.Result(btnArray[0], event, obj);
                    };

                    document.getElementById("id_footer").appendChild(ele);


                    ele = document.createElement("button");
                    ele.className = "btn Fbutton fixed";
                    ele.setAttribute("data-dismiss", "modal");
                    ele.setAttribute("style", "margin-bottom:-2px;margin-top:-2px;height: 24px;;font-size: 12px;");
                    FCommon.UI.setText(ele, btnArray[1]);
                    ele.onclick = function (event) {
                        FMessageBox.Result(btnArray[1], event, obj);
                    };

                    document.getElementById("id_footer").appendChild(ele);
                    break;
                case 3:
                    ele = document.createElement("button");
                    ele.className = "btn Fbutton fixed";
                    ele.setAttribute("data-dismiss", "modal");
                    ele.setAttribute("style", "margin-bottom:-2px;margin-top:-2px;height: 24px;;font-size: 12px;");
                    FCommon.UI.setText(ele, btnArray[0]);
                    ele.onclick = function (event) {
                        FMessageBox.Result(btnArray[0], event, obj);
                    };

                    document.getElementById("id_footer").appendChild(ele);


                    ele = document.createElement("button");
                    ele.className = "btn Fbutton fixed";
                    ele.setAttribute("data-dismiss", "modal");
                    ele.setAttribute("style", "margin-bottom:-2px;margin-top:-2px;height: 24px;;font-size: 12px;");
                    FCommon.UI.setText(ele, btnArray[1]);
                    ele.onclick = function (event) {
                        FMessageBox.Result(btnArray[1], event, obj);
                    };

                    document.getElementById("id_footer").appendChild(ele);


                    ele = document.createElement("button");
                    ele.className = "btn Fbutton fixed";
                    ele.setAttribute("data-dismiss", "modal");
                    ele.setAttribute("style", "margin-bottom:-2px;margin-top:-2px;height: 24px;;font-size: 12px;");
                    FCommon.UI.setText(ele, btnArray[2]);
                    ele.onclick = function (event) {
                        FMessageBox.Result(btnArray[2], event, obj);
                    };

                    document.getElementById("id_footer").appendChild(ele);

                    //document.getElementById("id_footer").innerHTML = "<button type='button' class='btn btn-default' data-dismiss='modal' style='background-color:lemonchiffon;margin-bottom:-2px;margin-top:-2pxborder-color:orange;height: 27px;font-size: 12px;' onclick=FMessageBox.Result('" + btnArray[0] + "', event);>" + btnArray[0] + "</button><button type='button' class='btn btn-default' data-dismiss='modal' style='background-color:lemonchiffon;border-color:orange;height: 27px;font-size: 12px;margin-bottom:-2px;margin-top:-2px'onclick=FMessageBox.Result('" + btnArray[1] + "', event);>" + btnArray[1] + "</button><button type='button' class='btn btn-default pull-right' data-dismiss='modal' style='background-color:white;color:deepskyblue;height: 27px;font-size: 12px;margin-bottom:-2px;margin-top:-2px' onclick=FMessageBox.Result('" + btnArray[2] + "', event);>" + btnArray[2] + "</button>";
                default:
                    break;
            }
        }
        if (HeaderText.length > 0) {
            FCommon.UI.setText("id_title", HeaderText);
        }
        if (Body.length > 0) {
            FCommon.UI.setText("id_body", Body);
        }
        $("#" + FMessageBox.getContainerId()).modal({
            backdrop: 'static',
            display:'show'
        });
      
       
    },

    getContainerId: function() {
        return ("id_FocusModalPOPup");//Id change after commit 
    },

    Result: function (text, event, obj) {
        var Element = null;
        var sCallback = "";
        var result = null;

        Element = document.getElementById(FMessageBox.getContainerId());
        if (FCommon.UI.isValidObject(Element) == true) {
            sCallback = Element.getAttribute("data-callback");
            if (FCommon.String.isNullOrEmpty(sCallback, true) == false) {
                if (FCommon.String.isNullOrEmpty(text, true) == true) {
                    result = text;
                }
                else {
                    text = text.toUpperCase();
                    result = Button_enum.set(text);
                }

                eval(sCallback)(result, event, obj);
            }
        }
    }
};
//   
function Confirm(text) {
    debugger;
    text = text.toUpperCase();
    var rs = Button_enum.set(text);
    //alert(rs);
    //switch (rs.length > 0) {

    //}
};

// JavaScript Enum


var Button_enum = (function () {
    var getName = {
        0: 'YES',
        1: 'NO',
        2: 'OK',
        3: 'CANCEL',
        4: 'CONFIRM',
        5: 'YES,NO,CANCEL',
        6: 'YES,NO'
    };
    var SetNames = {
        'YES': 0,
        'NO': 1,
        'OK': 2,
        'CANCEL': 3,
        'CONFIRM': 4,
        'YESNOCANCEL': 5,
        'YESNo': 6
    };
    return {
        get: function (name) {
            return getName[name];
        },
        set: function (name) {
            return SetNames[name];
        },
        YES: 0,
        NO: 1,
        OK: 2,
        CANCEL: 3,
        CONFIRM: 4,
        YESNOCANCEL: 5,
        YESNO: 6
    }


})();


;
var GetPDCResourceMessages;
//var lblTotalPDRAmount;
//var lblTotalPDPAmount;
var PageNo = 1;
var TotalRecords = 15; //$("#hdnNoOfPaginationLi").val();
var GlobalchkdRows = new Array();
var m_FilterData = [];
var lstRemovedTransationObject = [];
//TO HIGHLIGHT THE DIV ON ARROW KEY
var scrolled = 0;
var bFromSave = false;
var TotalSelectedCheckedRows = []
//$(document).keydown(function (e) {
//    //debugger;
//    switch (e.which) {
//        case 38: // up
//            scrolled = scrolled - 27;
//            $("div").animate({
//                scrollTop: scrolled
//            });
//            $('#MainDivForchkbody .highlight').prev().addClass('highlight');
//            $('#MainDivForchkbody .highlight').next().removeClass('highlight');
//            break;
//        case 40: // down
//            scrolled = scrolled + 27;
//            $("div").animate({
//                scrollTop: scrolled
//            });
//            $('#MainDivForchkbody .highlight').next().addClass('highlight');
//            $('#MainDivForchkbody .highlight').prev().removeClass('highlight');
//            break;
//        default: return;
//    }
//    e.stopPropagation();
//});

var PDCVOUCHERDETAILS = {
    getResourceValue: function (sKey, GetResourceMessages) {
        //  //debugger;
        var value = "";
        var result = null;

        result = PDCVOUCHERDETAILS.findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },
    findKeyValue: function (sKey, arrKeyValue) {
        //  //debugger;
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    },

    //SelectAll: function () {
    //    $("#chkSelect").prop("checked", 'true');
    //},
    ClosePDCVoucherScreen: function () {
        ////debugger;
        GLOBAL.gotoHomePage();
    },
    //GET CUSTOMIZED POPUP MODEL FROM DATABASE
    LoadCustomizedPopUpModel: function (event) {
        ////debugger;
        var result = "";
        result = NETWORK.executeServerMethod(
                        GLOBAL.getContextPath("GetPDCCustomizeFieldsPopUp", "PDC", "CoreTransactions"),
                        false,
                        null,
                        "",
                        true,
                        "PDCVOUCHERDETAILS.LoadCustomizedPopUpModelSuccess", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd");
    },

    LoadCustomizedPopUpModelSuccess: function (flag, html) {
        ////debugger;
        $('#MainDivForchkbody').html(html);
        $('#myCustomizePopup').modal('show');
    },

    //LOAD CUSTOM TABLE WITH DATA ON SECOND PAGE LOAD
    loaddata: function (e) {
        //debugger;
        m_FilterData = FILTER.getFilterValue($("#iPDCMenuId").val(), 0);
        var selectedchkdRows = [];
        var lstRemovedPdcdetails = [];
      
        if (e == undefined) {
            var GlobaiPageNo = 1;
            var SlectedIndexNo = 1;
            PageNo = 1;
            $('.AactivePager').css("background-color", "white");
            $('.AactivePager').removeClass("clsSelectedIndex");
            $('#AactivePager' + PageNo).css("color", "#ffffff");
            $('#AactivePager' + PageNo).addClass("clsSelectedIndex");
            if (PageNo == 1) {
                $('.prev_link').addClass('disable');
                $('.prev_link').parent().addClass('wrapperdisable');
                $('.First_link').addClass('disable');
                $('.prev_link').parent().addClass('wrapperdisable');
                $('.next_link').removeClass('disable');
                $('.next_link').parent().removeClass('wrapperdisable');
                $('.next_link').show();
                $('.Last_link').removeClass('disable');
                $('.Last_link').parent().removeClass('wrapperdisable');
                $('.Last_link').show();
            }
            //Showing only 3 Page No
            if ($(".clsSelectedIndex").closest('li').css("display") == "none") {
                $(".activePager").hide();
                $(".activePager").slice((PageNo - 1), (PageNo)).show();
            }
            //Code Ended
        }
        if (e != undefined) {

            var GlobaiPageNo = $('.clsSelectedIndex')[0].innerText;
            var textValue = e.text;
            var SlectedIndexNo = $('.clsSelectedIndex')[0].parentElement.value;
            if (textValue == "Previous") {
                $(".chkbody").each(function () {
                    if ($(this).is(":checked")) {
                        chkd = true;
                    }
                    else {
                        chkd = false;
                    }
                    selectedchkdRows.push(chkd);
                });
                PageNo = SlectedIndexNo - 1;
            }
            else if (textValue == "Next") {
                $(".chkbody").each(function () {
                    // //debugger;
                    if ($(this).is(":checked")) {
                        chkd = true;
                    }
                    else {
                        chkd = false;
                    }
                    selectedchkdRows.push(chkd);
                });
                PageNo = SlectedIndexNo + 1;
            }
            else if (textValue == "First") {
                $(".chkbody").each(function () {
                    // //debugger;
                    if ($(this).is(":checked")) {
                        chkd = true;
                    }
                    else {
                        chkd = false;
                    }
                    selectedchkdRows.push(chkd);
                });
                PageNo = 1;
            }
            else if (textValue == "Last") {
                $(".chkbody").each(function () {
                    // //debugger;
                    if ($(this).is(":checked")) {
                        chkd = true;
                    }
                    else {
                        chkd = false;
                    }
                    selectedchkdRows.push(chkd);
                });
                PageNo = $("#hdnNoOfPaginationLi").val();
            }

            else {
                PageNo = e.parentElement.value;
            }
            $('.AactivePager').css("background-color", "white");
            $('.AactivePager').removeClass("clsSelectedIndex");
            $('#AactivePager' + PageNo).css("color", "#ffffff");
            $('#AactivePager' + PageNo).addClass("clsSelectedIndex");

            if (PageNo == 1) {
                //$('.prev_link').hide();
                //$('.next_link').show();
                $('.prev_link').addClass('disable');
                $('.prev_link').parent().addClass('wrapperdisable');
                $('.First_link').addClass('disable');
                $('.First_link').parent().addClass('wrapperdisable');
                $('.next_link').removeClass('disable');
                $('.next_link').parent().addClass('wrapperdisable');
                $('.next_link').show();
                $('.Last_link').removeClass('disable');
                $('.Last_link').parent().addClass('wrapperdisable');
                $('.Last_link').show();
            }
            else if (PageNo == e.parentElement.parentElement.children.length - 4) {
                //$('.next_link').hide();
                //$('.prev_link').show();
                $('.next_link').addClass('disable');
                $('.next_link').parent().addClass('wrapperdisable');
                $('.Last_link').addClass('disable');
                $('.Last_link').parent().addClass('wrapperdisable');
                $('.prev_link').removeClass('disable');
                $('.prev_link').parent().removeClass('wrapperdisable');
                $('.First_link').removeClass('disable');
                $('.First_link').parent().removeClass('wrapperdisable');
                $('.First_link').show();
                $('.prev_link').show();
            }
            else {
                //$('.prev_link').show();
                //$('.next_link').show();
                $('.prev_link').removeClass('disable');
                $('.prev_link').parent().removeClass('wrapperdisable');
                $('.First_link').removeClass('disable');
                $('.First_link').parent().removeClass('wrapperdisable');
                $('.next_link').removeClass('disable');
                $('.next_link').parent().removeClass('wrapperdisable');
                $('.Last_link').removeClass('disable');
                $('.Last_link').parent().removeClass('wrapperdisable');
                $('.prev_link').show();
                $('.Last_link').show();
                $('.next_link').show();
                $('.Last_link').show();
            }

            //Showing only 3 Page No
            if ($(".clsSelectedIndex").closest('li').css("display") == "none") {
                $(".activePager").hide();
                // $(".activePager").slice((PageNo - 1), (PageNo + 2)).show();
                $(".activePager").slice((PageNo - 1), (PageNo)).show();
            }
            //Code Ended

        }


        //Added by Sagar Maintain State in Javacsript
      //  debugger;
        GlobalchkdRows = GlobalchkdRows.filter(function (obj) {
            return obj.iPageNo !== GlobaiPageNo;
        });

        //debugger;
        lstRemovedTransationObject = lstRemovedTransationObject.filter(function (obj) {
            return obj.PageNo !== GlobaiPageNo;
        });

        $(".chkbody").each(function () {
            ////debugger;
            if ($(this).is(":checked")) {
                var objGlobalData = {
                    index: $(this)[0].id.split("_")[1],
                    iPageNo: GlobaiPageNo
                }
                chkd = true;
                GlobalchkdRows.push(objGlobalData);
                // GlobalchkdRows.push(data2[$(this)[0].id.split("_")[1]-1]);
            }
            else {
                chkd = true;
                var iRowNo = (this.parentElement.parentElement.rowIndex - 2);
                var cellobj = FGRIDCONTROL.getCellObject("mainTable", iRowNo, 2);
                var sTransactionId = cellobj.getCellData("value");

                var objTransation = {
                    TransactionId: sTransactionId,
                    PageNo: GlobaiPageNo
                }

                lstRemovedTransationObject.push(objTransation);
            }

        });
        var iColNo = "";
        var selectedappliedBankId = new Array();

        $(".chkbody").each(function () {
            var iRow = $(this).parents("tr:first")[0].rowIndex;

            $($($("#chkColumn").parents("tr:first")).find("th")).each(function () {
                if ($(this)[0].innerHTML == "Applied Bank") {
                    iColNo = $(this)[0].cellIndex;
                }
            })

            cellobj = FGRIDCONTROL.getCellObject("mainTable", iRow - 2, $("#mainTable").find("th[data-fieldname='Applied Bank']").index());
            var _bankId = cellobj.CellData.value;
            //debugger;
            var cellobjBank = FGRIDCONTROL.getCellObject("mainTable", iRow - 2, 5);
            var _bankNameId = cellobjBank.CellData.value;
            if (_bankId == _bankNameId && selectedchkdRows[iRow - 3] == true) {
                COMMON.prototype.showMessage(PDCVOUCHERDETAILS.getResourceValue("PDC_DebitCrditCannotSame", GetPDCResourceMessages) + "in Row " + (iRow - 2) + "");
                selectedappliedBankId = null;
            }
            else {
                selectedappliedBankId.push(_bankId);
            }

        });


        if (e != undefined) {
            if (lstRemovedTransationObject != null && lstRemovedTransationObject.length > 0) {
                for (iCounter = 0; iCounter < lstRemovedTransationObject.length; iCounter++) {
                    lstRemovedPdcdetails.push(lstRemovedTransationObject[iCounter].TransactionId);
                }


            }
        }
        if (e == undefined) {
            GlobalchkdRows = [];
            lstRemovedTransationObject = [];
            lstRemovedPdcdetails = [];
            selectedchkdRows = [];
            selectedappliedBankId = [];
        }
        TotalSelectedCheckedRows = selectedchkdRows;
        var iSortOrder = $("#sortByColumn").val();
        //Code Ended
        debugger
        result = NETWORK.executeServerMethod(
                         GLOBAL.getContextPath("GetPDCCustomizeFieldsTable", "PDC", "CoreTransactions"),
                        true,
                        { selectedchkdRows: selectedchkdRows, appliedbankid: selectedappliedBankId, arrFilter: m_FilterData, PageNo: PageNo, TotalRecords: TotalRecords, slstRemovedPdcdetails: lstRemovedPdcdetails, selectedappliedbankId: selectedappliedBankId, iSortOrder: iSortOrder },
                        "",
                        true,
                         "PDCVOUCHERDETAILS.GetPDCCustomizeFieldsSuccess", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd");
    },

    GetPDCCustomizeFieldsSuccess: function (flag, html) {
        debugger;

        $("#PDCVoucherDetailsContainer").removeClass("disabledPagecls");
        $('#box').html(html);
        debugger;
        if ($("#hdnTotalRecCount").val() > 1) {
            $("#lblTotalPDRCount").text("Total PDR Amount :" + $("#hdnTotalRecCount").val());
        }
        else {
            $("#lblTotalPDRCount").text("");
        }
        if ($("#hdnTotalPayCount").val() > 1) {
            $("#lblTotalPDPCount").text("Total PDP Amount :" + $("#hdnTotalPayCount").val());
        }
        else {
            $("#lblTotalPDPCount").text("");
        }
        var iRecCount = FGRIDCONTROL.getTotalRows("mainTable");
        if (data2.length < 1) {
                    if (bFromSave == false) {
                        COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgNoPdc_PDC", GetPDCResourceMessages));
                    }
                    return false;
        }
        //if ($('#mainTable_body')[0].children[0].children[2].children.length < 1 ) {
        //    $("#myPager").hide();
        //    if (bFromSave == false) {
        //        COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgNoPdc_PDC", GetPDCResourceMessages));
        //    }
        //    bFromSave = false;
        //    return false;
        //}

        ////debugger
        if ($("#hdnNoOfPaginationLi").val() > 1) {
            $("#myPager").show();
            ////debugger
            //if ($('#myPager li').length == 0) {
            //    $("#myPager").append('<li><a href="#" class="prev_link" onclick="return PDCVOUCHERDETAILS.loaddata(this)">Previous</a></li>');
            //    for (var i = 0; i < $("#hdnNoOfPaginationLi").val() ; i++) {
            //        $("#myPager").append('<li id="activePager' + (i + 1) + '" class="activePager" value="' + (i + 1) + '"><a href="#" onclick="return PDCVOUCHERDETAILS.loaddata(this)"  id="AactivePager' + (i + 1) + '" class="AactivePager">' + (i + 1) + '</a></li>');
            //    }
            //    $("#myPager").append('<li><a href="#" class="next_link" onclick="return PDCVOUCHERDETAILS.loaddata(this)">Next</a></li>');

            //    $('#AactivePager' + $("#hdnPageNo").val()).css("background-color", "#34c4f9");
            //    $('#AactivePager' + $("#hdnPageNo").val()).css("color", "#ffffff");
            //    $('#AactivePager' + $("#hdnPageNo").val()).addClass("clsSelectedIndex");
            //    var SlectedIndexNo = $('.clsSelectedIndex')[0].parentElement.value;
            //    if ($("#hdnPageNo").val() == 1) {
            //        $('.prev_link').hide();
            //    }
            //    else if ($("#hdnPageNo").val() == SlectedIndexNo) {
            //        $('.next_link').hide();
            //        $('.prev_link').show();
            //    }
            //    else {
            //        $('.prev_link').show();
            //        $('.next_link').show();
            //    }
            //}

            if ($('#myPager li').length == 0) {
                ////debugger
                $("#myPager").append('<li><a href="#" class="First_link" onclick="return PDCVOUCHERDETAILS.loaddata(this)">First</a></li>');
                $("#myPager").append('<li><a href="#" class="prev_link" onclick="return PDCVOUCHERDETAILS.loaddata(this)">Previous</a></li>');

                for (var i = 0; i < $("#hdnNoOfPaginationLi").val() ; i++) {
                    ////debugger
                    $("#myPager").append('<li id="activePager' + (i + 1) + '" class="activePager" value="' + (i + 1) + '"><a href="#" onclick="return PDCVOUCHERDETAILS.loaddata(this)"  id="AactivePager' + (i + 1) + '" class="AactivePager">' + (i + 1) + '</a></li>');
                }
                $("#myPager").append('<li><a href="#" class="next_link" onclick="return PDCVOUCHERDETAILS.loaddata(this)">Next</a></li>');
                $("#myPager").append('<li><a href="#" class="Last_link" onclick="return PDCVOUCHERDETAILS.loaddata(this)">Last</a></li>');

                $('#AactivePager1').css("color", "#ffffff");
                $('#AactivePager1').addClass("clsSelectedIndex");
                $('.prev_link').addClass('disable');
                $('.prev_link').parent().addClass('wrapperdisable');
                $('.First_link').addClass('disable');
                $('.First_link').parent().addClass('wrapperdisable');
                //$(".activePager").hide();
                //$(".activePager:lt(3)").show();
                $(".activePager").hide();
                $($('.clsSelectedIndex')[0].parentNode).show()
            }
            else {
                $("#myPager").show();
                //$(".activePager").hide();
                // $($('.clsSelectedIndex')[0].parentNode).show();
            }


        }
        else {
            $("#myPager").hide();
        }
    },

    //SAVE CUSTOMIZED POPUP MODEL TO DATABASE
    SaveCustomizedPopUpModel: function () {
        debugger;
        var HighlightedText = $('#MainDivForchkbody').find('.highlightDiv').find('label').text().trim();
        var Exist = [];
        $("#MainDivForchkbody>div").each(function () {
            ////debugger;
            var chkIndex = $(this).index();
            var chk = $(this).find('input');
            if (chk.is(":checked") == true) {
                var existVal = true;
                var inputChk = $(this).find("input")[0];
                var widthVal = inputChk.dataset.content;
                var fieldId = inputChk.dataset.fieldid;
                var fieldName = inputChk.dataset.fieldname;
                var data = {
                    Exist: existVal,
                    iWidth: widthVal,
                    iColumnIndex: chkIndex,
                    iFieldId: fieldId,
                    sFieldName: fieldName
                }
            }
            else {
                var existVal = false;
                var inputChk = $(this).find("input")[0];
                var widthVal = inputChk.dataset.content;
                var fieldId = inputChk.dataset.fieldid;
                var fieldName = inputChk.dataset.fieldname;
                var data = {
                    Exist: existVal,
                    iWidth: widthVal,
                    iColumnIndex: chkIndex,
                    iFieldId: fieldId,
                    sFieldName: fieldName
                }
            }
            Exist.push(data);
        })
        debugger
        result = NETWORK.executeServerMethod(
                        GLOBAL.getContextPath("SavePDCCustomizeFieldsPopUp", "PDC", "CoreTransactions"),
                            true,
                            { arrFieldData: Exist, HighlightedText: HighlightedText, arrFilter: m_FilterData },
                            "",
                            true,
                            "PDCVOUCHERDETAILS.GetPDCCustomizeFieldsTableSuccess", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd");
    },

    SavePDCCustomizeFieldsPopUpSuccess: function (flag, data) {
        debugger;
        result = NETWORK.executeServerMethod(
                       GLOBAL.getContextPath("GetPDCCustomizeFieldsTable", "PDC", "CoreTransactions"),
                           true,
                            { arrFilter: m_FilterData, PageNo: PageNo, TotalRecords: TotalRecords },
                           "",
                           true,
                           "PDCVOUCHERDETAILS.GetPDCCustomizeFieldsTableSuccess", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd");
    },

    GetPDCCustomizeFieldsTableSuccess: function (flag, result) {
        debugger;
        $('#myCustomizePopup').modal('hide');
        $('#box').html(result);
        // PDCVOUCHERDETAILS.loaddata();
    },

    //ChangeVoucherNumbers Button Functionality To Increment the ReAssigned No by number
    ChangeVoucherNumbers: function () {
        ////debugger;
        var Selected = [];
        if ($('.chkbody').is(':checked') == false) {
            //$('#spnValidationNew').html(PDCVOUCHERDETAILS.getResourceValue("msgSelectRecordToChangeVoucherNo", GetPDCResourceMessages));
            //return false;
            COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgSelectRecordToChangeVoucherNo", GetPDCResourceMessages));
            return false;
        }
        else {
            $('#spnValidationNew').html("");

        }
        $(".chkbody").each(function () {
            ////debugger;
            var bcheck;
            if ($(this).is(":checked")) {
                bcheck = true;
            }
            else {
                bcheck = false;
            }
            Selected.push(bcheck);
        })
        result = NETWORK.executeServerMethod(
                      GLOBAL.getContextPath("GetNewVoucherNumber", "PDC", "CoreTransactions"),
                         true,
                          { Selected: Selected },
                          "",
                          true,
                          "PDCVOUCHERDETAILS.GetNewVoucherNumberSuccess");
    },

    GetNewVoucherNumberSuccess: function (flag, data) {
        var iColCounter = 1;
        // var iColCounter2 = 11;commented by Sagar for NewVoucherNo issue
        var iColCounter2 = 7;
        for (iRowCounter = 0; iRowCounter < data.length; iRowCounter++) {
            cellobj = FGRIDCONTROL.getCellObject("mainTable", iRowCounter + 1, iColCounter + 1);
            cellobj2 = FGRIDCONTROL.getCellObject("mainTable", iRowCounter + 1, iColCounter2 + 1);
            var chkId = cellobj.cell.children[0].id;
            if ($('#' + chkId).is(':checked')) {
                cellobj2.setCellText(data[iRowCounter].ReassignedVNo == null ? "" : data[iRowCounter].ReassignedVNo);
            }
        }
        //if (data.length > 0) {
        //    $("#btncngVoucherNo").css({ "pointer-events": "none" });
        //}
    },

    //POST VOUCHER DETAILS ON OK BUTTON CLICK
    PostVoucherToConvertPDC: function () {
       // debugger;
        if ($('.chkbody').is(':checked') == false && TotalSelectedCheckedRows.length == 0) {
            //$('#spnValidationNew').html(PDCVOUCHERDETAILS.getResourceValue("msgSelectOnerow_PDC", GetPDCResourceMessages));
            //$('#spnValidationNew').css("color", "red");
            //return false;
            COMMON.prototype.showMessage(PDCCONVERSION.getResourceValue("msgSelectOnerow_PDC", GetPDCResourceMessages));
            return false;
        }
        else {
            $('#spnValidationNew').html("");
        }
        var chkdRows = new Array();
        $(".chkbody").each(function () {
            // //debugger;
            if ($(this).is(":checked")) {
                chkd = true;
            }
            else {
                chkd = false;
            }
            chkdRows.push(chkd);
        });
        //    //debugger;
        // var appliedBankId = new Array();
        var iColNo = "";
        var appliedBankId = new Array();
        $(".chkbody").each(function () {
            ////debugger;
            //  var iRow = $(this)[0].closest('tr').rowIndex;//Internet Explorer Closest is not Working
            var iRow = $(this).parents("tr:first")[0].rowIndex;

            //$($($("#chkColumn").closest('tr')).find("th")).each(function () {//Internet Explorer Closest is not Working
            $($($("#chkColumn").parents("tr:first")).find("th")).each(function () {
                if ($(this)[0].innerHTML == "Applied Bank") {
                    iColNo = $(this)[0].cellIndex;
                }
            })

            //cellobj = FGRIDCONTROL.getCellObject("mainTable", iRow - 2, iColNo);//Commented by Sagar -23/7/2018 (Post not working)
            cellobj = FGRIDCONTROL.getCellObject("mainTable", iRow - 2, $("#mainTable").find("th[data-fieldname='Applied Bank']").index());
            var _bankId = cellobj.CellData.value;
            //debugger;
            var cellobjBank = FGRIDCONTROL.getCellObject("mainTable", iRow - 2, 5);
            var _bankNameId = cellobjBank.CellData.value;
            if (_bankId == _bankNameId && chkdRows[iRow - 3] == true) {
                COMMON.prototype.showMessage(PDCVOUCHERDETAILS.getResourceValue("PDC_DebitCrditCannotSame", GetPDCResourceMessages) + "in Row " + (iRow - 2) + "");
                appliedBankId = null;
            }
            else {
                appliedBankId.push(_bankId);
            }
        });

        debugger;
        var iCurrentPageNo = 1;
        var lstRemovedFromConvertAll = [];
        if ($('.clsSelectedIndex') != undefined && $('.clsSelectedIndex').length > 0) {
            iCurrentPageNo = $('.clsSelectedIndex')[0].innerText;
        }

        lstRemovedTransationObject = lstRemovedTransationObject.filter(function (obj) {
            return obj.PageNo !== iCurrentPageNo;
        });

        $(".chkbody").each(function () {
            ////debugger;
            if (!$(this).is(":checked")) {
                var iRowNo = (this.parentElement.parentElement.rowIndex - 2);
                var cellobj = FGRIDCONTROL.getCellObject("mainTable", iRowNo, 2);
                var sTransactionId = cellobj.getCellData("value");
                var objTransation = {
                    TransactionId: sTransactionId,
                    PageNo: iCurrentPageNo
                }
                lstRemovedTransationObject.push(objTransation);
            }
        });

        var IsConvertAllVouchers = $("#chkConvertAllVouchers")[0].checked;
        if (lstRemovedTransationObject.length > 0) {
            for (iCounter = 0; iCounter < lstRemovedTransationObject.length; iCounter++) {
                lstRemovedFromConvertAll.push(lstRemovedTransationObject[iCounter].TransactionId);
            }
        }
        debugger;
        if (appliedBankId != null) {
            if (appliedBankId.length > 0) {
                result = NETWORK.executeServerMethod(
            GLOBAL.getContextPath("PostVoucherToConvertPDC", "PDC", "CoreTransactions"),
               true,
                { chkdRows: chkdRows, appliedBankId: appliedBankId, bConvertAllVouchers: IsConvertAllVouchers, m_lstRemovedFromConvertAll: lstRemovedFromConvertAll },
                "",
                true,
                "PDCVOUCHERDETAILS.PostVoucherToConvertPDCSuccess", "GLOBAL.LoadingStart",
                  "GLOBAL.LoadingEnd");
            }
        }
    },

    PostVoucherToConvertPDCSuccess: function (flag, result) {
        //debugger;
        strPostMsg = result.strErrorMsg;
        flagMsg = result.flagMsg;
        //var strPostMsg = strPostMsg.slice(1, -1);
        TotalSelectedCheckedRows = [];
        if (strPostMsg != PDCVOUCHERDETAILS.getResourceValue("PDC_DebitCrditCannotSame", GetPDCResourceMessages)) {
            // $('#spnValidationNew').html(strPostMsg);
            COMMON.prototype.showMessage(strPostMsg);
        }
        if (flagMsg != "") {
            COMMON.prototype.showMessage(flagMsg);
        }
        if (strPostMsg == PDCVOUCHERDETAILS.getResourceValue("msgSuccessConversion_PDC", GetPDCResourceMessages)) {
            ////debugger
            $("#PDCVoucherDetailsContainer").addClass("disabledPagecls");
            bFromSave = true;
            PDCVOUCHERDETAILS.loaddata();
            //Code Commented for Refreshing Grid Data After Converting Voucher---16/07/2018
            //PageNo = 1;
            ////$('#spnValidationNew').css("color", "#004d00");
            //result = NETWORK.executeServerMethod(
            //   GLOBAL.getContextPath("GetPDCCustomizeFieldsTable", "PDC", "CoreTransactions"),
            //      true,
            //       { arrFilter: m_FilterData, PageNo: PageNo, TotalRecords: TotalRecords },
            //      "",
            //      true,
            //      "PDCVOUCHERDETAILS.GetPDCCustomizeFieldsTableSuccess2",
            //      "GLOBAL.LoadingStart",
            //      "GLOBAL.LoadingEnd", flagMsg);
            //Code Ended

        }
        else {
            //  $('#spnValidationNew').css("color", "red");
        }
    },

    GetPDCCustomizeFieldsTableSuccess2: function (flag, html, flagMsg) {
        debugger;

        $('#box').html(html);
        if (flagMsg != undefined && flagMsg != "") {
            // alert(flagMsg);
            COMMON.prototype.showMessage(flagMsg);
            return false;
        }

        PDCVOUCHERDETAILS.loaddata();
    },

    applyDepositingBank: function () {
        ////debugger;
        var depositingBankValue = OPTIONCONTROL.getControlValue("DepositingBank");
        var depositingBankText = OPTIONCONTROL.getControlText("DepositingBank");
        if (depositingBankValue == 0 || depositingBankValue == null) {
            COMMON.prototype.showMessage(PDCVOUCHERDETAILS.getResourceValue("msgSelectReversePostin_PDC", GetPDCResourceMessages));
            return false;
        }
        else if ($('.chkbody').is(':checked') == false) {
            //$('#spnValidationNew').html(PDCVOUCHERDETAILS.getResourceValue("msgSelectRecordToChangeBank", GetPDCResourceMessages));
            //return false;
            COMMON.prototype.showMessage(PDCVOUCHERDETAILS.getResourceValue("msgSelectRecordToChangeBank", GetPDCResourceMessages));
            return false;
        }
        else {
            var chkdRows = new Array();
            $(".chkbody").each(function () {
                ////debugger;
                if ($(this).is(":checked")) {
                    chkd = true;
                }
                else {
                    chkd = false;
                }
                chkdRows.push(chkd);
            });

            //Code Added by Sagar for Debit Credit Issue- Code Added 17/07/2018
            var iColNo = "";
            var iColNo1 = "";
            var CustMsg = "";
            $(".chkbody").each(function (index) {
                ////debugger;
                if ($(this).is(":checked")) {
                    $($(this).closest('tr')).find('#mainTableAppliedBank')
                    if (iColNo == "") {
                        $($($("#chkColumn").closest('tr')).find("th")).each(function () {
                            if ($(this)[0].innerHTML == "Name") {
                                iColNo1 = $(this)[0].cellIndex;
                            }
                            //if ($(this)[0].innerHTML == "Applied Bank") {
                            //    iColNo = $(this)[0].cellIndex;
                            //}
                        })
                    }
                    ////debugger
                    cellobj1 = FGRIDCONTROL.getCellObject("mainTable", index + 1, $("#mainTable").find("th[data-fieldname='CrAccount']").index());
                    //cellobj1 = FGRIDCONTROL.getCellObject("mainTable", index + 1, iColNo1);---23/7/2018 Not Apply Working
                    //  cellobj = FGRIDCONTROL.getCellObject("mainTable", index + 1, iColNo);
                    //OPTIONCONTROL.setControlValue("mainTableAppliedBank", depositingBankValue);
                    //OPTIONCONTROL.setControlText("mainTableAppliedBank", depositingBankText);
                    if (cellobj1.cell.innerHTML == depositingBankText) {

                        CustMsg = "Debit and Credit Banks cannot be same.";
                    }


                }
            });

            //Code ended by Sagar 
            result = NETWORK.executeServerMethod(
                   GLOBAL.getContextPath("btnApply_Click", "PDC", "CoreTransactions"),
                      true,
                       { iDepositingBank: depositingBankValue, chkdRows: chkdRows },
                       "",
                       true,
                       "PDCVOUCHERDETAILS.btnApply_ClickSuccess", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd", CustMsg);
        }
    },

    btnApply_ClickSuccess: function (flag, data, CustMsg) {
        ////debugger;
        //Code Added 17/07/2018---Credit Debit Issue
        if (data == "") {
            ////debugger
            if (CustMsg != "") {
                data = CustMsg;
            }
        }
        //Code Ended
        var depositingBankValue = OPTIONCONTROL.getControlValue("DepositingBank");
        var depositingBankText = OPTIONCONTROL.getControlText("DepositingBank");
        if (data == "") {
            $('#spnValidationNew').html("");
            var iColNo = "";
            $(".chkbody").each(function (index) {
                ////debugger;
                if ($(this).is(":checked")) {
                    $($(this).closest('tr')).find('#mainTableAppliedBank')
                    if (iColNo == "") {
                        $($($("#chkColumn").closest('tr')).find("th")).each(function () {
                            if ($(this)[0].innerHTML == "Applied Bank") {
                                iColNo = $(this)[0].cellIndex;
                            }
                        })
                    }
                    // cellobj = FGRIDCONTROL.getCellObject("mainTable", index + 1, iColNo);//Comented 23/7/2018
                    cellobj = FGRIDCONTROL.getCellObject("mainTable", index + 1, $("#mainTable").find("th[data-fieldname='Applied Bank']").index());
                    OPTIONCONTROL.setControlValue("mainTableAppliedBank", depositingBankValue);
                    OPTIONCONTROL.setControlText("mainTableAppliedBank", depositingBankText);
                    cellobj.setCellText(depositingBankText);
                    cellobj.setCellData(depositingBankValue);
                }
            });
        }
        else {
            if (data != "Vouchers with cheque discounting and RevesePosting cannot be changed.") {
                //$('#spnValidationNew').html(data);
                //return false;
                //Code Added by Sagar for Debit Credit Issue
                var iColNo = "";
                var iColNo1 = "";
                $(".chkbody").each(function (index) {
                    ////debugger;
                    if ($(this).is(":checked")) {
                        $($(this).closest('tr')).find('#mainTableAppliedBank')
                        if (iColNo == "") {
                            $($($("#chkColumn").closest('tr')).find("th")).each(function () {
                                if ($(this)[0].innerHTML == "Name") {
                                    iColNo1 = $(this)[0].cellIndex;
                                }
                                if ($(this)[0].innerHTML == "Applied Bank") {
                                    iColNo = $(this)[0].cellIndex;
                                }
                            })
                        }
                        ////debugger
                        cellobj1 = FGRIDCONTROL.getCellObject("mainTable", index + 1, $("#mainTable").find("th[data-fieldname='CrAccount']").index());
                        cellobj = FGRIDCONTROL.getCellObject("mainTable", index + 1, $("#mainTable").find("th[data-fieldname='Applied Bank']").index());
                        //Commented 23/7/2018
                        //cellobj1 = FGRIDCONTROL.getCellObject("mainTable", index + 1, iColNo1);
                        //cellobj = FGRIDCONTROL.getCellObject("mainTable", index + 1, iColNo);
                        OPTIONCONTROL.setControlValue("mainTableAppliedBank", depositingBankValue);
                        OPTIONCONTROL.setControlText("mainTableAppliedBank", depositingBankText);
                        if (cellobj1.cell.innerHTML == depositingBankText) {

                        } else {
                            cellobj.setCellText(depositingBankText);
                            cellobj.setCellData(depositingBankValue);
                        }


                    }
                });

                //Code ended by Sagar 
                COMMON.prototype.showMessage(data);
                return false;
            }
        }
    },

    TogglePannel: function (ele) {
        ////debugger;
        var IconId = ele.id;
        $('.ToggleFliter').show();
        $('#' + IconId).hide();
        if (IconId == "btnAddIcon") {
            $('#AdvanceFilterFieldset').show();
            $('#btnMinusIcon').css("color", "#34C4F9 !important");
            $('#box').removeClass("maxHeight1");
            $('#box').addClass("maxHeight2");
            $('#mainTable_body').addClass('clsht');
            //$('#box').addClass("scrollable2");
            // $("#mainTable").css("width", "auto !important")
        }
        else {
            $('#AdvanceFilterFieldset').hide();
            $('#btnMinusIcon').css("color", "#414141 !important");
            $('#box').addClass("maxHeight1");
            $('#box').removeClass("maxHeight2");
            $('#mainTable_body').removeClass('clsht');
            //$('#box').removeClass("scrollable2");
            // $("#mainTable").css("width", "100% !important")

        }
    },

    ConvertAllVouchers: function () {
        debugger;
        if ($("#chkConvertAllVouchers")[0].checked) {
            if (!$("#chkColumn")[0].checked) {
                debugger;
                $("#chkColumn").prop("checked", true);
                $(".chkbody").prop("checked", true);
            }
            //else {
            //    $("#chkColumn").prop("checked", false);
            //    $(".chkbody").prop("checked", false);
            //}
        }
    },
    Filterloaddata: function () {
        debugger;

        GlobalchkdRows = [];
        lstRemovedTransationObject = [];
        var filterlstRemovedPdcdetails = [];
        var filterselectedchkdRows = [];
        var filterselectedappliedBankId = [];
        $('#myPager li').remove();
        //var dateelement = $('[data-dtflag*="on"]');
        //if (dateelement.length > 0)
        //    FILTER.ADVANCEFILTER.UpdateDateControl();
        //var element = $('[data-opflag*="on"]');
        //if (element.length > 0)
        //    FILTER.ADVANCEFILTER.UpdateOptionControl();
        FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
        var FilterData = FILTER.getFilterValue($("#iPDCMenuId").val(), 0);

        PageNo = 1;

        var iSortOrder = $("#sortByColumn").val();

        debugger
        result = NETWORK.executeServerMethod(
                         GLOBAL.getContextPath("GetPDCCustomizeFieldsTable", "PDC", "CoreTransactions"),
                        true,
                        {
                            selectedchkdRows: filterselectedchkdRows, appliedbankid: filterselectedappliedBankId, arrFilter: FilterData,
                            PageNo: PageNo, TotalRecords: TotalRecords, slstRemovedPdcdetails: filterlstRemovedPdcdetails,
                            selectedappliedbankId: filterselectedappliedBankId, iSortOrder: iSortOrder
                        },
                        "",

                        true,
                         "PDCVOUCHERDETAILS.GetPDCCustomizeFieldsSuccess", "GLOBAL.LoadingStart",
                          "GLOBAL.LoadingEnd");
    }
}







;
var accDate = undefined;
var iPresentWeekStart = undefined;
var iPresentWeekLast = undefined;
var iLastWeekStart = undefined;
var iLastWeekLast = undefined;
var iPresentYrMnthStart = undefined;
var iPresentYrMnthEnd = undefined;
var iPresentYrLastMnthStart = undefined;
var iPresentYrLastMnthEnd = undefined;
var iYrStart = undefined;
var iLastYrStart = undefined;
var iLastYrEnd = undefined;
var m_iBaseCompanyAccountingDate = undefined;
var selectedCustomizationRowNo = 0;
var ClearearedBalance = 0;
var m_arrBRSData = [];
function brsBackTrack() {
    debugger
    var sGridId = "BRTable";
    var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);//$("#BRTable_body")[0].rows.length;
    var DocumentType = null;
    var transactionId = null;
    for (var iRowCounter = 1; iRowCounter <= iTotalRows; iRowCounter++) {
        var cell = FGRIDCONTROL.getCellObject(sGridId, (iRowCounter), (1));
        var gridRowData = FGRIDCONTROL.getRowValue(BRTable, iRowCounter);
        if (gridRowData[7].Text.trim() != "" && $("#BRTable_body")[0].rows[iRowCounter - 1].className == "fgridrow FRowColor") {
            DocumentType = gridRowData[7].Text;
            transactionId =parseInt(gridRowData[8].Text);
        }
    }
    if (transactionId != null) {
        //result = NETWORK.executeServerMethod(GLOBAL.getContextPath("EntryMain", "TransHome", "Transactions"), true,
        //        { iVoucherType: 0, lId: transactionId, iViewId: 0, objLoadUsing: 2 }, "",
        //       false,
        //        "BRS.loadVouchersSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        newTab = window.open(window.location);
        if (FCommon.UI.isValidObject(newTab) == false) {
            return (false);
        }
        newTab[newTab.addEventListener ? 'addEventListener' : 'attachEvent'](
                   (newTab.attachEvent ? 'on' : '') + 'load', function (e) {
                       newTab.GLOBAL.getNavigationHeaderElement().innerHTML = GLOBAL.getNavigationHeaderElement().innerHTML;
                       newTab.NETWORK.executeServerMethod(GLOBAL.getContextPath("EntryMain", "TransHome", "Transactions"),
                           true,
                            {
                                iVoucherType: 0,
                                lId: transactionId,
                                iViewId: 0,
                                objLoadUsing: 2,
                                sCloseCallback: "location.reload()",
                                sSuccessCallback: "BRS.loadVouchersSuccess"
                            },
                           "html",
                           true,
                           "BRS.loadVouchersSuccess",
                           "GLOBAL.LoadingStart",
                           "GLOBAL.LoadingEnd");
                   }, false);
    }
    else {
        COMMON.prototype.showMessage(brsErrorMsg.msgBRSNoRowSelected);
        return false;
    }
}
//function loadVouchersSuccess(flag, result) {
//    debugger;
//    if (flag == true && result != null) {
//        // $('#mainPannel').hide();
//        $('#brsMainDiv').hide();
//        //$('#modalBodyContent').html(result);
      
//        $('#showVouchersDiv').html(result);
//        $('#showVouchersDiv').show();
//        TRANSACTION_ENTRY.UI.setCloseCallback("LoadBrsVoucherPage");
//    }  
//}
function LoadBrsVoucherPage() {
    debugger
    //$('#BRSModal').html('');
    $('#showVouchersDiv').html('');    
    $('#brsMainDiv').show();
}
var DataLength = "0";
//$(document).ready(function () {
//$(document).one('ready', function () {
   
    //GridCustomization popup Index find
    //$("#WidthOfS").blur(function () {      
    //    $($('.highlightDiv').find('input'))[0].dataset.content = $(this).val().trim();
    //});
   
    //OnClick Customize Up And Down Button Our Customize Grid Selected HeaderText is Replaced With Other HeaderText 
    //var selected = 0;
    //var itemlist = $('#popUpdata');
    //$("#popUpdata").on("click", "div", function () {
    //    selected = $(this).index();
    //    $(this).css("width", "93%");
    //    $(this).addClass('highlightDiv');
    //    $(".ScrollDiv").not($(this)).removeClass('highlight');
    //    var width = $($('.highlight').find('input')).data().content;
    //    $('#WidthOfS').val(width);
    //});


    //$("#up").click(function (e) {
    //    e.preventDefault();
    //    if (selected >= 0) {
    //        if (selected > 10) {
    //            jQuery($(itemlist).children().eq(selected - 1)).children().first().before(jQuery($(itemlist).children().eq(selected)).children());
    //            jQuery($(itemlist).children().eq(selected)).append(jQuery($(itemlist).children().eq(selected - 1)).children()[2]);
    //            jQuery($(itemlist).children().eq(selected)).append(jQuery($(itemlist).children().eq(selected - 1)).children()[2]);
    //            jQuery($(itemlist).children().eq(selected)).removeClass('highlight');
    //            jQuery($(itemlist).children().eq(selected - 1)).addClass('highlight');
    //            selected = selected - 1;
    //        }
    //    }
    //});
    //$("#down").click(function (e) {     
    //    e.preventDefault();
    //    if (selected > 8 && selected < 21) {
    //        jQuery($(itemlist).children().eq(selected + 1)).children().first().before(jQuery($(itemlist).children().eq(selected)).children());
    //        jQuery($(itemlist).children().eq(selected)).append(jQuery($(itemlist).children().eq(selected + 1)).children()[2]);
    //        jQuery($(itemlist).children().eq(selected)).append(jQuery($(itemlist).children().eq(selected + 1)).children()[2]);
    //        jQuery($(itemlist).children().eq(selected)).removeClass('highlight');
    //        jQuery($(itemlist).children().eq(selected + 1)).addClass('highlight');
    //        var len = $('#popUpdata div').length;
    //        if (selected < len - 1) {
    //            selected = selected + 1;
    //        }
    //    }
    //});

//});//closing of $(document).one('ready', function()

//onClick Serch Icon serchIcon Heide And EraseIcon Show
$('#Searchtxt').keyup(function (event) {
   // debugger
      //  searchTable($(this).val());
        var keycode = event.keyCode;
        if (keycode != 8) {           
            //$("#eraseicon").show();
            //$(".icon-search").hide();
        }
        else if (keycode == 8) {
        //    debugger
            if ($("#Searchtxt").val() == "") {
                //$(".icon-search").show();
                //$("#eraseicon").hide();
                $("#BRTable tbody tr").removeClass("FRowColor");
                $("#BRTable tbody tr td").css({ "color": "" })
                $(row).removeClass("FRowColor");
               // var allCells = $(row).find('td');
               // td.style.color = "";
            }           
        }
    });

//Serch Matching Record Row In Table
function searchTable() {
    debugger
    $('#BRTable tbody').scrollTop(30);
    var inputVal = $("#Searchtxt").val().trim();
    var table = $('#BRTable_body');
    var counter = 0;
    //if (inputVal != "") {

    //}
    table.find('tr').each(function (index, row) {
        debugger
        var allCells = $(row).find('td');   
        var found = false;
        allCells.each(function (index, td) {
            debugger
            td.style.color = "";
            var regExp = new RegExp(inputVal, 'i');
            if (inputVal == "") {
                found = false;
                td.style.color = "";//.css({ "color": "red" });
                // return false;
            }
           else if (regExp.test($(td).text())) {
                found = true;
                td.style.color = "red";//.css({ "color": "red" });
               // return false;
            }           
        });
        if (found == true) {
            debugger
            counter++;
            $(row).addClass("FRowColor");
            if (counter == 1) {
                var rowpos = $('.FRowColor').position();
                var position = rowpos.top - 100;
                if (position >= 0) {
                    $('#BRTable tbody').scrollTop(position);
                }
                else {
                    $('#BRTable tbody').scrollTop(rowpos.top);
                }
                debugger               
            }
        }
        else {
            $(row).removeClass("FRowColor");
        }
     
       // if (found == true) $(td).addClass("RowColor"); else $(td).removeClass("RowColor");
        //  if (found == true) $(row).show(); else $(row).hide();  
        //  $("#BRTable tbody tr").removeClass("RowColor");     
    });
}
//in table body onDoubleClick clearanceDate Datepicker showHide And get date value in <td>Label
//$(function () {
//    $('#Clearancedate1_container').click(function () {      
//        var lbl = $("#Clearancedate1_input_container").prev()[0];
//        var selectedDate = DATEPICKER.getDate('Clearancedate1');
//        var ClearedDateText = $('#Clearancedate1').val().trim();
//        $("#" + lbl.id).text(ClearedDateText);
//        $("#" + lbl.id)[0].dataset.content = selectedDate;
//        $("#Clearancedate1_input_container").prev().show();
//        $('#Clearancedate1_input_container').hide();
//    });
//    //in table body onDoubleClick clearanceDate Datepicker after blur focusout
//    $("#Clearancedate1").on("blur", function () {
//        $('#Clearancedate1').focusout();
//    });
//});


var objBankReconciliationData = [];
function SaveTableBodyRecord(element, RowNo) {
    debugger
    var IsCompanyClosed = $('#hdnIsCompanyClosed').val();
    sGridId = "BRTable";
    var optval = OPTIONCONTROL.getControlValue('OptCtrlBank');
    var optText = OPTIONCONTROL.getControlText('OptCtrlBank');
    if (optval == 0 || optText == "") {
        return true;
    }
      var GridLength = $("#BRTable")[0].dataset.totalrows;
      var AllfooterData =[];
      AllfooterData.push(parseFloat($("#bookBal")[0].innerText.replace(/\,/g, '')));
      AllfooterData.push(parseFloat($("#clearedBal")[0].innerText.replace(/\,/g, '')));
      AllfooterData.push(parseFloat($("#OpeningBalance")[0].innerText.replace(/\,/g, '')));
      AllfooterData.push(parseFloat($("#outCredits")[0].innerText.replace(/\,/g, '')) == NaN ? 0 : parseFloat($("#outCredits")[0].innerText.replace(/\,/g, '')));
      AllfooterData.push(parseFloat($("#outDebits")[0].innerText.replace(/\,/g, '')) == NaN ? 0 : parseFloat($("#outDebits")[0].innerText.replace(/\,/g, '')));

       if ($('#selectSaveOption').val() == 0 && RowNo != undefined) {       
           var objBankReconciliationDataSingle = [];    
           var gridRowData = FGRIDCONTROL.getRowValue(sGridId, RowNo);
           var status = gridRowData[0].Text;
           if (status == brsErrorMsg.BR_Pending) {//"Pending"
               status = 0;
           }
           else if (status == brsErrorMsg.BR_Cleared) {//"Cleared"
               status = 1;
           }
           if (gridRowData[8].Text.trim() != "" && gridRowData[8].Text != undefined) {
                   var BankReconciliationData = {
                       AccountId: $('#OptCtrlBank_data').val(),
                       bBrs: 0,
                       BRSStatus: gridRowData[0].Text,
                       ClearenceDate: gridRowData[1].Value,

                       VoucherNo: gridRowData[2].Text,
                       VoucherDate: gridRowData[3].Value,
                       DebitAmount: gridRowData[4].Text,
                       CreditAmount: gridRowData[5].Text,
                       ChequeNo: gridRowData[6].Text,
                       
                       //DATEPICKER.getDate(Clearancedate1),
                       //DATEPICKER.getDate(gridRowData[6].Text),
                       // $("#BRTable_col_" + (i + 1) + "-7")[0].getDatepickerIntValue('Clearancedate1'),                 
                       VoucherType: gridRowData[7].Text,
                       TransactionId: gridRowData[8].Text,
                       YearId: gridRowData[gridRowData.length - 2].Text,
                       IsChecked: true,
                       Status: status,
                   }
                   objBankReconciliationDataSingle.push(BankReconciliationData);                 
               }
       }
       else if ($('#selectSaveOption').val() == 1) {
           var objBankReconciliationDataSingle = [];

           for (var iRowCounter = 0; iRowCounter < GridLength; iRowCounter++) {
               var gridRowData = FGRIDCONTROL.getRowValue(sGridId, iRowCounter + 1);
               var status = gridRowData[0].Text;
               if (status == brsErrorMsg.BR_Pending) {//"Pending" 
                   status = 0;
               }
               else if (status == brsErrorMsg.BR_Cleared) {//"Cleared"
                   status = 1;
               }
               if (gridRowData[8].Text.trim() != "" && gridRowData[8].Text != undefined) {
                   var BankReconciliationData = {
                       AccountId: $('#OptCtrlBank_data').val(),
                       bBrs: 0,
                       BRSStatus: gridRowData[0].Text,
                       ClearenceDate: gridRowData[1].Value,
                       VoucherNo: gridRowData[2].Text,
                       VoucherDate: gridRowData[3].Value,
                       DebitAmount: gridRowData[4].Text,
                       CreditAmount: gridRowData[5].Text,
                       ChequeNo: gridRowData[6].Text,
                       
                       VoucherType: gridRowData[7].Text,
                       TransactionId: gridRowData[8].Text,
                       YearId: gridRowData[gridRowData.length - 2].Text,
                       IsChecked: true,
                       Status: status,
                   }
                   objBankReconciliationDataSingle.push(BankReconciliationData);
               }
           }
       }
       if (objBankReconciliationDataSingle.length == 0 || objBankReconciliationDataSingle[0] == undefined) {
           return false;
       }
       else {
           if (IsCompanyClosed == "true") {
               COMMON.prototype.showMessage(brsErrorMsg.msgCannotReconcile);
               return false;
           }
       }
       NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveTableRecord", "BankReconciliation", "CoreTransactions"), true, { TableRecord: objBankReconciliationDataSingle, footerData: AllfooterData }, "json", true, "SaveGridBodyData", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}
function SaveGridBodyData(flag, data) {
    debugger
    if (data != null && flag == true) {
        COMMON.prototype.showMessage(data);
        return false;
    }
    else {
        COMMON.prototype.showMessage(brsErrorMsg.msgImpSettingsFailure);
    }
}
    

//function onDateChange() {
//    var cl = $('#BrTableData tr').length;
//    var selectedDate = DATEPICKER.getDate('ClearanceDate');
//    for (var i = 1; i <= cl; i++) {
//        var clearanceDate = $('#lblDatePickerValue1').text().trim();
//        var ClearedDateText = $('#ClearanceDate').val().trim();
//        if ($('#tdBrsStatus' + i).text().trim() == 'Pending') {
//            $("#lblDatePickerValue" + i).text(ClearedDateText);
//            $("#lblDatePickerValue" + i)[0].dataset.content = selectedDate;
//        }
//        else
//            continue;
//    }
//}

////scrolling DatePicker Control after click on next row
//function onClickClearanceDate(getId) {
//    lblId = $(getId).find('label')[0].id
//    OPTIONCONTROL.setParent("Clearancedate1", getId);
//    $('#Clearancedate1_input_container').show();
//    $("#" + lblId).hide();
//    var lbl = $("#" + lblId).text().trim();
//    var selectedDate = DATEPICKER.getDate('Clearancedate1', getId);
//    //lbl = OPTIONCONTROL.setControlValue('Clearancedate',getId);  
//    $("#" + getId.children[0].id).text(selectedDate);
//    $("#" + getId.children[0].id)[0].dataset.content = selectedDate;    
//}
//var brsAdvFilter;
//difference record add and remove color And set value
function BankBalance(e) {
    debugger
    ClearearedBalance = Math.abs($('#clearedBal').text().replace(/\,/g, '').trim() == "" ? 0 : ClearearedBalance);//$('#clearedBal').text()
    $("#diff").css({ "color": "red !important" });
    if (ClearearedBalance == 0) {
        ClearearedBalance = (0 + ".00");
        $("#diff").removeAttr("style");
    }
    var BankBalance = $("#bankBal").val().replace(/\,/g, '').trim() == "" ? 0 : $("#bankBal").val().replace(/\,/g, '');
    // if (BankBalance > 0) {
    var Difference = FNumberOperation.sub(parseFloat(BankBalance) - parseFloat(ClearearedBalance));
    //$('#diff').text(Difference);
    $('#diff').text(FConvert.addNumericSeparator(DataType.toDecimal((Difference), NoOfDecimal, true)));
    //$('#diff').append(".00");
    //  $("#diff").css({ "color": "red" });
    //}
    //else {
    //    $('#diff').text(-ClearearedBalance).val();
    //    $('#diff').append(".00");
    //}
    // ($("#bankBal").val()).toFixed(2);
}

//function advanceFilterOk() {
//    debugger
//    brsAdvFilter = FILTER.getFilterValue("getAdvanceFilterData");
//    debugger
//    GetTableDataRecord(0);
//    debugger
//}
function btnClose() {
    FILTER.Clear(83, 0, false);
    $("#btnAdvFilter").css({ "color": "#333" });
    $("#btnAdvFilterText").css({ "color": "#333" });
}
//function btnCancel() {
//    var brsAdvFilter = FILTER.getFilterValue(83, 0);        
//    if (brsAdvFilter == null || brsAdvFilter.length == 0) {
//        FILTER.Clear(83, 0, false);
//        $("#btnAdvFilter").css({ "color": "#333" });
//        $("#btnAdvFilterText").css({ "color": "#333" });       
//    }
//    else {
//        $("#btnAdvFilter").css({ "color": "red" });
//        $("#btnAdvFilterText").css({ "color": "red" });
//    }
//}
//Get table body record from database
function GetTableDataRecord(val) {
    debugger
    ///Cookies to load values   
    // var sortOrderIndex = document.getElementById("sortOrder").value;
    var sortColNo = $("#sortByColumn")[0].value;
    var statusIndex = document.getElementById("selectStatus").value;
    localStorage.setItem("sortOrder", document.getElementById("sortOrder").value);
    localStorage.setItem("selectStatus", document.getElementById("selectStatus").value);
    localStorage.setItem("DatePeriod", document.getElementById("DatePeriod").value);
    localStorage.setItem("SelectDebit", document.getElementById("SelectDebit").value);
    localStorage.setItem("chkShow", document.getElementById("chkShow").value);
    debugger
    //DATEPICKER.setDate("Clearancedate1", AccountingDate);
  
    var optval = OPTIONCONTROL.getControlValue('OptCtrlBank');// (val == '1') ? '5' : OPTIONCONTROL.getControlValue('OptCtrlBank');
    var optText = OPTIONCONTROL.getControlText('OptCtrlBank');
    var brsAdvFilter = FILTER.getFilterValue(83, 0);//"getAdvanceFilterData"          
    if (brsAdvFilter == null || brsAdvFilter.length==0) {
        FILTER.Clear(83, 0, false);
        $("#btnAdvFilter").css({ "color": "#333" });
        $("#btnAdvFilterText").css({ "color": "#333" });
       // COMMON.prototype.showMessage("Selected Operator Invalid");//brsErrorMsg.msgOperatorInvalid 
       // return false;
    }
    else {
        $("#btnAdvFilter").css({ "color": "red" });
        $("#btnAdvFilterText").css({ "color": "red" });
    }    
    if ((optval == 0 || optText == "" ) && brsAdvFilter.length != null) {
        COMMON.prototype.showMessage(brsErrorMsg.msgBRSNoBankAcc);//Please Select Bank Account .
        $('#myModalAdvanceFilter').modal('hide');
        if ($("#myModalAdvanceFilter").hasClass("fade")) {
            $(".modal-backdrop").remove(); // After hiding the modal, page is not clickable. To Fix this we are removing the div with this class
        }

       // FILTER.Clear(83, 0, false);
        return false;
    }    
    else {
        if (brsAdvFilter == null || brsAdvFilter.length == 0) {// brsAdvFilter.length == 0
            FILTER.Clear(83, 0, false);           
          //  return false;
        }
        $('#myModalAdvanceFilter').modal('hide');
        if ($("#myModalAdvanceFilter").hasClass("fade")) {
            $(".modal-backdrop").remove(); // After hiding the modal, page is not clickable. To Fix this we are removing the div with this class
        }
        var startDateChecked = true;// $('#StartDate_checkbox').is(':checked') == true ? true : false;
        var endDateChecked = true;//$('#EndDate_checkbox').is(':checked') == true ? true : false;
       // var showConsolidated = $('#chkShow').is(':checked') == true ? true : false;
        var bankAllData = {            
            CashOrbankCode: $('#OptCtrlBank_data').val(),//(val == '1') ? '5' : $('#OptCtrlBank_data').val(),
            Status: $("#selectStatus").val(),
            SelectionOrder: $("#sortOrder").val(),
            //FromDate: $("#StartDate")[0].disabled == false ? getDatepickerIntValue('StartDate') :($('#DatePeriod').val() == 4 ? AccountingDate : DATEPICKER.getDate('todayDate')),//AccountingDate
            //ToDate: $("#EndDate")[0].disabled == false ? getDatepickerIntValue('EndDate') : DATEPICKER.getDate('todayDate'),   
            DateOption: parseInt($('#DatePeriod').val()),
            FromDate: $('#DatePeriod').val() == 1 ? 0 : ($('#DatePeriod').val() == 4 ? AccountingDate : getDatepickerIntValue('brs_StartDate')),//AccountingDate
            ToDate: getDatepickerIntValue('brs_EndDate'),

            ScreenTypeId: '0',
            ShowConsolidatedData: $('#chkShow').is(':checked') == true ? true : false,
            DebitCredit: $("#SelectDebit").val()
        }
        if (bankAllData.FromDate > bankAllData.ToDate) {
            COMMON.prototype.showMessage(brsErrorMsg.msgBRSInvalidDates);//Starting Date cannot be greater than End Date.
            return false;
        }
        var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("BankReconciliationDynamicGrid", "BankReconciliation", "CoreTransactions"), true, { BankAllData: bankAllData, arrFilter: brsAdvFilter, sDateChecked: startDateChecked, eDateChecked: endDateChecked, sortColNo: sortColNo }, "json", true, "loadBrsGridData");
        GLOBAL.LoadingStart();
    }
}
var GlobalClearedBal = 0;
function loadBrsGridData(flag, data) {
    debugger
     m_arrBRSData = data.objData.objBankRencilDtls.DataArray;
    var creditAmount = 0;
    var DebitAmount = 0;
    var BrsDebitCount = 0;
    var BrsCreditCount = 0;
    var sGridId = "BRTable";
    var iTotalRows = 0;
    var count = 2;
    var options = '';
    iCurrentDueDate = 0;
    $('#hdnIsCompanyClosed').val(data.IsCompanyClosed);
    if (data.SortByColData != null) {
        options += '<option value="0"> </option>';
        options += '<option value="1"> None </option>';
        for (var iRowCount = 0; iRowCount < data.SortByColData.arrGridCustData.length; iRowCount++) {
            if (data.SortByColData.arrGridCustData[iRowCount].Exist == true) {
                if (data.SortByColData.arrGridCustData[iRowCount].FieldId != 11) {
                    options += '<option value="' + count + '">' + data.SortByColData.arrGridCustData[iRowCount].HeaderText + '</option>';
                }
                count++;
            }
        }
        $("select#sortByColumn").html("");
        $("select#sortByColumn").html(options);
    }
    iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
    FGRIDCONTROL.update(sGridId);
    FGRIDCONTROL.deleteRows(sGridId, 2, iTotalRows);
    FGRIDCONTROL.clearData(sGridId, true);
    if (data.objData.objBankRencilDtls.DataArray != null) {
        if (data.objData.objBankRencilDtls.DataArray.length <= 20) {
            FGRIDCONTROL.insertRows(sGridId, 2, 19);
        }
        else {
            FGRIDCONTROL.insertRows(sGridId, 2, data.objData.objBankRencilDtls.DataArray.length - 1);
        }
    }
    else {
        FGRIDCONTROL.insertRows(sGridId, 2, 19);
    }
    DataLength = data.objData.objBankRencilDtls.DataArray.length;
    // if (data.objBankRencilDtls.DataArray != null && data.objBankRencilDtls.DataArray.length!=0) {
    if (data.objData.objBankRencilDtls.DataArray != null && data.objData.objBankRencilDtls.DataArray.length > 0 && flag == true) {
        for (var iRowCounter = 1; iRowCounter < data.objData.objBankRencilDtls.DataArray.length + 1; iRowCounter++) {
            
            for (var iColCounter = 2; iColCounter <= data.objData.objBankRencilDtls.DataArray[0].length; iColCounter++) {//data.objData.arrGridCustData.length +1
                var cell = FGRIDCONTROL.getCellObject("BRTable", (iRowCounter), (iColCounter - 1));
                if (cell != undefined) {
                    if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][2] == brsErrorMsg.BR_Pending) {//'Pending'
                        FGRIDCONTROL.getRowElement("BRTable", (iRowCounter)).style.fontWeight = "bold";
                    }
                    else if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][2] == brsErrorMsg.BR_Cleared) {//'Cleared'
                        FGRIDCONTROL.getRowElement("BRTable", (iRowCounter)).style.fontWeight = "";
                    }
                    if (iColCounter == 3 || iColCounter == 5 || ((iColCounter < data.objData.objBankRencilDtls.DataArray[0].length - 3) && data.objData.arrGridCustData[iColCounter - 2].DataType == 4)) {
                        //if (iColCounter == 3 || iColCounter == 5) {
                        if (iColCounter == 5) {
                            var ColclearanceDate = data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][5] == 0 ? data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][3] : data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][5];
                            var datetext = DATEPICKER.convertDateIntoString("Clearancedate1", ColclearanceDate)
                            cell.setCellText(datetext);
                            cell.setCellData("value", ColclearanceDate);
                        }
                        else if (iColCounter == 3) {
                            var datetext = DATEPICKER.convertDateIntoString("Clearancedate1", data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][3])
                            cell.setCellText(datetext);
                            cell.setCellData("value", data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]);
                        }
                        else {
                            //   cell = FGRIDCONTROL.getCellObject("BRTable", (iRowCounter), (iColCounter + 1));
                            var datetext = DATEPICKER.convertDateIntoString("Clearancedate1", data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter])
                            cell.setCellText(datetext);
                            cell.setCellData("value", data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]);
                        }
                        //  }
                    }
                    else {
                        //debugger
                        if (cell.ColumnAttribute.datatype == "5") {
                            var datetext = DATEPICKER.convertDateIntoString("Clearancedate1", data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter])
                            cell.setCellText(datetext);
                            cell.setCellData("value", data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]);
                            //cell.setCellText(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]);
                        }
                        else {
                            //if (isNaN(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]) || data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] === "0" || data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] == "") {
                            if ($.isNumeric(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]) != iColCounter == 8) {//(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] === 0) {
                                cell.setCellText(parseInt(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]).toFixed(cell.ColumnAttribute.precision));//NoOfDecimal//cell.ColumnAttribute.precision //data.objData.arrGridCustData[iColCounter - 3].iPrecision
                            }
                            else {
                                cell.setCellText(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]);
                            }
                        }

                        //data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] == 0 ? (0).toFixed(7) : data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]
                        if (iColCounter == 2) {
                            var brsStatus = data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] == "Pending" ? brsErrorMsg.BR_Pending : brsErrorMsg.BR_Cleared;
                            cell.setCellText(brsStatus, brsStatus);
                        }
                        else if (iColCounter == 6) {
                            // debugger;
                            cell.setCellText(FConvert.addNumericSeparator(DataType.toDecimal((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]), parseInt(cell.ColumnAttribute.precision), true)));
                            //cell.setCellText(FConvert.formatToDecimalPlaces((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]).toFixed(cell.ColumnAttribute.precision), 2, true));
                            if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][6] > 0) {
                                BrsDebitCount++;
                            }
                        }
                        else if (iColCounter == 7) {
                            cell.setCellText(FConvert.addNumericSeparator(DataType.toDecimal((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]), parseInt(cell.ColumnAttribute.precision), true)));
                            // cell.setCellText(Number(data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]).toFixed(cell.ColumnAttribute.precision));//NoOfDecimal
                            if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][7] > 0) {
                                BrsCreditCount++;
                            }
                        }
                        if (cell.ColumnAttribute.ctrlid == "TrndnCredit") {
                            if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] !== "") {
                                cell.setCellText(FConvert.addNumericSeparator(DataType.toDecimal((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]), parseInt(cell.ColumnAttribute.precision), true)));//data.objData.objBankRencilDtls.NoOfDecimalsinTransCurrency
                            }
                        }
                        else if (cell.ColumnAttribute.ctrlid == "TrndnDebit") {
                            if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] !== "") {
                                cell.setCellText(FConvert.addNumericSeparator(DataType.toDecimal((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]), parseInt(cell.ColumnAttribute.precision), true)));
                            }
                        }
                        else if (cell.ColumnAttribute.ctrlid == "fLocalAmount1") {
                            if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] !== "") {
                                cell.setCellText(FConvert.addNumericSeparator(DataType.toDecimal((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]), parseInt(cell.ColumnAttribute.precision), true)));
                            }
                        }
                        else if (cell.ColumnAttribute.ctrlid == "fCumulativeAmount") {
                            if (data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter] !== "") {
                                cell.setCellText(FConvert.addNumericSeparator(DataType.toDecimal((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]), parseInt(cell.ColumnAttribute.precision), true)));//NoOfDecimal
                            }
                        }
                        //else if (cell.ColumnAttribute.datatypeid == 14) {
                        //    cell.setCellText((data.objData.objBankRencilDtls.DataArray[iRowCounter - 1][iColCounter]).toFixed(NoOfDecimal))
                        //}
                    }
                }
                //GLOBAL.LoadingEnd();
            }
            $('#debitCounts')[0].innerText = BrsDebitCount;
            $('#creditCounts')[0].innerText = BrsCreditCount;
            
        }
        debugger;
        if (data.objData.objBankRencilDtls.BookBalance > 0) {
            //$('#bookBal').text((Math.abs(data.objData.objBankRencilDtls.BookBalance)).toFixed(NoOfDecimal) + " Cr");
            $('#bookBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.BookBalance), NoOfDecimal, true)) + " Cr");
        } else if (data.objData.objBankRencilDtls.BookBalance == 0) {
            //$('#bookBal').text(Math.round(Math.abs(data.objData.objBankRencilDtls.BookBalance), DecimalCount).toFixed(NoOfDecimal));
            $('#bookBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.round(Math.abs(data.objData.objBankRencilDtls.BookBalance)), NoOfDecimal, true)));
        }
        else {
            //$('#bookBal').text((Math.abs(data.objData.objBankRencilDtls.BookBalance)).toFixed(NoOfDecimal) + " Dr");
            $('#bookBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.BookBalance), NoOfDecimal, true)) + " Dr");
        }
        if (data.objData.objBankRencilDtls.OpeningBalance > 0) {
            //$('#OpeningBalance').text((Math.abs(data.objData.objBankRencilDtls.OpeningBalance)).toFixed(NoOfDecimal) + " Cr");
            $('#OpeningBalance').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OpeningBalance), NoOfDecimal, true)) + " Cr");
        }
        else if (data.objData.objBankRencilDtls.OpeningBalance == 0) {
            //$('#OpeningBalance').text(Math.round(Math.abs(data.objData.objBankRencilDtls.OpeningBalance), DecimalCount).toFixed(NoOfDecimal));
            $('#OpeningBalance').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OpeningBalance), NoOfDecimal, true)));
        }
        else {
            //$('#OpeningBalance').text((Math.abs(data.objData.objBankRencilDtls.OpeningBalance)).toFixed(NoOfDecimal) + " Dr");
            $('#OpeningBalance').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OpeningBalance), NoOfDecimal, true)) + " Dr");
        }
        if ($('#SelectDebit').val() == 0) {
            //$('#outDebits').text(Math.abs(data.objData.objBankRencilDtls.OutDebit).toFixed(NoOfDecimal) + " Dr");
            $('#outDebits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutDebit), NoOfDecimal, true)) + " Dr");
            //$('#outCredits').text(Math.abs(data.objData.objBankRencilDtls.OutCredit).toFixed(NoOfDecimal) + " Cr");//$('#outCredits').text((0).toFixed(NoOfDecimal) + " Cr");
            $('#outCredits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutCredit), NoOfDecimal, true)) + " Cr");
        }
        else if ($('#SelectDebit').val() == 1) {
            //$('#outDebits').text(Math.abs(data.objData.objBankRencilDtls.OutDebit).toFixed(NoOfDecimal) + " Dr");//$('#outDebits').text((0).toFixed(NoOfDecimal) + " Dr");
            $('#outDebits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutDebit), NoOfDecimal, true)) + " Dr");
            //$('#outCredits').text(Math.abs(data.objData.objBankRencilDtls.OutCredit).toFixed(NoOfDecimal) + " Cr");
            $('#outCredits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutCredit), NoOfDecimal, true)) + " Cr");
        }
        else {
            //$('#outDebits').text(Math.abs(data.objData.objBankRencilDtls.OutDebit).toFixed(NoOfDecimal) + " Dr");
            $('#outDebits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutDebit), NoOfDecimal, true)) + " Dr");
            //$('#outCredits').text(Math.abs(data.objData.objBankRencilDtls.OutCredit).toFixed(NoOfDecimal) + " Cr");
            $('#outCredits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutCredit), NoOfDecimal, true)) + " Cr");
        }
        if (data.objData.objBankRencilDtls.ClearedBalance > 0) {
            //$('#clearedBal').text((Math.abs(data.objData.objBankRencilDtls.ClearedBalance)).toFixed(NoOfDecimal)+"Cr");
            $('#clearedBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.ClearedBalance), NoOfDecimal, true)) + " Cr");
        }
        else if (data.objData.objBankRencilDtls.ClearedBalance == 0) {
            //$('#clearedBal').text(Math.round(Math.abs(data.objData.objBankRencilDtls.ClearedBalance), DecimalCount).toFixed(NoOfDecimal));
            $('#clearedBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.ClearedBalance), NoOfDecimal, true)));
        }
        else {
            //$('#clearedBal').text((Math.abs(data.objData.objBankRencilDtls.ClearedBalance)).toFixed(NoOfDecimal) + "Dr");
            $('#clearedBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.ClearedBalance), NoOfDecimal, true)) + " Dr");
        }
        $('#bankBal')[0].value = (0).toFixed(4);//data.objBankRencilDtls.BankBalance

        // Book Balance-Out Debits-Out Credits
        debugger
        //var ClearearedBalance = $('#clearedBal').text();
        ClearearedBalance = DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.ClearedBalance), NoOfDecimal, true);
        //$('#diff').text((0 - ClearearedBalance).toFixed(NoOfDecimal)).val();
        $('#diff').text(FConvert.addNumericSeparator(DataType.toDecimal((0 - ClearearedBalance), NoOfDecimal, true)));
        $("#diff").css({ "color": "red !important" });
        GLOBAL.LoadingEnd();
    }
    else {
        COMMON.prototype.showMessage(brsErrorMsg.msgBRSNoData);
        $('#debitCounts')[0].innerText = 0;
        $('#creditCounts')[0].innerText = 0;
        //$('#bookBal').text(Math.abs(data.objData.objBankRencilDtls.BookBalance).toFixed(NoOfDecimal) + " Cr");
        $('#bookBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.BookBalance), NoOfDecimal, true)) + " Cr");
        //$('#OpeningBalance').text(Math.abs(data.objData.objBankRencilDtls.OpeningBalance).toFixed(NoOfDecimal) + " Cr");
        $('#OpeningBalance').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OpeningBalance), NoOfDecimal, true)) + " Cr");
        //$('#outDebits').text(Math.abs(data.objData.objBankRencilDtls.OutDebit).toFixed(NoOfDecimal) + " Dr");
        $('#outDebits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutDebit), NoOfDecimal, true)) + " Dr");
        //$('#outCredits').text(Math.abs(data.objData.objBankRencilDtls.OutCredit).toFixed(NoOfDecimal) + " Cr");
        $('#outCredits').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.OutCredit), NoOfDecimal, true)) + " Cr");
        //$('#clearedBal').text(Math.abs(data.objData.objBankRencilDtls.ClearedBalance).toFixed(NoOfDecimal));
        $('#clearedBal').text(FConvert.addNumericSeparator(DataType.toDecimal(Math.abs(data.objData.objBankRencilDtls.ClearedBalance), NoOfDecimal, true)));
        $('#bankBal')[0].value = (0).toFixed(NoOfDecimal);
        //var ClearearedBalance = $('#clearedBal').text();
        ClearearedBalance = Math.abs(data.objData.objBankRencilDtls.ClearedBalance);
        //$('#diff').text((0 - ClearearedBalance).toFixed(NoOfDecimal)).val();
        $('#diff').text(FConvert.addNumericSeparator(DataType.toDecimal((0 - ClearearedBalance), NoOfDecimal, true)));
        $("#diff").css({ "color": "red !important" });
        GLOBAL.LoadingEnd();
    }
    GlobalClearedBal = data.objData.objBankRencilDtls.ClearedBalance;
    var datePickerVal = document.getElementById("EndDate");
    if ($('#DatePeriod').val() == 0) {
        $("#StartDate_checkbox").prop('checked', data.SDateChecked);
        $("#EndDate_checkbox").prop('checked', data.EDateChecked);
    }
    //  $("#chkShow").prop('checked', data.showConsolidatedData);
    $("#StartDate_checkbox").attr('disabled', false);
    $("#EndDate_checkbox").attr('disabled', false);

    $("#ulRaisePayment").html("");
    $("#btnRaisePayment").attr("disabled", false);
    // $("#btnRaisePayment").prop("disabled", false);
    for (var i = 0; i < data.btnRaisePayment.length; i++) {
        if (i < data.btnRaisePayment.length - 1) {
            var li = '<li id="liRaisePayment' + i + '" class="dropdown-item" data-value ="' + data.btnRaisePayment[i].iVoucherType + '"  onclick="return brsRaiseVoucher(this,false)">&nbsp;' + data.btnRaisePayment[i].sName + '</li>';
        }
        else {
            var li = '<li id="liRaisePayment' + i + '" class="dropdown-item" data-value ="' + data.btnRaisePayment[i].iVoucherType + '"  onclick="return brsRaiseVoucher(this,false)">&nbsp;' + data.btnRaisePayment[i].sName + '</li>'
        }
        $("#ulRaisePayment").append(li);
    }

    $("#ulRaiseReceipt").html("");
    $("#btnRaiseReceipt").attr("disabled", false);
    // $("#btnRaiseReceipt").prop("disabled", false);
    for (var i = 0; i < data.btnRaiseReceipt.length; i++) {
        if (i < data.btnRaiseReceipt.length - 1) {
            var li = '<li id="liRaiseReceipt' + i + '" class="dropdown-item" data-value ="' + data.btnRaiseReceipt[i].iVoucherType + '" onclick="return brsRaiseVoucher(this,false)">&nbsp;' + data.btnRaiseReceipt[i].sName + '</li>';
        }
        else {
            var li = '<li id="liRaiseReceipt' + i + '" class="dropdown-item" data-value ="' + data.btnRaiseReceipt[i].iVoucherType + '"  onclick="return brsRaiseVoucher(this,false)">&nbsp;' + data.btnRaiseReceipt[i].sName + '</li>'
        }
        $("#ulRaiseReceipt").append(li);
    }
    //   FILTER.Clear(83, 0, false);
}

function brsRaiseVoucher(event,bval) {
    debugger
    var obj = null;
   // var DocumentType = event.id;
   // var iVoucherType = parseInt(event.textContent.trim());
    var lId=parseInt(event.dataset.value.trim());
   // var bBodySection=  event.innerText == "Pending bills" ?true :false
    if (lId != null) {
        obj = {};
        obj.iVoucherType = lId;
        obj.lId = 0;
        obj.iViewId = 0;
        obj.objLoadUsing = LoadTransactionBy.get("TRANSACTIONID");
        obj.bBodySectionNotRequired = bval;
        obj.objTransactionData = {};
        obj.objTransactionData.Header = {};
        obj.objTransactionData.Header["id_header_" + eVTFIELDID.FDF_BOOKNO] = FConvert.toInt(OPTIONCONTROL.getControlValue("OptCtrlBank"));
        obj.objTransactionData.Header["id_header_" + eVTFIELDID.FDF_CODE] = 0;
        newTab = window.open(window.location);
        if (FCommon.UI.isValidObject(newTab) == false) {
            return (false);
        }
        newTab[newTab.addEventListener ? 'addEventListener' : 'attachEvent'](
                   (newTab.attachEvent ? 'on' : '') + 'load', function (e) {
                       newTab.GLOBAL.getNavigationHeaderElement().innerHTML = GLOBAL.getNavigationHeaderElement().innerHTML;
                       newTab.NETWORK.executeServerMethod(GLOBAL.getContextPath("EntryMain", "TransHome", "Transactions"),
                           true,
                            obj,
                           "html",
                           true,
                           "RaiseVoucherSuccess",
                           "GLOBAL.LoadingStart",
                           "GLOBAL.LoadingEnd");
                   }, false);
    }
        //EntryMain(int iVoucherType, long lId, int iViewId, LoadTransactionBy objLoadUsing = LoadTransactionBy.HeaderId, bool bBodySectionNotRequired = false, string sVoucherNo = "", string sCloseCallback = "", int iHomePageViewId = 0)
    else {
        return false;
    }
}


//function brsPendingBills(event, bval) {
//    debugger
//    // var DocumentType = event.id;
//    // var iVoucherType = parseInt(event.textContent.trim());
//    var lId = parseInt(event.dataset.value.trim());
//    // var bBodySection=  event.innerText == "Pending bills" ?true :false
//    if (lId != null) {
//        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("TransHomeView", "TransHome", "Transactions"), true,
//                { iTypeId: lId, iMenuId: 0 }, "",
//               true,
//                "RaisePendingBillSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
//    }
//    else {
//        return false;
//    }
//}


//function RaisePendingBillSuccess(flag, result) {
//    debugger;
//    if (flag == true && result != null) {
//        // $('#mainPannel').hide();
//        $('#brsMainDiv').hide();
//        //$('#modalBodyContent').html(result);

//        $('#showVouchersDiv').html(result);
//        $('#showVouchersDiv').show();
//        $("#dvHomeTransClose").on("click", function () {
//            debugger
//            setCloseCallback();
//            //$("#dvHomeTransClose").attr('onclick', 'TRANSACTION_MAINSCREEN.onClose_Click').unbind('click');
//            //$("#dvHomeTransClose").attr('onclick', 'setCloseCallback()').bind('click');
//        });      
//    }
//}
//function setCloseCallback() {
//    debugger
//    //$("#dvHomeTransClose").click(function myfunction() {})
//    result = NETWORK.executeServerMethod(GLOBAL.getContextPath("BankReconciliation", "BankReconciliation", "CoreTransactions"), true,
//                null, "HTML",
//               true,
//                "LoadBrsVoucherPage", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

//}

function RaiseVoucherSuccess(flag, result) {
    var eleContainer = null;
    if (flag == true) {
        eleContainer = document.getElementById('page_Content');
        if (FCommon.UI.isValidObject(eleContainer) == true) {
            $(eleContainer).html(result);
            eleContainer.style.display = "block";
            document.getElementById('DashBoardScreen').style.display = "none";
        }
    }
    else {
        return;
    }
}
function LoadBrsVoucherPage(flag,data) {
    debugger
  //  GLOBAL.LoadScreen(true, data);   
    $('#showVouchersDiv').html('');
   // $('#brsMainDiv').html(data);
    $('#brsMainDiv').show();
}

//load customize popup 
function LoadCustomizedPopUp() {
    debugger
    backTrackRow = true;
    NETWORK.executeServerMethod(GLOBAL.getContextPath("GetBankReconciliationPopUp", "BankReconciliation", "CoreTransactions"), true, null, "HTML", true, "loadCustomizeData", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    //$.ajax({
    //    url: GLOBAL.getContextPath("GetBankReconciliationPopUp", "BankReconciliation", "CoreTransactions"),
    //    type: "GET",
    //    contentType: 'application/json; charset=utf-8',
    //    datatype: "JSON",
    //    traditional: true,
    //    success: function (result1) {           
    //        $("#popUpdata").html(result1);
    //    }
    //});
}
    function loadCustomizeData(flag, result1) {
        debugger
        if (result1, flag == true) {
            $("#popUpdata").html(result1);
            debugger;
            //$('#myModal').show();
            // $("#BRTable tbody tr").removeClass("RowColor");
            $('#myModal').modal('show');
            $("#BRSCustomization_row_9").hide();


            for (var i = 1; i <= 9; i++) {
                var cellobj = FGRIDCONTROL.getCellObject('BRSCustomization', i , 1);
                //  $("#BRSCustomization_col_" +"'"i"' "+"1").html();
                cellobj.cell.children[0].disabled = "true";
                //cellobj.setCheckboxState(true);
            }
            backTrackRow = false;
    }
}



    // SAVE CUSTOMIZED POPUP MODEL TO DATABASE
    function SaveCustomizedPopUpModel() {
        debugger
        var HighlightedText = $('#popUpdata').find('.highlightDiv').find('label').text().trim();
        var Exist = [];
        debugger
        $("#popUpdata>div").each(function () {
            debugger
        var chkIndex = $(this).index();
        var chk = $(this).find('input');
        if (chk.is(":checked") == true) {
            var existVal = true;
            var inputChk = $(this).find("input")[0];
            var widthVal = inputChk.dataset.content;
            var fieldId = inputChk.dataset.fieldid;
            var fieldName = inputChk.dataset.fieldname;
            var iPrecision = inputChk.dataset.precision;
            // var inputChkAllignment = $(this).find("input")[0];
            var allignment = inputChk.dataset.for;//AlignmentValue
            var data = {
                    Exist: existVal,
                    Width: widthVal,
                    ColumnIndex: chkIndex,
                    FieldId: fieldId,
                    FieldName: fieldName,
                    Allignment: allignment,
                    iPrecision: iPrecision
        }
            Exist.push(data);
        }
    })
     NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveCustomizePopUp", "BankReconciliation", "CoreTransactions"), true, { arrFieldData: Exist, HighlightedText: HighlightedText }, "html", true, "saveBrsCustomization", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //$.ajax({
        //    type: "POST",
        //    url: GLOBAL.getContextPath("SaveCustomizePopUp", "BankReconciliation", "CoreTransactions"),
        //    data: JSON.stringify({ arrFieldData: Exist, HighlightedText: HighlightedText }),
        //    datatype: "json",
        //    contentType: "application/json; charset=utf-8",
        //    success: function (data) {       
        //        if (data != "") {
        //            $("#BRGdidDataDiv").html(data);
        //            GetTableDataRecord();
        //        }
        //        else {
        //            alert("data save fail");
        //        }
        //    }
    //});   
    }
    function saveBrsCustomization(flag, data) {
        debugger
        if (flag == true && data != null) {
        $("#BRGdidDataDiv").html(data);
            debugger
            //COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreTransactions/Css/BankReconciliation.css", "BRSwindowReizerHight.setHeight");
                        GetTableDataRecord();
        }
        else {
                    alert("data save fail");
}
}



    // SAVE CUSTOMIZED POPUP MODEL TO DATABASE
    function SaveCustomizedPopUpModelNew() {
        var Exist =[];
        debugger;
        $('#myModal').modal('hide');
        //$("#myModal").hide();
        var sGridCustId = "BRSCustomization";
        var iTotalCustRows = FGRIDCONTROL.getTotalRows(sGridCustId);

    FGRIDCONTROL.update(sGridCustId);
    for (var iRowCounter = 1; iRowCounter <= iTotalCustRows; iRowCounter++) {
        debugger
        var gridRowData = FGRIDCONTROL.getRowValue(sGridCustId, iRowCounter);
        if (gridRowData[0].Value == true) {
            var data = {
                    Exist: gridRowData[0].Value,
                    ColumnIndex: iRowCounter,
                    FieldId: parseInt(gridRowData[1].Value),
                    FieldName: gridRowData[1].Text,
                    Width: parseInt(gridRowData[3].Value),
                    iPrecision: parseInt(gridRowData[4].Value),
                    Allignment: parseInt(gridRowData[5].Value),
        }
            Exist.push(data);
    }
    }

    NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveCustomizePopUp", "BankReconciliation", "CoreTransactions"), true, { arrFieldData: Exist }, "html", true, "saveBrsCustomization", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}

function onSerialNoCustomizationClick(cellobj, event) {
    debugger;
    $("#BRSCustomization_body tr").removeClass("FRowColor");
        if(!$(cellobj.Cell.parentElement).hasClass("FRowColor")) {
            $(cellobj.Cell.parentElement).addClass("FRowColor");
}
        selectedCustomizationRowNo = cellobj.iRow;
}

function CustomizationCellChange(cellobj, event) {
    debugger
    if (cellobj.bLeave == true) {
        return (onBrsCustomizationLeave(cellobj, event));
    }
    else {
        onBrsCustomizationEnter(cellobj, event);
}
}

function onBrsCustomizationEnter(cellobj, event) {
    debugger
    var element = null;
    var sGridCtrlId = "";
     sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
    if (cellobj.bHidden == true) {
        cellobj.processDefault(event);
        return;
}
switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
        case MasterDataType.get("FRACTION"):
            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            if (element != null) {
                cellobj.setControl(element, cellobj.getCellData("value"));
                $("#" +cellobj.ColumnAttribute.ctrlid).focus();
        }
            break;
        default:
            cellobj.processDefault(event);
            break;
}
}

function onBrsCustomizationLeave(cellobj, event) {
    debugger
    var element = null;
    var data = null;
    if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("FRACTION"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (cellobj.iColumn == 5) {
                    if (parseInt(element.value) > 16) {
                        element.value = "0";
                }
            }
                cellobj.setCellData("value", element.value);
                cellobj.setCellText(element.value);
                break;
            default:
                break;
    }
        return (true);
}
}


    //function onBrsCustomizationEnter(cellobj, event) {
    //    debugger
    //    switch (cellobj.iColumn) {
    //        case 4://"BRSCustomization_Precision"
    //            cellobj.processDefault(event);
    //            break;
    //        case 5:
    //            cellobj.processDefault(event);
    //            break;
    //        default:
    //            cellobj.processDefault(event);
    //            break;
    //    }
    //    return true;
    //}
    //function onBrsCustomizationLeave(cellobj, event) {
    //    var element = null;
    //    var data = null;
    //   // FGRIDCONTROL.update("BRSCustomization");
    //    debugger
    //    switch (cellobj.iColumn) {//cellobj.ColumnAttribute.ctrlid
    //        case 4:
    //            cellobj.processDefault(event);
    //            break;
    //        case 5:
    //            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
    //            if (parseInt(element.value) > 9) {
    //                element.value = "";
    //            }
    //            cellobj.setCellData("value", element.value);
    //            cellobj.setCellText(element.value);
    //            //cellobj.processDefault(event);
    //            break;
    //        default:
    //            cellobj.processDefault(event);
    //            break;
    //    }
    //    return true;
    //}

    //Start Date End Date OnChange Date Change Funcation
    function OnDatePeriodChange(getId) {
        debugger
        var currentDay =(new Date).getDate();
        var currentMonth =(new Date).getMonth() +1;
        var currentYear =(new Date).getFullYear();
        if($('#DatePeriod').val() == 1) {
            //$("#StartDate_checkbox").attr("checked", false);
            //$("#EndDate_checkbox").attr("checked", false);
            //$("#StartDate_checkbox").attr("disabled", true);
            //$("#EndDate_checkbox").attr("disabled", true);

        if (currentMonth< 10) {
            currentMonth = "0" +currentMonth;
        }
       $('#brs_StartDate').val("01/" + currentMonth + "/" +currentYear);
        if (currentMonth == 4 || currentMonth == 6 || currentMonth == 9 || currentMonth == 11) {
            $('#brs_EndDate').val("30/" + currentMonth + "/" +currentYear);
        }
        else if (currentMonth == 2) {
            if (isLeap = new Date(currentYear, 1, 29).getMonth() == 1) {
                $('#brs_EndDate').val("29/" + currentMonth + "/" +currentYear);
            }
            else {
                $('#brs_EndDate').val("28/" + currentMonth + "/" +currentYear);
        }
        }
        else {
            $('#brs_EndDate').val("31/" + currentMonth + "/" +currentYear);
        }
            // $('#ToDate').val("30/11/2015");      
        $('#brs_StartDate').prop('disabled', true);
        $('#brs_StartDate').css('pointer-events', 'none');
        $('#brs_EndDate').prop('disabled', true);
        }
    else if($('#DatePeriod').val() == 2) {
        debugger
        //$("#StartDate_checkbox").attr("disabled", true);
        //$("#EndDate_checkbox").attr("disabled", true);
        //$("#StartDate_checkbox").attr("checked", false);
        //$("#EndDate_checkbox").attr("checked", false);

        if (currentDay < 10) {
            currentDay = "0" +currentDay;
    }
        if (currentMonth < 10) {
            currentMonth = "0" +currentMonth;
    }
        var datevalue = currentDay + '/' + currentMonth + '/' +currentYear;
        $('#brs_StartDate').val(datevalue);
        $('#brs_EndDate').val(datevalue);

        $('#brs_StartDate').prop('disabled', true);
        $('#brs_StartDate').css('pointer-events', 'none');
        $('#brs_EndDate').prop('disabled', true);
    }
    else if($('#DatePeriod').val() == 3) {
        debugger
        //$("#StartDate_checkbox").attr("checked", false);
        //$("#EndDate_checkbox").attr("checked", false);
        //$("#StartDate_checkbox").attr("disabled", true);
        //$("#EndDate_checkbox").attr("disabled", true);
        $("#brs_StartDate").addClass("backgroundColor");

        var formatted_date = function (date) {
            var m = ("0" +(date.getMonth() +1)).slice(-2); // in javascript month start from 0.
            var d = ("0" +date.getDate()).slice(-2); // add leading zero
            var y = date.getFullYear();
            return d + '/' + m + '/' +y;
    }
        var curr_date = new Date();

        var day = curr_date.getDay();

        var diff = curr_date.getDate() - day + (day == 0 ? - 7: 0); // 0 for sunday

        var week_start_tstmp = curr_date.setDate(diff);

        var week_start = new Date(week_start_tstmp);

        var week_start_date = formatted_date(week_start);

        var week_end = new Date(week_start_tstmp);  // first day of week

        week_end = new Date(week_end.setDate(week_end.getDate() +6));

        var week_end_date = formatted_date(week_end);

        $('#brs_StartDate').val(week_start_date);
        $('#brs_EndDate').val(week_end_date);
        $('#brs_StartDate').prop('disabled', true);
        $('#brs_StartDate').css('pointer-events', 'none');
        $('#brs_StartDate_input_container').css('pointer-events', 'none');
        $('#brs_EndDate').prop('disabled', true);
        // date=week_start_date + ' to '+week_end_date;
    }
    else if($('#DatePeriod').val() == 4) {
        debugger
        DATEPICKER.setDate("brs_StartDate", AccountingDate);
        $('#brs_StartDate').parent().parent().css('background-color', '#EBEBE4');
        $('#brs_StartDate').css('background-color', '#EBEBE4')
        // $('#StartDate').val('01/01/' + currentYear);
        //$("#StartDate_checkbox").attr("checked", false);
        //$("#EndDate_checkbox").attr("checked", false);
        // $("#StartDate_checkbox").attr("disabled", true);
        // $("#EndDate_checkbox").attr("disabled", true);
        //DATEPICKER
        if (currentDay < 10) {
            currentDay = "0" +currentDay;
    }
        if (currentMonth < 10) {
            currentMonth = "0" +currentMonth;
    }
        $('#brs_EndDate').val(currentDay + '/' + currentMonth + '/' +currentYear);
        $('#brs_StartDate').prop('disabled', true);
        $('#brs_StartDate').css('pointer-events', 'none');
        $('#brs_EndDate').prop('disabled', true);
    }
    else {
        debugger
        DATEPICKER.setDate("brs_StartDate", AccountingDate);

        $('#brs_StartDate').parent().parent().css('background-color', '#EBEBE4');
        $('#brs_StartDate').css('background-color', '#EBEBE4')

        // $('#StartDate').val('01/01/' + currentYear);
        //$("#StartDate_checkbox").attr("checked", false);
        //$("#EndDate_checkbox").attr("checked", false);
        //$("#StartDate_checkbox").attr("disabled", false);
        //$("#EndDate_checkbox").attr("disabled", false);
        DATEPICKER
        if (currentDay < 10) {
            currentDay = "0" +currentDay;
    }
        if (currentMonth < 10) {
            currentMonth = "0" +currentMonth;
    }
        $('#brs_EndDate').val(currentDay + '/' + currentMonth + '/' +currentYear);
        //$("#StartDate_checkbox").attr("disabled", false);
        //$("#EndDate_checkbox").attr("disabled", false);
}
}
    //Select Only Numeric Value
    function IsNumeric(e) {
        debugger
        var keyCode = e.which ? e.which : e.keyCode
        var ret = (keyCode >= 48 && keyCode <= 57 || keyCode == 13 || keyCode == 9);
        return ret;
        }
        function bankBalanceBlur() {
            debugger
            $("#bankBal").val(parseFloat($("#bankBal").val().replace(/\,/g, '') == "" ? "0.00" : $("#bankBal").val().replace(/\,/g, '')).toFixed(2));
}
        $(function () {
            $("#MainDivForCheckbox").on("click", "div", function () {
        $(this).css("width", "90%");
        $(this).addClass('highlightDiv');
        $(".ScrollDiv").not($(this)).removeClass('highlightDiv');
});
    //var scrolled = 0;
    //$(document).ready(function () {
    //    debugger
    //    if (localStorage.getItem("sortOrder") != null) {
    //        document.getElementById("sortOrder").value = localStorage.getItem("sortOrder");
    //    }
    //    else {
    //        document.getElementById("sortOrder").value = '0';// localStorage.getItem("sortOrder");
    //    }
    //    if (localStorage.getItem("selectStatus") != null) {
    //        document.getElementById("selectStatus").value = localStorage.getItem("selectStatus");
    //    }
    //    else {
    //        document.getElementById("selectStatus").value = '0';// localStorage.getItem("sortOrder");
    //    }
    //    if (localStorage.getItem("DatePeriod") != null) {
    //        document.getElementById("DatePeriod").value = localStorage.getItem("DatePeriod");
    //    }
    //    else {
    //        document.getElementById("DatePeriod").value = '5';// localStorage.getItem("sortOrder");
    //    }
    //    if (localStorage.getItem("SelectDebit") != null) {
    //        document.getElementById("SelectDebit").value = localStorage.getItem("SelectDebit");
    //    }
    //    else {
    //        document.getElementById("SelectDebit").value = '0';// localStorage.getItem("sortOrder");
    //    }
    //    if (localStorage.getItem("chkShow") != null || localStorage.getItem("chkShow") != 0) {
    //        // document.getElementById("chkShow").value = localStorage.getItem("SelectDebit");
    //        $("#chkShow").prop('checked', false);
    //    }
    //    else {
    //        // document.getElementById("chkShow").value = '0';// localStorage.getItem("sortOrder");
    //        $("#chkShow").prop('checked', true);
    //    }
    //   // localStorage.removeItem("sortOrder");
    //  //  FGRIDCONTROL.getRowElement(BRTable, cellobj.iRow).style.fontWeight = "";
    //    $(".glyphicon-menu-down").on("click", function () {
    //        scrolled = scrolled + 27;
    //        $("div").animate({
    //            scrollTop: scrolled
    //        });
    //        $('div').find($('.highlightDiv').next()).addClass('highlightDiv');
    //        $('div').find($('.highlightDiv').prev()).removeClass('highlightDiv');
    //    });
    //    $(".glyphicon-menu-up").on("click", function () {
    //        scrolled = scrolled - 27;
    //        $("div").animate({
    //            scrollTop: scrolled
    //        });
    //        $('div').find($('.highlightDiv').prev()).addClass('highlightDiv');
    //        $('div').find($('.highlightDiv').next()).removeClass('highlightDiv');
    //    });

    //$(document).find('#BRTable tbody').on('click', "tr", function () {
    //        debugger
    //        if (backTrackRow==false) {//this.textContent.trim() != "Customize Columns"
    //            $("#BRTable tbody tr").removeClass("FRowColor");
    //            if (!$(this).hasClass("FRowColor")) {
    //                $(this).addClass("FRowColor");
    //            }

    //        }
    //    })

    //    //OnClick Customize Up And Down Button Our Customize Grid Selected HeaderText is Replaced With Other HeaderText 
    //    $("#popUpdata").on("click", ".Clickable", function () {
    //      //  debugger;
    //        if ($($(this).prev()).is(':checked')) {
    //            $($(this).prev()).prop("checked", false);
    //            $($(this)).removeClass('highlight');
    //        }
    //        else {
    //            $($(this).prev()).prop("checked", true);
    //            $($(this)).addClass('highlight');
    //        }
    //        debugger;
    //        var AlignmentValue = "";
    //        var width = $(this).prev()[0].attributes[3].value;
    //        var AlignmentValue = $(this).prev()[0].attributes["data-for"].value;            
    //        switch (AlignmentValue) {
    //            case "0":
    //                AlignmentValue = "Left";
    //                break;
    //            case "1":
    //                AlignmentValue = "Right";
    //                break;
    //            default:
    //                AlignmentValue = "Left";
    //        }
    //        // var width = $($('.highlight').find('input')).data().content;
    //        $('#WidthOfS').val(width);
    //        $('#txtTextAlign').val(AlignmentValue); 
    //    });

    //    //$("#popUpdata").on("click", ".chkClickable", function () {
    //    //    debugger;
    //    //    if ($($(this)).is(':checked')) {
    //    //        $($(this).next()).addClass('highlight');
    //    //    }
    //    //    else {
    //    //        $($(this).next()).removeClass('highlight');
    //    //    }
    //    //});
    //    $("#WidthOfS").blur(function () {
    //        debugger
    //        $($('.highlightDiv').find('input'))[0].dataset.content = $(this).val().trim();         
    //    });
    //    $("#txtTextAlign").blur(function () {
    //        debugger
    //        switch ($(this).val().toLowerCase().trim()) {
    //            case "right":
    //                $($('.highlightDiv').find('input'))[0].dataset.for = "1";
    //                break;
    //            case "left":
    //                $($('.highlightDiv').find('input'))[0].dataset.for = "0";
    //                break
    //            default:
    //                alert("Only left and right alignment allowed..")
    //                break;
    //        }
    //    });


    //    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreTransactions/Css/BankReconciliation.css", "BRSwindowReizerHight.setHeight");
    //});


    //$("#btnSave").removeClass("noWrap clsBlueColor");
    //$("#btnSave").removeClass("ChangeImgColor");
    //$("#selectSaveOption").change(function () {
    //    debugger
    //    if ($('#selectSaveOption').val() == 0) {
    //        // $("#btnSave").removeClass("noWrap clsBlueColor");
    //        $("#btnSaveDisableImmediate").show();
    //        $("#btnSaveDisable").hide();
    //    }
    //    else {
    //        //  $("#btnSave").addClass("noWrap clsBlueColor");
    //        $("#btnSaveDisableImmediate").hide();
    //        $("#btnSaveDisable").show();

    //    }
    //});

});

    //Header Panal Hide Table Width
    //function OnClickselect(ele) {
    //    debugger
    //    $("#selectContainer").slideToggle("fast");
    //    $(ele).toggleClass("icon-collepse icon-expand");
    //    debugger
    //    //var tdata = document.getElementById("BRTable_body");
    //    //if ($(ele).hasClass('icon-expand') == true) {
    //    //    //COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/CoreTransactions/Css/BankReconciliation.css", "BRSwindowReizerHight.setHeight");
    //    //    if (tdata != null) {
    //    //        tdata.style.height = (GLOBAL.getPageHeight() - (headerDiv.getBoundingClientRect().top + footerDivHeight.getBoundingClientRect().top)) + "px";
    //    //       // tdata.style.height = GLOBAL.getPageHeight() - (tdata.getBoundingClientRect().top + 19) + "px";//69
    //    //    }
    //    //}
    //    //else {
    //    //    if (tdata != null) {
    //    //        tdata.style.height = (GLOBAL.getPageHeight() - (headerDiv.getBoundingClientRect().top + footerDivHeight.getBoundingClientRect().top)) + "px";
    //    //       // tdata.style.height = GLOBAL.getPageHeight() - (tdata.getBoundingClientRect().top + 219) + "px";//169
    //    //    }
    //    //}

    //    //$(window).resize();
    //    //var tdata = document.getElementById("BRTable_body");

    //    //if ($(ele).hasClass("icon-collepse")) {
    //    //    tdata.style.height = GLOBAL.getPageHeight() - (tdata.getBoundingClientRect().top + 244) + "px";
    //    //}
    //    //else {
    //    //    tdata.style.height = GLOBAL.getPageHeight() - (tdata.getBoundingClientRect().top -65) + "px";
    //    //}
    //    //if (ele.className == "icon-collepse icon-font6") {
    //    //    $(ele).removeClass("icon-collepse icon-font6").addClass("icon-expand icon-font6");
    //    //}
    //    //else if (ele.className == "icon-expand icon-font6") {
    //    //    $(ele).removeClass("icon-expand icon-font6").addClass("icon-collepse icon-font6");
    //    //}
    //    //else {
    //    //    $(ele).removeClass("icon-collepse icon-font6").addClass("icon-expand icon-font6");
    //    //}
    //}

    //Header Panal Show  Table Width
    //function OnClickunSelect(getId) {
    //    $("#selectContainer").show();
    //    $("#tdata").height(232);
    //    $("#unselect").hide();
    //    $("#select").show();
    //}

    //onClick Clear Button Than Clear All Data
    function ClearData() {
        debugger;
        var sGridId = "BRTable";
        $("#BrTableData").empty();
        $("#OptCtrlBank").val('');
        $("#chkShow").prop("checked", false);
        // $('input[name="radioSave"]')[1].checked = false;
        // $('input[name="radioSave"]')[0].checked = true;
        $("#sortOrder").val(0);
        $("#sortByColumn").val(0);
        $("#selectStatus").val(2);
        $('#BankAccountSpan').html('');
        $("#DatePeriod").val(0);
        $("#Savemessage").html('');
        $("#selectSaveOption").val(0);
        $("#SelectDebit").val(0);
        $("#Searchtxt").val('');
       var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
        FGRIDCONTROL.deleteRows(sGridId, 1, iTotalRows);
        FGRIDCONTROL.insertRows(sGridId, 0, 20);
        $('#bookBal')[0].innerText = "0.00 Cr"
        $('#OpeningBalance')[0].innerText = "0.00 Cr"
        $('#outDebits')[0].innerText = "0.00 Dr"
        $('#debitCounts')[0].innerText = "0"
        $('#outCredits')[0].innerText = "0.00 Cr"
        $('#creditCounts')[0].innerText = "0"
        $('#clearedBal')[0].innerText = "0.00 Cr"
        $('#diff')[0].innerText = "0.0000"
}
    //onClick EraceIcon(inside serch button) Text is Cleared and Serch ichon Show   
    function OnClickEraseicon() {
        debugger
        $("#Searchtxt").val('');
        $("#eraseicon").hide();
        $(".icon-search").show();
        if (parseInt(DataLength) > 0) {
            GetTableDataRecord();
}
}


    function getDatepickerIntValue(id) {
        debugger
        $('#' +id+'_checkbox').attr('disabled', false);
        $('#' + id + '_checkbox').prop('checked', true);
        var value = DATEPICKER.getDate(id);
       $('#' + id + '_checkbox').prop('checked', false);
       $('#' + id + '_checkbox').attr('disabled', true);
        return value;
        }
        function DatepickerChange() {
            debugger;
            //alert($('#ClearanceDate').val());
            if (parseInt(DataLength) > 0) {
        var rowLength = $('#BRTable').find('tr').length;
        for (var i = 1; i < DataLength +1; i++) {
            var cellObject = FGRIDCONTROL.getCellObject("BRTable", i, 2);
            var FirstCellObject = FGRIDCONTROL.getCellObject("BRTable", i, 1);
            if (FirstCellObject.getCellText() == "Pending") {
                cellObject.setCellText($('#ClearanceDate').val());
                cellObject.setCellData("value", DATEPICKER.getDate('ClearanceDate'));
        }
            }
        DATEPICKER.setDate("Clearancedate1", DATEPICKER.getDate("ClearanceDate"));

}
}

function CreateBRSUserExtraField() {
    debugger;
    NETWORK.executeServerMethod(GLOBAL.getContextPath("CreateBRSUserExtraField", "BankReconciliation", "CoreTransactions"), true, null, "json", true, "CreateBRSUserExtraFieldSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
    function CreateBRSUserExtraFieldSucess(bFlag, data) {
        debugger;
        if (bFlag == true && data == "") {
        COMMON.prototype.showMessage(brsErrorMsg.BRSUserFieldCreatedSuccessfully);
        $("#id_isBRSUserFieldExistance").hide();
        return false;
}
}
function CancelBRSUserExtraField() {
    debugger;
    $("#id_isBRSUserFieldExistance").hide();
}
    ///////////////////////////////////////////////////////
    //var GetBRsResourceMessages;
    var sGridId = "";
    var languageId;

    function onSerialNoClick(cellobj, event) {
      debugger;
      if (backTrackRow == false) {//this.textContent.trim() != "Customize Columns"
        $("#BRTable_body tr").removeClass("FRowColor");
        if(!$(cellobj.Cell.parentElement).hasClass("FRowColor")) {
            $(cellobj.Cell.parentElement).addClass("FRowColor");
      }
}
}

function onBRsSerialNoHover(obj, event) {
    var sControl = "";
    var sContent = "";
    var bSelect = true;
    sGridId = "BRTable";
    if (obj.bEnter == true) {
        FCommon.UI.setText(obj.Cell, "");

        obj.Cell.style.paddingLeft = "";


        sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
        sControl += obj.iRow;
        sControl += "</div>";

        $(obj.Cell).html(sControl);

        sContent = "<table>";
        sContent += "<tbody class='grid_row_menu'>";
        // sContent += "<tr onclick='onBrsDeleteRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Delete Current Row'>";
        // sContent += "<td><span class='icon-delete icon-font8'></span></td>";
        // sContent += "<td><div class='font-6'>&nbsp;&nbsp;"+brsErrorMsg.lblDeleteRow+"</div></td>";
        // sContent += "</tr>";
        // sContent += "<tr onclick='onBrsInsertRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Add Row Above'>";

        bSelect = false;
        if (isRowSelected(obj.iRow) == false) {
            bSelect = true;
    }

        sContent += "<tr onclick='onBRsSelectRow(" +obj.iRow + ", " + bSelect + ", event);'>";

        if (bSelect == true) {
            sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" +brsErrorMsg.lblFreezeRow + "</div></td>";
        }
        else {
            sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" +brsErrorMsg.lblUnFreezeRow + "</div></td>";
    }

        sContent += "</tr>";

        sContent += "<tr data-toggle='tooltip' onclick='LoadCustomizedPopUp()'>";
        sContent += "<td><span class='icon-custamize icon-font8' style='opacity: 0.8;'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp; " +brsErrorMsg.BR_CustomizeColumns + "</div></td>";
        sContent += "</tr>";



        sContent += "</tbody>";
        sContent += "</table>";

        $("#id_row_popup").popover({
                type: "tooltip",
                trigger: "manual",
            // placement: $("#hdnLanguageId").val() == "0" || $("#hdnLanguageId").val() == undefined ? "right" : "left",
                placement: languageId == "0" ? "right" : "left",
                html: true,
                content: sContent
    });

        $("#id_row_popup").popover('show');
    }
    else {
        $("#id_row_popup").popover('destroy');

        FCommon.UI.removeChildren(obj.Cell);
        FCommon.UI.setText(obj.Cell, obj.iRow);
        obj.Cell.style.paddingLeft = "3px;";
}
}

function isRowSelected(iRow) {
    var bSelected = false;
    var eleRow = null;

    eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
    if (FCommon.UI.isValidObject(eleRow) == true) {
        if (FCommon.String.isNullOrEmpty(eleRow.style.backgroundColor, true) == false) {
            bSelected = true;
    }
}

    return (bSelected);
    }
    function getTotalRows() {
        return FGRIDCONTROL.getTotalRows(sGridId);
    // return document.getElementById('InterCompanySettingGrid_body').rows.length;
}

function onBrsDeleteRow(iRow, event) {
    debugger
    if (confirm(brsErrorMsg.ConfirmToDeleteRow)) {//getResourceValue("ConfirmToDeleteRow", GetBRsResourceMessages)
        FCommon.UI.stopKeyProcess(event);
        if (getTotalRows() == 1) {
            COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");

            return;
    }
        FGRIDCONTROL.update(sGridId);
        FGRIDCONTROL.deleteRows(sGridId, iRow, 1);
        debugger
        //$(window).resize();
}
}
function onBRsSelectRow(iRow, bSelect, event) {
    debugger
    var eleRow = null;

    try {
        FCommon.UI.stopKeyProcess(event);
        eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
        if (bSelect == true) {
            eleRow.style.backgroundColor = "rgb(222, 245, 253)";
        }
        else {
            eleRow.style.backgroundColor = "";
}
}
catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
}
}
function onBrsInsertRow(iRow, event) {
    debugger
    try {
        FCommon.UI.stopKeyProcess(event);
        FGRIDCONTROL.update(sGridId);
        FGRIDCONTROL.insertRows(sGridId, iRow, 1);
}
catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
}
}

var BRS = {
        loadVouchersSuccess: function (flag, result) {
        debugger
        var eleContainer = null;
        if (flag == true) {
            eleContainer = document.getElementById('page_Content');
            if (FCommon.UI.isValidObject(eleContainer) == true) {
                $(eleContainer).html(result);
                eleContainer.style.display = "block";
                document.getElementById('DashBoardScreen').style.display = "none";
        }
        }
        else {
            return;
}
},
    //This method is called when date option is changed.
        changeDatePeriods: function (element, dontChange) {
        debugger;
        try {
            accDate = document.getElementById("Accountingdate").value;
            switch (parseInt(element.value)) {
                case 0://DateRange
                    DATEPICKER.clear("brs_StartDate");
                    DATEPICKER.setDate("brs_StartDate", accDate);
                    if (dontChange == false || dontChange == undefined) {
                        DATEPICKER.clear("brs_EndDate");
                }
                    DATEPICKER.disableControl("brs_StartDate", false);
                    DATEPICKER.disableControl("brs_EndDate", false);
                    break;
                case 1://AsOnDate
                    DATEPICKER.setDate("brs_StartDate", m_iBaseCompanyAccountingDate);
                    DATEPICKER.clear("brs_EndDate");
                    DATEPICKER.disableControl("brs_StartDate", true);
                    DATEPICKER.disableControl("brs_EndDate", false);
                    break;
                case 2://Current Month
                    DATEPICKER.setDate("brs_StartDate", iPresentYrMnthStart);
                    DATEPICKER.setDate("brs_EndDate", iPresentYrMnthEnd);
                    DATEPICKER.disableControl("brs_StartDate", true);
                    DATEPICKER.disableControl("brs_EndDate", false);
                    break;
                case 3://Today
                    DATEPICKER.clear("brs_StartDate");
                    DATEPICKER.clear("brs_EndDate");
                    DATEPICKER.disableControl("brs_StartDate", true);
                    DATEPICKER.disableControl("brs_EndDate", true);
                    break;
                case 4://This Week
                    DATEPICKER.setDate("brs_StartDate", iPresentWeekStart);
                    DATEPICKER.setDate("brs_EndDate", iPresentWeekLast);
                    DATEPICKER.disableControl("brs_StartDate", true);
                    DATEPICKER.disableControl("brs_EndDate", false);
                    break;
                case 5://This Year
                    DATEPICKER.setDate("brs_StartDate", accDate);//iYrStart
                    DATEPICKER.clear("brs_EndDate");
                    DATEPICKER.disableControl("brs_StartDate", true);
                    DATEPICKER.disableControl("brs_EndDate", true);
                    break;
        }
        }
        catch (err) {
            COMMON.prototype.showMessage("{REPORTVIEW.changeDate}" +err.message, "Exception");
        }
},

        OnBRSFilterToggle: function (flag) {
        if(flag == true) {
            $("#selectContainer").hide();
            $('#liDownArrow').css("display", "block");
            $('#liUpArrow').css("display", "none");
        }
        else {
            $("#selectContainer").show();
            $('#liDownArrow').css("display", "none");
            $('#liUpArrow').css("display", "block");
        }
},
}

;
var GetBudgetResourceMessages;
var arrScreenData = [];
var ActualBalanceBudgetValue = 0;
var ActualBalanceBudgetQty = 0;
var arrTBSplitBudgetDetails = [];
var Edit_lstTBSplitBudgetDetails = [];
var bEdit = false;
var lstFromSelectedRow;
var lstToSelectedRow;
var iEditedRow = 0;
var bClearFromQty = false;
var arrAllFile = [];
var _FilesSize = 0;
var TotalGridQuantity = 0;
var TotalGridvalue = 0;


var TRANSFERBUDGET = {

    btnImport_Click: function () {
        debugger
        var IsValidFile = true;
        var IsFileAdded = false;
        var sAddedFileName = "";
        if (document.getElementById("uploadBtn").multiple == false) {
            arrAllFile = [];
            _FilesSize = 0;
        }
        var arrFile = document.getElementById("uploadBtn").files;
        if (arrFile[0] != undefined) {
            if (arrFile != undefined && arrFile != null && arrFile.length > 0) {
                for (var i = 0; i < arrFile.length; i++) {
                    if (arrAllFile.length > 0) {
                        for (var j = 0; j < arrAllFile.length; j++) {
                            if (arrFile[i].name == arrAllFile[j].name) {
                                IsFileAdded = true;
                                sAddedFileName = arrFile[i].name;
                            }
                        }
                    }

                    if (IsFileAdded == false) {
                        arrAllFile.push(arrFile[i]);
                        _FilesSize += arrFile[i].size;
                    }
                    else {
                        IsValidFile = false;
                        COMMON.prototype.showMessage(sAddedFileName + " File is already selected.");
                        return false;
                    }
                }

                var fSExt = new Array('Bytes', 'KB', 'MB', 'GB'),
                iCounter = 0;
                while (_FilesSize > 900) {
                    _FilesSize /= 1024; iCounter++;
                }
                var _Size = parseFloat(Math.round(_FilesSize * 100) / 100);

                var obj = {};
                obj.url = GLOBAL.getContextPath("ImportBudgetFile", "Budget", "Budgeting");
                var fileData = new FormData();
                for (var i = 0; i < arrAllFile.length; i++) {
                    var sFileName = arrAllFile[i].name;
                    var sFileExt = (sFileName).substring((sFileName).lastIndexOf('.')).toLowerCase();
                    if (sFileExt != ".exe" && sFileExt != ".msi") {
                        if (iCounter < 3) {                           // 0-Bytes, 1-KB, 2-MB, 3-GB
                            if (iCounter < 2 || _Size <= 20) {
                                if (i <= 2) {
                                    fileData.append(arrAllFile[i].name, arrAllFile[i]);
                                    $('#uploadFile').val(arrAllFile[i].name);
                                }
                                else {
                                    IsValidFile = false;
                                    COMMON.prototype.showMessage("Can not import more than " + i + " files.");
                                    return false;
                                }
                            }
                            else {
                                IsValidFile = false;
                                COMMON.prototype.showMessage("Selected file(s) size cannot be greater than 20 MB.");
                                return false;
                            }
                        }
                        else {
                            IsValidFile = false;
                            COMMON.prototype.showMessage("Selected file(s) size cannot be greater than 20 MB.");
                            return false;
                        }
                    }
                    else {
                        IsValidFile = false;
                        COMMON.prototype.showMessage("Cannot import " + sFileExt + " File");
                        return false;
                    }
                }

                if (IsValidFile) {
                    NETWORK.uploadFile(obj,
                        true,
                        fileData,
                        "",
                        true,
                        "TRANSFERBUDGET.btnImport_Click_Success",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd");
                }
            }
        }
    },

    btnImport_Click_Success: function (flag, data) {
        debugger
        if (flag) {
            if (data.trim() != "") {
                $("#uploadBtn").val("");
                $("#uploadFile").val("");
                COMMON.prototype.showMessage(data.trim());
                GLOBAL.LoadingEnd();
                return false;
            }
        }
        else {
            $("#uploadBtn").val("");
            $("#uploadFile").val("");
            COMMON.prototype.showMessage(data.trim());
            GLOBAL.LoadingEnd();
            return false;
        }
    },

    closeSplitPopUp: function () {
        debugger;
        $("#btnTBSplitBugdet").css("pointer-events", "auto");
        $("#splitBudgetModal").modal("hide");
    },

    cellChange: function (cellobj, event) {
        if (cellobj.bLeave == true) {
            return (TRANSFERBUDGET.onLeave(cellobj, event));
        }
        else {
            TRANSFERBUDGET.onEnter(cellobj, event);
        }
    },

    onLeave: function (cellobj, event) {
        debugger
        var element = null;
        var data = null;
        var strErrorMsg = "";
        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                case MasterDataType.get("MASTER"):
                    data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", parseFloat(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                    cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                    break;
                case MasterDataType.get("NUMBERLIST"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText($(element).find("option:selected").text());
                    break;
                case MasterDataType.get("FRACTION"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    var objBalance = FGRIDCONTROL.getCellObject(cellobj.Grid.id, cellobj.iRow, (cellobj.iColumn - 1));
                    var fBalance = parseFloat(objBalance.getCellData("value"));
                    element.value = element.value == "0" ? "" : element.value;
                    if (element.value == "") {
                        if (cellobj.iColumn == 3) {
                            var fChangedValue = parseFloat(FGRIDCONTROL.getCellObject(cellobj.Grid.id, cellobj.iRow, 5).getCellData("value"));
                            if (isNaN(fChangedValue)) {
                                TRANSFERBUDGET.onSelectRow(cellobj.iRow, false, Event, cellobj.Grid.id);
                            }
                        }
                        else if (cellobj.iColumn == 5) {
                            var fChangedQty = parseFloat(FGRIDCONTROL.getCellObject(cellobj.Grid.id, cellobj.iRow, 3).getCellData("value"));
                            if (isNaN(fChangedQty) || fChangedQty == 0) {
                                TRANSFERBUDGET.onSelectRow(cellobj.iRow, false, Event, cellobj.Grid.id);
                            }
                        }
                    }
                    else {
                        if (cellobj.Grid.id == "grdTBSplitBudget_From") {
                            if (parseFloat(element.value) > fBalance) {
                                if (cellobj.iColumn == 3) {
                                    strErrorMsg = "Reduce Quantity cannot be greater than Balance Quantity.";
                                }
                                else if (cellobj.iColumn == 5) {
                                    strErrorMsg = "Reduce Value cannot be greater than Balance Value.";
                                }
                                element.value = "";
                                COMMON.prototype.showMessage(strErrorMsg);
                                TRANSFERBUDGET.onSelectRow(cellobj.iRow, false, Event, cellobj.Grid.id);
                            }
                            else {
                                TRANSFERBUDGET.onSelectRow(cellobj.iRow, true, Event, cellobj.Grid.id);
                            }
                        }
                        else if (cellobj.Grid.id == "grdTBSplitBudget_To") {
                            TRANSFERBUDGET.onSelectRow(cellobj.iRow, true, Event, cellobj.Grid.id);
                        }
                    }

                    var fTotalReducedQty = 0;
                    var fTotalReducedValue = 0;
                    var grdTBSplitBudget_body = $("#" + cellobj.Grid.id + "_body tr.FRowColor");
                    if (grdTBSplitBudget_body.length > 0) {
                        for (var iRow = 0; iRow < grdTBSplitBudget_body.length; iRow++) {
                            var fReducedQty = parseFloat(FGRIDCONTROL.getCellObject(cellobj.Grid.id, (grdTBSplitBudget_body[iRow].rowIndex - 2), 3).getCellData("value"));
                            if (cellobj.iRow == (grdTBSplitBudget_body[iRow].rowIndex - 2)) {
                                fReducedQty = isNaN(parseFloat(element.value)) ? 0 : parseFloat(element.value);
                            }
                            fTotalReducedQty += isNaN(fReducedQty) ? 0 : fReducedQty;
                            var fReducedValue = parseFloat(FGRIDCONTROL.getCellObject(cellobj.Grid.id, (grdTBSplitBudget_body[iRow].rowIndex - 2), 5).getCellData("value"));
                            if (cellobj.iRow == (grdTBSplitBudget_body[iRow].rowIndex - 2)) {
                                fReducedValue = isNaN(parseFloat(element.value)) ? 0 : parseFloat(element.value);
                            }
                            fTotalReducedValue += isNaN(fReducedValue) ? 0 : fReducedValue;
                        }
                        if (cellobj.iColumn == 3) {
                            var iTotalFromReduceQty = parseFloat(document.getElementById("txtFromReduceQuantity").value);
                            if (fTotalReducedQty > iTotalFromReduceQty) {
                                element.value = "";
                                TRANSFERBUDGET.onSelectRow(cellobj.iRow, false, Event, cellobj.Grid.id);
                                if (cellobj.Grid.id == "grdTBSplitBudget_To") {
                                    COMMON.prototype.showMessage("Total Add Qty cannot be greater than Reduce Quantity.");
                                }
                                else {
                                    COMMON.prototype.showMessage("Total Reduce Qty cannot be greater than Reduce Quantity.");
                                }
                            }
                        }
                        else if (cellobj.iColumn == 5) {
                            var iTotalFromReduceValue = parseFloat(document.getElementById("txtFromReduceValue").value);
                            if (fTotalReducedValue > iTotalFromReduceValue) {
                                element.value = "";
                                TRANSFERBUDGET.onSelectRow(cellobj.iRow, false, Event, cellobj.Grid.id);
                                if (cellobj.Grid.id == "grdTBSplitBudget_To") {
                                    COMMON.prototype.showMessage("Total Add Value cannot be greater than Reduce Value.");
                                }
                                else {
                                    COMMON.prototype.showMessage("Total Reduce Value cannot be greater than Reduce Value.");
                                }
                            }
                        }
                    }
                    var iDecimalPoints = (cellobj.iColumn == 2 || cellobj.iColumn == 3) ? parseFloat($("#hdnNoOfQtyDecimal").val()) : parseFloat($("#hdnNoOfDecimal").val());
                    if (cellobj.iColumn != 18) {
                        cellobj.setCellData("value", element.value == "" ? element.value : Number(element.value).toFixed(iDecimalPoints));
                    }
                    else {
                        cellobj.setCellData("value", element.value);
                    }

                    if (cellobj.iColumn != 2 || cellobj.iColumn != 3) {
                        if (cellobj.iColumn != 18) {
                            element.value = FConvert.formatToDecimalPlaces(element.value, iDecimalPoints, true);
                        }
                    }
                    cellobj.setCellText(element.value == "" ? "" : element.value);
                    break;
                case MasterDataType.get("BOOLEAN"):
                    cellobj.setControl(element, cellobj.getCellData("value"));
                    break;
                default:
                    break;
            }
            return (true);
        }
    },

    onEnter: function (cellobj, event) {
        debugger;
        //var iTotalRow = $("#grdTransferBudget_body")[0].children.length;
        //currentRow = cellobj.iRow;
        //if(iTotalRow == currentRow){
        //    TRANSFERBUDGET.insertRow(cellobj.iRow, event, cellobj.Grid.id , null);
        //}
        var element = null;
        var sGridCtrlId = "";
        var iValue = 0;
        var data = null;
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
        if (cellobj.bHidden == false) {
            if (cellobj.Grid.id == "grdTBSplitBudget_From" || cellobj.Grid.id == "grdTBSplitBudget_To") {
                var strExtraBudgetData = FGRIDCONTROL.getCellObject(cellobj.Grid.id, cellobj.iRow, 1).getCellData("BudgetExtaData");
                var arrExtraBudgetData = strExtraBudgetData.split(',');

                document.getElementById("txtSplitSpentBudget").innerHTML = Number(isNaN(Math.abs(arrExtraBudgetData[0])) ? 0 : Math.abs(arrExtraBudgetData[0])).toFixed(parseFloat($("#hdnNoOfDecimal").val()));
                document.getElementById("txtSplitPreCommittedValue").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[1])) ? 0 : parseInt(arrExtraBudgetData[1])).toFixed(parseFloat($("#hdnNoOfDecimal").val()));
                document.getElementById("txtSplitCommittedBudget").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[2])) ? 0 : parseInt(arrExtraBudgetData[2])).toFixed(parseFloat($("#hdnNoOfDecimal").val()));
                document.getElementById("txtSplitBalanceBudget").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[3])) ? 0 : parseInt(arrExtraBudgetData[3])).toFixed(parseFloat($("#hdnNoOfDecimal").val()));
                document.getElementById("txtSplitSpendQuantity").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[4])) ? 0 : parseInt(arrExtraBudgetData[4])).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txtSplitPreCommitedQuantity").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[5])) ? 0 : parseInt(arrExtraBudgetData[5])).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txtSplitCommittedQuantity").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[6])) ? 0 : parseInt(arrExtraBudgetData[6])).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txtSplitBalanceQuantity").innerHTML = Number(isNaN(parseInt(arrExtraBudgetData[7])) ? 0 : parseInt(arrExtraBudgetData[7])).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));

                //$(cellobj.cell.parentElement.parentElement.children).removeClass("FRowColor");
                //$(cellobj.cell.parentElement).addClass("FRowColor");
            }
        }

        if (cellobj.bHidden == true || cellobj.iColumn == 1 || cellobj.iColumn == 2 || cellobj.iColumn == 4) {
            cellobj.processDefault(event);
            return;
        }
        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("MASTER"):
                cellobj.setCellText("");
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                OPTIONCONTROL.setParent(element, cellobj.cell);
                iValue = 0;
                if (COMMON.prototype.isInteger(cellobj.CellData.value) == true) {
                    iValue = parseFloat(cellobj.getCellData("value"));
                }
                if (iValue <= 0) {
                    OPTIONCONTROL.clear(element);
                }
                else {
                    OPTIONCONTROL.setControlValue(element, iValue);
                }
                $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                break;
            case MasterDataType.get("FRACTION"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (element != null) {
                    if (cellobj.iColumn == 18) {
                        cellobj.setControl(element, cellobj.getCellData("value"));
                    }
                    else {
                        cellobj.setControl(element, parseFloat(cellobj.getCellData("value")) > 0 ? cellobj.getCellData("value") : "");
                    }
                    $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                }
                break;
            default:
                break;
        }
    },

    getResourceValue: function (sKey, GetResourceMessages) {
        // debugger;
        var value = "";
        var result = null;

        result = TRANSFERBUDGET.findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },

    findKeyValue: function (sKey, arrKeyValue) {
        // debugger;
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    },

    onSerialNoHover: function (obj, event) {
        // debugger;
        var sControl = "";
        var sContent = "";
        var bSelect = true;
        if (obj.bEnter == true) {
            FCommon.UI.setText(obj.Cell, "");
            obj.Cell.style.paddingLeft = "";
            sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
            sControl += obj.iRow;
            sControl += "</div>";
            $(obj.Cell).html(sControl);
            sContent = "<table>";
            sContent += "<tbody class='grid_row_menu'>";
            bSelect = false;
            if (TRANSFERBUDGET.isRowSelected(obj.iRow, obj.Grid.id) == false) {
                bSelect = true;
            }
            sContent += "<tr class='highlightPopUpItems' onclick='TRANSFERBUDGET.onSelectRow(" + obj.iRow + ", " + bSelect + ", event, " + obj.Grid.id + ");' style='cursor: pointer;'>";
            if (bSelect == true) {
                sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
                sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + TRANSFERBUDGET.getResourceValue("lblSelectRow", GetBudgetResourceMessages) + "</div></td>";
            }
            else {
                sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
                sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + TRANSFERBUDGET.getResourceValue("lblUnselectRow", GetBudgetResourceMessages) + "</div></td>";
            }
            sContent += "</tr>";
            sContent += "<tr class='highlightPopUpItems' onclick='TRANSFERBUDGET.onDeleteRow(" + obj.iRow + ", event, " + obj.Grid.id + ");' data-toggle='tooltip' title='Delete Current Row' style='cursor: pointer;'>";
            sContent += "<td><span class='icon-delete icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + TRANSFERBUDGET.getResourceValue("lblDeleteRow", GetBudgetResourceMessages) + "</div></td>";
            sContent += "</tr>";
            sContent += "<tr class='highlightPopUpItems' onclick='TRANSFERBUDGET.onInsertRow(" + obj.iRow + ", event, " + obj.Grid.id + ");' data-toggle='tooltip' title='Add Row Above' style='cursor: pointer;'>";
            sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + TRANSFERBUDGET.getResourceValue("lblInsertRow", GetBudgetResourceMessages) + "</div></td>";
            sContent += "</tr>";
            sContent += "</tbody>";
            sContent += "</table>";
            $("#id_row_popup").popover({
                type: "tooltip",
                trigger: "manual",
                placement: $("#hdnLanguageId").val() == "0" ? "right" : "left",
                html: true,
                content: sContent
            });
            $("#id_row_popup").popover('show');
        }
        else {
            $("#id_row_popup").popover('destroy');

            FCommon.UI.removeChildren(obj.Cell);
            FCommon.UI.setText(obj.Cell, obj.iRow);
            obj.Cell.style.paddingLeft = "3px;";
        }
    },

    isRowSelected: function (iRow, sGridId) {
        var bSelected = false;
        var eleRow = null;
        eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
        if (FCommon.UI.isValidObject(eleRow) == true) {
            if (FCommon.String.isNullOrEmpty(eleRow.style.backgroundColor, true) == false) {
                bSelected = true;
            }
        }
        return (bSelected);
    },

    onDeleteRow: function (iRow, event, sGridId) {
        debugger;
        if (confirm(TRANSFERBUDGET.getResourceValue("ConfirmToDeleteRow", GetBudgetResourceMessages))) {
            FCommon.UI.stopKeyProcess(event);
            if (TRANSFERBUDGET.getTotalRows(sGridId.id) == 1) {
                COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");
                return;
            }
            FGRIDCONTROL.update(sGridId.id);
            FGRIDCONTROL.deleteRows(sGridId.id, iRow, 1);
            TRANSFERBUDGET.resizeGridColumnsWidth(sGridId.id);
        }
    },

    onSelectRow: function (iRow, bSelect, event, sGridId) {
        debugger;
        var eleRow = null;
        try {
            FCommon.UI.stopKeyProcess(event);
            eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
            if (bSelect == true) {
                $(eleRow).addClass("FRowColor");
            }
            else {
                $(eleRow).removeClass("FRowColor");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    onInsertRow: function (iRow, event, sGridId) {
        debugger;
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update(sGridId);
            FGRIDCONTROL.insertRows(sGridId, iRow, 1);
            TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    getTotalRows: function (sGridId) {
        debugger;
        return document.getElementById('' + sGridId + '_body').rows.length;
    },

    resizeGridColumnsWidth: function (sGridId) {
        for (var counter = 1; counter < 19; counter++) {
            if (counter == 1) {
                var cellobject = FGRIDCONTROL.getCellObject(sGridId, 1, 1);
                $($('#' + sGridId).find('th')[counter]).css('width', '0.3%');
                $($($('#' + sGridId + '_body').find('tr')[0]).find('td')[counter]).css({ "max-width": "", "width": "0.2%" });
            }
            else {
                var cellobject = FGRIDCONTROL.getCellObject(sGridId, 1, counter);
                $($('#' + sGridId).find('th')[counter]).css('width', '6.1%');
                $($($('#' + sGridId + '_body').find('tr')[0]).find('td')[counter]).css({ "max-width": "", "width": "6%" });
            }
        }
    },

    resizeSplitGridColumnsWidth: function (sGridId) {
        debugger;
        for (var counter = 1; counter <= 5; counter++) {
            $($('#' + sGridId).find('th')[counter]).css('width', '16%');
            $($($('#' + sGridId + '_body').find('tr')[0]).find('td')[counter]).css({ "max-width": "", "width": "16%" });
        }
    },

    //toggleDropDown: function () {
    //    debugger;
    //    $("#ulPlanName").toggle();
    //},

    //searchPlanName: function () {
    //    debugger;
    //    var input, filter, ul, li, a, i;
    //    input = document.getElementById("txtPlanName");
    //    filter = input.value.toUpperCase();
    //    ul = document.getElementById("ulPlanName");
    //    li = ul.getElementsByTagName("li");
    //    for (i = 0; i < li.length; i++) {
    //        a = li[i].getElementsByTagName("a")[0];
    //        if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {
    //            li[i].style.display = "";
    //        } else {
    //            li[i].style.display = "none";
    //        }
    //    }
    //    $("#ulPlanName").css("display","block");
    //},

    //selectPlan: function (ele) {
    //    debugger;
    //    var li = ele;
    //    var aTag = li.getElementsByTagName("a")[0];
    //    var aTagText = aTag.innerHTML;;
    //    var inputPlanName = document.getElementById("txtPlanName");
    //    inputPlanName.value = aTagText;
    //    $("#ulPlanName").css("display","none");
    //},

    clearAllInputFields: function (bFromPlanName) {
        debugger;
        arrAllFile = [];
        _FilesSize = 0;
        $("#uploadBtn").val("");
        $("#uploadFile").val("");
        ActualBalanceBudgetValue = 0;
        ActualBalanceBudgetQty = 0;
        TotalGridQuantity = 0;
        TotalGridvalue = 0;
        $('#TransferGridtotalvalue').html('');
        $('#TransferGridtotalQuantity').html('');
        bClearFromQty = false;
        var iFromFATag = OPTIONCONTROL.getControlValue("optFromProfitCenterSchool");
        var iFromInvTag = OPTIONCONTROL.getControlValue("optFromCostCenter");
        var iFromTag3 = OPTIONCONTROL.getControlValue("optFromTag3");
        var iToFATag = OPTIONCONTROL.getControlValue("optToProfitCenterSchool");
        var iToInvTag = OPTIONCONTROL.getControlValue("optToCostCenter");
        var iToTag3 = OPTIONCONTROL.getControlValue("optToTag3");
        if (!bFromPlanName) {
            OPTIONCONTROL.clear("optPlanName");
        }
        if (iFromFATag > 0) {
            OPTIONCONTROL.clear("optFromProfitCenterSchool");
        }
        if (iFromInvTag > 0) {
            OPTIONCONTROL.clear("optFromCostCenter");
        }
        if (iFromTag3 > 0) {
            OPTIONCONTROL.clear("optFromTag3");
        }
        if (iToFATag > 0) {
            OPTIONCONTROL.clear("optToProfitCenterSchool");
        }
        if (iToInvTag > 0) {
            OPTIONCONTROL.clear("optToCostCenter");
        }
        if (iToTag3 > 0) {
            OPTIONCONTROL.clear("optToTag3");
        }
        OPTIONCONTROL.clear("optFromProduct");
        OPTIONCONTROL.clear("optToProduct");
        OPTIONCONTROL.clear("optFromAccount");
        OPTIONCONTROL.clear("optToAccount");
        DATEPICKER.clear("dpLastUpdateDate");
        DATEPICKER.clear("dpValidFromDate");
        DATEPICKER.clear("dpValidToDate");
        FGRIDCONTROL.clearData("grdTransferBudget", true);
        var iRow = $("#grdTransferBudget_body")[0].children.length;
        if (iRow > 1) {
            FGRIDCONTROL.update("grdTransferBudget");
            FGRIDCONTROL.deleteRows("grdTransferBudget", 1, (iRow - 1));
        }
        TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
        document.getElementById("lblLastUpdateDate").innerText = DATEPICKER.getText("dpLastUpdateDate");
        document.getElementById("lblValidFromDate").innerText = DATEPICKER.getText("dpValidFromDate");
        document.getElementById("lblValidToDate").innerText = DATEPICKER.getText("dpValidToDate");
        document.getElementById("txtVersion").innerText = 1;
        document.getElementById("txtReviseNo").innerText = 1;
        $('.inputFields').val(Number(0).toFixed(parseFloat($("#hdnNoOfDecimal").val())));
        $('.inputQtyFields').val(Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val())));
        TRANSFERBUDGET.setFromFilter();
        TRANSFERBUDGET.setToFilter();
        arrScreenData = [];
        $("#btnTBSplitBugdet").css("pointer-events", "none");
        Edit_lstTBSplitBudgetDetails = [];
        iEditedRow = 0;
        bSplit = false;
        bEdit = false;
        $("#txtNarration").val("");
    },

    clearPannelFields: function (bFromPlanName) {
        debugger;
        ActualBalanceBudgetValue = 0;
        ActualBalanceBudgetQty = 0;
        bClearFromQty = false;
        var iFromFATag = OPTIONCONTROL.getControlValue("optFromProfitCenterSchool");
        var iFromInvTag = OPTIONCONTROL.getControlValue("optFromCostCenter");
        var iFromTag3 = OPTIONCONTROL.getControlValue("optFromTag3");
        var iToFATag = OPTIONCONTROL.getControlValue("optToProfitCenterSchool");
        var iToInvTag = OPTIONCONTROL.getControlValue("optToCostCenter");
        var iToTag3 = OPTIONCONTROL.getControlValue("optToTag3");
        if (iFromFATag > 0) {
            OPTIONCONTROL.clear("optFromProfitCenterSchool");
        }
        if (iFromInvTag > 0) {
            OPTIONCONTROL.clear("optFromCostCenter");
        }
        if (iFromTag3 > 0) {
            OPTIONCONTROL.clear("optFromTag3");
        }
        if (iToFATag > 0) {
            OPTIONCONTROL.clear("optToProfitCenterSchool");
        }
        if (iToInvTag > 0) {
            OPTIONCONTROL.clear("optToCostCenter");
        }
        if (iToTag3 > 0) {
            OPTIONCONTROL.clear("optToTag3");
        }
        OPTIONCONTROL.clear("optFromProduct");
        OPTIONCONTROL.clear("optToProduct");
        OPTIONCONTROL.clear("optFromAccount");
        OPTIONCONTROL.clear("optToAccount");
        $('.inputFields').val(Number(0).toFixed(parseFloat($("#hdnNoOfDecimal").val())));
        $('.inputQtyFields').val(Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val())));
        TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
        TRANSFERBUDGET.setFromFilter();
        TRANSFERBUDGET.setToFilter();
        $("#btnTBSplitBugdet").css("pointer-events", "none");
        Edit_lstTBSplitBudgetDetails = [];
        iEditedRow = 0;
        bSplit = false;
        bEdit = false;
    },
    ClearToFields:function()
    {
        debugger
        var iToFATag = OPTIONCONTROL.getControlValue("optToProfitCenterSchool");
        var iToInvTag = OPTIONCONTROL.getControlValue("optToCostCenter");
        var iToTag3 = OPTIONCONTROL.getControlValue("optToTag3");
        if (iToFATag > 0) {
            OPTIONCONTROL.clear("optToProfitCenterSchool");
        }
        if (iToInvTag > 0) {
            OPTIONCONTROL.clear("optToCostCenter");
        }
        if (iToTag3 > 0) {
            OPTIONCONTROL.clear("optToTag3");
        }
        OPTIONCONTROL.clear("optToProduct");
        OPTIONCONTROL.clear("optToAccount");
      
        $('#txtFromReduceValue').val(Number(0).toFixed(parseFloat($("#hdnNoOfDecimal").val())));
        $('#txtFromReduceQuantity').val(Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val())));
        $('.To').val(Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val())));

        TRANSFERBUDGET.setToFilter();

    },

    insertRow: function (strRow, rowData, iEditedRow) {
        try {
            debugger;
            var sSeparator = "";
            var sGridId = "grdTransferBudget";
            //FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update(sGridId);
            var iRow = $("#grdTransferBudget_body")[0].children.length;
            if (strRow == "First") {
                FGRIDCONTROL.update(sGridId);
                FGRIDCONTROL.deleteRows(sGridId, 1, iRow);
            }
            iRow = $("#grdTransferBudget_body")[0].children.length;
            var cellobj = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow, 1)
            if (iEditedRow > 0) {
                iRow = (iEditedRow - 1);
            }
            FGRIDCONTROL.insertRows(sGridId, iRow + 1, 1);
            TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
            insertedCellobj = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 1);
            $(insertedCellobj.cell).html('<i class="icon-edit icon-font9 editField" id="' + (iRow + 1) + '" title="' + TRANSFERBUDGET.getResourceValue("Edit", GetBudgetResourceMessages) + '" style="padding:1px 5px;cursor:pointer;" onclick="TRANSFERBUDGET.editRecord(this, ' + (iRow + 1) + ');"></i>');
            debugger;
            if (rowData != null) {          //inset data in newly added row
                var objHeaderData = rowData.objHeaderFieldsData;
                var objTransferFromData = rowData.objTransferFromFieldsData;
                var objTransferToData = rowData.objTransferToFieldsData;

                if (objHeaderData != null) {
                    var objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 1);
                    objCell.setCellData("value", objHeaderData.PlanName);
                }
                if (objTransferFromData != null && objTransferToData != null) {
                    debugger;
                    var sFromExtraQtyValue = objTransferFromData.BudgetQuantity + "," +
                        objTransferFromData.FromSpentQuantity + "," +
                        objTransferFromData.FromPreCommittedQuantity + "," +
                        objTransferFromData.FromCommittedQuantity + "," +
                        objTransferFromData.FromBalanceQuantity + "," +
                        objTransferFromData.Budget + "," +
                        objTransferFromData.FromSpentBudget + "," +
                        objTransferFromData.FromPreCommittedValue + "," +
                        objTransferFromData.FromCommittedBudget + "," +
                        objTransferFromData.FromBalanceBudget;

                    var sToExtraQtyValue = objTransferToData.BudgetQuantity + "," +
                       objTransferToData.ToSpentQuantity + "," +
                       objTransferToData.ToPreCommittedQuantity + "," +
                       objTransferToData.ToCommittedQuantity + "," +
                       objTransferToData.ToBalanceQuantity + "," +
                       objTransferToData.Budget + "," +
                       objTransferToData.ToSpentBudget + "," +
                       objTransferToData.ToPreCommittedValue + "," +
                       objTransferToData.ToCommittedBudget + "," +
                       objTransferToData.ToBalanceBudget;

                    var balancebudget = document.getElementById("txtFromBalanceBudget");
                    ActualBalanceBudgetValue = balancebudget.value.replace(/\,/g, '');
                    var balanceQty = document.getElementById("txtFromBalanceQuantity").value;
                    ActualBalanceBudgetQty = balanceQty;

                    var objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 2);
                    sSeparator = objTransferToData.Tag1Name.trim() != "" ? " to " : "";
                    objCell.setCellText(objTransferFromData.Tag1Name + sSeparator + objTransferToData.Tag1Name);
                    //objCell.setCellData("text", objTransferFromData.Tag1Name);
                    objCell.setCellData("value", objTransferFromData.Tag1 == null ? "": objTransferFromData.Tag1);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 3);
                    sSeparator = objTransferToData.Tag2Name.trim() != "" ? " to " : "";
                    objCell.setCellText(objTransferFromData.Tag2Name + sSeparator + objTransferToData.Tag2Name);
                    //objCell.setCellData("text", objTransferFromData.Tag2Name);
                    objCell.setCellData("value", objTransferFromData.Tag2 ==  null ? "" : objTransferFromData.Tag2);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 4);
                    sSeparator = objTransferToData.Tag3Name.trim() != "" ? " to " : "";
                    objCell.setCellText(objTransferFromData.Tag3Name + sSeparator + objTransferToData.Tag3Name);
                    //objCell.setCellData("text", objTransferFromData.Tag3Name);
                    objCell.setCellData("value", objTransferFromData.Tag3 == null ? "" : objTransferFromData.Tag3);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 5);
                    sSeparator = objTransferToData.Product.trim() != "" ? " to " : "";
                    objCell.setCellText(objTransferFromData.Product + sSeparator + objTransferToData.Product);
                    //objCell.setCellData("text", objTransferFromData.Product);
                    objCell.setCellData("value", objTransferFromData.ProductId);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 6);
                    sSeparator = objTransferToData.Account.trim() != "" ? " to " : "";
                    objCell.setCellText(objTransferFromData.Account + sSeparator + objTransferToData.Account);
                    //objCell.setCellData("text", objTransferFromData.Account);
                    objCell.setCellData("value", objTransferFromData.AccountId);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 7);
                    objCell.setCellText(Number(objTransferToData.Quantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val())));
                    //objCell.setCellData("text", objTransferFromData.Quantity);
                    objCell.setCellData("value", objTransferFromData.Quantity);

                    TotalGridQuantity = TotalGridQuantity + objTransferFromData.Quantity;
                    $('#TransferGridtotalQuantity').html(FConvert.formatToDecimalPlaces(TotalGridQuantity, parseFloat($("#hdnNoOfQtyDecimal").val()), true));

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 8);                 
                    objCell.setCellText(FConvert.formatToDecimalPlaces(objTransferFromData.BudgetValue, parseInt($("#hdnNoOfDecimal").val()), true));
                    //objCell.setCellData("text", objTransferFromData.BudgetValue);
                    objCell.setCellData("value", objTransferFromData.BudgetValue);
                   
                    TotalGridvalue = TotalGridvalue + objTransferFromData.BudgetValue;
                    $('#TransferGridtotalvalue').html(FConvert.formatToDecimalPlaces(TotalGridvalue, parseInt($("#hdnNoOfDecimal").val()), true));

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 16);
                    objCell.setCellText(objTransferFromData.BudgetConfirmId);
                    //objCell.setCellData("text", objTransferFromData.BudgetConfirmId);
                    objCell.setCellData("value", objTransferFromData.BudgetConfirmId);
                    objCell.setCellData("FromExtraQtyValue", sFromExtraQtyValue);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 9);
                    objCell.setCellText(objTransferToData.Tag1Name);
                    objCell.setCellData("value", objTransferToData.Tag1 == null ? "" : objTransferToData.Tag1);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 10);
                    objCell.setCellText(objTransferToData.Tag2Name);
                    objCell.setCellData("value", objTransferToData.Tag2 == null ? "" : objTransferToData.Tag2);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 11);
                    objCell.setCellText(objTransferToData.Tag3Name);
                    objCell.setCellData("value", objTransferToData.Tag3 ==null ? "" :objTransferToData.Tag3);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 12);
                    objCell.setCellText(objTransferToData.Product);
                    objCell.setCellData("value", objTransferToData.ProductId);
                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 13);
                    objCell.setCellText(objTransferToData.Account);
                    objCell.setCellData("value", objTransferToData.AccountId);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 14);
                    objCell.setCellText(Number(objTransferToData.Quantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val())));
                    objCell.setCellData("value", objTransferToData.Quantity);
                   

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 15);
                    objCell.setCellText(FConvert.formatToDecimalPlaces(objTransferToData.BudgetValue, parseInt($("#hdnNoOfDecimal").val()), true));
                    objCell.setCellData("value", objTransferToData.BudgetValue);

                    objCell = FGRIDCONTROL.getCellObject("grdTransferBudget", iRow + 1, 17);
                    objCell.setCellText(objTransferToData.BudgetConfirmId);
                    objCell.setCellData("value", objTransferToData.BudgetConfirmId);
                    objCell.setCellData("ToExtraQtyValue", sToExtraQtyValue);
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    addRecord: function (ele, bSplit) {
        debugger;
        var sPointerEvent = ele.style.pointerEvents;
        if (sPointerEvent != "none") {
            var bRecordAreadyAdded = false;
            var bSameCombination = false;
            var objScreenData = TRANSFERBUDGET.getScreenData(bSplit);
            var iFromSplitType = parseInt(document.getElementById("hdnFromSplitType").value);
            var iToSplitType = parseInt(document.getElementById("hdnToSplitType").value);
            var iFromSpillOver = parseInt(document.getElementById("hdnFromSpillOver").value);
            var iToSpillOver = parseInt(document.getElementById("hdnToSpillOver").value);
            var iToSpillOver = parseInt(document.getElementById("hdnToSpillOver").value);
            if (objScreenData != false) {;
                if (arrScreenData.length > 0) {
                    for (var i = 0; i < arrScreenData.length; i++) {
                        var DataObject = arrScreenData[i];
                        if (bSameCombination == false) {
                            if (objScreenData.objTransferFromFieldsData.Tag1 == objScreenData.objTransferToFieldsData.Tag1 &&
                            objScreenData.objTransferFromFieldsData.Tag2 == objScreenData.objTransferToFieldsData.Tag2 &&
                            objScreenData.objTransferFromFieldsData.Tag3 == objScreenData.objTransferToFieldsData.Tag3 &&
                            objScreenData.objTransferFromFieldsData.ProductId == objScreenData.objTransferToFieldsData.ProductId &&
                            objScreenData.objTransferFromFieldsData.AccountId == objScreenData.objTransferToFieldsData.AccountId) {
                                bSameCombination = true;
                            }
                            else {
                                if (bRecordAreadyAdded == false) {
                                    if (DataObject.objHeaderFieldsData.PlanName == objScreenData.objHeaderFieldsData.PlanName &&
                                    DataObject.objTransferFromFieldsData.Tag1 == objScreenData.objTransferFromFieldsData.Tag1 &&
                                    DataObject.objTransferFromFieldsData.Tag2 == objScreenData.objTransferFromFieldsData.Tag2 &&
                                    DataObject.objTransferFromFieldsData.Tag3 == objScreenData.objTransferFromFieldsData.Tag3 &&
                                    DataObject.objTransferFromFieldsData.ProductId == objScreenData.objTransferFromFieldsData.ProductId &&
                                    DataObject.objTransferFromFieldsData.AccountId == objScreenData.objTransferFromFieldsData.AccountId &&
                                    DataObject.objTransferToFieldsData.Tag1 == objScreenData.objTransferToFieldsData.Tag1 &&
                                    DataObject.objTransferToFieldsData.Tag2 == objScreenData.objTransferToFieldsData.Tag2 &&
                                    DataObject.objTransferToFieldsData.Tag3 == objScreenData.objTransferToFieldsData.Tag3 &&
                                    DataObject.objTransferToFieldsData.ProductId == objScreenData.objTransferToFieldsData.ProductId &&
                                    DataObject.objTransferToFieldsData.AccountId == objScreenData.objTransferToFieldsData.AccountId) {
                                        if (!bEdit) {
                                            bRecordAreadyAdded = true;
                                        }
                                    }
                                    else {
                                        bRecordAreadyAdded = false;
                                    }
                                }
                                bSameCombination = false;
                            }
                        }
                    }
                    if (bSameCombination == true && ((iFromSplitType < 1 && iToSplitType < 1) || bSplit == false)) {
                        COMMON.prototype.showMessage("TransferFrom and TransferTo data combination must be different");
                        return false;
                    }
                    else {
                        if (bRecordAreadyAdded == false) {
                            if (TRANSFERBUDGET.ValidateAccountType()) {
                                if (!bSplit) {
                                    var sSplitEnabled = $("#btnTBSplitBugdet").css("pointer-events");
                                    if (sSplitEnabled == "auto") {
                                        COMMON.prototype.showMessage("Split the record before adding to grid for transfer.");
                                        return false;
                                    }
                                    else {
                                        arrScreenData.push(objScreenData);                                       
                                        TRANSFERBUDGET.insertRow("", objScreenData, parseInt($("#grdTransferBudget_body")[0].children.length) + 1);                                  
                                        TRANSFERBUDGET.ClearToFields();
                                        TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
                                    }
                                }
                                else {
                                    TRANSFERBUDGET.GetSplitBudgetDetailsGrid();
                                }
                            }
                            else {
                                COMMON.prototype.showMessage("Cannot Transfer Budget from Accounts type of Balance Sheet to Profit and Loss OR vice versa.");
                                return false;
                            }
                        }
                        else {
                            COMMON.prototype.showMessage("Data Combination Already Present in Grid");
                            return false;
                        }
                    }
                }
                else {
                    if (objScreenData.objTransferFromFieldsData.Tag1 == objScreenData.objTransferToFieldsData.Tag1 &&
                        objScreenData.objTransferFromFieldsData.Tag2 == objScreenData.objTransferToFieldsData.Tag2 &&
                        objScreenData.objTransferFromFieldsData.Tag3 == objScreenData.objTransferToFieldsData.Tag3 &&
                        objScreenData.objTransferFromFieldsData.ProductId == objScreenData.objTransferToFieldsData.ProductId &&
                        objScreenData.objTransferFromFieldsData.AccountId == objScreenData.objTransferToFieldsData.AccountId && ((iFromSplitType < 1 && iToSplitType < 1) || bSplit == false)) {
                        COMMON.prototype.showMessage("TransferFrom and TransferTo data combination must be different");
                        return false;
                    }
                    else {
                        if (TRANSFERBUDGET.ValidateAccountType()) {
                            if (!bSplit) {
                                var sSplitEnabled = $("#btnTBSplitBugdet").css("pointer-events");
                                if (sSplitEnabled == "auto") {
                                    COMMON.prototype.showMessage("Split the record before adding to grid for transfer.");
                                    return false;
                                }
                                else {
                                    arrScreenData.push(objScreenData);                                  
                                    TRANSFERBUDGET.insertRow("First", objScreenData, parseInt($("#grdTransferBudget_body")[0].children.length));                                
                                    TRANSFERBUDGET.ClearToFields();
                                    TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
                                }
                            }
                            else {
                                TRANSFERBUDGET.GetSplitBudgetDetailsGrid();
                            }
                        }
                        else {
                            COMMON.prototype.showMessage("Cannot Transfer Budget from Accounts type of Balance Sheet to Profit and Loss OR vice versa.");
                            return false;
                        }
                    }
                }
            }
            bEdit = false;
        }
    },

    ValidateAccountType: function () {
        debugger;
        //Balance sheet -- iAccountType In (1,2,5,6,7,8,9,12,17,18,21,23,24,26,28,30,31,33,32,35,36,37)
        //Profit & Loss -- iAccountType In (3,4,10,11,13,14,16,19,20,22,25,27,29,34,38)
        var sBalanceSheetAccounts = "1,2,5,6,7,8,9,12,17,18,21,23,24,26,28,30,31,33,32,35,36,37";
        var sProfitLossAccounts = "3,4,10,11,13,14,16,19,20,22,25,27,29,34,38";
        var arrBalanceSheetAccounts = sBalanceSheetAccounts.split(',');
        var arrProfitLossAccounts = sProfitLossAccounts.split(',');

        var iFromAccountType = document.getElementById("hdnFromAccountType").value;
        var iToAccountType = document.getElementById("hdnToAccountType").value;
        if ((jQuery.inArray(iFromAccountType, arrBalanceSheetAccounts) !== -1 && jQuery.inArray(iToAccountType, arrBalanceSheetAccounts) !== -1) ||
            (jQuery.inArray(iFromAccountType, arrProfitLossAccounts) !== -1 && jQuery.inArray(iToAccountType, arrProfitLossAccounts) !== -1)) {
            return true;
        }
        else {
            return false;
        }
    },

    setSplitedBudget: function () {
        debugger;
        arrTBSplitBudgetDetails = [];
        FGRIDCONTROL.update("grdTBSplitBudget_From");
        FGRIDCONTROL.update("grdTBSplitBudget_To");
        TRANSFERBUDGET.validateSplitBudget(true, iEditedRow);
    },

    getScreenData: function (bSplit) {
        debugger;
        var HeaderFieldsData = TRANSFERBUDGET.getHeaderFieldsData();
        if (HeaderFieldsData != false) {
            var TransferFromFieldsData = TRANSFERBUDGET.getTransferFromFieldsData(bSplit);
            if (TransferFromFieldsData != false) {
                var TransferToFieldsData = TRANSFERBUDGET.getTransferToFieldsData();
                if (TransferToFieldsData != false) {
                    var objScreenFieldsData = {
                        objHeaderFieldsData: HeaderFieldsData,
                        objTransferFromFieldsData: TransferFromFieldsData,
                        objTransferToFieldsData: TransferToFieldsData
                    }
                    return objScreenFieldsData;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    },

    getHeaderFieldsData: function () {
        debugger;
        var objHeaderFieldsData = {               //Header Fields
            PlanName: OPTIONCONTROL.getControlText("optPlanName"),
            Version: parseFloat(document.getElementById("txtVersion").innerText),
            LastUpdateDate: DATEPICKER.getDate("dpLastUpdateDate"),
            ValidFromDate: DATEPICKER.getDate("dpValidFromDate"),
            ValidToDate: DATEPICKER.getDate("dpValidToDate"),
            ReviseNo: parseFloat(document.getElementById("txtReviseNo").innerText)
        }
        if (objHeaderFieldsData.PlanName != "") {
            return objHeaderFieldsData;
        }
        else {
            COMMON.prototype.showMessage("Select Plan Name");
            return false;
        }
        return objHeaderFieldsData;
    },

    getTransferFromFieldsData: function (bSplit) {
        debugger;
        var objTransferFromFieldsData = {                   //Transfer From Fields
            Tag1Name: OPTIONCONTROL.getControlText("optFromProfitCenterSchool"),
            Tag1: OPTIONCONTROL.getControlValue("optFromProfitCenterSchool")==null ? "" : OPTIONCONTROL.getControlValue("optFromProfitCenterSchool"),
            Tag2Name: OPTIONCONTROL.getControlText("optFromCostCenter"),
            Tag2: OPTIONCONTROL.getControlValue("optFromCostCenter") == null ? "" : OPTIONCONTROL.getControlValue("optFromCostCenter"),
            Tag3Name: OPTIONCONTROL.getControlText("optFromTag3"),
            Tag3: OPTIONCONTROL.getControlValue("optFromTag3") == null ? "" : OPTIONCONTROL.getControlValue("optFromTag3"),
            Product: OPTIONCONTROL.getControlText("optFromProduct"),
            ProductId: OPTIONCONTROL.getControlValue("optFromProduct"),
            Account: OPTIONCONTROL.getControlText("optFromAccount"),
            AccountId: OPTIONCONTROL.getControlValue("optFromAccount"),

            BudgetQuantity: parseFloat(document.getElementById("txtFromQuantity").value.replace(/\,/g,'')),
            FromSpentQuantity: parseFloat(document.getElementById("txtFromSpentQuantity").value.replace(/\,/g,'')),
            FromPreCommittedQuantity: parseFloat(document.getElementById("txtFromPreCommittedQuantity").value.replace(/\,/g,'')),
            FromCommittedQuantity: parseFloat(document.getElementById("txtFromCommittedQuantity").value.replace(/\,/g,'')),
            FromBalanceQuantity: parseFloat(document.getElementById("txtFromBalanceQuantity").value.replace(/\,/g,'')),

            Budget: parseFloat(document.getElementById("txtFromBudgetValue").value.replace(/\,/g, '')),
            FromSpentBudget: parseFloat(document.getElementById("txtFromSpentBudget").value.replace(/\,/g, '')),
            FromPreCommittedValue: parseFloat(document.getElementById("txtFromPreCommittedValue").value.replace(/\,/g, '')),
            FromCommittedBudget: parseFloat(document.getElementById("txtFromCommittedBudget").value.replace(/\,/g, '')),
            FromBalanceBudget: parseFloat(document.getElementById("txtFromBalanceBudget").value.replace(/\,/g, '')),

            Quantity: parseFloat(document.getElementById("txtFromReduceQuantity").value.replace(/\,/g, '')),
            BudgetValue: parseFloat(document.getElementById("txtFromReduceValue").value.replace(/\,/g, '')),

            BudgetConfirmId: parseFloat(document.getElementById("hdnFromBudgetConfirmId").value),
            //FromSpentQuantity: parseFloat(document.getElementById("txtFromSpentQuantity").value),
            //FromPreCommittedQuantity: parseFloat(document.getElementById("txtFromPreCommittedQuantity").value),
            //FromCommittedQuantity: parseFloat(document.getElementById("txtFromCommittedQuantity").value),
            //FromBalanceQuantity: parseFloat(document.getElementById("txtFromBalanceQuantity").value),
            //FromSpentBudget: parseFloat(document.getElementById("txtFromSpentBudget").value),
            //FromPreCommittedValue: parseFloat(document.getElementById("txtFromPreCommittedValue").value),
            //FromCommittedBudget: parseFloat(document.getElementById("txtFromCommittedBudget").value),
            //FromBalanceBudget: parseFloat(document.getElementById("txtFromBalanceBudget").value),
            //FromReduceQuantity: parseFloat(document.getElementById("txtFromReduceQuantity").value),
            //FromReduceValue: parseFloat(document.getElementById("txtFromReduceValue").value),

        }
        if (document.getElementById("hdnFATag").value != "") {
            if (objTransferFromFieldsData.Tag1 == null || objTransferFromFieldsData.Tag1 == 0) {
                COMMON.prototype.showMessage("Select " + document.getElementById("hdnFATag").value + " in Transfer From");
                return false;
            }
        }
        if (document.getElementById("hdnInvTag").value != "") {
            if (objTransferFromFieldsData.Tag2 == null || objTransferFromFieldsData.Tag2 == 0) {
                COMMON.prototype.showMessage("Select " + document.getElementById("hdnInvTag").value + " in Transfer From");
                return false;
            }
        }
        if (document.getElementById("hdnTag3").value != "") {
            if (objTransferFromFieldsData.Tag3 == null || objTransferFromFieldsData.Tag3 == 0) {
                COMMON.prototype.showMessage("Select " + document.getElementById("hdnTag3").value + " in Transfer From");
                return false;
            }
        }
        if (objTransferFromFieldsData.AccountId == null || objTransferFromFieldsData.AccountId == 0) {
            COMMON.prototype.showMessage("Select Account in Transfer From");
            return false;
        }
        if (objTransferFromFieldsData.BudgetQuantity > 0) {
            var iToQuantity = parseFloat(document.getElementById("txtToQuantity").value);
            if (!bSplit && iToQuantity > 0) {
                if (objTransferFromFieldsData.Quantity == null || objTransferFromFieldsData.Quantity == 0) {
                    COMMON.prototype.showMessage("Reduce Quantity must be greater than 0");
                    return false;
                }
            }
        }
        if (objTransferFromFieldsData.BudgetValue == null || objTransferFromFieldsData.BudgetValue == 0) {
            COMMON.prototype.showMessage("Reduce Value must be greater than 0");
            return false;
        }
        return objTransferFromFieldsData;
    },

    getTransferToFieldsData: function () {
        debugger;
        var objTransferToFieldsData = {                   //Transfer To Fields
            Tag1Name: OPTIONCONTROL.getControlText("optToProfitCenterSchool"),
            Tag1: OPTIONCONTROL.getControlValue("optToProfitCenterSchool") == null ? "" : OPTIONCONTROL.getControlValue("optToProfitCenterSchool"),
            Tag2Name: OPTIONCONTROL.getControlText("optToCostCenter"),
            Tag2: OPTIONCONTROL.getControlValue("optToCostCenter") == null ? "" : OPTIONCONTROL.getControlValue("optToCostCenter"),
            Tag3Name: OPTIONCONTROL.getControlText("optToTag3"),
            Tag3: OPTIONCONTROL.getControlValue("optToTag3") == null ? "" : OPTIONCONTROL.getControlValue("optToTag3"),
            Product: OPTIONCONTROL.getControlText("optToProduct"),
            ProductId: OPTIONCONTROL.getControlValue("optToProduct"),
            Account: OPTIONCONTROL.getControlText("optToAccount"),
            AccountId: OPTIONCONTROL.getControlValue("optToAccount"),

            BudgetQuantity: parseFloat(document.getElementById("txtToQuantity").value.replace(/\,/g, '')),
            ToSpentQuantity: parseFloat(document.getElementById("txtToSpentQuantity").value.replace(/\,/g, '')),
            ToPreCommittedQuantity: parseFloat(document.getElementById("txtToPreCommittedQuantity").value.replace(/\,/g, '')),
            ToCommittedQuantity: parseFloat(document.getElementById("txtToCommittedQuantity").value.replace(/\,/g, '')),
            ToBalanceQuantity: parseFloat(document.getElementById("txtToBalanceQuantity").value.replace(/\,/g, '')),

            Budget: parseFloat(document.getElementById("txtToBudgetValue").value.replace(/\,/g, '')),
            ToSpentBudget: parseFloat(document.getElementById("txtToSpentBudget").value.replace(/\,/g, '')),
            ToPreCommittedValue: parseFloat(document.getElementById("txtToPreCommittedValue").value.replace(/\,/g, '')),
            ToCommittedBudget: parseFloat(document.getElementById("txtToCommittedBudget").value.replace(/\,/g, '')),
            ToBalanceBudget: parseFloat(document.getElementById("txtToBalanceBudget").value.replace(/\,/g, '')),

            Quantity: parseFloat(document.getElementById("txtToAddQuantity").value.replace(/\,/g, '')),
            BudgetValue: parseFloat(document.getElementById("txtToAddValue").value.replace(/\,/g,'')),

            BudgetConfirmId: parseFloat(document.getElementById("hdnToBudgetConfirmId").value),


            //ToPreCommittedQuantity: parseFloat(document.getElementById("txtToPreCommittedQuantity").value),
            //ToCommittedQuantity: parseFloat(document.getElementById("txtToCommittedQuantity").value),
            //ToBalanceQuantity: parseFloat(document.getElementById("txtToBalanceQuantity").value),
            //ToSpentBudget: parseFloat(document.getElementById("txtToSpentBudget").value),
            //ToPreCommittedValue: parseFloat(document.getElementById("txtToPreCommittedValue").value),
            //ToCommittedBudget: parseFloat(document.getElementById("txtToCommittedBudget").value),
            //ToBalanceBudget: parseFloat(document.getElementById("txtToBalanceBudget").value),
            //ToAddQuantity: parseFloat(document.getElementById("txtToAddQuantity").value),
            //ToAddValue: parseFloat(document.getElementById("txtToAddValue").value),

        }
        if (document.getElementById("hdnFATag").value != "") {
            if (objTransferToFieldsData.Tag1 == null || objTransferToFieldsData.Tag1 == 0) {
                COMMON.prototype.showMessage("Select " + document.getElementById("hdnFATag").value + " in Transfer To");
                return false;
            }
        }
        if (document.getElementById("hdnInvTag").value != "") {
            if (objTransferToFieldsData.Tag2 == null || objTransferToFieldsData.Tag2 == 0) {
                COMMON.prototype.showMessage("Select " + document.getElementById("hdnInvTag").value + " in Transfer To");
                return false;
            }
        }
        if (document.getElementById("hdnTag3").value != "") {
            if (objTransferToFieldsData.Tag3 == null || objTransferToFieldsData.Tag3 == 0) {
                COMMON.prototype.showMessage("Select " + document.getElementById("hdnTag3").value + " in Transfer To");
                return false;
            }
        }
        if (objTransferToFieldsData.AccountId == null || objTransferToFieldsData.AccountId == 0) {
            COMMON.prototype.showMessage("Select Account in Transfer To");
            return false;
        }
        return objTransferToFieldsData;
    },

    editRecord: function (element, iRow) {
        debugger;
        TRANSFERBUDGET.clearPannelFields(false);
        //iEditedRow = iRow;
        iEditedRow = (element.parentElement.parentElement.rowIndex - 2);
        bEdit = true;

      
        var objEditScreenData;
        if (arrScreenData.length > 0) {
            var objRowData = FGRIDCONTROL.getRowValue("grdTransferBudget", iEditedRow);
            for (var i = 0; i < arrScreenData.length; i++) {
                var DataObject = arrScreenData[i];
                if (DataObject.objHeaderFieldsData.PlanName == objRowData[0].Value &&
                      DataObject.objTransferFromFieldsData.Tag1 == objRowData[1].Value &&
                       DataObject.objTransferFromFieldsData.Tag2 == objRowData[2].Value &&
                       DataObject.objTransferFromFieldsData.Tag3 == objRowData[3].Value &&
                       DataObject.objTransferFromFieldsData.ProductId == objRowData[4].Value &&
                       DataObject.objTransferFromFieldsData.AccountId == objRowData[5].Value &&
                       DataObject.objTransferToFieldsData.Tag1 == objRowData[8].Value &&
                       DataObject.objTransferToFieldsData.Tag2 == objRowData[9].Value &&
                       DataObject.objTransferToFieldsData.Tag3 == objRowData[10].Value &&
                       DataObject.objTransferToFieldsData.ProductId == objRowData[11].Value &&
                       DataObject.objTransferToFieldsData.AccountId == objRowData[12].Value) {
                    objEditScreenData = DataObject;
                    arrScreenData.splice(i, 1);
                    FGRIDCONTROL.update("grdTransferBudget");
                    FGRIDCONTROL.deleteRows("grdTransferBudget", iEditedRow, 1);
                }            
            }
            TRANSFERBUDGET.setHeaderFieldsData(objEditScreenData.objHeaderFieldsData);
            TRANSFERBUDGET.setTransferFromFieldsData(objEditScreenData.objTransferFromFieldsData);
            TRANSFERBUDGET.setTransferToFieldsData(objEditScreenData.objTransferToFieldsData);
            TotalGridvalue = Number($('#TransferGridtotalvalue').html().replace(/\,/g, '')) - objEditScreenData.objTransferFromFieldsData.BudgetValue;
            TotalGridQuantity = Number($('#TransferGridtotalQuantity').html().replace(/\,/g, '')) - objEditScreenData.objTransferFromFieldsData.Quantity;
            $('#TransferGridtotalvalue').html(FConvert.formatToDecimalPlaces(TotalGridvalue, parseInt($("#hdnNoOfDecimal").val()), true));
            $('#TransferGridtotalQuantity').html(FConvert.formatToDecimalPlaces(TotalGridQuantity, parseInt($("#hdnNoOfQtyDecimal").val()), true));

            if (objRowData[0].Data["splitteddata"] != undefined) {
                Edit_lstTBSplitBudgetDetails = JSON.parse(objRowData[0].Data["splitteddata"]).lstTBSplitBudgetDetails;
                if (Edit_lstTBSplitBudgetDetails.length > 0) {
                    $("#btnTBSplitBugdet").css("pointer-events", "auto");
                    bSplit = true;
                }
            }
        }
    },

    setHeaderFieldsData: function (objHeaderFieldsData) {
        debugger;
        if (objHeaderFieldsData != null) {
            //OPTIONCONTROL.setControlText("optPlanName", objHeaderFieldsData.PlanName);
            document.getElementById("txtVersion").innerText = objHeaderFieldsData.Version;
            document.getElementById("txtReviseNo").innerText = objHeaderFieldsData.ReviseNo;
            DATEPICKER.setDate("dpLastUpdateDate", objHeaderFieldsData.LastUpdateDate, true);
            document.getElementById("lblLastUpdateDate").innerText = DATEPICKER.getText("dpLastUpdateDate");
            DATEPICKER.setDate("dpValidFromDate", objHeaderFieldsData.ValidFromDate, true);
            document.getElementById("lblValidFromDate").innerText = DATEPICKER.getText("dpValidFromDate");
            DATEPICKER.setDate("dpValidToDate", objHeaderFieldsData.ValidToDate, true);
            document.getElementById("lblValidToDate").innerText = DATEPICKER.getText("dpValidToDate");
        }
    },

    setTransferFromFieldsData: function (objTransferFromFieldsData) {
        debugger;
        if (objTransferFromFieldsData != null) {
            OPTIONCONTROL.setControlValue("optFromProfitCenterSchool", objTransferFromFieldsData.Tag1);
            OPTIONCONTROL.setControlValue("optFromCostCenter", objTransferFromFieldsData.Tag2);
            OPTIONCONTROL.setControlValue("optFromTag3", objTransferFromFieldsData.Tag3);
            OPTIONCONTROL.setControlValue("optFromProduct", objTransferFromFieldsData.ProductId);
            OPTIONCONTROL.setControlValue("optFromAccount", objTransferFromFieldsData.AccountId);

            document.getElementById("txtFromQuantity").value = Number(objTransferFromFieldsData.BudgetQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtFromSpentQuantity").value = Number(objTransferFromFieldsData.FromSpentQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtFromPreCommittedQuantity").value = Number(objTransferFromFieldsData.FromPreCommittedQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtFromCommittedQuantity").value = Number(objTransferFromFieldsData.FromCommittedQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtFromBalanceQuantity").value = Number(objTransferFromFieldsData.FromBalanceQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));

            document.getElementById("txtFromBudgetValue").value = FConvert.formatToDecimalPlaces(objTransferFromFieldsData.Budget, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtFromSpentBudget").value = FConvert.formatToDecimalPlaces(objTransferFromFieldsData.FromSpentBudget, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtFromPreCommittedValue").value = FConvert.formatToDecimalPlaces(objTransferFromFieldsData.FromPreCommittedValue, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtFromCommittedBudget").value = FConvert.formatToDecimalPlaces(objTransferFromFieldsData.FromCommittedBudget, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtFromBalanceBudget").value = FConvert.formatToDecimalPlaces(objTransferFromFieldsData.FromBalanceBudget, parseInt($("#hdnNoOfDecimal").val()), true);
           
            document.getElementById("txtFromReduceQuantity").value = Number(objTransferFromFieldsData.Quantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtFromReduceValue").value = Number(objTransferFromFieldsData.BudgetValue).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            ActualBalanceBudgetValue = objTransferFromFieldsData.FromBalanceBudget + objTransferFromFieldsData.BudgetValue;
            ActualBalanceBudgetQty=objTransferFromFieldsData.FromBalanceQuantity+objTransferFromFieldsData.Quantity;
        }
    },

    setTransferToFieldsData: function (objTransferToFieldsData) {
       // debugger;
        if (objTransferToFieldsData != null) {

            OPTIONCONTROL.setControlValue("optToProfitCenterSchool", objTransferToFieldsData.Tag1);
            OPTIONCONTROL.setControlValue("optToCostCenter", objTransferToFieldsData.Tag2);
            OPTIONCONTROL.setControlValue("optToTag3", objTransferToFieldsData.Tag3);
            OPTIONCONTROL.setControlValue("optToProduct", objTransferToFieldsData.ProductId);
        
            OPTIONCONTROL.setControlValue("optToAccount", objTransferToFieldsData.AccountId);

            document.getElementById("txtToQuantity").value = Number(objTransferToFieldsData.BudgetQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtToSpentQuantity").value = Number(objTransferToFieldsData.ToSpentQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtToPreCommittedQuantity").value = Number(objTransferToFieldsData.ToPreCommittedQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtToCommittedQuantity").value = Number(objTransferToFieldsData.ToCommittedQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtToBalanceQuantity").value = Number(objTransferToFieldsData.ToBalanceQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));

            document.getElementById("txtToBudgetValue").value = FConvert.formatToDecimalPlaces(objTransferToFieldsData.Budget, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtToSpentBudget").value = FConvert.formatToDecimalPlaces(objTransferToFieldsData.ToSpentBudget, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtToPreCommittedValue").value = FConvert.formatToDecimalPlaces(objTransferToFieldsData.ToPreCommittedValue, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtToCommittedBudget").value = FConvert.formatToDecimalPlaces(objTransferToFieldsData.ToCommittedBudget, parseInt($("#hdnNoOfDecimal").val()), true);
            document.getElementById("txtToBalanceBudget").value = FConvert.formatToDecimalPlaces(objTransferToFieldsData.ToBalanceBudget, parseInt($("#hdnNoOfDecimal").val()), true);

            document.getElementById("txtToAddQuantity").value = Number(objTransferToFieldsData.Quantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtToAddValue").value = FConvert.formatToDecimalPlaces(objTransferToFieldsData.BudgetValue, parseInt($("#hdnNoOfDecimal").val()), true);
        }
    },

    GetTransferBudget: function () {
        debugger;
        var url = GLOBAL.getContextPath("GetTransferBudget", "Budget", "Budgeting");
        var BudgetId = parseFloat(OPTIONCONTROL.getControlValue("optPlanName"));
        if (BudgetId > 0) {
            result = NETWORK.executeServerMethod(
                              url,
                              true,
                              { PlanId: BudgetId },
                              "JSON",
                              false,
                              "TRANSFERBUDGET.GetTransferBudget_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        }
    },

    GetTransferBudget_Success: function (flag, data) {
        debugger;
        if (flag == true && data != null) {
            //var objHeaderFieldsData = {
            //    PlanName: data.PlanName,
            //    Version: data.Version,
            //    ValidFromDate: data.ValidFrom,
            //    ValidToDate: data.ValidTo,
            //    LastUpdateDate: data.LastUpdateDate
            //}
            //TRANSFERBUDGET.setHeaderFieldsData(objHeaderFieldsData);
            //if (data.lstTransferBudgetBody != null) {
            //    for (var i = 0; i < data.lstTransferBudgetBody.length ; i++) {
            //        if (data.lstTransferBudgetBody[i].TransferBudgetFrom != null) {
            //            var objTransferFromFieldsData = data.lstTransferBudgetBody[i].TransferBudgetFrom;
            //            TRANSFERBUDGET.setTransferFromFieldsData(objTransferFromFieldsData);
            //        }
            //        if (data.lstTransferBudgetBody[i].TransferBudgetTo != null) {
            //            var objTransferToFieldsData = data.lstTransferBudgetBody[i].TransferBudgetTo;
            //            TRANSFERBUDGET.setTransferToFieldsData(objTransferToFieldsData);
            //        }
            //    }
            //}
            TRANSFERBUDGET.clearAllInputFields(true);
            TRANSFERBUDGET.setFromFilter(data);
            TRANSFERBUDGET.setToFilter(data);

            if (data == "No Budget Transfer Details found for this Budget.") {
                COMMON.prototype.showMessage(data);
                return false;
            }
            else {
                var HeaderFieldsData = {
                    PlanName: data.PlanName,
                    Version: data.Version,
                    ValidFromDate: data.ValidFrom,
                    ValidToDate: data.ValidTo,
                    LastUpdateDate: data.LastUpdateDate,
                    ReviseNo: data.ReviseNo
                }
                TRANSFERBUDGET.setHeaderFieldsData(HeaderFieldsData);
                if (data.lstTransferBudgetBody != null) {
                    for (var i = 0; i < data.lstTransferBudgetBody.length ; i++) {
                        var objScreenFieldsData = {
                            objHeaderFieldsData: HeaderFieldsData,
                            objTransferFromFieldsData: data.lstTransferBudgetBody[i].TransferBudgetFrom,
                            objTransferToFieldsData: data.lstTransferBudgetBody[i].TransferBudgetTo
                        }
                        var strFirst = i == 0 ? "First" : "";
                        var iRow = i == 0 ? parseInt($("#grdTransferBudget_body")[0].children.length) : parseInt($("#grdTransferBudget_body")[0].children.length) + 1;
                        //TRANSFERBUDGET.insertRow(strFirst, objScreenFieldsData, iEditedRow);
                        TRANSFERBUDGET.insertRow(strFirst, objScreenFieldsData, iRow);
                        TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
                    }
                }
            }
        }
        else {
            COMMON.prototype.showMessage("Error, GetTransferBudget");
            return false;
        }
    },

    setToAddQuantity: function (ele) {
        debugger;
        //var iBalanceBudgetQuantity = parseFloat(document.getElementById("txtFromBalanceQuantity").value);
        var iBalanceBudgetQuantity = ActualBalanceBudgetQty;
        var iReduceQuantity = parseFloat(ele.value);
        if (bClearFromQty) {
            ele.value = Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
            document.getElementById("txtToAddQuantity").value = Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
        }
        else {
            if (iReduceQuantity <= iBalanceBudgetQuantity) {
                document.getElementById("txtToAddQuantity").value = Number(ele.value).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                if (ActualBalanceBudgetQty > 0) {
                    document.getElementById("txtFromBalanceQuantity").value = Number(ActualBalanceBudgetQty - parseFloat(ele.value)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                }
                ele.value = Number(ele.value).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                TRANSFERBUDGET.setToQuantityAndValue(ele);
            }
            else {
                ele.value = Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txtToAddQuantity").value = Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                if (ActualBalanceBudgetQty > 0) {
                    document.getElementById("txtFromBalanceQuantity").value = Number(ActualBalanceBudgetQty).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                }
                COMMON.prototype.showMessage("Reduce Quantity cannot be greater than Balance Quantity.");
                return false;
            }
        }
    },


    setToAddValue: function (ele) {
        debugger;
        //var iBalanceBudgetValue = parseFloat(document.getElementById("txtFromBalanceBudget").value);
        var iBalanceBudgetValue = ActualBalanceBudgetValue;
        var iReduceValue = parseFloat(ele.value);

        if (iReduceValue <= iBalanceBudgetValue) {
            document.getElementById("txtToAddValue").value = FConvert.formatToDecimalPlaces(ele.value, parseInt($("#hdnNoOfDecimal").val()), true);
            if (ActualBalanceBudgetValue > 0) {
                document.getElementById("txtFromBalanceBudget").value = FConvert.formatToDecimalPlaces(ActualBalanceBudgetValue - parseFloat(ele.value), parseInt($("#hdnNoOfDecimal").val()), true);
            }
            ele.value = Number(ele.value).toFixed(parseFloat($("#hdnNoOfDecimal").val()));
            TRANSFERBUDGET.setToQuantityAndValue(ele);
        }
        else {
            ele.value = Number(0).toFixed(parseFloat($("#hdnNoOfDecimal").val()));
            document.getElementById("txtToAddValue").value = FConvert.formatToDecimalPlaces(0, parseInt($("#hdnNoOfDecimal").val()), true);
            if (ActualBalanceBudgetValue > 0) {
                document.getElementById("txtFromBalanceBudget").value = FConvert.formatToDecimalPlaces(ActualBalanceBudgetValue, parseInt($("#hdnNoOfDecimal").val()), true);
            }
            COMMON.prototype.showMessage("Reduce Value cannot be greater than Balance Budget.");
            return false;
        }
    },

    setFromFilter: function (accountViewData) {
        debugger;
        var iPlanId = OPTIONCONTROL.getControlValue("optPlanName");
        var iFromFATag = OPTIONCONTROL.getControlValue("optFromProfitCenterSchool");
        var iFromInvTag = OPTIONCONTROL.getControlValue("optFromCostCenter");
        var iFromTag3 = OPTIONCONTROL.getControlValue("optFromTag3");

        var arrAccountFilter = [];
        if (accountViewData != undefined) {
            if (accountViewData.ValidFrom != undefined && accountViewData.ValidTo) {
                arrAccountFilter.push("iValidFrom = " + accountViewData.ValidFrom + " AND iValidTo = " + accountViewData.ValidTo + " AND  iAccountId NOT IN (5,6,7)");
            }
        }
        else {
            arrAccountFilter.push("iAccountId NOT IN (5,6,7)");
        }
        if (iPlanId > 0) {
            arrAccountFilter.push("iBudgetId IN(" + iPlanId + ")");
        }
        else {
            arrAccountFilter.push("iBudgetId IN(" + 0 + ")");
        }
        if (iFromFATag > 0) {
            arrAccountFilter.push("iTag1 IN(" + iFromFATag + ")");
        }
        else {
            arrAccountFilter.push("iTag1 IN(" + 0 + ")");
        }
        if (iFromInvTag > 0) {
            arrAccountFilter.push("iTag2 IN(" + iFromInvTag + ")");
        }
        else {
            arrAccountFilter.push("iTag2 IN(" + 0 + ")");
        }
        if (iFromTag3 > 0) {
            arrAccountFilter.push("iTag3 IN(" + iFromTag3 + ")");
        }
        else {
            arrAccountFilter.push("iTag3 IN(" + 0 + ")");
        }
        var strFilter = arrAccountFilter.join(" AND ");
        OPTIONCONTROL.setFilter("optFromAccount", strFilter);


        var arrProductFilter = [];
        if (accountViewData != undefined) {
            if (accountViewData.ValidFrom != undefined && accountViewData.ValidTo) {
                arrProductFilter.push("iValidFrom = " + accountViewData.ValidFrom + " AND iValidTo = " + accountViewData.ValidTo);
            }
        }
        if (iPlanId > 0) {
            arrProductFilter.push("iBudgetId IN(" + iPlanId + ")");
        }
        else {
            arrProductFilter.push("iBudgetId IN(" + 0 + ")");
        }
        if (iFromFATag > 0) {
            arrProductFilter.push("iTag1 IN(" + iFromFATag + ")");
        }
        else {
            arrProductFilter.push("iTag1 IN(" + 0 + ")");
        }
        if (iFromInvTag > 0) {
            arrProductFilter.push("iTag2 IN(" + iFromInvTag + ")");
        }
        else {
            arrProductFilter.push("iTag2 IN(" + 0 + ")");
        }
        if (iFromTag3 > 0) {
            arrProductFilter.push("iTag3 IN(" + iFromTag3 + ")");
        }
        else {
            arrProductFilter.push("iTag3 IN(" + 0 + ")");
        }
        var strProductFilter = arrProductFilter.join(" AND ");
        OPTIONCONTROL.setFilter("optFromProduct", strProductFilter);
    },

    setToFilter: function (accountViewData) {
        debugger;
        var iPlanId = OPTIONCONTROL.getControlValue("optPlanName");
        var iToFATag = OPTIONCONTROL.getControlValue("optToProfitCenterSchool");
        var iToInvTag = OPTIONCONTROL.getControlValue("optToCostCenter");
        var iToTag3 = OPTIONCONTROL.getControlValue("optToTag3");
        var arrAccountFilter = [];
        if (accountViewData != undefined) {
            if (accountViewData.ValidFrom != undefined && accountViewData.ValidTo) {
                arrAccountFilter.push("iValidFrom = " + accountViewData.ValidFrom + " AND iValidTo = " + accountViewData.ValidTo + " AND  iAccountId NOT IN (5,6,7)");
            }
        }
        else {
            arrAccountFilter.push("iAccountId NOT IN (5,6,7)");
        }
        if (iPlanId > 0) {
            arrAccountFilter.push("iBudgetId IN(" + iPlanId + ")");
        }
        else {
            arrAccountFilter.push("iBudgetId IN(" + 0 + ")");
        }
        if (iToFATag > 0) {
            arrAccountFilter.push("iTag1 IN(" + iToFATag + ")");
        }
        else {
            arrAccountFilter.push("iTag1 IN(" + 0 + ")");
        }
        if (iToInvTag > 0) {
            arrAccountFilter.push("iTag2 IN(" + iToInvTag + ")");
        }
        else {
            arrAccountFilter.push("iTag2 IN(" + 0 + ")");
        }
        if (iToTag3 > 0) {
            arrAccountFilter.push("iTag3 IN(" + iToTag3 + ")");
        }
        else {
            arrAccountFilter.push("iTag3 IN(" + 0 + ")");
        }
        var strAccountFilter = arrAccountFilter.join(" AND ");
        OPTIONCONTROL.setFilter("optToAccount", strAccountFilter);


        var arrProductFilter = [];
        if (accountViewData != undefined) {
            if (accountViewData.ValidTo != undefined && accountViewData.ValidTo) {
                arrProductFilter.push("iValidTo = " + accountViewData.ValidTo + " AND iValidTo = " + accountViewData.ValidTo);
            }
        }
        if (iPlanId > 0) {
            arrProductFilter.push("iBudgetId IN(" + iPlanId + ")");
        }
        else {
            arrProductFilter.push("iBudgetId IN(" + 0 + ")");
        }
        if (iToFATag > 0) {
            arrProductFilter.push("iTag1 IN(" + iToFATag + ")");
        }
        else {
            arrProductFilter.push("iTag1 IN(" + 0 + ")");
        }
        if (iToInvTag > 0) {
            arrProductFilter.push("iTag2 IN(" + iToInvTag + ")");
        }
        else {
            arrProductFilter.push("iTag2 IN(" + 0 + ")");
        }
        if (iToTag3 > 0) {
            arrProductFilter.push("iTag3 IN(" + iToTag3 + ")");
        }
        else {
            arrProductFilter.push("iTag3 IN(" + 0 + ")");
        }
        var strProductFilter = arrProductFilter.join(" AND ");
        OPTIONCONTROL.setFilter("optToProduct", strProductFilter);
    },

    setFromProductFilter: function (accountViewData) {
        debugger;
        var iPlanId = OPTIONCONTROL.getControlValue("optPlanName");
        var iFromFATag = OPTIONCONTROL.getControlValue("optFromProfitCenterSchool");
        var iFromInvTag = OPTIONCONTROL.getControlValue("optFromCostCenter");
        var iFromTag3 = OPTIONCONTROL.getControlValue("optFromTag3");
        var iFromProduct = OPTIONCONTROL.getControlValue("optFromProduct");

        var arrAccountFilter = [];
        if (accountViewData != undefined) {
            if (accountViewData.ValidFrom != undefined && accountViewData.ValidTo) {
                arrAccountFilter.push("iValidFrom = " + accountViewData.ValidFrom + " AND iValidTo = " + accountViewData.ValidTo + " AND  iAccountId NOT IN (5,6,7)");
            }
        }
        else {
            arrAccountFilter.push("iAccountId NOT IN (5,6,7)");
        }
        if (iPlanId > 0) {
            arrAccountFilter.push("iBudgetId IN(" + iPlanId + ")");
        }
        else {
            arrAccountFilter.push("iBudgetId IN(" + 0 + ")");
        }
        if (iFromFATag > 0) {
            arrAccountFilter.push("iTag1 IN(" + iFromFATag + ")");
        }
        else {
            arrAccountFilter.push("iTag1 IN(" + 0 + ")");
        }
        if (iFromInvTag > 0) {
            arrAccountFilter.push("iTag2 IN(" + iFromInvTag + ")");
        }
        else {
            arrAccountFilter.push("iTag2 IN(" + 0 + ")");
        }
        if (iFromTag3 > 0) {
            arrAccountFilter.push("iTag3 IN(" + iFromTag3 + ")");
        }
        else {
            arrAccountFilter.push("iTag3 IN(" + 0 + ")");
        }
        if (iFromProduct > 0) {
            arrAccountFilter.push("iProductId IN(" + iFromProduct + ")");
        }
        else {
            arrAccountFilter.push("iProductId IN(" + 0 + ")");
        }

        var strFilter = arrAccountFilter.join(" AND ");
        OPTIONCONTROL.setFilter("optFromAccount", strFilter);
    },

    setToProductFilter: function (accountViewData) {
        debugger;
        var iPlanId = OPTIONCONTROL.getControlValue("optPlanName");
        var iToFATag = OPTIONCONTROL.getControlValue("optToProfitCenterSchool");
        var iToInvTag = OPTIONCONTROL.getControlValue("optToCostCenter");
        var iToTag3 = OPTIONCONTROL.getControlValue("optToTag3");
        var iToProduct = OPTIONCONTROL.getControlValue("optToProduct");

        var arrAccountFilter = [];
        if (accountViewData != undefined) {
            if (accountViewData.ValidTo != undefined && accountViewData.ValidTo) {
                arrAccountFilter.push("iValidTo = " + accountViewData.ValidTo + " AND iValidTo = " + accountViewData.ValidTo + " AND  iAccountId NOT IN (5,6,7)");
            }
        }
        else {
            arrAccountFilter.push("iAccountId NOT IN (5,6,7)");
        }
        if (iPlanId > 0) {
            arrAccountFilter.push("iBudgetId IN(" + iPlanId + ")");
        }
        else {
            arrAccountFilter.push("iBudgetId IN(" + 0 + ")");
        }
        if (iToFATag > 0) {
            arrAccountFilter.push("iTag1 IN(" + iToFATag + ")");
        }
        else {
            arrAccountFilter.push("iTag1 IN(" + 0 + ")");
        }
        if (iToInvTag > 0) {
            arrAccountFilter.push("iTag2 IN(" + iToInvTag + ")");
        }
        else {
            arrAccountFilter.push("iTag2 IN(" + 0 + ")");
        }
        if (iToTag3 > 0) {
            arrAccountFilter.push("iTag3 IN(" + iToTag3 + ")");
        }
        else {
            arrAccountFilter.push("iTag3 IN(" + 0 + ")");
        }
        if (iToProduct > 0) {
            arrAccountFilter.push("iProductId IN(" + iToProduct + ")");
        }
        else {
            arrAccountFilter.push("iProductId IN(" + 0 + ")");
        }

        var strFilter = arrAccountFilter.join(" AND ");
        OPTIONCONTROL.setFilter("optToAccount", strFilter);
    },

    setFromQuantityAndValue: function (ele) {
        debugger;
        ActualBalanceBudgetValue = 0;
        ActualBalanceBudgetQty = 0;
        var objManditaryValue = OPTIONCONTROL.getControlData("optFromAccount");
        var objManditaryValue_JSON = OPTIONCONTROL.convertRawDataIntoObject("optFromAccount", objManditaryValue);
        if (objManditaryValue_JSON != null) {
            document.getElementById("hdnFromBudgetConfirmId").value = objManditaryValue_JSON.iBudgetConfirmId;
            document.getElementById("hdnFromAccountType").value = objManditaryValue_JSON.iAccountType;
            document.getElementById("hdnFromSplitType").value = objManditaryValue_JSON.iSplitType;
            document.getElementById("hdnFromSpillOver").value = objManditaryValue_JSON.iSpillOver;
            if ((ele.id == "optFromAccount") && parseInt(objManditaryValue_JSON.iSplitType) > 0) {
                $("#btnTBSplitBugdet").css("pointer-events", "auto");
            }
            else
            {
                $("#btnTBSplitBugdet").css("pointer-events", "none");
            }


        }

        TRANSFERBUDGET.GetAdvBudget("From", ele);

    },

    setToQuantityAndValue: function (ele) {
        debugger;
        var objManditaryValue = OPTIONCONTROL.getControlData("optToAccount");
        var objManditaryValue_JSON = OPTIONCONTROL.convertRawDataIntoObject("optToAccount", objManditaryValue);
        if (objManditaryValue_JSON != null) {
            document.getElementById("hdnToBudgetConfirmId").value = objManditaryValue_JSON.iBudgetConfirmId;
            document.getElementById("hdnToAccountType").value = objManditaryValue_JSON.iAccountType;
            if (objManditaryValue_JSON.iSplitType == undefined || objManditaryValue_JSON.iSplitType.trim() == "") {
                document.getElementById("hdnToSplitType").value = 0;
            }
            else {
                document.getElementById("hdnToSplitType").value = objManditaryValue_JSON.iSplitType;
            }
            document.getElementById("hdnToSpillOver").value = objManditaryValue_JSON.iSpillOver;
            var objMandatoryFrom = OPTIONCONTROL.getControlData("optFromAccount");
            var objManditaryFrom_JSON = OPTIONCONTROL.convertRawDataIntoObject("optFromAccount", objMandatoryFrom);
            var FromSplitValue = objManditaryFrom_JSON != null ? objManditaryFrom_JSON.iSplitType : undefined;

            if (parseInt(objManditaryValue_JSON.iSplitType) > 0 && parseInt(FromSplitValue) > 0 && objManditaryValue_JSON.fValue > 0) {
                $("#btnTBSplitBugdet").css("pointer-events", "auto");
            }
            else {
                $("#btnTBSplitBugdet").css("pointer-events", "none");
            }
        }


        TRANSFERBUDGET.GetAdvBudget("To", ele);

    },

    GetAdvBudget: function (sPannelName, ele) {
        debugger;
        var RemainingBudgetBalance;
        var RemainingBudgetQuantity;
        var iTag1 = OPTIONCONTROL.getControlValue("opt" + sPannelName + "ProfitCenterSchool") == null ? 0 : OPTIONCONTROL.getControlValue("opt" + sPannelName + "ProfitCenterSchool");
        var iTag2 = OPTIONCONTROL.getControlValue("opt" + sPannelName + "CostCenter") == null ? 0 : OPTIONCONTROL.getControlValue("opt" + sPannelName + "CostCenter");
        var iTag3 = OPTIONCONTROL.getControlValue("opt" + sPannelName + "Tag3") == null ? 0 : OPTIONCONTROL.getControlValue("opt" + sPannelName + "Tag3");
        var iFromDate = DATEPICKER.getDate("dpValidFromDate") == null ? 0 : DATEPICKER.getDate("dpValidFromDate");
        var iProductId = OPTIONCONTROL.getControlValue("opt" + sPannelName + "Product") == null ? 0 : OPTIONCONTROL.getControlValue("opt" + sPannelName + "Product");
        var iAccountId = OPTIONCONTROL.getControlValue("opt" + sPannelName + "Account") == null ? 0 : OPTIONCONTROL.getControlValue("opt" + sPannelName + "Account");
        if (sPannelName == "From") {
            for (var i = 0; i < arrScreenData.length & arrScreenData.length > 0; i++) {
                DataObject = arrScreenData[i];
                if (
                                     DataObject.objTransferFromFieldsData.Tag1 == iTag1 &&
                                     DataObject.objTransferFromFieldsData.Tag2 == iTag2 &&
                                     DataObject.objTransferFromFieldsData.Tag3 == iTag3 &&
                                     DataObject.objTransferFromFieldsData.ProductId == iProductId &&
                                     DataObject.objTransferFromFieldsData.AccountId == iAccountId) {
                    RemainingBudgetBalance = DataObject.objTransferFromFieldsData.FromBalanceBudget;
                    RemainingBudgetQuantity = DataObject.objTransferFromFieldsData.FromBalanceQuantity;
                }
            }
        }
       
        if (parseInt(iAccountId) > 0) {
            var url = GLOBAL.getContextPath("GetAdvBudget", "Budget", "Budgeting");
            result = NETWORK.executeServerMethod(
                                     url,
                                     true,
                                     { iTag1: iTag1, iTag2: iTag2, iTag3: iTag3, iProductId: iProductId, iAccountId: iAccountId, iDate: iFromDate },
                                     "JSON",
                                     false,
                                     "TRANSFERBUDGET.GetAdvBudget_Success", "", "", sPannelName, { ele: ele, RemainingBudgetBalance: RemainingBudgetBalance, RemainingBudgetQuantity: RemainingBudgetQuantity });
        }
    },

    GetAdvBudget_Success: function (flag, data, sPannelName, ele) {
        debugger;
        if (flag) {
            if (data != null && data != undefined && data != "") {

                //Manipulating Quantity Fields
                document.getElementById("txt" + sPannelName + "Quantity").value = Number(data.BudgetQty).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txt" + sPannelName + "SpentQuantity").value = Number(Math.abs(data.SpentQty)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txt" + sPannelName + "PreCommittedQuantity").value = Number(Math.abs(data.PreCommittedQty)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                document.getElementById("txt" + sPannelName + "CommittedQuantity").value = Number(Math.abs(data.CommittedQty)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                var bReturn = $("#hdnReturn").val();
                if (bReturn == true || bReturn == "true") {
                    document.getElementById("txt" + sPannelName + "ReturnQty").value = Number(Math.abs(data.ReturnQty)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                }

                var iBalanceQuantity = 0;
                if (sPannelName == "To") {
                    if (data.BudgetQty > 0) {
                        iBalanceQuantity = (data.BudgetQty + ((-data.SpentQty) + (-data.PreCommittedQty) + (-data.CommittedQty) + (data.ReturnQty)) + parseFloat(document.getElementById("txt" + sPannelName + "AddQuantity").value));
                        if (iBalanceQuantity < 0) {    //If Balance Quantity  is negative
                            iBalanceQuantity = 0;
                        }
                        bClearFromQty = false;
                    }
                    else {
                        if (ele.ele.id == "optToAccount") {
                            document.getElementById("txt" + sPannelName + "AddQuantity").value = Number(Math.abs(0)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                            document.getElementById("txtFromReduceQuantity").value = Number(Math.abs(0)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                            bClearFromQty = true;
                        }
                        else {
                            bClearFromQty = false;
                        }
                    }
                }
                else {
                    if (data.BudgetQty > 0) {
                        iBalanceQuantity = data.BudgetQty + ((-data.SpentQty) + (-data.PreCommittedQty) + (-data.CommittedQty) + (data.ReturnQty));
                        if (iBalanceQuantity < 0) {    //If Balance Quantity  is negative
                            iBalanceQuantity = 0;
                        }
                    }
                    if (sPannelName == "From" && ele.RemainingBudgetQuantity != undefined) {
                        iBalanceQuantity = ele.RemainingBudgetQuantity;
                    }
                }
               
                document.getElementById("txt" + sPannelName + "BalanceQuantity").value = Number(iBalanceQuantity).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                if (sPannelName == "From" && iBalanceQuantity > 0) {
                    ActualBalanceBudgetQty = iBalanceQuantity;
                }



                //Manipulating Value Fields
               
                document.getElementById("txt" + sPannelName + "BudgetValue").value = FConvert.formatToDecimalPlaces(data.Budget, parseInt($("#hdnNoOfDecimal").val()), true);
                document.getElementById("txt" + sPannelName + "SpentBudget").value = FConvert.formatToDecimalPlaces(Math.abs(data.SpentBudget), parseInt($("#hdnNoOfDecimal").val()), true);
                document.getElementById("txt" + sPannelName + "PreCommittedValue").value = FConvert.formatToDecimalPlaces(Math.abs(data.PreCommittedBudget), parseInt($("#hdnNoOfDecimal").val()), true);
                document.getElementById("txt" + sPannelName + "CommittedBudget").value = FConvert.formatToDecimalPlaces(Math.abs(data.CommittedBudget), parseInt($("#hdnNoOfDecimal").val()), true);

                var bReturn = $("#hdnReturn").val();
                if (bReturn == true || bReturn == "true") {
                    document.getElementById("txt" + sPannelName + "ReturnBudget").value = Number(Math.abs(data.ReturnBudget)).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                }
                var iBalanceBudget = 0;
                if (sPannelName == "To") {
                    iBalanceBudget = (data.Budget + ((data.SpentBudget) + (data.PreCommittedBudget) + (data.CommittedBudget) + (data.ReturnBudget)) + parseFloat(document.getElementById("txt" + sPannelName + "AddValue").value.replace(/\,/g,'')));
                    if (iBalanceBudget < 0) {    //If Balance Budget  is negative
                        iBalanceBudget = 0;
                    }
                }
                else {
                    iBalanceBudget = data.Budget + ((data.SpentBudget) + (data.PreCommittedBudget) + (data.CommittedBudget) + (data.ReturnBudget));
                    if (iBalanceBudget < 0) {    //If Balance Budget  is negative
                        iBalanceBudget = 0;
                    }
                }
                if (sPannelName == "From" && ele.RemainingBudgetBalance != undefined) {
                    iBalanceBudget = ele.RemainingBudgetBalance;
                }
              
                    document.getElementById("txt" + sPannelName + "BalanceBudget").value = FConvert.formatToDecimalPlaces(iBalanceBudget, parseInt($("#hdnNoOfDecimal").val()), true);
                

                if (sPannelName == "From" && iBalanceBudget > 0) {
                    ActualBalanceBudgetValue = iBalanceBudget;
                }             
                if (sPannelName == "From") {
                    document.getElementById("txt" + sPannelName + "ReduceQuantity").value = Number(0).toFixed(parseFloat($("#hdnNoOfQtyDecimal").val()));
                    document.getElementById("txt" + sPannelName + "ReduceValue").value = FConvert.formatToDecimalPlaces(0, parseInt($("#hdnNoOfDecimal").val()), true);
                    $("#txtFromReduceQuantity").focus();
                }
                return false;
            }
        }
    },

    SaveTransferBudget: function () {
        debugger;
        try {
            arrTBSplitBudgetDetails = [];
            var iBudgetFromSplitType = parseInt(document.getElementById("hdnFromSplitType").value);
            var iBudgetToSplitType = parseInt(document.getElementById("hdnToSplitType").value);
            if (TRANSFERBUDGET.Validate()) {
                var objReviseBudget = {
                    BudgetId: OPTIONCONTROL.getControlValue("optPlanName"),
                    PlanName: OPTIONCONTROL.getControlText("optPlanName"),
                    Version: parseFloat(document.getElementById("txtVersion").innerText),
                    ReviseNo: parseFloat(document.getElementById("txtReviseNo").innerText),
                    LastUpdateDate: DATEPICKER.getDate("dpLastUpdateDate"),
                    ValidFrom: DATEPICKER.getDate("dpValidFromDate"),
                    ValidTo: DATEPICKER.getDate("dpValidToDate"),
                    Narration: $("#txtNarration").val(),
                    lstTransferBudgetBody: TRANSFERBUDGET.getTransferBudgetBody()
                }
                if (objReviseBudget.lstTransferBudgetBody.length > 0) {
                    var url = GLOBAL.getContextPath("SaveTransferBudget", "Budget", "Budgeting");
                    result = NETWORK.executeServerMethod(
                                      url,
                                      true,
                                      { objReviseBudget: objReviseBudget, lstTBSplitBudget: arrTBSplitBudgetDetails, eBudgetFromSplitType: iBudgetFromSplitType, eBudgetToSplitType: iBudgetToSplitType },
                                      "JSON",
                                      false,
                                      "TRANSFERBUDGET.SaveTransferBudget_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
                }
                else {
                    COMMON.prototype.showMessage("First Add Data to Grid before Saving");
                    return false;
                }
            }
        } catch (error) {
            COMMON.prototype.showMessage(error);
        }
    },

    SaveTransferBudget_Success: function (flag, data) {
        debugger;
        if (flag) {
            if (data != "") {
                COMMON.prototype.showMessage(data);
                TRANSFERBUDGET.clearAllInputFields(false);
                return false;
            }
        }
    },

    Validate: function () {
        debugger;
        var PlanName = OPTIONCONTROL.getControlText("optPlanName");
        if (PlanName.trim().length == 0) {
            COMMON.prototype.showMessage("Plan Name can not be empty.");
            return false;
        }
        return true;
    },

    getTransferBudgetBody: function () {
        debugger;
        var lstTransferBudgetBody = [];
        FGRIDCONTROL.update("grdTransferBudget");
        var grdTransferBudget = document.getElementById('grdTransferBudget_body');
        for (var index = 1; index <= grdTransferBudget.rows.length; index++) {
            var objTransferBudgetBody = {
                TransferBudgetFrom: {
                    Account: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 6).getCellData("text"),
                    AccountId: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 6).getCellData("value"),
                    Product: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 5).getCellData("text"),
                    ProductId: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 5).getCellData("value"),
                    Tag1: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 2).getCellData("value"),
                    Tag1Name: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 2).getCellData("text"),
                    Tag2: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 3).getCellData("value"),
                    Tag2Name: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 3).getCellData("text"),
                    Tag3: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 4).getCellData("value"),
                    Tag3Name: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 4).getCellData("text"),
                    Quantity: -FGRIDCONTROL.getCellObject("grdTransferBudget", index, 7).getCellData("value"),
                    BudgetValue: -FGRIDCONTROL.getCellObject("grdTransferBudget", index, 8).getCellData("value"),
                    BudgetConfirmId: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 16).getCellData("value"),
                    Narration: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 18).getCellData("value")
                },

                TransferBudgetTo: {
                    Account: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 13).getCellText(),
                    AccountId: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 13).getCellData("value"),
                    Product: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 12).getCellText(),
                    ProductId: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 12).getCellData("value"),
                    Tag1: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 9).getCellData("value"),
                    Tag1Name: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 9).getCellText(),
                    Tag2: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 10).getCellData("value"),
                    Tag2Name: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 10).getCellText(),
                    Tag3: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 11).getCellData("value"),
                    Tag3Name: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 11).getCellText(),
                    Quantity: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 14).getCellData("value"),
                    BudgetValue: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 15).getCellData("value"),
                    BudgetConfirmId: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 17).getCellData("value"),
                    Narration: FGRIDCONTROL.getCellObject("grdTransferBudget", index, 18).getCellData("value")
                }
            }
            if (parseFloat(objTransferBudgetBody.TransferBudgetFrom.AccountId) > 0 && parseFloat(objTransferBudgetBody.TransferBudgetTo.AccountId) > 0) {
                lstTransferBudgetBody.push(objTransferBudgetBody);
            }

            arrTBSplitBudgetDetails.push(TRANSFERBUDGET.getSplittedBudget(index))
        }
        return lstTransferBudgetBody;
    },

    validateInputNumber: function (eleInput, iType, evt) {
        // 0 For Signed Integer
        // 1 For Unsigned Integer
        // 2 For Signed Decimal
        // 3 For Unsingned Decimal
        //debugger;
        var charCode = null;

        try {
            bResult = false;

            if (evt.which == 0 || evt.which == 8) {
                return (true);
            }

            charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode == 45) { // -
                if ((iType == 0 || iType == 2)
                    && eleInput.value.length == 0) { // Signed Integer, Signed Decimal
                    return (true);
                }
            }
            else if (charCode == 46) { // .
                var splitedValue = parseFloat(eleInput.value.split('.')[0]);
                if ((iType == 2 || iType == 3)
                    && (eleInput.value.indexOf(".") == -1 || splitedValue == 0)) { // Signed Decimal, Unsingned Decimal
                    return (true);
                }
            }
            else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                return (true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{DefineBudget.validateInputNumber} " + err.message, "Exception");
        }
        return (false);
    },

    GetSplitBudgetDetailsGrid: function () {
        debugger;
        var iFromTag1 = OPTIONCONTROL.getControlValue("optFromProfitCenterSchool") == null ? 0 : OPTIONCONTROL.getControlValue("optFromProfitCenterSchool");
        var iFromTag2 = OPTIONCONTROL.getControlValue("optFromCostCenter") == null ? 0 : OPTIONCONTROL.getControlValue("optFromCostCenter");
        var iFromTag3 = OPTIONCONTROL.getControlValue("optFromTag3") == null ? 0 : OPTIONCONTROL.getControlValue("optFromTag3");
        var iFromProductId = OPTIONCONTROL.getControlValue("optFromProduct") == null ? 0 : OPTIONCONTROL.getControlValue("optFromProduct");
        var iFromAccountId = OPTIONCONTROL.getControlValue("optFromAccount") == null ? 0 : OPTIONCONTROL.getControlValue("optFromAccount");

        var iToTag1 = OPTIONCONTROL.getControlValue("optToProfitCenterSchool") == null ? 0 : OPTIONCONTROL.getControlValue("optToProfitCenterSchool");
        var iToTag2 = OPTIONCONTROL.getControlValue("optToCostCenter") == null ? 0 : OPTIONCONTROL.getControlValue("optToCostCenter");
        var iToTag3 = OPTIONCONTROL.getControlValue("optToTag3") == null ? 0 : OPTIONCONTROL.getControlValue("optToTag3");
        var iToProductId = OPTIONCONTROL.getControlValue("optToProduct") == null ? 0 : OPTIONCONTROL.getControlValue("optToProduct");
        var iToAccountId = OPTIONCONTROL.getControlValue("optToAccount") == null ? 0 : OPTIONCONTROL.getControlValue("optToAccount");

        var url = GLOBAL.getContextPath("GetSplitBudgetDetailsGrid", "Budget", "Budgeting");
        //if (TRANSFERBUDGET.validateSplitBudget()) {
        if (true) {
            var TBSplitBudget = {
                iFromSplitType: parseInt(document.getElementById("hdnFromSplitType").value),
                iToSplitType: parseInt(document.getElementById("hdnToSplitType").value),
                iFromSpillOver: parseInt(document.getElementById("hdnFromSpillOver").value),
                iToSpillOver: parseInt(document.getElementById("hdnToSpillOver").value),
                iFromBudgetConfirmId: parseInt(document.getElementById("hdnFromBudgetConfirmId").value),
                iToBudgetConfirmId: parseInt(document.getElementById("hdnToBudgetConfirmId").value),
                iFromAccount: parseInt(OPTIONCONTROL.getControlValue("optFromAccount")),
                sFromAccount: OPTIONCONTROL.getControlText("optFromAccount"),
                iToAccount: parseInt(OPTIONCONTROL.getControlValue("optToAccount")),
                sToAccount: OPTIONCONTROL.getControlText("optToAccount"),
                iFromDate: DATEPICKER.getDate("dpValidFromDate"),
                sFromDate: DATEPICKER.getText("dpValidFromDate"),
                iToDate: DATEPICKER.getDate("dpValidToDate"),
                sToDate: DATEPICKER.getText("dpValidToDate"),
                iFromQuantity: document.getElementById("txtFromBalanceQuantity").value,
                iToQuantity: document.getElementById("txtToBalanceQuantity").value,
                iFromValue: document.getElementById("txtFromBalanceBudget").value,
                iToValue: document.getElementById("txtToBalanceBudget").value,
                lstTBSplitBudgetDetails: Edit_lstTBSplitBudgetDetails
            }

            var ExtraData = {
                iFromSplitType: TBSplitBudget.iFromSplitType,
                iToSplitType: TBSplitBudget.iToSplitType,
                iFromSpillOver: TBSplitBudget.iFromSpillOver,
                iToSpillOver: TBSplitBudget.iToSpillOver
            }

            result = NETWORK.executeServerMethod(
                              url,
                              true,
                              {
                                  objTBSplitBudget: TBSplitBudget, iFromTag1: iFromTag1, iFromTag2: iFromTag2, iFromTag3: iFromTag3, iFromProductId: iFromProductId, iFromAccountId: iFromAccountId,
                                  iToTag1: iToTag1, iToTag2: iToTag2, iToTag3: iToTag3, iToProductId: iToProductId, iToAccountId: iToAccountId
                              },
                              "html",
                              true,
                              "TRANSFERBUDGET.GetSplitBudgetDetailsGrid_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ExtraData);

        }
    },

    GetSplitBudgetDetailsGrid_Success: function (flag, data, ExtraData) {
        debugger;
        if (flag == true && data != null) {
            $("#splitBudgetModal").html("");
            $("#splitBudgetModal").html(data);
            $("#splitBudgetModal").modal("show");
            $("#ddlFromSplitType").val(ExtraData.iFromSplitType);
            $("#ddlToSplitType").val(ExtraData.iToSplitType);
            $("#ddlFromSpillOver").val(ExtraData.iFromSpillOver);
            $("#ddlToSpillOver").val(ExtraData.iToSpillOver);
            TRANSFERBUDGET.resizeSplitGridColumnsWidth("grdTBSplitBudget_From");
            TRANSFERBUDGET.resizeSplitGridColumnsWidth("grdTBSplitBudget_To");
            $("#btnTBSplitBugdet").css("pointer-events", "none");
            var lstFromSelectedRow;
            var lstToSelectedRow;
        }
    },

    validateSplitBudget: function (bSplit, iEditedRow) {
        debugger;
        var fTotalReducedQty = 0;
        var fTotalReducedValue = 0;
        var grdTBSplitBudget_From_body = $("#grdTBSplitBudget_From_body tr.FRowColor");
        for (var iRow = 0; iRow < grdTBSplitBudget_From_body.length; iRow++) {
            var fReducedQty = parseFloat(FGRIDCONTROL.getCellObject("grdTBSplitBudget_From", (grdTBSplitBudget_From_body[iRow].rowIndex - 2), 3).getCellData("value"));
            fTotalReducedQty += isNaN(fReducedQty) ? 0 : fReducedQty;
            var fReducedValue = parseFloat(FGRIDCONTROL.getCellObject("grdTBSplitBudget_From", (grdTBSplitBudget_From_body[iRow].rowIndex - 2), 5).getCellData("value"));
            fTotalReducedValue += isNaN(fReducedValue) ? 0 : fReducedValue;

            var objRowData = FGRIDCONTROL.getRowValue("grdTBSplitBudget_From", (grdTBSplitBudget_From_body[iRow].rowIndex - 2));
            var objTBSplitBudgetDetails = {
                FromBudgetConfirmId: parseInt(document.getElementById("hdnFromBudgetConfirmId").value),
                ToBudgetConfirmId: parseInt(document.getElementById("hdnToBudgetConfirmId").value),
                FromBudgetValue: parseFloat(objRowData[3].Value),
                ToBudgetValue: 0,
                Date: objRowData[0].Value,
                FromQuantity: parseFloat(objRowData[1].Value),
                ToQuantity: 0,
                ReduceQty: -parseFloat(objRowData[2].Value),
                ReduceValue: -parseFloat(objRowData[4].Value),
            }
            arrTBSplitBudgetDetails.push(objTBSplitBudgetDetails);
        }

        var fTotalAddedQty = 0;
        var fTotalAddedValue = 0;
        var grdTBSplitBudget_To_body = $("#grdTBSplitBudget_To_body tr.FRowColor");
        for (var iRow = 0; iRow < grdTBSplitBudget_To_body.length; iRow++) {
            var fAddedQty = parseFloat(FGRIDCONTROL.getCellObject("grdTBSplitBudget_To", (grdTBSplitBudget_To_body[iRow].rowIndex - 2), 3).getCellData("value"));
            fTotalAddedQty += isNaN(fAddedQty) ? 0 : fAddedQty;
            var fAddedValue = parseFloat(FGRIDCONTROL.getCellObject("grdTBSplitBudget_To", (grdTBSplitBudget_To_body[iRow].rowIndex - 2), 5).getCellData("value"));
            fTotalAddedValue += isNaN(fAddedValue) ? 0 : fAddedValue;

            var objRowData = FGRIDCONTROL.getRowValue("grdTBSplitBudget_To", (grdTBSplitBudget_To_body[iRow].rowIndex - 2));
            var objTBSplitBudgetDetails = {
                FromBudgetConfirmId: parseInt(document.getElementById("hdnFromBudgetConfirmId").value),
                ToBudgetConfirmId: parseInt(document.getElementById("hdnToBudgetConfirmId").value),
                FromBudgetValue: 0,
                ToBudgetValue: objRowData[3].Value,
                Date: objRowData[0].Value,
                FromQuantity: 0,
                ToQuantity: objRowData[1].Value,
                AddQty: parseFloat(objRowData[2].Value),
                AddValue: parseFloat(objRowData[4].Value),
            }
            arrTBSplitBudgetDetails.push(objTBSplitBudgetDetails);
        }
        if (fTotalReducedQty > 0) {
            var iFromReduceQuantity = parseFloat(document.getElementById("txtFromReduceQuantity").value);
            if (fTotalAddedQty < fTotalReducedQty) {
                COMMON.prototype.showMessage("Total Add Qty cannot be less than Total Reduce Qty.");
                return false;
            }
            else if (fTotalAddedQty < iFromReduceQuantity || fTotalReducedQty < iFromReduceQuantity) {
                COMMON.prototype.showMessage("Total Add Qty cannot be less than Reduce Qty.");
                return false;
            }
        }
        if (fTotalReducedValue > 0) {
            var iFromReduceValue = parseFloat(document.getElementById("txtFromReduceValue").value);
            if (fTotalAddedValue < fTotalReducedValue) {
                COMMON.prototype.showMessage("Total Add Value cannot be less than Total Reduce Value.");
                return false;
            }
            else if (fTotalAddedValue < iFromReduceValue || fTotalReducedValue < iFromReduceValue) {
                COMMON.prototype.showMessage("Total Add Value cannot be less than Total Reduce Value.");
                return false;
            }
        }

        if (fTotalReducedQty == 0 && fTotalReducedValue == 0) {
            COMMON.prototype.showMessage("Split the Budget.");
            return false;
        }
        else {
            var objScreenData = TRANSFERBUDGET.getScreenData(bSplit);
            if (arrScreenData.length > 0) {
                arrScreenData.push(objScreenData);
                TRANSFERBUDGET.insertRow("", objScreenData, iEditedRow);
                TRANSFERBUDGET.ClearToFields();

            }
            else {
                arrScreenData.push(objScreenData);
                TRANSFERBUDGET.insertRow("First", objScreenData, iEditedRow);
                TRANSFERBUDGET.ClearToFields();
            }

            var TBSplitBudget = {
                iFromSplitType: parseInt(document.getElementById("hdnFromSplitType").value),
                iToSplitType: parseInt(document.getElementById("hdnToSplitType").value),
                iFromSpillOver: parseInt(document.getElementById("hdnFromSpillOver").value),
                iToSpillOver: parseInt(document.getElementById("hdnToSpillOver").value),
                iFromBudgetConfirmId: parseInt(document.getElementById("hdnFromBudgetConfirmId").value),
                iToBudgetConfirmId: parseInt(document.getElementById("hdnToBudgetConfirmId").value),
                iFromAccount: parseInt(OPTIONCONTROL.getControlValue("optFromAccount")),
                sFromAccount: OPTIONCONTROL.getControlText("optFromAccount"),
                iToAccount: parseInt(OPTIONCONTROL.getControlValue("optToAccount")),
                sToAccount: OPTIONCONTROL.getControlText("optToAccount"),
                iFromDate: DATEPICKER.getDate("dpValidFromDate"),
                sFromDate: DATEPICKER.getText("dpValidFromDate"),
                iToDate: DATEPICKER.getDate("dpValidToDate"),
                sToDate: DATEPICKER.getText("dpValidToDate"),
                iFromQuantity: document.getElementById("txtFromBalanceQuantity").value,
                iToQuantity: document.getElementById("txtToBalanceQuantity").value,
                iFromValue: document.getElementById("txtFromBalanceBudget").value,
                iToValue: document.getElementById("txtToBalanceBudget").value,
                lstTBSplitBudgetDetails: arrTBSplitBudgetDetails
            }

            var iRow = $("#grdTransferBudget_body")[0].children.length;
            TRANSFERBUDGET.setSplittedBudget(TBSplitBudget, iRow);

            TRANSFERBUDGET.resizeGridColumnsWidth("grdTransferBudget");
            $("#splitBudgetModal").modal("hide");
            $("#btnTBSplitBugdet").css("pointer-events", "none");
            iEditedRow = 0;
        }
    },

    setSplittedBudget: function (lstSplittedBuget, iRowIndex) {
        if (document.getElementById('grdTransferBudget') != null && document.getElementById('grdTransferBudget') != undefined) {
            var cellobj = FGRIDCONTROL.getCellObject("grdTransferBudget", iRowIndex, 1);
            cellobj.setCellData("splittedData", JSON.stringify(lstSplittedBuget));
        }
    },

    getSplittedBudget: function (iRowIndex) {
        debugger;
        var cellobj = FGRIDCONTROL.getCellObject("grdTransferBudget", iRowIndex, 1);
        var lstSplittedBuget = cellobj.getCellData("splittedData");
        if (lstSplittedBuget != null && lstSplittedBuget != undefined && lstSplittedBuget.trim() != "") {
            return JSON.parse(lstSplittedBuget);
        }
        else {
            return null;
        }
    },
}
;
var vouchertype;
var resourcemessages;
var lstHeaderGroups;
var strCompName;
var ScreenId;
var bIsVendor;
var objPortalAdminDetails;
var objCustomerVendor;
var ResendEmail;


var CUSTOMERTYPEDETAILS =
    {
        setHeight: function () {
            //debugger
            var CustomerDetailsGrid_body = document.getElementById("CustomerDetailsGrid_body");
            if (FCommon.UI.isValidObject(CustomerDetailsGrid_body) == true) {
                CustomerDetailsGrid_body.style.height = GLOBAL.getPageHeight() - (CustomerDetailsGrid_body.getBoundingClientRect().top) + 35 + "px";
            }

            var VendorDetailsGrid_body = document.getElementById("VendorDetailsGrid_body");
            if (FCommon.UI.isValidObject(VendorDetailsGrid_body) == true) {
                VendorDetailsGrid_body.style.height = GLOBAL.getPageHeight() - (VendorDetailsGrid_body.getBoundingClientRect().top) + 35 + "px";
            }
            var StorerDetailsGrid_body = document.getElementById("StorerDetailsGrid_body");
            if (FCommon.UI.isValidObject(StorerDetailsGrid_body) == true) {
                StorerDetailsGrid_body.style.height = GLOBAL.getPageHeight() - (StorerDetailsGrid_body.getBoundingClientRect().top) - 300 + "px";
            }
        },

        EmailClick: function (ele) {
            debugger
            var bSelect = null;
            var strGrid = "StorerDetailsGrid";
            var iAccountType = 0;
            if (bIsVendor == 1) {
                strGrid = "VendorDetailsGrid";
                iAccountType = 6;
            }
            if (bIsVendor == 0) {
                strGrid = "CustomerDetailsGrid";
                iAccountType = 5;
            }

            var rowData = FGRIDCONTROL.getRowValue(strGrid, ele);
            var emailaddress = rowData[5].Value.trim();
            var customerid = parseInt(rowData[4].Value.trim());
            var cusomername = rowData[1].Text.trim();
            var customercode = rowData[2].Text.trim();

            if (bIsVendor == 1)
                bSelect = $("#" + strGrid).find('#chkVendorColumn_' + (ele)).prop("checked");
            else if (bIsVendor == 0)
                bSelect = $("#" + strGrid).find('#chkCustomerColumn_' + (ele)).prop("checked");
            else
                bSelect = $("#" + strGrid).find('#chkStorerColumn_' + (ele)).prop("checked");
            var IsPwd = rowData[1].Value;
            
            var objdata = {
                CustomerId: parseInt(customerid),
                CustomerName: cusomername,
                Email: emailaddress,
                IsPasswordGenerated: IsPwd,
                Select: bSelect,
                AccountType: iAccountType,
                CustomerCode: customercode,
                CompanyName: strCompName
            }
            var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("SendEMailToCustomer", "CreateCompany", "Company"),
                       true,
                       { objCustomer: objdata},
                       "json", true, "CUSTOMERTYPEDETAILS.SendEmailSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },
        LoadCustomerDataonLeave: function () {
            var iCustomerId = FConvert.toInt(OPTIONCONTROL.getControlValue("optctrlCustomer"));
            var iVendorId = FConvert.toInt(OPTIONCONTROL.getControlValue("optctrlVendor"));
            // var text = OPTIONCONTROL.getControlText("DepositingBank");
            result = NETWORK.executeServerMethod(
                          GLOBAL.getContextPath("LoadCustomerTypeDetails", "CreateCompany", "Company"),
                             true,
                              { iCustomerId: iCustomerId, iVendorId: iVendorId, isVendor: 0 },
                              "json",
                              true,
                              "CUSTOMERTYPEDETAILS.CustomerTypeDetails_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },
        LoadVendorDataonLeave: function () {
            var iCustomerId = FConvert.toInt(OPTIONCONTROL.getControlValue("optctrlCustomer"));
            var iVendorId = FConvert.toInt(OPTIONCONTROL.getControlValue("optctrlVendor"));
            // var text = OPTIONCONTROL.getControlText("DepositingBank");
            result = NETWORK.executeServerMethod(
                          GLOBAL.getContextPath("LoadCustomerTypeDetails", "CreateCompany", "Company"),
                             true,
                              { iCustomerId: iCustomerId, iVendorId: iVendorId, isVendor: 1 },
                              "json",
                              true,
                              "CUSTOMERTYPEDETAILS.CustomerTypeDetails_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },
        LoadStorerDataonLeave:function()
        {
            var iStorerId = FConvert.toInt(OPTIONCONTROL.getControlValue("optctrlStorer"));
            if (isNaN(iStorerId))
                iStorerId = 0;
            result = NETWORK.executeServerMethod(
                          GLOBAL.getContextPath("LoadStorerDetails", "CreateCompany", "Company"),
                             true,
                              { iStorerId: iStorerId },
                              "json",
                              true,
                              "CUSTOMERTYPEDETAILS.CustomerTypeDetails_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },
        CustomerTypeDetails_Success: function (flag, data) {
            if (flag == true) {
                if (data.isVendor == true)
                    CUSTOMERTYPEDETAILS.GridBinding(data.lstData, 1);
                else if(data.isVendor==undefined||data.isVendor==null)
                {
                    CUSTOMERTYPEDETAILS.GridBinding(data);
                }
                else CUSTOMERTYPEDETAILS.GridBinding(data.lstData, 0);
            }
        },
        SaveClick: function () {
           debugger
            var arrMasterIdNameCode = new Array();
            var sStorerPortalLink = '';
            
            $(".chkVendbody").each(function (index) {
                //debugger;
                var strGrid = "VendorDetailsGrid";
                var gridRowData = FGRIDCONTROL.getRowValue(strGrid, (index + 1));
                if (gridRowData.length > 0) {
                    var emailaddress = gridRowData[5].Value.trim();
                    var customerid = parseInt(gridRowData[4].Value.trim());
                    var customername = gridRowData[1].Text.trim();
                    var customercode = gridRowData[2].Text.trim();
                    var bSelect = $("#VendorDetailsGrid").find('#chkVendorColumn_' + (index + 1)).prop("checked");
                    var IsPwd = gridRowData[1].Value;
                    var data = {
                        Select: bSelect,
                        CustomerId: parseInt(customerid),
                        CustomerName: customername,
                        Email: emailaddress,
                        AccountType: 6,
                        CustomerCode: customercode,
                        CompanyName: strCompName
                    }
                    if (customerid > 0)
                        arrMasterIdNameCode.push(data);
                }
            });

            $(".chkCustbody").each(function (index) {
                //debugger;
                var strGrid = "CustomerDetailsGrid";
                var gridRowData = FGRIDCONTROL.getRowValue(strGrid, (index + 1));
                if (gridRowData.length > 0) {
                    var emailaddress = gridRowData[5].Value.trim();
                    var customerid = parseInt(gridRowData[4].Value.trim());
                    var customername = gridRowData[1].Text.trim();
                    var customercode = gridRowData[2].Text.trim();
                    var bSelect = $("#CustomerDetailsGrid").find('#chkCustomerColumn_' + (index + 1)).prop("checked");
                    var IsPwd = gridRowData[1].Value;
                    var data = {
                        Select: bSelect,
                        CustomerId: parseInt(customerid),
                        CustomerName: customername,
                        Email: emailaddress,
                        AccountType: 5,
                        CustomerCode: customercode,
                        CompanyName: strCompName
                    }
                    if (customerid > 0)
                        arrMasterIdNameCode.push(data);
                }
            });

            $(".chkStorebody").each(function (icount) {
                var sGridId = "StorerDetailsGrid";
                var gRowData = FGRIDCONTROL.getRowValue(sGridId, (icount+1))
                if (gRowData.length > 0) {
                    var emailaddress = gRowData[5].Value.trim();
                    var storerid = parseInt(gRowData[4].Value.trim());
                    var storername = gRowData[1].Text.trim();
                    var storercode = gRowData[2].Text.trim();
                    var bSelect = $("#" + sGridId).find('#chkStorerColumn_' + (icount + 1)).prop("checked");
                    var IsPwd = gRowData[1].Value;
                    var data = {
                        Select: bSelect,
                        CustomerId: parseInt(storerid),
                        CustomerName: storername,
                        Email: emailaddress,
                        AccountType: 0,
                        CustomerCode: storercode,
                        CompanyName: strCompName
                    }
                    if (storerid > 0)
                        arrMasterIdNameCode.push(data);
                }

            });
            var bUpdateSOStatus = $('#chkUpdateSOStatus').is(':checked');
            var iSOFieldId = $('#ddlSOFields').val();
            var iStatus1FieldId = $('#ddlStatus1Fields').val();
            var iStatus2FieldId = $('#ddlStatus2Fields').val();
            var iShipToFieldId = $('#ddlShipToFields').val();
            sStorerPortalLink = $('#StorerPortalLink').val();

            if (bUpdateSOStatus == true && iSOFieldId == 0)
            {
                COMMON.prototype.showMessage("Select SO Field Name");
                return false;
            }

            if (iSOFieldId != "0") {
                if (iSOFieldId == iStatus1FieldId || iSOFieldId == iStatus2FieldId || iSOFieldId == iShipToFieldId) {
                    COMMON.prototype.showMessage("FieldName is same for more than one Field");
                    return false;
                }
            }

            if (iStatus1FieldId != "0") {
                if (iStatus1FieldId == iSOFieldId || iStatus1FieldId == iStatus2FieldId || iStatus1FieldId == iShipToFieldId) {
                    COMMON.prototype.showMessage("FieldName is same for more than one Field");
                    return false;
                }
            }

            if (iStatus2FieldId != "0") {
                if (iStatus2FieldId == iSOFieldId || iStatus2FieldId == iStatus1FieldId || iStatus2FieldId == iShipToFieldId) {
                    COMMON.prototype.showMessage("FieldName is same for more than one Field");
                    return false;
                }
            }

            if (iShipToFieldId != "0") {
                if (iShipToFieldId == iSOFieldId || iShipToFieldId == iStatus1FieldId || iShipToFieldId == iStatus2FieldId) {
                    COMMON.prototype.showMessage("FieldName is same for more than one Field");
                    return false;
                }
            }

           
                var objPortalAdminDetails =
                    {
                        CustomerDetails: arrMasterIdNameCode,
                        UpdateSOStatus: bUpdateSOStatus,
                        SONOFieldId: iSOFieldId,
                        Status1FieldID: iStatus1FieldId,
                        Status2FieldID: iStatus2FieldId,
                        ShipToFieldID: iShipToFieldId,
                        StorerPortalLink: sStorerPortalLink
                    }           
            var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveCustomerDetails", "CreateCompany", "Company"),
                    true,
                    { objPortalAdminDetails: objPortalAdminDetails },
                    "json", false, "CUSTOMERTYPEDETAILS.SaveCustomerDetailsSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },
        SaveCustomerDetailsSuccess: function (flag, data) {
            //debugger
            if (flag && data == "")
                COMMON.prototype.showMessage(resourcemessages.msgRecSave_LOC, resourcemessages);
                //COMMON.prototype.showMessage("Record Saved Successfully");
            else COMMON.prototype.showMessage(data);
            result = NETWORK.executeServerMethod(
                         GLOBAL.getContextPath("CustomerTypeDetails", "CreateCompany", "Company"),
                            true,
                             {},
                             "html",
                             false,
                             "CUSTOMERTYPEDETAILS.CustomerTypeDetailsSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },
        SendEmailSuccess: function (flag, data) {
            if (flag == true && data.strErrorMsg == "")
                COMMON.prototype.showMessage(resourcemessages.msgMailSent, resourcemessages);

            else COMMON.prototype.showMessage(data.strErrorMsg);
        },

        CustomerTypeDetailsSuccess: function (flag, data) {
            //debugger;
            if (flag) {
                $("#page_Content").html("");
                $("#page_Content").html(data);
            }
        },

        ToggleTab: function (ele) {
            debugger;
            $('.nav-tabs li .active').removeClass('active');
            if (ele.title == "Customer") {              
                $(ele).addClass('active');
                document.getElementById("iSettingsTab").style.display = "none";
                document.getElementById("iVendorTab").style.display = "none";
                document.getElementById("iCustomerTab").style.display = "block";
                document.getElementById('iStorerTab').style.display = "none";               
                bIsVendor = 0;
                CUSTOMERTYPEDETAILS.setHeight();
            }
            else if (ele.title == "Vendor") {              
                $(ele).addClass('active');
                document.getElementById("iCustomerTab").style.display = "none";
                document.getElementById("iSettingsTab").style.display = "none";
                document.getElementById("iVendorTab").style.display = "block";
                document.getElementById('iStorerTab').style.display = "none";              
                bIsVendor = 1;
                CUSTOMERTYPEDETAILS.setHeight();
            }

            else if (ele.title == "Settings") {              
                $(ele).addClass('active');
                document.getElementById("iCustomerTab").style.display = "none";
                document.getElementById("iVendorTab").style.display = "none";
                document.getElementById("iSettingsTab").style.display = "block";
                document.getElementById('iStorerTab').style.display = "none";               
            }

            else if (ele.title == "Storer") {               
                $(ele).addClass('active');
                document.getElementById("iCustomerTab").style.display = "none";
                document.getElementById("iVendorTab").style.display = "none";
                document.getElementById("iSettingsTab").style.display = "none";              
                document.getElementById('iStorerTab').style.display = "block";             
                bIsVendor = undefined;
            }
            event.preventDefault();
        },

        GridBinding: function (data, Vendor) {
            debugger
            var count = 0;
            var strGrid ;
            if (Vendor == 1) {
                strGrid = "VendorDetailsGrid";
                $('#chkVendHeadColumn').prop('checked', false)

            }
            else if(Vendor==0){
                strGrid="CustomerDetailsGrid";
                $('#chkCustHeadColumn').prop('checked', false);
            }
            else
            {
                $('#chkStoreHeadColumn').prop('checked', false);
                strGrid = "StorerDetailsGrid";
            }

            FGRIDCONTROL.clearData(strGrid, true);
            
            var totalrows = FGRIDCONTROL.getTotalRows(strGrid);
            FGRIDCONTROL.deleteRows(strGrid,1,totalrows);
            if (data.length == 0)
            {
                //for (var row = 1; row <= totalrows; row++) {
                //    $('#' + strGrid + '_col_' + row + '-1').html('');
                //}
                FGRIDCONTROL.insertRows(strGrid,1,1)
            }
            else
            {
                FGRIDCONTROL.insertRows(strGrid, 1,data.length)
            }
           
            //for (var row = 1; row <= data.length; row++) {
            //    $('#' + strGrid + '_col_' + row + '-1').html('');
            //}
            var iRowCounter = 0;
            var iColCounter = 0;
            var cellobj = null;
            var objData = null;
            var iValue = 0;
            var tag = null;

            //if(data.length<15)
            //{
            //    FGRIDCONTROL.insertRows(strGrid, 1, 15);
            //}
            //else
            //{
            //    FGRIDCONTROL.insertRows(strGrid, 1, data.length);
            //}



            if (data != null) {
                for (var i = 0; i < data.length; i++) {

                    if (data[i] != null) {
                        for (var j = 0; j < 7; j++) {

                            cellobj = FGRIDCONTROL.getCellObject(strGrid, i + 1, j + 1);
                            if (cellobj != undefined) {
                                if (j == 0) {
                                    var ColumnId = cellobj.cell;
                                    if (Vendor == 0) {
                                        $(ColumnId).html('<input type="checkbox" id="chkCustomerColumn_' + (i + 1) + '" class="chkCustbody" style="margin:0px 10px 0px 14px!important;position:relative!important" />');
                                        if (data[i].Select == true) {
                                            count++;
                                            $('#chkCustomerColumn_' + (i + 1)).prop("checked", 'true');
                                        }
                                    }
                                    else if(Vendor==1){
                                        $( ColumnId).html('<input type="checkbox" id="chkVendorColumn_' + (i + 1) + '" class="chkVendbody" style="margin:0px 10px 0px 14px!important;position:relative!important" />');
                                        if (data[i].Select == true) {
                                            count++;
                                            $('#chkVendorColumn_' + (i + 1)).prop("checked", 'true');
                                        }
                                    }
                                    else
                                    {
                                        $( ColumnId).html('<input type="checkbox" id="chkStorerColumn_' + (i + 1) + '" class="chkStorebody" style="margin:0px 10px 0px 14px!important;position:relative!important" />');
                                        if (data[i].Select == true) {
                                            count++;
                                            $('#chkStorerColumn_' + (i + 1)).prop("checked", 'true');
                                        }
                                    }
                                    //  $(this).children('td').eq(0).css('background-color', 'green');

                                }
                                else if (j == 1) {
                                    cellobj.setCellText(data[i].CustomerName);
                                    cellobj.setCellData("value", data[i].IsPasswordgenerated);
                                }

                                else if (j == 2) {
                                    cellobj.setCellText(data[i].CustomerCode);
                                    cellobj.setCellData("value", data[i].CustomerCode);
                                }
                                else if (j == 3 && data[i].IsPasswordgenerated == true) {
                                    ////debugger
                                    var ColumnId = cellobj.cell;
                                    $(ColumnId).html('<input type="button" onclick="CUSTOMERTYPEDETAILS.EmailClick(' + (i + 1) + ');" id="btnEmail_' + (i + 1) + '" value="' + ResendEmail + '" class="FButton-Primary" style="margin:0px 10px 0px 20px!important;" />');

                                }
                                else if (j == 4) {

                                    cellobj.setCellText(data[i].CustomerId);
                                    cellobj.setCellData("value", data[i].CustomerId);
                                }
                                else if (j == 5) {

                                    cellobj.setCellText(data[i].Email);
                                    cellobj.setCellData("value", data[i].Email);

                                }
                                else if (j == 6) {

                                    cellobj.setCellText(data[i].Password);
                                    cellobj.setCellData("value", data[i].Password);
                                }

                            }

                        }
                    }
                }

                if (count > 0 && $('.chkCustbody').length == count)
                    $('#chkCustHeadColumn').prop("checked", true);
                else if (count > 0 && $('.chkVendbody').length == count && Vendor == 1)
                    $('#chkVendHeadColumn').prop("checked", true);
                else if (count > 0 && $('.chkStorebody').length == count )
                    $('#chkStoreHeadColumn').prop("checked", true);
            }
        },

        EnableSOFields: function()
        {
            debugger;
            var bUpdateStatus =  $('#chkUpdateSOStatus').is(':checked')
            if(bUpdateStatus == true)
            {
                $('#ddlSOFields').prop('disabled', false);
            }
            else
            {              
                $('#ddlSOFields').prop('disabled', true);              
            }
            $('#ddlStatus1Fields,#ddlStatus2Fields,#ddlShipToFields').empty();
            var tableData = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetStatusFields", "CreateCompany", "Company"), true, { bUpdateSO: bUpdateStatus }, "JSON", false, "", "GLOBAL.LoadingStart");
            if (tableData.data != null) {
                for (var i = 0; i < tableData.data.Status1Fields.length; i++) {
                    $('#ddlStatus1Fields').append("<option value=" + tableData.data.Status1Fields[i].ID + ">" + tableData.data.Status1Fields[i].Name + "</option>")
                    $('#ddlShipToFields').append("<option value=" + tableData.data.Status1Fields[i].ID + ">" + tableData.data.Status1Fields[i].Name + "</option>")
                }

                for (var i = 0; i < tableData.data.Status2Fields.length; i++) {
                    $('#ddlStatus2Fields').append("<option value=" + tableData.data.Status2Fields[i].ID + ">" + tableData.data.Status2Fields[i].Name + "</option>")
                }
            }
            GLOBAL.LoadingEnd();
        },

        GotoCustomize: function()
        {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetPOCustomizationDetails", "CreateCompany", "Company"), true, null, "HTML", true, "CUSTOMERTYPEDETAILS.LoadCustomizeData", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },

        LoadCustomizeData: function(flag, data)
        {
            if (data,flag == true) {
                //debugger;
                $("#popUpdata").html(data);
                $('#myModal').modal('show');

                for (var i = 1; i <= 9; i++) {
                    var cellobj = FGRIDCONTROL.getCellObject('GridCustomization', i, 1);
                    cellobj.cell.children[0].disabled = "true";
                }
            }
        },

        SaveCustomizedPopUpModelNew: function()
        {           
            var Exist = [];
            var sGridCustId = "GridCustomization";
            var iTotalCustRows = FGRIDCONTROL.getTotalRows(sGridCustId);
            FGRIDCONTROL.update(sGridCustId);
            for (var iRowCounter = 1; iRowCounter <= iTotalCustRows; iRowCounter++) {
                var gridRowData = FGRIDCONTROL.getRowValue(sGridCustId, iRowCounter);
                if (gridRowData[0].Value == true) {
                    var data = {
                        Exist: gridRowData[0].Value,
                        ColumnIndex: iRowCounter,
                        FieldId: parseInt(gridRowData[1].Value),
                        FieldName: gridRowData[1].Text,
                        Width: parseInt(gridRowData[3].Value),
                        Caption: gridRowData[2].Text
                    }
                    Exist.push(data);
                }
            }

            NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveCustomizePopUp", "CreateCompany", "Company"), true, { arrFieldData: Exist }, "json", true, "CUSTOMERTYPEDETAILS.savePOCustomization", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        },

        savePOCustomization: function (flag, data)
        {           
            if (flag == true && data != null) {
                debugger
                if (data != "") {
                    COMMON.prototype.showMessage(data);
                }
                else {
                    COMMON.prototype.showMessage("PO Customization Details Saved Successfully");
                    $('#myModal').modal('hide');
                }
            }
            else {
                COMMON.prototype.showMessage("Error in customization saving ");
            }
        }
    }

$(window).resize(function () {
    //debugger
    //CALLING THE METHOD OF SETTING HEIGHT OF PAGE CONTAINERS DYNAMICALLY ON DIFFRENT SCREENS
    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("", "CUSTOMERTYPEDETAILS.setHeight");
});;
var paymentgatewaymessages;
var imenuid;
//debugger
////debugger
//var Grid_PaymentGatewayIntegrationBody = FGRIDCONTROL.getTotalRows("Grid_PaymentGatewayIntegration");
//for (var iRow = 1; iRow <= Grid_PaymentGatewayIntegrationBody; iRow++) {//Grid_PaymentGatewayIntegrationBody.rows.length
//    //////debugger
//    cellobj = FGRIDCONTROL.getCellObject("Grid_PaymentGatewayIntegration", iRow, 1);
//    var iColumnId = cellobj.cell.id;
//    $("#" + iColumnId).html('<i class="icon-edit icon-font9 editField" title="@Focus.Resources.Edit" data-fieldid="' + iRow + '" style="padding-left:8px;cursor:pointer;" onclick="PAYMENTGATEWAY.setNewPage(this, true, ' + "'edit'" + ');"></i>');
//}
var bfromfocus;
var PAYMENTGATEWAY = {
  
    CancelClick:function(){
        debugger
        if (bfromfocus) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("FocusIntegration", "FocusIntegration", "Settings"), true, { imenuid:2101 },
                                      "html", true, "PAYMENTGATEWAY.CancelClick_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else
            GLOBAL.gotoHomePage();
    },

    CancelClick_Success: function (flag, data) {
        debugger
        if (flag == true) {
            $('#page_Content').html('');
            $('#page_Content').html(data);
        }

        //if(flag){
        //    $('#FocusIntegration').html('');
        //    $('#FocusIntegration').html(data);
        //}

    },
    GetMandatoryFieldsofBankAcc : function(id, data)
    {
        var objData = OPTIONCONTROL.convertRawDataIntoObject(id, data);
        $('#txtIfcode').val(objData.sIFSCCode);
        $('#txtBankAccountName').val(objData.sBankAccountName);
    },

    ValidateNumbers: function (ele, evt) {
        ////debugger
        if (ele.id == "txtPhone") {
            var charcode = evt.which || evt.keyCode;
            var position = ele.selectionStart;
            if ((charcode >= 48 && charcode <= 57) || charcode == 8 || charcode == 32 || (charcode >= 35 && charcode <= 40) || (charcode == 43 && position == 0)) {
                return true;
            }
            else return false;
        }
        else if (ele.id == "txtMerchantId") {
            var charcode = evt.which || evt.keyCode;
            if (charcode >= 48 && charcode <= 57)
                return true;
            else return false;
        }
    },

    setNewPage: function (cellobj, currentPage, EditNew) {
    //    debugger
        var obj = {}
        obj.currentRow = 1;//cellobj.dataset.fieldid;
        obj.Edit = EditNew;
        if (EditNew == "edit") {
            var objRowData = FGRIDCONTROL.getRowValue('Grid_PaymentGatewayIntegration', cellobj.parentElement.parentElement.rowIndex - 2);// EditNew.currentRow
            obj.gridRowData = objRowData;
            var MerchantRegistrationDtls = {
                DisplayName: objRowData[2].Value,
                Email: objRowData[3].Value,
                AccountId: objRowData[19].Value,
                IFSCCode: objRowData[13].Value,
                MobileNo: objRowData[8].Value,
                PANNo: objRowData[14].Value,
                BusinessCategory: objRowData[9].Value,
                BusinessAddress: objRowData[15].Value,
                BusinessName: objRowData[10].Value,
                BusinessRegType: objRowData[11].Value,
                PinCode: objRowData[16].Value,
                BankHolderName: objRowData[12].Value,
                WebsiteURL: objRowData[17].Value,
                MerchantId: objRowData[6].Value,
            }
        }


        if (currentPage == true) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("MerchantRegistration", "PaymentGateway", "CoreTransactions"), true, { objMerchantRegistrationDtls: MerchantRegistrationDtls, EditNew: EditNew }, "HTML", true, "GLOBAL.LoadScreen", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", obj);
        }
        else {
            if (imenuid != null && imenuid != undefined)
            NETWORK.executeServerMethod(GLOBAL.getContextPath("PaymentGatewayIntegration", "PaymentGateway", "CoreTransactions"), true, { iMenuId: imenuid }, "HTML", true, "PAYMENTGATEWAY.neWPaymentGatewayIntegrationSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", "");
        }
    },

    SaveClickonMainPage: function () {
        //debugger
        var active = 0;
        var merchantId = 0;
        for (var row = 1; row <= FGRIDCONTROL.getTotalRows("Grid_PaymentGatewayIntegration") ; row++) {
            var checkboxcellobj = FGRIDCONTROL.getCellObject("Grid_PaymentGatewayIntegration", row, 8);
            if (checkboxcellobj.getCheckboxState()) {
                active++;
                var objRowData = FGRIDCONTROL.getRowValue("Grid_PaymentGatewayIntegration", row);
                merchantId = parseInt(objRowData[6].Value);
                var iId = objRowData[18].Value;
            }

        }

        if (active == 0)
            COMMON.prototype.showMessage(paymentgatewaymessages.msgSelectOnerow_PDC, paymentgatewaymessages);
        else if (active > 1)
            COMMON.prototype.showMessage(paymentgatewaymessages.msgSelectOneRowToActivate, paymentgatewaymessages);
        else {
            if ((objRowData[1].Text).trim().length != 0 && merchantId > 0) {
                NETWORK.executeServerMethod(GLOBAL.getContextPath("ActivateRegistration", "PaymentGateway", "CoreTransactions"), true, { iId: iId },
                                        "json", true, "PAYMENTGATEWAY.ActivateRegistrationSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

            }

            else if (merchantId == 0) {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgMerchantNotRegstd, paymentgatewaymessages);
            }
            else {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgRowBodyData, paymentgatewaymessages);
                // COMMON.prototype.showMessage("No Data Available for Selected Row. Select Valid Row");
            }
        }

    },

    ActivateRegistrationSucess: function (bFlag, data) {
        ////debugger
        if (bFlag == true && data == 1) {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgMerchantActivated, paymentgatewaymessages);
        }
    },


    neWPaymentGatewayIntegrationSuccess: function (bFlag, data, EditNew) {
        //////debugger
        if (bFlag) {
            $('#page_Content').html("");
            $('#page_Content').html(data);
        }
    },

    /*Merchant Registration*/
    MerchantRegistration: function () {
        //debugger;
        var reg = /^([A-Za-z0-9_\-\.]+)\@([A-Za-z0-9_\-\.]+)\.([A-Za-z]{2,4})$/;
        var email = $("#txtEmail").val();
        var objMerchantRegister = [];
        var bank_details = [];
        var business_address = [];
        var business_details = [];
        var objMerchant = [];
        var objUpdateMerchant = [];
        var merchantAccount = OPTIONCONTROL.getControlValue("OptCtrl_BankAccount");

        if ($("#txtName").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterMerchantName, paymentgatewaymessages);
            return false;
        }
        else if (merchantAccount == 0 || merchantAccount == null) {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgBRSNoBankAcc, paymentgatewaymessages);
            return false;
        }
        else if ($("#txtEmail").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterEmailId, paymentgatewaymessages);
            return false;
        }

        else if (reg.test(email) == false) {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEmailIdisnotinCorrectFormate, paymentgatewaymessages);
            return false;
        }
        else if ($("#txtIfcode").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterIFSCCode, paymentgatewaymessages);
            return false;
        }
        else if ($("#txtPhone").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.txtTelNo, paymentgatewaymessages);
            return false;
        }
        else if ($("#txtPan").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterPANNo, paymentgatewaymessages);
            return false;
        }
        else if ($("#businessCategeory").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgSelBusinessCategory, paymentgatewaymessages);
            return false;
        }
        else if ($("#businessAddress").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterBusinessAddr, paymentgatewaymessages);
            return false;
        }
        else if ($("#businessName").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterBusinessName, paymentgatewaymessages);
            return false;
        }
        else if ($("#businessRegistrationType").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgSelBusinessRegistrationType, paymentgatewaymessages);
            return false;
        }
        else if ($("#txtPinCode").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterPinCode, paymentgatewaymessages);
            return false;
        }
        else if ($("#txtBankAccountName").val().trim() == "") {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterAccountHolderName, paymentgatewaymessages);
            return false;
        }
        
        else if ($("#termsCondition").is(":checked") == false) {
            COMMON.prototype.showMessage(paymentgatewaymessages.msgCheckTermsandConditions, paymentgatewaymessages);
            return false;
        }

        var ele = document.getElementById("OptCtrl_BankAccount");
        var obj = OPTIONCONTROL.getControlData(ele);
        var objMerchantAccName = OPTIONCONTROL.convertRawDataIntoObject(ele, obj);
        var merchantAccName = objMerchantAccName.sBankAccountNumber;

        bank_details = {
            account_no: merchantAccName,
            ifsc_code: $("#txtIfcode").val(),
            account_holder_name: $("#txtBankAccountName").val(),
        }
        business_address = {
            addr_line1: $("#businessAddress").val(),
            pin: $("#txtPinCode").val()
        }
        business_details = {
            business_category: $("#businessCategeory option:selected").text().trim(),
            registered_name: $("#txtName").val(),
            pan: $("#txtPan").val(),
            business_entity_type: $("#businessRegistrationType option:selected").text().trim(),
            business_url: $("#webUrl").val(),
        }
        objMerchant = {
            bank_details: bank_details,
            business_address: business_address,
            business_details: business_details,
            email: $("#txtEmail").val(),
            display_name: $("#txtName").val(),
            product: "PayUmoney",
            mobile: $("#txtPhone").val()
        }

        objUpdateMerchant = {
            Id: 0,
            DisplayName: $("#txtName").val(),
            Email: $("#txtEmail").val(),
            AccountId: merchantAccount,
            IFSCCode: $("#txtIfcode").val(),
            MobileNo: $("#txtPhone").val(),
            PANNo: $("#txtPan").val(),
            BusinessCategory: $("#businessCategeory option:selected").text().trim(),
            BusinessAddress: $("#businessAddress").val(),
            BusinessName: $("#businessName").val().trim(),
            BusinessRegType: $("#businessRegistrationType option:selected").text().trim(),
            PinCode: $("#txtPinCode").val(),
            BankHolderName: $("#txtBankAccountName").val(),
            WebsiteURL: $("#webUrl").val(),
        }
        //////debugger;
        NETWORK.executeServerMethod(GLOBAL.getContextPath("Registration", "PaymentGateway", "CoreTransactions"), true, { objMerchant: objMerchant },
                                        "json", true, "PAYMENTGATEWAY.MerchantRegistrationSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", objUpdateMerchant);
    },
    MerchantRegistrationSucess: function (bFlag, data, objUpdateMerchant) {
        //debugger
        var objResultData = JSON.parse(data);
        if (objResultData.merchant != undefined && objResultData.merchant != "") {
            if (objResultData.merchant.mid != "") {
                /*Update Method*/
                objUpdateMerchant.MerchantId = objResultData.merchant.mid;
                objUpdateMerchant.Status = 1;
                NETWORK.executeServerMethod(GLOBAL.getContextPath("UpdateMerchantRegistration", "PaymentGateway", "CoreTransactions"), true, { objUpdateMerchant: objUpdateMerchant },
                                        "json", false, "PAYMENTGATEWAY.UpdateRegistrationDtls_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

            }
        }
        else {
            ////debugger;
            if (objResultData.errors != undefined) {
                if (objResultData.errors.error != undefined) {
                    COMMON.prototype.showMessage(objResultData.errors.error[0].toString());
                }
                else {
                    for (var key in objResultData.errors) {
                        if ((objResultData.errors).hasOwnProperty(key)) {
                            COMMON.prototype.showMessage(key.toUpperCase() + "  Is Invalid");
                        }
                    }
                }
            }
            else  {
                COMMON.prototype.showMessage(objResultData.error);
            }
        }
    },

    saveMerchantDetails: function (ele) {
        //debugger
        var bStatus = 0;
        if (ele.id == "btnVerifyAccount")
        {
            bStatus = 1;
            var merchantid = 0;
            var productkey = "";
            var productsalt = "";
            if ($("#txtMerchantId").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterMerchantID, paymentgatewaymessages);
                return false;
            }
            if($("#txtProductkey").val().trim() == "")
            {
                COMMON.prototype.showMessage("Enter Product Key");
                return false;
            }

            if ($("#txtProductsalt").val().trim() == "") {
                COMMON.prototype.showMessage("Enter Product Salt");
                return false;
            }
            merchantid = $("#txtMerchantId").val();
            productkey = $("#txtProductkey").val();
            productsalt = $("#txtProductsalt").val();

             var MerchantRegistrationDtls =
                 {
                     DisplayName: $("#txtName").val(),
                     IFSCCode: $("#txtIfcode").val(),
                     MobileNo: $("#txtPhone").val(),
                     Email: $("#txtEmail").val(),
                     AccountId: OPTIONCONTROL.getControlValue("OptCtrl_BankAccount"),//merchantAccount,
                     PANNo: $("#txtPan").val(),
                     BusinessCategory: $("#businessCategeory option:selected").text().trim(),
                     BusinessAddress: $("#businessAddress").val(),
                     BusinessName: $("#businessName").val(),
                     BusinessRegType: $("#businessRegistrationType option:selected").text().trim(),
                     PinCode: $("#txtPinCode").val(),
                     BankHolderName: $("#txtBankAccountName").val(),
                     WebsiteURL: $("#webUrl").val(),
                     MerchantId: merchantid,
                     Status: bStatus,
                     Active: 0
                 }
             GLOBAL.LoadingStart();
             NETWORK.executeServerMethod(GLOBAL.getContextPath("VerifyMerchantDetails", "PaymentGateway", "CoreTransactions"), true, { objMerchantRegistrationDtls: MerchantRegistrationDtls, ProductKey : productkey, ProductSalt : productsalt },
                                                         "json", false, "PAYMENTGATEWAY.VerifyMerchantDetails_Success", "", "");
        }

        else if($('#saveinverifymerchant').hasClass('clsVerifiedMerchant'))   
        {
            var merchantAccount = OPTIONCONTROL.getControlValue("OptCtrl_BankAccount");
             if (merchantAccount == 0 || merchantAccount == null) {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgBRSNoBankAcc, paymentgatewaymessages);
                return false;
             }
            
             var MerchantRegistrationDtls = {
                 DisplayName: $("#txtName").val(),
                 IFSCCode: $("#txtIfcode").val(),
                 MobileNo: $("#txtPhone").val(),
                 Email: $("#txtEmail").val(),
                 AccountId: merchantAccount,
                 PANNo: $("#txtPan").val(),
                 BusinessCategory: $("#businessCategeory option:selected").text().trim(),
                 BusinessAddress: $("#businessAddress").val(),
                 BusinessName: $("#businessName").val(),
                 BusinessRegType: $("#businessRegistrationType option:selected").text().trim(),
                 PinCode: $("#txtPinCode").val(),
                 BankHolderName: $("#txtBankAccountName").val(),
                 WebsiteURL: $("#webUrl").val(),
                 MerchantId: $("#txtMerchantId").val(),
                 Status: 1,
                 Active: 0
             }

             NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveMerchantRegistrationDtls", "PaymentGateway", "CoreTransactions"), true, { objMerchantRegistrationDtls: MerchantRegistrationDtls },
                                                       "json", false, "PAYMENTGATEWAY.SaveMerchantRegistrationDtls_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else
        {
            var reg = /^([A-Za-z0-9_\-\.]+)\@([A-Za-z0-9_\-\.]+)\.([A-Za-z]{2,4})$/;
            var email = $("#txtEmail").val();

            if ($("#txtName").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterMerchantName, paymentgatewaymessages);
                return false;
            }
            var merchantAccount = OPTIONCONTROL.getControlValue("OptCtrl_BankAccount");
            if (merchantAccount == 0 || merchantAccount == null) {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgBRSNoBankAcc, paymentgatewaymessages);
                return false;
            }
            else if ($("#txtEmail").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterEmailId, paymentgatewaymessages);
                return false;
            }
            else if (reg.test(email) == false) {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEmailIdisnotinCorrectFormate, paymentgatewaymessages);
                return false;
            }
            else if ($("#txtIfcode").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterIFSCCode, paymentgatewaymessages);
                return false;
            }
            else if ($("#txtPhone").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.txtTelNo, paymentgatewaymessages);
                return false;
            }
            else if ($("#txtPan").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterPANNo, paymentgatewaymessages);
                return false;
            }
            else if ($("#businessCategeory").val().trim() == "0") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgSelBusinessCategory, paymentgatewaymessages);
                return false;
            }
            else if ($("#businessAddress").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterBusinessAddr, paymentgatewaymessages);
                return false;
            }
            else if ($("#businessName").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterBusinessName, paymentgatewaymessages);
                return false;
            }
            else if ($("#txtPinCode").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterPinCode, paymentgatewaymessages);
                return false;
            }
            else if ($("#businessRegistrationType").val().trim() == "0") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgSelBusinessRegistrationType, paymentgatewaymessages);
                return false;
            }
          
            else if ($("#txtBankAccountName").val().trim() == "") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgEnterAccountHolderName, paymentgatewaymessages);
                return false;
            }

            var MerchantRegistrationDtls = {
                DisplayName: $("#txtName").val(),
                IFSCCode: $("#txtIfcode").val(),
                MobileNo: $("#txtPhone").val(),
                Email: $("#txtEmail").val(),
                AccountId: merchantAccount,
                PANNo: $("#txtPan").val(),
                BusinessCategory: $("#businessCategeory option:selected").text().trim(),
                BusinessAddress: $("#businessAddress").val(),
                BusinessName: $("#businessName").val(),
                BusinessRegType: $("#businessRegistrationType option:selected").text().trim(),
                PinCode: $("#txtPinCode").val(),
                BankHolderName: $("#txtBankAccountName").val(),
                WebsiteURL: $("#webUrl").val(),
                MerchantId: merchantid,
                Status: bStatus,
                Active: 0
            }

            NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveMerchantRegistrationDtls", "PaymentGateway", "CoreTransactions"), true, { objMerchantRegistrationDtls: MerchantRegistrationDtls },
                                                      "json", false, "PAYMENTGATEWAY.SaveMerchantRegistrationDtls_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },

    UpdateRegistrationDtls_Success: function (bFlag, data) {
        //////debugger
        if (bFlag == true ) {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgSuccessfullyRegistered, paymentgatewaymessages);
                //COMMON.prototype.showMessage("Registered Successfully.");
                $("#btnRegistration").removeClass("disablebutton");
                $("#btnSave").removeClass("disablebutton");
                PAYMENTGATEWAY.setNewPage(this, false);
            }
    },

    SaveMerchantRegistrationDtls_Success: function (bFlag, data) {
        debugger
        if (bFlag == true && data.strErrorMsg=="") {
                COMMON.prototype.showMessage(paymentgatewaymessages.msgMerchantSaved, paymentgatewaymessages);
                $("#btnRegistration").removeClass("disablebutton");
                if ($('#saveinverifymerchant').hasClass('clsVerifiedMerchant'))
                    $('#saveinverifymerchant').removeClass('clsVerifiedMerchant');
                if (data.MerchantId>0)
                PAYMENTGATEWAY.setNewPage(this, false);
        }
        else {
            COMMON.prototype.showMessage(data);
        }
    },

    VerifyMerchantDetails_Success: function (bFlag, data) {
        debugger
        GLOBAL.LoadingEnd();
        if (bFlag == true) {
            if (data.Error == "") {
                COMMON.prototype.showMessage(data.Success);
                $('#saveinverifymerchant').css({ "cursor": "" });
                $('#btnSave').removeClass('disablebutton');
                $('#saveinverifymerchant').addClass('clsVerifiedMerchant');
                PAYMENTGATEWAY.GetMerchantDetailsById();
            }
            else {
                COMMON.prototype.showMessage(data.Error);
            }
        }
        else {
            COMMON.prototype.showMessage(data);
        }
    },

    GetMerchantDetailsById: function () {
        ////debugger
        var MerchantId = $("#txtMerchantId").val();
        if (MerchantId != null && MerchantId != "" && MerchantId > 0) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetMerchantDetailsById", "PaymentGateway", "CoreTransactions"), true, { iMerchantId:  MerchantId},
                                                     "json", true, "PAYMENTGATEWAY.GetMerchantDetailsByIdSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },

    GetMerchantDetailsByIdSuccess: function (flag, data)
    {
        debugger
        var merchantData = null;
        if (flag == true && data.Error == "")
        {
            merchantData = data.objMerchantRegistrationDtls;
            $('#txtName').val(merchantData.DisplayName);
            //$('#txtBankAccountNumber').val(data.sAccountNo);
            $('#txtEmail').val(merchantData.Email);
            $('#txtIfcode').val(merchantData.IFSCCode);
            $('#txtPhone').val(merchantData.MobileNo);
            //$('#txtPan').val(data.PANNo);
            var businscategry = merchantData.BusinessCategory;
            $("#businessCategeory option").each(function () {
                if ($(this).text() == businscategry) {
                    $(this).attr('selected', 'selected');
                }
            });
            $('#businessAddress').val(merchantData.BusinessAddress);
            //$('#businessName').val(data.BusinessName);
            var businsregtype = merchantData.BusinessRegType;
            $("#businessRegistrationType option").each(function () {
                if ($(this).text() == businscategry) {
                    $(this).attr('selected', 'selected');
                }
            });
            $('#txtPinCode').val(merchantData.PinCode);
            $('#txtPan').val(merchantData.PANNo);
            $('#txtBankAccountName').val(merchantData.BankHolderName);
            $('#webUrl').val(merchantData.WebsiteURL);
            $('#OptCtrl_BankAccount').focus();
            $('#btnVerifyAccount').removeClass("disabletxtbox");
            $('#btnVerifyAccountLabel').css({ "cursor": "" });
        }

        else if (data.Error != "" && data.Error != undefined) {
            var errormsg = JSON.parse(data.Error);
            COMMON.prototype.showMessage(data.Error);
            $('#btnVerifyAccount').addClass("disabletxtbox");
            $('#btnVerifyAccountLabel').css({ "cursor": "not-allowed" });
            $('#OptCtrl_BankAccount').focus();
            $('#txtName').val('');
            //$('#txtBankAccountNumber').val(data.sAccountNo);
            $('#txtEmail').val('');
            $('#txtIfcode').val('');
            $('#txtPhone').val('');
            //$('#txtPan').val(data.PANNo);
            $('#businessCategeory').val('');
            $('#businessAddress').val('');
            //$('#businessName').val(data.BusinessName);
            $('#businessRegistrationType').val('');
            $('#txtPinCode').val('');
            $('#txtBankAccountName').val('');
            $('#webUrl').val('');
        }

        //else {
        //    COMMON.prototype.showMessage(data);
        //    $('#OptCtrl_BankAccount').focus();
        //}
    }
};
var FilterData;
var AddEditBudgetHome = {

   
    viewReviseBudgetType: function (iPlanId, iReviseId, iReviseBudgeType) {
       // debugger;
        var PathLoc = GLOBAL.getContextPath("viewReviseBudgettype", "Budget", "Budgeting");
        var result = NETWORK.executeServerMethod(PathLoc, true, { iPlanId: iPlanId, iReviseId: iReviseId, iReviseBudgeType: iReviseBudgeType }, "HTML", true, "AddEditBudgetRenderSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", iPlanId);
    },
    cancel: function (iReviseBudgeType,iValidFromDate,iValidToDate) {
     // debugger;
        var PathLoc = GLOBAL.getContextPath("ReviseBudget_Home", "Budget", "Budgeting");
      
        var result = NETWORK.executeServerMethod(PathLoc, true, null, "HTML", true, "closeSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", { iReviseBudgetype:iReviseBudgeType,iValidFromDate:iValidFromDate,iValidToDate:iValidToDate });
    },
    close: function () {
      // debugger;
        GLOBAL.gotoHomePage();
    }
}

function AddEditBudgetRenderSuccess(FLAG, data, iPlanId) {
 //debugger

     $("#page_Content").html('');
     $("#page_Content").html(data);
 

    $('#page_Content').removeClass('overflowNone');
    //debugger;
    if (iPlanId != 0) {
        OPTIONCONTROL.setControlValue("optPlanName", iPlanId);     
    }
}
function closeSuccess(FLAG, data,Objvariables) {
    //debugger;
    $("#page_Content").html('');
    $("#page_Content").html(data);
    //debugger;
    $("#ReviseBudgetType").val(Objvariables.iReviseBudgetype);
    $('#page_Content').removeClass('overflowNone');
    DATEPICKER.setDate("dpValidFromDate", Objvariables.iValidFromDate);
    DATEPICKER.setDate("dpValidToDate", Objvariables.iValidToDate);
  
    if (FilterData != undefined & FilterData != null)
    {
       FilterData.FPlanname>0?OPTIONCONTROL.setControlValue("optPlanName",FilterData.FPlanname):"";
        if (FilterData.FDate > 0) {
            DATEPICKER.setDate("dpDate", FilterData.FDate);
            document.getElementById("dpDate").disabled = false;
        };
        if(FilterData.FEndDate > 0 )
        {
            DATEPICKER.setDate("dpEndDate", FilterData.FEndDate);
            document.getElementById("dpEndDate").disabled = false;
        }
        lload = true;
    }
  
    Revise_budget();
    lload = false;
}

var TotalGridRows;
var CurrentPageNo;
var LastPageNo;
//var GridDataforpaging = new Array();
var TotalReviseBudgetScreenData;
var l = 0;
var flag = "";
var gPlanId;
var gReviseid;
var gReviseType;
var w = 0;
var lload;
var SearchFilterData;
var ReviseIds=[];


grid_data = new Array();
function Checkbox_Handler(e) {
  // debugger;
    if (e.Checkbox.checked == true) {

        if (e.iRow == 0) {
            e.iRow = 1;
        }
        gridRowValue = FGRIDCONTROL.getRowValue("ReviseHome_Grid", e.iRow);

        txt = gridRowValue[9].Value;
        if (txt != "" && txt != undefined && txt != null) {
            gPlanId = gridRowValue[7].Text;//planid
            gReviseid = gridRowValue[8].Text;//reviseid
            gReviseType = $("#ReviseBudgetType").val();
            flag = true;

        }
    }
}

var Append_Budget = {
    getResourceValue: function (sKey, GetResourceMessages) {
        //debugger;
        var value = "";
        var result = null;

        result = Append_Budget.findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },

    findKeyValue: function (sKey, arrKeyValue) {
        //debugger;
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    },
    setheight: function () {
       // debugger;

        var grid_body = document.getElementById("ReviseHome_Grid_body");
        grid_body.style.height = GLOBAL.getPageHeight() - (grid_body.getBoundingClientRect().top) + "px";


    },
    getdetails: function () {
        //debugger;

        var BudgetId = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
        if (w < 1) {
            Appendgrid_details();
        }
        w++;
        var drop_seaarch = new Array();
        for (i = 0; i < grid_data.length; i++) {
            var g1 = grid_data[i];
            if (BudgetId == g1[7]) {
                grid_data_arr = new Array();
                for (j = 0; j < g1.length; j++) {
                    text = {};
                    text = g1[j];
                    grid_data_arr.push(text);
                }
                drop_seaarch.push(grid_data_arr);
            }
        }
        if (drop_seaarch.length > 0) {
            BindSearchDataToGrid(drop_seaarch);
        }
        else {
            BindSearchDataToGrid(drop_seaarch);
        }
    },
    View: function (bPrint) {

       //debugger;
        var ch = 0;
        var uncheck = 0;
        ReviseIds = [];
        //var reviseIds = new Array();
        //var reviseDetailIds = new Array();
        gris = document.getElementById("ReviseHome_Grid");
        rows = FGRIDCONTROL.getTotalRows(gris);
        for (i = 0; i < rows; i++) {
            cell = FGRIDCONTROL.getCellObject(gris, i + 1, 1);

            if (cell.ContainerAttribute.ColumnType == FGRIDCOLUMNTYPE.get("BOOLEAN")
              && cell.cell.children.length > 0
              && cell.cell.children[0].nodeName.toLowerCase() == "input"
              && (cell.cell.children[0].type.toLowerCase() == "checkbox" || cell.cell.children[0].type.toLowerCase() == "radio")) {
                if (cell.cell.children[0].checked == true) {

                    ch++;               
                    if (bPrint == true) {
                       // debugger
                        Rid = gris.children[1].rows[i].cells[9].innerHTML;

                            ReviseIds.push(Rid);
                                                  
                    }

                    if (gris.children[1].rows[i].cells[2].innerText.trim() == "") {
                        ch = -1;
                    }
                }
            }
            //ReviseIds = { iReviseIds: reviseIds, iReviseDetailIds: reviseDetailIds };
        }
        if (ch == -1) {
            COMMON.prototype.showMessage(Append_Budget.getResourceValue("msgSelectrowCannotbeempty", GetBudgetResourceMessages));
            return false;
        }
        if (ch == 0) {
            COMMON.prototype.showMessage(Append_Budget.getResourceValue("MRP_R_msgPleaseSelectAnyRow", GetBudgetResourceMessages));
            return false;
        }
        if (ch == 1 & bPrint == undefined) {
            if (flag == true) {
                AddEditBudgetHome.viewReviseBudgetType(gPlanId, gReviseid, gReviseType);
            }
            else if (flag == "") {
                COMMON.prototype.showMessage(Append_Budget.getResourceValue("msgSelectrowCannotbeempty", GetBudgetResourceMessages));
                return false;

            }
        }
        else if (ch > 1 & bPrint == undefined) {
            COMMON.prototype.showMessage(Append_Budget.getResourceValue("msgSelectOnerow_PDC", GetBudgetResourceMessages));
            return false;

        }

    }


}


function ClearGrid() {
    try {
        //FGRIDCONTROL.clearData("grdDefineBudget", true);
        FGRIDCONTROL.update("ReviseHome_Grid");
        FGRIDCONTROL.deleteRows(document.getElementById("ReviseHome_Grid"), 1, FGRIDCONTROL.getTotalRows(document.getElementById("grdAddEditBudget")));
        FGRIDCONTROL.insertRows(document.getElementById("ReviseHome_Grid"), 1, 6);
        AddSplitIcon(true, 0);
    }
    catch (err) {
        COMMON.prototype.showMessage(err);
    }
}



function grid_filter() {
    //debugger;
    Search_Value = document.getElementById("grid_search").value;
 
    if (Search_Value == "") {
        SearchFilterData = new Array();
        setrevisebudget_screentype(TotalReviseBudgetScreenData);

        return;
    }
    if (document.getElementById("ReviseBudgetType").value < -1) {
        return;
    }

    search1 = new Array();
    for (i = 0; i < TotalReviseBudgetScreenData.length; i++) {
        row_data = TotalReviseBudgetScreenData[i];


        if (row_data.PlanName.toLowerCase().search(Search_Value.toLowerCase()) >= 0) {
            var att = {};
            search1.push(row_data);
            continue;

        }
        if (row_data.RevisionBy.toLowerCase().search(Search_Value.toLowerCase()) >= 0) {
            search1.push(row_data);
            continue;
        }
        if (row_data.RevisionNo.toString().search(Search_Value) >= 0) {
            search1.push(row_data);
            continue;
        }
        var date = DATEPICKER.convertDateIntoString("", row_data.RevisionDate);
        if (date.search(Search_Value) >= 0) {
            search1.push(row_data);
            continue;
        }

        if (row_data.Quantity.toString().search(Search_Value) >= 0) {
            search1.push(row_data);
            continue;
        }
        if (row_data.Value.toString().search(Search_Value) >= 0) {
            search1.push(row_data);
            continue;
        }
        if (row_data.ReduceQuantity.toString().search(Search_Value) >= 0) {
            search1.push(row_data);
            continue;
        }
        if (row_data.ReduceValue.toString().search(Search_Value) >= 0) {
            search1.push(row_data);
            continue;
        }

    }
    if (search1.length > 0) {
        SearchFilterData = search1;
    }
    setrevisebudget_screentype(search1);

}

function Filter_Load() {
    lload = true;
    Revise_budget();
    lload = false;
}
function Revise_budget() {
//    debugger;

    Revise_element = document.getElementById("ReviseBudgetType");
    ReviseBudget_Value = Revise_element.value;
    date = document.getElementById("dpDate");



    if (lload == true) {
        ibudgetid = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
        if (isNaN(ibudgetid))
        {
            ibudgetid = 0;
        }
        if (date.disabled == false) {

            idate = DATEPICKER.getDate("dpDate");

        }
        else {
            idate = 0;
        }
        if (document.getElementById("dpEndDate").disabled == false) {
            iEndDate = DATEPICKER.getDate("dpEndDate");

        }
        else {
            iEndDate = 0;
        }

        if (date.disabled == false & document.getElementById("dpEndDate").disabled == false) {
            if (idate > iEndDate) {
                COMMON.prototype.showMessage(Append_Budget.getResourceValue("msgPBDateRange", GetBudgetResourceMessages));
                return;
            }
        }
        FilterData = {FPlanname:ibudgetid,FDate:idate,FEndDate:iEndDate};


    }
    else {
        idate = 0; ibudgetid = 0;  iEndDate = 0;
        Filter_clear();
        document.getElementById("grid_search").value = "";
    }

    var url = GLOBAL.getContextPath("GetDataForRevisebudgets", "Budget", "Budgeting");
    if (ReviseBudget_Value > -1) {

        iValidFromDate = DATEPICKER.getDate("dpValidFromDate");
        iValidToDate = DATEPICKER.getDate("dpValidToDate");
        if (iValidFromDate > iValidToDate) {

            COMMON.prototype.showMessage(Append_Budget.getResourceValue("MsgFromDatecannotbegreaterthanToDate", GetBudgetResourceMessages));
        }
        $.ajax({
            url: url,
            type: 'GET',
            data: {
                iReviseType: ReviseBudget_Value, iBudgetId: ibudgetid, iDate: idate, iEndDate: iEndDate, iValidFromDate: iValidFromDate, iValidToDate: iValidToDate
            },
            datatype: "JSON",
            contentType: "application/json;",
            cache: false,
            async: false,
            success: function (data) {
               // debugger;

                SearchFilterData = new Array();
                TotalReviseBudgetScreenData = data;
                setrevisebudget_screentype(data, 1);
                document.getElementById("grid_search").value = "";
                w = 0; l = 0;



            },
            error: function (data) {
                COMMON.prototype.showMessage("Error_While Getting Details");
            }
        });
    }


}
function Refresh() {
    //debugger;

    Filter_clear();
    document.getElementById("grid_search").value = "";
    Revise_budget();


}
function Filter_clear() {
   
    OPTIONCONTROL.resetControl("optPlanName");
    DATEPICKER.clear("dpDate");
    DATEPICKER.clear("dpEndDate");
    FilterData = null;
}
function Toggling(ele) {
    //debugger;
    $(ele).toggleClass("icon-expand icon-collepse");
    $("#filter").slideToggle("Slow");
    heigth = document.getElementsByClassName("clsFieldset")[0].offsetHeight;
    if ($(ele).hasClass("icon-expand") == true) {

        var grid_body = document.getElementById("ReviseHome_Grid_body");
        grid_body.style.height = GLOBAL.getPageHeight() - (grid_body.getBoundingClientRect().top) + 5 + heigth + "px";
    }
    else {
        var grid_body = document.getElementById("ReviseHome_Grid_body");
        grid_body.style.height = GLOBAL.getPageHeight() - (grid_body.getBoundingClientRect().top) - heigth + "px";
    }
}
function setrevisebudget_screentype(data, pageno) {
    // debugger
    var cellobj = null;
    var RowsPerPage = 10;
   
    var filtereddata = data;

    var totalrows = FGRIDCONTROL.getTotalRows("ReviseHome_Grid");
    var totalcols = FGRIDCONTROL.getTotalColumns("ReviseHome_Grid");
    //var griddatacount = filtereddata.length;
    var disableIcon = -1;
    if (pageno == undefined) {
        pageno = 1;
    }

    FGRIDCONTROL.clearData("ReviseHome_Grid", true);
    if (filtereddata.length == 0) {
        document.getElementById("PageEntries").innerHTML = 1;
        document.getElementById("TotallEntries").innerHTML = 1;
        FGRIDCONTROL.deleteRows(document.getElementById("ReviseHome_Grid"), 1, totalrows);
        FGRIDCONTROL.insertRows("ReviseHome_Grid", 1, 1);
    }
    TotalGridRows = filtereddata.length;
    LastPageNo = Math.ceil((TotalGridRows) / RowsPerPage);

    if (LastPageNo > 1) {
        //document.getElementById("Next").disabled = false;
        //document.getElementById("Last").disabled = false;
        //document.getElementById("Prev").disabled = false;
        //document.getElementById("First").disabled = false;
        $('#Next').removeClass('disable');
        $('#Last').removeClass('disable');
        $('#Prev').removeClass('disable');
        $('#First').removeClass('disable');
        if (pageno == LastPageNo) {
            //document.getElementById("Next").disabled = true;
            $('#Next').addClass('disable');
            //document.getElementById("Last").disabled = true;
            $('#Last').addClass('disable');
            //document.getElementById("Prev").disabled = false;
            $('#Prev').removeClass('disable');
            //document.getElementById("First").disabled = false;
            $('#First').removeClass('disable');
        }

        if (pageno == 1) {
            //document.getElementById("Prev").disabled = true;
            //document.getElementById("First").disabled = true;
            //document.getElementById("Next").disabled = false;
            //document.getElementById("Last").disabled = false
            $('#Next').removeClass('disable');
            $('#Last').removeClass('disable');
            $('#Prev').addClass('disable');
            $('#First').addClass('disable');
        }

    }
    else {
        //document.getElementById("Next").disabled = true;
        //document.getElementById("Last").disabled = true;
        //document.getElementById("Prev").disabled = true;
        //document.getElementById("First").disabled = true;   
        $('#Next').addClass('disable');     
        $('#Last').addClass('disable');
        $('#Prev').addClass('disable');
        $('#First').addClass('disable');

    }


    //document.getElementById("PageNo").value = pageno;
    $("#PageNo").html(pageno);



    if (filtereddata.length > 0 && filtereddata != null) {

        document.getElementById("PageEntries").innerHTML = pageno * RowsPerPage;
        document.getElementById("StartingPageEntry").innerHTML = (pageno * RowsPerPage) - RowsPerPage + 1;
        document.getElementById("TotallEntries").innerHTML = filtereddata.length;

        FGRIDCONTROL.deleteRows("ReviseHome_Grid", 1, totalrows);
        if (pageno * RowsPerPage - TotalGridRows > 0) {
            var rOws = TotalGridRows - ((pageno - 1) * RowsPerPage);
            FGRIDCONTROL.insertRows("ReviseHome_Grid", 1, rOws);
            document.getElementById("PageEntries").innerHTML = (pageno - 1) * RowsPerPage + rOws;
        }
        else {
            FGRIDCONTROL.insertRows("ReviseHome_Grid", 1, RowsPerPage);

        }




        var totalbudgetvalue = 0;
        var quantity = 0;
        showTotalvalueColumns();
        for (var iRowCounter = 1, iSerialNo = (pageno * RowsPerPage - RowsPerPage) ; iRowCounter < RowsPerPage + 1 & iSerialNo < pageno * RowsPerPage & iSerialNo < TotalGridRows ; iRowCounter++, iSerialNo++) {

            //totalbudgetvalue = totalbudgetvalue + obj.Value;
            //quantity = quantity + obj.Quantity;
            //debugger
            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 0)//serialno
            cellobj.cell.innerText = iSerialNo + 1;



            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 6)//Quantity
            cellobj.setCellData("value", filtereddata[iSerialNo].Quantity);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].Quantity, parseInt($("#hdnNoofQtyDecimal").val()), true));



            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 7)//BudgetValue

            cellobj.setCellData("value", filtereddata[iSerialNo].Value);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].Value, parseInt($("#hdnNoOfDecimal").val()), true));

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 8)//budgetid
            cellobj.setCellData("value", filtereddata[iSerialNo].BudgetId);
            cellobj.setCellText(filtereddata[iSerialNo].BudgetId);

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 9)//reviseId
            cellobj.setCellData("value", filtereddata[iSerialNo].ReviseId);
            cellobj.setCellText(filtereddata[iSerialNo].ReviseId);
            FGRIDCONTROL.makeCellVisible("ReviseHome_Grid", cellobj);

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 5)//tag3
            cellobj.setCellText(filtereddata[iSerialNo].RevisionBy);
            cellobj.setCellData("value", filtereddata[iSerialNo].RevisionBy);

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 4)//product         
            cellobj.setCellText(GetDatetime( filtereddata[iSerialNo].RevisionDate));
            cellobj.setCellData("value", filtereddata[iSerialNo].RevisionDate);

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 3)//account
            cellobj.setCellText(filtereddata[iSerialNo].RevisionNo);
            cellobj.setCellData("value", filtereddata[iSerialNo].RevisionNo);

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 2)//planname
            cellobj.setCellText(filtereddata[iSerialNo].PlanName);
            cellobj.setCellData("value", filtereddata[iSerialNo].PlanName);

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 10)//added qty
            cellobj.setCellData("value", filtereddata[iSerialNo].Quantity);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].Quantity, parseInt($("#hdnNoofQtyDecimal").val()), true));

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 12)//added value
            cellobj.setCellData("value", filtereddata[iSerialNo].Value);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].Value, parseInt($("#hdnNoOfDecimal").val()), true));
                                  
            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 11)//  reduced qty            
                cellobj.setCellData("value", filtereddata[iSerialNo].ReduceQuantity);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].ReduceQuantity, parseInt($("#hdnNoofQtyDecimal").val()), true));
           
            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 13)//   reduced value                    
            cellobj.setCellData("value", filtereddata[iSerialNo].ReduceValue);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].ReduceValue, parseInt($("#hdnNoOfDecimal").val()), true));
            
            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 14)//transfer qty
            cellobj.setCellData("value", filtereddata[iSerialNo].Quantity);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].Quantity, parseInt($("#hdnNoofQtyDecimal").val()), true));

            cellobj = FGRIDCONTROL.getCellObject("ReviseHome_Grid", iRowCounter, 15)//transfer value
            cellobj.setCellData("value", filtereddata[iSerialNo].TotalValue);
            cellobj.setCellText(FConvert.formatToDecimalPlaces(filtereddata[iSerialNo].Value, parseInt($("#hdnNoOfDecimal").val()), true));

        }
    
        $("#ReviseHome_Grid_body tr").dblclick(function () {
            //debugger;

            var a = this.cells[2].innerText;
            if (a.trim() != "") {
                iPlanId = this.cells[8].innerText;
                iReviseId = this.cells[9].innerText;
                iReviseScreenId = $("#ReviseBudgetType").val();
                AddEditBudgetHome.viewReviseBudgetType(iPlanId, iReviseId, iReviseScreenId);
            }
            else {
                COMMON.prototype.showMessage("Please do not select empty row");

            }

        });
    }
    
}
function showTotalvalueColumns() {
    var ScreenType = document.getElementById("ReviseBudgetType").value;
    if (ScreenType == 0) {
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 6, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 7, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 10, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 11, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 12, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 13, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 14, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 15, true);
    }
    else if (ScreenType == 1) {
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 6, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 7, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 10, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 11, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 12, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 13, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 14, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 15, true);
    }
    else if (ScreenType == 2) {
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 6, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 7, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 10, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 11, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 12, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 13, true);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 14, false);
        FGRIDCONTROL.hideColumn("ReviseHome_Grid", 15, false);
    }
}

function changeBudgetType()
{
    Filter_clear();
    document.getElementById("grid_search").value = "";
    FGRIDCONTROL.clearData("ReviseHome_Grid", true);
    var totalrows = FGRIDCONTROL.getTotalRows("ReviseHome_Grid");
    FGRIDCONTROL.deleteRows("ReviseHome_Grid", 1, totalrows);
    FGRIDCONTROL.insertRows("ReviseHome_Grid", 1, 1);
    TotalReviseBudgetScreenData = [];
    SearchFilterData = [];
    ReviseIds = [];
    setrevisebudget_screentype(TotalReviseBudgetScreenData);

}
function gotoNextPage() {
    //debugger;
    //pageno = Number(document.getElementById("PageNo").value) + 1;
    pageno = parseInt($("#PageNo").html()) + 1;
    if (SearchFilterData.length > 0) {
        setrevisebudget_screentype(SearchFilterData, pageno);
    }
    else {
        setrevisebudget_screentype(TotalReviseBudgetScreenData, pageno);
    }


}
function gotoLastPage() {
    //debugger;

    pageno = LastPageNo;


    if (SearchFilterData.length > 0) {
        setrevisebudget_screentype(SearchFilterData, pageno);
    }
    else {
        setrevisebudget_screentype(TotalReviseBudgetScreenData, pageno);
    }
}
function gotoFirstPage() {

    if (SearchFilterData.length > 0) {
        setrevisebudget_screentype(SearchFilterData, 1);
    }
    else {
        setrevisebudget_screentype(TotalReviseBudgetScreenData, 1);
    }
}
function gotoPreviousPage() {
    //debugger;
    //CurrentPageNo = document.getElementById("PageNo").value;
    //pageno = Number(CurrentPageNo) - 1;
    pageno = parseInt($("#PageNo").html());
    pageno = pageno - 1;

    if (SearchFilterData.length > 0) {
        setrevisebudget_screentype(SearchFilterData, pageno);
    }
    else {
        setrevisebudget_screentype(TotalReviseBudgetScreenData, pageno);
    }
}

var Print={
    Print_Click:function(){
        //debugger
                  
        r=Append_Budget.View(true);
        document.getElementById("dpLayoutName").options.length=0;
        if(r==false)
        {
            return false;
        }
                   
        $("#Rprint").modal('show');
        Layout_DropDown = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetEmailSMSTemplate", "Authorization", "Masters"), true, { iAuthType:$("#iAuthorizationType").val(),iVoucherType: "0"}, "JSON", false);//FConvert.toInt($("#hdnAuthorizationType").val())
        if(Layout_DropDown.data!=null)
        {
            LayoutData=Layout_DropDown.data[0];
            $('#dpLayoutName').append("<option ></option>");
            for (var i = 0; i < LayoutData.length; i++) {
                $('#dpLayoutName').append("<option value=" + LayoutData[i].ID + ">" + LayoutData[i].Name + "</option>")
            }
        }
    },
    CloseprintPopup:function()
    {
        $("#Rprint").modal('hide');
    },
    BudgetEntry: function () {
        $("#Layout_Print").modal('hide')
    },
}

function closeInvoicePopup(){
    //debugger
    $('#Layout_Print ').modal().hide();
    if($('#Layout_Print').hasClass('in')){
        $('#Layout_Print').modal('hide')
    }
}
      

function opencloseEmailTemplate (id) {
    //debugger;
    var count = 0;

    $("#" + id).on('show.bs.modal shown.bs.modal hide.bs.modal hidden.bs.modal', function (e) {
        if (e.type == "hide") {
            count++;
            document.getElementById("dpLayoutName").options.length = 0;
            Layout_DropDown = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetEmailSMSTemplate", "Authorization", "Masters"), true, { iAuthType: $("#iAuthorizationType").val(), iVoucherType: "0" }, "JSON", false);//FConvert.toInt($("#hdnAuthorizationType").val())
            if (Layout_DropDown.data != null) {
                LayoutData = Layout_DropDown.data[0];
                $('#dpLayoutName').append("<option ></option>");
                for (var i = 0; i < LayoutData.length; i++) {
                    $('#dpLayoutName').append("<option value=" + LayoutData[i].ID + ">" + LayoutData[i].Name + "</option>")
                }
            }
            return count != 1 ? false : true;
        }
        if (e.type == "shown") {
            document.getElementById("InvoiceDesignMainDiv").style.height = "450px";
            document.getElementById("InvoiceDesignFields").style.height = "465px";
            document.getElementById("InvoiceDesignFieldProperties").style.height = "465px";
            document.getElementById("id_PrintPreview").style.height = "465px";
        }
        count = 0;
    });
}
function PrintNew()
{
    //debugger

    iLayoutId=document.getElementById("dpLayoutName").value;
    iScreenType=document.getElementById("ReviseBudgetType").value;
    if(iLayoutId.trim()==""||iLayoutId.trim()==null)
    {
        COMMON.prototype.showMessage("please select layout");
        return;
    }

    try {
        for(var i=0;i<ReviseIds.length;i++)
        {
           
                NETWORK.executeServerMethod(GLOBAL.getContextPath("PrintreviseBudget", "Budget", "Budgeting"),
                                                     true,
                                                        { iLayoutId: iLayoutId, iReviseId: ReviseIds[i], iScreenType: iScreenType },
                                                     "",
                                                     true,
                                                     "download",
                                                     "GLOBAL.LoadingStart",
                                                     "GLOBAL.LoadingEnd");
            
        }
    }
    catch (err) {
        COMMON.prototype.showMessage("Exception: {PRINTREVISEBUDGGET} " + ex.message);
    }
                
}

function download(success,data)
{
    //debugger;
    try{
        if(success==false)
        {
            return false;
        }
        if (data != undefined) {
            var w = window.open("", "_blank");
            if (FCommon.UI.isValidObject(w)) {
                w.location = GLOBAL.getContextPath("GetDocumentToPrintFromSource", "Budget", "Budgeting") + '?sFilePath=' + data;
            }
            else {
                var msg = "popup is blocked for this page";
                COMMON.prototype.showMessage(msg);
                return;
            }
        }
    }
    catch(err)
    {  COMMON.prototype.showMessage("{DOWNLOAD}" + err.message, "Exception");}

}
//view Revise budget details start
var AddEditBudgetResourceMessages = '';
var IsGridReadonly = true;
var ADDEDITBUDGET = {
    cancel:function()
    {
       // debugger;
        iReviseBudgetype=document.getElementById("Revise_Screen").value;
        iValidFromDate=document.getElementById("hdndpValidFromDate").value;
        iValidToDate=document.getElementById("hdndpValidToDate").value;
        AddEditBudgetHome.cancel(iReviseBudgetype,iValidFromDate,iValidToDate);
    },
    setHeight : function (onLoad) {
       // debugger
        var bExpand = $("#plusMinusFilter").hasClass("icon-expand");
        var objgrdAddEditBudget_body = document.getElementById("grdAddEditBudget_body");

        if (onLoad == false) {
            if (bExpand == true) {
                objgrdAddEditBudget_body.style.height = GLOBAL.getPageHeight() - (objgrdAddEditBudget_body.getBoundingClientRect().top) + 20 + "px";
            }
            else {
                objgrdAddEditBudget_body.style.height = GLOBAL.getPageHeight() - (objgrdAddEditBudget_body.getBoundingClientRect().top) - 130 + "px";
            }
        }
        else {
            if (bExpand == true) {
                objgrdAddEditBudget_body.style.height = GLOBAL.getPageHeight() - (objgrdAddEditBudget_body.getBoundingClientRect().top) - 50 + "px";
            }
            else {
                objgrdAddEditBudget_body.style.height = GLOBAL.getPageHeight() - (objgrdAddEditBudget_body.getBoundingClientRect().top) + 30 + "px";
            }
        }

    },
    OpenSplitPopup: function (cellobj, iRow) {
       // debugger;
        var Edit=document.getElementById("hdniScreenType").value;//=='Modify'?'true':'false';
        var budgettype = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 3).getCellData("value");//budgettype
        //debugger;
        var RevisionId = document.getElementById("hdniRevisionId").value;
        var ReviseScreenName=document.getElementById("Revise_Screen_Name").value;
        var BudgetId = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
        var PlanName = OPTIONCONTROL.getControlText("optPlanName");
        var AccountName= FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 8).getCellText();//account column
        var BudgetValue=0;
        var BudgetQty=FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 9).getCellData("value");
        var BudgetType=FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 3).getCellData("value");
            
        var BudgetDetailId = parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 2).getCellData("value"));//detailid column
        var BudgetValue=(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 10).getCellData("value"));
        //var SplitType=FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 11).getCellText();//splittype column/
        var FromDate= document.getElementById('hdndpValidFromDate').value;
        var ToDate=   document.getElementById('hdndpValidToDate').value;
        if(isNaN(BudgetQty)||BudgetQty=="")
        {
            BudgetQty=0;
        }
        if(isNaN(BudgetValue)||BudgetValue=="")
        {
            BudgetValue=0;
        }

        if (BudgetId == 0 || RevisionId == 0 || isNaN(BudgetId)) {
            COMMON.prototype.showMessage("can not find any budget for splitting");
            return;
        }
        else if(AccountName.length==0 || isNaN(BudgetValue) || parseFloat(BudgetValue)==0)
        {
            COMMON.prototype.showMessage("select the account and Budget value");
            return;
        }

        else
        {
            var SplitType=FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 12).getCellData("value");;
            var SpillOver=0;
                       
            //debugger;
               
            var a=FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 11).getCellData("value");
            if(a>0)
            {

            }
                
            else
            {
                COMMON.prototype.showMessage("cannot find split details");
                return;
            }
            //    var arrSplitDetails=GetRowWiseSplittedData(iRow);
            //    SplitType=GetRowWiseSplittedType(iRow);
            //    if(arrSplitDetails.length==0)
            //    {
            //        COMMON.prototype.showMessage("cannot find split details");
            //        return;
            //    }                                       
            //int iAccount,int iProduct,int iTag1,int iTag2,int iTag3,int iDate
            var iTag1 = parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 4).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 4).getCellData("value"));//Tag1
            var iTag2=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 5).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 5).getCellData("value"));//Tag2;
            var iTag3=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 6).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 6).getCellData("value"));//Tag3;
            var iProductId=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 7).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 7).getCellData("value"));//Product;
            var iAccountId=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 8).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", iRow, 8).getCellData("value"));//Account;
            var iDate=parseInt(document.getElementById("hdndpValidToDate").value);

                   

            NETWORK.executeServerMethod(GLOBAL.getContextPath("SplitBudget", "Budget", "Budgeting"), true,
              { BudgetId: BudgetId, RevisionId: RevisionId, PlanName: PlanName,AccountName:AccountName,BudgetValue:BudgetValue,FromDate:FromDate,ToDate:ToDate,BudgetDetailId:BudgetDetailId,GridRow:iRow ,ScreenType:ReviseScreenName,SplitType:SplitType,sCallBack:'AddSplitBudget',IsReadOnly:true,BudgetType:BudgetType,BudgetQty:BudgetQty,SpillOverType:SpillOver},
                "html", true, "OpenAddReduceSplitPopUp_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");                                
        }

    },
    GetBudgetPlan :  function () {
        //debugger;
        var url = GLOBAL.getContextPath("fetchAppendEditDetails", "Budget", "Budgeting");
        var BudgetId = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
        if (BudgetId > 0) {
            $.ajax({
                url: url,
                type: 'GET',
                data: {
                    PlanId: BudgetId,
                     
                },
                datatype: "JSON",
                contentType: "application/json;",
                cache: false,
                async: false,
                success: function (data) {
                    SetAddEditBudgetData_Success(data)
                },
                error: function (data) {
                    COMMON.prototype.showMessage("Error,GetBudgetPlan");
                }
            });
        }
    },
    GetAddEditBudgetBody :  function () {
        //debugger;
        var url = GLOBAL.getContextPath("GetAddEditBudgetBodyDetails", "Budget", "Budgeting");
        var iRevisionId = parseInt(document.getElementById("hdniRevisionId").value);
        var iTag1 = parseInt(OPTIONCONTROL.getControlValue("optTag1")==null?0:OPTIONCONTROL.getControlValue("optTag1"));
        var iTag2 = parseInt(OPTIONCONTROL.getControlValue("optTag2")==null?0:OPTIONCONTROL.getControlValue("optTag2"));
        var iTag3 = parseInt(OPTIONCONTROL.getControlValue("optTag3")==null?0:OPTIONCONTROL.getControlValue("optTag3"));
        var iAccount = parseInt(OPTIONCONTROL.getControlValue("optAccount")==null?0:OPTIONCONTROL.getControlValue("optAccount"));
        var iProduct = parseInt(OPTIONCONTROL.getControlValue("optProduct")==null?0:OPTIONCONTROL.getControlValue("optProduct"));
        var Add=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
        if (iRevisionId > 0) {
            $.ajax({
                url: url,
                type: 'GET',
                data: {
                    iRevisionId: iRevisionId,
                    iTag1:iTag1,
                    iTag2:iTag2,
                    iTag3:iTag3,
                    iAccount:iAccount,
                    iProduct:iProduct,
                    IsAdd:Add
                },
                datatype: "JSON",
                contentType: "application/json;",
                cache: false,
                async: false,
                success: function (data) {
                    SetConfirmBudgetData_Success(data)
                },
                error: function (data) {
                    COMMON.prototype.showMessage("Error,GetAddEditBudgetBodyDetails");
                }
            });
        }
        else
        {
            COMMON.prototype.showMessage("Select plan name");
        }
    },
    cellChange: function (cellobj, event) {
        if(IsGridReadonly==true)
            return;
        if (cellobj.bLeave == true) {
            //debugger
            return (ADDEDITBUDGET.onLeave(cellobj, event));
        }
        else {
            //debugger
            ADDEDITBUDGET.onEnter(cellobj, event);
        }
    },
    scroll:function(ele, evt)
    {
        OPTIONCONTROL.updatePopupPosition();
    },
    onLeave: function (cellobj, event) {
        var element = null;
        var data = null;
        var tag = {};
        var IsEdit=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
        var budgettype = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 3).getCellData("value");//budgettype

        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                case MasterDataType.get("MASTER"):
                    {
                        if(IsEdit=='false')
                        {
                            if (budgettype == 0) {
                                if (cellobj.iColumn != 7) {
                                    data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                                    cellobj.setCellData("value", parseInt(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                                    cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                                }
                            }
                            else {
                                data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                                cellobj.setCellData("value", parseInt(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                                cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                            }

                        }

                        if (cellobj.ColumnAttribute.ctrlid == "grdAddEditBudget_option_product") {
                            var iStockAccountId = OPTIONCONTROL.getControlValue(cellobj.ColumnAttribute.ctrlid, "iStocksAccount");
                            if (iStockAccountId != null && iStockAccountId != undefined && iStockAccountId > 0 )
                            {
                                if (budgettype == 0) {
                                    if (cellobj.iColumn != 7) {
                                        cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 7)//account
                                        tag.iRow = cellobj.iRow;
                                        tag.iColumn = 7;
                                        OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, iStockAccountId, tag);
                                    }
                                }
                                else {
                                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 7)//account
                                    tag.iRow = cellobj.iRow;
                                    tag.iColumn = 7;
                                    OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, iStockAccountId, tag);
                                }
                            }
                        }
                    }
                    break;
                case MasterDataType.get("FRACTION"):
                    {
                        //debugger
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        if(IsEdit=='true')
                        {
                            var objQtyCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 9);//quantity
                            var objaddQtyCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 10);//quantity Add
                            var objreduceQtyCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 11);//quantity Reduce

                            var objValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 12);//value
                            var objaddValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 13);//value Add
                            var objreduceValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 14);//value Reduce
                            if(element.value > 0 && cellobj.iColumn==10 && objreduceQtyCell.getCellData("value")>0) //Add Qty
                            {
                                objreduceQtyCell.setCellData("value", 0);
                                objreduceQtyCell.setCellText(0);
                            }
                            else if(element.value > 0 && cellobj.iColumn==11 && objaddQtyCell.getCellData("value")>0)//Reduce Qty
                            {
                                objaddQtyCell.setCellData("value", 0);
                                objaddQtyCell.setCellText(0);
                            }
                            else if(element.value > 0 && cellobj.iColumn==13 && objreduceValueCell.getCellData("value")>0)
                            {
                                objreduceValueCell.setCellData("value", 0);
                                objreduceValueCell.setCellText(0);
                            }
                            else if(element.value > 0 && cellobj.iColumn==14 && objaddValueCell.getCellData("value")>0)
                            {
                                objaddValueCell.setCellData("value", 0);
                                objaddValueCell.setCellText(0);
                            }


                            if(cellobj.iColumn==14)
                            {
                                var objBalValue =parseFloat(FConvert.formatToDecimalPlaces(document.getElementById("txtBalanceBudget").innerHTML),false);//Bal Value
                                var ActualBudgetValue=parseInt(objBalValue)-parseInt(element.value);
                                if(ActualBudgetValue < 0){
                                    COMMON.prototype.showMessage("Value cannot be greater than Balance Budget", "Validation");
                                    return false;
                                }
                            }
                            if(cellobj.iColumn==11)
                            {
                                var objBalQuantity =parseFloat(FConvert.formatToDecimalPlaces(document.getElementById("txtBalanceQuantity").innerHTML,false));//quantity
                                var ActualQty=parseInt(objBalQuantity)-parseInt(element.value);
                                if(ActualQty<0){
                                    COMMON.prototype.showMessage("Quantity cannot be greater than Balance Quantity", "Validation");
                                    return false;
                                }
                            }
                        }
                        var formatvalue='';
                        if (((cellobj.iColumn==12 || cellobj.iColumn==9) && IsEdit=='false') || cellobj.iColumn==13 || cellobj.iColumn==14) {
                            formatvalue = FConvert.formatToDecimalPlaces(element.value, parseInt($("#hdnDefCurDecimals").val()), true);
                        }
                        if(cellobj.iColumn==10 || cellobj.iColumn==11)
                        {
                            formatvalue = FConvert.formatToDecimalPlaces(element.value, parseInt($("#hdnDefCurDecimals").val()), true);
                        }
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText(formatvalue==''?element.value:formatvalue);
                        //if (cellobj.iColumn == 11) {
                        //    var iTotalUpdateBudgetValue = 0;
                        //    for (var index = 1; index <= FGRIDCONTROL.getTotalRows("grdAddEditBudget");index++) {
                        //        iTotalUpdateBudgetValue= iTotalUpdateBudgetValue + parseFloat(FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 11).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 11).getCellData("value"))
                        //    }
                        //    var iActualTotalUpdateBudgetValue = parseFloat(document.getElementById("txtTotalBudgetValue").innerHTML)+iTotalUpdateBudgetValue;

                        //    document.getElementById("txtTotalUpdatedValue").innerHTML=iActualTotalUpdateBudgetValue;
                        //}
                    }
                    break;
                case MasterDataType.get("NUMBERLIST"):
                    if (cellobj.bHidden != true) {
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText($(element).find("option:selected").text());
                    }
                    var BudgetType = parseInt(cellobj.getCellData("value"));
                    var objQuantityCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 7);//quantity
                    var objBudgetValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 9);//budgetvalue
                    switch (BudgetType) {
                        case 0: {
                            var objProductCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 6);
                            objProductCell.setCellData("value","0");
                            objProductCell.setCellText("");

                            //By Account By Value
                            //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", true);
                            //if (objQuantityCell.cell != undefined) {
                            //    $(objQuantityCell.cell).css("pointer-events", "none");
                            //    //document.getElementsByClassName(objQuantityCell.cell.class).style.pointerEvents = "none";
                            //}
                            //enabling
                            //OPTIONCONTROL.disableControl("grdDefineBudget_option_account", false);
                            //OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag1", false);
                            //OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag2", false);
                            //if (objBudgetValueCell.cell != undefined) {
                            //    $(objBudgetValueCell.cell).css("pointer-events", "auto");
                            //    //document.getElementById(objBudgetValueCell.cell.id).style.pointerEvents = "auto";//enabling budgetvalue
                            //}
                            break;
                        }

                        case 1:
                            {   //By Product By Value
                                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", false);//enabling product
                                //var objBudgetValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 9);//budgetvalue
                                //if (objBudgetValueCell.cell != undefined) {
                                //    $(objQuantityCell.cell).css("pointer-events", "auto");
                                //    //document.getElementById(objQuantityCell.cell.id).style.pointerEvents = "auto";//enabling budgetvalue
                                //}

                                //disabling
                                //OPTIONCONTROL.disableControl("grdDefineBudget_option_account", true);
                                //OPTIONCONTROL.disableControl("grdDefineBudget_option_profitcenter", true);
                                //OPTIONCONTROL.disableControl("grdDefineBudget_option_costcenter", true);

                                //if (objQuantityCell.cell != undefined) {
                                //    $(objQuantityCell.cell).css("pointer-events", "none");
                                //    //document.getElementById(objQuantityCell.cell.id).style.pointerEvents = "none";
                                //}
                                break;
                            }
                        case 2:
                            {   //By Product By Qty By Value
                                //enabling
                                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", false);//enabling product
                                //if (objQuantityCell.cell != undefined) {
                                //    $(objQuantityCell.cell).css("pointer-events", "auto");
                                //    //document.getElementById(objQuantityCell.cell.id).style.pointerEvents = "auto";
                                //}
                                //if (objBudgetValueCell.cell != undefined) {
                                //    $(objBudgetValueCell.cell).css("pointer-events", "auto");
                                //    //document.getElementById(objBudgetValueCell.cell.id).style.pointerEvents = "auto";
                                //}

                                //disabling
                                //OPTIONCONTROL.disableControl("grdDefineBudget_option_account", true);
                                // OPTIONCONTROL.disableControl("grdDefineBudget_option_profitcenter", true);
                                // OPTIONCONTROL.disableControl("grdDefineBudget_option_costcenter", true);
                                break;
                            }
                        case 3:
                            {//By Product By Qty
                                //enabling
                                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", false);//enabling product
                                //if (objQuantityCell.cell != undefined) {
                                //    $(objQuantityCell.cell).css("pointer-events", "auto");
                                //    //document.getElementById(objQuantityCell.cell.id).style.pointerEvents = "auto";
                                //}
                                //disabling
                                //OPTIONCONTROL.disableControl("grdDefineBudget_option_account", true);
                                // OPTIONCONTROL.disableControl("grdDefineBudget_option_profitcenter", true);
                                //OPTIONCONTROL.disableControl("grdDefineBudget_option_costcenter", true);
                                //if (objBudgetValueCell.cell != undefined) {
                                //    $(objBudgetValueCell.cell).css("pointer-events", "none");
                                //    //document.getElementById(objBudgetValueCell.cell.id).style.pointerEvents = "none";// budgetvalue
                                //}

                                break;
                            }
                        default:
                            break;

                    }
                    break;
            }
            return (true);
        }
    },

    onEnter: function (cellobj, event) {
        //debugger;
        var element = null;
        var sGridCtrlId = "";
        var iValue = 0;
        var data = null;
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
        if (cellobj.bHidden == true) {
            cellobj.processDefault(event);
            return;
        }
        $($("#grdAddEditBudget_body")[0].children).css("background-color","");
        $(cellobj.cell.parentElement).css("background-color","rgb(222, 245, 253)");
        var IsEdit=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
        var budgettype = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 3).getCellData("value");//budgettype

        //var IsEdit=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
        //var objQuantityCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 8);//quantity
        //var objBudgetValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 10);//budgetvalue
        //var objProductCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 6);//Product Cell

        var gridBodyId = cellobj.Grid.id + "_body";
        var CurrentrowsLength = $("#" + gridBodyId)[0].children.length;
        if (cellobj.iRow == CurrentrowsLength) {
            FGRIDCONTROL.insertRows(cellobj.Grid.id, 0, 1);
            var cellObject = FGRIDCONTROL.getCellObject(cellobj.Grid.id, cellobj.iRow, 1)
            $(cellObject.cell).html('<i class="icon-edit icon-font9 editField" data-fieldid="' + cellobj.iRow + '" style="padding-left:17px;cursor:pointer;" onclick="ADDEDITBUDGET.OpenSplitPopup(this, ' + cellobj.iRow + ');"></i>');
        }

        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("MASTER"):
                if(IsEdit=='false')
                {
                    cellobj.setCellText("");
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (budgettype == 0){
                        if (cellobj.iColumn == 7) {
                            cellobj.processDefault(event);
                        }
                        else {
                            OPTIONCONTROL.setParent(element, cellobj.cell);
                            $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                        }
                    }
                    else {
                        OPTIONCONTROL.setParent(element, cellobj.cell);
                        $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                    }
                    iValue = 0;
                    if (COMMON.prototype.isInteger(cellobj.CellData.value) == true) {
                        iValue = parseInt(cellobj.getCellData("value"));
                    }
                    if (iValue <= 0) {
                        OPTIONCONTROL.clear(element);
                    }
                    else {
                        OPTIONCONTROL.setControlValue(element, iValue);
                    }
                }
                //ADDEDITBUDGET.CellEnableDisable(cellobj,budgettype);
                break;
            case MasterDataType.get("NUMBERLIST"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (cellobj.getCellData("value") == null) {
                    cellobj.setControl(element, "0");
                }
                else {
                    cellobj.setControl(element, cellobj.getCellData("value"));
                }
                $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                break;
            case MasterDataType.get("FRACTION"):
                {
                    //debugger;
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (budgettype == 0||budgettype==1){
                        if (cellobj.iColumn == 9||cellobj.iColumn == 10||cellobj.iColumn == 11) {
                            element.value = "";
                            cellobj.processDefault(event);
                        }
                        else {
                            cellobj.setControl(element, cellobj.getCellData("value"));
                            $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                        }
                    }
                    else if (budgettype == 3){
                        if (cellobj.iColumn == 11) {
                            cellobj.processDefault(event);
                        }
                        else {
                            cellobj.setControl(element, cellobj.getCellData("value"));
                            $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                        }
                    }
                    else {
                        cellobj.setControl(element, cellobj.getCellData("value"));
                        $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                    }
                }
                break;
            default:
                cellobj.processDefault(event);
                break;
        }


        //if (cellobj.ColumnAttribute.datatypeid == MasterDataType.get("FRACTION")) {
        //    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
        //    cellobj.setControl(element, cellobj.getCellData("value"));
        //    $("#" + cellobj.ColumnAttribute.ctrlid).focus();
        //}
        //debugger
        var BudgetId= parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
        var AdvanceBudgetInfo = null;
        if(IsEdit=='true'&& BudgetId>0)
        {
            var objAdvanceInfoData = $(cellobj.cell.parentElement).attr("advanceinfodata");
            if (objAdvanceInfoData != undefined && objAdvanceInfoData != null && objAdvanceInfoData != "") {
                AdvanceBudgetInfo = JSON.parse(objAdvanceInfoData);
            }
            else {
                AdvanceBudgetInfo = GetAdvanceBudgetInfo(cellobj);// calling server to fetch data
                $(cellobj.cell.parentElement).attr("advanceinfodata",JSON.stringify(AdvanceBudgetInfo));
            }
            SetAdvanceInfoAddEdit(AdvanceBudgetInfo,budgettype)

            //debugger;
        }
    },
    CellEnableDisable: function (cellobj, BudgetType) {
        var IsEdit=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
        var objQuantityCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 8);//quantity
        var objBudgetValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 10);//budgetvalue
        var objProductCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 6);//Product Cell
        switch (parseInt(BudgetType)) {
            case 0: {
                //By Account By Value
                //enabling
                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag1", false);
                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag2", false);
                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag3", false);
                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_account", false);

                //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", true);
                //if (objProductCell.cell != undefined || objQuantityCell.cell != undefined) {
                //    $(objProductCell.cell).css("pointer-events", "none");
                //}
                //else {
                //    $(objBudgetValueCell.cell).css("pointer-events", "auto");
                //}
                //if (objQuantityCell.cell != undefined) {
                //    $(objQuantityCell.cell).css("pointer-events", "none");
                //}

                //if (objBudgetValueCell.cell != undefined) {
                //    $(objBudgetValueCell.cell).css("pointer-events", "auto");
                //}
                break;
            }

            case 1:
                {   //By Product By Value
                    //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", false);//enabling product
                    //var objBudgetValueCell = FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 8);//budgetvalue
                    //if (objBudgetValueCell.cell != undefined) {
                    //    $(objQuantityCell.cell).css("pointer-events", "auto");
                    //}
                    //if (objQuantityCell.cell != undefined) {
                    //    $(objQuantityCell.cell).css("pointer-events", "none");
                    //}
                    break;
                }
            case 2:
                {   //By Product By Qty By Value  //enabling
                    //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", false);//enabling product
                    //if (objQuantityCell.cell != undefined) {
                    //    $(objQuantityCell.cell).css("pointer-events", "auto");
                    //}
                    //if (objBudgetValueCell.cell != undefined) {
                    //    $(objBudgetValueCell.cell).css("pointer-events", "auto");
                    //}
                    //disabling
                    break;
                }
            case 3:
                {//By Product By Qty   //enabling
                    //OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", false);//enabling product
                    //if (objQuantityCell.cell != undefined) {
                    //    $(objQuantityCell.cell).css("pointer-events", "auto");
                    //}
                    ////disabling
                    //if (objBudgetValueCell.cell != undefined) {
                    //    $(objBudgetValueCell.cell).css("pointer-events", "none");
                    //}
                    break;
                }
            default:
                break;

        }
        //if(IsEdit=='true')
        //{
        //    OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag1", true);
        //    OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag2", true);
        //    OPTIONCONTROL.disableControl("grdAddEditBudget_option_Tag3", true);
        //    OPTIONCONTROL.disableControl("grdAddEditBudget_option_product", true);
        //    OPTIONCONTROL.disableControl("grdAddEditBudget_option_account", true);
        //}
    },

    validateInputNumber: function (eleInput, iType, evt) {
        // 0 For Signed Integer
        // 1 For Unsigned Integer
        // 2 For Signed Decimal
        // 3 For Unsingned Decimal
        //debugger;
        var charCode = null;

        try {
            bResult = false;

            if (evt.which == 0 || evt.which == 8) {
                return (true);
            }

            charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode == 45) { // -
                return false;
                //if ((iType == 0 || iType == 2)) { // Signed Integer, Signed Decimal
                //    return (true);
                //}
            }
            else if (charCode == 46) { // .
                var splitedValue = parseInt(eleInput.value.split('.')[0]);
                if ((iType == 2 || iType == 3)
                    && (eleInput.value.indexOf(".") == -1 || splitedValue == 0)) { // Signed Decimal, Unsingned Decimal
                    return (true);
                }
            }
            else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                return (true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{AddEditBudget.validateInputNumber} " + err.message, "Exception");
        }

        return (false);
    },
    optionCtrlLoaded: function (id, data, tag) {

        try {
            var sGridCtrlId = document.getElementById("grdAddEditBudget");

            if (FCommon.Array.getLength(tag.Data) == 0) {
                return;
            }
            if (tag.CustomData != null) {
                cell = FGRIDCONTROL.getCellObject(sGridCtrlId, tag.CustomData.iRow, tag.CustomData.iColumn);
                cell.setCellData("value", tag.Data[0].sValue);
                cell.setCellText(tag.Data[1].sValue);
            }
        } catch (ex) {
            COMMON.prototype.showMessage("AddEditBudget.optionCtrlLoaded " + ex.message);
        }
    },
    SaveAddEditBudget: function () {
        try {
            //debugger;
            FGRIDCONTROL.update("grdAddEditBudget");
            if (Validate()) {
                var IsEdit=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
                var BudgetId = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
                var EditBudgetData = GetEditBudgetData();
                if (EditBudgetData != null && EditBudgetData.lstBudgetDetails.length > 0) {
                    if (EditBudgetData.lstBudgetDetails == null || EditBudgetData.lstBudgetDetails.length == 0) {
                        COMMON.prototype.showMessage("Can not find Budget Grid");
                        return;
                    }
                    //Framing final posting define budget object.
                    var url = "";
                    if (EditBudgetData != null) {
                        if (EditBudgetData.lstBudgetDetails != null) {
                            //debugger
                            var frDate=document.getElementById('hdndpValidFromDate').value;
                            var ToDate=document.getElementById('hdndpValidToDate').value;

                            var iTag1= document.getElementById("hdnIsTag1").value;
                            var iTag2= document.getElementById("hdnIsTag2").value;
                            var iTag3= document.getElementById("hdnIsTag3").value;
                            for (var rows = 0; rows < EditBudgetData.lstBudgetDetails.length; rows++) {
                                if(iTag1>0 && (EditBudgetData.lstBudgetDetails[rows].Tag1=="NaN" || EditBudgetData.lstBudgetDetails[rows].Tag1=="" || EditBudgetData.lstBudgetDetails[rows].Tag1=="0"))
                                {
                                    var sTagName1= document.getElementById("hdnTagName1").value;
                                    COMMON.prototype.showMessage("select the "+sTagName1+" in Body Grid");
                                    return;
                                }
                                else if(iTag2>0 && (EditBudgetData.lstBudgetDetails[rows].Tag2=="NaN" || EditBudgetData.lstBudgetDetails[rows].Tag2=="" || EditBudgetData.lstBudgetDetails[rows].Tag2=="0"))
                                {
                                    var sTagName2= document.getElementById("hdnTagName2").value;
                                    COMMON.prototype.showMessage("select the "+sTagName2+" in Body Grid");
                                    return;
                                }
                                else if(iTag3>0 && (EditBudgetData.lstBudgetDetails[rows].Tag3=="NaN" || EditBudgetData.lstBudgetDetails[rows].Tag3=="" || EditBudgetData.lstBudgetDetails[rows].Tag3=="0"))
                                {
                                    var sTagName3= document.getElementById("hdnTagName3").value;
                                    COMMON.prototype.showMessage("select the "+sTagName3+" in Body Grid");
                                    return;
                                }
                                else if(EditBudgetData.lstBudgetDetails[rows].AccountId=="NaN" || EditBudgetData.lstBudgetDetails[rows].AccountId==""||EditBudgetData.lstBudgetDetails[rows].AccountId=="0")
                                {
                                    COMMON.prototype.showMessage("select the Account in Body Grid");
                                    return;
                                }
                                //debugger;
                                if (IsEdit == "false") {
                                    var Result= ADDEDITBUDGET.validaterow(parseInt(EditBudgetData.lstBudgetDetails[rows].BudgetType.length==0?0:EditBudgetData.lstBudgetDetails[rows].BudgetType),EditBudgetData.lstBudgetDetails[rows]);
                                    if(Result==false)
                                    {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    //debugger
                    url = GLOBAL.getContextPath("SaveAddEditBudget", "Budget", "Budgeting");
                    //server call
                    var result = "";
                    result = NETWORK.executeServerMethod(
                      url,
                      true, { objDefineBudgetRevision: EditBudgetData,iFromDate:frDate,iToDate:ToDate,IsEdit:IsEdit, iBudgetId:BudgetId},
                      "JSON",
                      false,
                      "ADDEDITBUDGET.SaveAddEditBudget_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

                }
                else {
                    COMMON.prototype.showMessage("Enter body details");
                }
            }
        } catch (error) {
            COMMON.prototype.showMessage(error);
        }

    },
    SaveAddEditBudget_Success: function (flag, data) {
        //debugger
        if (flag == true && data != null) {
            //debugger;
            var idnamepair = data;
            if (idnamepair.Tag == true) {
                COMMON.prototype.showMessage(document.getElementById("hdniScreenType").value + " Budget Save Successfully");
                ClearControls();
            }
            else {
                if (idnamepair.Name.length > 0)
                    COMMON.prototype.showMessage(idnamepair.Name);
            }
        }
        else {
            COMMON.prototype.showMessage("Error,EditBudget");
        }
    },

    validaterow : function (BudgetType, DetailRow) {
        var budgettype = BudgetType;//.toLowerCase().split(' ').join('');
        var SelectedId = 0;
        var quantity = 0;
        var budgetvalue = 0;
        switch (budgettype) {

            case 0://byaccountbyvalue
                {
                    SelectedId = isNaN(DetailRow.AccountId)|| DetailRow.AccountId == "" ? 0 : parseInt(DetailRow.AccountId); // FGRIDCONTROL.getCellObject("grdDefineBudget", row, 6).getCellData("value");//accountid
                    budgetvalue = isNaN(DetailRow.Value)|| DetailRow.Value == "" ? 0 : parseFloat(DetailRow.Value);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 8).getCellData("value");//budgetvalue
                    if (SelectedId > 0 && budgetvalue > 0)
                        return true;
                    else
                    {
                        if(SelectedId<=0)
                        {
                            COMMON.prototype.showMessage("Account can not be empty in the grid with ByAccountByValue budget type");

                        }
                        else if (budgetvalue<=0 ||  budgetvalue==undefined)
                        {
                            COMMON.prototype.showMessage("Value can not be empty with ByAccountByValue budget type");
                        }
                        return false;
                    }
                }
            case 1:
                {
                    SelectedId = isNaN(DetailRow.ProductId)|| DetailRow.ProductId == "" ? 0 : parseInt(DetailRow.ProductId);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 5).getCellData("value");//productid
                    budgetvalue = isNaN(DetailRow.Value)|| DetailRow.Value == "" ? 0 : parseFloat(DetailRow.Value);//  FGRIDCONTROL.getCellObject("grdDefineBudget", row, 8).getCellData("value");//budgetvalue
                    if (SelectedId > 0 && budgetvalue > 0)
                        return true;
                    else
                    {
                        if(SelectedId<=0)
                        {
                            COMMON.prototype.showMessage("Product can not be empty in the grid with ByProductByValue budget type");

                        }
                        else if (budgetvalue<=0 ||  budgetvalue==undefined)
                        {
                            COMMON.prototype.showMessage("Value can not be empty with ByProductByValue budget type");
                        }
                        return false;
                    }
                }
                break;
            case 2:
                {
                    SelectedId = isNaN(DetailRow.ProductId)|| DetailRow.ProductId == "" ? 0 : parseInt(DetailRow.ProductId);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 5).getCellData("value");//productid
                    quantity = isNaN(DetailRow.Quantity)|| DetailRow.Quantity == "" ? 0 : parseFloat(DetailRow.Quantity);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 7).getCellData("value");//quantity
                    budgetvalue = isNaN(DetailRow.Value)|| DetailRow.Value == "" ? 0 : parseFloat(DetailRow.Value);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 8).getCellData("value");//quantity
                    if (SelectedId > 0 && budgetvalue > 0 && quantity > 0)
                        return true;
                    else
                    {
                        if(SelectedId<=0)
                        {
                            COMMON.prototype.showMessage("Product can not be empty in the grid with ByProductByQtyByValue budget type");

                        }
                        else if (quantity <=0 || budgetvalue<=0 || quantity==undefined || budgetvalue==undefined)
                        {
                            COMMON.prototype.showMessage("Quantity and Value can not be empty with ByProductByQtyByValue budget type");
                        }
                        return false;
                    }
                }
                break;
            case 3:
                {

                    SelectedId = isNaN(DetailRow.ProductId) || DetailRow.ProductId == "" ? 0 : parseInt(DetailRow.ProductId);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 5).getCellData("value");//productid
                    quantity = isNaN(DetailRow.Quantity)|| DetailRow.Quantity == "" ? 0 : parseFloat(DetailRow.Quantity);// FGRIDCONTROL.getCellObject("grdDefineBudget", row, 7).getCellData("value");//quantity
                    //budgetvalue = FGRIDCONTROL.getCellObject("grdDefineBudget", row, 8).getCellData("value");//quantity
                    if (SelectedId > 0 && quantity > 0)
                        return true;
                    else
                    {
                        if(SelectedId<=0)
                        {
                            COMMON.prototype.showMessage("Product can not be empty in the grid with ByProductByQtyByValue budget type");

                        }
                        else if (quantity <=0 || quantity==undefined )
                        {
                            COMMON.prototype.showMessage("Quantity  can not be empty with ByProductByqty BudgetType");
                        }

                        return false;
                    }

                }
                break;
        }
    },

    getResourceValue: function (sKey, GetResourceMessages) {
        // //debugger;
        var value = "";
        var result = null;

        result = DEFINEBUDGET.findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },

    findKeyValue: function (sKey, arrKeyValue) {
        // //debugger;
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    }
}
function SetAdvanceInfoAddEdit(AdvanceBudgetInfo,budgettype)
{
    //debugger;
    if(AdvanceBudgetInfo!=null)
    {
        //debugger
        var iBudgetGroup=document.getElementById("hdnBudgetGroup").value;
        var dSpendQty=parseFloat(AdvanceBudgetInfo.SpentQty)
        var dSpendBudget=parseFloat(AdvanceBudgetInfo.SpentBudget)
        var dBalanceQty= AdvanceBudgetInfo.BudgetQty-(dSpendQty+AdvanceBudgetInfo.PreCommittedQty+AdvanceBudgetInfo.CommittedQty)
        var dBalanceBudget= AdvanceBudgetInfo.Budget+(dSpendBudget+AdvanceBudgetInfo.PreCommittedBudget+AdvanceBudgetInfo.CommittedBudget)
        var iNoOfDecimal=$("#hdnNoOfDecimal").val();
        //after return qty added

        ////////////////////////
        document.getElementById("txtSpendQuantity").innerHTML =budgettype==2?FConvert.formatToDecimalPlaces(Math.abs(dSpendQty),iNoOfDecimal,true):FConvert.formatToDecimalPlaces(0,iNoOfDecimal,true);
        document.getElementById("txtPreCommitedQuantity").innerHTML =budgettype==2?FConvert.formatToDecimalPlaces(Math.abs(AdvanceBudgetInfo.PreCommittedQty),iNoOfDecimal,true):FConvert.formatToDecimalPlaces(0,iNoOfDecimal,true);
        document.getElementById("txtCommittedQuantity").innerHTML =budgettype==2?FConvert.formatToDecimalPlaces(Math.abs(AdvanceBudgetInfo.CommittedQty),iNoOfDecimal,true):FConvert.formatToDecimalPlaces(0,iNoOfDecimal,true);
        document.getElementById("txtBalanceQuantity").innerHTML =budgettype==2?FConvert.formatToDecimalPlaces(dBalanceQty,iNoOfDecimal,true):FConvert.formatToDecimalPlaces(0,iNoOfDecimal,true);

        document.getElementById("txtSpentBudget").innerHTML = FConvert.formatToDecimalPlaces(Math.abs(dSpendBudget),iNoOfDecimal,true);
        document.getElementById("txtPreCommittedValue").innerHTML =FConvert.formatToDecimalPlaces(Math.abs(AdvanceBudgetInfo.PreCommittedBudget),iNoOfDecimal,true);
        document.getElementById("txtCommittedBudget").innerHTML = FConvert.formatToDecimalPlaces(Math.abs(AdvanceBudgetInfo.CommittedBudget),iNoOfDecimal,true);
        document.getElementById("txtBalanceBudget").innerHTML = FConvert.formatToDecimalPlaces(dBalanceBudget,iNoOfDecimal,true);

        document.getElementById("txtReturnBudget").innerHTML = FConvert.formatToDecimalPlaces(AdvanceBudgetInfo.ReturnBudget,iNoOfDecimal,true);
        document.getElementById("txtReturnQty").innerHTML =FConvert.formatToDecimalPlaces(AdvanceBudgetInfo.ReturnQty,iNoOfDecimal,true);
    }
}
//function FilterClearClick()
//{
//    //debugger
//    var tag1=@Html.Raw(Json.Encode(iTag1));
//    var tag2=@Html.Raw(Json.Encode(iTag2));
//    var tag3=@Html.Raw(Json.Encode(iTag3));
//    OPTIONCONTROL.clear("optAccount");
//    OPTIONCONTROL.clear("optProduct");
//    if (tag1 > 0) {
//        OPTIONCONTROL.clear('optTag1');
//    }
//    if (tag2 > 0) {
//        OPTIONCONTROL.clear('optTag2');
//    }
//    if (tag3 > 0) {
//        OPTIONCONTROL.clear('optTag3');
//    }
//}
function OpenSplitPopUp_Success(flag,data) {
    try
    {
        if(flag && data!=null)
        {
            //debugger
            $('#AddEditsplitmodalpopup').html('');
            $('#AddEditsplitmodalpopup').html(data);
            $('#AddEditsplitmodalpopup').modal('show');
        }
    }catch(err)
    {
        COMMON.prototype.showMessage(err);
    }
}
function OpenAddReduceSplitPopUp_Success(flag,data) {
    try
    {
        if(flag && data!=null)
        {
            //debugger
            $('#AddEditsplitmodalpopup').html('');
            $('#AddEditsplitmodalpopup').html(data);
            $('#AddEditsplitmodalpopup').modal('show');
        }
    }catch(err)
    {
        COMMON.prototype.showMessage(err);
    }
}
function AddReduceSplitAppendBudget(lstSplitDBuget,rowindex,splittype,TotalValue,TotalQty)
{
    //debugger
    if(document.getElementById('grdAddEditBudget')!=null && document.getElementById('grdAddEditBudget')!=undefined)
    {
        var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);
        cellobj.setCellData("data-dbsplitdata",JSON.stringify(lstSplitDBuget));
        cellobj.setCellData("data-dbsplitType",splittype);
        cellobj.setCellData("data-dbTotalsplitValue",TotalValue);
        cellobj.setCellData("data-dbTotalsplitQty",TotalQty);
        $('#AddEditsplitmodalpopup').modal('hide');
    }
}
function AddSplitAppendBudget(lstSplitDBuget,rowindex,GridTotalValue,TotalQty,splittype,SpillOverType)
{
    //debugger
    if(document.getElementById('grdAddEditBudget')!=null && document.getElementById('grdAddEditBudget')!=undefined)
    {
        var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);
        cellobj.setCellData("data-dbsplitdata",JSON.stringify(lstSplitDBuget));
        cellobj.setCellData("data-dbsplitType",splittype);
        cellobj.setCellData("data-dbTotalsplitValue",GridTotalValue);
        cellobj.setCellData("data-dbTotalsplitQty",TotalQty);
        cellobj.setCellData("data-dbSpillOverType",SpillOverType);
        $('#AddEditsplitmodalpopup').modal('hide');
    }
}

function GetRowWiseSplittedData(rowindex)
{
    //debugger;
    var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);//splittype column
    var splitdata=cellobj.getCellData("data-dbsplitdata");
      
    if(splitdata!=null && splitdata!=undefined && splitdata.trim()!="")
    {
        return JSON.parse(splitdata);
    }
    else
    {
        return null;
    }
}
function GetRowWiseSplittedTotalValue(rowindex)
{
    var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);//splittype column
    var splitdata=cellobj.getCellData("data-dbTotalsplitValue");
    if(splitdata!=null && splitdata!=undefined && splitdata.trim()!="")
    {
        return splitdata;
    }
    else
    {
        return 0;
    }
}
function GetRowWiseSplittedTotalQty(rowindex)
{
    var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);//splittype column
    var splitdata=cellobj.getCellData("data-dbTotalsplitQty");
    if(splitdata!=null && splitdata!=undefined && splitdata.trim()!="")
    {
        return splitdata;
    }
    else
    {
        return 0;
    }
}
function GetRowWiseSplittedType(rowindex)
{
    var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);//splittype column
    var splitdata=cellobj.getCellData("data-dbsplitType");
    if(splitdata!=null && splitdata!=undefined && splitdata.trim()!="")
    {
        return splitdata;
    }
    else
    {
        return 0;
    }
}
function GetRowWiseSpillOverType(rowindex)
{
    var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);//splittype column
    var splitdata=cellobj.getCellData("data-dbSpillOverType");
    if(splitdata!=null && splitdata!=undefined && splitdata.trim()!="")
    {
        return splitdata;
    }
    else
    {
        return 0;
    }
}

function SetAddEditBudgetData_Success(data) {
    //debugger
    try
    {
        if (data != null) {
            var objReviseBudget = data;
            var QtyDecimals=document.getElementById('hdnDefQtyDecimals').value;
            var CurrencyDecimals=document.getElementById('hdnDefCurDecimals').value;
            if (objReviseBudget != null && objReviseBudget != undefined) {
                //FGRIDCONTROL.clearData("grdAddEditBudget", true);
                ClearGrid();
                ClearFooter();
                document.getElementById("txtVersion").innerHTML = objReviseBudget.Version;
                document.getElementById("txtReviseNo").innerHTML = objReviseBudget.ReviseNo;
                document.getElementById("hdniRevisionId").value = objReviseBudget.RevisionId;
                document.getElementById("hdndpDate").value=objReviseBudget.LastUpdateDate;

                document.getElementById('dpDate').innerHTML=GetDatetime(objReviseBudget.LastUpdateDate);
                $('#dpDate').css("font-weight", "normal");

                document.getElementById('dpLastUpdateDate').innerHTML=GetDatetime(objReviseBudget.LastUpdateDate);
                $('#dpLastUpdateDate').css("font-weight", "normal");

                document.getElementById('dpValidFromDate').innerHTML=GetDatetime(objReviseBudget.ValidFrom);
                document.getElementById('hdndpValidFromDate').value=objReviseBudget.ValidFrom;
                $('#dpValidFromDate').css("font-weight", "normal");

                document.getElementById("hdndpValidToDate").value=objReviseBudget.ValidTo;
                document.getElementById('dpValidToDate').innerHTML=GetDatetime(objReviseBudget.ValidTo);
                $('#dpValidToDate').css("font-weight", "normal");

                if(objReviseBudget.AttachedFiles!=null && objReviseBudget.AttachedFiles.length>0)
                {
                    //var FileNames= objReviseBudget.AttachedFiles.join();
                    //document.getElementById('uploadFile').value=FileNames;
                }

            }
            if (objReviseBudget.ErrorMessage!=null &&   objReviseBudget.ErrorMessage.length > 0)
            {
                IsGridReadonly=true;
                COMMON.prototype.showMessage(objReviseBudget.ErrorMessage);
                return false;
            }
            else
            {
                IsGridReadonly=true;
            }

            var lstReviseBudgetDetails =objReviseBudget.lstTransferBudgetBody;

            if (lstReviseBudgetDetails != null && lstReviseBudgetDetails != undefined && lstReviseBudgetDetails.length > 0) {
                //setting grid data
                var cellobj = null;
                var tag = { iRow: 0, iColumn: 0 };
                //FGRIDCONTROL.iTotalRows=lstReviseBudgetDetails.length
                for (iRowCounter = 0; iRowCounter < lstReviseBudgetDetails.length; iRowCounter++) {
                    if (iRowCounter > 4)
                    {
                        FGRIDCONTROL.insertRows("grdAddEditBudget", iRowCounter + 1, 1);
                        var cellObject = FGRIDCONTROL.getCellObject("grdAddEditBudget", (iRowCounter + 1), 1)
                        $(cellObject.cell).html('<i class="icon-edit icon-font9 editField" data-fieldid="' + (iRowCounter + 1) + '" style="padding-left:17px;cursor:pointer;width:0px;" onclick="ADDEDITBUDGET.OpenSplitPopup(this, ' + (iRowCounter + 1) + ');"></i>');

                    }
                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 2)//iBudgetConfirmId
                    cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetConfirmId);
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetConfirmId);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 3)//BudgetType
                    cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetType);
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetType);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 4)//tag1
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag1Name);
                    cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag1);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 5)//tag2
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag2Name);
                    cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag2);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 6)//tag3
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag3Name);
                    cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag3);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 7)//product
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Product);
                    cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.ProductId);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 8)//account
                    cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Account);
                    cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.AccountId);

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 9)//Quantity
                    cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Quantity);
                    //cellobj.setCellText(Number(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Quantity).toFixed(parseInt(QtyDecimals)));
                    cellobj.setCellText(FConvert.formatToDecimalPlaces(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Quantity,parseInt(CurrencyDecimals), true));

                    cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 12)//Value
                    cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetValue);
                    //cellobj.setCellText(Number(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetValue).toFixed(parseInt(CurrencyDecimals)));
                    cellobj.setCellText(FConvert.formatToDecimalPlaces(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetValue, parseInt(CurrencyDecimals), true));

                    //split details setting
                    if(document.getElementById('grdAddEditBudget')!=null && document.getElementById('grdAddEditBudget')!=undefined)
                    {
                        var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter+1, 1);
                        cellobj.setCellData("data-dbsplitdata",JSON.stringify(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.DbSplit));
                        cellobj.setCellData("data-dbsplitType",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.SplitType);
                    }
                    ///////////////////////
                }
                //debugger
            }
        }
    }
    catch(err)
    {
        COMMON.prototype.showMessage(err);
    }
}
function SetConfirmBudgetData_Success(data) {
    //debugger
    if (data != null) {
        var lstReviseBudgetDetails = data;
        var QtyDecimals=document.getElementById('hdnDefQtyDecimals').value;
        var CurrencyDecimals=document.getElementById('hdnDefCurDecimals').value;
        if (lstReviseBudgetDetails != null && lstReviseBudgetDetails != undefined && lstReviseBudgetDetails.length > 0) {
            //setting grid data
            //FGRIDCONTROL.clearData("grdAddEditBudget", true);
            ClearGrid();
            ClearFooter();
            var cellobj = null;
            var tag = { iRow: 0, iColumn: 0 };
            for (iRowCounter = 0; iRowCounter < lstReviseBudgetDetails.length; iRowCounter++) {
                if (iRowCounter > 5) {
                    FGRIDCONTROL.insertRows("grdAddEditBudget", iRowCounter + 1, 1);
                    var cellObject = FGRIDCONTROL.getCellObject("grdAddEditBudget", (iRowCounter + 1), 1)
                    $(cellObject.cell).html('<i class="icon-edit icon-font9 editField" data-fieldid="' + (iRowCounter + 1) + '" style="padding-left:17px;cursor:pointer;" onclick="ADDEDITBUDGET.OpenSplitPopup(this, ' + (iRowCounter + 1) + ');"></i>');

                }
                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 2)//iBudgetConfirmId
                cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetConfirmId);
                cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetConfirmId);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 3)//BudgetType
                cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetType);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 4)//tag1
                cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag1Name);
                cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag1);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 5)//tag2
                cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag2Name);
                cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag2);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 6)//tag3
                cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag3Name);
                cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Tag3);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 7)//product
                cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Product);
                cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.ProductId);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 8)//account
                cellobj.setCellText(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Account);
                cellobj.setCellData("value",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.AccountId);

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 9)//Quantity
                cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Quantity);
                cellobj.setCellText(FConvert.formatToDecimalPlaces(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.Quantity,parseInt(CurrencyDecimals), true));

                cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter + 1, 12)//Value
                cellobj.setCellData("value", lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetValue);
                //cellobj.setCellText(Number(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetValue).toFixed(CurrencyDecimals));
                cellobj.setCellText(FConvert.formatToDecimalPlaces(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.BudgetValue, parseInt(CurrencyDecimals), true));

                //split details setting
                if(document.getElementById('grdAddEditBudget')!=null && document.getElementById('grdAddEditBudget')!=undefined)
                {
                    var cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter+1, 1);
                    cellobj.setCellData("data-dbsplitdata",JSON.stringify(lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.DbSplit));
                    cellobj.setCellData("data-dbsplitType",lstReviseBudgetDetails[iRowCounter].TransferBudgetFrom.SplitType);
                }

            }

        }
        else
        {
            //FGRIDCONTROL.clearData("grdAddEditBudget", true);
            ClearGrid();
        }
    }
}
function GetEditBudgetData() {
    //filling Confirmed Budget data
    var RevisioData = {
        BudgetId: parseInt(OPTIONCONTROL.getControlValue("optPlanName")),
        RevisionNo: parseInt(document.getElementById("txtVersion").innerHTML),
        RevisionId: parseInt(document.getElementById("hdniRevisionId").value),
        CreatedBy: 1,
        CreatedDate:DATEPICKER.getDate("dpHiddenSystemDateAddEdit"),
        Date: DATEPICKER.getDate("dpBudgetDate"),
        Confirm: false,
        Remarks:  $("#txtNarration").val(),
        lstBudgetDetails: GetBudgetBodyData()
    };
    return RevisioData;
}
function GetAdvanceBudgetInfo(cellobj) {
    //debugger;
    var BudgetId = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
    if(BudgetId==0)
        return;
    var objData=null;
    var iTag1 = parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 4).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 4).getCellData("value"));//Tag1
    var iTag2=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 5).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 5).getCellData("value"));//Tag2;
    var iTag3=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 6).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 6).getCellData("value"));//Tag3;
    var iProductId=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 7).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 7).getCellData("value"));//Product;
    var iAccountId=parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 8).getCellData("value")==""?0:FGRIDCONTROL.getCellObject("grdAddEditBudget", cellobj.iRow, 8).getCellData("value"));//Account;
    var iDate=parseInt(document.getElementById("hdndpValidToDate").value);

    var url = GLOBAL.getContextPath("GetAdvBudget", "Budget", "Budgeting");
    $.ajax({
        url: url,
        type: 'GET',
        data: {
            iTag1:iTag1,
            iTag2:iTag2,
            iTag3:iTag3,
            iProductId:iProductId,
            iAccountId:iAccountId,
            iDate:iDate
        },
        datatype: "JSON",
        contentType: "application/json;",
        cache: false,
        async: false,
        success: function (BudgetData) {
            objData=BudgetData;
        },
        error: function (BudgetData) {
            COMMON.prototype.showMessage("Error,GetAdvanceBudgetInfo");
        }
    });
    return objData;
}
function GetBudgetBodyData() {
    FGRIDCONTROL.update("grdAddEditBudget");
    var Edit=document.getElementById("hdniScreenType").value=='Modify'?'true':'false';
    //debugger
    var lstBudgetData = [];
    var grdAddEditBudget = document.getElementById('grdAddEditBudget_body');
    for (var index = 1; index <= grdAddEditBudget.rows.length; index++) {
        var ActualQty=0;
        var ActualValue=0;
        var AddQty = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 10).getCellData("value");
        var ReduceQty = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 11).getCellData("value");
        if(AddQty>0)
        {
            ActualQty=AddQty;
        }
        else if(ReduceQty>0)
        {
            ActualQty=(-1)*(ReduceQty);
        }
        else if(Edit=='false')
        {
            ActualQty=FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 9).getCellData("value");
        }
        var AddValue = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 13).getCellData("value");
        var ReduceValue = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 14).getCellData("value");
        if(AddValue>0)
        {
            ActualValue=AddValue;
        }
        else if(ReduceValue>0)
        {
            ActualValue=(-1)*(ReduceValue);
        }
        else if(Edit=='false')
        {
            ActualValue=FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 12).getCellData("value");
        }
        var objRow = {
            BudgetDetailId:parseInt(FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 2).getCellData("value")),
            BudgetType: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 3).getCellData("value"),
            Tag1: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 4).getCellData("value"),
            Tag2: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 5).getCellData("value"),
            Tag3: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 6).getCellData("value"),
            ProductId: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 7).getCellData("value"),
            AccountId: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 8).getCellData("value"),
            Quantity: ActualQty,
            Value:ActualValue,
            SplitType: GetRowWiseSplittedType(index),
            SpillOver:GetRowWiseSpillOverType(index),
            DBSplit:GetRowWiseSplittedData(index),
            Narration: FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 15).getCellData("value")
        }
        //   var BudgetConfirmedId = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 1).getCellText("value");

        if (objRow != undefined && objRow != null && (objRow.Value!=0||objRow.Quantity!=0))
        {

            if ((AddQty != 0 || ReduceQty != 0 || AddValue !=0|| ReduceValue !=0)&&Edit=='true')
            {
                lstBudgetData.push(objRow);
            }
            else
            {
                lstBudgetData.push(objRow);
            }
        }
    }
    return lstBudgetData;
}
function Validate() {
    var BudgetId = parseInt(OPTIONCONTROL.getControlValue("optPlanName"));
    if (BudgetId== 0) {
        COMMON.prototype.showMessage("no plan found with this Name");
        return false;
    }
    var PlanName = OPTIONCONTROL.getControlText("optPlanName");
    if (PlanName.trim().length == 0) {
        COMMON.prototype.showMessage("Plan Name can not be empty.");
        return false;
    }
    var grdAddEditBudget = document.getElementById('grdAddEditBudget_body');
    for (var index = 1; index <= grdAddEditBudget.rows.length; index++) {
        var TotalSplitedQty = GetRowWiseSplittedTotalQty(index);
        var TotalSplitedValue = GetRowWiseSplittedTotalValue(index);
        var SplitType = GetRowWiseSplittedType(index);
        var AddQty = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 10).getCellData("value");
        if(SplitType<2)//skip checking 0 and 1
            continue;
        if(AddQty>0)//means Qty Added
        {
            if(parseFloat(TotalSplitedQty)!=parseFloat(AddQty))
            {
                COMMON.prototype.showMessage("Add Qty not match with splited Qty : "+TotalSplitedQty);
                return false;
            }
        }
        var ReduceQty = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 11).getCellData("value");
        if(ReduceQty>0)//means Qty Added
        {
            if(parseFloat(TotalSplitedQty)!=parseFloat(ReduceQty))
            {
                COMMON.prototype.showMessage("ReduceQty not match with splited ReduceQty : "+TotalSplitedQty);
                return false;
            }
        }
        var AddValue = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 13).getCellData("value");
        if(AddValue>0)//means Qty Added
        {
            if(parseFloat(TotalSplitedValue)!=parseFloat(AddValue))
            {
                COMMON.prototype.showMessage("this row is splitted as 'Add Value' not match with splited Add Value : "+TotalSplitedValue);
                return false;
            }
        }
        var ReduceValue = FGRIDCONTROL.getCellObject("grdAddEditBudget", index, 14).getCellData("value");
        if(ReduceValue>0)//means Qty Added
        {
            if(parseFloat(TotalSplitedValue)!=parseFloat(ReduceValue))
            {
                COMMON.prototype.showMessage("Reduce Value not match with splited Reduce Value : "+TotalSplitedValue);
                return false;
            }
        }
    }
    return true;
}
function ClearControls() {
    //debugger
    OPTIONCONTROL.clear("optPlanName");
    document.getElementById("dpLastUpdateDate").innerHTML="-----";
    document.getElementById("dpLastUpdateDate").innerHTML="-----";
    document.getElementById("dpDate").innerHTML="-----";
    document.getElementById("dpValidFromDate").innerHTML="-----";
    document.getElementById("dpValidToDate").innerHTML="-----";
    //FGRIDCONTROL.clearData("grdAddEditBudget", true);
    ClearGrid();
    document.getElementById("txtVersion").setAttribute("data-revisionid", 0);
    document.getElementById("txtVersion").value = 1;
    document.getElementById('txtReviseNo').innerText=0;
    if (document.getElementById('txtBalanceBudget') != null) {
        document.getElementById('txtBalanceBudget').value="";
    }
    $("#grdAddEditBudget_body tr").each(function () {
        $(this).attr("advanceinfodata","");
    });
    document.getElementById('uploadFile').value='';
    FilterClearClick();
}
function ClearGrid()
{
    try
    {
        //FGRIDCONTROL.clearData("grdDefineBudget", true);
        FGRIDCONTROL.update("grdAddEditBudget");
        FGRIDCONTROL.deleteRows(document.getElementById("grdAddEditBudget"), 1, FGRIDCONTROL.getTotalRows(document.getElementById("grdAddEditBudget")));
        FGRIDCONTROL.insertRows(document.getElementById("grdAddEditBudget"), 1, 6);
        AddSplitIcon(true,0);
    }
    catch(err)
    {
        COMMON.prototype.showMessage(err);
    }
}
function AddSplitIcon(IsFromReady, rowindex)
{
    var grdAddEditBudgetbody = document.getElementById('grdAddEditBudget_body');
    if(IsFromReady)
    {
        for (var iRowCounter = 1; iRowCounter <= grdAddEditBudgetbody.rows.length; iRowCounter++) {
            cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", iRowCounter, 1);
            $(cellobj.cell).html('<i class="icon-edit icon-font9 editField" data-fieldid="'+ (iRowCounter) +'" title="@Focus.Resources.Split" style="padding-left:17px;cursor:pointer;"  onclick="ADDEDITBUDGET.OpenSplitPopup(this, '+ (iRowCounter) +');"></i>');


            // $(cellObject.cell).html('<i class="icon-edit icon-font9 editField" data-fieldid="' + iRow + '" style="padding-left:17px;cursor:pointer;" onclick="ADDEDITBUDGET.OpenSplitPopup(this, ' + iRow + ');"></i>');
        }
    }
    else
    {
        cellobj = FGRIDCONTROL.getCellObject("grdAddEditBudget", rowindex, 1);
        $(cellobj.cell).html('<i class="icon-edit icon-font9 editField" data-fieldid="'+ rowindex +'" title="@Focus.Resources.Split" style="padding-left:17px;cursor:pointer;"  onclick="ADDEDITBUDGET.OpenSplitPopup(this, '+ rowindex +');"></i>');

    }
}



function OnClickDefaultFilter(ele) {
    //debugger
    $(ele).toggleClass("icon-expand icon-collepse");
    ADDEDITBUDGET.setHeight(false);
    $("#advanceFilter").slideToggle();
}
function GetDatetime(dtDate)
{
    var iDay = DATE.prototype.getDayFromFocusDate(parseInt(dtDate));
    if(iDay<10)
    {
        iDay='0'+iDay;
    }
    var iMonth = DATE.prototype.getMonthFromFocusDate(parseInt(dtDate));
    if(iMonth<10)
    {
        iMonth='0'+iMonth;
    }
    var iYear = DATE.prototype.getYearFromFocusDate(parseInt(dtDate));
    var lastupdateddate=iDay+"/"+ iMonth+"/"+iYear;
    return lastupdateddate;
}

function ClearFooter()
{
    $("#grdAddEditBudget_body tr").each(function () {
        $(this).attr("advanceinfodata","");
    });

    if(document.getElementById("txtSpendQuantity")!=null)
    {
        document.getElementById("txtSpendQuantity").innerHTML ='';
    }
    if(document.getElementById("txtPreCommitedQuantity")!=null)
    {
        document.getElementById("txtPreCommitedQuantity").innerHTML ='';
    }
    if(document.getElementById("txtCommittedQuantity")!=null)
    {
        document.getElementById("txtCommittedQuantity").innerHTML ='';
    }
    if(document.getElementById("txtBalanceQuantity")!=null)
    {
        document.getElementById("txtBalanceQuantity").innerHTML ='';
    }
    if(document.getElementById("txtSpentBudget")!=null)
    {
        document.getElementById("txtSpentBudget").innerHTML = '';
    }
    if(document.getElementById("txtPreCommittedValue")!=null)
    {
        document.getElementById("txtPreCommittedValue").innerHTML = '';
    }
    if(document.getElementById("txtCommittedBudget")!=null)
    {
        document.getElementById("txtCommittedBudget").innerHTML = '';
    }
    if(document.getElementById("txtBalanceBudget")!=null)
    {
        document.getElementById("txtBalanceBudget").innerHTML = '';
    }
}

function ReadAddEditAttachedFile() {
    //debugger
    var IsValidFile = true;
    var arrFile = document.getElementById("uploadBtn").files;
    $('#uploadFile').val(arrFile[0].name);
    if (arrFile != null && arrFile.length > 0) {
        var obj = {};
        obj.url = GLOBAL.getContextPath("ImportBudgetFile", "Budget", "Budgeting");

        var fileData = new FormData();
        for (var i = 0; i < arrFile.length; i++) {
            var sFileName = arrFile[i].name;
            var sFileSize=arrFile[i].size;
            if(sFileSize < 1000000){
                var size_Kb = Math.floor(sFileSize/1000) + 'KB';
            }else{
                var size_Mb = Math.floor(sFileSize/1000000) ;//+ 'MB';
                if(size_Mb>=50)
                {
                    COMMON.prototype.showMessage("Cannot import " + sFileName + " file" + " size is more than " + "50-MB");
                    document.getElementById('uploadFile').value='';
                    return;
                }
            }
            var sFileExt = (sFileName).substring((sFileName).lastIndexOf('.')).toLowerCase();
            if (sFileExt != ".exe" && sFileExt != ".msi") {
                fileData.append(arrFile[i].name, arrFile[i]);
            }
            else {
                IsValidFile = false;
                COMMON.prototype.showMessage("Cannot import " + sFileExt + " File");
                return false;
            }
        }

        if (IsValidFile) {
            NETWORK.uploadFile(obj,
                true,
                fileData,
                "",
                true,
                "ReadAddEditAttachedFile_Success",
                "GLOBAL.LoadingStart",
                "GLOBAL.LoadingEnd");
        }
    }
}

function ReadAddEditAttachedFile_Success(flag, data) {
    ////debugger
    //debugger
    if (flag) {
        if (data.trim() != "") {
            COMMON.prototype.showMessage(data.trim());
            GLOBAL.LoadingEnd();
            return false;
        }
        if(data.trim()=="")
        {
            IsAttachmentChanged=true;
            GLOBAL.LoadingEnd();
            return true;
        }
    }
    else {
        COMMON.prototype.showMessage(data.trim());
        GLOBAL.LoadingEnd();
        return false;
    }
}
function Download()
{
    //debugger;
    var url = GLOBAL.getContextPath("DownLoadBudgetFile", "Budget", "Budgeting");
    var fileName = document.getElementById("File1").value;
    if (fileName!="") {
        $.ajax({
            url: url,
            type: 'GET',
            data: {
                FileName:fileName
                     
            },
            datatype: "JSON",
            contentType: "application/json;",
            cache: false,
            async: false,
            success: function (data) {
                   
            },
            error: function (data) {
                COMMON.prototype.showMessage("Error:"+data);
            }
        });
    }
}
function ExportClick() {
   // debugger
    var arrexport = [];
    var AllReviseId = [];
    var arrexportbyReviseId = [];
    var ScreenName = document.getElementById("ReviseBudgetType").selectedOptions[0].innerText.trim();
    var ScreenType = document.getElementById("ReviseBudgetType").value;
    //iLayoutId = document.getElementById("dpLayoutName").value;
   
    //var RevisionId = parseInt(document.getElementById("hdniRevisionId").value);
  
            var validfrom = DATEPICKER.getDate("dpValidFromDate");
            var validto = DATEPICKER.getDate("dpValidToDate");
            svalidFrom= DATEPICKER.convertDateIntoString("dpValidFromDate", validfrom);
            svalidTo = DATEPICKER.convertDateIntoString("dpValidToDate", validto);
        var q=parseInt($("#hdnNoofQtyDecimal").val())
        var d=parseInt($("#hdnNoOfDecimal").val())
            for (var row = 1; row <= FGRIDCONTROL.getTotalRows("ReviseHome_Grid") ; row++) {
                var gridRowData = FGRIDCONTROL.getRowValue("ReviseHome_Grid", row);
                if (gridRowData[1].Text != "" & gridRowData[0].Value == true) {
                   
                      BudgetId=parseInt(gridRowData[7].Value),
                      ReviseId= parseInt(gridRowData[8].Value),
                    //var expobj = {
                    //    //BudgetType: gridRowData[1].Text,
                    //    //Tag1: gridRowData[4].Text,
                    //    //Tag2: gridRowData[5].Text,
                    //    //Tag3: gridRowData[6].Text,
                    //    //Product: gridRowData[3].Text,
                    //    //Account: gridRowData[2].Text,
                    //    //Quantity: parseFloat(gridRowData[7].Value).toFixed(q),
                    //    //BudgetValue: parseFloat(gridRowData[8].Value).toFixed(d),
                    //    BudgetId: parseInt(gridRowData[7].Value),
                    //    ReviseId: parseInt(gridRowData[8].Value),
                     
                    //}
                    arrexport.push(ReviseId);
                   
                }

            }
            if (arrexport.length == 0)
            {
                COMMON.prototype.showMessage(Append_Budget.getResourceValue("MRP_R_msgPleaseSelectAnyRow", GetBudgetResourceMessages));
                return false;
            }
            NETWORK.executeServerMethod(GLOBAL.getContextPath("ToExcel", "Budget", "Budgeting"), true, { ScreenName: ScreenName, arrExport: arrexport, ValidFrom: svalidFrom, ValidTo: svalidTo,ScreenType:ScreenType }, "JSON", true, "ExportSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            
        
    
}
function ExportSuccess(flag, data)

{
    //debugger
    if(flag==true)
    {
        if (data.strPath != null && data.strError.length == 0) {
            var url = GLOBAL.getContextPath("DownloadFile", "Budget", "Budgeting").trim();
            //var PlanName = OPTIONCONTROL.getControlText("optPlanName");
            window.location = url + '?m_strPath=' + data.strPath + '&FileName=' + data.strfileName;
        }

        else {
            COMMON.prototype.showMessage("No Data found for exporting");
        }
    }
    else {
        COMMON.prototype.showMessage("Error While Exporting");
    }
};
var FluxPayment = {
    Payment: function (objPayment, fnCallBack) {
        debugger
        var url = GLOBAL.getContextPath("FluxPayment", "FluxPay", "CoreTransactions");
        result = NETWORK.executeServerMethod(
                         url,
                         true,
                         { objPaymentFP: objPayment },
                         "JSON",
                         true,
                         "FluxPayment.FluxPayment_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", fnCallBack);
    },
    FluxPayment_Success: function (flag, data, fnCallBack) {
        debugger;
        //if (flag) {
        //}
        eval(fnCallBack)(data);
    }
}

var FluxMaster = {
    FluxMasterSave: function (objDataMaster, fnCallBack) {
        debugger
        var url = GLOBAL.getContextPath("AddMasterFlux", "FluxPayBenefRegis", "CoreTransactions");

        if (objDataMaster.AccountType == 2) {//Corporate
             url = GLOBAL.getContextPath("CorpMasterSave", "FluxPayAccount", "CoreTransactions");            
        } else {
            url = GLOBAL.getContextPath("AddMasterFlux", "FluxPayBenefRegis", "CoreTransactions");
        }
        result = NETWORK.executeServerMethod(
                         url,
                         true,
                         { data: objDataMaster },
                         "JSON",
                         true,
                         "FluxMaster.FluxMaster_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", fnCallBack);
    },
    FluxMaster_Success: function (flag, data, fnCallBack) {
        debugger;
        //if (flag) {
        //}
        eval(fnCallBack) (data);
    }
};
