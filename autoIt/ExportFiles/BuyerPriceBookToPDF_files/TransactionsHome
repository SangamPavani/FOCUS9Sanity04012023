/* Minification failed. Returning unminified contents.
(1915,49-50): run-time error JS1003: Expected ':': ,
(1915,62-63): run-time error JS1003: Expected ':': ,
(1915,83-84): run-time error JS1003: Expected ':': }
(1942,50-51): run-time error JS1003: Expected ':': ,
(1942,63-64): run-time error JS1003: Expected ':': ,
(1942,79-80): run-time error JS1003: Expected ':': }
(1969,53-54): run-time error JS1003: Expected ':': ,
(1969,66-67): run-time error JS1003: Expected ':': ,
(1969,87-88): run-time error JS1003: Expected ':': }
(2032,52-53): run-time error JS1003: Expected ':': ,
(2032,68-69): run-time error JS1003: Expected ':': ,
(2032,89-90): run-time error JS1003: Expected ':': }
(2063,54-55): run-time error JS1003: Expected ':': ,
(2063,70-71): run-time error JS1003: Expected ':': ,
(2064,44-45): run-time error JS1003: Expected ':': }
(2165,54-55): run-time error JS1003: Expected ':': ,
(2165,70-71): run-time error JS1003: Expected ':': ,
(2165,91-92): run-time error JS1003: Expected ':': }
(2200,49-50): run-time error JS1003: Expected ':': ,
(2200,65-66): run-time error JS1003: Expected ':': ,
(2200,86-87): run-time error JS1003: Expected ':': }
(2241,49-50): run-time error JS1003: Expected ':': ,
(2241,65-66): run-time error JS1003: Expected ':': ,
(2241,86-87): run-time error JS1003: Expected ':': }
(2269,47-48): run-time error JS1003: Expected ':': ,
(2269,63-64): run-time error JS1003: Expected ':': ,
(2269,84-85): run-time error JS1003: Expected ':': }
(2899,90-91): run-time error JS1003: Expected ':': ,
(2899,94-95): run-time error JS1003: Expected ':': ,
(2899,103-104): run-time error JS1003: Expected ':': }
(2979,57-58): run-time error JS1003: Expected ':': }
(3446,53-54): run-time error JS1003: Expected ':': ,
(3446,66-67): run-time error JS1003: Expected ':': }
(3715,33-34): run-time error JS1003: Expected ':': ,
(3715,49-50): run-time error JS1003: Expected ':': ,
(3715,70-71): run-time error JS1003: Expected ':': }
(3780,39-40): run-time error JS1003: Expected ':': ,
(3781,47-48): run-time error JS1003: Expected ':': ,
(3783,29-30): run-time error JS1003: Expected ':': }
(4417,123-124): run-time error JS1195: Expected expression: >
(4417,183-184): run-time error JS1004: Expected ';': )
(4418,29-30): run-time error JS1002: Syntax error: }
(4644,21-22): run-time error JS1002: Syntax error: }
(4654,17-18): run-time error JS1002: Syntax error: }
(4664,13-14): run-time error JS1002: Syntax error: }
(4671,9-10): run-time error JS1002: Syntax error: }
(4675,40-41): run-time error JS1004: Expected ';': {
(4691,6-7): run-time error JS1195: Expected expression: ,
(4694,87-88): run-time error JS1004: Expected ';': {
(4773,6-7): run-time error JS1195: Expected expression: ,
(4776,36-37): run-time error JS1004: Expected ';': {
(4789,6-7): run-time error JS1195: Expected expression: ,
(4792,45-46): run-time error JS1004: Expected ';': {
(4799,6-7): run-time error JS1195: Expected expression: ,
(4802,57-58): run-time error JS1004: Expected ';': {
(4843,6-7): run-time error JS1195: Expected expression: ,
(4845,47-48): run-time error JS1004: Expected ';': {
(4898,6-7): run-time error JS1195: Expected expression: ,
(4900,5-18): run-time error JS1197: Too many errors. The file might not be a JavaScript file: Open_Internal
(4850,21-27): run-time error JS1018: 'return' statement outside of function: return
(4712,29-35): run-time error JS1018: 'return' statement outside of function: return
(4760,29-35): run-time error JS1018: 'return' statement outside of function: return
(4740,37-43): run-time error JS1018: 'return' statement outside of function: return
 */
const transHomeEntry = {
    loadEntryScreen: function (iVoucherType, iViewId, iHomePageViewId) {
        var obj = null;

        try {
            if (FCommon.UI.isButtonEnabled("id_transaction_homescreen_new") == false) {
                return;
            }

            obj = {};
            obj.iVoucherType = iVoucherType;
            obj.lId = 0;
            obj.iViewId = iViewId;
            obj.iHomePageViewId = DataType.toInt(iHomePageViewId);
            obj.sCloseCallback = "transHomeEntry.onClose_Click";
            NETWORK.executeServerMethod(GLOBAL.getContextPath("EntryMain", "TransHome", "Transactions"),
                                        false,
                                        obj,
                                        "html",
                                        true,
                                        "transHomeEntry.CALLBACK.loadEntryScreen",
                                        "transHomeEntry.enableHomeScreenButton(false)",
                                        "transHomeEntry.enableHomeScreenButton(true)",
                                        transHomeEntry.PRIVATE.getEntryContainer());

        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeEntry.loadEntryScreen} " + err.message, "Exception");
        }
    },

    showEntryPage: function (bShow) {
        try {
            if (DataType.toBoolean(bShow) == true) {
                TRANSACTION_MAINSCREEN.showHomePage(false);
                transHomeEntry.PRIVATE.show(true);
            }
            else {
                transHomeEntry.PRIVATE.show(false);
                TRANSACTION_MAINSCREEN.showHomePage(true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeEntry.showEntryPage} " + err.message, "Exception");
        }
    },

    onNew: function () {
        try {
            transEntryGlobal.startWatch();
            transHomeEntry.showEntryPage(true);
            EntryMain.clearDirty();
            EntryMainToolbar.onNew_Click();
            transEntryGlobal.stopWatch();
            transEntryGlobal.showAlert("Screen opened(" + transEntryGlobal.getWatchValue() + ").");
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeEntry.onNew} " + err.message, "Exception");
        }
    },

    onEdit: function (arrHeaderIds, iHomePageViewId) {
        try {
            if(FCommon.UI.isElementExist("id_transaction_homescreen_edit") == false) {
                return;
            }

            if (FCommon.UI.isButtonEnabled("id_transaction_homescreen_edit") == false) {
                if (iHomePageViewId != 10000)  {
                    return;
                }

                //return;
            }

            transHomeEntry.showEntryPage(true);

            if (iHomePageViewId == 0) {
                transEntryDocumentNo.clear();
            }

            EntryMain.clearDirty();
            transEntryServer.loadVoucherById(arrHeaderIds[0],
                                                eLoadTransactionBy.HeaderId,
                                                TRANSACTION_MAINSCREEN.getVoucherType(),
                                                TRANSACTION_MAINSCREEN.getViewId(),
                                                true,
                                                null,
                                                eTranEntryLoadSource.None,
                                                iHomePageViewId);
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeEntry.onEdit} " + err.message, "Exception");
        }
    },

    onConvertLink: function (arrHeaderIds, iBaseVoucherType, iVoucherType, iViewId) {
        try {
            if (FCommon.UI.isButtonEnabled("id_transaction_homescreen_convert") == false) {
                return;
            }

            transEntryGlobal.startWatch();
            transHomeEntry.showEntryPage(true);
            EntryMainUI.reset();

            transEntryInfo.HomePageViewId = -iBaseVoucherType;
            TRANSACTION_ENTRY.TOOLBAR_ACTION.onConvertLinkData(arrHeaderIds, iBaseVoucherType, iVoucherType, iViewId);
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeEntry.onConvertLink} " + err.message, "Exception");
        }
    },

    onClose_Click: function (iVoucherType, iHomePageViewId, iViewId, evt, bRefreshHomePage) {
        try {
            if (bRefreshHomePage == true) {
                TRANSACTION_ENTRY.SERVER.loadHomeScreen(iVoucherType, iHomePageViewId, iViewId);
            }
            else {
                transHomeEntry.showEntryPage(false);
            }
            //transHomeEntry.showEntryPage(false);
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeEntry.onClose_Click} " + err.message, "Exception");
        }
    },

    enableHomeScreenButton: function (bEnable) {
        FCommon.UI.enableButton(bEnable, "id_transaction_homescreen_new");
        FCommon.UI.enableButton(bEnable, "id_transaction_homescreen_edit");
        FCommon.UI.enableButton(bEnable, "id_transaction_homescreen_convert");
    },

    displayLoadingDataError: function (sError) {
        FCommon.UI.removeElement("id_transaction_homescreen_new");
        FCommon.UI.removeElement("id_transaction_homescreen_edit");
        FCommon.UI.removeElement("id_transaction_homescreen_convert");

        if (FCommon.String.isNullOrEmpty(sError, true) == false) {
            COMMON.prototype.showMessage(sError);
        }
    },

    PRIVATE: {
        getEntryContainer: function () {
            let ele = null;

            ele = document.getElementById("id_transaction_homepage_entry");

            return (ele);
        },

        show: function (bShow) {
            let eleContainer = null;

            try {
                eleContainer = transHomeEntry.PRIVATE.getEntryContainer();
                if (DataType.isValidObject(eleContainer) == true) {
                    if (DataType.toBoolean(bShow) == true) {
                        eleContainer.style.display = "";
                    }
                    else {
                        eleContainer.style.display = "none";
                    }
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{transHomeEntry.PRIVATE.show} " + err.message, "Exception");
            }
        }
    },

    CALLBACK: {
        loadEntryScreen: function (bSuccess, html, eleContainer) {
            try {
                if (bSuccess == false) {
                    if (eleContainer.children.length < 1) {
                        transHomeEntry.displayLoadingDataError();
                    }

                    return;
                }

                $(eleContainer).html(html);

                if (eleContainer.children.length < 1) {
                    transHomeEntry.displayLoadingDataError();
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{transHomeEntry.CALLBACK.loadEntryScreen} " + err.message, "Exception");
            }
        }
    }
};
;
const transHomeExternalModule = {
    start: function (objInput, iEvent) {
        let arrData = [];
        let obj = null;

        try {
            arrData = transHomeExternalModule.filterModulesOnEvent(transEntryInfo.Settings.ArrExternalModules, iEvent);
            /*if (DataType.arrayLength(transEntryInfo.Settings.ArrExternalModules) > 0) {
                arrData = DataType.arrayFilterData(transEntryInfo.Settings.ArrExternalModules,
                                                    ["OnEvent", "ModuleType"],
                                                    [iEvent, eExternalModuleType.URL],
                                                    "==");
            }*/

            if (arrData.length > 0) {
                obj = {};
                obj.OnEvent = iEvent;
                obj.FieldId = 0;
                obj.FieldName = "";
                obj.Row = 0;
                obj.Data = { bHomePage: true, arrHeaderId: objInput.data, Input: objInput, VoucherType: TRANSACTION_MAINSCREEN.getVoucherType() };

                if (iEvent == eVoucherExternalModuleEvents.BeforeDelete) {
                    obj.Callback = "transHomeExternalModule.beforeDelete";
                }
                else if (iEvent == eVoucherExternalModuleEvents.BeforeSave) {
                    obj.Callback = "transHomeExternalModule.beforeSuspend";
                }
                    
                transMainExternalModule.addEvent(iEvent, arrData, obj);
                transMainExternalModule.startProcess();
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeExternalModule.start} " + err.message, "Exception");
        }

        return (arrData.length);
    },

    execute: function (objInput) {
        let eleContainer = null;
        let obj = null;
        let cell = null;

        try {
            console.log("transHomeExternalModule.execute::" + DataType.toString(objInput.ModuleName) + "::" + DataType.toString(objInput.FunctionName));

            if(objInput.ModuleType == 4) { // Forms
                obj = {};
                obj.FormId = DataType.toInt(objInput.FunctionName);
                obj.iModuleType = FWrapper.ENUMS.MODULE_TYPE.TransHome;

                eleContainer = FWrapper.getExternalModuleContainer(true, true);
                eleContainer.style.display = "block";
                FORM.GetForm_Voucher(eleContainer, obj);
                return;
            }

            if (DataType.stringEndsWith(objInput.ModuleName.toLowerCase(), ".js") == true) {
                obj = {};
                obj.iRow = 0;
                obj.iColumn = 0;

                if (DataType.isValidObject(objInput.LastResult) == true) {
                    obj.LastResult = objInput.LastResult;
                }

                if (DataType.isValidObject(objInput.Data) == true) {
                    obj.Data = objInput.Data;
                }

                FWrapper.loadExternalJS(objInput.ModuleName,
                                        objInput.FunctionName,
                                        null,
                                        obj.iRow,
                                        obj,
                                        "transHomeExternalModule.onLoadCallback");
            }
            else {
                GLOBAL.LoadingStart();

                FWrapper.openPopup(objInput.ModuleName,
                                    null,
                                    "transHomeExternalModule.onLoadCallback",
                                    "transHomeExternalModule.onLoadCallback");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeExternalModule.execute} " + err.message, "Exception");
        }
    },

    onLoadCallback: function (bSuccess, evt) {
        GLOBAL.LoadingEnd();
    },

    beforeDelete: function (arrResult, tag, evt) {
        let iCounter = 0;
        let iFalseCount = 0;

        try {
            for (iCounter = 0; iCounter < arrResult.length; iCounter++) {
                if (arrResult[iCounter] == false) {
                    iFalseCount++;
                }
            }

            if (iFalseCount == 0) {
                TRANSACTION_MAINSCREEN.SERVER.deleteVoucherById(TRANSACTION_MAINSCREEN.getVoucherType(), tag.Data.Input);
            }
            else {
                COMMON.prototype.showMessage("The assosiated module has dosallowed deleting of this document.");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeExternalModule.beforeDelete} " + err.message, "Exception");
        }
    },

    beforeSuspend: function (arrResult, tag, evt) {
        let iCounter = 0;
        let iFalseCount = 0;

        try {
            for (iCounter = 0; iCounter < arrResult.length; iCounter++) {
                if (arrResult[iCounter] == false) {
                    iFalseCount++;
                }
            }

            if (iFalseCount == 0) {
                TRANSACTION_MAINSCREEN.SERVER.suspendVoucher(tag.Input);
            }
            else {
                COMMON.prototype.showMessage("The assosiated module has dosallowed suspension of this document.");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{transHomeExternalModule.beforeSuspend} " + err.message, "Exception");
        }
    },

    filterModulesOnEvent: function (arrExternalModules, iOnEvent) {
        let iCounter = 0;
        let arrData = [];

        try {
            if (DataType.arrayLength(arrExternalModules) == 0) {
                return (arrData);
            }

            for(iCounter = 0; iCounter < arrExternalModules.length; iCounter++) {
                if(arrExternalModules[iCounter].OnEvent != iOnEvent) {
                    continue;
                }

                if(arrExternalModules[iCounter].ModuleType != 3 && arrExternalModules[iCounter].ModuleType != 4) { // Not 3(URL), 4(Forms)
                    continue;
                }
                
                arrData.push(arrExternalModules[iCounter]);
            }

            //arrData = DataType.arrayFilterData(transEntryInfo.Settings.ArrExternalModules, ["OnEvent", "ModuleType"], [iEvent, eExternalModuleType.URL], "==");
        }
        catch (err) {
            transEntryGlobal.showAlert("{transHomeExternalModule.filterModulesOnEvent} " + err.message, "Exception");
        }

        return (arrData);
    }
};
;
var g_SelectedViewEle;
var m_NoOfRows = 0;
var m_homeFilter = {};
var selectedRowForProcess = undefined;
var msgs = undefined;
var SelectedViewid = 0;
var SelectedFieldid = 0;
var PreviousEle;
var lstPreviousRowEle = undefined;
var objfilter = {};
var arrHomeFilters = {};
var bSaveFilter = false;
var lastSelectedEle = undefined;
var flag = false;
var chkclik = false;
var isSuspend = false;
var m_homePageData = {};

$("#tblBodyTransRender td").click(function () {
    
    var column_num = parseInt($(this).index()) + 1;
    var row_num = parseInt($(this).parent().index())+1;
    var element=document.getElementById("trRender_" + row_num);
    if (column_num == 1) {
        return false;
    }
    else {
        if (selectedRowForProcess != undefined) {      
            $(selectedRowForProcess).removeClass("tranHomeSelectRow");
        }    
        selectedRowForProcess = element;
        if (element.children[1].children[0].checked == false&&chkclik==false) {
           
            $(element).addClass("tranHomeSelectRow");
            if (element.children[0].style.backgroundcolor != "rgb(222, 245, 253)") {
                element.children[0].style.backgroundColor = "#FCF69C";
            }
        }    
    }
    chkclik = false;
});


$("#tblBodyTransRender td").dblclick(function () {
    
    var column_num = parseInt($(this).index()) + 1;
    var row_num = parseInt($(this).parent().index()) + 1;
    var row = document.getElementById("trRender_" + row_num);
    if (column_num == 1) {
        return false;
    }
    else {
        var arrHeaderIds = [];
        arrHeaderIds.push(FConvert.toInt(FCommon.UI.getAttributeData(row.children[0], "headerid")));
        if (arrHeaderIds[0] > 0)
            TRANSACTION_MAINSCREEN.openEntryViewPopup(arrHeaderIds);
    }
});

//var input = document.getElementById("txtSearch");
var timeout = null;


//input.addEventListener('keyup', function (e) {
//
//    clearTimeout(timeout);
//    timeout = setTimeout(function () {
//        TRANSACTION_MAINSCREEN.Search(e.target.value);
//    }, 1000);
//    e.stopImmediatePropagation();
//    return;
//});


window.onkeydown = function (e) {
    if (e.keyCode == 32 && e.target == document.body) {// SPACE BAR

        e.preventDefault();
        if (selectedRowForProcess != undefined) {
            if (selectedRowForProcess.children[1].children[0] != undefined) {
                if (selectedRowForProcess.children[1].children[0].checked == false) {
                    selectedRowForProcess.children[1].children[0].checked = true;
                    $(selectedRowForProcess).removeClass("Reportselectrow");
                    selectedRowForProcess.style.backgroundColor = (selectedRowForProcess.children[1].children[0].checked == true ? "#DEF5FD" : "#FFFFFF");                    
                    selectedRowForProcess.children[0].style.backgroundColor = '#FFFFFF';
                }
                else {
                    selectedRowForProcess.children[1].children[0].checked = false;
                    $(selectedRowForProcess).removeClass("Reportselectrow");
                    selectedRowForProcess.style.backgroundColor = (selectedRowForProcess.children[1].children[0].checked == true ? "#DEF5FD" : "#FFFFFF");                  
                    selectedRowForProcess.children[0].style.backgroundColor = '#FFFFFF';
                }

            }
        }
    }
    if (e.keyCode == 38) {// KEY UP
        e.preventDefault();
        if (selectedRowForProcess != undefined)
            $(selectedRowForProcess).removeClass("Reportselectrow");
        if (selectedRowForProcess.previousElementSibling != null) {
            $(selectedRowForProcess.previousElementSibling).addClass("Reportselectrow");
            selectedRowForProcess.previousElementSibling.style.backgroundColor = '#FFFFFF';
            selectedRowForProcess = selectedRowForProcess.previousElementSibling;
        }
    }
    if (e.keyCode == 40) {//KEY DOWN
        e.preventDefault();
        if (selectedRowForProcess != undefined)
            $(selectedRowForProcess).removeClass("Reportselectrow");
        if (selectedRowForProcess.nextElementSibling != null) {
            $(selectedRowForProcess.nextElementSibling).addClass("Reportselectrow");
            selectedRowForProcess.nextElementSibling.children[0].style.backgroundColor = '#FFFFFF';
            selectedRowForProcess = selectedRowForProcess.nextElementSibling;
        }
    }
}

var transMainExternalModule = new FExternalModule("transHomeExternalModule.execute");


var TRANSACTION_MAINSCREEN = {
    onKeyUp_Search: function (e) {
        
        clearTimeout(timeout);
        timeout = setTimeout(function () {
            TRANSACTION_MAINSCREEN.Search(e.target.value);
        }, 1000);
        e.stopImmediatePropagation();
        return;
    },

    getFilter: function () {
        var arrFilter = null;
        var ele = null;

        try {
            ele = document.getElementById("id_transaction_container");
            if (FCommon.UI.isValidObject(ele) == true) {
                arrFilter = FILTER.getFilterValue(ele.dataset.imenuid, 2);
            }
            
            if (FCommon.UI.isValidObject(arrFilter) == false) {
                arrFilter = [];
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("Exception: {TRANSACTION_MAINSCREEN.getFilter} " + err.message, "Exception");
        }

        return (arrFilter);
    },

    addResizeToColumns: function (tableId) {
        $("#" + tableId + " th").mousedown(function (e) {
            start = $(this);
            index = $(this).index()
            startX = e.pageX;
            startWidth = start.width();
            pressed = true;
        });
        $(document).mousemove(function (e) {
            if (pressed) {
                $(start).addClass("resizing");
                var newWidth = "";
                var child = "";
                var iLanguageID = document.getElementById("hdnLanguageID").value;
                if (iLanguageID == 0 || iLanguageID == undefined) {
                    newWidth = startWidth + (e.pageX - startX);
                    start.width(newWidth);
                    child = $("#" + tableId).find(e.target);
                    if (child != undefined && child != null && child.length > 0)
                        child[0].style.width = parseInt(child[0].style.width.substring(child[0].style.width.length - 2)) + newWidth + "px";
                }
                else {
                    newWidth = startWidth - (e.pageX - startX);
                    start.width(newWidth);
                    child = $("#" + tableId).find(e.target);
                    if (child != undefined && child != null && child.length > 0)
                        child[0].style.width = parseInt(child[0].style.width.substring(child[0].style.width.length + 2)) - newWidth + "px";
                }
            }
        });

        $(document).mouseup(function () {
            if (pressed) {
                $(start).removeClass("resizing");
                pressed = false;
            }
        });
    },
    adjustHeight: function () {
        var eleDataRow = null;
        var iPageHeight = 0;
        var iContainerTop = 0;
        var rectFooter = null;
        var iHeight = 0;

        try {
            UIContainer.show(ePageContainerType.Default);

            iPageHeight = GLOBAL.getPageHeight();
            iContainerTop = document.getElementById("id_transaction_container").getBoundingClientRect().top;
            rectFooter = document.getElementById("tblFooterReportRender").getBoundingClientRect();
            eleDataRow = document.getElementById("id_transaction_datatable");
            document.getElementById("tblHeadTransRender").style.overflow = "hidden";
            iHeight = ((iPageHeight - (eleDataRow.getBoundingClientRect().top + iContainerTop) + (rectFooter.bottom - rectFooter.top)) + 40);
            eleDataRow.style.height = iHeight + "px";
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.adjustHeight} " + err.message, "Exception");
        }
    },
    adjustHeightforviews: function () {

        var eleDataRow = null;
        var iPageHeight = 0;
        var iContainerTop = 0;
        var rectFooter = null;
        var iHeight = 0;

        try {
            UIContainer.show(ePageContainerType.Default);

            iPageHeight = GLOBAL.getPageHeight();
            iContainerTop = document.getElementById("id_transaction_container").getBoundingClientRect().top;
            rectFooter = document.getElementById("tblFooterReportRender").getBoundingClientRect();
            eleDataRow = document.getElementById("id_transaction_datatable");
            document.getElementById("tblHeadTransRender").style.overflow = "hidden";
            iHeight = ((iPageHeight - (eleDataRow.getBoundingClientRect().top + iContainerTop) - (rectFooter.bottom - rectFooter.top)) + 40) - 255;
            eleDataRow.style.height = iHeight + "px";
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.adjustHeight} " + err.message, "Exception");
        }

    },

    onNew_Click: function () {
        transHomeEntry.onNew();        
        return;

        var arrHeaderIds = [];

        arrHeaderIds.push(0);
        TRANSACTION_MAINSCREEN.openEntryViewPopup(arrHeaderIds);
    },

    onEdit_Click: function () {
        var iHomePageViewId = 0;
        var arrHeaderIds = [];
        var result = null;

        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        if (result.lValue < 0) {
            COMMON.prototype.showMessage(result.sValue, "Exception");
            return;
        }
        else if (result.lValue == 0) {
            COMMON.prototype.showMessage(msgs.NoRowSelectedToEdit, msgs.Error);
            return;
        }

        arrHeaderIds = result.data;
        if (arrHeaderIds.length > 1) {
            COMMON.prototype.showMessage("Multiple vouchers cannot be edited simultaneously.", msgs.Error);
            return;
        }

        result = TRANSACTION_MAINSCREEN.getSelectedViewIdForConvertLink();
        iHomePageViewId = FConvert.toInt(result.data);

        transHomeEntry.onEdit(arrHeaderIds, iHomePageViewId);

        //TRANSACTION_MAINSCREEN.openEntryViewPopup(arrHeaderIds);
    },

    onDeleteVoucher_Click: function (ele, event) {
        var result = null;
        var sValue = "";
        var iVoucherType = 0;
        var bResult = false;

        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        if (result.lValue < 0) {
            COMMON.prototype.showMessage(result.sValue, "Exception");
            return;
        }
        else if (result.lValue == 0) {
            COMMON.prototype.showMessage(msgs.NoRowSelectedToDelete, msgs.Error);
            return;
        }

        sValue = document.getElementById("id_hidden_deletevoucherconfirm").value;
        if (FCommon.String.isNullOrEmpty(sValue) == true) {
            sValue = "Are you sure you want to delete selected transactions ?";
        }

        bResult = confirm(sValue);
        if (bResult == true) {
            //iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            //result = TRANSACTION_MAINSCREEN.SERVER.deleteVoucherById(iVoucherType, result);
            TRANSACTION_MAINSCREEN.processDelete(result);
        }

        return (result);
    },

    processDelete: function (objInput) {
        var result = null;

        try {
            if (transHomeExternalModule.start(objInput) == 0) {
                result = TRANSACTION_MAINSCREEN.SERVER.deleteVoucherById(TRANSACTION_MAINSCREEN.getVoucherType(), objInput);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.processDelete} " + err.message, "Exception");
        }

        return (result);
    },

    processSuspend: function (arrHeaderId) {
        try {
            if (transHomeExternalModule.start(arrHeaderId, eVoucherExternalModuleEvents.BeforeSave) == 0) {
                TRANSACTION_MAINSCREEN.SERVER.suspendVoucher(arrHeaderId);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.processSuspend} " + err.message, "Exception");
        }
    },


    //chkPickQty_click:function(){
    //    if (document.getElementById("chkPickQty").checked == true) {
    //        document.getElementById("dv_txtInputQty").style.pointerEvents = "none";
    //        document.getElementById("txtInputQty").style.background = "#e6e6e6";
    //        document.getElementById("dv_txtInputQty").style.opacity = 0.5;
    //    }
    //    else {
    //        document.getElementById("dv_txtInputQty").style.pointerEvents = "auto";
    //        document.getElementById("txtInputQty").style.background = "#ffffff";
    //        document.getElementById("dv_txtInputQty").style.opacity = 1;
    //    }
    //},

    PrintBarcode_Click: function () {
        //$("#dv_BarcodePrint").modal('show');
        //document.getElementById("chkPickQty").checked = true;
        //document.getElementById("dv_txtInputQty").style.pointerEvents = "none";
        //document.getElementById("txtInputQty").style.background = "#e6e6e6";
        //document.getElementById("dv_txtInputQty").style.opacity = 0.5;
        //OPTIONCONTROL.setControlValue("opt_BarcodeLayoutID", -1);
        var result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        var iSubreportId = 1;
        if (result.lValue < 0) {
            COMMON.prototype.showMessage(result.sValue, "Exception");
            return;
        }
        else if (result.lValue == 0) {
            COMMON.prototype.showMessage("No row selected", "Error");
            return;
        }
        PRINTBARCODE.loadPopup(iVoucherType,
                                result.data,
                                iSubreportId,
                                TRANSACTION_MAINSCREEN.getModuleType(),
                                TRANSACTION_MAINSCREEN.getPopupContainerElement());
    },
    ChequeReturn_Click: function () {

        $("#dv_ChequePopup").modal('show');
        // document.getElementById("GridColumns").style.display = "none";
        document.getElementById("id_ChequeNo").value = "";
        OPTIONCONTROL.setControlValue("Partyid", "");
        FGRIDCONTROL.clearData("id_GridColumns", true);
    },

    ExportToXML: function () {
        
        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        if (result.lValue < 0) {
            COMMON.prototype.showMessage(result.sValue, "Exception");
            return;
        }
        else if (result.lValue == 0) {
            COMMON.prototype.showMessage(msgs.NoRowSelectedToExport, msgs.Error);
            return;
        }
        NETWORK.executeServerMethod(
                GLOBAL.getContextPath("ExportToXMLFile", "TransHome", "Transactions"),
                true,
                { arrHeaderId: result.data },
                "",
                true,
                "TRANSACTION_MAINSCREEN.onExportSuccess",
                "GLOBAL.LoadingStart",
                "GLOBAL.LoadingEnd"
            );
    },

    onExportSuccess: function (bSuccess, data) {
        if (bSuccess) {
            transEntryGlobal.m_bDisableClear = true;
            window.location = GLOBAL.getContextPath("GetDocumentToPrint", "TransHome", "Transactions") + '?fileName=' + data.FileName + '&bDownload = true';
            transEntryGlobal.m_bDisableClear = false;
        }
        else {
            COMMON.prototype.showMessage("Error while exporting", "");
        }
    },

    //PrintBarcode:function(){

    //    result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
    //    if (result.lValue < 0) {
    //        COMMON.prototype.showMessage(result.sValue, "Exception");
    //        return;
    //    }
    //    else if (result.lValue == 0) {
    //        COMMON.prototype.showMessage("No row selected to edit.", "Error");
    //        return;
    //    }

    //    //Validate Data
    //    {
    //        if (parseInt(OPTIONCONTROL.getControlValue("opt_BarcodeLayoutID")) <= 0)
    //            return;
    //    }
    //    NETWORK.executeServerMethod(GLOBAL.getContextPath("PrintBarcode", "TransHome", "Transactions"),
    //                                    true,
    //                                    //{ iLayoutId: 62, iDocumnetSetId: parseInt(OPTIONCONTROL.getControlValue("opt_DocSetID")), iVoucherType: parseInt(document.getElementById("id_hidden_vouchertype").value), iTransactionId: parseInt(result.data[0]), iPrintType: parseInt(document.getElementById("cmd_LayoutOptions").value), bAttachDocuments: document.getElementById("dv_bAttachments").checked },

    //                                    { iLayoutId: parseInt(OPTIONCONTROL.getControlValue("opt_BarcodeLayoutID")),bPickQty : document.getElementById("chkPickQty").checked,iBarcodeQty: parseInt(document.getElementById("txtInputQty").value) , iVoucherType: TRANSACTION_MAINSCREEN.getVoucherType(), iTransactionId: parseInt(result.data[0])},
    //                                    "",
    //                                    true,
    //                                    "TRANSACTION_MAINSCREEN.VoucherPrintSuccess",
    //                                    "",
    //                                    "",
    //                                    true); 
    //},


    onPrint_ClickOld: function () {
        var iVoucherType = 0;
        var result = null;
        var data = [];
        var iTotalrows = parseInt(document.getElementById("id_transaction_currentpage").dataset.itotalrows);
        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();

        if (result.arrVoucherNo.length < 1 && iTotalrows == 0) {
            data.push(0);
            PRINTVOUCHER.loadPopup(iVoucherType,
                                    data,
                                    TRANSACTION_MAINSCREEN.getModuleType(),
                                    TRANSACTION_MAINSCREEN.getPopupContainerElement());
        }
        else {
            if (result.lValue < 0) {
                COMMON.prototype.showMessage(result.sValue, "Exception");
                return;
            }
            else if (result.lValue == 0) {
                COMMON.prototype.showMessage("No row selected", "Error");
                return;
            }
            PRINTVOUCHER.loadPopup(iVoucherType,
                                    result.data,
                                    TRANSACTION_MAINSCREEN.getModuleType(),
                                    TRANSACTION_MAINSCREEN.getPopupContainerElement());
        }
    },

    //Method added by niranjan for getting the design layout screen even if no data is been selected.
    onPrint_Click: function () {
        var iVoucherType = 0;
        var result = null;
        var data = [];
        var iTotalrows = parseInt(document.getElementById("id_transaction_currentpage").dataset.itotalrows);
        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();

        if (result.arrVoucherNo.length < 1 && iTotalrows == 0) {
            data.push(0);
            PRINTVOUCHER.loadPopup(iVoucherType,
                                    data,
                                    TRANSACTION_MAINSCREEN.getModuleType(),
                                    TRANSACTION_MAINSCREEN.getPopupContainerElement(),
                                    false);
        }
        else {
            if (result.lValue == 0 && lyt == true) {
                COMMON.prototype.showMessage("No row selected", "Error");
                return;
            }
            else {
                if (result.lValue <= 0) {
                    data.push(0);
                    PRINTVOUCHER.loadPopup(iVoucherType,
                                            data,
                                            TRANSACTION_MAINSCREEN.getModuleType(),
                                            TRANSACTION_MAINSCREEN.getPopupContainerElement(),
                                            false);
                }
                else {
                    PRINTVOUCHER.loadPopup(iVoucherType,
                                            result.data,
                                            TRANSACTION_MAINSCREEN.getModuleType(),
                                            TRANSACTION_MAINSCREEN.getPopupContainerElement(),
                                            false);
                }
            }
        }
    },

    onAuthorize_Click: function () {
        var result = null;

        try {
            var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
            if (result.lValue < 0) {
                COMMON.prototype.showMessage(result.sValue, "Exception");
                return;
            }
            else if (result.lValue == 0) {
                COMMON.prototype.showMessage("No row selected to authorize.", "Error");
                return;
            }
            //distinct headerids
            var headerids = [];
            $.each(result.data, function (i, el) {
                if ($.inArray(el, headerids) === -1) headerids.push(el);
            });
            result.data = headerids;
            NETWORK.executeServerMethod(GLOBAL.getContextPath("showAuthorize", "TransHome", "Transactions"),
                           true,
                           { iheaderId: result.data, iVoucherType: iVoucherType, iCount: result.data.length },
                           "json",
                           true,
                           "TRANSACTION_MAINSCREEN.authorizeSuccess",
                           "GLOBAL.LoadingStart",
                           "GLOBAL.LoadingEnd",
                           result);
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onAuthorize_Click} " + err.message, "Exception");
        }
    },
    authorizeSuccess: function (bSuccess, data, result) {
        var sTitle = "";

        try {
            if (bSuccess == false) {
                return;
            }

            if (data.lValue > 0) {
                sTitle = "Authorization Remark";
                if (data.bApprovalRemarksMandatory == false) {
                    sTitle += " (Optional)";
                }

                TRANSACTION_MAINSCREEN.showAuthorizationRemarkPopup(result.data, 0, sTitle, data.bApprovalRemarksMandatory, data.bRemarksOnAuth);
            }
            else {
                COMMON.prototype.showMessage(data.sValue, sTitle);
            }

        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.authorizeSuccess} " + err.message, "Exception");
        }
    },

    onSuspend_Click: function () {
        var result = null;
        var iVoucherType = 0;

        try {
            result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
            if (result.lValue < 0) {
                COMMON.prototype.showMessage(result.sValue, "Exception");
                return;
            }
            else if (result.lValue == 0) {
                COMMON.prototype.showMessage("No row is Selected to Suspend", "Error");
                return;
            }

            TRANSACTION_MAINSCREEN.processSuspend(result.data);
            //iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            //isSuspend = true;
            //result = NETWORK.executeServerMethod(GLOBAL.getContextPath("authorizeTransactions", "TransHome", "Transactions"),
            //                            true,
            //                            { ScreenId: iVoucherType, HeaderId: result.data, type: 3 },
            //                            "json",
            //                            true,
            //                            "TRANSACTION_MAINSCREEN.CALLBACK.authorizeSuspendOrReject",
            //                            "GLOBAL.LoadingStart",
            //                            "GLOBAL.LoadingEnd");
            //if (FCommon.String.isNullOrEmpty(result.sValue) == false) {
            //    COMMON.prototype.showMessage(result.sValue, "");
            //}    
           
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onSuspend_Click} " + err.message, "Exception");
        }
    },

    onReject_Click: function () {
        var result = null;

        try {
            var  iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
            if (result.lValue < 0) {
                COMMON.prototype.showMessage(result.sValue, "Exception");
                return;
            }
            else if (result.lValue == 0) {
                COMMON.prototype.showMessage("No row selected to reject.", "Error");
                return;
            }
            NETWORK.executeServerMethod(GLOBAL.getContextPath("showAuthorize", "TransHome", "Transactions"),
                                     true,
                                     { iheaderId: result.data, iVoucherType: iVoucherType, iCount: result.data.length },
                                     "json",
                                     true,
                                     "TRANSACTION_MAINSCREEN.onRejectSuccess",
                                     "GLOBAL.LoadingStart",
                                     "GLOBAL.LoadingEnd",
                                     result);
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onReject_Click} " + err.message, "Exception");
        }
    },
    onRejectSuccess: function (bSuccess, data, result) {
        var sTitle = "";

        try {
            if (bSuccess == false) {
                return;
            }

            if (data.lValue > 0) {
                sTitle = "Reject Remark";
                if (data.bApprovalRemarksMandatory == false) {
                    sTitle += " (Optional)";
                }

                TRANSACTION_MAINSCREEN.showAuthorizationRemarkPopup(result.data, 1, sTitle, data.bRejectionRemarksMandatory, data.bRemarksOnReject);
            }
            else {
                COMMON.prototype.showMessage(data.sValue, "");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onRejectSuccess} " + err.message, "Exception");
        }
    },

    showAuthorizationRemarkPopup: function (arrHeaderIds, iType, sCaption, bMandatory, bShowRemark) {
        var objInput = null;
        var sRemark = "";
        var result = null;
        
        try {
            objInput = {};
            objInput.arrHeaderIds = arrHeaderIds;
            objInput.iType = iType;
            objInput.iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            objInput.bMandatory = FConvert.toBoolean(bMandatory);

            if (bShowRemark == false) {
                result = NETWORK.executeServerMethod(GLOBAL.getContextPath("authorizeTransactions", "TransHome", "Transactions"),
                                                true,
                                                { ScreenId: objInput.iVoucherType, HeaderId: objInput.arrHeaderIds, type: objInput.iType, sRemark: sRemark },
                                                "json",
                                                true,
                                                "TRANSACTION_MAINSCREEN.CALLBACK.authorizeSuspendOrReject",
                                                "GLOBAL.LoadingStart",
                                                "GLOBAL.LoadingEnd");
                if (FCommon.String.isNullOrEmpty(result.sValue) == false) {
                    COMMON.prototype.showMessage(result.sValue, "");
                }
            }
            else {
                FCommon.UI.setText("id_transaction_authorization_remark_label", sCaption);
                FCommon.UI.setText("id_transaction_authorization_remark", "");
                $('#id_transaction_authorization_remark_popup').modal('show');
                $("#id_transaction_authorization_remark_popup_ok").click(objInput, function (evt) {

                    sRemark = FCommon.UI.getText("id_transaction_authorization_remark");
                    if (objInput.bMandatory == true && FCommon.String.isNullOrEmpty(sRemark, true) == true) {
                        COMMON.prototype.showMessage("Remark is mandatory.");
                        return;
                    }

                    $('#id_transaction_authorization_remark_popup').modal('hide');
                    $('.modal-backdrop').remove();

                    result = NETWORK.executeServerMethod(GLOBAL.getContextPath("authorizeTransactions", "TransHome", "Transactions"),
                                                true,
                                                { ScreenId: objInput.iVoucherType, HeaderId: objInput.arrHeaderIds, type: objInput.iType, sRemark: sRemark },
                                                "json",
                                                true,
                                                "TRANSACTION_MAINSCREEN.CALLBACK.authorizeSuspendOrReject",
                                                "GLOBAL.LoadingStart",
                                                "GLOBAL.LoadingEnd");
                    if (FCommon.String.isNullOrEmpty(result.sValue) == false) {
                        COMMON.prototype.showMessage(result.sValue, "");
                    }
                });
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.showAuthorizationRemarkPopup} " + err.message, "Exception");
        }
    },

    showAuthorizationButton: function (bShow) {
        var eleButton = null;

        try {
            eleButton = document.getElementById("id_transaction_homescreen_authorize");
            if (FCommon.UI.isValidObject(eleButton) == true) {
                eleButton.style.display = (bShow == true) ? "" : "none";
            }

            eleButton = document.getElementById("id_transaction_homescreen_reject");
            if (FCommon.UI.isValidObject(eleButton) == true) {
                eleButton.style.display = (bShow == true) ? "" : "none";
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.showAuthorizationButton} " + err.message);
        }
    },

    showConvertButton: function (bShow) {
        var eleButton = null;

        try {
            eleButton = document.getElementById("id_transaction_homescreen_edit");
            if (FCommon.UI.isValidObject(eleButton) == true) {
                eleButton.style.display = (bShow == true) ? "none" : "";
            }

            eleButton = document.getElementById("id_transaction_homescreen_convert");
            if (FCommon.UI.isValidObject(eleButton) == true) {
                eleButton.style.display = (bShow == true) ? "" : "none";
            }

            eleButton = document.getElementById("id_transaction_homescreen_edit");
            if (FCommon.UI.isValidObject(eleButton) == true) {
                eleButton.style.display = (bShow == true) ? "none" : "";
            }

        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.showConvertButton} " + err.message);
        }
    },
    ViewHomeicons: function (ele) {
      
            var iViewId = 0;
            var sName = "";
            var eleCheck = null;
        try {
            m_NoOfRows = 0;
           
            eleCheck = document.getElementById("HeaderChkBox");
            if (FCommon.UI.isValidObject(eleCheck) == true) {
                eleCheck.checked = false;
            }

            TRANSACTION_MAINSCREEN.unselectAllViews();

            iViewId = FConvert.toInt(ele.children[0].getAttribute("data-id"));
            sName = COMMON.prototype.getElementText(ele.children[0]);
            if (iViewId < 0 && FCommon.String.startsWith(sName, "*") == false) {
                TRANSACTION_MAINSCREEN.showConvertButton(true);
            }
            else {
                TRANSACTION_MAINSCREEN.showConvertButton(false);
            }
            if (iViewId == 0) {
                document.getElementById("SelectDefaultView").checked = true;
            } else {
                if (iprevViewId == iViewId) {
                    document.getElementById("SelectDefaultView").checked = true;
                        } else {
                    document.getElementById("SelectDefaultView").checked = false;
                        }
            }

            if (FCommon.UI.isValidObject(document.getElementById("id_transaction_homescreen_Delete")) == true) {
                if (iViewId == 10000) {
                    TRANSACTION_MAINSCREEN.DisableDivision("id_transaction_homescreen_Delete");
                }
                else {
                    TRANSACTION_MAINSCREEN.EnableDivision("id_transaction_homescreen_Delete");
                }
            }
            if (iViewId == 10000) {
                if (FCommon.UI.isValidObject(document.getElementById("id_transaction_homescreen_edit")) == true) {
                    TRANSACTION_MAINSCREEN.DisableDivision("id_transaction_homescreen_edit");
                }
                var  eleButton = document.getElementById("id_transaction_homescreen_convert");
                if (FCommon.UI.isValidObject(eleButton) == true) {
                    eleButton.style.display = "";
                }
            }
            else {
                if (FCommon.UI.isValidObject(document.getElementById("id_transaction_homescreen_edit")) == true) {
                    TRANSACTION_MAINSCREEN.EnableDivision("id_transaction_homescreen_edit");
                }
            }
            if (iViewId < 0 || iViewId == 10000) {
                if (FCommon.UI.isValidObject(document.getElementById("btnTransHomePrint")) == true) {
                    TRANSACTION_MAINSCREEN.DisableDivision("btnTransHomePrint");
                }
            }
            else {

                if (FCommon.UI.isValidObject(document.getElementById("btnTransHomePrint")) == true) {
                    TRANSACTION_MAINSCREEN.EnableDivision("btnTransHomePrint");
                }
            }
            if (iViewId > 0 || iViewId == 10000 || iViewId < 0) {
                if (FCommon.UI.isValidObject(document.getElementById("btnCustomize")) == true) {
                    TRANSACTION_MAINSCREEN.DisableDivision("btnCustomize");
                }
            }
            else {
                if (FCommon.UI.isValidObject(document.getElementById("btnCustomize")) == true) {
                    TRANSACTION_MAINSCREEN.EnableDivision("btnCustomize");
                }
            }
            if (FCommon.UI.isValidObject(document.getElementById("transhomeRefresh")) == true) {
                if (iViewId != 0) {
                    document.getElementById("transhomeRefresh").style.display = 'none';
                    document.getElementById("transhomeRefresh").parentElement.parentElement.style.display = 'none';
                }
                else {
                    document.getElementById("transhomeRefresh").style.display = 'block';
                    document.getElementById("transhomeRefresh").parentElement.parentElement.style.display = '';
                }
            }

            //if (FCommon.String.startsWith(sName, "*") == true) {
            //    TRANSACTION_MAINSCREEN.showAuthorizationButton(true);
            //}
            //else {
            //    TRANSACTION_MAINSCREEN.showAuthorizationButton(false);
            //}

            $(ele.children[0]).addClass("theme_color-inverse");
            TRANSACTION_MAINSCREEN.setCurrentPage(1);

            g_iTotalPages = 0;
            g_SelectedView = iViewId;
            SelectedViewid = iViewId;
            document.getElementById("id_hidden_viewid_value").value=SelectedViewid
            if (parseInt(g_SelectedView) > 0 && parseInt(g_SelectedView) < 10000) {
                TRANSACTION_MAINSCREEN.EnableDivision("btnDeleteview");
                TRANSACTION_MAINSCREEN.EnableDivision("btnEditView");
            }
            else {
                TRANSACTION_MAINSCREEN.DisableDivision("btnDeleteview");
                TRANSACTION_MAINSCREEN.DisableDivision("btnEditView");
            }
            if (ele.parentNode.id == "id_Sub_transaction_viewcontainer") {
                document.getElementById("btnMoreViews").innerHTML = '...... <span class="caret"></span>';
                document.getElementById("btnMoreViews").style.color = '#34C4F9';
            }
            else {
                if (document.getElementById("btnMoreViews") != undefined) {
                    document.getElementById("btnMoreViews").innerHTML = 'More <span class="caret"></span>';
                    document.getElementById("btnMoreViews").style.color = 'black';
                }
            }
            var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            //NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewHeaderData", "TransHome", "Transactions"),
            //                               true,
            //                               {
            //                                   iVoucherType:iVoucherType,
            //                                   iViewId: g_SelectedView
            //                               },
            //                               "",
            //                               true,
            //                               "TRANSACTION_MAINSCREEN.SuccessViewHeaderData",
            //                               "",
            //                               "",
            //                               iViewId);
          
            
       

        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN} " + err.message, "Exception");
        }

    },
    onView_Click: function (ele) {
        
        $("#id_Sub_transaction_viewcontainer").css("display", "none");
        var iViewId = FConvert.toInt(ele.children[0].getAttribute("data-id"));
        g_SelectedViewEle = ele;
        bloadscreen = false;
        TRANSACTION_MAINSCREEN.ViewHomeicons(ele);
        TRANSACTION_MAINSCREEN.SERVER.getViewData(iViewId);
    },
    SuccessViewHeaderData: function (bSuccess, data, tag) {

        $("#tblHeadTransRender").children().remove();
        $("#tblBodyTransRender").children().remove();
        $("#tblHeadTransRender").html(data);
        if (tag != null) {
            TRANSACTION_MAINSCREEN.SERVER.getViewData(tag);
        }
        SelectedViewid = tag;
    },
    onDeleteView_Click: function () {
        //alert("Delete View");
        if (confirm("Äre you sure to delete view.") == true) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("DeleteView", "TransHome", "Transactions"),
                                           true, {
                                               iViewId: g_SelectedView,
                                               iVoucherType:TRANSACTION_MAINSCREEN.getVoucherType()
                                           },
                                           "",
                                           true,
                                           "TRANSACTION_MAINSCREEN.onViewdeleted",
                                           "",
                                           "",
                                           true);
        }
    },

    onViewdeleted: function (bSuccess, data) {
        var bFound = false;
        var iViewId;
        if (bSuccess) {
            if (data.iDeleted == 1) {
                
                iViewId = data.iViewId;
                //for (var i = 0 ; i < document.getElementById("id_transaction_viewcontainer").children.length; i++) {
                //    if (document.getElementById("id_transaction_viewcontainer").children[i].children[0].dataset.id == iViewId) {
                //        bFound = true;
                //        document.getElementById("id_transaction_viewcontainer").removeChild(document.getElementById("id_transaction_viewcontainer").children[i]);
                //        break;
                //    }
                //}
                //if (!bFound) {
                //    for (var i = 0 ; i < document.getElementById("id_Sub_transaction_viewcontainer").children.length; i++) {
                //        if (document.getElementById("id_Sub_transaction_viewcontainer").children[i].children[0].dataset.id == iViewId) {
                //            document.getElementById("id_Sub_transaction_viewcontainer").removeChild(document.getElementById("id_Sub_transaction_viewcontainer").children[i]);
                //            break;
                //        }
                //    }
                //}
                TRANSACTION_MAINSCREEN.DisableDivision("btnDeleteview");
                TRANSACTION_MAINSCREEN.DisableDivision("btnEditView");
                if (document.getElementById("btnMoreViews") != undefined) {
                    document.getElementById("btnMoreViews").innerHTML = 'More <span class="caret"></span>';
                    document.getElementById("btnMoreViews").style.color = 'black';
                }
                TRANSACTION_MAINSCREEN.onRefresh_click();
                COMMON.prototype.showMessage("View deleted successfully.", "");
            }
            else {
                COMMON.prototype.showMessage("Errro while deleting view", "");
            }
        }
        else {
            COMMON.prototype.showMessage("Errro while deleting view", "");
        }
    },

    onCreateView_Click: function () {
        //alert("Create View");
        $("#dvCreateEditView").modal("show");

        this.ResetViewFields();
        document.getElementById("btnCreateView").dataset.selected = "true";
        document.getElementById("btnEditView").dataset.selected = "false";
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        var DatasetId = 0;
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewFilterDataSource", "TransHome", "Transactions"),
                                               true,
                                               { iVoucherType: iVoucherType, iDatasetId: DatasetId, arrFilter: null, iFilterId: document.getElementById("id_transaction_container").dataset.imenuid, iFilterCount: 1 },
                                               "",
                                               true,
                                               "TRANSACTION_MAINSCREEN.createViewFilter",
                                               "",
                                               "",
                                               true);
    },

    onEditView_Click: function () {
        
        //alert("Edit View");
        $("#dvCreateEditView").modal("show");
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        this.ResetViewFields();
        document.getElementById("btnCreateView").dataset.selected = "false";
        document.getElementById("btnEditView").dataset.selected = "true";
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewFieldsData", "TransHome", "Transactions"),
                                       true, { iVoucherType: iVoucherType, iViewId: g_SelectedView },
                                       "",
                                       true,
                                       "TRANSACTION_MAINSCREEN.setViewFieldsData",
                                       "",
                                       "",
                                       true);
    },

    ResetViewFields: function () {
        document.getElementById("cmbDataSet").value = 0;
        document.getElementById("cmbViewType").value = 0;
        document.getElementById("txtViewName").value = "";
        //reset filter
        document.getElementById("cmbAuthorization").value = 0;
        document.getElementById("cmbCheckStatus").value = 0;
        document.getElementById("cmbQC").value = 0;
    },

    setViewFieldsData: function (bSuccess, data) {
        
        var objTransview = data.ViewData;
        var iSummary = parseInt(data.ViewData.iSummary);
        var iAuthorized = parseInt(data.ViewData.iAuthorized);
        var iChecked = parseInt(data.ViewData.iChecked);
        var iQcDone = parseInt(data.ViewData.iQCDone);
        var iSuspend = parseInt(data.ViewData.iSuspend);
        document.getElementById("cmbViewType").value = 0;
        document.getElementById("cmbAuthorization").value = 0;
        document.getElementById("cmbCheckStatus").value = 0;
        document.getElementById("cmbQC").value = 0;

        if (objTransview.iBaseVoucher == 0) {
            document.getElementById("cmbDataSet").value = 0;
        }
        else {
            if (objTransview.iBaseVoucher == 18)//(int)VTTYPE.SALES)
                document.getElementById("cmbDataSet").value = 2;
            else
                document.getElementById("cmbDataSet").value = 1;
        }

        if(data.ViewData.bSummary==true) {
            document.getElementById("cmbViewType").value = 1;
        }
        else {
            document.getElementById("cmbViewType").value = 0;            
        }
        document.getElementById("txtViewName").value = objTransview.sViewName;

        switch (iAuthorized) {         
            case 0:
                document.getElementById("cmbAuthorization").value = 0;
                break;
            case 1:
                document.getElementById("cmbAuthorization").value = 1;
                break;
            case 2:
                document.getElementById("cmbAuthorization").value = 2;
                break;
            case 3:
                document.getElementById("cmbAuthorization").value = 3;
                break;
            case 4:
                document.getElementById("cmbAuthorization").value = 4;
                break;
        }
        switch (iChecked) {
            case 0:
                document.getElementById("cmbCheckStatus").value = 0;
                break;
            case 1:
                document.getElementById("cmbCheckStatus").value = 1;
                break;
            case 2:
                document.getElementById("cmbCheckStatus").value = 2;
                break;
        }
        switch (iQcDone) {
            case 0:
                document.getElementById("cmbQC").value = 0;
                break;
            case 1:
                document.getElementById("cmbQC").value = 1;
                break;
            case 2:
                document.getElementById("cmbQC").value = 2;
                break;
        }
        switch (iSuspend) {
            case 0:
                document.getElementById("Suspendstatus").value = 0;
                break;
            case 1:
                document.getElementById("Suspendstatus").value = 1;
                break;
            case 2:
                document.getElementById("Suspendstatus").value = 2;
                break;
        }   
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        var DatasetId = document.getElementById("cmbDataSet").value;
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewFilterDataSource", "TransHome", "Transactions"),
                                               true,
                                               { iVoucherType: iVoucherType, iDatasetId: DatasetId, arrFilter: objTransview.ArrFilter, iFilterId: document.getElementById("id_transaction_container").dataset.imenuid, iFilterCount: 1 },
                                               "",
                                               true,
                                               "TRANSACTION_MAINSCREEN.createViewFilter",
                                               "",
                                               "",
                                               true);
    },

    createViewFilter: function (bsuccess, data) {
        //
        $("#dv_Filter").html(data);
        //document.getElementById("dv_Filter").innerHTML = data;
    },

    getViewFieldsData: function () {
        var TransView = {};
        var iAuthorized = -1;
        var iChecked = -1;
        var iQcDone = -1;
        var iSummary = -1;
        var iSuspend = -1;
        try {
            TransView.ArrFilter = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 1); //FILTER.getFilterValue("Id_FilterView");
            if (document.getElementById("txtViewName").value.trim().length == 0) {
                COMMON.prototype.showMessage("View name should not be empty", "");
                return;
            }
            //if (TransView.ArrFilter.length <= 0) {
            //    alert("No condition has been defined.");
            //    return;
            //}
            if (document.getElementById("btnCreateView").dataset.selected == "true") {
                //check duplicate view name
                //return;
                for (var i = 0 ; i < document.getElementById("id_transaction_viewcontainer").children.length; i++) {
                    if (document.getElementById("txtViewName").value.toLowerCase() == document.getElementById("id_transaction_viewcontainer").children[i].children[0].innerHTML.toLowerCase()) {
                        COMMON.prototype.showMessage("view name already exists", "");
                        return;
                    }
                    if (i >= 5) {
                        if (FCommon.UI.isValidObject(document.getElementById("id_Sub_transaction_viewcontainer"))) {
                            for (var j = 0; j < document.getElementById("id_Sub_transaction_viewcontainer").children.length; j++) {
                                if (document.getElementById("txtViewName").value.toLowerCase() == document.getElementById("id_Sub_transaction_viewcontainer").children[j].children[0].innerHTML.toLowerCase()) {
                                    COMMON.prototype.showMessage("view name already exists", "");
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            TransView.ArrVoucherTriggersFilter = null;
            if (document.getElementById("cmbAuthorization").value == 0)
                iAuthorized = 0;
            else if (document.getElementById("cmbAuthorization").value == 1)
                iAuthorized = 1;
            else if (document.getElementById("cmbAuthorization").value == 4)
                iAuthorized = 4;
            else if (document.getElementById("cmbAuthorization").value == 3)
                iAuthorized = 3;
            else
                iAuthorized = 2;

            if (document.getElementById("cmbCheckStatus").value == 0)
                iChecked = 0;
            else if (document.getElementById("cmbCheckStatus").value == 1)
                iChecked = 1;
            else
                iChecked = 2;

            if (document.getElementById("cmbQC").value == 0)
                iQcDone = 0;
            else if (document.getElementById("cmbQC").value == 1)
                iQcDone = 1;
            else
                iQcDone = 2;
            if (document.getElementById("Suspendstatus").value == 0)
                iSuspend = 0;
            else if (document.getElementById("Suspendstatus").value == 1)
                iSuspend = 1;
            else
                iSuspend = 2;

            if (document.getElementById("cmbViewType").value == 0)
                iSummary = 0;
            else
                iSummary = 1;
            if (document.getElementById("btnCreateView").dataset.selected == "false") {
                TransView.iViewId = parseInt(g_SelectedView);
            }
            else {
                TransView.iViewId = 0;
            }
            TransView.sViewName = document.getElementById("txtViewName").value;
            TransView.iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            TransView.iAuthorized = iAuthorized;
            TransView.iChecked = iChecked;
            TransView.iQCDone = iQcDone;
            TransView.iSuspend = iSuspend;
            if (iSummary == 1)
                TransView.bSummary = true;
            TransView.iSettings = parseInt(iAuthorized | iChecked << 2 | iQcDone << 4 | iSummary << 6);

            if (document.getElementById("cmbDataSet").value > 0) {
                if (document.getElementById("cmbDataSet").value == 1)//"Pending purchases"
                    TransView.iBaseVoucher = 8;//(int)VTTYPE.PURCH;
                else
                    TransView.iBaseVoucher = 18;//(int)VTTYPE.SALES;
            }
            else
                TransView.iBaseVoucher = 0;

            NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveViewFieldsData", "TransHome", "Transactions"),
                                                   true,
                                                   { objTransView: TransView },
                                                   "",
                                                   true,
                                                   "TRANSACTION_MAINSCREEN.onViewSaveSuccess",
                                                   "",
                                                   "",
                                                   true);
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "EXCEPTION::getViewFieldsData");
        }
    },

    onViewSaveSuccess: function (bsuccess, data) {
        if (bsuccess) {
            if (parseInt(data.iCreated) == 1) {

                if (document.getElementById("btnCreateView").dataset.selected == "true") {
                    TRANSACTION_MAINSCREEN.AddNewViewToLi(data);
                    COMMON.prototype.showMessage("View saved successfully", "");
                }
                else {
                    g_SelectedViewEle.children[0].text = data.sViewName;
                    COMMON.prototype.showMessage("View updated successfully", "");
                }
            }
            else {
                COMMON.prototype.showMessage("error while saving data", "");
            }
        }
        else {
            COMMON.prototype.showMessage("error while saving data", "");
        }
        $('#dvCreateEditView').modal('hide');
        if (document.getElementById("btnCreateView").dataset.selected == "false") {
            $(document.getElementById("id_transaction_viewcontainer").children[0]).click();
        }
    },

    AddNewViewToLi: function (data) {
        var li = document.createElement('li');
        li.style.paddingTop = "5px";
        li.style.paddingBottom = "0px";
        li.setAttribute("onclick", "TRANSACTION_MAINSCREEN.onView_Click(this)");
        var aTag = document.createElement('a');
        aTag.setAttribute('href', "#");
        aTag.innerHTML = data.sViewName;
        //aTag.classList.add("transaction_viewname_anchor");
        aTag.classList.add("font-5");
        aTag.setAttribute("data-id", data.iViewId);
        aTag.style.paddingTop = "5px";
        aTag.style.paddingBottom = "10px";

        var parentElement = document.getElementById("id_transaction_viewcontainer");

        if (parentElement.children.length < 5) {
            aTag.classList.add("transaction_viewname_anchor");
            li.appendChild(aTag);
            parentElement.insertBefore(li, parentElement.children[parentElement.children.length - 1]);
        }
        else {
            li.appendChild(aTag);
            if (document.getElementById("id_Sub_transaction_viewcontainer") == null || document.getElementById("id_Sub_transaction_viewcontainer") == undefined) {
                {
                    var li2 = document.createElement('li');
                    li2.style.paddingTop = "2px";
                    var btn = document.createElement('button');
                    btn.type = "button";
                    btn.id = "btnMoreViews";
                    btn.innerHTML = 'More <span class="caret"></span>';
                    btn.classList.add("Fbutton-fixed");
                    btn.classList.add("dropdown-toggle");
                    btn.setAttribute("data-toggle", "dropdown");
                    btn.setAttribute("onclick", "showMoreViews()");

                    //var span = document.createElement('span');
                    //span.classList.add("caret");
                    //btn.appendChild(span);

                    var ul = document.createElement('ul');
                    ul.id = "id_Sub_transaction_viewcontainer";
                    ul.classList.add("dropdown-menu");
                    ul.appendChild(li);
                    li2.appendChild(btn);
                    li2.appendChild(ul);
                    parentElement.insertBefore(li2, parentElement.children[parentElement.children.length - 1]);
                }
            }
            else {
                document.getElementById("id_Sub_transaction_viewcontainer").appendChild(li);
            }
        }
    },

    EnableDivision: function (id) {
        document.getElementById(id).style.pointerEvents = "visible";
        document.getElementById(id).style.opacity = 1;
    },

    DisableDivision: function (id) {
        var ele = null;

        try {
            ele = document.getElementById(id);
            if (FCommon.UI.isValidObject(ele) == true) {
                ele.style.pointerEvents = "none";
                ele.style.opacity = 0.4;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.DisableDivision} " + err.message, "Exception");
        }
    },

    onCustomizeVoucher_Click: function (ilayoutid) {
        //alert("Customize Voucher");
        var result = null;
        result = REPORT.getReportCustomizeView(
            {
                ReportId: TRANSACTION_MAINSCREEN.getVoucherType(), ReportName: document.getElementById("dv_sVoucherName").innerHTML, Module: null, LayoutId: parseInt(ilayoutid), bIsFromTransactions: true
            },
            "TRANSACTION_MAINSCREEN.setCustomizePageData",
            "GLOBAL.LoadingStart",
            "GLOBAL.LoadingEnd");
        // result = REPORT.getReportCustomizeView({ ReportId: TRANSACTION_MAINSCREEN.getVoucherType(), ReportName: document.getElementById("dv_sVoucherName").innerHTML, Module: null, LayoutId: parseInt(ilayoutid), bIsFromTransactions: true }, null, "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        //return;
        /////////////
        //if (result != null) {
        //    if (result.lValue < 1) {
        //        COMMON.prototype.showMessage(result.sValue,"");
        //    }
        //    else {
        //        document.getElementById("dv_TranTable").style.display = "none";
        //        document.getElementById("dv_TranHomeHeading").style.display = "none";

        //        document.getElementById("dv_TranCustomize").style.display = "block";
        //        document.getElementById("dv_TranCustomize").style.height = GLOBAL.getPageHeight() + 40 - document.getElementById("dv_TranCustomize").getBoundingClientRect().top + "px";
        //        //document.getElementById("dv_TranCustomize").innerHTML = result.data;
        //        $("#dv_TranCustomize").html(result.data);
        //        document.getElementById("btnCustomizeClose").setAttribute("value", "Back");
        //        document.getElementById("btnCustomizeClose").setAttribute("onclick", "TRANSACTION_MAINSCREEN.CloseHomeCustomise()");
        //        //document.getElementById("Save").setAttribute("onclick", "TRANSACTION_MAINSCREEN.SaveCustomise()");
        //        //document.getElementById("Deleteayout").setAttribute("onclick", "TRANSACTION_MAINSCREEN.DeleteCustomizeLayout()");
        //    }
        //}
    },

    setCustomizePageData: function (bsuccess, result) {
        try {
            if (bsuccess == false) {
                return;
            }

            document.getElementById("dv_TranTable").style.display = "none";
            document.getElementById("dv_TranHomeHeading").style.display = "none";
            document.getElementById("id_transaction_container").style.display = "none";

            document.getElementById("dv_TranCustomize").style.display = "block";
            document.getElementById("dv_TranCustomize").style.height = GLOBAL.getPageHeight() + 40 - document.getElementById("dv_TranCustomize").getBoundingClientRect().top + "px";
            $("#dv_TranCustomize").html(result);
            document.getElementById("btnCustomizeClose").setAttribute("value", "Back");
            document.getElementById("btnCustomizeClose").setAttribute("onclick", "TRANSACTION_MAINSCREEN.CloseHomeCustomise()");

        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.setCustomizePageData} " +err.message, "Exception");
        }
    },

    CloseHomeCustomise: function () {

        document.getElementById("dv_TranTable").style.display = "block";
        document.getElementById("dv_TranHomeHeading").style.display = "block";
        document.getElementById("id_transaction_container").style.display = "block";
        document.getElementById("dv_TranCustomize").style.display = "none";
    },

    onFilterVoucher_Click: function (iVoucherType, iMenuid) {
        
        if (arr_Transhomefilter != undefined && arr_Transhomefilter.length > 0) {
            m_homeFilter = arr_Transhomefilter // save premanently
        }
        else if (arrHomeFilters != undefined && arrHomeFilters.length > 0) {
            m_homeFilter = arrHomeFilters; // normal filter
        }
        else if (arr_Viewhomefilter != undefined && arr_Viewhomefilter.length > 0) {
            m_homeFilter = arr_Viewhomefilter;// on view click filter
        }
        else if (homefilter != undefined && homefilter.length > 0 && bloadscreen == true)
        {
            m_homeFilter = homefilter;// filter on reloadscreen
        }
        if (bloadscreen)
        {
            SelectedViewid = Selectedview;
        }
        var iviewid = SelectedViewid;
        if (iviewid != null && iviewid < 0 && iviewid != -10000 && (iviewid*-1) > 255) {
            iVoucherType = iviewid * -1;//set for base vouchertype
        }
        // $("#dv_HomeFilter").modal("show");
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetHomeFilterView", "TransHome", "Transactions"),
                                                      true,
                                                      { iVoucherType: iVoucherType, iMenuid: iMenuid, arrFilter: m_homeFilter },
                                                      "",
                                                      true,
                                                      "TRANSACTION_MAINSCREEN.HomeFilter",
                                                      "GLOBAL.LoadingStart",
                                                      "GLOBAL.LoadingEnd",
                                                      iviewid);
    },
    HomeFilter: function (bSuccess, data, tag) {
        debugger
        $("#dv_HomeFilter").html(data);
        $("#dv_HomeFilter").modal("show");
        var id_homefilter = document.getElementById("id_TransHomeFilter");
        if (FCommon.UI.isValidObject(id_homefilter) == true) {
            id_homefiltercolor = id_homefilter.style.color;
            if (arr_Transhomefilter != null && arr_Transhomefilter.length > 0) {
                document.getElementById("chkSaveFilter").checked = true;
            }
            else {
                document.getElementById("chkSaveFilter").checked = false;
            }
        }
        SelectedViewid = tag;

        // FILTER.setFilter(document.getElementById("id_transaction_container").dataset.imenuid, 2, m_homeFilter);
    },
    closeHomeFilter: function () {

        if (m_homeFilter != null) {
            FILTER.setFilter(document.getElementById("id_transaction_container").dataset.imenuid, 2, m_homeFilter);
        }
    },


    saveHomeFilter: function () {
        debugger
        var jqResult = null;
        //for update the Advancefilter control on Ok or Save filter control so that leave event of last row should update 
        FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
        //var dateelement = $('[data-dtflag*="on"]');
        //if (dateelement.length > 0)
        //    FILTER.ADVANCEFILTER.UpdateDateControl();
        //var element = $('[data-opflag*="on"]');
        //if (element.length > 0)
        //    FILTER.ADVANCEFILTER.UpdateOptionControl();
        arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);// FILTER.getFilterValue("Id_FilterView" + "_HomeFilter");
        for (var i = 0; i < arrHomeFilters.length; i++) {
            arrHomeFilters[i].ParentId = 0;
        }
        var id_homefilter = document.getElementById("id_TransHomeFilter");
        if (arrHomeFilters != null && arrHomeFilters.length != 0) {
            if (FCommon.UI.isValidObject(id_homefilter) == true) {
                id_homefilter.children[0].style.color = "red";

            }
        }
        else {
            if (FCommon.UI.isValidObject(id_homefilter) == true) {
                id_homefilter.children[0].style.color = "";
            }
        }
        //set FilterValue(after getFilterValue filter gets refresh)
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        //var iviewid = TRANSACTION_MAINSCREEN.getSelectedViewId();
        //var ViewId = g_SelectedView;
        var viewid = SelectedViewid;
        //NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewFilterDataSource", "TransHome", "Transactions"),
        //                                              true,
        //                                              { iVoucherType: iVoucherType, iDatasetId: 0, arrFilter: arrHomeFilters, iFilterId: document.getElementById("id_transaction_container").dataset.imenuid, iFilterCount: 2 },
        //                                              "",
        //                                              true,
        //                                              "TRANSACTION_MAINSCREEN.createHomeFilter",
        //                                              "",
        //                                              "",
        //                                              true);
        //apply filter on data
        TRANSACTION_MAINSCREEN.unselectAllViews();
        if (FCommon.UI.isValidObject(document.getElementById("id_transaction_viewcontainer")) == true) {
            jqResult = $("#id_transaction_viewcontainer a");
            for (i = 0; i < jqResult.length; i++) {
                if (FConvert.toInt(FCommon.UI.getAttributeData(jqResult[i], "id")) == viewid) {
                    jqResult[i].className = "theme_color-inverse";
                    break;
                }
            }
        }
        var chkfilter = document.getElementById("chkSaveFilter");
        if (chkfilter != null && chkfilter.checked == true) {
            bSaveFilter = true;
           
            arr_Transhomefilter = arrHomeFilters;
            objfilter.iReportId = TRANSACTION_MAINSCREEN.getVoucherType();
            objfilter.iViewid = viewid;
            objfilter.arrFilter = arrHomeFilters;
            NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveTransFilter", "TransHome", "Transactions"),
                                        true, objfilter,
                                        "",
                                        true,
                                        "TRANSACTION_MAINSCREEN.savePermantHomeFilter",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd",
                                        { viewid, bSaveFilter, arr_Transhomefilter});
        }
        else {
            bSaveFilter = false;
            arrHomeFilters = arrHomeFilters;
            homefilter = arrHomeFilters;
            arr_Transhomefilter = null;
            //var id_homefilter = document.getElementById("id_TransHomeFilter");
            //if (arrHomeFilters != null && arrHomeFilters.length > 0) {
            //    if (FCommon.UI.isValidObject(id_homefilter) == true) {
            //        id_homefilter.children[0].style.color = "red";
            //    }
            //}
            //else {
            //    if (FCommon.UI.isValidObject(id_homefilter) == true) {
            //        id_homefilter.style.color = "";
            //    }
            //}
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewData", "TransHome", "Transactions"),
                                         true, {
                                             iVoucherType: TRANSACTION_MAINSCREEN.getVoucherType(), iViewId: viewid, arrHomeFilters: arrHomeFilters
                                         },
                                         "",
                                         true,
                                         "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                         "GLOBAL.LoadingStart",
                                         "GLOBAL.LoadingEnd",
                                         { viewid, bSaveFilter, arrHomeFilters});
        }
        TRANSACTION_MAINSCREEN.setCurrentPage(1);
        TRANSACTION_MAINSCREEN.activateNavigationButton();

    },
    savePermantHomeFilter: function (bSuccess, data, tag) {
        if (bSuccess) {
            if (data.ID == 1) {
                var viewid = tag.viewid;
                var id_homefilter = document.getElementById("id_TransHomeFilter");
                if (FCommon.UI.isValidObject(id_homefilter) == true) {
                    id_homefilter.children[0].style.color = data.Name;
                }
                //if (arrHomeFilters == null) {
                //    arrHomeFilters = [];
                //}
                arr_Transhomefilter = tag.arr_Transhomefilter;
                NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewData", "TransHome", "Transactions"),
                                            true, {
                                                iVoucherType: TRANSACTION_MAINSCREEN.getVoucherType(), iViewId: viewid, arrHomeFilters: data.Tag
                                            },
                                            "",
                                            true,
                                            "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd",
                                            { viewid, bSaveFilter, arr_Transhomefilter});
            }
        }
    },

    Sorting: function (ele) {
        
        SelectedFieldid = ele.dataset.fieldid;
        var aliasname = ele.dataset.aliasname;
        if (PreviousEle != null)
            PreviousEle.style.backgroundColor = "";

        ele.style.backgroundColor = "#FCF69C";
        var rowcount = document.getElementById("id_transaction_currentpage").dataset.itotalrows;
        if (lstPreviousRowEle != undefined || lstPreviousRowEle != null)
            for (var i = 0 ; i < rowcount ; i++) {
                var rowcountid = lstPreviousRowEle[i];
                rowcountid.style.backgroundColor = "";
            }
        lstPreviousRowEle = [];
        for (var i = 0 ; i < rowcount ; i++) {
            var rowsortid = document.getElementById("tdSort_" + (i + 1) + "'_col_'" + aliasname);
            if (PreviousEle != null)
                PreviousEle.style.backgroundColor = "";
            if (rowsortid != null)
                rowsortid.style.backgroundColor = "#FCF69C";

            lstPreviousRowEle.push(rowsortid);
        }
        //SelectedViewid = g_SelectedViewEle;
        PreviousEle = ele;
    },
    getAscOrDesc: function (bAsc) {
        var val = bAsc;
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        //var iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage() - 1;
        if (homefilter != undefined && homefilter.length > 0 && bloadscreen == true) {
            arrHomeFilters = homefilter;// filter on reloadscreen
        } else {
            arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
        }
        var chkfilter = document.getElementById("chkSaveFilter");
        if (chkfilter != null && chkfilter.checked == true) {
            debugger
            arr_Transhomefilter = arrHomeFilters;
            arrHomeFilters = [];
        }
        TRANSACTION_MAINSCREEN.setCurrentPage(1);
        TRANSACTION_MAINSCREEN.activateNavigationButton();

        var viewid = SelectedViewid;
        if (SelectedFieldid == 0) {
            COMMON.prototype.showMessage("Please select the column to be sorted", "");
        }
        else if (SelectedFieldid > 0) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetSortingData", "TransHome", "Transactions"),
                                           true,
                                               { iFieldid: SelectedFieldid, bAsc: val, iVoucherType: iVoucherType, iViewId: viewid, arrfiltervalues: arrHomeFilters },
                                           "",
                                           true,
                                           "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                           "GLOBAL.LoadingStart",
                                           "GLOBAL.LoadingEnd",
                                           { viewid, arrHomeFilters, arr_Transhomefilter});
        }
    },

    getGroupbyData: function (fieldId) {
        debugger

        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        var viewid = SelectedViewid;

        if (homefilter != undefined && homefilter.length > 0 && bloadscreen == true) {
            arrHomeFilters = homefilter;// filter on reloadscreen
        }
        else {
            arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
        }
        TRANSACTION_MAINSCREEN.setCurrentPage(1);
        TRANSACTION_MAINSCREEN.activateNavigationButton();
                
        if (fieldId > 0) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetGroupingData", "TransHome", "Transactions"),
                                           true,
                                               {
                                                   iFieldid: fieldId, iVoucherType: iVoucherType, iViewId: viewid, arrfiltervalues: arrHomeFilters
                                               },
                                           "",
                                           true,
                                           "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                           "GLOBAL.LoadingStart",
                                           "GLOBAL.LoadingEnd",
                                           {
                                               viewid, arrHomeFilters, arr_Transhomefilter
                                           });
        }
    },
    setPagefilterData: function (bSuccess, data, tag) {
        debugger
        var element = null;
        var viewid = SelectedViewid;
        try {
            //if (SelectedViewid == 0) {
            //    var chkDefault = document.getElementById("SelectDefaultView");
            //    chkDefault.checked = false;
            //}
            $("#id_TranTable").children().remove();

            $("#id_TranTable").html(data);
            if (FCommon.UI.isValidObject(document.getElementById("divPagebuttons")) == true && 
                FCommon.UI.isValidObject(document.getElementById("endoffile")) == true) {
                document.getElementById("divPagebuttons").style.display = "block";
                if (FConvert.toBoolean(document.getElementById('endoffile').getAttribute('data-value')) == true) {
                    document.getElementById("divPagebuttons").style.display = "none";
                }
            }

            if (tag != undefined) {
                if (tag.viewid != null) {
                    SelectedViewid = tag.viewid;
                }   
                if (arr_Viewhomefilter != null && arr_Viewhomefilter.length != 0) {
                    // arr_Transhomefilter = arr_Viewhomefilter;
                    arr_Viewhomefilter = arr_Viewhomefilter;
                    if (FCommon.UI.isValidObject(document.getElementById("id_TransHomeFilter")) == true) {
                        //document.getElementById("id_TransHomeFilter").firstChild.style.color = "red";
                        document.getElementById("id_TransHomeFilter").children[0].color = "red";
                    }
                }
                else {
                    if (FCommon.UI.isValidObject(document.getElementById("id_TransHomeFilter")) == true) {
                        document.getElementById("id_TransHomeFilter").children[0].color = "";
                    }
                }
            }
            element = document.getElementById("endoffile");
            if (FCommon.UI.isValidObject(element) == false) {
                return;
            }

            if (g_iTotalPages == 0 && element.getAttribute("data-value").toLowerCase() == "true") {
                g_iTotalPages = parseInt(document.getElementById("id_transaction_currentpage").getAttribute("data-value"));
            }
            TRANSACTION_MAINSCREEN.activateNavigationButton();
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.setPageData} " + err.message, "Exception");
        }
    },
    onHeaderCheckbox_Click: function (ele) {
        
        var eleBody = null;
        var iCounter = 0;

        try {
            eleBody = document.getElementById("tblBodyTransRender");;
            if (FCommon.UI.isValidObject(eleBody) == false) {
                return;
            }
            m_NoOfRows = 0;
            // 0 for hidden input
            for (iCounter = 0; iCounter < eleBody.children.length; iCounter++) {
                TRANSACTION_MAINSCREEN.selectUnselectRow(eleBody.children[iCounter], ele.checked, false);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onHeaderCheckbox_Click} " + err.message, "Exception");
        }
    },   
    firstPageData: function () {
        try {
            debugger
            var iPageNo = 0;
            //arr_Transhomefilter = [];
            arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
            var chkfilter = document.getElementById("chkSaveFilter");
            if (chkfilter != null && chkfilter.checked == true) {
                arr_Transhomefilter = arrHomeFilters;
                arrHomeFilters = [];
            }
            var viewid = 0;
            if (document.getElementById("id_transaction_viewcontainer") != null) {
                viewid = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
            } else {

                viewid = document.getElementById("id_hidden_viewid_value").value;
            }
            TRANSACTION_MAINSCREEN.setCurrentPage(iPageNo + 1);
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetReportPageData", "TransHome", "Transactions"),
                                    true, { iCurrentPage: iPageNo, arrfiltervalues: arrHomeFilters },
                                            "",
                                            true,
                                            "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd",
                                             { viewid, arrHomeFilters, arr_Transhomefilter}
                                             );
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onNextPage_Click} " + err.message, "Exception");
        }
    },
    onNextPage_Click: function () {
        
        var iPageNo = 0;
        var viewid = 0;
        arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
        var chkfilter = document.getElementById("chkSaveFilter");
        if (chkfilter != null && chkfilter.checked == true) {
            arr_Transhomefilter = arrHomeFilters;
            arrHomeFilters = [];
        }
        if (document.getElementById("id_transaction_viewcontainer") != null) {
            viewid = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
        } else {

            viewid = document.getElementById("id_hidden_viewid_value").value;
        }
        try {
            iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage();
            iPageNo++;
            TRANSACTION_MAINSCREEN.setCurrentPage(iPageNo);

            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetReportPageData", "TransHome", "Transactions"),
                                true, { iCurrentPage: iPageNo - 1, arrfiltervalues: arrHomeFilters },
                                        "",
                                        true,
                                        "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd",
                                        { viewid, arrHomeFilters, arr_Transhomefilter}
                                       );
            //FILTER.setFilter(document.getElementById("id_transaction_container").dataset.imenuid, 2, arr_Transhomefilter);
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onNextPage_Click} " + err.message, "Exception");
        }
    },

    onPreviousPage_Click: function () {
        var iPageNo = 0;
        var viewid = 0;
        if (document.getElementById("id_transaction_viewcontainer") != null) {
            viewid = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
        } else {

            viewid = document.getElementById("id_hidden_viewid_value").value;
        }
        arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
        var chkfilter = document.getElementById("chkSaveFilter");
        if (chkfilter != null && chkfilter.checked == true) {
            arr_Transhomefilter = arrHomeFilters;
            arrHomeFilters = [];
        }
        try {
            iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage();
            if (iPageNo == 1) {
                return;
            }

            iPageNo--;
            TRANSACTION_MAINSCREEN.setCurrentPage(iPageNo);

            NETWORK.executeServerMethod(
                GLOBAL.getContextPath("GetReportPageData", "TransHome", "Transactions"),
                                     true, { iCurrentPage: iPageNo - 1, arrfiltervalues: arrHomeFilters },
                                        "",
                                        true,
                                        "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd",
                                        { viewid, arrHomeFilters, arr_Transhomefilter});
            //FILTER.setFilter(document.getElementById("id_transaction_container").dataset.imenuid, 2, arr_Transhomefilter);
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onPreviousPage_Click} " + err.message, "Exception");
        }
    },
    lastPagedata: function () {
        var viewid = 0;
        if (document.getElementById("id_transaction_viewcontainer") != null) {
            viewid = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
        } else {

            viewid = document.getElementById("id_hidden_viewid_value").value;
        }
        arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
        var chkfilter = document.getElementById("chkSaveFilter");
        if (chkfilter != null && chkfilter.checked == true) {            
            arr_Transhomefilter = arrHomeFilters;
            arrHomeFilters = [];
        }
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetReportLastPageData", "TransHome", "Transactions"),
                               true, { arrFilter: arrHomeFilters },
                                       "",
                                       true,
                                       "TRANSACTION_MAINSCREEN.setData",
                                       "GLOBAL.LoadingStart",
                                       "GLOBAL.LoadingEnd",
                                      { viewid, arrHomeFilters, arr_Transhomefilter});
    },
    setData: function (bSuccess, data, tag) {
        debugger
        var element = null;
        var viewid = SelectedViewid;
        try {
            $("#id_TranTable").children().remove();
            $("#id_TranTable").html(data);
            if (tag != undefined) {
                if (tag.viewid != null) {
                    SelectedViewid = tag.viewid;
                }
                if (tag.arr_Transhomefilter != null && tag.arr_Transhomefilter.length != 0) {
                    arr_Transhomefilter = tag.arr_Transhomefilter;
                }
                else if (tag.arrHomeFilters != null && tag.arrHomeFilters.length != 0) {
                    arrHomeFilters = tag.arrHomeFilters;
                }
            }        
            element = document.getElementById("endoffile");
            if (FCommon.UI.isValidObject(element) == false) {
                return;
            }
            if (g_iTotalPages == 0 && element.getAttribute("data-value").toLowerCase() == "true") {
                g_iTotalPages = parseInt(document.getElementById("id_transaction_currentpage").getAttribute("data-value"));
            }
            if (document.getElementById('id_transaction_currentpage') != null) {
                var pgno = document.getElementById("id_transaction_currentpage").dataset.value;
                TRANSACTION_MAINSCREEN.setCurrentPage(pgno);
            }
            TRANSACTION_MAINSCREEN.activateNavigationButton();
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.setPageData} " + err.message, "Exception");
        }
    },
    onSettings_Click: function (ele, event) {
        var sCallback = "";
        var iVoucherType = 0;
        var iSourceId = 0;
        try {
            m_homePageData = null;
            NETWORK.executeServerMethod(GLOBAL.getContextPath("CloseReport", "TransHome", "Transactions"), true);
            iSourceId = FConvert.toInt(document.getElementById("id_hidden_source_value").value);
            iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();

            switch (iSourceId) {//Set Callback function
                case 106:
                    sCallback = "NETWORK.executeServerMethod('" + GLOBAL.getContextPath("DataStatisticsBacktrack", "RD", "RD") + "',true,{ iTypeId: " + iVoucherType + " },'html', true,'DATASTATISTICS.openHomeTransPageSuccess','GLOBAL.LoadingStart','GLOBAL.LoadingEnd')";
                    break;
                default:
                    sCallback = "NETWORK.executeServerMethod('" + GLOBAL.getContextPath("TransHomeView", "TransHome", "Transactions") + "', true, { iTypeId: " + iVoucherType + ", iMenuId: 0 }, 'html', true, 'GLOBAL.LoadScreen', 'GLOBAL.LoadingStart', 'GLOBAL.LoadingEnd')";
                    break;
            }
            GLOBAL.OpenVoucherWizard(iVoucherType, sCallback);
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.onSettings_Click} " + err.message, "Exception");
        }
    },

    onClose_Click: function () {
        m_homePageData = null;
        TRANSACTION_MAINSCREEN.closePopupOver();
        NETWORK.executeServerMethod(GLOBAL.getContextPath("CloseReport", "TransHome", "Transactions"), true);        
        GLOBAL.gotoHomePage();
        homefilter =arr_Viewhomefilter=arrHomeFilters= [];
        bloadscreen = false;
    },
    onOk_Click: function () {
        
        if (FCommon.UI.isValidObject(document.getElementById('id_View_popup')) == true) {
            document.getElementById("id_View_popup").style.display = "none";
        }
        if (FCommon.UI.isValidObject(document.getElementById('id_transaction_container')) == true) {
            document.getElementById('id_transaction_container').style.display = 'block';
        }
        COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Report.css", "TRANSACTION_MAINSCREEN.adjustHeight");
        TRANSACTION_MAINSCREEN.activateNavigationButton();
        if (FCommon.UI.isValidObject(document.getElementById('trRender_' + 1)) == true) {
            var defaultRow = document.getElementById('trRender_' + 1);
            selectedRowForProcess = defaultRow;
            $(defaultRow).addClass("Reportselectrow");
        }
        GLOBAL.getnavigationHeader("id_div_heading");
        if (document.getElementById("id_transaction_viewcontainer") != null) {
            g_SelectedView = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
        }
        else {
            g_SelectedView = 0;
        }
        TRANSACTION_MAINSCREEN.DisableDivision("btnDeleteview");
        TRANSACTION_MAINSCREEN.DisableDivision("btnEditView");
        TRANSACTION_MAINSCREEN.addResizeToColumns("id_TranTable");

        transHomeEntry.loadEntryScreen(TRANSACTION_MAINSCREEN.getVoucherType(), TRANSACTION_MAINSCREEN.getViewId(), 0);
    },

    closeEntryScreen: function () {

        if (FCommon.UI.isValidObject(transEntryElement.getEntryContainer()) == true) {
            transEntryElement.getEntryContainer().style.display = "none";
        }
        if (FCommon.UI.isValidObject(document.getElementById('id_transaction_container')) == true) {
            document.getElementById('id_transaction_container').style.display = 'block';
        }
    },
    getCurrentPage: function () {
        var iPageNo = 0;

        iPageNo = parseInt($("#id_pagenumber").text());

        return (iPageNo);
    },

    onConvertLink_Click: function () {
        var result = null;

        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        if (result.lValue < 1) {
            COMMON.prototype.showMessage("No row selected.", "Error");

            return;
        }

        TRANSACTION_MAINSCREEN.openEntryViewPopup(result.data);
    },

    getSelectedViewIdForConvertLink: function () {
        var result = null;

        result = TRANSACTION_MAINSCREEN.getSelectedViewId();
        if (result.lValue < 1) {
            return (result);
        }

        if (FConvert.toInt(result.data) >= 0 || FCommon.String.startsWith(result.sValue, "*") == true) {
            result.lValue = 0;

            return (result);
        }

        result.lValue = 1;

        return (result);
    },

    setCurrentPage: function (iPageNo) {
        $("#id_pagenumber").text(iPageNo);
    },

    enableBackNavigationButton: function (bEnable) {
        if (bEnable == true) {
            $("#id_previousPage").removeClass("nextPrevious").addClass("nextPreviousActive");
            $("#frstPage").removeClass("nextPrevious").addClass("nextPreviousActive");
        }
        else {
            $("#id_previousPage").removeClass("nextPreviousActive").addClass("nextPrevious");
            $("#frstPage").removeClass("nextPreviousActive").addClass("nextPrevious");
        }
    },

    enableNextNavigationButton: function (bEnable) {
        if (bEnable == true) {
            $("#id_nextPage").removeClass("nextPrevious").addClass("nextPreviousActive");
            $("#lstPage").removeClass("nextPrevious").addClass("nextPreviousActive");
        }
        else {
            $("#id_nextPage").removeClass("nextPreviousActive").addClass("nextPrevious");
            $("#lstPage").removeClass("nextPreviousActive").addClass("nextPrevious");
        }
    },

    activateNavigationButton: function () {
        var EndOfFile = null;
        var iPageNo = 0;

        EndOfFile = document.getElementById("endoffile") != null ? document.getElementById("endoffile").getAttribute("data-value") : null;
        iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage();

        if (iPageNo > 1) { // Disable
            TRANSACTION_MAINSCREEN.enableBackNavigationButton(true);
        }
        else { // Enable
            TRANSACTION_MAINSCREEN.enableBackNavigationButton(false);
        }

        if (EndOfFile == "True") { // Disable
            TRANSACTION_MAINSCREEN.enableNextNavigationButton(false);
            // TRANSACTION_MAINSCREEN.enableNextNavigationButton(false);
            //if (iPageNo < g_iTotalPages) {
            //    TRANSACTION_MAINSCREEN.enableNextNavigationButton(true);
            //}
            //else {
            //    TRANSACTION_MAINSCREEN.enableNextNavigationButton(false);
            //}            
        }
        else { // Enable
            TRANSACTION_MAINSCREEN.enableNextNavigationButton(true);
        }
    },

    getSelectedHeaderIds: function () {
        ;
        var eleBody = null;
        var eleRow = 0;
        var iCounter = 0;
        var iRowNo = 0;
        var result = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = [];
            result.arrRowNo = [];
            result.arrVoucherNo = [];
            result.iVoucherNoColIndex = TRANSACTION_MAINSCREEN.getVoucherNoColumnIndex();

            eleBody = document.getElementById("tblBodyTransRender");;
            if (FCommon.UI.isValidObject(eleBody) == true) {
                // 0 for hidden input
                for (iCounter = 0; iCounter < eleBody.children.length; iCounter++) {
                    eleRow = eleBody.children[iCounter];
                    if (eleRow.nodeName.toLowerCase() != "tr") {
                        continue;
                    }

                    iRowNo++;
                    if (eleRow.children[0] != undefined && eleRow.children[1].children[0] != undefined && eleRow.children[1].children[0].checked == true || eleRow.className == "Reportselectrow") {                        
                            result.data.push(parseInt(eleRow.children[0].getAttribute("data-headerid")));
                            result.arrRowNo.push(iRowNo);

                            if (result.iVoucherNoColIndex > -1) {
                                result.arrVoucherNo.push(FCommon.UI.getText(eleRow.children[result.iVoucherNoColIndex]).trim());                           
                        }
                    }
                }

                result.lValue = result.data.length;
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = "{TRANSACTION_MAINSCREEN.getSelectedHeaderIds} " + err.message;
            console.log(err);
        }

        return (result);
    },

    selectUnselectRow: function (eleRow, bChecked, bSelect) {
        
        var eleBody = null;
        var iCounter = 0;
        var rowCount = document.getElementById("id_transaction_currentpage").dataset.itotalrows;
        chkclik = true;
        try {
            if (eleRow.children[0] != undefined) {
                if (eleRow.children[1].children[0] != undefined) {
                    eleRow.children[1].children[0].checked = bChecked;
                    if ($(eleRow).hasClass("Reportselectrow")) {
                        $(eleRow).removeClass("Reportselectrow");
                    }
                    eleRow.style.backgroundColor = (bChecked == true ? "#FCF69C" : eleRow.getAttribute('data-rowColorEven'));
                    eleRow.children[0].style.backgroundColor = "#FCF69C";
                    if (bChecked) {
                        m_NoOfRows = m_NoOfRows + 1;
                    }
                    else {
                        m_NoOfRows = m_NoOfRows - 1;
                    }
                    if (bSelect) {
                        if (m_NoOfRows == rowCount) {
                            document.getElementById("HeaderChkBox").checked = true;
                        }
                        else {
                            document.getElementById("HeaderChkBox").checked = false;
                        }
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.selectUnselectRow} " + err.message, "Exception");
        }
    },
    TransactionRowdblclick: function (row) {
                
        //var arrHeaderIds = [];
        //arrHeaderIds.push(FConvert.toInt(FCommon.UI.getAttributeData(row.children[0], "headerid")));
        //var Vouchertype = TRANSACTION_MAINSCREEN.getVoucherType();
        //NETWORK.executeServerMethod(GLOBAL.getContextPath("GetTransactionVoucherById", "TransHome", "Transactions"),
        //                               true,
        //                               { iVoucherType: Vouchertype, iTransactionId: arrHeaderIds[0]},
        //                               "",
        //                               true,
        //                               "TRANSACTION_MAINSCREEN.getTransactionObj",
        //                               "GLOBAL.LoadingStart",
        //                               "GLOBAL.LoadingEnd",
        //                               arrHeaderIds);

        
           
      


       
    },
    getTransactionObj: function (bSuccess, data, tag) {
        if (bSuccess) {
            var obj = data.data;
            if (obj.Header.EnteredBy != LoginUser && LoginUser != 1) {
                if (bViewEnteredByothers == true) {
                    alert("You do not have rights to view this document");

                }
                else {
                    if (tag[0] > 0)
                        TRANSACTION_MAINSCREEN.openEntryViewPopup(tag);
                }
            }
            else {
                if (tag[0] > 0)
                    TRANSACTION_MAINSCREEN.openEntryViewPopup(tag);
            }
        }
    },

    unselectAllViews: function () {
        var jqResult = null;
        var iCounter = 0;

        try {
            g_SelectedView = -1;
            jqResult = $("#id_transaction_viewcontainer a");
            for (iCounter = 0; iCounter < jqResult.length; iCounter++) {
                $(jqResult[iCounter]).removeClass("theme_color-inverse");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.unselectAllViews} " + err.message, "Exception");
        }
    },

    getSelectedViewId: function () {
        var jqResult = null;
        var iCounter = 0;
        var result = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            jqResult = $("#id_transaction_viewcontainer a");
            for (iCounter = 0; iCounter < jqResult.length; iCounter++) {
                if ($(jqResult[iCounter]).hasClass("theme_color-inverse") == true) {
                    result.lValue = 1;
                    result.sValue = FCommon.UI.getText(jqResult[iCounter]);
                    result.data = FCommon.UI.getAttributeData(jqResult[iCounter], "id");
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = er.message;
        }

        return (result);
    },

    openEntryViewPopup: function (arrHeaderIds) {
        var iViewId = 0;

        iViewId = TRANSACTION_MAINSCREEN.getViewId();
        TRANSACTION_MAINSCREEN.openScreen(arrHeaderIds, iViewId);
    },

    getViewId: function() {
        var eleSelect = null;
        var iViewCount = 0;
        var iViewId = 0;

        iViewCount = FConvert.toInt(FCommon.UI.getAttributeData("id_transaction_entryview_popup", "parameterid"));
        if (iViewCount > 1) {
            eleSelect = document.getElementById("selectView");
            iViewId = eleSelect.options[eleSelect.selectedIndex].value;
        }
        else {
            if (iViewCount == 1) {
                eleSelect = document.getElementById("id_transaction_entryview_popup_select");
                iViewId = FConvert.toInt(eleSelect.options[0].value);
            }
        }

        return (iViewId)
    },

    openScreen: function (arrHeaderIds, iViewId) {
        var result = null;

        result = TRANSACTION_MAINSCREEN.getSelectedViewIdForConvertLink();
        if (arrHeaderIds[0] == 0 || result.lValue < 1) {
            transHomeEntry.onEdit(arrHeaderIds, FConvert.toInt(result.data));
            //TRANSACTION_MAINSCREEN.openEntryScreen(arrHeaderIds[0], iViewId, FConvert.toInt(result.data));
        }
        else {
            TRANSACTION_MAINSCREEN.openConvertLink(arrHeaderIds, Math.abs(FConvert.toInt(result.data)), iViewId);
        }
    },

    openEntryScreen: function (lHeaderId, iViewId, iHomePageViewId) {
        var iVoucherType = 0;
        var iSourceId = 0;
        var data = null;
        var obj = null;

        try {
            iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
            iSourceId = FConvert.toInt(document.getElementById("id_hidden_source_value").value);

            if (iSourceId > 0) {
                data = [];
                switch (iSourceId) {
                    case 106:
                        data[0] = "EntryMainUI.setCloseCallback('DATASTATISTICS.openHomeTransPage(" + iVoucherType + ")')";
                        break;
                }
            }

            obj = {};
            obj.iVoucherType = iVoucherType;
            obj.lId = lHeaderId;
            obj.iViewId = iViewId;
            obj.iHomePageViewId = FConvert.toInt(iHomePageViewId);
            obj.sCloseCallback = "TRANSACTION_MAINSCREEN.restoreHomePage";

            transEntryGlobal.startWatch();

            NETWORK.executeServerMethod(GLOBAL.getContextPath("EntryMain", "TransHome", "Transactions"),
                                        true,
                                        obj,
                                        "html",
                                        true,
                                        "TRANSACTION_MAINSCREEN.loadScreen",
                                        "GLOBAL.LoadingStart",
                                        "GLOBAL.LoadingEnd",
                                        data);

        }
        catch (err) {
            alert("Exception: {TRANSACTION_MAINSCREEN.openEntryScreen} " + err.message);
        }

    },

    showHomePage: function (bShow) {
        var ele = null;

        try {
            ele = document.getElementById("id_transaction_homepage_container");
            if (FCommon.UI.isValidObject(ele) == true) {
                if (FConvert.toBoolean(bShow) == true) {
                    ele.style.display = "";
                }
                else {
                    ele.style.display = "none";
                }
            }
        }
        catch (err) {
            alert("Exception: {TRANSACTION_MAINSCREEN.showHomePage} " + err.message);
        }
    },

    loadScreen: function (bSuccess, html, arrData) {
        var eleContainer = null;
        var eleCurrentPage = null;

        try {
            if (bSuccess == false) {
                return;
            }

            eleContainer = document.getElementById("id_global_backup_screen_container");
            if (FCommon.UI.isValidObject(eleContainer) == true) {
                FUIElement.removeChild(eleContainer);

                eleCurrentPage = document.getElementById("id_transaction_homepage_container");
                if (FCommon.UI.isValidObject(eleCurrentPage) == true) {
                    eleContainer.appendChild(eleCurrentPage);
                }
            }

            GLOBAL.LoadScreen(bSuccess, html, arrData);
        }
        catch (err) {
            alert("Exception: {TRANSACTION_MAINSCREEN.loadScreen} " + err.message);
        }
    },

    restoreHomePage: function (iVoucherType, evt) {
        var elePageContainer = null;
        var ele = null;

        try {
            ele = document.getElementById("id_hidden_flag_refreshhomepage");
            if (FCommon.UI.isValidObject(ele) == true && FConvert.toBoolean(ele.value) == true) {
                NETWORK.executeServerMethod(GLOBAL.getContextPath("TransHomeView", "TransHome", "Transactions"),
                                            true,
                                            { iTypeId: iVoucherType, iMenuId: 0 },
                                            "html",
                                            true,
                                            "GLOBAL.LoadScreen",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd");

                return;
            }

            ele = document.getElementById("id_transaction_homepage_container");
            if (FCommon.UI.isValidObject(ele) == true) {
                elePageContainer = UIContainer.getDefaultContainer();
                if (elePageContainer != null) {
                    FUIElement.removeChild(elePageContainer);
                    elePageContainer.appendChild(ele);
                }
            }
        }
        catch (err) {
            alert("Exception: {TRANSACTION_MAINSCREEN.restoreHomePage} " + err.message);
        }
    },

    openConvertLink: function (arrHeaderIds, iBaseVoucherType, iViewId) {
        transHomeEntry.onConvertLink(arrHeaderIds, iBaseVoucherType, TRANSACTION_MAINSCREEN.getVoucherType(), iViewId);

        //TRANSACTION_MAINSCREEN.SERVER.convertLink(arrHeaderIds, iBaseVoucherType, TRANSACTION_MAINSCREEN.getVoucherType(), iViewId);
    },

    getVoucherType: function () {
        var eleCtrl = null;
        var iVoucherType = 0;

        eleCtrl = document.getElementById("id_hidden_vouchertype");
        if (FCommon.UI.isValidObject(eleCtrl) == true) {
            iVoucherType = FConvert.toInt(eleCtrl.value);
        }

        return (iVoucherType);
    },

    getModuleType: function () {
        var eleCtrl = null;
        var iModuleType = 0;

        eleCtrl = document.getElementById("id_hidden_ModuleType");
        if (FCommon.UI.isValidObject(eleCtrl) == true) {
            iModuleType = FConvert.toInt(eleCtrl.value);
        }

        return (iModuleType);
    },

    getVoucherNoColumnIndex: function () {
        var iCounter = 0;
        var iIndex = -1;
        var eleHead = null;
        var iFieldId = 0;
        var iSubParentId = 0;

        try {
            eleHead = document.getElementById("tblHeadTransRenderRow");
            if (FCommon.UI.isValidObject(eleHead) == true) {
                for (iCounter = 0; iCounter < eleHead.children.length; iCounter++) {
                    iFieldId = FConvert.toInt(FCommon.UI.getAttributeData(eleHead.children[iCounter], "fieldid"));
                    iSubParentId = FConvert.toInt(FCommon.UI.getAttributeData(eleHead.children[iCounter], "subparentid"));
                    if (iSubParentId == -1 && iFieldId == 2) {
                        iIndex = iCounter;
                        break;
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("Exception: {TRANSACTION_MAINSCREEN.getVoucherNoColumnIndex} " + err.message, "Exception");
        }

        return (iIndex);
    },

    getPopupContainerElement: function () {
        var eleContainer = null;

        eleContainer = document.getElementById("id_popup_container");

        return (eleContainer);
    },

    //resizeColumn: function (EleTable) {
    //    $(function () {
    //        var thHeight = $("table#"+EleTable.id+" th:first").height();
    //        $("table#" + EleTable.id + " th:not(:first-child)").resizable({
    //            handles: "e",
    //            minHeight: thHeight,
    //            maxHeight: thHeight,
    //            resize: function (event, ui) {
    //                var sizerID = "#" + $(event.target).attr("id") + "-sizer";
    //                $(sizerID).width(ui.size.width);
    //            }
    //        });
    //    });
    //}    
    Search: function (element) {
        var ele = element;
        var iViewid = SelectedViewid;
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        var iCurrentPage = TRANSACTION_MAINSCREEN.getCurrentPage();      
            NETWORK.executeServerMethod(GLOBAL.getContextPath("searchTransaction", "TransHome", "Transactions"),
                                                                           true,
                                                                           { element: ele, iVoucherType: iVoucherType, iViewid: iViewid, iCurrentPage: iCurrentPage },
                                                                           "html",
                                                                           true,
                                                                           "TRANSACTION_MAINSCREEN.setSearchPageData",
                                                                           "GLOBAL.LoadingStart",
                                                                           "GLOBAL.LoadingEnd",
                                                                           { iCurrentPage,ele, iViewid});
       
       
    },
    setSearchPageData: function (bSuccess, data, tag) {

        var element = null;
        try {
            $("#id_TranTable").children().remove();

            $("#id_TranTable").html(data);
            if (tag != undefined) {
                if (tag.iViewid != null) {
                    SelectedViewid = tag.iViewid;
                }
            }
            element = document.getElementById("endoffile");
            if (FCommon.UI.isValidObject(element) == false) {
                return;
            }
            if (g_iTotalPages == 0 && element.getAttribute("data-value").toLowerCase() == "true") {
                g_iTotalPages = parseInt(document.getElementById("id_transaction_currentpage").getAttribute("data-value"));
            }
            if (tag.ele != null) {
                if (tag.ele != "") {
                    if (tag.iCurrentPage != null) {
                        TRANSACTION_MAINSCREEN.setCurrentPage(tag.iCurrentPage);
                    }
                    else {
                        TRANSACTION_MAINSCREEN.setCurrentPage(1);
                    }
                }
                else {
                    TRANSACTION_MAINSCREEN.setCurrentPage(1);
                }
            }
            TRANSACTION_MAINSCREEN.activateNavigationButton();
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.setPageData} " + err.message, "Exception");
        }
    },
    ShowData: function (ele) {
        
       
        var iHeaderid = ele.parentElement.dataset.headerid;
        selected = ele;
        var element = ele;
        flag=true
        if (lastSelectedEle != undefined && lastSelectedEle != element) {
            lastSelectedEle.parentElement.style.backgroundColor = '#FFFFFF';
            lastSelectedEle = undefined;
            // element.parentElement.style.backgroundColor = "white ";
        }
        if (lastSelectedEle != undefined) {
            lastSelectedEle.parentElement.style.backgroundColor = '#FFFFFF';
        }
        element.parentElement.style.backgroundColor = "#DEF5FD";
        lastSelectedEle = element;




        //document.getElementById("Icon_" + iHeaderid).focus();

        //if (FCommon.UI.isValidObject(document.getElementById("Id_TranHomeTitle_Popup")||document.getElementById("Id_TranHomeTitle_Popup")!=undefined))
        //{
        //    flag = false;
        //    $("#Id_TranHomeTitle_Popup").popover('destroy');
        //}
        if (iHeaderid > 0)
        {
            result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetRowData", "TransHome", "Transactions"),
                                               true,
                                               { HeaderId: iHeaderid },
                                               "json",
                                               true,
                                               "TRANSACTION_MAINSCREEN.ShowRowdetails",
                                              "",
                                              "",
                                                {element});


            
        }
    },
    ShowRowdetails: function (bSuccess, data, tag) {
        try {
            
            var dataDiv = tag.element;
            var Userdata = [];
            flag = true;
            if (data.oInfoModel.Status != null)
            {
                Userdata.push({ Name: data.Headings[0], value: data.oInfoModel.Status });
            }
            if (data.oInfoModel.Date != null || data.oInfoModel.Date != "") {

                Userdata.push({ Name: data.Headings[1], value: data.oInfoModel.Date });
            }
            if (data.oInfoModel.CreatedBy != null || data.oInfoModel.CreatedBy!="")
            { 
                Userdata.push({ Name: data.Headings[2], value: data.oInfoModel.CreatedBy });
            }
            if (data.oInfoModel.CreatedDate != null || data.oInfoModel.CreatedDate!="") {
               
            
                Userdata.push({ Name: data.Headings[3], value: data.oInfoModel.CreatedDate });
            }
        
            if ( data.oInfoModel.ModifiedBy!=null&&data.oInfoModel.CreatedBy!=data.oInfoModel.ModifiedBy) {
                Userdata.push({ Name: data.Headings[4], value: data.oInfoModel.ModifiedBy });
            }
            if ((data.oInfoModel.ModifiedDate)!=null) {
               
                Userdata.push({ Name: data.Headings[5], value: data.oInfoModel.ModifiedDate });
            }
           
            if (parseInt(data.oInfoModel.ModifiedCount) ==0)
            {
                Userdata.push({ Name: data.Headings[6], value: "Never" });
            }
            else if (parseInt(data.oInfoModel.ModifiedCount) == 1)
            {
                Userdata.push({ Name: data.Headings[6], value: data.oInfoModel.ModifiedCount + " Time" });
            }
            else if(parseInt(data.oInfoModel.ModifiedCount) > 1)
            {
                Userdata.push({ Name: data.Headings[6], value: data.oInfoModel.ModifiedCount + data.Headings[15] });
            }
            var number = data.oInfoModel.Net.split(/(\d+)/);

            if (parseInt(number[1])>0) {
                Userdata.push({ Name: data.Headings[7], value: data.oInfoModel.Net });
            }
            if (data.oInfoModel.NextAuthUsers != null) {
                Userdata.push({ Name: data.Headings[8], value: data.oInfoModel.NextAuthUsers });
            }
            if (data.oInfoModel.PrevAuthUsers != null) {
                Userdata.push({ Name: data.Headings[9], value: data.oInfoModel.PrevAuthUsers });
            }
            if (data.oInfoModel.RejectedUsers != null) {
                Userdata.push({ Name:  data.Headings[10], value:data.oInfoModel.RejectedUsers });
            }
            if (data.oInfoModel.EmailCount!="0") {
                Userdata.push({ Name: data.Headings[11], value: data.oInfoModel.EmailCount });

            }
            if (data.oInfoModel.LineCount != "0") {
                Userdata.push({ Name: data.Headings[12], value: data.oInfoModel.LineCount });
            }
            if (parseInt(data.oInfoModel.PrintCount)==1) {
                Userdata.push({ Name: data.Headings[13], value: data.oInfoModel.PrintCount + " Time" });
            }
            if (parseInt(data.oInfoModel.PrintCount)> 1) {
                Userdata.push({ Name: data.Headings[13], value: data.oInfoModel.PrintCount + data.Headings[15] });
            }
            if (data.oInfoModel.Amended !=null) {
                Userdata.push({ Name: data.Headings[14], value: data.oInfoModel.Amended });
            }
                      
            //var table = document.createElement("table");
            //table.className = "PopoverTrans";
            ////table.className = "Id_TranHomeTitle_Popup";
            //table.style.margin = "0px";
            //for (var i = 0; i < Userdata.length; i++)
            //{
                
            //    var tr = document.createElement("tr");
            //    tr.style.borderBottom = "1px solid #cccc";
            //    var td1 = document.createElement("td");
            //    td1.style.minWidth = "80px";
            //    td1.style.borderRight = "1px solid #cccc";
            //    var div = document.createElement("div");
            //    div.className = "font-5";
            //    div.textContent = Userdata[i].Name;

            //    //var b = document.createElement("b");
            //    //b.textContent = Userdata[i].Name;
            //    //div.appendChild(b);
            //    td1.appendChild(div);
            //    var td2 = document.createElement("td");
            //    td2.style.minWidth = "108px";
            //    td2.style.paddingLeft = "10px";
            //    var div2 = document.createElement("div");
            //    div2.className = "font-5";
            //    div2.style.whiteSpace = "normal";
            //    div2.textContent = Userdata[i].value;
            //    td2.appendChild(div2);
            //    tr.appendChild(td1);
            //    tr.appendChild(td2);
            //    table.appendChild(tr);
            //}            
            //var Outerdiv = document.createElement("div");
            //
            //Outerdiv.appendChild(table);
            ////Outerdiv.className = "PopoverTrans";
            //var dataPopupControl = "<div  id='Id_TranHomeTitle_Popup'></div>";
            //var text = Outerdiv.innerHTML;
            //$("#Id_TranHomeTitle_Popup").remove();
            //$(dataDiv.parentElement).append(dataPopupControl);
            //if (iLangaugeid > 0)
            //{
            //    $("#Id_TranHomeTitle_Popup").popover({
            //        html: true,
            //        title: '<span  class="theme_background-color-inverse"></span>'+data.Header+'<a href="#" class="close theme_background-color-inverse"  onclick="TRANSACTION_MAINSCREEN.closePopupOver(this, event);">&times;</a>',
            //        type: "tooltip",
            //        container: "body",
            //        trigger: "manual",
            //        content: text,
            //        placement: "left",
            //    });
            //}
            //else
            //{
            //    $("#Id_TranHomeTitle_Popup").popover({
            //        html: true,
            //        title: '<span  class="theme_background-color-inverse">' + data.Header + '</span> <a href="#" class="close theme_background-color-inverse"  onclick="TRANSACTION_MAINSCREEN.closePopupOver(this, event);">&times;</a>',
            //        type: "tooltip",
            //        container: "body",
            //        trigger: "manual",
            //        content: text,
            //        placement: "right",
            //    });
            //}
            

    
         
           
            //$("#Id_TranHomeTitle_Popup").popover('show');
            //$(".popover").css({ "top": (dataDiv.getBoundingClientRect().top - 85) + "px", "position": "absolute" });
            //$(".popover>.arrow").css("top","");
            //$(".popover-content").css("padding", "5px");
            //$(".popover").css("max-width", "322px");
            //$(document).on("click", ".popover .close", function () {
            //    $(this).parents(".popover").popover('hide');
            //});
        }
        catch (err) {
            COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.ShowRowdetails} " + err.message, "Exception");
            //$("#Id_TranHomeTitle_Popup").popover('destroy');
        }

    },

    closePopupOver: function () {
        //$("#Id_TranHomeTitle_Popup").popover('destroy');
        if(flag==true&&lastSelectedEle!=undefined)
        {
            lastSelectedEle.parentElement.style.backgroundColor = '#FFFFFF';
        }   
    },

    onAuthoriZeDetails_click : function(ele, detailOption){
        
        var arrHeaderIds = [];
        var result = null;

        result = TRANSACTION_MAINSCREEN.getSelectedHeaderIds();
        if (result.lValue < 0) {
            COMMON.prototype.showMessage(result.sValue, "Exception");
            return;
        }
        else if (result.lValue == 0 && detailOption < 4) {
            COMMON.prototype.showMessage("No Row selected", msgs.Error);
            return;
        }

        arrHeaderIds = result.data;
        if (arrHeaderIds.length > 1 && detailOption < 4) {
            COMMON.prototype.showMessage("Multiple vouchers Details Cannot be shown simultaneously.", msgs.Error);
            return;
        }

        TRANSACTION_MAINSCREEN.OpenAuthoriZedetailsPopup(arrHeaderIds, ele, detailOption);
    },

    OpenAuthoriZedetailsPopup: function (headerid, element, detailOption)
    {
        
        var vtype = TRANSACTION_MAINSCREEN.getVoucherType();
        var VoucherName = "";
        var eleCtrl = document.getElementById("id_hidden_vouchername");
        if (FCommon.UI.isValidObject(eleCtrl) == true) {
            VoucherName = eleCtrl.value;
        }
        if (headerid > 0 || detailOption >= 4) {
            var callingFunction = "getCommonInfoDetails";

            //0:auth history, 1:email sent details, 2:document details, 3:audit log detail, 4:register, 5:setting
            //if (detailOption == 1) {
            //    callingFunction = "GetEmailSentHistory";
            //}
            //else if (detailOption == 2) {
            //    callingFunction = "GetDocumentHistory";
            //}
            //else if (detailOption == 3) {
            //    callingFunction = "GetAuditLogHistory";
            //}
            //else if (detailOption == 4) {
            //    callingFunction = "GetRegister";
            //}
            //else if (detailOption == 5) {
            //    callingFunction = "GetSettingDetails";
            //}
            //else {
            //    callingFunction = "GetApprovalHistory";
            //}
            result = NETWORK.executeServerMethod(GLOBAL.getContextPath(callingFunction, "TransHome", "Transactions"),
                        true,
                        {
                            iHeaderId: headerid.length > 0 ? headerid[0] : 0, 
                            iVoucherType: vtype,
                            sVoucher: VoucherName,
                            iOption:detailOption
                        },
                        "html",
                        true,
                        "TRANSACTION_MAINSCREEN.ShowAuthoriZedetailsPopup",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd");
        }
    },
    ShowAuthoriZedetailsPopup :function(bsucces,data)
    {
        
        $("#id_authDetailspopup").html(data);
        $("#id_transaction_AuthorizeDetails").modal('show');
    },


    SelectDefaultView: function () {
        ;
        var chkDefault = document.getElementById("SelectDefaultView").checked;
        if (chkDefault == false) {
            SelectedViewid = 0;
            iprevViewId = 0;
        }
        NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveDefaultView", "TransHome", "Transactions"),
                true,
                { ViewId: SelectedViewid, VoucherType: TRANSACTION_MAINSCREEN.getVoucherType() },
                "",
                true,
                "",
                "",
                "");

        
    },
    autoAdjust: function (id)
    {
        var eleHeadTable = document.getElementById(id);
        eleHeadTable.style.width = "auto";
        var rows = document.getElementById(id).children[0].children;
        for (var i = 0; i < rows.length; i++) {
            var columns = rows[i].children;
            for (j = 0; j < columns.length; j++) {
                columns[j].style.width = columns[j].getAttribute("data-width");
            }
        }
        localStorage.setItem("myid", 0);
    },
    fitToScreen: function (id) {
        
        document.getElementById(id).style.width = "100%";
        var rows = document.getElementById(id).children[0].children;
        for (var i = 0; i < rows.length; i++) {
            var columns = rows[i].children;
            for (j = 2; j < columns.length; j++) {
                columns[j].style.width = "auto";
            }
        }
        localStorage.setItem("myid", 1);
    },
    resetNormal: function (id) {
        
        document.getElementById(id).style.width = "100px";
        var rows = document.getElementById(id).children[0].children;
        for (var i = 0; i < rows.length; i++) {
            var columns = rows[i].children;
            for (j = 0; j < columns.length; j++) {
                columns[j].style.width = columns[j].getAttribute("data-width");
            }
        }
        localStorage.setItem("myid", 0);
    },

    GetOutputScreen: function (ele) {
        
        var exportOption = undefined;
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        exportOption = parseInt(ele.dataset.outputscreen);
        var eleCtrl = null;
        var VoucherName;
        var iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage() - 1;
        if (arr_Transhomefilter != undefined && arr_Transhomefilter.length > 0) {
            m_homeFilter = arr_Transhomefilter 
        }
        else if (arrHomeFilters != undefined && arrHomeFilters.length > 0) {
            m_homeFilter = arrHomeFilters; 
        }
        else if (arr_Viewhomefilter != undefined && arr_Viewhomefilter.length > 0) {
            m_homeFilter = arr_Viewhomefilter;
        }
        else {
            m_homeFilter = null;
        }
        eleCtrl = document.getElementById("id_hidden_vouchername");
        if (FCommon.UI.isValidObject(eleCtrl) == true) {
            VoucherName = eleCtrl.value;
        }

       
        if (exportOption == 1) {

            NETWORK.executeServerMethod(GLOBAL.getContextPath("ExportTransactions", "TransHome", "Transactions"),
                                      true,
                                      {
                                          iExportOption: exportOption, sVoucherName: VoucherName, iVoucherType: iVoucherType, iViewId: document.getElementById("id_hidden_viewid_value").value, arrfiltervalues: m_homeFilter
                                      },
                                       "",
                                       true,
                                      "TRANSACTION_MAINSCREEN.Exportsuccess",
                                      "GLOBAL.LoadingStart",
                                      "GLOBAL.LoadingEnd");
        }
        if(exportOption==2)
        {

            NETWORK.executeServerMethod(GLOBAL.getContextPath("ExportTransactions", "TransHome", "Transactions"),
                                      true,
                                      {
                                          iExportOption: exportOption, sVoucherName: VoucherName, iVoucherType: iVoucherType, iViewId: document.getElementById("id_hidden_viewid_value").value, arrfiltervalues: m_homeFilter
                                      },
                                       "",
                                       true,
                                       "TRANSACTION_MAINSCREEN.Exportsuccess",
                                      "GLOBAL.LoadingStart",
                                      "GLOBAL.LoadingEnd");
        }

        if (exportOption == 3) {

            NETWORK.executeServerMethod(GLOBAL.getContextPath("ExportTransactions", "TransHome", "Transactions"),
                                      true,
                                      {
                                          iExportOption: exportOption, sVoucherName: VoucherName, iVoucherType: iVoucherType, iViewId: document.getElementById("id_hidden_viewid_value").value, arrfiltervalues: m_homeFilter
                                      },
                                       "",
                                       true,
                                       "TRANSACTION_MAINSCREEN.PrintSuccess",
                                      "GLOBAL.LoadingStart",
                                      "GLOBAL.LoadingEnd");
        }

      
    },
    Exportsuccess: function (bSuccess, data) {
        

        if (data != null && data.length > 0) {
            transEntryGlobal.m_bDisableClear = true;
            window.location = GLOBAL.getContextPath("GetExportedFile", "RD", "RD") + '?fileName=' + data;
            transEntryGlobal.m_bDisableClear = false;
        }
        else {

            COMMON.prototype.showMessage("No Data found for exporting");
        }
    },
    PrintSuccess: function(bsuccess,data)
    {
        
        if (data != null && data.length >0 ) {
            var w = window.open("", "_blank");
            if (FCommon.UI.isValidObject(w)) {
                w.location = GLOBAL.getContextPath("GetDocumentToPrint", "TransHome", "Transactions") + '?fileName=' + data;
            }
        }
        else {
            COMMON.prototype.showMessage("No Data found for exporting");
        }
      
    },
    onRefresh_click:function()
    {
        
        var isSelectAll = true;
        var iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
        NETWORK.executeServerMethod(GLOBAL.getContextPath("TransHomeView", "TransHome", "Transactions") , 
            true, { iTypeId: iVoucherType, iMenuId: 0, isSelectAll: isSelectAll },
            'html',
            true, 
            'GLOBAL.LoadScreen',
            'GLOBAL.LoadingStart',
            'GLOBAL.LoadingEnd');
    },

    SERVER: {
        getViewData: function (iViewId) {
            
            var obj = null;
            var rowEle = null;
            try {
                obj = {};
                obj.iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
                obj.iViewId = iViewId;
                SelectedViewid = iViewId;

                rowEle = document.getElementById("id_HomeRowsPerPage");
                if (FCommon.UI.isValidObject(rowEle)) {
                    rowEle.style.display = iViewId == 0 ? "" : "none";
                }
                //if (arr_Transhomefilter != null) {

                //}
                //else {
                //    arr_Transhomefilter = [];
                //}
                //arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
                //var chkfilter = document.getElementById("chkSaveFilter");
                //if (chkfilter != null && chkfilter.checked == true) {
                //    arr_Transhomefilter = arrHomeFilters;
                //    arrHomeFilters = [];
                //}
                //if (bSaveFilter == true) {
                //    var id_homefilter = document.getElementById("id_transhomefilter");
                //    if (FCommon.UI.isValidObject(id_homefilter) == true) {
                //        id_homefilter.style.color = "red";
                //    }
                //}
                //else {
                //    var id_homefilter = document.getElementById("id_TransHomeFilter");
                //    if (FCommon.UI.isValidObject(id_homefilter) == true) {
                //        id_homefilter.style.color = "";
                //    }
                //}
                var viewid = iViewId;
                NETWORK.executeServerMethod(GLOBAL.getContextPath("GetViewData", "TransHome", "Transactions"),
                                            true,
                                           obj,
                                            "",
                                            true,
                                            "TRANSACTION_MAINSCREEN.setPagefilterData",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd",
                                            { viewid, bSaveFilter});

            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.SERVER.getViewData} " + err.message, "Exception");
            }
        }, 

        deleteVoucherById: function (iVoucherType, objInput) {
            var obj = null;
            var result = null;
            
            try {
                var unique_array = [];
                for (var i = 0; i < objInput.data.length; i++) {
                    if (unique_array.indexOf(objInput.data[i]) == -1) {
                        unique_array.push(objInput.data[i])
                    }
                }
                obj = {};
                obj.iVoucherType = iVoucherType;
                obj.arrHeaderId = unique_array;
                obj.bEnableAuditLog = GlobalPref.EnableAuditLog;

                result = transEntryServer.execute(eTransServerRequest.DeleteVoucherById,
                                                    obj,
                                                    true,
                                                    "TRANSACTION_MAINSCREEN.CALLBACK.deleteVoucherById",
                                                    objInput);
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.SERVER.deleteVoucherById} " + err.message, "Exception");
            }

            return (result);
        },

        suspendVoucher: function (arrHeaderId) {
            let obj = null;

            try {
                obj = {};
                obj.ScreenId = TRANSACTION_MAINSCREEN.getVoucherType();
                obj.HeaderId = arrHeaderId;
                obj.type = 3;

                isSuspend = true;
                NETWORK.executeServerMethod(GLOBAL.getContextPath("authorizeTransactions", "TransHome", "Transactions"),
                                            true,
                                            obj,
                                            "json",
                                            true,
                                            "TRANSACTION_MAINSCREEN.CALLBACK.authorizeSuspendOrReject",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd");
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.SERVER.suspendVoucher} " + err.message, "Exception");
            }
        },

        reloadScreen: function (iTypeId) {
            var iViewId = 0;
            let arrFilter = null;
            
            try {
                if (FCommon.UI.isValidObject(g_SelectedViewEle) == true && g_SelectedViewEle.children.length > 0) {
                    iViewId = parseInt(g_SelectedViewEle.children[0].dataset.id);
                }
                arrFilter = (homefilter != undefined && homefilter != null) ? homefilter : TRANSACTION_MAINSCREEN.getFilter();

                NETWORK.executeServerMethod(GLOBAL.getContextPath("TransHomeView", "TransHome", "Transactions"),
                                            true,
                                                { iTypeId: iTypeId, iMenuId: 0, SelectedView: iViewId, Homefilter: arrFilter, bLoadscreen: true },
                                            "html",
                                            true,
                                            "GLOBAL.LoadScreen",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd");
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.SERVER.reloadScreen} " + err.message, "Exception");
            }
        },

        convertLink: function (arrHeaderIds, iBaseVoucherType, iVoucherType, iViewId) {
            var obj = null;
            var result = null;

            try {
                obj = {};
                obj.arrHeaderIds = arrHeaderIds;
                obj.iBaseVoucherType = iBaseVoucherType;
                obj.iVoucherType = iVoucherType;
                obj.iViewId = iViewId;

                transEntryGlobal.startWatch();
                result = NETWORK.executeServerMethod(GLOBAL.getContextPath("ConvertLink", "TransHome", "Transactions"),
                                                                true,
                                                                obj,
                                                                "html",
                                                                true,
                                                                "GLOBAL.LoadScreen",
                                                                "GLOBAL.LoadingStart",
                                                                "GLOBAL.LoadingEnd");
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.SERVER.convertLink} " + err.message, "Exception");
            }

            return (result);
        }
    },

    CALLBACK: {
        setPageData: function (bSuccess, data, tag) {
           debugger
            var element = null;
            try {
                $("#id_TranTable").children().remove();

                $("#id_TranTable").html(data);
                if (tag != undefined) {
                    if (tag.viewid != null) {
                        SelectedViewid = tag.viewid;
                    }
                    if (tag.arr_Transhomefilter != null && tag.arr_Transhomefilter.length != 0) {
                        arr_Transhomefilter = tag.arr_Transhomefilter;
                    }
                    else if (tag.arrHomeFilters != null && tag.arrHomeFilters.length != 0) {
                        arrHomeFilters = tag.arrHomeFilters;
                    }
                }
                element = document.getElementById("endoffile");
                if (FCommon.UI.isValidObject(element) == false) {
                    return;
                }

                if (g_iTotalPages == 0 && element.getAttribute("data-value").toLowerCase() == "true") {
                    g_iTotalPages = parseInt(document.getElementById("id_transaction_currentpage").getAttribute("data-value"));
                }
                TRANSACTION_MAINSCREEN.activateNavigationButton();
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.setPageData} " + err.message, "Exception");
            }
        },

        authorizeSuspendOrReject: function (bSuccess, data) {

            var iVoucherType = 0;

            try {
                if (data.lValue > 0) {
                    if (isSuspend == true && FCommon.String.isNullOrEmpty(data.sValue) == true) {
                        COMMON.prototype.showMessage("Voucher Suspended Successfully", "");
                    } else {
                        COMMON.prototype.showMessage(data.sValue, "");
                    }
                    iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
                    TRANSACTION_MAINSCREEN.SERVER.reloadScreen(iVoucherType);
                    LAYOUT.UpdateAlerts(true);
                    //updateAlerts();
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.authorizeSuspendOrReject} " + err.message, "Exception");
            }
        },

        deleteVoucherById: function (bSuccess, data, tag) {
            var iVoucherType = 0;
            var sMessages = "";
            var iCounter = 0;
            var iTotal = 0;

            try {
                iTotal = FCommon.Array.getLength(data.data);
                for (iCounter = 0; iCounter < iTotal; iCounter++) {
                    if (iCounter > 0) {
                        sMessages += "<br />";
                    }

                    if (tag.iVoucherNoColIndex > -1) {
                        sMessages += "VoucherNo - " + tag.arrVoucherNo[iCounter] + ": " + data.data[iCounter];
                    }
                    else {
                        sMessages += "Row " + tag.arrRowNo[iCounter] + ": " + data.data[iCounter];
                    }
                }

                if (data.lValue <= 0) {
                    COMMON.prototype.showMessage(sMessages, data.lValue < 0 ? "Exception" : "Error");
                }
                else {
                    COMMON.prototype.showMessage(sMessages, "Message");

                    iVoucherType = TRANSACTION_MAINSCREEN.getVoucherType();
                    TRANSACTION_MAINSCREEN.SERVER.reloadScreen(iVoucherType);
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.CALLBACK.deleteVoucherById}" + err.message, "Exception");
            }
        }
    },

    HOME_PAGE: {

        firstPageData: function () {
            //debugger
            TRANSACTION_MAINSCREEN.HOME_PAGE.getHomePageData(0, 1);
        },

        onNextPage_Click: function () {
            //debugger
            var iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage();
            TRANSACTION_MAINSCREEN.HOME_PAGE.getHomePageData(iPageNo, iPageNo + 1);
        },

        onPreviousPage_Click: function () {
            //debugger
            var iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage();
            if (iPageNo <= 1) {
                return;
            }
            iPageNo--;
            TRANSACTION_MAINSCREEN.HOME_PAGE.getHomePageData(iPageNo - 1, iPageNo);
        },

        lastPagedata: function () {
            debugger
            try {
                var iPageNo = 0;
                blastpageEnabled = true;
                var maxPage = TRANSACTION_MAINSCREEN.HOME_PAGE.getMaxPage();
                iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage()
                var EndOfFile = document.getElementById("endoffile") != null ? document.getElementById("endoffile").getAttribute("data-value") : m_reportData.EndOfFile;
                var data = null;
                if (FCommon.UI.isValidObject(EndOfFile) == true && EndOfFile.toLowerCase() == "true") {
                    if (FCommon.UI.isValidObject(maxPage) == true && parseInt(maxPage) > 0) {
                        iPageNo = parseInt(maxPage) - 1;
                    }
                    data = TRANSACTION_MAINSCREEN.HOME_PAGE.getDataFromBuffer(iPageNo);
                }
                else if (FCommon.UI.isValidObject(maxPage) == true && parseInt(maxPage) > 0){
                     iPageNo = parseInt(maxPage) - 1;
                }
                              
                if (data == null) {
                    //REPORTRENDERNEW.DisableEnableControls(sUniqueId, false);
                    var viewid = 0;
                    if (document.getElementById("id_transaction_viewcontainer") != null) {
                        viewid = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
                    }
                    else {
                        viewid = document.getElementById("id_hidden_viewid_value").value;
                    }
                    arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);
                    NETWORK.executeServerMethod(GLOBAL.getContextPath("GetReportLastPageData", "TransHome", "Transactions"),
                        true,
                        {
                            arrFilter: arrHomeFilters, currentpage: iPageNo
                        },
                        "",
                        true,
                        "TRANSACTION_MAINSCREEN.CALLBACK.setPageData",
                        "GLOBAL.LoadingStart",
                        "GLOBAL.LoadingEnd",
                        { viewid, arrHomeFilters, arr_Transhomefilter}
                    );
                }
                else {
                    //if (iPageNo <= parseInt(maxPage) - 1 && iPageNo > 0) {
                    //    REPORTRENDERNEW.displayBodyData(data, lstColumns, sUniqueId);
                    //    REPORTRENDERNEW.activateNavigationButton([sUniqueId]);
                    //    if (iPageNo != parseInt(maxPage) - 1) {
                    //        REPORTRENDERNEW.lastPagedata(element, sUniqueId);
                    //    }
                    //    else {
                    //        REPORTRENDERNEW.enableNextNavigationButton(true, [sUniqueId]);
                    //        REPORTRENDERNEW.enableBackNavigationButton(false, [sUniqueId]);

                    //    }
                    //}
                }
                //if (pageSize > 0) {
                //    iPageNo += pageSize;
                //}
                //else {
                //    iPageNo++;
                //}
                //TRANSACTION_MAINSCREEN.setCurrentPage(iPageNo);
            }
            catch (err) {
                COMMON.prototype.showMessage("{TRANSACTION_MAINSCREEN.HOME_PAGE.lastPagedata} " + err.message, "Exception");
            }
        },

        getHomePageData: function (iPageNo, iDisplayPageNo) {
            debugger
            try {
                TRANSACTION_MAINSCREEN.setCurrentPage(iDisplayPageNo);

                data = TRANSACTION_MAINSCREEN.HOME_PAGE.getDataFromBuffer(iPageNo);

                if (data == null) {
                    var eof = false;
                    if (EndOfFile != undefined && EndOfFile == true) {
                        eof = true;
                    }
                    if (eof == false) {
                        var viewid = 0;
                        if (document.getElementById("id_transaction_viewcontainer") != null) {
                            viewid = document.getElementById("id_transaction_viewcontainer").dataset.viewid;
                        }
                        else {

                            viewid = document.getElementById("id_hidden_viewid_value").value;
                        }
                        arrHomeFilters = FILTER.getFilterValue(document.getElementById("id_transaction_container").dataset.imenuid, 2);

                        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetReportPageData", "TransHome", "Transactions"),
                            true,
                            {
                                iCurrentPage: iPageNo,
                                arrfiltervalues: arrHomeFilters
                            },
                            "",
                            true,
                            "TRANSACTION_MAINSCREEN.HOME_PAGE.setPageData",
                            "GLOBAL.LoadingStart",
                            "GLOBAL.LoadingEnd",
                            {
                                viewid,
                                arrHomeFilters,
                                arr_Transhomefilter
                            }
                        );
                    }
                }
                else {
                    TRANSACTION_MAINSCREEN.HOME_PAGE.displayBodyData(data, lstColumns);
                    TRANSACTION_MAINSCREEN.activateNavigationButton();
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{ TRANSACTION_MAINSCREEN.HOME_PAGE.getHomePageData} " + err.message, "Exception");
            }
        },

        setPageData: function (bSucceess, data, tag) {
            //debugger
            //var element = null;
            try {
                $("#id_TranTable").children().remove();
                $("#id_TranTable").html(data);
                //REPORTRENDERNEW.activateNavigationButton(tag);
            }
            catch (err) {
                COMMON.prototype.showMessage("{ TRANSACTION_MAINSCREEN.HOME_PAGE.setPageData} " + err.message, "Exception");
            }
        },

        setDataToBuffer: function (data, columns, EndOfFile) {
            //debugger
            var bEndOfFile = false;
            var iCount = 0
            var iMaxPage = -1;
            var iPageNo = 0;
            var arrAllData = [];

            iPageNo = TRANSACTION_MAINSCREEN.getCurrentPage();
            iPageNo--;
            if (m_homePageData != null && m_homePageData.LineData != null) {
                arrAllData = m_homePageData.LineData;
                iMaxPage = TRANSACTION_MAINSCREEN.HOME_PAGE.getMaxPage();
                bEndOfFile = m_homePageData.EndOfFile;
            }
            if (iPageNo > iMaxPage && bEndOfFile == false) {
                for (iCount = 0; iCount < data.length; iCount++) {
                    arrAllData.push(data[iCount]);
                }
                m_homePageData = {
                    MaxPageNo: iPageNo,
                    RowsPerPage: data.length,
                    EndOfFile: EndOfFile,
                    LineData: arrAllData,
                    Columns: columns
                };
            }
        },

        getDataFromBuffer: function (pageNo) {
            //debugger
            var data = null;
            var iSkipRow = 0;
            var iCount = 0
            var bEndOfFile = false;
            var iMaxPage = -1
            var rowsPerPage = 18;
            var arrAllData = [];
            var arrPageData = [];

            if (m_homePageData != null && m_homePageData.LineData != null) {
                arrAllData = m_homePageData.LineData;
                bEndOfFile = m_homePageData.EndOfFile;
                rowsPerPage = m_homePageData.RowsPerPage;
                iMaxPage = REPORTRENDERNEW.getMaxPage();
                lstColumns = m_homePageData.Columns;
            }
            if (arrAllData != null && rowsPerPage > 0) {
                if (iSkipRow < arrAllData.length) {
                    iSkipRow = rowsPerPage * pageNo;
                }
                else if (bEndOfFile == true && iSkipRow > arrAllData.length) {
                    iSkipRow -= rowsPerPage;
                }
                srnoIndex = iSkipRow + 1;
                for (iCount = 0; iSkipRow < arrAllData.length && iCount < rowsPerPage; iSkipRow++, iCount++) {
                    arrPageData.push(arrAllData[iSkipRow]);
                }
                if (bEndOfFile == false && arrPageData.length < rowsPerPage && pageNo > 0) {
                    arrPageData = [];
                }
                if (arrPageData.length > 0) {
                    data = arrPageData;
                }
            }
            return data;
        },

        getMaxPage: function () {
            var iTotalPage = 0;
            var iTotalRows = 0;
            var iRowsPerPage = 0;
            if (m_homePageData != null && m_homePageData.LineData != null) {
                iRowsPerPage = m_homePageData.RowsPerPage;
                if (iRowsPerPage > 0) {
                    iTotalRows = m_homePageData.LineData.length;
                    iTotalPage = 1;
                    if (iTotalRows > iRowsPerPage) {
                        iTotalPage = parseInt(iTotalRows / iRowsPerPage);
                        iTotalPage += (iTotalRows % iRowsPerPage) > 0 ? 1 : 0;
                    }
                }
            }
            return iTotalPage;
        },

        displayBodyData: function (lstLineData, lstColumns) {
            debugger
            if (lstLineData != null) {
                var objReportRowHeader = null;
                var sCellAlignment = "";
                var colColor = "";
                var colBackgroundcolor = "";
                var colFontweight = "";
                var colFontstyle = "";
                var colFontFamily = "";
                var imgRow = null;
                var sRowClass = null;
                var sColSpanClass = null;
                var TAB_WIDTH = 12;
                var iGroupLevel = 0;
                var colFontsize = 12;
                var iDataCounter = 0;
                var iRowIndex = 0;
                var iSrNoIndex = srnoIndex == null || srnoIndex == undefined ? 1 : srnoIndex;
                var iCurrentRow = iSrNoIndex;
                var arrImageData = null;
                var isGroup = false;
                var bFirstColumn = false;
                var rowSpan = 0;
                var imageHeight = 0;
                var tblReportRenderBody = document.getElementById("tblBodyTransRender");
                var eleTr = null;
                var eleTd = null;
                var eleSpan = null;
                var eleInput = null;
                var BLACK_COLOR = -16777216;
                var ALTERNATE_COLOR = "#f9fafc"; //"rgb(235, 235, 228)";
                var HEADING_COLOR = "rgb(222, 245, 253)";
                var WHITE_COLOR = -1;
                var BORDER_STYLE = "none";
                var BORDER_COLOR = "#f7f7f7";
                //var mainRowClick = rowClick;
                tblReportRenderBody.innerHTML = '';
                if (FCommon.UI.isValidObject(m_bToggleGrid) && m_bToggleGrid == true) {
                    BORDER_STYLE = "";
                    BORDER_COLOR = "#c6c6c6";
                }
                for (iRowIndex = 0; iRowIndex < lstLineData.length; iRowIndex++, iSrNoIndex++, iCurrentRow++) // Iterate rows
                {
                    if (lstLineData[iRowIndex] != null) {
                        objReportRowHeader = lstLineData[iRowIndex].CellData[0];

                        //bisHeader = objReportRowHeader.IsHeader && Model.oBackTrackType == BackTrackType.TransactionHeaderId;
                        bFirstColumn = false;
                        isGroup = false;
                        imgRow = null;
                        eleTr = null;
                        eleTd = null;
                        eleSpan = null;
                        iGroupLevel = 0;
                        if ((objReportRowHeader).TreeData != null) {
                            isGroup = (objReportRowHeader).TreeData.IsGroup;
                            iGroupLevel = TAB_WIDTH * (objReportRowHeader).TreeData.GroupLevel;
                        }

                        if (objReportRowHeader.ExtraInfo == null) {
                            objReportRowHeader.ExtraInfo = 1;
                        }
                        if (objReportRowHeader.ExtraInfo > 0) {
                            rowSpan = objReportRowHeader.ExtraInfo;
                            imageHeight = rowSpan * 16;
                        }
                        if (objReportRowHeader.RowType == ReportRowType.BlankLine) {
                            iSrNoIndex--;
                            continue;
                        }

                        iDataCounter = 1;//bHeaderId ? 0 : 1;
                        sRowClass = (objReportRowHeader.RowType == ReportRowType.TreeGroup && objReportRowHeader.IsSetOnColumnOnlly == false) ? "FSemiBold" :
                            objReportRowHeader.RowType == ReportRowType.OpenigClosingBalance ? "FItalic" :
                            objReportRowHeader.RowType == ReportRowType.Total ? "tblRowColor FSemiBold theme_color-inverse" : "tblbodytd theme_row_color";

                        sColSpanClass = objReportRowHeader.RowType == ReportRowType.Heading ? lstColumns.length.toString() : "";

                        //if (FCommon.UI.isValidObject(document.getElementById('hdnIsBackTrack'))) {
                        //    rowClick = (document.getElementById('hdnIsBackTrack').getAttribute('data-value')) == 'True' ? mainRowClick : "";
                        //    if (rowClick != "") {
                        //        if (objReportRowHeader.RowType == ReportRowType.OpenigClosingBalance) {
                        //            rowClick = "REPORTRENDER.backTrackRow(this,event,'" + uniqueId + "'," + objReportRowHeader.RowType + ")";
                        //        }
                        //        else if (objReportRowHeader.RowType == ReportRowType.Heading) {
                        //            rowClick = "REPORTRENDERNEW.openMasterInfoCrossReference('" + uniqueId + "'," + objReportRowHeader.Id + ",this)";
                        //        }
                        //    }
                        //}

                        eleTr = document.createElement('Tr');
                        eleTr.className = sRowClass;
                        eleTr.id = "trRender_" + iRowIndex;
                        eleTr.setAttribute("data-dataid", objReportRowHeader.Id);
                        eleTr.setAttribute("data-datalongid", objReportRowHeader.LongId);
                        //eleTr.setAttribute("data-bisHeader", bisHeader == 1 ? 0 : 1);
                        //eleTr.setAttribute("data-iLoadTransactionBy", objReportRowHeader.IsHeader == 1 || backTrackType == 4 ? 0 : 1);
                        eleTr.setAttribute("data-isgroup", isGroup);
                        //eleTr.setAttribute("data-iCrossReferenceId", iCrossReferenceBy);
                        eleTr.setAttribute("onclick", "REPORTRENDERNEW.selectRow(this,true);");
                        //eleTr.setAttribute("ondblclick", rowClick);
                        if (iCurrentRow % 2 == 0) {
                            eleTr.style.backgroundColor = ALTERNATE_COLOR;
                        }
                        eleTr.style.borderBottom = "solid";
                        eleTr.style.borderBottomColor = BORDER_COLOR;
                        eleTr.style.borderBottomWidth = "thin";
                       
                        //checkbox
                        eleTd = document.createElement('Td');
                        eleTd.className = "TextAlignCenter";
                        eleTd.style.backgroundColor = "white";
                        eleTd.style.borderStyle = BORDER_STYLE;
                        eleTd.setAttribute("data-headerid", objReportRowHeader.Id);
                        
                        eleInput = document.createElement('input');
                        eleInput.type = 'checkbox';
                        eleInput.setAttribute("onclick", "TRANSACTION_MAINSCREEN.selectUnselectRow(this.parentElement.parentElement, this.checked ,true);");
                        eleTd.appendChild(eleInput);
                        eleTr.appendChild(eleTd);

                        //Serial no 
                        eleTd = document.createElement('Td');
                        eleTd.id = "tdSort_col_SrNo_" + iRowIndex;
                        eleTd.style.width = iSrNoIndex < 1000 ? "30px" : (iSrNoIndex.toString().length * 10 + 'px');
                        eleTd.className = "TextAlignCenter";
                        eleTd.style.backgroundColor = "white";
                        eleTd.style.borderStyle = BORDER_STYLE;
                        eleTd.style.borderColor = BORDER_COLOR;
                        //if (objReportRowHeader.RowType == ReportRowType.Heading || objReportRowHeader.RowType == ReportRowType.Total) {
                        //    iSrNoIndex--;
                        //}
                        //else {
                        //if (m_SearchSrNo != null && m_SearchSrNo.length > 0 && iRowIndex < m_SearchSrNo.length) {
                        //    eleTd.textContent = m_SearchSrNo[iRowIndex].toString();
                        //}
                        //else {
                            eleTd.textContent = iSrNoIndex.toString();
                        //}
                        //}
                        eleTr.appendChild(eleTd);

                        ///document.getElementById("id_col_SerialNumber").style.width = iSrNoIndex < 1000 ? "30px" : (iSrNoIndex.toString().length * 10 + 'px');

                        if (objReportRowHeader.RowType == ReportRowType.Heading) {
                            eleTd = document.createElement('Td');
                            eleTd.className = "TextAlignCenter";
                            eleTd.style.overflow = "visible";
                            eleTd.style.fontWeight = "bold";
                            eleTd.style.backgroundColor = HEADING_COLOR;//ET#69105
                            eleTd.style.borderStyle = BORDER_STYLE;
                            eleTd.colSpan = sColSpanClass;
                            eleTd.textContent = lstLineData[iRowIndex].CellData[iDataCounter];
                            eleTr.appendChild(eleTd);
                            tblReportRenderBody.appendChild(eleTr);
                            continue;
                        }

                        for (iCounter = 0; iCounter < lstColumns.length; iCounter++, iDataCounter++) {
                            if (arrHiddenColumns[iCounter] == true || iDataCounter >= lstLineData[iRowIndex].CellData.length) {
                                continue;
                            }
                            bFirstColumn = !bFirstColumn;
                            ///sCellAlignment = arrCellAlignments[iCounter];
                            colBackgroundcolor = colColor = "";
                            //colFontFamily = bArabic == true ? "Microsoft Sans Serif" : "";//if Arabic the MS Sans Serif else blank
                            colFontstyle = "normal";
                            colFontweight = isGroup ? "bold" : "normal";
                            colFontsize = 12;

                            if (arrColumnFonts[iCounter] != null) {
                                if (arrColumnFonts[iCounter].Foreground != BLACK_COLOR) {
                                    colColor = REPORTRENDER.convertToColor(arrColumnFonts[iCounter].Foreground);//ColorChange.ConvertToColor(arrColumnFonts[iCounter].Foreground);
                                }
                                if (arrColumnFonts[iCounter].Background != WHITE_COLOR) {
                                    colBackgroundcolor = REPORTRENDER.convertToColor(arrColumnFonts[iCounter].Background);// ColorChange.ConvertToColor(arrColumnFonts[iCounter].Background);
                                }
                                colFontweight = arrColumnFonts[iCounter].FontWeight == 0 ? "normal" : "bold";
                                colFontsize = arrColumnFonts[iCounter].FontSize;
                                colFontstyle = (arrColumnFonts[iCounter].FontStyle == 0) ? "normal" : (arrColumnFonts[iCounter].FontStyle == 1) ? "italic" : "oblique";
                                colFontFamily = (arrColumnFonts[iCounter]).FontFamily;
                            }
                            else if ((objReportRowHeader.Font != null && objReportRowHeader.Font.Foreground != BLACK_COLOR) || objReportRowHeader.RowType == ReportRowType.Formatting || objReportRowHeader.IsSetOnColumnOnlly == true) {
                                colColor = REPORTRENDER.convertToColor(objReportRowHeader.Font.Foreground);//ColorChange.ConvertToColor(objReportRowHeader.Font.Foreground);

                                var bSetOnColumn = !objReportRowHeader.IsSetOnColumnOnlly;
                                if (lstColumns != null && iCounter < lstColumns.length) {
                                    if (objReportRowHeader.SetColumnId > 0 && objReportRowHeader.SetColumnId == lstColumns[iCounter].FieldId) {
                                        bSetOnColumn = true;
                                    }
                                    else if (objReportRowHeader.ColumnIds != null && objReportRowHeader.ColumnIds.length > 0) {
                                        for (var c = 0; c < objReportRowHeader.ColumnIds.length; c++) {
                                            if (objReportRowHeader.ColumnIds[c] == lstColumns[iCounter].FieldId) {
                                                bSetOnColumn = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (bSetOnColumn == true) {
                                    if (objReportRowHeader.Font.Background != WHITE_COLOR) {
                                        colBackgroundcolor = REPORTRENDER.convertToColor(objReportRowHeader.Font.Background);//ColorChange.ConvertToColor(objReportRowHeader.Font.Background);
                                    }
                                    colFontweight = objReportRowHeader.Font.FontWeight == 0 ? "normal" : "bold";
                                    colFontsize = objReportRowHeader.Font.FontSize;
                                    colFontstyle = (objReportRowHeader.Font.FontStyle == 0) ? "normal" : (objReportRowHeader.Font.FontStyle == 1) ? "italic" : "oblique";
                                    colFontFamily = objReportRowHeader.Font.FontFamily;
                                }
                                //else {
                                //    colColor = "";
                                //}
                            }
                            if (colColor == "#000000") {
                                colColor = "";
                            }
                            if (colFontFamily == "Arial") {
                                colFontFamily = "OpenSans-Regular";
                            }
                            //if (colBackgroundcolor == "" && iCurrentRow % 2 == 0) {
                            //    colBackgroundcolor = "rgb(235, 235, 228)";
                            //}
                            arrImageData = null;
                            if (lstColumns[iCounter].DataTypeId == MasterDataType.get("Picture")) {
                                arrImageData = lstLineData[iRowIndex].CellData[iDataCounter];
                            }
                            //if (iGroupLevel > 0) {
                            eleTd = document.createElement('Td');
                            eleTd.id = "tdSort_" + iRowIndex + "_col_" + lstColumns[iCounter].AliasName + "_" + lstColumns[iCounter].GroupName;
                            eleTd.style.color = colColor;
                            eleTd.style.backgroundColor = colBackgroundcolor;
                            eleTd.style.borderStyle = BORDER_STYLE;
                            eleTd.style.fontStyle = colFontstyle;
                            eleTd.style.fontWeight = colFontweight;
                            eleTd.style.fontSize = colFontsize.toString() + 'px';
                            eleTd.style.fontFamily = colFontFamily;
                            eleTd.style.width = lstColumns[iCounter].ColumnWidth + 'px';
                            eleTd.className = sCellAlignment;
                            eleTd.colSpan = sColSpanClass;

                            if (arrImageData != null && arrImageData[0] != 0) {
                                var blob = new Blob([new Uint8Array(arrImageData)], { type: "image/jpeg" });
                                var imgRow = URL.createObjectURL(blob);
                                if (objReportRowHeader.ExtraInfo == null) {
                                    objReportRowHeader.ExtraInfo = 1;
                                }
                                if (objReportRowHeader.ExtraInfo > 0) {
                                    rowSpan = objReportRowHeader.ExtraInfo;
                                    imageHeight = rowSpan * 16 + 'px';
                                }
                                eleImg = document.createElement('img');
                                eleImg.id = 'userImage';
                                if (arrImageData != "") {
                                    eleImg.style.height = imageHeight;
                                    eleImg.src = imgRow;
                                }
                                eleTd.appendChild(eleImg);
                            }
                            else {
                                eleTd.textContent = lstLineData[iRowIndex].CellData[iDataCounter];
                                if (iGroupLevel > 0) {
                                    eleSpan = document.createElement('span');
                                    if (bFirstColumn == true) {
                                        if (sLeftRightMargin == "margin-left") {
                                            eleSpan.style.marginLeft = iGroupLevel.toString() + 'px';
                                        }
                                        else {
                                            eleSpan.style.marginRight = iGroupLevel.toString() + 'px';
                                        }
                                    }
                                    eleSpan.textContent = eleTd.textContent;
                                    eleTd.textContent = "";
                                    eleTd.appendChild(eleSpan);
                                }
                            }
                            eleTr.appendChild(eleTd);
                           
                        }
                        tblReportRenderBody.appendChild(eleTr);

                    }
                }//close row data
            }
        },

    }
};
;
var DPI_SIZE = 96.0;
var controlType = undefined;
var MouseStartXAxisPos = 0;
var MouseStartYAxisPos = 0;
var MouseEndXAxisPos = 0;
var MouseEndYAxisPos = 0;
var draggedElement = undefined;
var dragStartPosX = 0;
var dragStartPosY = 0;
var BodyGridCount = 0;
var ColumnGridCount = 0;
var resizeImage = false;
var SetAreaCtrlPos = false;
var AddElementToArea = false;
var DraggedColumn = undefined;
var SelectedField = undefined;
var arrPages = undefined;
var m_iControlIds = 2000 + 1;
var m_iBodyIds = 2000;
var m_iPages = 0;
var GRIDLINETYPE = {};
var FONTCOLOR = {};
var objLayoutInformation = undefined;
var iCurrentPage = 0;
var iNoofPages = 0;
var PageDummyOjbect = undefined;
var arrLayouts = [];
var SelectedLayout = undefined;
var iVoucherType = 0;
var iHeaderId = 0;
var iDocNo = 0;
var iModuleType = 0;
var MouseDownPosX = 0;
var MouseDownPosY = 0;
var iCurrentBodyGrid = 0;
var objDefaultFont = undefined;
var arrAllFields = [];
var arrHeaderGroup = [];
var arrBodyGroup = [];
var SelectedOrderByField = undefined;
var SelectedOrderByFieldToDel = undefined;
var arrAllOrderByFields = undefined;
var objPrintInfo = undefined;
var ctrlIDs = "";
var iSelectedCtrlPageNo = 0;
var iFirsteleControlType = 0;
var fromExit = false;
var fromExitElement = null;
var bModified = false;
var DMCount = 1;//for page_margin
var m_arrCustomizeColumn = [];
var blnMouseDown = false;
var blnEnableResize = false;
var bPreview = false;
var bFromRD = false;
var sLayoutName = '';

//// svg variable
const SVG_NS = "http://www.w3.org/2000/svg";
var svgcontainer = null;
var m = {};// the mouse position
var oLine = {};// an object for the line's attributes
var eLine = null; //the line element
var selectedElement, offset, transform,
        bbox, minX, maxX, minY, maxY, confined;

INVOICEDESIGN = {
    isSelectFieldExecutedOnce: false,
    previousSelectedField: null,
    m_arrDocuments: [],
    bitmapparent: null,
    currentLayoutBoundingRect: null,
    fromDrag: false,
    PrintPaths: [],
    //Internal - Reloading saved layout names to display in the popup.
    RefreshLayoutList: function () {
        try {
            result = NETWORK.executeServerMethod(
                            GLOBAL.getContextPath("GetlistofLayouts", "InvoiceDesign", "Transactions"),
                            true,
                            { iVoucherType: iVoucherType, ModuleType: iModuleType },
                            "",
                            true,
                            "INVOICEDESIGN.RefreshLayoutListSuccess",
                            "GLOBAL.LoadingStart",
                            "GLOBAL.LoadingEnd"
                    );
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.RefreshLayoutList}" + err.message, "Exception");
        }
    },

    //Internal - Success event for RefreshLayoutList method.
    RefreshLayoutListSuccess: function (bSuccess, data) {
        try {
            arrLayouts = data;
            if (sLayoutName != undefined && sLayoutName != '') {
                var iLayoutId = undefined;
                if (arrLayouts != null && arrLayouts.length > 0) {
                    var layoutKey = null;
                    var iCount = 0;
                    for (iCount = 0; iCount < arrLayouts.length; iCount++) {
                        if (arrLayouts[iCount].Name == sLayoutName) {
                            iLayoutId = arrLayouts[iCount].ID;
                            break;
                        }
                    }
                }
                if (iLayoutId != objLayoutInformation.Layout.ID && objLayoutInformation.Layout.ID != -1) {
                    INVOICEDESIGN.NewLayoutFromPopUp(iLayoutId);
                }
                else {
                    INVOICEDESIGN.UpdateLayoutName(sLayoutName);
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.RefreshLayoutListSuccess}" + err.message, "Exception");
        }
    },

    DesignLayout: function (Data, fontColors, obj, defaultFont, HeaderFields, BodyFields, AllOrderByFields) {
        try {
            iVoucherType = Data.VoucherType;
            iHeaderId = Data.HeaderId;
            iDocNo = Data.iDocNo;
            iModuleType = Data.ModuleType;
            PageDummyOjbect = obj;
            objLayoutInformation = Data.LayoutInformation;
            GRIDLINETYPE = GLOBAL.ArrayToEnum(Data.GridLineType);
            FONTCOLOR = GLOBAL.ArrayToEnum(fontColors);
            arrLayouts = Data.Layouts;
            objDefaultFont = defaultFont;
            arrHeaderGroup = HeaderFields;
            arrBodyGroup = BodyFields;
            arrAllOrderByFields = AllOrderByFields;
            INVOICEDESIGN.PageSetup();
            document.getElementById("id_PopuplayoutName").value = objLayoutInformation.Layout.Name;
            INVOICEDESIGN.m_arrDocuments = Data.m_arrDocuments;
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.DesignLayout" + err.message.toString(), "Exception");
        }
    },

    PageSetup: function () {

        var LayoutParent = null, unit = null;
        var sUnit = "";
        var getangel = 0.0;
        try {
            LayoutParent = document.getElementById("InvoiceDesignMainDiv");
            if (objLayoutInformation.PrintInfo) {
                objPrintInfo = objLayoutInformation.PrintInfo;
            }
            else {
                //create a default PrintInfo obj
                objPrintInfo = INVOICEDESIGN.getEmptyPrintInfoObj();
                objLayoutInformation.PrintInfo = objPrintInfo;
            }
            if (objPrintInfo) {
                sUnit = INVOICEDESIGN.getUnit(objPrintInfo.Unit);
                unit = INVOICEDESIGN.getUnit(objPrintInfo.Unit);
            }

            if (LayoutParent) {
                LayoutParent.style.paddingLeft = "0.5" + "in";
                LayoutParent.style.paddingTop = "0.5" + "in";
                LayoutParent.style.paddingRight = "0.5" + "in";
                LayoutParent.style.paddingBottom = "0.5" + "in";
            }

            if (objLayoutInformation.Pages != null) {
                if (objLayoutInformation.Pages.length > 0) {
                    for (var iCount = 0; iCount < objLayoutInformation.Pages.length; iCount++) {
                        iCurrentPage = iCount;
                        INVOICEDESIGN.NewPage();
                        var Allmargins = $("div[id^=divmargin]");
                        var Margin;
                        var Margin0 = 0, Margin1 = 0, Margin2 = 0, Margin3 = 0;
                        if (Unit == 'in') {
                            for (var i = 0; i < Allmargins.length; i++) {
                                Margin0 = Allmargins[i];
                                Margin0.style.top = objPrintInfo.Margin.Top + INVOICEDESIGN.getUnit(objPrintInfo.Unit);
                                i++;
                                Margin1 = Allmargins[i];
                                Margin1.style.bottom = objPrintInfo.Margin.Bottom + INVOICEDESIGN.getUnit(objPrintInfo.Unit);
                                i++;
                                Margin2 = Allmargins[i];
                                Margin2.style.left = objPrintInfo.Margin.Left + INVOICEDESIGN.getUnit(objPrintInfo.Unit);
                                i++;
                                Margin3 = Allmargins[i];
                                Margin3.style.right = objPrintInfo.Margin.Right + INVOICEDESIGN.getUnit(objPrintInfo.Unit);
                            }
                        }
                        else {
                            //new by rasool 
                            //for (var i = 0; i < Allmargins.length; i++) {
                            //    Margin0 = Allmargins[i];
                            //    Margin0.style.top = FConvert.toDecimal((objPrintInfo.Margin.Top*2), 2) + unit;
                            //    i++;
                            //    Margin1 = Allmargins[i];
                            //    Margin1.style.bottom = "-5.2" + unit;
                            //    i++;
                            //    Margin2 = Allmargins[i];
                            //    Margin2.style.left = FConvert.toDecimal((objPrintInfo.Margin.Left * 2), 2) + unit;
                            //    i++;
                            //    Margin3 = Allmargins[i];
                            //    Margin3.style.right = "0.2" + unit;
                            //}
                            //for (var i = 0; i < Allmargins.length; i++) {
                            //    Margin0 = Allmargins[i];
                            //    Margin0.style.top = FConvert.toDecimal((objPrintInfo.Margin.Top * 2.54), 2) + unit;
                            //    i++;
                            //    Margin1 = Allmargins[i];
                            //    Margin1.style.bottom = FConvert.toDecimal((objPrintInfo.Margin.Bottom * 2.54), 2) + unit;
                            //    i++;
                            //    Margin2 = Allmargins[i];
                            //    Margin2.style.left = FConvert.toDecimal((objPrintInfo.Margin.Left * 2.54), 2) + unit;
                            //    i++;
                            //    Margin3 = Allmargins[i];
                            //    Margin3.style.right = FConvert.toDecimal((objPrintInfo.Margin.Right * 2.54), 2) + unit;
                            //}
                        }

                        var Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                        Layout.style.width = objLayoutInformation.PrintInfo.PageWidth + "in";
                        Layout.style.height = objLayoutInformation.PrintInfo.PageHeight + "in";
                        ///////////
                        //remove duplicates from PageHeader
                        if (objLayoutInformation.Pages) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader = INVOICEDESIGN.removeDuplicatesBy(x => x.UID, objLayoutInformation.Pages[iCurrentPage].PageHeader);
                            }
                        }
                        ///////////
                        var arrControls = objLayoutInformation.Pages != null ? objLayoutInformation.Pages[iCurrentPage].PageHeader.slice(0) : null;
                        var iTotalFieldsCount = 0, subCount = 0;
                        var ParentControl = null;
                        var isAreaExist = false;
                        if (arrControls != null && arrControls != undefined && arrControls.length > 0) {
                            iTotalFieldsCount = arrControls.length;
                            for (var count = 0; count < iTotalFieldsCount; count++) {
                                Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                                ParentControl = null;
                                if (m_iControlIds < arrControls[count].UID)
                                    m_iControlIds = arrControls[count].UID
                                if (parseInt(arrControls[count].MasterId) > 0) {
                                    ParentControl = INVOICEDESIGN.GetField(arrControls[count].MasterId);
                                    subCount = 0;
                                    isAreaExist = false;
                                    if (ParentControl) {
                                        switch (ParentControl.Type) {
                                            case CONTROLTYPE.Area:
                                                isAreaExist = false;
                                                for (subCount = 0; subCount < iTotalFieldsCount; subCount++) {
                                                    if (parseInt(arrControls[subCount].UID) == parseInt(arrControls[count].MasterId)) {
                                                        if (FCommon.UI.isValidObject(document.getElementById(INVOICEDESIGN.getAreaControlId(parseInt(arrControls[subCount].UID), iCurrentPage)))) {
                                                            isAreaExist = true;
                                                        }
                                                        break;
                                                    }
                                                }
                                                if (isAreaExist == false) {
                                                    for (subCount = 0; subCount < iTotalFieldsCount; subCount++) {
                                                        if (parseInt(arrControls[subCount].UID) == parseInt(arrControls[count].MasterId)) {
                                                            INVOICEDESIGN.CreateArea(
                                                                    arrControls[subCount].Left,
                                                                    arrControls[subCount].Top,
                                                                    arrControls[subCount].Height,
                                                                    arrControls[subCount].Width,
                                                                    Layout, arrControls[subCount]);
                                                            INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                                            break;
                                                        }
                                                    }
                                                }
                                                Layout = document.getElementById(INVOICEDESIGN.getAreaControlId(ParentControl.UID, iCurrentPage));
                                                break;
                                            case CONTROLTYPE.BodyCanvas:
                                                Layout = document.getElementById(INVOICEDESIGN.getBodyGridControlId(ParentControl.UID, iCurrentPage));
                                                INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                                break;
                                        }
                                    }
                                    else {
                                        //remove the control from pageheader
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader.splice(count, 1);
                                    }
                                }
                                switch (arrControls[count].Type) {
                                    case CONTROLTYPE.Textblock:
                                        //SelectedField = INVOICEDESIGN.CreateTextblock(
                                        //       arrControls[count].Left,
                                        //       arrControls[count].Top,
                                        //      Layout, arrControls[count]
                                        //    );
                                        SelectedField = INVOICEDESIGN.CreateReadonlyTextBlock(
                                               arrControls[count].Left,
                                               arrControls[count].Top,
                                               Layout, arrControls[count]
                                           );

                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.Statictext:
                                        if (!FCommon.String.isNullOrEmpty(arrControls[count].Text)) {

                                            // Static text control created using textarea element 
                                            //SelectedField = INVOICEDESIGN.CreateStaticText(
                                            //  arrControls[count].Left,
                                            //  arrControls[count].Top,
                                            //  arrControls[count].Height,
                                            //  arrControls[count].Width,
                                            //  Layout, arrControls[count]
                                            //);

                                            // static text control created using div element and jquery ui 
                                            SelectedField = INVOICEDESIGN.CreateEditableBlock(
                                                arrControls[count].Left,
                                                arrControls[count].Top,
                                                arrControls[count].Height,
                                                arrControls[count].Width,
                                                Layout, arrControls[count]
                                            );
                                            INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        }
                                        else {
                                            ///remove that item from object itself
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader.splice(count, 1);
                                        }
                                        break;
                                    case CONTROLTYPE.Rectangle:
                                        SelectedField = INVOICEDESIGN.CreateRectAngle(
                                                arrControls[count].Left,
                                                arrControls[count].Top,
                                                arrControls[count].Height,
                                                arrControls[count].Width,
                                                Layout, arrControls[count]
                                             );
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.Ellipse:
                                        SelectedField = INVOICEDESIGN.CreateEllipse(
                                                arrControls[count].Left,
                                                arrControls[count].Top,
                                                arrControls[count].Height,
                                                arrControls[count].Width,
                                                Layout, arrControls[count]
                                            );
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.Line:
                                        getangel = INVOICEDESIGN.getAngle(MouseStartXAxisPos, MouseStartYAxisPos, MouseEndXAxisPos, MouseEndYAxisPos);
                                        //SelectedField = INVOICEDESIGN.CreateLine(
                                        //        arrControls[count].Left,
                                        //        arrControls[count].Top,
                                        //        arrControls[count].Height,
                                        //        arrControls[count].Width,
                                        //        Layout,getangel, arrControls[count]
                                        //    );
                                        SelectedField = INVOICEDESIGN.CreateSVGLine(null, Layout, arrControls[count]);
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.BodyCanvas:

                                        SelectedField = INVOICEDESIGN.CreateBodyGrid(
                                                 arrControls[count].Left,
                                                 arrControls[count].Top,
                                                 arrControls[count].Height,
                                                 arrControls[count].Width,
                                                 Layout, arrControls[count]
                                             );
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        Layout = document.getElementById(INVOICEDESIGN.getColumnGridControlId(arrControls[count].UID, iCurrentPage)).children[0].children[0];

                                        if (arrControls[count].PageBody != null && arrControls[count].PageBody.length > 0) {
                                            for (var iColumnCount = 0; iColumnCount < arrControls[count].PageBody.length; iColumnCount++) {
                                                SelectedField = INVOICEDESIGN.CreateBodyColumn(Layout, arrControls[count].PageBody[iColumnCount]);
                                                if (arrControls[count].PageBody[iColumnCount].FontSize == 0)
                                                    arrControls[count].PageBody[iColumnCount].FontSize = objDefaultFont.FontSize;
                                                INVOICEDESIGN.SetControlProperty(arrControls[count].PageBody[iColumnCount]);//
                                            }
                                        }

                                        if (ParentControl != undefined) {
                                            Layout = document.getElementById(INVOICEDESIGN.getAreaControlId(ParentControl.UID, iCurrentPage));
                                        }

                                        SelectedField = document.getElementById(INVOICEDESIGN.getMainGridControlId(arrControls[count].UID, iCurrentPage));
                                        if (arrControls[count].Left <= 0)
                                            arrControls[count].Left = objLayoutInformation.PrintInfo.Margin.Left * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit);//50
                                        if (arrControls[count].Top <= 0)
                                            arrControls[count].Top = objLayoutInformation.PrintInfo.Margin.Top + 176;
                                        if (arrControls[count].Height <= 0)
                                            arrControls[count].Height = objLayoutInformation.PrintInfo.PageHeight * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit) - 2 * objLayoutInformation.PrintInfo.Margin.Top * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit) - 2 * 140;
                                        if (arrControls[count].Width <= 0)
                                            arrControls[count].Width = ((objLayoutInformation.PrintInfo.PageWidth - objLayoutInformation.PrintInfo.Margin.Left - objLayoutInformation.PrintInfo.Margin.Right) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit));
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], 'BODYCANVAS', Layout);
                                        break;
                                    case CONTROLTYPE.Image:
                                        SelectedField = INVOICEDESIGN.CreateBitMap(
                                                arrControls[count].Left,
                                                arrControls[count].Top,
                                                arrControls[count].Height,
                                                arrControls[count].Width,
                                                Layout, arrControls[count]);
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.Area:
                                        if (FCommon.UI.isValidObject(document.getElementById(INVOICEDESIGN.getAreaControlId(parseInt(arrControls[count].UID), iCurrentPage)))) {

                                        }
                                        else {
                                            SelectedField = INVOICEDESIGN.CreateArea(
                                                    arrControls[count].Left,
                                                    arrControls[count].Top,
                                                    arrControls[count].Height,
                                                    arrControls[count].Width,
                                                    Layout, arrControls[count]);
                                            INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        }
                                        break;
                                    case CONTROLTYPE.Table:
                                        SelectedField = INVOICEDESIGN.CreateTable(
                                                arrControls[count].Left,
                                                arrControls[count].Top,
                                                arrControls[count].Height,
                                                arrControls[count].Width, Layout, arrControls[count]);
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.Formula:
                                        SelectedField = INVOICEDESIGN.CreateFormulaField(
                                               arrControls[count].Left,
                                               arrControls[count].Top,
                                               Layout, arrControls[count]
                                           );
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.ApprovalHistory:

                                        SelectedField = INVOICEDESIGN.CreateApprovalHistory(
                                               arrControls[count].Left,
                                               arrControls[count].Top,
                                               Layout, arrControls[count]
                                            );
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                    case CONTROLTYPE.PostingDetails:
                                        SelectedField = INVOICEDESIGN.CreatePostingDetails(
                                              arrControls[count].Left,
                                              arrControls[count].Top,
                                              Layout, arrControls[count]
                                           );
                                        INVOICEDESIGN.SetControlProperty(arrControls[count], '', Layout);
                                        break;
                                }
                            }
                        }
                    }
                }
                else {
                    INVOICEDESIGN.NewPage();
                    objLayoutInformation.Pages = [];
                    objLayoutInformation.Pages.push(PageDummyOjbect);
                    objLayoutInformation.Pages[0].PageHeader = [];
                    var Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                    Layout.style.width = objLayoutInformation.PrintInfo.PageWidth + INVOICEDESIGN.getUnit(objLayoutInformation.PrintInfo.Unit);
                    Layout.style.height = objLayoutInformation.PrintInfo.PageHeight + INVOICEDESIGN.getUnit(objLayoutInformation.PrintInfo.Unit);
                }
            }
            else {
                INVOICEDESIGN.NewPage();
                objLayoutInformation.Pages = [];
                objLayoutInformation.Pages.push(PageDummyOjbect);
                objLayoutInformation.Pages[0].PageHeader = [];
                var Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                Layout.style.width = objLayoutInformation.PrintInfo.PageWidth + INVOICEDESIGN.getUnit(objLayoutInformation.PrintInfo.Unit);
                Layout.style.height = objLayoutInformation.PrintInfo.PageHeight + INVOICEDESIGN.getUnit(objLayoutInformation.PrintInfo.Unit);
            }
            // disable selecting rulers and label
            $("#ruler,#rulerv, #lbl, #lbl1").disableSelection();
            SelectedField = undefined;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.PageSetup}" + err.message, "Exception");
        }
    },

    //Internal.
    LoadNewLayout: function (layoutId) {
        try {
            result = NETWORK.executeServerMethod(
                    GLOBAL.getContextPath("NewLayout", "InvoiceDesign", "Transactions"),
                    true,
                    { iLayoutId: layoutId, iVoucherType: iVoucherType, ModuleType: iModuleType },
                    "",
                    true,
                    "INVOICEDESIGN.NewLayoutSuccess",
                    "GLOBAL.LoadingStart",
                    "GLOBAL.LoadingEnd"
                   );
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.LoadNewLayout}" + err.message, "Exception");
        }
    },

    //Internal.
    SaveValidation: function (fromPopUp, fromExit, element, fromNew, fromOpen, event) {
        try {
            if (objLayoutInformation != undefined) {
                if (objLayoutInformation.Layout.ID > -1) {
                    var retVal = confirm(document.getElementById("msgSaveLayoutConfirmation").value);
                    if (retVal == false) {
                        //INVOICEDESIGN.Save(fromPopUp, fromExit, element);
                    }
                    else {
                        if (fromNew) {
                            INVOICEDESIGN.LoadNewLayout();
                            bModified = false;
                        }
                        else if (fromExit) {
                            INVOICEDESIGN.CloseInvoiceDesign_Internal(fromExitElement, event);
                            fromExit = false;
                            fromExitElement = null;
                            bModified = false;
                            return;
                        }
                        else if (fromOpen) {
                            INVOICEDESIGN.Open_Internal();
                            bModified = false;
                        }
                    }
                }
                else {
                    var iPageDataExist = 0, iPageCount = 0;
                    iPageCount = objLayoutInformation.Pages.length;
                    for (var i = 0; i < iPageCount; i++) {
                        if (objLayoutInformation.Pages[i].PageHeader.length > 0) {
                            iPageDataExist = 1;
                            var retVal = confirm(document.getElementById("msgSaveLayoutConfirmation").value);
                            if (retVal == false) {
                                //INVOICEDESIGN.Save(fromPopUp, fromExit, element);
                            }
                            else {
                                if (fromNew) {
                                    INVOICEDESIGN.LoadNewLayout();
                                    bModified = false;
                                }
                                else if (fromExit) {
                                    INVOICEDESIGN.CloseInvoiceDesign_Internal(fromExitElement, event);
                                    fromExit = false;
                                    fromExitElement = null;
                                    bModified = false;
                                    return;
                                }
                                else if (fromOpen) {
                                    INVOICEDESIGN.Open_Internal();
                                    bModified = false;
                                }
                            }
                            break;
                        }
                    }
                    if (iPageDataExist == 0) {
                        if (fromNew) {
                            INVOICEDESIGN.LoadNewLayout();
                            bModified = false;
                        }
                        else if (fromExit) {
                            INVOICEDESIGN.CloseInvoiceDesign_Internal(fromExitElement, event);
                            fromExit = false;
                            fromExitElement = null;
                            bModified = false;
                            return;
                        }
                        else if (fromOpen) {
                            INVOICEDESIGN.Open_Internal();
                            bModified = false;
                        }
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveValidation}" + err.message, "Exception");
        }
    },

    //Click event - Called on clicking New button.
    NewLayout: function (layoutId) {

        try {
            if (bModified) {
                INVOICEDESIGN.SaveValidation(false, false, '', true, false, layoutId);
            }
            else {
                INVOICEDESIGN.LoadNewLayout();
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.NewLayout}" + err.message, "Exception");
        }
    },

    //Internal - Called from load popup.
    NewLayoutFromPopUp: function (layoutId) {
        try {
            INVOICEDESIGN.LoadNewLayout(layoutId);
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.NewLayout}" + err.message, "Exception");
        }
    },

    //Internal.
    NewLayoutSuccess: function (bSuccess, layoutObject) {
        try {

            SelectedLayout = null;
            if (bSuccess == true) {
                document.getElementById("hdnid_PageType").value = "";
                iNoofPages = 0;
                iCurrentPage = 0;
                var LayoutParent = document.getElementById("InvoiceDesignMainDiv");
                LayoutParent.innerHTML = "";
                objLayoutInformation = layoutObject;
                if (objLayoutInformation.Pages != null) {
                    document.getElementById('iTotalNoOfPages').value = objLayoutInformation.Pages.length;
                }
                else {
                    document.getElementById('iTotalNoOfPages').value = 1;
                }
                INVOICEDESIGN.PageSetup();

                INVOICEDESIGN.UpdateLayoutName(objLayoutInformation.Layout.Name != "" ? objLayoutInformation.Layout.Name : "New Layout1");
                var eleTabsDiv = document.getElementById("InvoiceDesignRightDiv");
                if (FCommon.UI.isValidObject(eleTabsDiv)) {
                    var fieldsTabHead = null, propertiesTabHead = null;
                    var fieldsTabBody = null, propertiesTabBody = null;
                    fieldsTabHead = $("#LiDesignField"); //eleTabsDiv.children[0].children[0];
                    propertiesTabHead = $("#LiProp");//eleTabsDiv.children[0].children[1];
                    fieldsTabBody = $("#InvoiceDesignFields");//eleTabsDiv.children[1].children[0];
                    propertiesTabBody = $("#InvoiceDesignFieldProperties");//eleTabsDiv.children[1].children[1];

                    //fieldsTabHead.className = "active";
                    INVOICEDESIGN.GetDesignerFields();
                    propertiesTabHead.className = "";
                    fieldsTabBody.className = "tab-pane";
                    propertiesTabBody.className = "tab-pane active";
                    propertiesTabBody.textContent = "";
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.NewLayoutSuccess}" + err.message, "Exception");
        }
    },

    NewPage: function (callFromPage, iPageNo) {
        try {
            if (callFromPage == true) {
                var retVal = confirm(document.getElementById("msgAddPageValidation").value);
                if (retVal == false) {
                    return;
                }
                document.getElementById('iTotalNoOfPages').value = FConvert.toInt(document.getElementById('iTotalNoOfPages').value) + 1;
            }
            var div = document.createElement("div");
            div.className = "col-lg-12 backgroundImg";
            div.style.padding = "0";
            div.style.border = "1px solid black";
            div.style.marginBottom = "50px";
            div.style.marginRight = "5px";
            div.style.position = "relative";
            div.id = INVOICEDESIGN.getLayoutDivId(iNoofPages);
            div.dataset.controltype = "0";
            div.dataset.datatype = "0";
            div.dataset.pageno = iNoofPages;
            div.dataset.bodyid = "0";
            div.setAttribute("ondrop", "INVOICEDESIGN.getControl(event)");
            div.setAttribute("ondragover", "INVOICEDESIGN.allowDropControl(event)");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectPageDiv(this,event)", "");
            div.setAttribute("onclick", "INVOICEDESIGN.SelectPageDiv(this,event);");
            div.setAttribute("onmouseup", "INVOICEDESIGN.mouseUpEvent(event)");
            var InvoiceDesignMainDiv = document.getElementById("InvoiceDesignMainDiv")
            if (InvoiceDesignMainDiv != null) {
                InvoiceDesignMainDiv.appendChild(div);
            }
            var Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iNoofPages));
            Layout.style.width = objLayoutInformation.PrintInfo.PageWidth + "in";
            Layout.style.height = objLayoutInformation.PrintInfo.PageHeight + "in";
            document.getElementById('lblInvoiceDesignPageCount').textContent = document.getElementById("msgLayoutPageCount").value + " " + (iCurrentPage == 0 ? 1 : iCurrentPage) + " of " + document.getElementById('iTotalNoOfPages').value;
            if (callFromPage == true) {
                var objPageDummyObject = { PageId: 0, PageHeader: [], IsPageAfterPreviousPage: false };
                objLayoutInformation.Pages.push(objPageDummyObject);
            }
            var units = INVOICEDESIGN.getUnit(objLayoutInformation.PrintInfo.Unit);
            INVOICEDESIGN.Ruler(div, units, "");
            INVOICEDESIGN.Page_Margin(div, units);
            INVOICEDESIGN.RulerSize(units);

            //    if (callFromPage == true) {
            //        Layout.querySelector("#divmargin1").style.marginTop = document.getElementById("id_LayoutDiv_0").querySelector("#divmargin1").style.marginTop;
            //        Layout.querySelector("#divmargin2").style.marginBottom = document.getElementById("id_LayoutDiv_0").querySelector("#divmargin2").style.marginBottom;
            //        Layout.querySelector("#divmargin3").style.marginLeft = document.getElementById("id_LayoutDiv_0").querySelector("#divmargin3").style.marginLeft;
            //        Layout.querySelector("#divmargin4").style.marginRight = document.getElementById("id_LayoutDiv_0").querySelector("#divmargin4").style.marginRight;
            //    }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.NewPage}" + err.message, "Exception");
        }
    },

    Open_Internal: function () {
        try {

            //Change the Load/ Save button caption.
            document.getElementById('btn_PopUpOk').innerHTML = document.getElementById("idbtnPopUpOKLoad").value;
            INVOICEDESIGN.SetDialogTitle("Open");
            INVOICEDESIGN.SetLayoutsToPopUpDialog(arrLayouts, false);
            document.getElementById('id_PopuplayoutName').style.display = "none";
            INVOICEDESIGN.OpenDialog();
            INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.Open(true)");
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.Open_Internal}" + err.message, "Exception");
        }
    },

    Open: function (fromPopUp, iSave, sLayoutName) {
        try {

            // reset svg container , if any
            if (svgcontainer) {
                svgcontainer = null;
            }
            document.getElementById("hdnid_PageType").value = "";
            if (fromPopUp == true) {
                if (document.getElementById('id_PopuplayoutName').textContent == "") {
                    COMMON.prototype.showMessage(document.getElementById("msgValidateLoadLayout").value, "Error");
                    return;
                }
                if (SelectedLayout != undefined) {
                    var layoutId = SelectedLayout.id;
                    INVOICEDESIGN.UpdateLayoutName(SelectedLayout.textContent);
                    INVOICEDESIGN.CloseDialog();
                    //update layout id in data attributes of preview and print
                    $("#menu-print").attr("data-layoutid", layoutId);
                    $("#menu-preview").attr("data-layoutid", layoutId);
                    $("#li_InvoicePreview").attr("data-layoutid", layoutId);
                    INVOICEDESIGN.NewLayoutFromPopUp(layoutId);
                    INVOICEDESIGN.BindOkToPopUp("");
                    document.getElementById('id_PopuplayoutName').textContent = "";
                    bModified = false;
                }
            }
            else {
                if (bModified == true) {
                    INVOICEDESIGN.SaveValidation(false, false, '', false, true);
                }
                else {
                    //Change the Load/ Save button caption.
                    document.getElementById('btn_PopUpOk').value = document.getElementById("idbtnPopUpOKLoad").value;
                    INVOICEDESIGN.SetDialogTitle("Open");
                    INVOICEDESIGN.SetLayoutsToPopUpDialog(arrLayouts, false);
                    document.getElementById('id_PopuplayoutName').style.display = "none";
                    INVOICEDESIGN.OpenDialog();
                    INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.Open(true)");
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.Open}" + err.message, "Exception");
        }
    },

    OpenXML: function (ele, fromOpenDialog) {
        try {

            if (fromOpenDialog == true) {
                var data = new FormData();
                data.append("iVoucherType", iVoucherType);
                data.append("iModuleType", iModuleType);
                data.append('xmlfile', ele.files[0]);
                result = NETWORK.uploadFile(
                                 GLOBAL.getContextPath("OpenXML", "InvoiceDesign", "Transactions"),
                                 true,
                                 data,
                                 "",
                                 true,
                                 "INVOICEDESIGN.NewLayoutSuccess",
                                 "GLOBAL.LoadingStart",
                                 "GLOBAL.LoadingEnd"
                           );
            }
            else {
                var uploadfile = document.getElementById("uploadfile");
                uploadfile.onclick = function () {
                    this.value = null;
                };
                uploadfile.click();
            }
            //clear layout values
            objLayoutInformation.Layout = { ID: -1, Name: "" };
            objLayoutInformation.ReportId = iVoucherType;
            objLayoutInformation.Module = iModuleType;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.OpenXML}" + err.message, "Exception");
        }
    },

    Save: function (fromPopUp, fromExit, element) {

        var layoutName = "";
        var id_layoutName = null;
        try {
            //Change the Load/ Save button caption.
            document.getElementById('btn_PopUpOk').innerHTML = document.getElementById("idbtnPopUpOKSave").value;
            if (fromPopUp == true) {

                id_layoutName = document.getElementById("id_PopuplayoutName")
                if (id_layoutName != null) {
                    layoutName = id_layoutName.value;
                }
                if (layoutName.length > 0 && !INVOICEDESIGN.LayoutExist(layoutName)) {
                    objLayoutInformation.Layout.Name = layoutName;
                    fromExit = false;
                    INVOICEDESIGN.SaveLayout();
                    INVOICEDESIGN.CloseDialog();
                    INVOICEDESIGN.BindOkToPopUp("");
                    sLayoutName = layoutName;
                }
                else if (layoutName.length == 0) {
                    COMMON.prototype.showMessage("Enter a valid Layout Name", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
                else {
                    //Layout exists, show duplicate layout error message
                    COMMON.prototype.showMessage("Layout Name already exists", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
            }
            else {

                if (objLayoutInformation.Layout.Name == "" && objLayoutInformation.Layout.ID == -1) {
                    INVOICEDESIGN.SetDialogTitle("Save");
                    INVOICEDESIGN.SetLayoutsToPopUpDialog(null, true);
                    document.getElementById('id_PopuplayoutName').value = "";
                    document.getElementById('id_PopuplayoutName').style.display = "";
                    INVOICEDESIGN.OpenDialog();
                    INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.Save(true, false, '')");
                }
                else {
                    //sLayoutName = objLayoutInformation.Layout.Name;
                    INVOICEDESIGN.SaveLayout();
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.Save}" + err.message, "Exception");
        }
    },

    SaveAs: function (fromPopUp) {

        var layoutName = "";
        try {
            if (fromPopUp == true) {
                layoutName = document.getElementById("id_PopuplayoutName").value;
                if (layoutName.length > 0 && !INVOICEDESIGN.LayoutExist(layoutName)) {
                    objLayoutInformation.Layout.Name = layoutName;
                    objLayoutInformation.Layout.ID = -1;
                    //////////update layout name here 
                    INVOICEDESIGN.UpdateLayoutName(layoutName);
                    INVOICEDESIGN.SaveLayout();
                    INVOICEDESIGN.CloseDialog();
                    INVOICEDESIGN.BindOkToPopUp("");
                }
                else if (layoutName.length == 0) {
                    COMMON.prototype.showMessage("Enter a valid Layout Name", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
                else {
                    //Layout exists, show duplicate layout error message
                    COMMON.prototype.showMessage("Layout Name already exists", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
            }
            else {
                INVOICEDESIGN.SetDialogTitle("Save As");
                document.getElementById('btn_PopUpOk').innerHTML = document.getElementById("idbtnPopUpOKSave").value;
                INVOICEDESIGN.SetLayoutsToPopUpDialog(null, true);
                document.getElementById('id_PopuplayoutName').style.display = "";
                INVOICEDESIGN.OpenDialog();
                INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.SaveAs(true)");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAs}" + err.message, "Exception");
        }
    },
    SaveAsFromRD: function (fromPopUp) {

        var layoutName = "";
        try {
            bFromRD = true;
            if (fromPopUp == true) {
                layoutName = document.getElementById("id_PopuplayoutName").value;
                if (layoutName.length > 0 && !INVOICEDESIGN.LayoutExist(layoutName)) {
                    objLayoutInformation.Layout.Name = layoutName;
                    //objLayoutInformation.Layout.ID = -1;
                    //////////update layout name here 
                    INVOICEDESIGN.UpdateLayoutName(layoutName);
                    bFromRD = true;
                    INVOICEDESIGN.SaveLayout();
                    INVOICEDESIGN.CloseDialog();
                    INVOICEDESIGN.BindOkToPopUp("");
                }
                else if (layoutName.length == 0) {
                    COMMON.prototype.showMessage("Enter a valid Layout Name", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
                else {
                    //Layout exists, show duplicate layout error message
                    COMMON.prototype.showMessage("Layout Name already exists", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
            }
            else {
                INVOICEDESIGN.SetDialogTitle("Save As");
                document.getElementById('btn_PopUpOk').innerHTML = document.getElementById("idbtnPopUpOKSave").value;
                INVOICEDESIGN.SetLayoutsToPopUpDialog(null, true);
                document.getElementById('id_PopuplayoutName').style.display = "";
                INVOICEDESIGN.OpenDialog();
                INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.SaveAsFromRD(true)");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAs}" + err.message, "Exception");
        }
    },
    SaveAsImage: function (fromPopUp, SelectedLayoutId, SelectedLayouttxtContent) {
        try {
            if (fromPopUp == true) {
                if (SelectedLayoutId != undefined) {
                    var objLayout = { Id: SelectedLayoutId, Name: SelectedLayouttxtContent };
                    INVOICEDESIGN.CloseDialog();
                    INVOICEDESIGN.BindOkToPopUp("");
                    result = NETWORK.executeServerMethod(
                                     GLOBAL.getContextPath("SaveAsImage", "InvoiceDesign", "Transactions"),
                                     true,
                                     { objLayout: objLayout, iVoucherType: iVoucherType, iHeaderId: iHeaderId },
                                     "",
                                     true,
                                     "INVOICEDESIGN.SaveAsImageSuccess",
                                     "GLOBAL.LoadingStart",
                                     "GLOBAL.LoadingEnd"
                               );
                }
            }
            else {
                INVOICEDESIGN.SetDialogTitle("Save As Image");
                INVOICEDESIGN.SetLayoutsToPopUpDialog(arrLayouts, false);
                INVOICEDESIGN.OpenDialog();
                INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.SaveAsImage(true)");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAsImage}" + err.message, "Exception");
        }
    },

    SaveAsImageSuccess: function (bSuccess, arrFiles) {
        try {
            if (bSuccess == true) {
                for (var i = 0; i < arrFiles.length; i++) {
                    var w = window.open(GLOBAL.getContextPath("SaveAsXML", "InvoiceDesign", "Transactions") + '?xmlFileName=' + arrFiles[i], "_blank");
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAsImageSuccess}" + err.message, "Exception");
        }
    },

    SaveAsXML: function (fromPopUp, SelectedLayoutId, SelectedLayouttxtContent) {

        var objLayout = {};
        try {
            if (fromPopUp == true) {
                layoutName = document.getElementById("id_PopuplayoutName").value;
                if (layoutName.length > 0) {
                    //objLayoutInformation.Layout.Name = layoutName;
                    //objLayoutInformation.Layout.ID = -1;
                    //////////update layout name here 
                    //INVOICEDESIGN.UpdateLayoutName(layoutName);
                    INVOICEDESIGN.GetSaveLayoutObject();
                    INVOICEDESIGN.CloseDialog();
                    INVOICEDESIGN.BindOkToPopUp("");
                    result = NETWORK.executeServerMethod(
                                    GLOBAL.getContextPath("SaveAsXML", "InvoiceDesign", "Transactions"),
                                    true,
                                    { objLayoutInfo: objLayoutInformation, xmlFileName: layoutName },
                                    "",
                                    true,
                                    "INVOICEDESIGN.SaveAsXMLSuccess",
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd"
                              );
                }
                else if (layoutName.length == 0) {
                    COMMON.prototype.showMessage("Enter a valid Layout Name", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
                else {
                    //Layout exists, show duplicate layout error message
                    COMMON.prototype.showMessage("Layout Name already exists", "ERROR");
                    INVOICEDESIGN.CloseDialog();
                }
                //if (SelectedLayoutId > 0 || SelectedLayout != undefined) {
                //    if (SelectedLayoutId > 0) {
                //        objLayout = { ID: SelectedLayoutId, Name: SelectedLayouttxtContent };
                //    }
                //    else if (SelectedLayout != undefined) {
                //        objLayout = { ID: parseInt(SelectedLayout.id), Name: SelectedLayout.textContent };
                //    }
                //    INVOICEDESIGN.CloseDialog();
                //    INVOICEDESIGN.BindOkToPopUp("");
                //    result = NETWORK.executeServerMethod(
                //                     GLOBAL.getContextPath("SaveAsXML", "InvoiceDesign", "Transactions"),
                //                     true,
                //                     { objLayoutInfo: objLayoutInformation },
                //                     "",
                //                     true,
                //                     "INVOICEDESIGN.SaveAsXMLSuccess",
                //                     "GLOBAL.LoadingStart",
                //                     "GLOBAL.LoadingEnd"
                //               );
                //}

            }
            else {
                INVOICEDESIGN.SetDialogTitle("Save As XML");
                INVOICEDESIGN.SetLayoutsToPopUpDialog(arrLayouts, true);
                INVOICEDESIGN.OpenDialog();
                INVOICEDESIGN.BindOkToPopUp("INVOICEDESIGN.SaveAsXML(true)");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAsXML}" + err.message, "Exception");
        }
    },

    SaveAsXMLSuccess: function (bSuccess, fileName) {
        try {
            if (bSuccess == true) {
                transEntryGlobal.m_bDisableClear = true;
                window.location = GLOBAL.getContextPath("SaveAsXML", "InvoiceDesign", "Transactions") + '?xmlFileName=' + fileName;
                transEntryGlobal.m_bDisableClear = false;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAsXMLSuccess}" + err.message, "Exception");
        }
    },

    SaveAsHTML: function (SelectedLayoutId, SelectedLayouttxtContent) {
        try {
            result = NETWORK.executeServerMethod(
                                     GLOBAL.getContextPath("SaveAsHTML", "InvoiceDesign", "Transactions"),
                                     true,
                                     { objLayoutInformation: objLayoutInformation },
                                     "",
                                     true,
                                     "INVOICEDESIGN.SaveAsXMLSuccess",
                                     "GLOBAL.LoadingStart",
                                     "GLOBAL.LoadingEnd"
                               );
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveAsHTML}" + err.message, "Exception");
        }
    },

    SaveLayout: function () {

        var iPageCount = 0, iCounter = 0;
        var currentPageHeaderObj = null, element = null;
        var bSaveHTMLSource = false;
        try {
            iPageCount = objLayoutInformation.Pages.length;
            if (bFromRD = false) {
                objLayoutInformation.ReportId = iVoucherType;
            }
            else {
                bFromRD = false;
            }
            //objLayoutInformation.ReportId = iVoucherType;
            for (var i = 0; i < iPageCount; i++) {
                if (objLayoutInformation.Pages[i].PageHeader.length == 0) {
                    COMMON.prototype.showMessage(document.getElementById("msgSaveLayoutEmptyPageValidation").value, "Error");
                    fromExit = false;
                    fromExitElement = null;
                    return;
                }
                else {
                    ///////////saving area elements details properly
                    for (iCounter = 0; iCounter < objLayoutInformation.Pages[i].PageHeader.length; iCounter++) {
                        currentPageHeaderObj = objLayoutInformation.Pages[i].PageHeader[iCounter];
                        if (currentPageHeaderObj.MasterId > 0) {
                            //check whether its left and top are same as its element in ui
                            //changes made by rasool for approval history in area control issue.
                            switch (currentPageHeaderObj.Type) {
                                case CONTROLTYPE.Statictext:
                                    element = document.getElementById(INVOICEDESIGN.getStaticTextControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Formula:
                                    element = document.getElementById(INVOICEDESIGN.getFormulaControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Textblock:
                                    element = document.getElementById(INVOICEDESIGN.getTextBlockControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Rectangle:
                                    element = document.getElementById(INVOICEDESIGN.getRectangleControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.ApprovalHistory:
                                    element = document.getElementById(INVOICEDESIGN.getApprovalHistoryControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.PostingDetails:
                                    element = document.getElementById(INVOICEDESIGN.getPostingDetailsControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Table:
                                    element = document.getElementById(INVOICEDESIGN.getTableControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Line:
                                    element = document.getElementById(INVOICEDESIGN.getLineControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Ellipse:
                                    element = document.getElementById(INVOICEDESIGN.getEllipseControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Image:
                                    element = document.getElementById(INVOICEDESIGN.getBitMapControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.Maincanvas:
                                    element = document.getElementById(INVOICEDESIGN.getMainGridControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                                case CONTROLTYPE.BodyCanvas:
                                    element = document.getElementById(INVOICEDESIGN.getBodyGridControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    break;
                            }
                            if (FCommon.UI.isValidObject(element) == true) {
                                if (FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2)) != currentPageHeaderObj.Left) {
                                    currentPageHeaderObj.Left = FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2));
                                }
                                if (FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2)) != currentPageHeaderObj.Top) {
                                    currentPageHeaderObj.Top = FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2));
                                }
                            }
                        }
                    }
                    $.grep(objLayoutInformation.Pages[i].PageHeader, function (x) {
                        if (x.Text) {
                            if (x.Text.includes(".Company Logo")) {
                                x.StaticTextProperties.DataType = 7;
                            }
                        }
                        if (x.Height == 0 && x.Type != CONTROLTYPE.Line) {
                            x.Height = 50;
                        }
                        if (x.Width == 0 && x.Type != CONTROLTYPE.Line) {
                            x.Width = 100;
                        }
                    });
                }
            }
            if (document.getElementById("id_SubReportId")) {
                objLayoutInformation.SubReportId = document.getElementById("id_SubReportId").value;
            }
            if (objLayoutInformation.Layout.ID > -1) {
                bSaveHTMLSource = document.getElementById('hdnid_SaveHTMLSource').value;

                result = NETWORK.executeServerMethod(
                                   GLOBAL.getContextPath("SaveInvoiceLayout", "InvoiceDesign", "Transactions"),
                                  true,
                                   { objLayoutInformation: objLayoutInformation, bSaveHTMLSource: bSaveHTMLSource },
                                  "",
                                  true,
                                  "INVOICEDESIGN.SaveLayoutSuccess",
                                  "GLOBAL.LoadingStart",
                                  "GLOBAL.LoadingEnd"
                             );
            }
            else {
                result = NETWORK.executeServerMethod(
                                      GLOBAL.getContextPath("validateInvoiceLayout", "InvoiceDesign", "Transactions"),
                                     true,
                                      { objLayoutInformation: objLayoutInformation },
                                     "",
                                     true,
                                     "INVOICEDESIGN.SaveLayoutValidation",
                                     "GLOBAL.LoadingStart",
                                     "GLOBAL.LoadingEnd"
                                );
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveLayout}" + err.message, "Exception");
        }
    },
    GetSaveLayoutObject: function () {

        var iPageCount = 0, iCounter = 0;
        var currentPageHeaderObj = null, element = null;
        var bSaveHTMLSource = false;
        try {
            iPageCount = objLayoutInformation.Pages.length;
            objLayoutInformation.ReportId = iVoucherType;
            for (var i = 0; i < iPageCount; i++) {
                if (objLayoutInformation.Pages[i].PageHeader.length == 0) {
                    COMMON.prototype.showMessage(document.getElementById("msgSaveLayoutEmptyPageValidation").value, "Error");
                    fromExit = false;
                    fromExitElement = null;
                    return;
                }
                else {
                    ///////////saving area elements details properly
                    for (iCounter = 0; iCounter < objLayoutInformation.Pages[i].PageHeader.length; iCounter++) {
                        currentPageHeaderObj = objLayoutInformation.Pages[i].PageHeader[iCounter];
                        if (currentPageHeaderObj.MasterId > 0) {
                            //check whether its left and top are same as its element in ui
                            switch (currentPageHeaderObj.Type) {
                                case CONTROLTYPE.Statictext:
                                    element = document.getElementById(INVOICEDESIGN.getStaticTextControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    if (FCommon.UI.isValidObject(element) == true) {
                                        if (FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2)) != currentPageHeaderObj.Left) {
                                            currentPageHeaderObj.Left = FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2));
                                        }
                                        if (FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2)) != currentPageHeaderObj.Top) {
                                            currentPageHeaderObj.Top = FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2));
                                        }
                                    }
                                    break;
                                case CONTROLTYPE.Formula:
                                    element = document.getElementById(INVOICEDESIGN.getFormulaControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    if (FCommon.UI.isValidObject(element) == true) {
                                        if (FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2)) != currentPageHeaderObj.Left) {
                                            currentPageHeaderObj.Left = FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2));
                                        }
                                        if (FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2)) != currentPageHeaderObj.Top) {
                                            currentPageHeaderObj.Top = FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2));
                                        }
                                    }
                                    break;

                                case CONTROLTYPE.Textblock:
                                    element = document.getElementById(INVOICEDESIGN.getTextBlockControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    if (FCommon.UI.isValidObject(element) == true) {
                                        if (FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2)) != currentPageHeaderObj.Left) {
                                            currentPageHeaderObj.Left = FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2));
                                        }
                                        if (FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2)) != currentPageHeaderObj.Top) {
                                            currentPageHeaderObj.Top = FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2));
                                        }
                                    }
                                    break;
                                case CONTROLTYPE.Rectangle:
                                    element = document.getElementById(INVOICEDESIGN.getRectangleControlId(currentPageHeaderObj.UID, iCurrentPage));
                                    if (FCommon.UI.isValidObject(element) == true) {
                                        if (FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2)) != currentPageHeaderObj.Left) {
                                            currentPageHeaderObj.Left = FConvert.toDecimal(element.style.left.substring(0, element.style.left.length - 2)) + FConvert.toDecimal(element.parentElement.style.left.substring(0, element.parentElement.style.left.length - 2));
                                        }
                                        if (FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2)) != currentPageHeaderObj.Top) {
                                            currentPageHeaderObj.Top = FConvert.toDecimal(element.style.top.substring(0, element.style.top.length - 2)) + FConvert.toDecimal(element.parentElement.style.top.substring(0, element.parentElement.style.top.length - 2));
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    $.grep(objLayoutInformation.Pages[i].PageHeader, function (x) {
                        if (x.Text) {
                            if (x.Text.includes(".Company Logo")) {
                                x.StaticTextProperties.DataType = 7;
                            }
                        }
                        if (x.Height == 0 && x.Type != CONTROLTYPE.Line) {
                            x.Height = 50;
                        }
                        if (x.Width == 0 && x.Type != CONTROLTYPE.Line) {
                            x.Width = 100;
                        }
                    });
                }
            }
            if (document.getElementById("id_SubReportId")) {
                objLayoutInformation.SubReportId = document.getElementById("id_SubReportId").value;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveLayout}" + err.message, "Exception");
        }
    },

    SaveLayoutValidation: function (bSuccess, data) {
        try {
            if (bSuccess == true) {
                if (data != "") {
                    COMMON.prototype.showMessage(document.getElementById("msgValidateSaveLayout").value, "Error");
                    objLayoutInformation.Layout.ID = -1;
                    objLayoutInformation.Layout.Name = '';
                    return;
                }
                var bSaveHTMLSource = document.getElementById('hdnid_SaveHTMLSource').value;
                objLayoutInformation.SubReportId = document.getElementById("id_SubReportId").value;
                //objLayoutInformation.Module = 0;
                result = NETWORK.executeServerMethod(
                                   GLOBAL.getContextPath("SaveInvoiceLayout", "InvoiceDesign", "Transactions"),
                                  true,
                                   { objLayoutInformation: objLayoutInformation, bSaveHTMLSource: bSaveHTMLSource },
                                  "",
                                  true,
                                  "INVOICEDESIGN.SaveLayoutSuccess",
                                  "GLOBAL.LoadingStart",
                                  "GLOBAL.LoadingEnd"
                             );
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveLayoutValidation}" + err.message, "Exception");
        }
    },

    SaveLayoutSuccess: function (bSuccess, data) {
        var successmsg = document.getElementById("msgLayoutsavedsuccessfully").value;
        var layoutid = parseInt(data);
        try {
            if (bSuccess == true) {
                COMMON.prototype.showMessage(successmsg, "Success");
                if (document.getElementById("headerfooterLayoutId") != null) {
                    document.getElementById("headerfooterLayoutId").value = data;
                }
                setTimeout(function () {
                    if (layoutid != null) {
                        objLayoutInformation.Layout.ID = parseInt(layoutid);
                        if (bFromRD) {
                            //RD_ENTRY.SERVER.saveRDData(g_ReportObject);
                        }
                    }
                }, 0)
                INVOICEDESIGN.RefreshLayoutList();
                //if (data != null) {
                //    objLayoutInformation.Layout.ID = parseInt(data);
                //}
                bModified = false;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SaveLayoutSuccess}" + err.message, "Exception");
        }
    },

    ///////////
    RemoveLayout: function () {
        try {
            var retVal = confirm(document.getElementById("msgDelLayoutValidation").value);
            if (retVal == true) {
                if (objLayoutInformation != null && objLayoutInformation.Layout != null && objLayoutInformation.Layout.ID > -1) {
                    SelectedLayout = undefined;
                    result = NETWORK.executeServerMethod(
                                                     GLOBAL.getContextPath("RemoveLayout", "InvoiceDesign", "Transactions"),
                                                     true,
                                                     { LayoutId: objLayoutInformation.Layout.ID, VoucherType: iVoucherType, ModuleType: iModuleType },
                                                     "",
                                                     true,
                                                     "INVOICEDESIGN.RemoveLayoutSuccess",
                                                     "GLOBAL.LoadingStart",
                                                     "GLOBAL.LoadingEnd"
                                               );
                }
                else {
                    INVOICEDESIGN.NewLayout(0);
                    COMMON.prototype.showMessage("Layout Deleted", "Remove Layout");
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.RemoveLayout}" + err.message, "Exception");
        }
    },

    RemoveCurrentPage: function () {
        try {
            if (iCurrentPage != undefined) {
                iNoofPages = iNoofPages - 1;
                if (iCurrentPage <= 1) {
                    document.getElementById('lblInvoiceDesignPageCount').textContent = document.getElementById("msgLayoutPageCount").value + " " + (1) + " of " + iNoofPages;
                }
                else {
                    document.getElementById('lblInvoiceDesignPageCount').textContent = document.getElementById("msgLayoutPageCount").value + " " + (1) + " of " + iNoofPages;
                }
                var CurrentPage = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                if (CurrentPage != null) {
                    if (objLayoutInformation != null) {
                        if (objLayoutInformation.Pages != null) {
                            if (objLayoutInformation.Pages.length == 1) {
                                COMMON.prototype.showMessage(document.getElementById("msgDelSinglePageValidation").value, "Error");
                                return;
                            }
                            else {
                                var retVal = confirm(document.getElementById("msgDelPageValidation").value);
                                if (retVal == true) {
                                    //decrease the data-pageno value by 1 for next page onwards.
                                    var tempCurrentPage = CurrentPage;
                                    var iPageNoVal = 0;
                                    while (FCommon.UI.isValidObject(tempCurrentPage.nextElementSibling)) {
                                        tempCurrentPage = tempCurrentPage.nextElementSibling;
                                        iPageNoVal = tempCurrentPage.getAttribute('data-pageno');
                                        tempCurrentPage.setAttribute('data-pageno', iPageNoVal - 1);
                                        tempCurrentPage.id = 'id_LayoutDiv_' + (iPageNoVal - 1);
                                    }
                                    objLayoutInformation.Pages.splice(iCurrentPage, 1);
                                    CurrentPage.parentNode.removeChild(CurrentPage);
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.RemoveCurrentPage} " + err.message);
        }
    },

    RemoveControl: function (removefield) {

        var iCount = 0, ColumnCount = 0;
        var UID = null, eleTable = null;
        try {
            iCurrentPage = FConvert.toInt(removefield.getAttribute('data-pageno'));
            if (removefield != undefined) {
                if (removefield.id.includes("ColumnGrid") == true) {
                    removefield = removefield.parentElement; // for selecting Main Grid as a whole
                }
                if (removefield.id.indexOf("BodyColumn") > -1) {
                    var bodyid = parseInt(removefield.dataset.bodyid);
                    var ColumnIndex = parseInt(removefield.id.split('_')[removefield.id.split('_').length - 1]);
                    var colid, colidprefix = "BodyColumn_" + bodyid + "_";
                    var currentcolindex = 0;
                    if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                        for (iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == bodyid) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null) {
                                    for (ColumnCount = 0; ColumnCount < objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.length; ColumnCount++) {
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[ColumnCount].ColumnIndex == ColumnIndex) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.splice(ColumnCount, 1);
                                            break;
                                        }
                                    }
                                    for (ColumnCount; ColumnCount < objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.length; ColumnCount++) {
                                        // update column index for rest columns -  decrease by 1
                                        currentcolindex = objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[ColumnCount].ColumnIndex - 1;
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[ColumnCount].ColumnIndex = currentcolindex;
                                        //also update column index in dom properties
                                        colid = colidprefix + parseInt(ColumnCount + 1); //+1 bcoz , the column is not yet deleted from dom
                                        if (document.getElementById(colid)) {
                                            document.getElementById(colid).setAttribute("data-colindex", currentcolindex);
                                            document.getElementById(colid).id = colidprefix + currentcolindex;;
                                        }
                                    }
                                    if (ColumnCount < objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.length)
                                        break;
                                }
                            }
                        }
                    }
                }
                else if (removefield.id.includes("imageEle")) {
                    removefield = removefield.parentElement;
                }
                var datatype = parseInt(removefield.getAttribute('data-datatype'));
                if (removefield.getAttribute('data-datatype') == 10) {
                    eleTable = removefield.children[0];
                    if (FCommon.UI.isValidObject(eleTable)) {
                        if (removefield.children[0].id != "") {
                            UID = removefield.children[0].id.split('_');
                            UID = UID[UID.length - 1];
                        }
                    }
                }
                else {
                    UID = parseInt(removefield.id.split('_')[removefield.id.split('_').length - 1]);
                }
                if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                    for (iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == UID) {
                            objLayoutInformation.Pages[iCurrentPage].PageHeader.splice(iCount, 1);
                            break;
                        }
                    }
                }
            }

            if (removefield.id != INVOICEDESIGN.getLayoutDivId(iCurrentPage)) {
                removefield.parentNode.removeChild(removefield);
                removefield = undefined;
            }
            SelectedField = undefined;
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.RemoveControl} " + err.message);
        }
    },

    RemoveControls: function () {

        var iLeft = 0, iItemsinArray = 0;
        var arrCtrlIDs = [];
        var ele = null;
        try {
            if (ctrlIDs != "" && ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            var retVal = null;
            if (iItemsinArray > 0) {
                retVal = confirm(document.getElementById("msgDelBodyControlValidation").value);
                if (retVal > 0) {
                    for (var i = 0; i < iItemsinArray; i++) {
                        ele = document.getElementById(arrCtrlIDs[i]);
                        if (FCommon.UI.isValidObject(ele)) {
                            //Remove ele from Ui and Object
                            INVOICEDESIGN.RemoveControl(ele);
                        }
                    }
                }
            }
            else {
                if (SelectedField != undefined) {
                    ele = SelectedField;
                    if (FCommon.UI.isValidObject(ele)) {
                        //Remove ele from Ui and Object
                        INVOICEDESIGN.RemoveControl(ele);
                    }
                }
            }
            ctrlIDs = "";
            //////////////////////////////////////
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.RemoveControls} " + err.message);
        }
    },

    //Internal.
    RemoveLayoutSuccess: function (bSuccess, layoutObject) {
        try {
            if (bSuccess == true) {
                document.getElementById("hdnid_PageType").value = "";
                iNoofPages = 0;
                iCurrentPage = 0;
                var LayoutParent = document.getElementById("InvoiceDesignMainDiv");
                LayoutParent.innerHTML = "";
                objLayoutInformation = layoutObject;
                if (objLayoutInformation.Pages != null) {
                    document.getElementById('iTotalNoOfPages').value = objLayoutInformation.Pages.length;
                }
                else {
                    document.getElementById('iTotalNoOfPages').value = 1;
                }
                INVOICEDESIGN.PageSetup();
                INVOICEDESIGN.UpdateLayoutName(objLayoutInformation.Layout.Name != "" ? objLayoutInformation.Layout.Name : "New Layout1");
                INVOICEDESIGN.RefreshLayoutList();
                var eleTabsDiv = document.getElementById("InvoiceDesignRightDiv");

                if (FCommon.UI.isValidObject(eleTabsDiv)) {
                    var fieldsTabHead = null, propertiesTabHead = null;
                    var fieldsTabBody = null, propertiesTabBody = null;
                    fieldsTabHead = eleTabsDiv.children[0].children[0];
                    propertiesTabHead = eleTabsDiv.children[0].children[0].children[0].children[1];
                    fieldsTabBody = eleTabsDiv.children[1].children[0];
                    propertiesTabBody = eleTabsDiv.children[1].children[1];

                    fieldsTabHead.className = "tabbable-line";
                    INVOICEDESIGN.GetDesignerFields();
                    propertiesTabHead.className = "";
                    fieldsTabBody.className = "tab-pane active";
                    propertiesTabBody.className = "tab-pane";
                    propertiesTabBody.textContent = "";
                }
                //show layout delete message
                COMMON.prototype.showMessage("Layout Deleted Successfully", "Remove Layout");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.RemoveLayoutSuccess}" + err.message, "Exception");
        }
    },
    ////////////

    PageSizeSetup: function () {
        try {
            bPreview = false;
            if (document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)) != null) {
                INVOICEDESIGN.currentLayoutBoundingRect = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
            }
            document.getElementById("InvoiceDesignRightDiv").style.display = 'none';
            $("#InvoicePaneldiv").removeClass("col-lg-9");
            $("#InvoicePaneldiv").addClass("col-lg-12");


            if (document.getElementById("hdnid_PageType").value == "") {
                document.getElementById("hdnid_PageType").value = document.getElementById("id_PageType").value;
                document.getElementById("hdnid_PaperOrientation").value = document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value;
                document.getElementById("hdnid_PaperUnit").value = document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value;
                document.getElementById("hdnid_PageSizeLeftMargin").value = document.getElementById("id_PageSizeLeftMargin").value;
                document.getElementById("hdnid_PageSizeRightMargin").value = document.getElementById("id_PageSizeRightMargin").value;
                document.getElementById("hdnid_PageSizeTopMargin").value = document.getElementById("id_PageSizeTopMargin").value;
                document.getElementById("hdnid_PageSizeBottomMargin").value = document.getElementById("id_PageSizeBottomMargin").value;
            } else {
                document.getElementById("id_PageType").value = document.getElementById("hdnid_PageType").value;
                document.getElementsByName("id_PaperOrientation")[0].checked = document.getElementById("hdnid_PaperOrientation").value == "0" ? true : false;
                document.getElementsByName("id_PaperOrientation")[1].checked = document.getElementById("hdnid_PaperOrientation").value == "0" ? false : true;
                document.getElementsByName("id_PaperUnit")[0].checked = document.getElementById("hdnid_PaperUnit").value == "0" ? true : false;
                document.getElementsByName("id_PaperUnit")[1].checked = document.getElementById("hdnid_PaperUnit").value == "0" ? false : true;

                document.getElementById("id_PageSizeLeftMargin").value = document.getElementById("hdnid_PageSizeLeftMargin").value;
                document.getElementById("id_PageSizeRightMargin").value = document.getElementById("hdnid_PageSizeRightMargin").value;
                document.getElementById("id_PageSizeTopMargin").value = document.getElementById("hdnid_PageSizeTopMargin").value;
                document.getElementById("id_PageSizeBottomMargin").value = document.getElementById("hdnid_PageSizeBottomMargin").value;
            }
            var id_PageType = document.getElementById("id_PageType");
            var id_PaperOrientation = FConvert.toInt(document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value);
            var id_PaperUnit = FConvert.toInt(document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value);
            var id_PageSizeLeftMargin = document.getElementById("id_PageSizeLeftMargin");
            var id_PageSizeRightMargin = document.getElementById("id_PageSizeRightMargin");
            var id_PageSizeTopMargin = document.getElementById("id_PageSizeTopMargin");
            var id_PageSizeBottomMargin = document.getElementById("id_PageSizeBottomMargin");
            var id_PageSizeLeftMarginDisplay = document.getElementById("id_PageSizeLeftMarginDisplay");
            var id_PageSizeRightMarginDisplay = document.getElementById("id_PageSizeRightMarginDisplay");
            var id_PageSizeTopMarginDisplay = document.getElementById("id_PageSizeTopMarginDisplay");
            var id_PageSizeBottomMarginDisplay = document.getElementById("id_PageSizeBottomMarginDisplay");

            if (objPrintInfo.View == 0)
                document.getElementsByName("id_PaperOrientation")[0].checked = true;
            else
                document.getElementsByName("id_PaperOrientation")[1].checked = true;

            id_PageSizeLeftMargin.value = objPrintInfo.Margin.Left;
            id_PageSizeRightMargin.value = objPrintInfo.Margin.Right;
            id_PageSizeTopMargin.value = objPrintInfo.Margin.Top;
            id_PageSizeBottomMargin.value = objPrintInfo.Margin.Bottom;

            if (objPrintInfo.Unit == Unit.Inch) {
                document.getElementsByName("id_PaperUnit")[1].checked = true;
                id_PageSizeLeftMarginDisplay.value = objPrintInfo.Margin.Left;
                id_PageSizeRightMarginDisplay.value = objPrintInfo.Margin.Right;
                id_PageSizeTopMarginDisplay.value = objPrintInfo.Margin.Top;
                id_PageSizeBottomMarginDisplay.value = objPrintInfo.Margin.Bottom;
            }
            else {
                document.getElementsByName("id_PaperUnit")[0].checked = true;
                id_PageSizeLeftMarginDisplay.value = FConvert.toDecimal((objPrintInfo.Margin.Left * 2.54), 2);
                id_PageSizeRightMarginDisplay.value = FConvert.toDecimal((objPrintInfo.Margin.Right * 2.54), 2);
                id_PageSizeTopMarginDisplay.value = FConvert.toDecimal((objPrintInfo.Margin.Top * 2.54), 2);
                id_PageSizeBottomMarginDisplay.value = FConvert.toDecimal((objPrintInfo.Margin.Bottom * 2.54), 2);
            }

            id_PageType.onchange();
            $("#id_PageSetup").show();

            document.getElementById("InvoiceDesignRightDiv").style.pointerEvents = 'none';
            document.getElementById("InvoiceDesignRightDiv").style.display = 'none';
            document.getElementById("id_PrintPreview").style.display = "block";
            //document.getElementById("id_InvoiceDesign_btnContrls").style.pointerEvents = 'none';
            //document.getElementById("id_InvoicePrint").style.pointerEvents = "auto";
            //document.getElementById('id_InvoicePrint').parentElement.children[1].style.pointerEvents = "auto";
            //document.getElementById("id_InvoiceDesingCancel").style.pointerEvents = "auto";
            var arr = ['iSave', 'iNew', 'iOpen', 'iDelete', 'iBar', 'iAlign', 'iSalesInvoice'];
            INVOICEDESIGN.DisableInvoiceDesignPageButtons(arr);
            document.getElementById("li_InvoiceDesigner").setAttribute('class', '');
            document.getElementById("li_InvoiceDesigner").children[0].setAttribute('class', 'theme_background-color-reverse');
            document.getElementById('Design').style.display = 'none';
            document.getElementById('Design').className = 'tab-pane fade';

            document.getElementById("li_InvoicePreview").setAttribute('class', '');
            document.getElementById("li_InvoicePreview").children[0].setAttribute('class', 'theme_background-color-reverse');
            document.getElementById('Preview').style.display = 'none';
            document.getElementById('Preview').className = 'tab-pane fade';

            document.getElementById("li_InvoicePageSetup").setAttribute('class', '');
            document.getElementById("li_InvoicePageSetup").children[0].setAttribute('class', 'active theme_background-color-reverse theme_color-reverse');
            document.getElementById('PageSetup').style.display = '';
            document.getElementById('PageSetup').setAttribute('class', 'tab-pane fade active in show');
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.PageSizeSetup}" + err.message.toString(), "Exception");
        }
    },
    /////////////////// print method

    onPrint_Click: function () {
        var layoutid = 0, voucherType = 0, headerid = 0;
        var bprint = false;
        try {
            INVOICEDESIGN.PrintPaths = [];

            if (objLayoutInformation) {
                layoutid = objLayoutInformation.Layout.ID;
                headerid = parseInt(document.getElementById("id_HeaderId").value);
                voucherType = iVoucherType;
            }
            if (m_arrHeaderIds) {
                //elePopup = PRINTVOUCHER.getPopupElement();
                for (var i = 0 ; i < m_arrHeaderIds.length ; i++) {
                    headerid = m_arrHeaderIds[i];
                    if (headerid > 0) {
                        INVOICEDESIGN.downloadPrintedFileFromServer(voucherType, headerid, bprint);
                        INVOICEDESIGN.sleep(35);
                    }
                    else {
                        COMMON.prototype.showMessage("Please Select the Voucher", "Error");
                    }
                }
                if (INVOICEDESIGN.PrintPaths.length == m_arrHeaderIds.length) {
                    $("#iframeplaceholder").html("");
                    GLOBAL.LoadingStart();
                    for (var i = 0; i < PrintPaths.length; i++) {
                        var path = PrintPaths[i].Tag;
                        var iframe = "PrintFrame" + i;
                        var iframe_id = "myiframe" + i;
                        var frame = document.createElement("iframe");
                        frame.id = iframe_id;
                        frame.name = iframe;
                        frame.src = path;
                        $("#iframeplaceholder").append(frame);
                        window.frames[iframe].focus();
                        window.frames[iframe].print();
                    }
                    GLOBAL.LoadingEnd();
                }
            }
            else {
                INVOICEDESIGN.downloadPrintedFileFromServer(voucherType, headerid, bprint);
                INVOICEDESIGN.sleep(35);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.onPrint_Click}" + "EXCEPTION");
        }
    },

    downloadPrintedFileFromServer: function (iVoucherType, iHeaderId, bprint, signChecked) {
        var obj = {};
        var elePopup = null, selectCombox = null;
        try {
            if (objLayoutInformation != null && objLayoutInformation.Layout != null) {
                obj.objLayoutInfo = objLayoutInformation;
                obj.iLayoutId = objLayoutInformation.Layout.ID;
            }
            obj.iVoucherType = iVoucherType;
            obj.iTransactionId = iHeaderId;
            obj.iPrintType = 0;
            obj.bAttachDocuments = false;
            obj.iHeaderId = iHeaderId;
            if (obj.iLayoutId <= 0) {
                COMMON.prototype.showMessage("Please Select the Layout", "");
                return;
            }
            if (arrHeaderGroup) {
                obj.arrHeaderGroup = arrHeaderGroup;
            }
            if (arrBodyGroup) {
                obj.arrBodyGroups = arrBodyGroup;
            }
            //PRINTVOUCHER.SERVER.printVoucher(obj);
            NETWORK.executeServerMethod(GLOBAL.getContextPath("PrintInvoicelayout", "InvoiceDesign", "Transactions"),
                                                true,
                                                obj,
                                                "",
                                                false,
                                                "INVOICEDESIGN.onDownload",
                                                "GLOBAL.LoadingStart",
                                              "GLOBAL.LoadingEnd");
        }
        catch (err) {
            COMMON.prototype.showMessage("{PRINTVOUCHER.downloadPrintedFileFromServer}" + err.message, "Exception");
        }
    },

    onDownload: function (bSuccess, data) {
        try {
            arrAttachment = [];
            if (data != null) {
                if (data.Tag != null && data.Tag.length > 0) {
                    if (data.ID == -1) {
                        var iCurrentDate = DATE.prototype.today(data.Tag[3].Value);
                        var iCurrentTime = FTime.getCurrentTime();
                        var iPermissibleDate = data.Tag[1].Value;
                        var iPermissibleTime = data.Tag[2].Value
                        var obj = FTime.addSeconds(data.Tag[0].Value * 60);
                        if (obj.iDays > 0) {
                            iPermissibleDate = DATE.prototype.addDays(iPermissibleDate, obj.iDays, data.Tag[3].Value);
                        }
                        iPermissibleTime = obj.iTime;
                        if ((iCurrentDate > iPermissibleDate) ||
                            (iCurrentDate == iPermissibleDate && iCurrentTime > iPermissibleTime)) {
                            COMMON.prototype.showMessage(data.Name, "Error");
                            return;
                        }
                    }
                    else {
                        if (data.ID == 1) {
                            var w = window.open("", "_blank");
                            if (FCommon.UI.isValidObject(w)) {
                                w.location = GLOBAL.getContextPath("GetDocumentToPrintFromSource", "TransHome", "Transactions") + '?sDocNo=' + data.Name;
                            }
                            else {
                                var msg = "popup is blocked for this page";
                                COMMON.prototype.showMessage(msg);
                                return;
                            }
                        }
                        else if (data.ID == 3) {
                            transEntryGlobal.m_bDisableClear = true;
                            for (var i = 0; i < data.Tag.length && i < 10; i++) {
                                window.location = GLOBAL.getContextPath("GetExportedFile", "RD", "RD") + '?fileName=' + data.Tag[i];
                            }
                            transEntryGlobal.m_bDisableClear = false;
                        }
                        else {
                            for (var i = 0; i < data.Tag.length && i < 10; i++) {
                                var path = GLOBAL.getContextPath("GetDocumentToPrint", "TransHome", "Transactions") + '?fileName=' + data.Tag[i];
                                if (FCommon.UI.isValidObject(path)) {
                                    INVOICEDESIGN.PrintPaths.push({ ID: 0, Tag: path });
                                }
                                else {
                                    var msg = "popup is blocked for this page";
                                    COMMON.prototype.showMessage(msg);
                                    return;
                                }
                            }
                        }
                    }
                }
                else if (data.Name != null) {
                    if (data.ID == -1) {
                        COMMON.prototype.showMessage(data.Name, "");
                    }
                    else if (data.ID == 1) {
                        COMMON.prototype.showMessage(data.Name, "");
                    }
                    else if (data.ID == 2) {
                        COMMON.prototype.showMessage(data.Name, "");
                    }
                    else if (data.ID == 3) {
                        COMMON.prototype.showMessage(data.Name, "");
                    }
                    else {
                        COMMON.prototype.showMessage(data.Name, "");
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "");
        }
    },

    sleep: function (delay) {
        var start = new Date().getTime();
        while (new Date().getTime() < start + delay);
    },
    //////////////////
    PrintLayout: function (PrintLayout) {
        try {

            if (bPreview == false) {
                document.getElementById("InvoiceDesignRightDiv").style.display = 'none';
                if (objLayoutInformation == undefined) {
                    if (PrintLayout) {
                        COMMON.prototype.showMessage(document.getElementById('msgValidateDatatoPrint').value, "Error");
                    }
                    else {
                        INVOICEDESIGN.PrintLayoutSuccess(true, '', PrintLayout);
                    }
                }
                else if (objLayoutInformation.Pages.length <= 0) {
                    if (PrintLayout) {
                        COMMON.prototype.showMessage(document.getElementById('msgValidateDatatoPrint').value, "Error");
                    }
                    else {
                        INVOICEDESIGN.PrintLayoutSuccess(true, '', PrintLayout);
                    }
                }
                else if (objLayoutInformation.Pages[0].PageHeader.length <= 0) {
                    if (PrintLayout) {
                        COMMON.prototype.showMessage(document.getElementById('msgValidateDatatoPrint').value, "Error");
                    }
                    else {
                        INVOICEDESIGN.PrintLayoutSuccess(true, '', PrintLayout);
                    }
                }
                else {
                    var LayoutDiv = null;
                    var removeItemslist = null;
                    if (INVOICEDESIGN.currentLayoutBoundingRect != null) {
                        LayoutDiv = INVOICEDESIGN.currentLayoutBoundingRect;
                    }
                    else if (document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)) != null) {
                        LayoutDiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
                    }
                    //run a loop checking the left property of each control , if it is greaterthan layout div length , then simply remove them from the lis
                    if (LayoutDiv != null) {
                        removeItemslist = $.grep(objLayoutInformation.Pages[0].PageHeader, function (x) {
                            if (LayoutDiv.width != 0) {
                                if (x.Left > LayoutDiv.width) {
                                    return x;
                                }
                            }
                        });
                    }
                    var indexofElement = 0;
                    if (removeItemslist != null && removeItemslist.length > 0) {
                        for (var iCounter = 0; iCounter < removeItemslist.length; iCounter++) {
                            indexofElement = objLayoutInformation.Pages[0].PageHeader.indexOf(removeItemslist[iCounter]);
                            objLayoutInformation.Pages[0].PageHeader.splice(indexofElement, 1);
                        }
                    }
                    result = NETWORK.executeServerMethod(
                                    GLOBAL.getContextPath("PrintLayout", "InvoiceDesign", "Transactions"),
                                    true,
                                    {
                                        objLayoutInfo: objLayoutInformation,
                                        iVoucherType: iVoucherType,
                                        iHeaderId: iHeaderId,
                                        bPrintLayout: PrintLayout,
                                        iDocNo: iDocNo,
                                        arrHeaderGroup: arrHeaderGroup,
                                        arrBodyGroups: arrBodyGroup
                                    },
                                    "",
                                    true,
                                    "PRINTVOUCHER.PrintLayoutSuccess",
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd", PrintLayout
                            );
                }
            }
            if (PrintLayout) {
                bPreview = false;
            }
            else {
                bPreview = true;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.PrintLayout}" + err.message.toString(), "Exception");
        }
    },

    PrintLayoutSuccess: function (bSuccess, html, PrintLayout) {
        try {

            var maindivheight = document.getElementById("page_Content").getBoundingClientRect().height;
            var m_footer = document.getElementById("id_footer").getBoundingClientRect().height;

            var id_PrintPreview = document.getElementById("id_PrintPreview");
            id_PrintPreview.style.height = (maindivheight - (m_footer + 99)) + "px";
            if (PrintLayout == true) {
                var w = window.open("", "_blank");
                w.document.write(html);
                w.frames["printf"].print();
            }
            else {
                if (html == '""') {
                    html = "";
                }
                $("#id_PrintPreview").html(html);
            }
            $("#InvoicePaneldiv").removeClass("col-lg-9");
            $("#InvoicePaneldiv").addClass("col-lg-12");
            document.getElementById("InvoiceDesignRightDiv").style.pointerEvents = 'none';
            document.getElementById("InvoiceDesignRightDiv").style.display = 'none';
            document.getElementById("id_PrintPreview").style.display = "block";
            var arr = ['iSave', 'iNew', 'iOpen', 'iDelete', 'iBar', 'iAlign', 'iSalesInvoice'];
            INVOICEDESIGN.DisableInvoiceDesignPageButtons(arr);
            //document.getElementById("iNew").style.pointerEvents = 'none';
            //$("#iNew").css("opacity", "0.6");
            //document.getElementById("iSave").style.pointerEvents = 'none';
            //$("#iSave").css("opacity", "0.6");
            //document.getElementById("drpdownSliderprint").style.pointerEvents = "auto";
            //$("#drpdownSliderprint").css("opacity", "1");
            //document.getElementById("id_InvoiceDesingCancel").style.pointerEvents = "auto";
            //$("#drpdownSliderprint").css("opacity", "1");


            if (PrintLayout == undefined) {
                document.getElementById("li_InvoiceDesigner").setAttribute('class', '');
                document.getElementById("li_InvoiceDesigner").children[0].setAttribute('class', 'labeltext theme_color-inverse');
                document.getElementById('Design').style.display = 'none';
                document.getElementById('Design').setAttribute('class', 'tab-pane fade');
                document.getElementById("li_InvoicePreview").setAttribute('class', 'active');
                document.getElementById("li_InvoicePreview").children[0].setAttribute('class', 'active labeltext theme_color-inverse');

                document.getElementById('Preview').style.display = '';
                document.getElementById('Preview').setAttribute('class', 'tab-pane fade active in show');
                document.getElementById("li_InvoicePageSetup").setAttribute('class', '');
                document.getElementById("li_InvoicePageSetup").children[0].setAttribute('class', 'labeltext theme_color-inverse');
                document.getElementById('PageSetup').style.display = 'none';
                document.getElementById('PageSetup').setAttribute('class', 'tab-pane fade');
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.PrintLayoutSuccess}" + err.message.toString(), "Exception");
        }
    },
    DisableInvoiceDesignPageButtons: function (params) {
        var arr = ['iSave', 'iNew', 'iOpen', 'iDelete', 'iBar', 'iAlign', 'iSalesInvoice', 'drpdownSliderprint', 'id_InvoiceDesingCancel'];
        for (i = 0; i < arr.length; i++) {
            document.getElementById(arr[i]).style = ""
        }
        for (i = 0; i < params.length; i++) {
            document.getElementById(params[i]).style.opacity = "0.3"
            document.getElementById(params[i]).style.pointerEvents = 'none';
        }
    },
    Designer_Click: function () {

        try {
            bPreview = false;
            $("#InvoicePaneldiv").addClass("col-lg-9");
            $("#InvoicePaneldiv").removeClass("col-lg-12");
            document.getElementById("InvoiceDesignRightDiv").style.display = 'block';
            var eleDesignTab = null, elePreviewTab = null, eleInvoiceDesignRightDiv = null;
            eleDesignTab = document.getElementById('Design');
            elePreviewTab = document.getElementById('Preview');
            eleInvoiceDesignRightDiv = document.getElementById('InvoiceDesignRightDiv');
            if (FCommon.UI.isValidObject(eleDesignTab)) {
                if (eleDesignTab.className == "tab-pane fade") {
                    if (FCommon.UI.isValidObject(document.getElementById('InvoiceDesignRightDiv'))) {
                        document.getElementById('InvoiceDesignRightDiv').style.pointerEvents = 'auto';
                    }
                    INVOICEDESIGN.DisableInvoiceDesignPageButtons([]);
                    //if (FCommon.UI.isValidObject(document.getElementById('navbarSupportedContent2'))) {
                    //    document.getElementById('navbarSupportedContent2').style.pointerEvents = 'auto';
                    //    document.getElementById("navbarSupportedContent2").style.opacity = "1";
                    //    $("#navbarSupportedContent2").children("ul").children("li").children("span").css("opacity", "1");
                    //}
                    //REPORTCUSTOMIZE.DisableButtons(false);
                    //eleDesignTab.style.display = '';
                    //eleDesignTab.className = 'tab-pane active';
                    //elePreviewTab.style.display = 'none';
                    //eleDesignTab.className = 'tab-pane';

                    //document.getElementById("li_InvoiceDesigner").setAttribute('class', 'active');
                    //document.getElementById("li_InvoiceDesigner").children[0].setAttribute('class', 'theme_background-color-reverse');
                    document.getElementById('Design').style.display = '';
                    document.getElementById('Design').setAttribute('class', 'tab-pane fade active in show');
                    document.getElementById("li_InvoiceDesigner").setAttribute('class', '');
                    document.getElementById("li_InvoiceDesigner").children[0].setAttribute('class', 'active theme_background-color-reverse');

                    document.getElementById("li_InvoicePreview").setAttribute('class', '');
                    document.getElementById("li_InvoicePreview").children[0].setAttribute('class', 'theme_background-color-reverse');
                    document.getElementById('Preview').style.display = 'none';
                    document.getElementById('Preview').className = 'tab-pane fade';

                    document.getElementById("li_InvoicePageSetup").setAttribute('class', '');
                    document.getElementById("li_InvoicePageSetup").children[0].setAttribute('class', 'theme_background-color-reverse');
                    document.getElementById('PageSetup').style.display = 'none';
                    document.getElementById('PageSetup').setAttribute('class', 'tab-pane fade');
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.Designer_Click}" + err.message.toString(), "Exception");
        }
    },

    updateDefinitionTabContentHeight: function () {
        RD_ENTRY.UI.updateContainerHeight();
        RD_ENTRY.UI.updateParameterHeight();
        RD_ENTRY.UI.updateMenuHeight();
    },

    ToggleSideBarFields: function (ele) {
        if ($(ele).hasClass("expanded-sidebarfields") == true) {
            $(ele).removeClass("expanded-sidebarfields").addClass("collapsed-sidebarfields");
            document.getElementById("InvoiceDesignRightDiv").className = "";
            document.getElementById("InvoiceDesignRightDiv").style.width = "30px";
            document.getElementById("InvoiceDesignRightDiv").style.cssFloat = "right";
            document.getElementById("LiFieldDivList").style.display = "block";
            document.getElementById("LiProp").style.display = "none";
            document.getElementById("LiDesignField").style.display = "none";

            document.getElementById("id_tabcontentFieldProperties").style.display = "none";
            document.getElementById("InvoicePaneldiv").className = "col-lg-12";
            document.getElementById("InvoicePaneldiv").style.width = $("#InvoicePaneldiv").width() - 20 + "px";
            document.getElementById("InvoicePaneldiv").style.borderRight = "";
        }
        else {
            $(ele).removeClass("collapsed-sidebarfields").addClass("expanded-sidebarfields");
            document.getElementById("InvoiceDesignRightDiv").className = "col-lg-3";
            document.getElementById("InvoicePaneldiv").className = "col-lg-9";
            document.getElementById("InvoiceDesignRightDiv").style.width = "";
            document.getElementById("InvoiceDesignRightDiv").style.height = "";
            document.getElementById("InvoiceDesignRightDiv").style.cssFloat = "";
            document.getElementById("LiFieldDivList").style.display = "block";
            document.getElementById("LiProp").style.display = "block";
            document.getElementById("LiProp").style.pointerEvents = "auto";
            document.getElementById("LiDesignField").style.display = "block";
            document.getElementById("id_tabcontentFieldProperties").style.display = "block";
            document.getElementById("InvoicePaneldiv").style.width = "";
            document.getElementById("InvoicePaneldiv").style.borderRight = "1px solid #b7b5b5";

        }
    },

    UpdatePageSize: function () {

        var LayoutParent = document.getElementById("InvoiceDesignMainDiv");
        var Allmargins = $("div[id^=divmargin]");
        var Margin;
        var unit = INVOICEDESIGN.getUnit(objPrintInfo.Unit);
        var Layout = null, getele = null;
        var Margin0 = null, Margin1 = null, Margin2 = null, Margin3 = null;
        var element = $("div[id^=id_LayoutDiv_]");
        var callee = "UpdatePageSize"
        try {
            var id_PageSetUpPreview = document.getElementById("id_PageSetUpPreview");
            if (id_PageSetUpPreview != null) {
                var id_PageType = document.getElementById("id_PageType");
                var id_PaperOrientation = FConvert.toInt(document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value);
                var id_PaperUnit = FConvert.toInt(document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value);
                var id_PageSizeLeftMargin = document.getElementById("id_PageSizeLeftMargin");
                var id_PageSizeRightMargin = document.getElementById("id_PageSizeRightMargin");
                var id_PageSizeTopMargin = document.getElementById("id_PageSizeTopMargin");
                var id_PageSizeBottomMargin = document.getElementById("id_PageSizeBottomMargin");
                var id_PageSizeLeftMarginDisplay = document.getElementById("id_PageSizeLeftMarginDisplay");
                var id_PageSizeRightMarginDisplay = document.getElementById("id_PageSizeRightMarginDisplay");
                var id_PageSizeTopMarginDisplay = document.getElementById("id_PageSizeTopMarginDisplay");
                var id_PageSizeBottomMarginDisplay = document.getElementById("id_PageSizeBottomMarginDisplay");
                var WidthAndHeight = [];
                if (id_PageType.options[id_PageType.selectedIndex].textContent == "Custom...") {
                    WidthAndHeight.push(document.getElementById("id_papersize_width").value);
                    WidthAndHeight.push(document.getElementById("id_papersize_height").value);
                    id_PageType.value = id_PageType.options[id_PageType.selectedIndex].value = document.getElementById("id_papersize_width").value + "," + document.getElementById("id_papersize_height").value;

                }
                else {
                    WidthAndHeight = id_PageType.value.split(',');
                }

                if (id_PaperUnit == 1) { //Inches
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value;
                }
                else { //Centimeter
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value / 2.54;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value / 2.54;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value / 2.54;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value / 2.54;
                }
                INVOICEDESIGN.setValuetoPrintInfoObject(parseFloat(id_PageSizeLeftMargin.value), parseFloat(id_PageSizeRightMargin.value), parseFloat(id_PageSizeTopMargin.value), parseFloat(id_PageSizeBottomMargin.value), parseFloat((id_PaperOrientation == 0 ? WidthAndHeight[1] : WidthAndHeight[0])), parseFloat((id_PaperOrientation == 0 ? WidthAndHeight[0] : WidthAndHeight[1])), id_PaperUnit == 1 ? 1 : 0, id_PaperOrientation == 0 ? 0 : 1);
            }
            objLayoutInformation.PrintInfo = objPrintInfo;

            if (unit == 'in') {
                for (var i = 0; i < Allmargins.length; i++) {
                    Margin0 = Allmargins[i];
                    Margin0.style.top = objPrintInfo.Margin.Top + 'in';
                    i++;
                    Margin1 = Allmargins[i];
                    Margin1.style.bottom = objPrintInfo.Margin.Bottom + 'in';
                    i++;
                    Margin2 = Allmargins[i];
                    Margin2.style.left = objPrintInfo.Margin.Left + 'in';
                    i++;
                    Margin3 = Allmargins[i];
                    Margin3.style.right = objPrintInfo.Margin.Right + 'in';
                }
                for (var iCount = 0; iCount < LayoutParent.children.length; iCount++) {
                    Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCount));
                    if (Layout != null) {
                        Layout.style.width = objPrintInfo.PageWidth + 'in';
                        Layout.style.height = objPrintInfo.PageHeight + 'in';
                    }
                }
            }
            else {
                for (var i = 0; i < Allmargins.length; i++) {
                    Margin0 = Allmargins[i];
                    Margin0.style.top = FConvert.toDecimal((objPrintInfo.Margin.Top * 2.54), 2) + 'cm';
                    i++;
                    Margin1 = Allmargins[i];
                    Margin1.style.bottom = FConvert.toDecimal((objPrintInfo.Margin.Bottom * 2.54), 2) + 'cm';
                    i++;
                    Margin2 = Allmargins[i];
                    Margin2.style.left = FConvert.toDecimal((objPrintInfo.Margin.Left * 2.54), 2) + 'cm';
                    i++;
                    Margin3 = Allmargins[i];
                    Margin3.style.right = FConvert.toDecimal((objPrintInfo.Margin.Right * 2.54), 2) + 'cm';
                }
                for (var iCount = 0; iCount < LayoutParent.children.length; iCount++) {
                    Layout = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCount));
                    if (Layout != null) {
                        Layout.style.width = objPrintInfo.PageWidth + "in";
                        Layout.style.height = objPrintInfo.PageHeight + "in";
                    }
                }
            }

            $("#id_PageSetup").hide();
            for (var i = 0; i < element.length; i++) {
                getele = element[i];
                INVOICEDESIGN.Ruler(getele, unit, callee);
            }
            INVOICEDESIGN.RulerSize(unit);

            document.getElementById("hdnid_PageType").value = document.getElementById("id_PageType").value;
            document.getElementById("hdnid_PaperOrientation").value = document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value;
            document.getElementById("hdnid_PaperUnit").value = document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value;
            document.getElementById("hdnid_PageSizeLeftMargin").value = document.getElementById("id_PageSizeLeftMargin").value;
            document.getElementById("hdnid_PageSizeRightMargin").value = document.getElementById("id_PageSizeRightMargin").value;
            document.getElementById("hdnid_PageSizeTopMargin").value = document.getElementById("id_PageSizeTopMargin").value;
            document.getElementById("hdnid_PageSizeBottomMargin").value = document.getElementById("id_PageSizeBottomMargin").value;


            //document.getElementById("InvoiceDesignRightDiv").style.pointerEvents = 'auto';
            //document.getElementById("InvoiceDesignRightDiv").style.display = 'block';
            //document.getElementById("id_PrintPreview").style.display = 'none';

            //document.getElementById("li_InvoiceDesigner").setAttribute('class', 'active');
            //document.getElementById("li_InvoiceDesigner").children[0].setAttribute('class', 'theme_background-color-reverse theme_color-reverse');
            //document.getElementById('Design').style.display = 'block';
            //document.getElementById('Design').className = 'tab-pane fade active in';

            //document.getElementById("li_InvoicePreview").setAttribute('class', '');
            //document.getElementById("li_InvoicePreview").children[0].setAttribute('class', 'theme_background-color-reverse theme_color-reverse');
            //document.getElementById('Preview').style.display = 'none';
            //document.getElementById('Preview').className = 'tab-pane fade';

            //document.getElementById("li_InvoicePageSetup").setAttribute('class', '');
            //document.getElementById("li_InvoicePageSetup").children[0].setAttribute('class', 'active theme_background-color-reverse theme_color-reverse');
            //document.getElementById('PageSetup').style.display = 'none';
            //document.getElementById('PageSetup').setAttribute('class', 'tab-pane fade');
            INVOICEDESIGN.Designer_Click();
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.UpdatePageSize}" + err.message.toString(), "Exception");
        }
    },

    getStaticText: function () {
        controlType = CONTROLTYPE.Statictext;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getBitMap: function () {
        controlType = CONTROLTYPE.Image;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getBodyGrid: function () {
        controlType = CONTROLTYPE.BodyCanvas;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getRectangle: function () {
        controlType = CONTROLTYPE.Rectangle;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getEllipse: function () {
        controlType = CONTROLTYPE.Ellipse;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getLine: function () {
        controlType = CONTROLTYPE.Line;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getArea: function () {
        controlType = CONTROLTYPE.Area;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getTable: function () {
        controlType = CONTROLTYPE.Table;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getApprovalHistory: function () {
        controlType = CONTROLTYPE.ApprovalHistory;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    getPostingDetails: function () {
        controlType = CONTROLTYPE.PostingDetails;
        INVOICEDESIGN.addMouseEventToLayout();
    },

    /////////// svg functions

    svgstartDrag: function (evt) {
        if (evt.target.classList.contains('draggable')) {
            INVOICEDESIGN.fromDrag = true;
            selectedElement = evt.target;
            //selectedElement.style.cursor = "move";
            offset = INVOICEDESIGN.oMousePosSVG(evt);

            // Make sure the first transform on the element is a translate transform
            var transforms = selectedElement.transform.baseVal;

            if (transforms.length === 0 || transforms.getItem(0).type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {
                // Create an transform that translates by (0, 0)
                var translate = svgcontainer.createSVGTransform();
                translate.setTranslate(0, 0);
                selectedElement.transform.baseVal.insertItemBefore(translate, 0);
            }

            // Get initial translation
            transform = transforms.getItem(0);
            offset.x -= transform.matrix.e;
            offset.y -= transform.matrix.f;

            confined = evt.target.classList.contains('confine');
            if (confined) {
                bbox = selectedElement.getBBox();
                minX = boundaryX1 - bbox.x;
                maxX = boundaryX2 - bbox.x - bbox.width;
                minY = boundaryY1 - bbox.y;
                maxY = boundaryY2 - bbox.y - bbox.height;
            }

            //////////////
            offset = INVOICEDESIGN.oMousePosSVG(evt);
        }
    },

    drag: function (evt) {
        if (selectedElement) {
            evt.preventDefault();
            var coord = INVOICEDESIGN.oMousePosSVG(evt);
            var dx = coord.x - offset.x;
            var dy = coord.y - offset.y;
            if (confined) {
                if (dx < minX) { dx = minX; }
                else if (dx > maxX) { dx = maxX; }
                if (dy < minY) { dy = minY; }
                else if (dy > maxY) { dy = maxY; }
            }
            //update lines cordinate
            var X1old = parseFloat(selectedElement.getAttribute("x1"));
            var X2old = parseFloat(selectedElement.getAttribute("x2"));
            var Y1old = parseFloat(selectedElement.getAttribute("y1"));
            var Y2old = parseFloat(selectedElement.getAttribute("y2"));

            var X1new = X1old + dx;
            var Y1new = Y1old + dy;
            var X2new = X2old + dx;
            var Y2new = Y2old + dy;

            bbox = selectedElement.getBBox();
            X2new = X1new + bbox.width;
            Y2new = Y1new + bbox.height;

            selectedElement.setAttributeNS(null, "X1new", X1new);
            selectedElement.setAttributeNS(null, "Y1new", Y1new);
            selectedElement.setAttributeNS(null, "X2new", X2new);
            selectedElement.setAttributeNS(null, "Y2new", Y2new);
            console.log("Dimensions before drag x =" + bbox.x + ", y= " + bbox.y + ", width = " + bbox.width + ", height =" + bbox.height)
            transform.setTranslate(dx, dy);
            console.log("Dimensions after drag X1new =" + X1new + ", Y1new= " + Y1new + ", X2new = " + X2new + ", Y2new =" + Y2new)
        }
    },

    endDrag: function (evt) {
        var uid = null;
        var info = {};
        //update line new position in objLayoutInformation
        if (INVOICEDESIGN.fromDrag == true && selectedElement) {
            uid = selectedElement.dataset.bodyid;
            var result = $.grep(objLayoutInformation.Pages[iCurrentPage].PageHeader, function (x) {
                return x.UID == uid;
            });
            if (result && result.length > 0) {
                info = result[0];
            }
            var X1 = parseFloat(selectedElement.getAttribute("X1new"));
            var X2 = parseFloat(selectedElement.getAttribute("X2new"));
            var Y1 = parseFloat(selectedElement.getAttribute("Y1new"));
            var Y2 = parseFloat(selectedElement.getAttribute("Y2new"));
            var dWidth = X2 - X1;
            var dHeight = Y2 - Y1;

            info.Top = Y1;
            info.Left = X1;
            info.Height = dHeight;
            info.Width = dWidth;
        }
        selectedElement = false;
    },

    // a function to detect the mouse position on a resizable SVG element
    oMousePosSVG: function (ev) {
        var p = {};
        var ctm = null;
        try {
            if (svgcontainer)
                p = svgcontainer.createSVGPoint();
            p.x = ev.clientX;
            p.y = ev.clientY;
            if (svgcontainer) {
                ctm = svgcontainer.getScreenCTM().inverse();
                p = p.matrixTransform(ctm);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.oMousePosSVG}" + err.message, "EXCEPTION");
        }
        return p;
    },

    // a function to draw a line in SVG
    drawline: function (lineprops, parent, UID, strokecolor, strokewidth) {
        let line = document.createElementNS(SVG_NS, "line");
        line.setAttribute("id", INVOICEDESIGN.getLineControlId(UID, iCurrentPage));
        line.setAttribute("data-bodyid", UID);
        line.setAttribute("class", "draggable");
        line.setAttribute("data-controltype", CONTROLTYPE.Line);
        line.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Line')");
        line.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Line')");
        for (var name in lineprops) {
            if (lineprops.hasOwnProperty(name)) {
                line.setAttributeNS(null, name, lineprops[name]);
            }
        }
        line.setAttributeNS(null, "stroke", strokecolor);
        line.setAttributeNS(null, "stroke-width", strokewidth);
        parent.appendChild(line);
        return line;
    },

    updateLine: function (o, element) {
        for (var name in o) {
            if (o.hasOwnProperty(name)) {
                element.setAttributeNS(null, name, o[name]);
            }
        }
        return element;
    },

    onsvgmousemove: function (event) {
        if (controlType == CONTROLTYPE.Line && eLine && blnMouseDown) {
            m = INVOICEDESIGN.oMousePosSVG(event);
            oLine.x2 = m.x;
            oLine.y2 = m.y;
            eLine = INVOICEDESIGN.updateLine(oLine, eLine);
        }
    },

    onsvgmouseup: function (event) {
        if (controlType == CONTROLTYPE.Line && eLine) {
            event.stopImmediatePropagation();
            event.preventDefault();
            m = INVOICEDESIGN.oMousePosSVG(event);
            oLine.x2 = m.x;
            oLine.y2 = m.y;
            eLine = INVOICEDESIGN.updateLine(oLine, eLine);
            INVOICEDESIGN.CreateSVGLine(eLine, svgcontainer.parentElement, null);
            eLine = null;
            oLine = {};
            controlType = undefined;
            svgcontainer.setAttribute("mousemove", "");
            svgcontainer.onmousemove = null
            blnMouseDown = false;
        }
    },
    ///////////////////

    mouseDownEvent: function (ev) {
        try {
            if (ev.target.id.indexOf("Area_") > -1) {
                AddElementToArea = true;
            }
            if (controlType == CONTROLTYPE.Line) {
                var layoutdiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                if (svgcontainer == null) {
                    //create global svg here 
                    svgcontainer = document.createElementNS(SVG_NS, "svg");
                    svgcontainer.setAttribute("id", "svglinescontainer");
                    svgcontainer.setAttribute("aria-hidden", "true");
                    svgcontainer.setAttribute('viewbox', '0 0 100 100');
                    svgcontainer.setAttribute('width', layoutdiv.style.width);
                    svgcontainer.setAttribute('height', layoutdiv.style.height);
                    svgcontainer.setAttribute("onmouseup", "INVOICEDESIGN.onsvgmouseup(event);");
                    INVOICEDESIGN.AddControlToDOM(svgcontainer, layoutdiv);
                    INVOICEDESIGN.removeEventForLayout("onmouseup");
                }
                // to add mouse move when the line control is selected , and svgcontainer is already present
                svgcontainer.setAttribute("onmousemove", "INVOICEDESIGN.onsvgmousemove(event);");
                m = INVOICEDESIGN.oMousePosSVG(ev);
                oLine.x1 = m.x;
                oLine.y1 = m.y;
                oLine.x2 = m.x;
                oLine.y2 = m.y;
                m_iControlIds++;
                eLine = INVOICEDESIGN.drawline(oLine, svgcontainer, m_iControlIds, "black", 2);

                console.log(eLine ? "eLine not null is true" : "eLine not null is false");
                blnMouseDown = true;
            }
            else {
                MouseStartXAxisPos = ev.pageX;
                MouseStartYAxisPos = ev.pageY;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.mouseDownEvent} " + err.message, "Exception");
        }
    },

    mouseUpEvent: function (ev) {

        var control = null, layoutDiv = null;
        var parentControlType = 0, imasterId = 0;
        try {
            ev.stopImmediatePropagation();
            if (document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)) != null) {
                layoutDiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
            }
            if (controlType == undefined) {
                return;
            }
            var eleParent = ev.target;
            if (DraggedColumn != undefined) {
                //eleParent.dataset.controltype = DraggedColumn.dataset.controltype;
                eleParent.dataset.datatype = DraggedColumn.dataset.datatype;
            }
            if (eleParent.id.includes("ruler") || eleParent.parentElement.id.includes("ruler")) {
                return false;
            }
            if ($(eleParent).hasClass("ui-resizable-handle") || eleParent.id.includes("margin") || eleParent.nodeName.toLowerCase() == "svg") {
                eleParent = eleParent.parentElement;
            }
            if (eleParent.nodeName.toLowerCase() == "td") {
                eleParent = eleParent.offsetParent;
                if (eleParent.nodeName.toLowerCase() == "table" && eleParent.id == "") { //to select ColumnGrid
                    eleParent = eleParent.parentElement;
                }
                if (eleParent.id.includes("MainGrid") == true) {
                    if (eleParent.children.length > 0 && eleParent.children[0].id.includes("ColumnGrid") == true) {
                        eleParent = eleParent.children[0];
                    }
                }
            }
            parentControlType = FConvert.toInt(eleParent.getAttribute("data-controltype"));

            switch (parentControlType) {

                case CONTROLTYPE.BodyCanvas:
                    return;
                case CONTROLTYPE.BodyColumn:
                    if (ev.target.id.includes("ColumnGrid") == true) {
                        control = ev.target;
                    }
                    else {
                        control = $.grep(ev.path, function (x) {
                            if (x.id != undefined && x.id != "") {
                                if (x.id.includes("ColumnGrid") == true) {
                                    return x;
                                }
                            }
                        })[0];
                    }
                    break;
                case CONTROLTYPE.Area:
                    imasterId = parseInt(eleParent.id.split('_')[eleParent.id.split('_').length - 1]);
                    control = ev.target;
                    eleParent = ev.target;
                    break;
                case CONTROLTYPE.Rectangle:
                    // imasterId = parseInt(eleParent.id.split('_')[eleParent.id.split('_').length - 1]);
                    control = ev.currentTarget;
                    eleParent = ev.currentTarget;
                    parentControlType = FConvert.toInt(eleParent.getAttribute("data-controltype"));
                    break;
                case CONTROLTYPE.Statictext:
                case CONTROLTYPE.Ellipse:
                case CONTROLTYPE.Table:
                    control = ev.currentTarget;
                    eleParent = ev.currentTarget;
                    break;
                default:
                    control = ev.target;
                    if ($(control).hasClass("ui-resizable-handle") || control.nodeName.toLowerCase() == "svg") {
                        control = control.parentElement;
                    }
                    break;
            }
            if (eleParent.id.indexOf('id_LayoutDiv_') > -1) {
                iCurrentPage = parseInt(eleParent.id.split('_')[eleParent.id.split('_').length - 1]);
            }
            else if ((eleParent.parentElement.parentElement).id.indexOf("Table") > -1) {
                iCurrentPage = parseInt((eleParent.parentElement.parentElement).id.split('_')[(eleParent.parentElement.parentElement).id.split('_').length - 2]);
            }
            else {
                iCurrentPage = parseInt(eleParent.dataset.pageno);
            }
            if (isNaN(iCurrentPage)) {
                iCurrentPage = 0;
            }
            if (eleParent.id.indexOf("ColumnGrid") > -1 || eleParent.id.indexOf("BodyColumn") > -1) {
                controlType = CONTROLTYPE.BodyColumn;
            }
            if (AddElementToArea == true) {
                INVOICEDESIGN.removeEventForLayout("onmouseup");
            }
            if (resizeImage == false) {
                bModified = true;
                MouseEndXAxisPos = ev.pageX;
                MouseEndYAxisPos = ev.pageY;
                var height = MouseEndYAxisPos - MouseStartYAxisPos;
                var width = MouseEndXAxisPos - MouseStartXAxisPos;
                var getangel = INVOICEDESIGN.getAngle(MouseStartXAxisPos, MouseStartYAxisPos, MouseEndXAxisPos, MouseEndYAxisPos);
                var left = MouseStartXAxisPos - control.getBoundingClientRect().left;
                var top = MouseStartYAxisPos - control.getBoundingClientRect().top;
                var CurrentControl = undefined;
                var SelectedField1 = undefined;
                switch (controlType) {
                    case CONTROLTYPE.Statictext:
                        if (height <= 0) {
                            height = 50;
                        }
                        if (width <= 0) {
                            width = 100;
                        }
                        // SelectedField = INVOICEDESIGN.CreateStaticText(left, top, height, width, control);
                        SelectedField = INVOICEDESIGN.CreateEditableBlock(left, top, height, width, control);
                        break;
                    case CONTROLTYPE.Image:
                        if (height <= 0) {
                            height = 50;
                        }
                        if (width <= 0) {
                            width = 100;
                        }
                        var inputfile = document.getElementById("id_invoicedesign_fileinput");
                        INVOICEDESIGN.bitmapparent = control;
                        $(inputfile).trigger('click');
                        break;
                    case CONTROLTYPE.Line:
                        INVOICEDESIGN.onsvgmouseup(event);
                        return;
                        break;
                    case CONTROLTYPE.BodyCanvas:
                        left = objLayoutInformation.PrintInfo.Margin.Left * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit);//50
                        top = objLayoutInformation.PrintInfo.Margin.Top + 176;
                        if (height <= 0) {
                            height = (parseFloat(objLayoutInformation.PrintInfo.PageHeight) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit)) - (2 * parseFloat(objLayoutInformation.PrintInfo.Margin.Top) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit)) - (2 * 140);
                            left = parseFloat(objLayoutInformation.PrintInfo.Margin.Left) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit);
                        }
                        if (width <= 0) {
                            //width = (parseFloat(objLayoutInformation.PrintInfo.PageWidth - (objLayoutInformation.PrintInfo.Margin.Left + objLayoutInformation.PrintInfo.Margin.Right)) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit)) - 7;//
                            width = parseFloat(objLayoutInformation.PrintInfo.PageWidth - objLayoutInformation.PrintInfo.Margin.Left - objLayoutInformation.PrintInfo.Margin.Right) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit);
                        }
                        SelectedField = INVOICEDESIGN.CreateBodyGrid(left, top, height, width, control);
                        break;
                    case CONTROLTYPE.Rectangle:
                        if (height <= 0) {
                            height = 50;
                        }
                        if (width <= 0) {
                            width = 100;
                        }
                        SelectedField = INVOICEDESIGN.CreateRectAngle(left, top, height, width, control);
                        break;
                    case CONTROLTYPE.Ellipse:
                        if (height <= 0) {
                            height = 50;
                        }
                        if (width <= 0) {
                            width = 100;
                        }
                        SelectedField = INVOICEDESIGN.CreateEllipse(left, top, height, width, control);
                        break;
                    case CONTROLTYPE.Area:
                        if (height <= 0) {
                            height = 50;
                        }
                        if (width <= 0) {
                            width = 100;
                        }
                        SelectedField = INVOICEDESIGN.CreateArea(left, top, height, width, control);
                        break;
                    case CONTROLTYPE.Table:
                        if (height <= 0) {
                            height = 50;
                        }
                        if (width <= 0) {
                            width = 100;
                        }
                        SelectedField = INVOICEDESIGN.CreateTable(left, top, height, width, control);
                        break;
                    case CONTROLTYPE.Textblock:
                        left = MouseEndXAxisPos - control.getBoundingClientRect().left;
                        top = MouseEndYAxisPos - control.getBoundingClientRect().top;
                        if (layoutDiv) {
                            if (left + 100 > layoutDiv.width) {
                                return;
                            }
                        }
                        //SelectedField1 = INVOICEDESIGN.CreateStaticText(left, top, 25, 100, control);
                        SelectedField1 = INVOICEDESIGN.CreateEditableBlock(left, top, 25, 100, control);
                        // SelectedField = INVOICEDESIGN.CreateTextblock(left + 100, top, control);
                        SelectedField = INVOICEDESIGN.CreateReadonlyTextBlock(left + 100, top, control);
                        break;
                    case CONTROLTYPE.BodyColumn:
                        if (control.id.indexOf("BodyColumn") > -1)
                            control = control.parentNode
                        else
                            control = control.children[0].children[0];
                        SelectedField = INVOICEDESIGN.CreateBodyColumn(control);
                        break;
                    case CONTROLTYPE.Formula:
                        left = MouseEndXAxisPos - control.getBoundingClientRect().left;
                        top = MouseEndYAxisPos - control.getBoundingClientRect().top;
                        if (layoutDiv) {
                            if (left + 100 > layoutDiv.width) {
                                return;
                            }
                        }
                        //SelectedField1 = INVOICEDESIGN.CreateStaticText(left, top, 25, 100, control);
                        SelectedField1 = INVOICEDESIGN.CreateEditableBlock(left, top, 25, 100, control);
                        SelectedField = INVOICEDESIGN.CreateFormulaField(left, top, control);
                        break;
                    case CONTROLTYPE.ApprovalHistory:
                        left = MouseEndXAxisPos - control.getBoundingClientRect().left;
                        top = MouseEndYAxisPos - control.getBoundingClientRect().top;
                        SelectedField = INVOICEDESIGN.CreateApprovalHistory(left, top, control);
                        break;
                    case CONTROLTYPE.PostingDetails:
                        left = MouseEndXAxisPos - control.getBoundingClientRect().left;
                        top = MouseEndYAxisPos - control.getBoundingClientRect().top;
                        SelectedField = INVOICEDESIGN.CreatePostingDetails(left, top, control);
                        break;
                }
                if (controlType == CONTROLTYPE.Textblock || controlType == CONTROLTYPE.Formula) {
                    var eleMaster = null;
                    if (objLayoutInformation && objLayoutInformation.Pages[iCurrentPage] && objLayoutInformation.Pages[iCurrentPage].PageHeader) {
                        CurrentControl = objLayoutInformation.Pages[iCurrentPage].PageHeader;
                        CurrentControl = CurrentControl[CurrentControl.length - 1];
                    }
                    switch (parentControlType) {
                        case CONTROLTYPE.Area:
                            eleMaster = document.getElementById(INVOICEDESIGN.getAreaControlId(imasterId, iCurrentPage));
                            if (FCommon.UI.isValidObject(eleMaster)) {
                                CurrentControl.MasterId = imasterId;
                            }
                            if (FCommon.UI.isValidObject(SelectedField1)) {
                                CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left) + FConvert.toDecimal(eleMaster.style.left.substring(0, eleMaster.style.left.length - 2)) + 100;
                                CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top) + FConvert.toDecimal(eleMaster.style.top.substring(0, eleMaster.style.top.length - 2));
                            }
                            CurrentControl[PROPERTY.Width] = 150;
                            CurrentControl[PROPERTY.Height] = 25;
                            break;
                        case CONTROLTYPE.Rectangle:
                            eleMaster = document.getElementById(INVOICEDESIGN.getRectangleControlId(imasterId, iCurrentPage));
                            if (FCommon.UI.isValidObject(eleMaster)) {
                                CurrentControl.MasterId = imasterId;
                            }
                            if (FCommon.UI.isValidObject(SelectedField1)) {
                                CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left) + FConvert.toDecimal(eleMaster.style.left.substring(0, eleMaster.style.left.length - 2)) + 100;
                                CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top) + FConvert.toDecimal(eleMaster.style.top.substring(0, eleMaster.style.top.length - 2));
                            }
                            CurrentControl[PROPERTY.Width] = 150;
                            CurrentControl[PROPERTY.Height] = 25;
                            break;
                        default:
                            CurrentControl[PROPERTY.Left] = left + 100;
                            CurrentControl[PROPERTY.Top] = top;
                            if ($(SelectedField).width() != null) {
                                CurrentControl[PROPERTY.Width] = $(SelectedField).width();
                            }
                            else {
                                CurrentControl[PROPERTY.Width] = 150;
                            }
                            CurrentControl[PROPERTY.Height] = 25;
                            break;
                    }
                    if (CurrentControl[PROPERTY.Text]) {
                        if (CurrentControl[PROPERTY.Text].includes(".Company Logo") == true) {
                            CurrentControl.StaticTextProperties.DataType = 7;
                        }
                    }
                    INVOICEDESIGN.SetControlProperty(CurrentControl, '', eleParent);
                    SelectedField = SelectedField1;
                    CurrentControl = objLayoutInformation.Pages[iCurrentPage].PageHeader;
                    CurrentControl = CurrentControl[CurrentControl.length - 2];
                    if (CurrentControl[PROPERTY.Text]) {
                        if (CurrentControl.Text.includes(".Company Logo") == true) {
                            CurrentControl.StaticTextProperties.DataType = 7;
                        }
                    }
                    switch (parentControlType) {
                        case CONTROLTYPE.Area:
                            eleMaster = document.getElementById(INVOICEDESIGN.getAreaControlId(imasterId, iCurrentPage));
                            if (FCommon.UI.isValidObject(eleMaster)) {
                                CurrentControl.MasterId = imasterId;
                            }
                            if (FCommon.UI.isValidObject(SelectedField1)) {
                                CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left) + FConvert.toDecimal(eleMaster.style.left.substring(0, eleMaster.style.left.length - 2));
                                CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top) + FConvert.toDecimal(eleMaster.style.top.substring(0, eleMaster.style.top.length - 2));
                            }
                            CurrentControl[PROPERTY.Width] = 100;
                            CurrentControl[PROPERTY.Height] = 25;
                            break;
                        case CONTROLTYPE.Rectangle:
                            eleMaster = document.getElementById(INVOICEDESIGN.getRectangleControlId(imasterId, iCurrentPage));
                            if (FCommon.UI.isValidObject(eleMaster)) {
                                CurrentControl.MasterId = imasterId;
                            }
                            if (FCommon.UI.isValidObject(SelectedField1)) {
                                CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left) + FConvert.toDecimal(eleMaster.style.left.substring(0, eleMaster.style.left.length - 2));
                                CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top) + FConvert.toDecimal(eleMaster.style.top.substring(0, eleMaster.style.top.length - 2));
                            }
                            CurrentControl[PROPERTY.Width] = 100;
                            CurrentControl[PROPERTY.Height] = 25;
                            break;
                        default:
                            CurrentControl[PROPERTY.Left] = left;
                            CurrentControl[PROPERTY.Top] = top;
                            CurrentControl[PROPERTY.Width] = 100;
                            CurrentControl[PROPERTY.Height] = 25;
                            break;
                    }
                    CurrentControl.SubParentId = DraggedColumn != undefined ? DraggedColumn.getAttribute("data-subparentid") : 0;
                    objLayoutInformation.Pages[iCurrentPage].PageHeader[objLayoutInformation.Pages[iCurrentPage].PageHeader.length - 1].SubParentId = DraggedColumn != undefined ? DraggedColumn.getAttribute("data-subparentid") : 0;
                    objLayoutInformation.Pages[iCurrentPage].PageHeader[objLayoutInformation.Pages[iCurrentPage].PageHeader.length - 1].FieldId = DraggedColumn != undefined ? DraggedColumn.getAttribute("data-fieldid") : 0;
                    INVOICEDESIGN.SetControlProperty(CurrentControl, '', eleParent);
                }
                else {
                    if (controlType == CONTROLTYPE.BodyColumn) {
                        CurrentControl = INVOICEDESIGN.GetField(SelectedField.dataset.bodyid)
                        CurrentControl = CurrentControl.PageBody;
                        CurrentControl = CurrentControl[CurrentControl.length - 1];
                        CurrentControl.Column = DraggedColumn.dataset.groupname + "." + DraggedColumn.dataset.columnname;
                        CurrentControl.ColumnIndex = SelectedField.parentNode.children.length - 1;
                        CurrentControl.DataType = parseInt(DraggedColumn.dataset.datatype);
                        CurrentControl.SubParentId = parseInt(DraggedColumn.dataset.subparentid);
                        switch (parentControlType) {
                            case CONTROLTYPE.Area:
                                CurrentControl.MasterId = imasterId;
                                break;
                        }
                    }
                    else if (controlType == CONTROLTYPE.BodyCanvas) {
                        CurrentControl = objLayoutInformation.Pages[iCurrentPage].PageHeader;
                        CurrentControl = CurrentControl[CurrentControl.length - 1];
                        CurrentControl.Left = objLayoutInformation.PrintInfo.Margin.Left * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit);//50
                        CurrentControl.Top = objLayoutInformation.PrintInfo.Margin.Top + 176;
                        if (CurrentControl.Height <= 0)
                            CurrentControl.Height = objLayoutInformation.PrintInfo.PageHeight * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit) - 2 * objLayoutInformation.PrintInfo.Margin.Top * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit) - 2 * 140;
                        if (CurrentControl.Width <= 0)
                            CurrentControl.Width = ((objLayoutInformation.PrintInfo.PageWidth - objLayoutInformation.PrintInfo.Margin.Left - objLayoutInformation.PrintInfo.Margin.Right) * INVOICEDESIGN.PageUnit(objLayoutInformation.PrintInfo.Unit));
                        switch (parentControlType) {
                            case CONTROLTYPE.Area:
                                CurrentControl.MasterId = imasterId;
                                break;
                        }
                    }
                    else {
                        CurrentControl = objLayoutInformation.Pages[iCurrentPage].PageHeader;
                        CurrentControl = CurrentControl[CurrentControl.length - 1];
                        if (CurrentControl == undefined) {
                            CurrentControl = 0;
                            controlType = undefined;
                            AddElementToArea = false;
                            draggedElement = undefined;
                            DraggedColumn = undefined;
                            return;
                        }
                        var eleMaster = null;
                        switch (parentControlType) {
                            case CONTROLTYPE.Area:
                                eleMaster = document.getElementById(INVOICEDESIGN.getAreaControlId(imasterId, iCurrentPage));
                                if (FCommon.UI.isValidObject(eleMaster)) {
                                    CurrentControl.MasterId = imasterId;
                                }
                                if (FCommon.UI.isValidObject(SelectedField)) {
                                    if (FConvert.toInt(SelectedField.getAttribute('data-isnew')) == 1) {
                                        if (FCommon.UI.isValidObject(eleMaster)) {
                                            CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left) + FConvert.toDecimal(eleMaster.style.left);
                                            CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top) + FConvert.toDecimal(eleMaster.style.top);
                                        }
                                    }
                                    //else {
                                    //    CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left);
                                    //    CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top);
                                    //}
                                }
                                else {
                                    CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left);
                                    CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top);
                                }
                                break;
                            default:
                                CurrentControl[PROPERTY.Left] = FConvert.toDecimal(left);
                                CurrentControl[PROPERTY.Top] = FConvert.toDecimal(top);
                                break;
                        }
                        //if (height <= 0) {
                        //    CurrentControl[PROPERTY.Height] = 50;
                        //}
                        //else {
                        //    CurrentControl[PROPERTY.Height] = height;
                        //}
                        //if (width <= 0) {
                        //    CurrentControl[PROPERTY.Width] = 100;
                        //}
                        //else {
                        //    CurrentControl[PROPERTY.Width] = width < height ? width = height : width;
                        //}
                        CurrentControl.SubParentId = DraggedColumn != undefined ? DraggedColumn.dataset.parentid : 0;
                        //switch (parentControlType) {
                        //    case CONTROLTYPE.Area:
                        //        CurrentControl.MasterId = imasterId;
                        //        CurrentControl.Left = FConvert.toDecimal(left) + parseFloat(control.style.left.substr(0, control.style.left.length - 2));
                        //        CurrentControl.Top = FConvert.toDecimal(top) + parseFloat(control.style.top.substr(0, control.style.top.length - 2));
                        //        break;
                        //}
                    }
                    if (CurrentControl[PROPERTY.Text]) {
                        if (CurrentControl[PROPERTY.Text].includes(".Company Logo") == true) {
                            CurrentControl.StaticTextProperties.DataType = 7;
                        }
                    }
                    if (controlType != CONTROLTYPE.BodyCanvas && controlType != CONTROLTYPE.Image && controlType)
                        INVOICEDESIGN.SetControlProperty(CurrentControl, '', eleParent);
                }
                controlType = undefined;
                AddElementToArea = false;
                draggedElement = undefined;
                DraggedColumn = undefined;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.mouseUpEvent} " + err.message, "Exception");
        }
    },

    inputfile_onchange: function (inputele, evt) {

        var height = MouseEndYAxisPos - MouseStartYAxisPos;
        var width = MouseEndXAxisPos - MouseStartXAxisPos;
        var left = MouseStartXAxisPos - INVOICEDESIGN.bitmapparent.getBoundingClientRect().left;
        var top = MouseStartYAxisPos - INVOICEDESIGN.bitmapparent.getBoundingClientRect().top;
        try {
            if (FCommon.UI.isValidObject(evt.target.files) == true) {
                console.log("inputele is valid")
                if (evt.target.files.length > 0) {
                    console.log("input files exists")
                    iMaxFileSize = 100000;
                    if (iMaxFileSize > 0 && evt.target.files[0].size > iMaxFileSize) {
                        alert("File size cannot be greater than " + iMaxFileSize + " bytes.");
                        return;
                    }
                    else {
                        if (evt.target.files && evt.target.files[0]) {
                            var fileType = evt.target.files[0].type;
                            if (fileType == "image/png" || fileType == "image/gif" || fileType == "image/jpg" || fileType == "image/jpeg" || fileType == "image/bmp") {
                                if (evt.target.files[0].size < 100000) {
                                    if (height <= 0) {
                                        height = 50;
                                    }
                                    if (width <= 0) {
                                        width = 100;
                                    }
                                    if (INVOICEDESIGN.bitmapparent == null) {
                                        INVOICEDESIGN.bitmapparent = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                                    }
                                    SelectedField = INVOICEDESIGN.CreateBitMap(left, top, height, width, INVOICEDESIGN.bitmapparent);
                                    INVOICEDESIGN.UpdatePositionPageHeaderforImage(SelectedField.children[0].id, left, top);
                                    var reader = new FileReader();
                                    reader.onload = function (e) {
                                        $(SelectedField.children[0]).attr('src', e.target.result);
                                        INVOICEDESIGN.UpdateArrPageHeaderforImage(SelectedField.children[0].id);
                                    }
                                    reader.readAsDataURL(evt.target.files[0]);
                                    $(inputele).css("color", "#000");
                                }
                                else {
                                    $(inputele).css("color", "red");
                                    COMMON.prototype.showMessage(document.getElementById("msgFilesizeExceed").value, "Error");
                                }
                                console.log("image upload ends...")
                            }
                            else {
                                $(inputele).css("color", "red");
                                COMMON.prototype.showMessage(document.getElementById("msgInvalidFileType").value, "Error");
                            }
                            return true;
                        }
                    }
                }
                inputele.value = "";
                return;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("test" + err.message, "EXCEPTION");
        }
    },

    ////////////////////////////
    ///Columns moving functionality in body grid column header

    onDragStart: function (evt) {

        try {
            evt.dataTransfer.setData("text", evt.currentTarget.id);
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.onDragStart} " + err.message);
        }
    },

    onAllowDrop: function (evt) {
        try {
            if (evt.preventDefault) {
                evt.preventDefault();
            }
            else {
                evt.returnValue = false;
            }
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.onAllowDrop} " + err.message);
        }
    },

    onDrop: function (ele, evt) {
        var sSourceId = "";
        var iSourceIndex = -1, iTargetIndex = -1;
        var eleTarget = null, srcEle = null, eleParent = null;
        var iCounter = 0;
        try {
            if (evt.preventDefault) {
                evt.preventDefault();
            }
            else {
                evt.returnValue = false;
            }

            // evt.stopImmediatePropagation();
            if (evt != null && evt.dataTransfer != null) {
                sSourceId = evt.dataTransfer.getData("text");
                srcEle = document.getElementById(sSourceId);
                eleTarget = evt.currentTarget;
                if (srcEle == null && DraggedColumn != undefined) {
                    if (DraggedColumn.dataset.controltype == "2") {
                        controlType = parseInt(DraggedColumn.dataset.controltype);
                        INVOICEDESIGN.mouseUpEvent(evt);
                        return true;
                    }
                }

                if (FCommon.String.isNullOrEmpty(eleTarget.id) == true) {
                    eleTarget = eleTarget.parentElement;
                }
                if (sSourceId != "" && eleTarget.id != "") {
                    if (sSourceId == eleTarget.id) {
                        return;
                    }
                    evt.stopImmediatePropagation(); //because its column to column drag , so ignore other parents drop method
                }
                else {
                    return;
                }

                eleParent = eleTargetParent = eleTarget.parentElement;
                for (iCounter = 0; iCounter < eleTargetParent.children.length; iCounter++) {
                    if (eleTargetParent.children[iCounter].id == sSourceId) {
                        iSourceIndex = iCounter;
                    }
                    else if (eleTargetParent.children[iCounter].id == eleTarget.id) {
                        iTargetIndex = iCounter;
                    }
                    if (iSourceIndex != -1 && iTargetIndex != -1) {
                        break;
                    }
                }

                if (iTargetIndex < iSourceIndex) { // right to left
                    eleParent.insertBefore(srcEle, eleTarget);
                }
                else if (iTargetIndex > iSourceIndex) { //left to right
                    if (iTargetIndex == (eleParent.children.length - 1)) {
                        eleParent.appendChild(srcEle);
                    }
                    else if (iTargetIndex < (eleParent.children.length - 1)) {
                        eleParent.insertBefore(srcEle, eleParent.children[iTargetIndex + 1]);
                    }
                }
                //update order in global object
                var currentorder = [];
                var sequenceIndex = null;

                //arrange objLayoutInformation.Pages[0].PageHeader[index].PageBody in currentorder
                iCurrentPage = FConvert.toInt(eleParent.getAttribute('data-pageno'));
                var uid = null, pageHeader = null;
                uid = eleParent.offsetParent.parentElement.id.split('_');
                uid = parseInt(uid[uid.length - 1]);
                pageHeader = $.grep(objLayoutInformation.Pages[iCurrentPage].PageHeader, function (x) {
                    return x.UID == uid;
                })[0];
                var iCounter = 0
                var sortedarray = [];
                for (iCounter = 0; iCounter < eleParent.children.length; iCounter++) {
                    sequenceIndex = parseInt(eleParent.children[iCounter].id.split("_")[2]);
                    sequenceIndex = parseInt(eleParent.children[iCounter].getAttribute("data-colindex"));
                    currentorder.push(sequenceIndex);
                }
                for (iCounter = 0; iCounter < currentorder.length; iCounter++) {
                    for (var j = 0; j < pageHeader.PageBody.length; j++) {
                        if (pageHeader.PageBody[j].ColumnIndex == currentorder[iCounter]) {
                            sortedarray.push(pageHeader.PageBody[j])
                            break;
                        }
                    }
                }
                pageHeader.PageBody = sortedarray;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.onDrop} " + err.message, "Exception");
        }
    },
    //////////////////////

    //Internal
    ctrlOnkeydown: function (eleParent, e, ele) {
        try {
            if (e.keyCode == 9) {
                var eleNxt = null, UID = null, eleTable = null;
                eleTable = eleParent.children[0];
                //For loop for table control to prepare the text.
                if (FCommon.UI.isValidObject(eleTable)) {
                    UID = eleTable.id.split('_');
                    UID = parseInt(UID[UID.length - 1]);
                    UID = 'TextBox_2_' + UID;
                    if (FCommon.UI.isValidObject(document.getElementById(UID))) {
                        var iRows = eleTable.children.length;
                        var iCols = 0, iRow = 0, iCol = 0;
                        var eleTr = null, eleTd = null;
                        var sText = '', sCompleteText = '';
                        var isEditable = 'false';
                        isEditable = ele.getAttribute('contenteditable');
                        if (iRows > 0) {
                            eleTr = eleTable.children[iRow];
                            iCols = eleTr.children.length;
                            if (iCols > 0) {
                                eleTd = eleTr.children[0];
                                sCompleteText = eleTd.textContent;
                                if (iCols > 1) {
                                    for (iCol = 1; iCol < iCols; iCol++) {
                                        eleTd = eleTr.children[iCol];
                                        if (isEditable == 'true') {
                                            sCompleteText = sCompleteText + ',' + eleTd.textContent;
                                        }
                                        else {
                                            sCompleteText = sCompleteText + eleTd.textContent;
                                        }
                                    }
                                }
                            }
                            if (iRows > 1) {
                                for (iRow = 1; iRow < iRows; iRow++) {
                                    eleTr = eleTable.children[iRow];
                                    iCols = eleTr.children.length;
                                    if (iCols > 0) {
                                        for (iCol = 0; iCol < iCols; iCol++) {
                                            eleTd = eleTr.children[iCol];
                                            if (isEditable == 'true') {
                                                sCompleteText = sCompleteText + ',' + eleTd.textContent;
                                            }
                                            else {
                                                sCompleteText = sCompleteText + eleTd.textContent;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        document.getElementById(UID).value = sCompleteText;
                        iCurrentPage = FConvert.toInt(eleParent.getAttribute('data-pageno'));
                        UID = eleTable.id.split('_');
                        UID = parseInt(UID[UID.length - 1]);
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Text = sCompleteText == null ? "" : sCompleteText;
                            }
                        }
                    }
                }
                eleNxt = ele.nextElementSibling;
                if (eleNxt != undefined || eleNxt != null) {
                    $(ele).blur();
                    $(ele).parent('tr').next('td').focus();
                    return false;
                }
            }
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.ctrlOnkeydown} " + err.message);
        }
    },

    //Internal
    ctrlOnmousemove: function (ele, e) {
        try {
            var x = e.clientX;
            var y = e.clientY;
            //if (document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage))) {
            //     var LayoutEle = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
            //     var contentwidth = ele.textContent.visualLength() + parseInt(ele.style.left.substr(0, ele.style.left.length - 2)) + parseInt(LayoutEle.x);
            //     var contentHeight = ele.textContent.visualHeight() + parseInt(ele.style.top.substr(0, ele.style.top.length - 2)) + parseInt(LayoutEle.y);

            //     var x1 = parseInt(ele.style.left.substr(0, ele.style.left.length - 2)) + parseInt(LayoutEle.x);
            //     var y1 =  parseInt(ele.style.top.substr(0, ele.style.top.length - 2)) + parseInt(LayoutEle.y);

            //     var x2 = contentwidth;
            //     var y2 = contentHeight;

            //     var isText = x > x1 && x < x2 && y > y1 && y < y2;

            //     if (isText) {
            //         ele.style.cursor = "text";
            //     }
            //     else {
            //         ele.style.cursor = "move";
            //     }
            // }
            if (ele != SelectedField) {
                blnMouseDown = false;
                return;
            }

            if (FConvert.toInt(e.offsetX) > (FConvert.toInt(ele.style.width) - 10)
            && FConvert.toInt(e.offsetY) > (FConvert.toInt(ele.style.height) - 10)) {
                if (blnMouseDown == true && blnEnableResize == true) {
                    var initialHeight = parseFloat(ele.style.height);
                    var initialWidth = parseFloat(ele.style.width);
                    var newHeight = 0, newWidth = 0;
                    var XPos = parseFloat(e.offsetX);
                    var YPos = parseFloat(e.offsetY);
                    if (YPos > 10) {
                        newHeight = YPos;
                    }
                    else {
                        newHeight = 10;
                    }
                    if (XPos > 10) {
                        newWidth = XPos;
                    }
                    else {
                        newWidth = 10;
                    }
                    ele.style.height = newHeight + "px";
                    ele.style.width = newWidth + "px";
                    var eleTable = null, eleBodyGrid = null, eleParent = null, eleChild = null;
                    var iTotalCount = 0, iCount = 0;
                    var UID = null, controltype = null;
                    if (ele.getAttribute('data-datatype') == 10) {
                        eleTable = ele.children[0];
                        UID = eleTable.id.split('_');
                        UID = parseInt(UID[UID.length - 1]);
                    }
                    else {
                        UID = ele.id.split('_');
                        UID = parseInt(UID[UID.length - 1]);
                    }
                    controltype = parseInt(ele.getAttribute('data-controltype'));
                    iCurrentPage = FConvert.toInt(ele.getAttribute('data-pageno'));
                    switch (controltype) {
                        case CONTROLTYPE.Maincanvas:
                            objLayoutInformation[PROPERTY.Height] = parseInt(newHeight);
                            objLayoutInformation[PROPERTY.Width] = parseInt(newWidth);
                            break;
                        case CONTROLTYPE.BodyColumn:
                            //Run the loop for the grid columns in the body grid.
                            eleBodyGrid = ele.parentElement.parentElement.parentElement;
                            if (FCommon.UI.isValidObject(eleBodyGrid)) {
                                UID = eleBodyGrid.id.split('_');
                                UID = parseInt(UID[UID.length - 1]);
                                for (iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                    if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                        if (iCurrentPage > 0) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ShowOnPage = 'PageHeader';
                                        }
                                        eleParent = ele.parentElement;
                                        iTotalCount = eleParent.children.length;
                                        if (iTotalCount > 0) {
                                            for (var iChildCount = 0; iChildCount < iTotalCount; iChildCount++) {
                                                eleChild = eleParent.children[iChildCount];
                                                if (FCommon.UI.isValidObject(eleChild)) {
                                                    if (eleChild.id == Field.id) {
                                                        objLayoutInformation[PROPERTY.Height] = parseInt(newHeight);
                                                        objLayoutInformation[PROPERTY.Width] = parseInt(newWidth);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            for (iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][PROPERTY.Height] = parseFloat(newHeight);
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][PROPERTY.Width] = parseFloat(newWidth);
                                }
                            }
                            break;
                    }
                }
            }
            else if (ele.id.includes("MainGrid") == true) {
                if (FConvert.toInt(e.offsetX) > (FConvert.toInt(ele.style.width) - 10)
                    || FConvert.toInt(e.offsetY) > (FConvert.toInt(ele.style.height) - 10)) {
                    if (blnMouseDown == true && blnEnableResize == true) {
                        var initialHeight = parseFloat(ele.style.height);
                        var initialWidth = parseFloat(ele.style.width);
                        var newHeight = 0, newWidth = 0;
                        var XPos = parseFloat(e.offsetX);
                        var YPos = parseFloat(e.offsetY);
                        if (YPos > 10) {
                            newHeight = YPos;
                        }
                        else {
                            newHeight = 10;
                        }
                        if (XPos > 10) {
                            newWidth = XPos;
                        }
                        else {
                            newWidth = 10;
                        }
                        ele.style.height = newHeight + "px";
                        ele.style.width = newWidth + "px";
                        var eleTable = null, eleBodyGrid = null, eleParent = null, eleChild = null;
                        var iTotalCount = 0, iCount = 0;
                        var UID = null, controltype = null;
                        if (ele.getAttribute('data-datatype') == 10) {
                            eleTable = ele.children[0];
                            UID = eleTable.id.split('_');
                            UID = parseInt(UID[UID.length - 1]);
                        }
                        else {
                            UID = ele.id.split('_');
                            UID = parseInt(UID[UID.length - 1]);
                        }
                        controltype = parseInt(ele.getAttribute('data-controltyp'));
                        iCurrentPage = FConvert.toInt(ele.getAttribute('data-pageno'));
                        switch (controltype) {
                            case CONTROLTYPE.Maincanvas:
                                objLayoutInformation[PROPERTY.Height] = parseInt(newHeight);
                                objLayoutInformation[PROPERTY.Width] = parseInt(newWidth);
                                break;
                            case CONTROLTYPE.BodyColumn:
                                //Run the loop for the grid columns in the body grid.
                                eleBodyGrid = ele.parentElement.parentElement.parentElement;
                                if (FCommon.UI.isValidObject(eleBodyGrid)) {
                                    UID = eleBodyGrid.id.split('_');
                                    UID = parseInt(UID[UID.length - 1]);
                                    for (iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                            if (iCurrentPage > 0) {
                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ShowOnPage = 'PageHeader';
                                            }
                                            eleParent = ele.parentElement;
                                            iTotalCount = eleParent.children.length;
                                            if (iTotalCount > 0) {
                                                for (var iChildCount = 0; iChildCount < iTotalCount; iChildCount++) {
                                                    eleChild = eleParent.children[iChildCount];
                                                    if (FCommon.UI.isValidObject(eleChild)) {
                                                        if (eleChild.id == Field.id) {
                                                            objLayoutInformation[PROPERTY.Height] = parseInt(newHeight);
                                                            objLayoutInformation[PROPERTY.Width] = parseInt(newWidth);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            default:
                                for (iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                    if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][PROPERTY.Height] = parseFloat(newHeight);
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][PROPERTY.Width] = parseFloat(newWidth);
                                    }
                                }
                                break;
                        }
                    }
                }
                else {
                    blnMouseDown = false;
                    blnEnableResize = false;
                    //ele.style.cursor = 'move';
                }
                //ele.style.cursor = 'move';
            }
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.ctrlOnmousemove} " + err.message);
        }
    },

    //Control mouseleave event.
    ctrlOnmouseleave: function () {
        blnMouseDown = false;
    },

    //Control mouseup event.
    UpdateControlSize: function (e) {
        var ControlId = "";
        var Uid = 0;
        try {
            e.stopImmediatePropagation();
            var control = e.target;
            if (control.nodeName == "TD") {
                control = control.offsetParent.parentElement;
                ControlId = control.children[0].id;
            }
            if ((control.className.includes("ui-resizable-handle") == true)
                || (control.className.includes("ui-draggable-handle") == true)) { //resizer div or dragable
                control = e.currentTarget;
            }
            if (control.id.includes("ColumnGrid") == true) {
                control = control.parentElement;
            }
            if (ControlId == "")
                ControlId = control.id;
            var width = control.style.width.substring(0, [control.style.width.length - 2]);
            var height = control.style.height.substring(0, [control.style.height.length - 2]);

            blnMouseDown = false;
            blnEnableResize = false;
            if (ControlId != "") {
                if (ControlId.indexOf("BodyGrid") > -1)
                    iCurrentPage = parseInt(ControlId.split("_")[1]);
                else
                    iCurrentPage = parseInt(control.dataset.pageno);
                Uid = parseInt(ControlId.split("_")[2]);
            }

            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                    if (Uid == objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID) {
                        bModified = true;
                        objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Top] = control.style.top.substr(0, control.style.top.length - 2);
                        objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Left] = control.style.left.substr(0, control.style.left.length - 2);

                        objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Width] = parseFloat(width);
                        objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Height] = parseFloat(height);
                        if (SelectedField != undefined) {
                            if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1 && SelectedField == control) {
                                SelectedField.style.boxShadow = "";
                            }
                        }
                        SelectedField = control;
                        break;
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.UpdateControlSize}" + err.message.toString(), "Exception");
        }
    },

    UpdateLayoutInfo: function (e) {
        try {
            var txtBlockId = e.currentTarget.id;
            var UpdatedValue = document.getElementById(txtBlockId).value;
            var iPageNo = document.getElementById(txtBlockId).getAttribute('data-pageno');
            var iPageHeaderCount = objLayoutInformation.Pages[iPageNo].PageHeader.length;
            var fields = txtBlockId.split('_');
            for (var iCount = 0; iCount < iPageHeaderCount; iCount++) {
                if (objLayoutInformation.Pages[iPageNo].PageHeader[iCount].UID == fields[2]) {
                    objLayoutInformation.Pages[iPageNo].PageHeader[iCount].Text = UpdatedValue;
                    break;
                }
            }
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.UpdateLayourInfo} " + err.message);
        }
    },

    UpdateLayoutName: function (Name) {
        var id_layoutName = document.getElementById("id_layoutName");
        if (id_layoutName != null) {
            id_layoutName.innerHTML = "[" + Name + "]";
        }
    },

    //Internal method to create non horizontal lines.
    getAngle: function (MouseStartXAxisPos, MouseStartYAxisPos, MouseEndXAxisPos, MouseEndYAxisPos) {
        try {
            var distY = Math.abs(MouseEndYAxisPos - MouseStartYAxisPos);
            var distX = Math.abs(MouseEndXAxisPos - MouseStartXAxisPos);
            var dist = Math.sqrt((distY * distY) + (distX * distX));
            var val = distY / dist;
            var aSine = Math.asin(val);
            var k = aSine * 180 / Math.PI;
            return k;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.getAngle}" + err.message.toString(), "Exception");
        }
    },

    allowDropControl: function (ev) {

        var colLeft = null, colTop = null;
        ev.preventDefault();
        if (draggedElement) {
            layoutDiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
            var currentleft = (ev.pageX - (layoutDiv.left + dragStartPosX));
            var currentTop = (ev.pageY - (layoutDiv.top + dragStartPosY));
            //retrieve properties inputs to show data
            //show the resizing width in properties tab instantly , 
            if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                if (draggedElement == SelectedField) {
                    colLeft = document.querySelectorAll("[data-bindingname='Left']");
                    colLeft[0].value = currentleft;
                    colTop = document.querySelectorAll("[data-bindingname='Top']");
                    colTop[0].value = currentTop;
                }
            }
        }
    },

    getControl: function (e) {
        debugger
        var layoutDiv = null, eleTarget = null;
        try {
            e.stopPropagation();
            eleTarget = e.currentTarget;
            if (DraggedColumn != undefined && (DraggedColumn.dataset.controltype == "2" || DraggedColumn.dataset.controltype == "12")) {
                controlType = parseInt(DraggedColumn.dataset.controltype);
                INVOICEDESIGN.mouseUpEvent(e);
                return true;
            }
            if (AddElementToArea == true && resizeImage == false) {
                INVOICEDESIGN.mouseUpEvent(e);
                AddElementToArea = false;
                INVOICEDESIGN.addEventToLayout("onmouseup", "INVOICEDESIGN.getControl(event)");
                return 0;
            }
            if (draggedElement != undefined && draggedElement != null) {
                draggedElement = INVOICEDESIGN.getParentElement(draggedElement);

                if (draggedElement.tagName == "TD" || draggedElement.tagName == "TH") {
                    iCurrentPage = parseInt(draggedElement.dataset.pageno);
                    var sSourceId = null, sTargetId = null;
                    sSourceId = draggedElement.id;
                    sTargetId = eleTarget.id;
                    if (e.target.tagName != "TD" || e.target.tagName != "TH") {
                        return;
                    }
                    if (sSourceId == sTargetId) {
                        return;
                    }
                    INVOICEDESIGN.onDropReportColumnDragReportColumn(sSourceId, sTargetId);
                    draggedElement = undefined;
                    return;
                }
                if (draggedElement.id == "InvoiceDesignMainDiv") {
                    draggedElement = undefined;
                    return;
                }
                iCurrentPage = parseInt(draggedElement.dataset.pageno);
                if (draggedElement != undefined && draggedElement != null) {
                    if (FCommon.UI.isValidObject(draggedElement.parentNode)) {
                        if (draggedElement.parentNode.id.indexOf("Area_") > -1) {
                            layoutDiv = draggedElement.parentNode.getBoundingClientRect();
                        }
                        else {
                            layoutDiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
                        }
                    }
                    else {
                        layoutDiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).getBoundingClientRect();
                    }
                    if (draggedElement != document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage))) {
                        draggedElement.style.left = (e.pageX - (layoutDiv.left + dragStartPosX)) + "px";
                        draggedElement.style.top = (e.pageY - (layoutDiv.top + dragStartPosY)) + "px";
                        switch (controlType) {
                            case CONTROLTYPE.Image:
                                resizeImage = false;
                                break;
                            case CONTROLTYPE.Area:
                                resizeImage = false;
                                SetAreaCtrlPos = false;
                                break;
                        }
                    }
                    INVOICEDESIGN.removeEventForLayout("onmouseup");
                    var Uid = draggedElement.id.split('_')[2];
                    if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                        for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                            if (Uid == objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[count].MasterId > 0) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Left] = (e.pageX - (layoutDiv.left + dragStartPosX)) + FConvert.toDecimal(draggedElement.parentElement.style.left.substring(0, draggedElement.parentElement.style.left.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Top] = (e.pageY - (layoutDiv.top + dragStartPosY)) + FConvert.toDecimal(draggedElement.parentElement.style.top.substring(0, draggedElement.parentElement.style.top.length - 2));
                                }
                                else {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Left] = (e.pageX - (layoutDiv.left + dragStartPosX));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[count][PROPERTY.Top] = (e.pageY - (layoutDiv.top + dragStartPosY));
                                }
                                if (draggedElement.id.indexOf("MainGrid") > -1)
                                    $(draggedElement.children[1]).trigger('dblclick');
                                else
                                    $(draggedElement).trigger('dblclick');
                                break;
                            }
                        }
                    }
                    draggedElement = undefined;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.getControl}" + err.message, "Exception");
        }
    },

    dropElementInAreaControl: function (controlEle, evt) {
        debugger
        var controltype = null, areachild = null;
        var left = 0, top = 0;
        try {
            if (draggedElement != undefined && DraggedColumn == undefined) {
                if (draggedElement.nodeName.toLowerCase() == "img") { //Bitmap image ele, select its parent div
                    draggedElement = draggedElement.parentElement;
                }
                if (draggedElement.id != "") {
                    if (draggedElement.id.includes("ColumnGrid")) {
                        draggedElement = draggedElement.parentElement;
                    }
                }
                if (controlEle == draggedElement) {
                    return;
                }
                if (draggedElement.id.includes("LayoutDiv"))
                    return;
            }
            else {
                return;
            }
            //first stop event bubbling
            evt.stopImmediatePropagation();
            layoutDiv = controlEle.getBoundingClientRect();

            left = (evt.pageX - (layoutDiv.left + dragStartPosX));
            top = (evt.pageY - (layoutDiv.top + dragStartPosY));

            var uid = null, masterUid = null;
            uid = parseInt(draggedElement.id.split("_")[draggedElement.id.split('_').length - 1]);
            masterUid = parseInt(controlEle.id.split("_")[controlEle.id.split('_').length - 1]);
            //check if the dragged element controlType is 2 or 3 (static text or text block), 
            //then only make it a child of the controlEle, and update its left top properties
            //otherwise
            controltype = parseInt(draggedElement.dataset.controltype);
            if (draggedElement.parentElement == controlEle) {
                // then only update left and top values 
                draggedElement.style.left = left + "px";
                draggedElement.style.top = top + "px";

                if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                    for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                        if (uid == objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID) {
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[count].Left = left + parseInt(controlEle.style.left.substr(0, controlEle.style.left.length - 2));
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[count].Top = top + parseInt(controlEle.style.top.substr(0, controlEle.style.top.length - 2));
                            break;
                        }
                    }
                }
            }
            else {
                //change parent to controlEle and also update left and top values
                areachild = draggedElement.parentElement.removeChild(draggedElement);
                controlEle.appendChild(areachild);
                areachild.style.left = left + "px";
                areachild.style.top = top + "px";

                if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                    for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                        if (uid == objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID) {
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[count].MasterId = masterUid;
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[count].Left = left + parseInt(controlEle.style.left.substr(0, controlEle.style.left.length - 2));
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[count].Top = top + parseInt(controlEle.style.top.substr(0, controlEle.style.top.length - 2));
                            break;
                        }
                    }
                }

            }
            return;

            switch (controltype) {
                case CONTROLTYPE.Statictext:
                case CONTROLTYPE.Textblock:
                    areachild = draggedElement.parentElement.removeChild(draggedElement);
                    controlEle.appendChild(areachild);
                    areachild.style.left = left + "px";
                    areachild.style.top = top + "px";
                    break;
                case CONTROLTYPE.Image:
                    areachild = draggedElement.parentElement.removeChild(draggedElement);
                    controlEle.appendChild(areachild);
                    areachild.style.left = left + "px";
                    areachild.style.top = top + "px";
                    break;
                case CONTROLTYPE.BodyCanvas:
                    areachild = draggedElement.parentElement.removeChild(draggedElement);
                    controlEle.appendChild(areachild);
                    areachild.style.left = left + "px";
                    areachild.style.top = top + "px";
                    break;
                case CONTROLTYPE.Rectangle:
                    break;
                case CONTROLTYPE.BodyColumn:
                    break;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.dropElementInAreaControl}" + err.message, "EXCEPTION");
        }
    },

    // Returns report column index in array 
    getReportColumnIndex: function (element) {
        var iCounter = 0;
        var result = null;
        try {
            var eleParent = draggedElement.parentElement;
            element = FCommon.UI.getValidElement(element);
            result = COMMON.prototype.getEmptyResultObject();
            for (iCounter = 0; iCounter < eleParent.children.length; iCounter++) {
                if (eleParent.children[iCounter].id == element.id) {
                    result.lValue = 1;
                    result.sValue = "";
                    result.data = iCounter;
                    break;
                }
            }

            if (iCounter >= eleParent.children.length) {
                result.lValue = 0;
                result.sValue = "{INVOICEDESIGN.getReportColumnIndex} Data not found.";
                result.data = null;
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = "{INVOICEDESIGN.getReportColumnIndex} " + err.message;
            result.data = null;
        }

        return (result);
    },

    insertinBetween: function (e, index, item) {
        e.splice(index, 0, item);
    },

    onDropReportColumnDragReportColumn: function (sSourceId, sTargetId) {
        var element = null, objSourceData = null, result = null;
        var iSourceIndex = 0, iTargetIndex = 0;
        try {
            var eleParent = draggedElement.parentElement;
            element = document.getElementById(sSourceId);
            result = INVOICEDESIGN.getReportColumnIndex(element);
            if (result.lValue > 0) {
                iSourceIndex = result.data;
                objSourceData = eleParent.children[iSourceIndex];
            }
            else {
                if (result.lValue < 0) {
                    alert(result.sValue);
                }
                console.log("{INVOICEDESIGN.onDropReportColumnDragReportColumn} Source index not found.");
                return;
            }

            result = INVOICEDESIGN.getReportColumnIndex(sTargetId);
            if (result.lValue > 0) {
                iTargetIndex = result.data;
            }
            else {
                if (result.lValue < 0) {
                    alert(result.sValue);
                }
                console.log("{INVOICEDESIGN.onDropReportColumnDragReportColumn} Target index not found.");
                return;
            }
            element = $(element).detach();
            $(element).insertBefore($("#" + sTargetId));
            Uid = FConvert.toInt(draggedElement.getAttribute('data-BodyId'));
            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                    if (Uid == objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID) {
                        var objSourceVal = null;
                        objSourceVal = objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody[iSourceIndex];
                        delete objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody[iSourceIndex];
                        INVOICEDESIGN.insertinBetween(objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody, iTargetIndex, objSourceVal);
                        objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody = objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody.filter(function () { return true; })
                        break;
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.onDropReportColumnDragReportColumn}" + err.message, "Exception");
        }
    },

    startDrag: function (ele, e, eleCurrent) {
        try {

            blnMouseDown = true;
            blnEnableResize = false;
            e.stopPropagation();
            if (FConvert.toInt(e.offsetX) > (FConvert.toInt(ele.style.width) - 10)
            && FConvert.toInt(e.offsetY) > (FConvert.toInt(ele.style.height) - 10)) {
                blnEnableResize = true;
                return;
            }
            if (ele.id.includes("MainGrid") == true) {
                if (FConvert.toInt(e.offsetX) > (FConvert.toInt(ele.style.width) - 10)
                     || FConvert.toInt(e.offsetY) > (FConvert.toInt(ele.style.height) - 10)) {
                    blnEnableResize = true;
                    return;
                }
            }

            if (controlType != undefined) {
                AddElementToArea = true;
                MouseStartXAxisPos = e.pageX;
                MouseStartYAxisPos = e.pageY;
                if (controlType == CONTROLTYPE.Line) {
                    ele.draggable = false;
                    INVOICEDESIGN.mouseDownEvent(event);
                    ele.setAttribute("onmousemove", "INVOICEDESIGN.onsvgmousemove(event);");
                }
                return true;
            }

            ele.draggable = true;

            dragStartPosX = e.pageX - e.target.getBoundingClientRect().left;
            dragStartPosY = e.pageY - e.target.getBoundingClientRect().top;
            if (e.target.id == '') {
                draggedElement = e.target.parentElement.parentElement.parentElement;
            }
            else {
                if (e.target.id.indexOf("BodyGrid") > -1 || e.target.id.indexOf("imageEle") > -1)
                    draggedElement = e.target.parentNode;
                else
                    draggedElement = e.target;
            }
            MouseDownPosX = e.pageX;
            MouseDownPosY = e.pageY;
            bModified = true;
            if (e.target.dataset.controltype == CONTROLTYPE.Textblock) {
                return false;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.startDrag}" + err.message, "Exception");
        }
    },

    getLayoutDivId: function (count) {
        return "id_LayoutDiv_" + count;
    },

    AddControlToDOM: function (control, parentEle) {
        try {
            if (parentEle != undefined && parentEle != null) {
                parentEle.appendChild(control);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.AddControlToDOM}" + err.message, "Exception");
        }
    },

    RemoveControlFromDOM: function (control, parentEle) {
        try {
            if (parentEle != undefined && parentEle != null) {
                parentEle.removeChild(control);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.RemoveControlFromDOM}" + err.message, "EXCEPTION");
        }
    },

    removeEventForLayout: function (eventName) {
        try {
            if (isNaN(iCurrentPage) == true) {
                return;
            }
            document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).setAttribute(eventName, "");
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.removeEventForLayout}" + err.message, "Exception");
        }
    },

    addEventToLayout: function (EventName, FuncName) {
        try {
            if (iCurrentPage < 0) {
                if (FCommon.UI.isValidObject(SelectedField)) {
                    iCurrentPage = FConvert.toInt(SelectedField.getAttribute('data-pageno'));
                }
            }
            if (iCurrentPage >= 0) {
                document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage)).setAttribute(EventName, FuncName);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.addEventToLayout}" + err.message, "Exception");
        }
    },

    addMouseEventToLayout: function () {
        try {
            INVOICEDESIGN.addEventToLayout("onmousedown", "INVOICEDESIGN.mouseDownEvent(event)");
            INVOICEDESIGN.addEventToLayout("onmouseup", "INVOICEDESIGN.mouseUpEvent(event)");
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.addMouseEventToLayout}" + err.message, "Exception");
        }
    },

    //Internal
    ByteToBase64: function (data) {
        var str = String.fromCharCode.apply(null, data);
        return btoa(str).replace(/.{76}(?=.)/g, '$&\n');
    },
    /////////// Create functions

    CreateSVGLine: function (svgLine, control, objField) {
        var dWidth = 0.0;
        var dHeight = 0.0;
        var line = null;
        try {
            if (svgLine) {
                line = svgLine;
                var X1 = parseFloat(svgLine.getAttribute("x1"));
                var X2 = parseFloat(svgLine.getAttribute("x2"));
                var Y1 = parseFloat(svgLine.getAttribute("y1"));
                var Y2 = parseFloat(svgLine.getAttribute("y2"));

                svgLine.style.cursor = "pointer";
                svgLine.setAttribute("tabindex", "0");
                svgLine.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
                //Line already created , need to enter its details in objLayoutInformation.Pages[].PageHeader
                dWidth = X2 - X1;
                dHeight = Y2 - Y1;

                var info = {};
                info = INVOICEDESIGN.getEmptyPageHeaderObj();
                //common properties
                info.Type = CONTROLTYPE.Line;
                info.UID = parseInt(svgLine.getAttribute("data-bodyid"));
                info.BorderColor = svgLine.getAttribute("stroke") == "black" ? -16777216 : -16777216;//black
                info.StaticTextProperties = INVOICEDESIGN.getEmptyStaticTextClassObj();
                info.BorderThickness = parseFloat(svgLine.getAttribute("stroke-width"));
                info.Width = dWidth;
                info.Height = dHeight;
                info.Left = X1;
                info.Top = Y1;

                if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                    if (objLayoutInformation.Pages[iCurrentPage].PageHeader == null)
                        objLayoutInformation.Pages[iCurrentPage].PageHeader = [];
                    objLayoutInformation.Pages[iCurrentPage].PageHeader.push(info);
                }
            }

            if (objField) {
                //create svg line from object properties
                var layoutdiv = document.getElementById(INVOICEDESIGN.getLayoutDivId(iCurrentPage));
                if (svgcontainer == null) {
                    //create global svg here 
                    svgcontainer = document.createElementNS(SVG_NS, "svg");
                    svgcontainer.setAttribute("id", "svglinescontainer");
                    svgcontainer.setAttribute("aria-hidden", "true");
                    svgcontainer.setAttribute('viewbox', '0 0 100 100');
                    svgcontainer.setAttribute('width', layoutdiv.style.width);
                    svgcontainer.setAttribute('height', layoutdiv.style.height);
                    svgcontainer.setAttribute("onmousedown", "INVOICEDESIGN.mouseDownEvent(event);");
                    svgcontainer.setAttribute("onmouseup", "INVOICEDESIGN.onsvgmouseup(event);");
                    INVOICEDESIGN.AddControlToDOM(svgcontainer, control);
                }
                var lineprops = {};
                var left = parseFloat(objField.Left);
                var top = parseFloat(objField.Top);
                var width = parseFloat(objField.Width);
                var height = parseFloat(objField.Height);
                lineprops.x1 = left;
                lineprops.y1 = top;
                lineprops.x2 = width + left;
                lineprops.y2 = height + top;
                if (objField.BorderColor == 0) {
                    objField.BorderColor = -16777216;
                }
                line = INVOICEDESIGN.drawline(lineprops, svgcontainer, objField.UID, objField.BorderColor == -16777216 ? "black" : "black", objField.BorderThickness);
                line.style.cursor = "pointer";
                line.setAttribute("tabindex", "0");
                line.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
                svgcontainer.addEventListener('mousedown', INVOICEDESIGN.svgstartDrag);
                svgcontainer.addEventListener('mousemove', INVOICEDESIGN.drag);
                svgcontainer.addEventListener('mouseup', INVOICEDESIGN.endDrag);
                svgcontainer.addEventListener('mouseleave', INVOICEDESIGN.endDrag);
                svgcontainer.addEventListener('touchstart', INVOICEDESIGN.svgstartDrag);
                svgcontainer.addEventListener('touchmove', INVOICEDESIGN.drag);
                svgcontainer.addEventListener('touchend', INVOICEDESIGN.endDrag);
                svgcontainer.addEventListener('touchleave', INVOICEDESIGN.endDrag);
                svgcontainer.addEventListener('touchcancel', INVOICEDESIGN.endDrag);
            }

            return line;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateSVGLine}" + err.message, "EXCEPTION");
        }
    },

    //Internal
    CreateRectAngle: function (left, top, height, width, control, objField) {
        try {
            var div = document.createElement("div");
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getRectangleControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getRectangleControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Rectangle;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = objField != undefined ? objField.UID : m_iControlIds;
            div.style.left = left + "px";
            div.style.top = top + "px";

            div.style.height = height + "px";
            div.style.width = width + "px";
            div.style.border = "2px solid black";
            div.style.position = "absolute";
            div.draggable = true;
            // div.className = "Resize";
            div.setAttribute("tabindex", "0");
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Rectangle')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Rectangle')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            INVOICEDESIGN.AddControlToDOM(div, control);
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;

            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Rectangle, DATATYPE.Text, m_iControlIds);
            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("Rectangle")) {
                        uid = ui.element[0].dataset.bodyid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
                .draggable({
                    handle: this,
                    cursor: "pointer",
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                    start: function (event, ui) {
                        if (controlType == CONTROLTYPE.Line) {
                            blnMouseDown = true;
                            //then stop draggable, and call Page mouseDownEvent function from here
                            this.draggable('disable');
                        }
                    },

                });
            div.style.border = "2px solid black";
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateRectAngle}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateEllipse: function (left, top, height, width, control, objField) {
        try {
            var div = document.createElement("div");
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getEllipseControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getEllipseControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Ellipse;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            div.dataset.pageno = iCurrentPage;
            div.style.left = left + "px"
            div.style.top = top + "px";
            div.style.borderRadius = "50%";
            div.style.height = height + "px";
            div.style.width = width + "px";
            div.style.border = "1px solid black";
            div.style.position = "absolute";
            div.draggable = true;
            div.className = "Resize";
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Ellipse')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Ellipse')");
            INVOICEDESIGN.AddControlToDOM(div, control);
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;
            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Ellipse, DATATYPE.Text, m_iControlIds);
            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("Ellipse")) {
                        //  uid = ui.element[0].dataset.uid;
                        uid = ui.element[0].id.split("_")[2];
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody == null)
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody = [];
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
             .draggable({ handle: this, containment: "#id_LayoutDiv_" + iCurrentPage });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateEllipse}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateBitMap: function (left, top, height, width, control, objField) {
        try {

            var div = document.createElement("div");
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getBitMapControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getBitMapControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Image;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            div.dataset.pageno = iCurrentPage;
            div.style.left = left + "px"
            div.style.top = top + "px";
            div.style.height = height + "px";
            div.style.width = width + "px";
            div.style.border = "1px solid black";
            div.style.position = "absolute";
            div.style.overflow = "";
            div.draggable = true;
            div.className = "Resize";
            div.setAttribute("tabindex", "0");
            div.setAttribute("data-datatype", DATATYPE.Picture);
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'BitMap')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'BitMap')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            INVOICEDESIGN.AddControlToDOM(div, control);

            var img = document.createElement("img");
            var isBase = false;
            if (objField != undefined) {
                var str = objField.ImageSource.toString();
                try {
                    window.atob(str);
                    isBase = true;
                } catch (e) {

                }
                var imgbase64;
                if (isBase == false)
                    imgbase64 = INVOICEDESIGN.ByteToBase64(objField.ImageSource);
                else
                    imgbase64 = objField.ImageSource;
                img.src = "data:image/png;base64," + imgbase64;
            }
            else {
                img.src = "#";
            }
            img.id = "imageEle_" + (objField != undefined ? objField.UID : m_iControlIds);
            img.style.height = "100%";
            img.style.width = "100%";
            div.appendChild(img);
            if (objField != undefined && control != undefined) {
                if (FCommon.UI.isValidObject(control)) {
                    iCurrentPage = FConvert.toInt(control.getAttribute('data-pageno'));
                }
                if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                    for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(objField.UID)) {
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ImageSource = $("#" + "imageEle_" + (objField != undefined ? objField.UID : m_iControlIds)).attr("src").substring($("#" + "imageEle_" + (objField != undefined ? objField.UID : m_iControlIds)).attr("src").indexOf("base64,") + 7);
                            break;
                        }
                    }
                }
            }
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;
            if (objField == undefined) {
                div.setAttribute('data-isNew', '1');
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Image, DATATYPE.Picture, m_iControlIds, 0, '', 0, control.dataset.bodyid);
            }
            else {
                div.setAttribute('data-isNew', '0');
            }
            var widthele = null, heightele = null;
            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("BitMap")) {
                        uid = ui.element[0].id.split("_")[2];
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody == null)
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody = [];
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            }).draggable({ cursor: "move", handle: this, containment: "#id_LayoutDiv_" + iCurrentPage });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateBitMap}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateStaticText: function (left, top, height, width, control, objField) {
        try {

            var textarea = document.createElement("textarea");
            m_iControlIds++;
            textarea.id = objField != undefined ? INVOICEDESIGN.getStaticTextControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getStaticTextControlId(m_iControlIds, iCurrentPage);

            textarea.textContent = objField != undefined ? objField.Text : DraggedColumn != undefined ? DraggedColumn.dataset.columnname : "Static Text";

            textarea.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Statictext;
            textarea.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            textarea.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            textarea.dataset.pageno = iCurrentPage;
            textarea.style.left = left + "px";
            textarea.style.top = top + "px";
            textarea.style.height = height + "px";
            textarea.style.width = width + "px";
            textarea.style.minHeight = "10px";
            textarea.style.minWidth = "10px";
            textarea.style.position = "absolute";
            textarea.style.border = "1px solid black";
            textarea.style.borderRadius = "0.5rem";
            textarea.draggable = true;
            textarea.className = "Resize";

            textarea.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            textarea.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");
            textarea.setAttribute("onmousemove", "INVOICEDESIGN.ctrlOnmousemove(this, event)");
            textarea.setAttribute("onmouseleave", "INVOICEDESIGN.ctrlOnmouseleave(this, event)");
            textarea.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'StaticText')");
            textarea.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'StaticText')");
            textarea.setAttribute("onchange", "INVOICEDESIGN.UpdateLayoutInfo(event)");
            textarea.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);")

            INVOICEDESIGN.AddControlToDOM(textarea, control);
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;
            if (objField == undefined) {
                textarea.setAttribute('data-isNew', '1');
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Statictext, DATATYPE.Text, m_iControlIds, 0, objField != undefined ? objField.Text : DraggedColumn != undefined ? DraggedColumn.dataset.columnname : "Static Text");
            }
            else {
                textarea.setAttribute('data-isNew', '0');
            }

            return textarea;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateStaticeText}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateTextblock: function (left, top, control, objField) {
        try {

            var textarea = document.createElement("textarea");
            m_iControlIds++;
            textarea.id = "InputBlock_" + iCurrentPage + "_" + (objField != undefined ? objField.UID : m_iControlIds);
            textarea.setAttribute("class", "Resize");
            textarea.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Textblock;
            textarea.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : DraggedColumn.dataset.datatype;
            textarea.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            textarea.dataset.pageno = iCurrentPage;
            textarea.readOnly = true;

            textarea.textContent = objField != undefined ? objField.Text : DraggedColumn.dataset.groupname + "." + DraggedColumn.dataset.columnname;
            textarea.style.position = "absolute";
            textarea.style.backgroundColor = "rgb(127, 174, 212)";
            textarea.style.borderRadius = "0.5rem";
            if (objField == undefined) {
                textarea.style.left = left + "px";
            }
            else {
                if (control.style.left == "") {
                    textarea.style.left = left + "px";
                }
                else {
                    textarea.style.left = (left - FConvert.toDecimal(control.style.left)) + "px";
                }
            }
            if (objField == undefined) {
                textarea.style.top = top + "px";
            }
            else {
                if (control.style.top == "") {
                    textarea.style.top = top + "px";
                }
                else {
                    textarea.style.top = (top - FConvert.toDecimal(control.style.top)) + "px";
                }
            }
            if (objField == undefined) {
                //calculate width of text
                var s = DraggedColumn.dataset.groupname + ". " + DraggedColumn.dataset.columnname;
                var len = s.visualLength();
                len = parseFloat(len) + 40;

                textarea.style.width = len + "px";
                textarea.style.height = "25px";
                textarea.setAttribute('data-isNew', '1');
            }
            else {
                textarea.setAttribute('data-isNew', '0');
                if (control.dataset.controltype == CONTROLTYPE.Area) {
                    textarea.style.width = objField.Width + "px";
                    textarea.style.height = objField.Height + "px";
                }
                else {
                    textarea.style.width = 150 + "px";
                }
            }

            textarea.style.border = "1px solid black";
            textarea.style.minHeight = "10px";
            textarea.style.minWidth = "10px";
            textarea.draggable = true;
            textarea.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            textarea.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'TextBlock')");
            textarea.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");
            textarea.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'TextBlock')");
            textarea.setAttribute("onmousemove", "INVOICEDESIGN.ctrlOnmousemove(this, event)");
            textarea.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);")

            INVOICEDESIGN.AddControlToDOM(textarea, control);
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            if (objField == undefined) {
                textarea.setAttribute('data-isNew', '1');
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Textblock, DraggedColumn.dataset.datatype, m_iControlIds, 0, objField != undefined ? objField.Text : DraggedColumn.dataset.groupname + "." + DraggedColumn.dataset.columnname, 0, objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0"));
            }
            else {
                textarea.setAttribute('data-isNew', '0');
            }
            AddElementToArea = false;

            return textarea;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateTextblock}" + err.message.toString(), "Exeception");
        }
    },

    CreateReadonlyTextBlock: function (left, top, control, objField) {
        var div = document.createElement("div");
        var eleP = document.createElement("p");
        try {
            m_iControlIds++;
            div.id = "InputBlock_" + iCurrentPage + "_" + (objField != undefined ? objField.UID : m_iControlIds);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Textblock;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0");
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = objField != undefined ? objField.UID : m_iControlIds;
            div.style.left = left + "px";
            div.style.top = top + "px";
            div.style.overflow = "hidden";
            div.style.border = "5px solid black";
            div.style.position = "absolute";
            div.setAttribute("class", "ui-widget-content");
            div.setAttribute("tabindex", "0");

            //div.style.borderRadius = "0.5rem";
            eleP.style.height = "inherit";
            eleP.style.margin = "0px";
            eleP.setAttribute("class", "innercontent");

            if (objField == undefined) {
                div.style.left = left + "px";
                div.style.top = top + "px";
            }
            else {
                if (control.style.left == "") {
                    div.style.left = left + "px";
                }
                else {
                    div.style.left = (left - FConvert.toDecimal(control.style.left)) + "px";
                }
                if (control.style.top == "") {
                    div.style.top = top + "px";
                }
                else {
                    div.style.top = (top - FConvert.toDecimal(control.style.top)) + "px";
                }
            }
            if (objField == undefined) {
                //calculate width of text
                var s = DraggedColumn.dataset.groupname + ". " + DraggedColumn.dataset.columnname;
                var len = s.visualLength();
                len = parseFloat(len) + 40;

                div.style.width = len + "px";
                div.style.height = "25px";
                div.setAttribute('data-isNew', '1');
            }
            else {
                div.setAttribute('data-isNew', '0');
                if (control.dataset.controltype == CONTROLTYPE.Area) {
                    div.style.width = objField.Width + "px";
                    div.style.height = objField.Height + "px";
                }
                else {
                    div.style.width = "150px";
                }
            }

            div.style.border = "1px solid black";
            div.style.minHeight = "10px";
            div.style.minWidth = "10px";

            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);")
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'TextBlock')");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'TextBlock')");
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            INVOICEDESIGN.AddControlToDOM(eleP, div);
            INVOICEDESIGN.AddControlToDOM(div, control);

            if (objField == undefined) {
                div.setAttribute('data-isNew', '1');
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Textblock, DraggedColumn.dataset.datatype, m_iControlIds, 0, objField != undefined ? objField.Text : DraggedColumn.dataset.groupname + "." + DraggedColumn.dataset.columnname, 0, objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0"));
            }
            else {
                div.setAttribute('data-isNew', '0');
            }
            AddElementToArea = false;

            $(div)
                .resizable({
                    handles: "all",
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                    resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                        //show the resizing width in properties tab instantly , 
                        if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                            if (SelectedField == ui.element[0]) {
                                widthele = document.querySelectorAll("[data-bindingname='Width']");
                                widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                                heightele = document.querySelectorAll("[data-bindingname='Height']");
                                heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                            }
                        }
                    },
                    stop: function (event, ui) {
                        //set height in global object objLayoutInformation
                        if (ui.element[0].id.includes("InputBlock")) {
                            uid = ui.element[0].dataset.bodyid;
                            for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                    break;
                                }
                            }
                        }
                    }
                })
                .draggable({
                    handle: "p.innercontent",
                    cursor: "Auto",
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                    start: function (event, ui) {
                        draggedElement = this;
                        INVOICEDESIGN.fromDrag = true;
                        if (!blnMouseDown) {
                            if ($(this).is('.ui-draggable-dragging')) {
                                INVOICEDESIGN.fromDrag = false;
                                return false;
                            }
                        }
                    },
                    stop: function (event, ui) {
                        var iTop = 0, iLeft = 0;
                        var element = null;
                        try {
                            event.stopImmediatePropagation();
                            if (ui.helper.length > 0) {
                                element = ui.helper[0];
                                if (element.nodeName.toLowerCase() == "div") {
                                    iTop = parseInt(ui.position.top);
                                    iLeft = parseInt(ui.position.left);
                                    INVOICEDESIGN.updateControlPosition(element, iTop, iLeft);
                                    $(ui.helper[0]).one('click', function (e) { e.stopImmediatePropagation(); });
                                }
                            }
                        }
                        catch (err) {
                            COMMON.prototype.showMessage("{TextBlock.draggable} " + err.message, "Exception");
                        }
                    }
                });
            $(div, eleP).disableSelection();
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateReadonlyTextBlock}" + err.message, "EXCEPTION");
        }
    },

    CreateEditableBlock: function (left, top, height, width, control, objField) {

        var div = document.createElement("div");
        var P = document.createElement("p");
        try {
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getStaticTextControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getStaticTextControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Statictext;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0");
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = objField != undefined ? objField.UID : m_iControlIds;
            div.style.left = left + "px";
            div.style.top = top + "px";
            div.style.height = height + "px";
            div.style.width = width + "px";
            div.style.border = "1px solid red";
            //div.style.borderRadius = "0.5rem";
            div.style.position = "absolute";
            div.setAttribute("tabindex", "1");
            div.draggable = true;

            P.setAttribute("contenteditable", "true");
            P.style.overflow = "hidden";
            P.style.margin = "2px";
            P.style.height = "100%";
            P.style.whiteSpace = "pre";
            P.setAttribute("tabindex", "1");
            P.setAttribute("onfocusout", "INVOICEDESIGN.updateTextInLayoutInfo(this)");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'StaticText')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'StaticText')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event);")

            INVOICEDESIGN.AddControlToDOM(P, div);
            INVOICEDESIGN.AddControlToDOM(div, control);

            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Statictext, control.dataset.datatype != undefined ? control.dataset.datatype : DATATYPE.Text, m_iControlIds, 0, objField != undefined ? objField.Text : DraggedColumn != undefined ? DraggedColumn.dataset.columnname : "Static Text", 0, objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0"));

            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("StaticText")) {
                        uid = ui.element[0].dataset.bodyid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
             .draggable({
                 cursor: "Auto",
                 containment: "#id_LayoutDiv_" + iCurrentPage,
                 addClasses: false,
                 start: function (event, ui) {
                     draggedElement = this;
                     INVOICEDESIGN.fromDrag = true;
                     if (!blnMouseDown) {
                         if ($(this).is('.ui-draggable-dragging')) {
                             INVOICEDESIGN.fromDrag = false;
                             return false;
                         }
                     }
                 },
                 stop: function (event, ui) {//set positions in objLayoutInformation
                     var iTop = 0, iLeft = 0;
                     var element = null;
                     try {
                         event.stopImmediatePropagation();
                         if (ui.helper.length > 0) {
                             element = ui.helper[0];
                             if (element.nodeName.toLowerCase() == "div") {
                                 iTop = parseInt(ui.position.top);
                                 iLeft = parseInt(ui.position.left);
                                 INVOICEDESIGN.updateControlPosition(element, iTop, iLeft);
                                 $(ui.helper[0]).one('click', function (e) { e.stopImmediatePropagation(); });
                             }
                         }
                     }
                     catch (err) {
                         COMMON.prototype.showMessage("{StaticText.draggable} " + err.message, "Exception");
                     }
                 }
             });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateEditableBlock}" + err.message, "EXCEPTION");
        }
    },

    CreateFormulaField: function (left, top, control, objField) {
        var div = document.createElement("div");
        var P = document.createElement("p");
        try {
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getFormulaControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getFormulaControlId(m_iControlIds, iCurrentPage);
            // div.id = "FormulaBlock_" + iCurrentPage + "_" + (objField != undefined ? objField.UID : m_iControlIds);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Formula;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : DraggedColumn.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0");
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = (objField != undefined ? objField.UID : m_iControlIds);
            if (objField == undefined) {
                div.style.left = left + "px";
            }
            else {
                if (control.style.left == "") {
                    div.style.left = left + "px";
                }
                else {
                    div.style.left = (left - FConvert.toDecimal(control.style.left)) + "px";
                }
            }

            if (objField == undefined) {
                div.style.top = top + "px";
            }
            else {
                if (control.style.top == "") {
                    div.style.top = top + "px";
                }
                else {
                    div.style.top = (top - FConvert.toDecimal(control.style.top)) + "px";
                }
            }
            if (objField == undefined) {
                div.style.width = 150 + "px";
                div.setAttribute('data-isNew', '1');
            }
            else {
                div.setAttribute('data-isNew', '0');
                if (control.dataset.controltype == CONTROLTYPE.Area) {
                    div.style.width = objField.Width + "px";
                    div.style.height = objField.Height + "px";
                }
                else {
                    div.style.width = 150 + "px";
                }
            }

            div.style.border = "1px solid black";
            div.style.borderRadius = "0.5rem";
            div.style.position = "absolute";
            div.style.backgroundColor = "rgb(193, 245, 146)";
            div.setAttribute("tabindex", "1");
            div.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : 0);

            P.setAttribute("contenteditable", "true");
            P.setAttribute("class", "innercontent_" + (objField != undefined ? objField.UID : m_iControlIds));
            P.style.overflow = "hidden";
            P.style.margin = "0px";
            P.style.width = "100%";
            P.style.height = "100%";
            P.setAttribute("tabindex", "1");

            P.setAttribute("onfocusout", "INVOICEDESIGN.updateTextInLayoutInfo(this)")
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Formula')");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Formula')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            div.setAttribute("onfocus", "INVOICEDESIGN.DisableDrag(this,event);");
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event);")

            INVOICEDESIGN.AddControlToDOM(P, div);
            INVOICEDESIGN.AddControlToDOM(div, control);

            if (objField == undefined) {
                div.setAttribute('data-isNew', '1');
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Formula, DraggedColumn.dataset.datatype, m_iControlIds, 0, "", 0, objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0"));
            }
            else {
                div.setAttribute('data-isNew', '0');
            }
            AddElementToArea = false;

            $(div)
                .resizable({
                    handles: "all",
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                    resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                        //show the resizing width in properties tab instantly , 
                        if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                            if (SelectedField == ui.element[0]) {
                                widthele = document.querySelectorAll("[data-bindingname='Width']");
                                widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);
                                heightele = document.querySelectorAll("[data-bindingname='Height']");
                                heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                            }
                        }
                    },
                    stop: function (event, ui) {
                        //set height in global object objLayoutInformation
                        if (ui.element[0].id.includes("Formula")) {
                            uid = ui.element[0].dataset.bodyid;
                            for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                    break;
                                }
                            }
                        }
                    }
                })
                .draggable({
                    cursor: "auto",
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                    addClasses: false,
                    start: function (event, ui) {
                        draggedElement = this;
                        INVOICEDESIGN.fromDrag = true;
                        if (!blnMouseDown) {
                            if ($(this).is('.ui-draggable-dragging')) {
                                INVOICEDESIGN.fromDrag = false;
                                return false;
                            }
                        }
                    },
                    stop: function (event, ui) {//set positions in objLayoutInformation
                        var iTop = 0, iLeft = 0;
                        var element = null;
                        try {
                            event.stopImmediatePropagation();
                            if (ui.helper.length > 0) {
                                element = ui.helper[0];
                                if (element.nodeName.toLowerCase() == "div") {
                                    iTop = parseInt(ui.position.top);
                                    iLeft = parseInt(ui.position.left);
                                    INVOICEDESIGN.updateControlPosition(element, iTop, iLeft);
                                    $(ui.helper[0]).one('click', function (e) { e.stopImmediatePropagation(); });
                                }
                            }
                        }
                        catch (err) {
                            COMMON.prototype.showMessage("{Formula.draggable} " + err.message, "Exception");
                        }
                    }
                });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateFormulaField}" + err.message.toString(), "Exeception");
        }
    },

    //Internal
    CreateArea: function (left, top, height, width, control, objField) {

        var widthele = null, heightele = null;
        var div = document.createElement("div");
        try {
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getAreaControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getAreaControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Area;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = objField != undefined ? objField.UID : m_iControlIds;
            div.style.left = left + "px";
            div.style.top = top + "px";
            div.style.height = height + "px";
            div.style.width = width + "px";
            div.style.border = "1px solid black";
            div.style.position = "absolute";
            div.setAttribute("draggable", "true");
            div.className = "Resize";
            div.setAttribute("tabindex", "0");
            div.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : 0);
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Area')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Area')");
            div.setAttribute("ondrop", "INVOICEDESIGN.dropElementInAreaControl(this,event,'Area')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            INVOICEDESIGN.AddControlToDOM(div, control);
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;

            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Area, DATATYPE.Text, m_iControlIds);
            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("Area")) {
                        uid = ui.element[0].dataset.bodyid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
            .draggable({
                handle: this, containment: "#id_LayoutDiv_" + iCurrentPage,
                start: function (event, ui) {
                    draggedElement = this;
                    INVOICEDESIGN.fromDrag = true;
                }
            });

            $(div).droppable();
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateArea}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateTable: function (left, top, height, width, control, objField) {
        var div = document.createElement("div");
        var table = null, tr = null, td = null, widthele = null, heightele = null;
        var iTotalRows = 0, iTotalCols = 0;
        var iRow = 0, iCol = 0, iLen = 0, iLenCommas = 0;
        var chrText = [];
        var iVal = -1;
        try {
            div.dataset.controltype = objField != undefined ? objField.Type : CONTROLTYPE.Table;
            div.dataset.datatype = "10";
            div.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            div.dataset.pageno = iCurrentPage;
            div.style.left = left + "px";
            div.style.top = top + "px";
            div.style.height = height + "px";
            div.style.width = width + "px";
            div.style.border = "1px solid black";
            div.style.position = "absolute";
            div.draggable = true;
            div.className = "Resize";
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'')");
            div.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : 0);
            if (objField == undefined) {
                iTotalRows = 2;
                iTotalCols = 2;
            }
            else {
                iTotalRows = (objField.TableProperties.TotalRow == "" ? "2" : objField.TableProperties.TotalRow);
                iTotalCols = (objField.TableProperties.TotalColumn == "" ? "2" : objField.TableProperties.TotalColumn);
            }
            table = document.createElement("table");
            m_iControlIds++;
            table.id = objField != undefined ? INVOICEDESIGN.getTableControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getTableControlId(m_iControlIds, iCurrentPage);
            table.border = 1;
            table.style.width = "100%";
            table.style.height = "100%";
            table.style.tableLayout = "fixed";
            table.className = "myIVtable"
            table.setAttribute("data-controltype", objField != undefined ? objField.Type : CONTROLTYPE.Table)
            table.dataset.datatype = "10";
            table.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            table.dataset.pageno = iCurrentPage;
            //Text code
            if (objField != undefined) {
                if (objField.Alignment == 0) {//left to right alignment.
                    chrText = objField.Text.split(',');
                    if (chrText.length <= 1) {
                        chrText = objField.Text.split('');
                    }
                    iLen = chrText.length;
                }
                else {//right to left alignment.
                    var eleReverse = null, chrContainsComma = null;
                    chrContainsComma = objField.Text.split(',');
                    if (chrContainsComma.length <= 1) {
                        eleReverse = INVOICEDESIGN.reverseString(objField.Text, '');
                        if (chrText.length <= 1) {
                            chrText = eleReverse.split('');
                        }
                    }
                    else {
                        eleReverse = INVOICEDESIGN.reverseString(chrContainsComma, ',');
                        eleReverse.substring(0, [eleReverse.length - 1]);
                        chrText = eleReverse.split(',');
                    }
                    iLen = chrText.length;
                }
            }

            if (iLen > 0) {
                for (iRow = 0; iRow < iTotalRows; iRow++) {
                    tr = document.createElement("tr");
                    tr.style.height = "auto";
                    for (iCol = 0; iCol < iTotalCols; iCol++) {
                        td = document.createElement("td");
                        td.setAttribute("onkeydown", "INVOICEDESIGN.ctrlOnkeydown(this.parentElement.parentElement.parentElement,event,this)");
                        td.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this.parentElement.parentElement.parentElement,event,this)");
                        td.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this.parentElement.parentElement.parentElement,event,'Table',this)");
                        td.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");
                        td.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this.parentElement.parentElement.parentElement, event,'Table')");
                        iVal = iVal + 1;
                        if (iVal < iLen) {
                            td.textContent = chrText[iVal];
                        }
                        td.vAlign = "top";
                        td.align = "center";

                        if (objField.TableProperties != null) {
                            if (objField.TableProperties.IsEditable == true) {
                                td.contentEditable = 'true';
                            }
                            else {
                                td.contentEditable = 'false';
                            }
                        }
                        else { td.contentEditable = 'false'; }
                        tr.appendChild(td);
                    }
                    table.appendChild(tr);
                }
                //Setting text reverse order.
                iVal = -1;
                if (objField.Alignment == 1) {
                    for (iRow = 0; iRow < iTotalRows; iRow++) {
                        for (iCol = iTotalCols - 1; iCol >= 0; iCol--) {
                            iVal = iVal + 1;
                            if (iVal >= iLen) {
                                table.children[iRow].children[iCol].textContent = "";
                            }
                            else {
                                table.children[iRow].children[iCol].textContent = chrText[iVal];
                            }
                        }
                    }
                }
            }
            else {
                for (iRow = 0; iRow < iTotalRows; iRow++) {
                    tr = document.createElement("tr");
                    tr.style.height = "auto";//iHeight + "px";
                    for (iCol = 0; iCol < iTotalCols; iCol++) {
                        td = document.createElement("td");
                        td.setAttribute("onkeydown", "INVOICEDESIGN.ctrlOnkeydown(this.parentElement.parentElement.parentElement,event,this)");
                        td.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this.parentElement.parentElement.parentElement,event,this)");
                        td.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this.parentElement.parentElement.parentElement,event,'Table',this)");
                        td.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");
                        td.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this.parentElement.parentElement.parentElement, event,'Table')");
                        td.contentEditable = 'false';
                        tr.appendChild(td);
                    }
                    table.appendChild(tr);
                }
            }
            table.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");

            div.appendChild(table);
            INVOICEDESIGN.AddControlToDOM(div, control);
            //INVOICEDESIGN.removeEventForLayout("onmousedown");
            //INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;

            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.Table, DATATYPE.Text, m_iControlIds);
            $(div)
                .resizable({
                    handles: "all",
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                    resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                        //show the resizing width in properties tab instantly , 
                        if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                            if (SelectedField == ui.element[0]) {
                                widthele = document.querySelectorAll("[data-bindingname='Width']");
                                widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                                heightele = document.querySelectorAll("[data-bindingname='Height']");
                                heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                            }
                        }
                    },
                    stop: function (event, ui) {
                        //set height in global object objLayoutInformation
                        uid = ui.element[0].children[0].id.split("_")[2];
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody == null)
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody = [];
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                })
                .draggable(
                {
                    cursor: "auto",
                    handle: this,
                    containment: "#id_LayoutDiv_" + iCurrentPage,
                });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateTable}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateBodyGrid: function (left, top, height, width, control, objField) {

        var div = document.createElement("div");
        try {
            div.id = objField != undefined ? INVOICEDESIGN.getMainGridControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getMainGridControlId(m_iBodyIds, iCurrentPage);
            div.dataset.controltype = CONTROLTYPE.BodyCanvas;
            div.dataset.datatype = objField != undefined ? objField.StaticTextProperties.DataType : control.dataset.datatype;
            div.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            div.dataset.pageno = iCurrentPage;
            div.dataset.uid = objField != undefined ? objField.UID : m_iBodyIds;
            div.style.left = left + "px";
            div.style.top = top + "px";
            div.style.height = (height) + "px";
            div.style.width = (width) + "px";
            div.style.border = "1px solid #716f6f";
            div.style.backgroundColor = "lightgray";
            div.style.position = "absolute";
            div.setAttribute("draggable", "true");
            div.setAttribute("tabindex", "0");
            div.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : 0);
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'BodyGrid')");
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'BodyGrid')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            //Headergrid div element.
            var BodyColumndiv = document.createElement("div");
            BodyColumndiv.style.width = "100%";
            var table = document.createElement("table");
            table.style.tableLayout = "fixed";
            table.style.border = "0px";
            table.style.width = "100px";
            table.id = objField != undefined ? INVOICEDESIGN.getMainGridTableControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getMainGridTableControlId(m_iBodyIds, iCurrentPage);
            var thead = document.createElement("thead");

            table.appendChild(thead);
            BodyColumndiv.appendChild(table);
            BodyColumndiv.id = objField != undefined ? INVOICEDESIGN.getColumnGridControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getColumnGridControlId(m_iBodyIds, iCurrentPage);
            BodyColumndiv.dataset.controltype = CONTROLTYPE.BodyColumn;
            BodyColumndiv.dataset.pageno = iCurrentPage;
            BodyColumndiv.style.height = 50 + "px";
            BodyColumndiv.style.overflowX = "auto";
            BodyColumndiv.style.overflowY = "hidden";
            BodyColumndiv.style.backgroundColor = "#cceaf5";
            BodyColumndiv.style.borderBottom = "1px solid #716f6f";
            BodyColumndiv.setAttribute("ondragover", "INVOICEDESIGN.allowDropControl(event)");

            div.appendChild(BodyColumndiv);

            //Bodygrid div element.
            var Bodydiv = document.createElement("div");
            Bodydiv.id = objField != undefined ? INVOICEDESIGN.getBodyGridControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getBodyGridControlId(m_iBodyIds, iCurrentPage);
            Bodydiv.dataset.controltype = CONTROLTYPE.BodyCanvas;

            Bodydiv.style.overflow = "auto";
            Bodydiv.className = "BodyGrid";
            Bodydiv.style.borderTop = "1px solid lightgray";
            Bodydiv.style.backgroundColor = "lightgray";
            Bodydiv.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'BodyGrid')");
            Bodydiv.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'BodyGrid')");
            div.appendChild(Bodydiv);

            INVOICEDESIGN.AddControlToDOM(div, control);
            INVOICEDESIGN.removeEventForLayout("onmousedown");
            INVOICEDESIGN.removeEventForLayout("onmouseup");
            AddElementToArea = false;
            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.BodyCanvas, DATATYPE.Text, m_iBodyIds);
            m_iBodyIds = m_iBodyIds - 1;
            var uid = null;
            var widthele = null;
            var heightele = null;
            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);
                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("MainGrid")) {
                        uid = ui.element[0].dataset.uid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody == null)
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody = [];
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                if (ui.element[0].parentElement.id.includes("id_LayoutDiv_" + iCurrentPage)) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                }
                                break;
                            }
                        }
                    }
                }
            });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateBody}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    CreateApprovalHistory: function (left, top, control, objField) {

        var div = document.createElement("div");
        var eleP = document.createElement("p");
        try {
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getApprovalHistoryControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getApprovalHistoryControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = CONTROLTYPE.ApprovalHistory;
            div.dataset.datatype = DATATYPE.Text;
            div.dataset.masterid = 0;
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = objField != undefined ? objField.UID : m_iControlIds;
            div.style.left = left + "px";
            div.style.top = top + "px";

            div.style.border = "1px solid black";
            div.style.position = "absolute";
            div.setAttribute("tabindex", "0");
            div.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : 0);

            div.style.borderRadius = "0.5rem";
            div.style.textAlign = "center";
            div.style.width = "100px";
            div.style.height = "50px";

            eleP.style.height = "inherit";
            eleP.style.margin = "0px";
            eleP.setAttribute("class", "innercontent");

            div.style.border = "1px solid black";
            div.style.overflow = "hidden"
            div.style.textOverflow = "ellipsis";
            div.draggable = true;
            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Approval History')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Approval History')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            INVOICEDESIGN.AddControlToDOM(eleP, div);
            INVOICEDESIGN.AddControlToDOM(div, control);
            div.setAttribute('data-isNew', '1');
            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.ApprovalHistory, DATATYPE.Text, m_iControlIds, 0, "Approval History");

            AddElementToArea = false;

            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("ApprovalHistory")) {
                        uid = ui.element[0].dataset.bodyid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
            $(div).draggable({
                handle: "p.innercontent",
                cursor: "auto",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                start: function (event, ui) {
                    draggedElement = this;
                    INVOICEDESIGN.fromDrag = true;
                    if (!blnMouseDown) {
                        if ($(this).is('.ui-draggable-dragging')) {
                            INVOICEDESIGN.fromDrag = false;
                            return false;
                        }
                    }
                },
                stop: function (event, ui) {//set positions in objLayoutInformation
                    var iTop = 0, iLeft = 0;
                    var element = null;
                    try {
                        event.stopImmediatePropagation();
                        if (ui.helper.length > 0) {
                            element = ui.helper[0];
                            if (element.nodeName.toLowerCase() == "div") {
                                iTop = parseInt(ui.position.top);
                                iLeft = parseInt(ui.position.left);
                                INVOICEDESIGN.updateControlPosition(element, iTop, iLeft);
                            }
                            $(ui.helper[0]).one('click', function (e) { e.stopImmediatePropagation(); });
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage("{ApprovalHistory.draggabale} " + err.message, "Exception");
                    }
                }
            });
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreateApprovalHistory}" + err.message, "EXCEPTION");
        }
    },

    CreatePostingDetails: function (left, top, control, objField) {
        var div = document.createElement("div");
        var eleP = document.createElement("p");
        try {
            m_iControlIds++;
            div.id = objField != undefined ? INVOICEDESIGN.getPostingDetailsControlId(objField.UID, iCurrentPage) : INVOICEDESIGN.getPostingDetailsControlId(m_iControlIds, iCurrentPage);
            div.dataset.controltype = CONTROLTYPE.PostingDetails;
            div.dataset.datatype = DATATYPE.Text;
            div.dataset.masterid = 0;
            div.dataset.pageno = iCurrentPage;
            div.dataset.bodyid = objField != undefined ? objField.UID : m_iControlIds;
            div.style.left = left + "px";
            div.style.top = top + "px";

            div.style.border = "1px solid black";
            div.style.position = "absolute";
            div.setAttribute("tabindex", "0");
            div.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : 0);

            div.style.borderRadius = "0.5rem";
            div.style.textAlign = "center";
            div.style.width = "100px";
            div.style.height = "50px";

            div.style.border = "1px solid black";
            div.style.overflow = "hidden"
            div.style.textOverflow = "ellipsis";
            div.draggable = true;

            eleP.style.height = "inherit";
            eleP.style.margin = "0px";
            eleP.setAttribute("class", "innercontent");

            div.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this, event,'Posting Details')");
            div.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event,'Posting Details')");
            div.setAttribute("onkeydown", "INVOICEDESIGN.getKeyAndMove(this,event);");
            div.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this,event)");
            INVOICEDESIGN.AddControlToDOM(eleP, div);
            INVOICEDESIGN.AddControlToDOM(div, control);
            div.setAttribute('data-isNew', '1');
            if (objField == undefined)
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.PostingDetails, DATATYPE.Text, m_iControlIds, 0, "Posting Details");

            AddElementToArea = false;

            $(div).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("PostingDetails")) {
                        uid = ui.element[0].dataset.bodyid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
            $(div).draggable({
                handle: "p.innercontent",
                cursor: "auto",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                start: function (event, ui) {
                    draggedElement = this;
                    INVOICEDESIGN.fromDrag = true;
                    if (!blnMouseDown) {
                        if ($(this).is('.ui-draggable-dragging')) {
                            INVOICEDESIGN.fromDrag = false;
                            return false;
                        }
                    }
                },
                stop: function (event, ui) {//set positions in objLayoutInformation
                    var iTop = 0, iLeft = 0;
                    var element = null;
                    try {
                        event.stopImmediatePropagation();
                        if (ui.helper.length > 0) {
                            element = ui.helper[0];
                            if (element.nodeName.toLowerCase() == "div") {
                                iTop = parseInt(ui.position.top);
                                iLeft = parseInt(ui.position.left);
                                INVOICEDESIGN.updateControlPosition(element, iTop, iLeft);
                            }
                            $(ui.helper[0]).one('click', function (e) { e.stopImmediatePropagation(); });
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage("{PostingDetails.draggabale} " + err.message, "Exception");
                    }
                }
            });

            $(div, eleP).disableSelection();
            return div;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.CreatePostingDetails}" + err.message, "EXCEPTION");
        }
    },

    /////////////

    InitializeResizeAndDrag: function (ele) {
        try {
            $(ele).resizable({
                handles: "all",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly , 
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='Width']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);

                            heightele = document.querySelectorAll("[data-bindingname='Height']");
                            heightele[0].value = ui.element[0].style.height.substr(0, ui.element[0].style.height.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    //set height in global object objLayoutInformation
                    if (ui.element[0].id.includes("StaticText")) {
                        uid = ui.element[0].dataset.bodyid;
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == uid) {
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Height = parseInt(ui.element[0].style.height.substring(0, ui.element[0].style.height.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Width = parseInt(ui.element[0].style.width.substring(0, ui.element[0].style.width.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = parseInt(ui.element[0].style.top.substring(0, ui.element[0].style.top.length - 2));
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = parseInt(ui.element[0].style.left.substring(0, ui.element[0].style.left.length - 2));
                                break;
                            }
                        }
                    }
                }
            })
            .draggable({
                cursor: "auto",
                containment: "#id_LayoutDiv_" + iCurrentPage,
                addClasses: false,
                start: function (event, ui) {
                    draggedElement = this;
                    INVOICEDESIGN.fromDrag = true;
                    if (!blnMouseDown) {
                        if ($(this).is('.ui-draggable-dragging')) {
                            INVOICEDESIGN.fromDrag = false;
                            return false;
                        }
                    }
                },
                stop: function (event, ui) {//set positions in objLayoutInformation
                    var iTop = 0, iLeft = 0;
                    var element = null;
                    try {
                        event.stopImmediatePropagation();
                        if (ui.helper.length > 0) {
                            element = ui.helper[0];
                            if (element.nodeName.toLowerCase() == "div") {
                                iTop = parseInt(ui.position.top);
                                iLeft = parseInt(ui.position.left);
                                INVOICEDESIGN.updateControlPosition(element, iTop, iLeft);
                                $(ui.helper[0]).one('click', function (e) { e.stopImmediatePropagation(); });
                            }
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage("{StaticText.draggable} " + err.message, "Exception");
                    }
                }
            });
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.InitializeResizeAndDrag}" + err.message, "EXCEPTION");
        }
    },

    DisableDrag: function (ele) {
        if ($(ele).data("ui-draggable"))
            $(ele).draggable('disable');
        $(ele).css("cursor", "text");
        $(ele).attr("title", "Edit");
    },

    EnableDrag: function (ele) {
        if ($(ele).data("ui-draggable")) {
            $(ele).draggable('enable');
        }
        $(ele).css("cursor", "auto");
        $(ele).attr("title", "Drag");
    },

    StaticText_onFocusOut: function (ele, event) {
        //call EnableDrag() 
        INVOICEDESIGN.EnableDrag(ele);

        //call on text change event
        //INVOICEDESIGN.updateTextInLayoutInfo(event);
    },

    updateTextInLayoutInfo: function (ele) {
        var UpdatedValue = "";
        try {
            var htmlstr = $(ele).html().replace(/<div>/gi, '\n').replace(/<\/div>/gi, '');
            htmlstr = htmlstr.replace(/<br>/g, '\n');
            htmlstr = htmlstr.replace(/&amp;/g, '\&'); // to escape special character '&' 
            UpdatedValue = htmlstr;
            var iPageNo = ele.parentElement.getAttribute('data-pageno');
            var iPageHeaderCount = objLayoutInformation.Pages[iPageNo].PageHeader.length;
            var fields = ele.parentElement.id.split('_');
            for (var iCount = 0; iCount < iPageHeaderCount; iCount++) {
                if (objLayoutInformation.Pages[iPageNo].PageHeader[iCount].UID == fields[2]) {
                    objLayoutInformation.Pages[iPageNo].PageHeader[iCount].Text = UpdatedValue;
                    break;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.updateTextInLayoutInfo}" + err.message, "EXCEPTION");
        }
    },

    /////////////////////

    textWidth: function (ele) {
        var html_org = $(ele).html();
        var html_calc = '<span>' + html_org + '</span>';
        $(ele).html(html_calc);
        var width = $(ele).find('span:first').width();
        $(ele).html(html_org);
        return width;
    },

    //Internal - Creating header column in bodygrid control.
    CreateBodyColumn: function (control, objField) {
        var colindex = 0;
        var tdEle = document.createElement("th");
        try {
            iCurrentBodyGrid = control.parentNode.parentNode.id.length > 0 ? control.parentNode.parentNode.id.split("_")[control.parentNode.parentNode.id.split("_").length - 1] : control.id.split("_")[control.id.split("_").length - 1];
            if (control.nodeName.toLowerCase() == "thead" && control.children.length > 0) {
                //control.children is "tr" whose childrens are tds
                colindex = control.children[0].children.length;
                tdEle.id = "BodyColumn_" + iCurrentBodyGrid + "_" + colindex;
            }
            else {
                colindex = control.children.length;
                tdEle.id = "BodyColumn_" + iCurrentBodyGrid + "_" + colindex;
            }
            tdEle.dataset.controltype = CONTROLTYPE.BodyColumn;
            tdEle.dataset.datatype = objField != undefined ? objField.DataType : DraggedColumn.dataset.datatype;
            tdEle.dataset.masterid = objField != undefined ? objField.MasterId : 0;
            tdEle.dataset.bodyid = iCurrentBodyGrid;
            tdEle.dataset.pageno = iCurrentPage;
            if (objField != null || objField != undefined) {
                if (objField.ColumnWidth != null || objField.ColumnWidth != "") {
                    tdEle.style.width = parseInt(objField.ColumnWidth) + "px";
                }
                else {
                    tdEle.style.width = (parseInt(tdEle.dataset.datatype) == DATATYPE.Fraction ? 120 : 60) + "px";
                }
            }
            else {
                tdEle.style.width = (parseInt(tdEle.dataset.datatype) == DATATYPE.Fraction ? 120 : 60) + "px";
            }
            tdEle.style.height = 50 + "px";
            var sname = "";
            var sChild = "", sMaster = "";
            if (objField != undefined) {
                sChild = objField.Alias;
                sMaster = objField.Group;
                sname = objField.Alias;
            }
            else {
                sChild = DraggedColumn.dataset.columnname;
                if (DraggedColumn.dataset.masterid > 0) {
                    sMaster = DraggedColumn.dataset.groupname;
                }
            }
            sname = INVOICEDESIGN.getsName(sChild, sMaster);
            tdEle.textContent = sname;
            tdEle.setAttribute("title", sname);
            tdEle.style.textOverflow = "ellipsis";
            tdEle.style.whiteSpace = "nowrap";
            tdEle.style.overflow = "hidden";
            tdEle.style.border = "1px solid white";
            tdEle.style.fontWeight = "600";
            tdEle.style.position = "relative";
            tdEle.style.backgroundClip = "padding-box";
            tdEle.setAttribute("class", "theme_background-color-reverse theme_color-reverse ");
            tdEle.setAttribute("data-parenttagname", "TD");
            tdEle.setAttribute("data-colname", objField != undefined ? objField.Column : sname);
            tdEle.setAttribute("data-colindex", colindex);
            tdEle.setAttribute("data-fieldid", objField != undefined ? objField.FieldId : parseInt(DraggedColumn.dataset.fieldid));
            tdEle.setAttribute("data-formula", objField != undefined ? objField.Formula : "");

            tdEle.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this,event, 'HeaderColumn')");

            tdEle.setAttribute("onclick", "INVOICEDESIGN.SelectField(this,event, 'HeaderColumn')");
            tdEle.setAttribute("draggable", "true");
            tdEle.setAttribute("ondragstart", "INVOICEDESIGN.onDragStart(event)");
            tdEle.setAttribute("ondragover", "INVOICEDESIGN.onAllowDrop(event)");
            tdEle.setAttribute("ondrop", "INVOICEDESIGN.onDrop(this,event)");

            if (control.nodeName.toLowerCase() == "thead") {
                if (control.children.length == 0) { //means there are no tr ele in thead
                    var trEle = document.createElement("tr");
                    trEle.setAttribute("id", "BodyRow_" + iCurrentBodyGrid + "_" + colindex);
                    INVOICEDESIGN.AddControlToDOM(trEle, control);
                }
                else {
                    trEle = control.children[0];
                }
            }
            if (control.nodeName.toLowerCase() == "tr") {
                trEle = control;
            }
            INVOICEDESIGN.AddControlToDOM(tdEle, trEle);
            if (objField == undefined || objField == null) {
                INVOICEDESIGN.AddFieldToLayoutObject(CONTROLTYPE.BodyCanvas, DraggedColumn.dataset.datatype, parseInt(DraggedColumn.dataset.fieldid), iCurrentBodyGrid, sname, colindex, objField != undefined ? objField.MasterId : (control.dataset.bodyid > 0 ? control.dataset.bodyid : "0"));
            }
            else { // set ColumnIndex property
                objField.ColumnIndex = colindex;
            }
            AddElementToArea = false;

            $(tdEle).resizable({
                grid: [1, 10000],
                handles: "e",
                resize: function (event, ui) { // This event is triggered when the handler of resizable element is dragged.
                    //show the resizing width in properties tab instantly ,  
                    if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                        if (SelectedField == ui.element[0]) {
                            widthele = document.querySelectorAll("[data-bindingname='ColumnWidth']");
                            widthele[0].value = ui.element[0].style.width.substr(0, ui.element[0].style.width.length - 2);
                        }
                    }
                },
                stop: function (event, ui) {
                    var iWidth = 0;
                    try {
                        event.stopImmediatePropagation();
                        if (ui.element.length > 0) {
                            if (ui.element[0].nodeName.toLowerCase() == "th") {
                                iWidth = parseInt(DataType.stringLeft(ui.element[0].style.width, ui.element[0].style.width.length - 2)); // -2 for remove px
                                INVOICEDESIGN.updateBodyColumnWidth(ui.element[0], iWidth);
                            }
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage("{INVOICEDESIGN.resizeGrideColumn} " + err.message, "Exception");
                    }
                }
            });
            return tdEle;
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.CreateBodyColumn" + err.message.toString(), "Exception");
        }
    },

    ////////////////////////////////////////////////////////

    //To get parent name + column name
    getsName: function (sValue, sMasterName) {
        try {
            if (sValue == sMasterName || sMasterName == "") {
                return (sValue);
            }
            if (sMasterName != null && sMasterName != "Header" && sMasterName != "Body" && sMasterName != "Transaction" && sMasterName != "Transaction Fields"
                && sMasterName != "Extra Fields" && sMasterName.includes("fields") == false && sMasterName.includes("details") == false && sMasterName != "Date"
                && sMasterName != "Time" && sMasterName != "Miscellaneous") {
                sValue = sMasterName.substr(0, 2) + "." + sValue;
            }
            return (sValue);
        }
        catch (err) {
            COMMON.prototype.showMessage("{REPORTCUSTOMIZE.getsName} " + err.message, "EXCEPTION");
        }
    },

    updateControlPosition: function (control, top, left) {
        var uid = null;
        try {
            if (control != null) {
                uid = control.id.split('_');
                uid = uid[uid.length - 1];
            }
            for (var iCounter = 0; iCounter < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCounter++) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCounter].UID == parseInt(uid)) {
                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCounter].Top = top;
                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCounter].Left = left
                    break;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.updateControlPosition" + err.message, "EXCEPTION");
        }
    },

    updateBodyColumnWidth: function (element, iWidth) {
        var uid = null;
        try {
            //take out uid from element and with uid take out element from pageheader array and update the value of Width in it
            if (element.nodeName.toLowerCase() == "td" || element.nodeName.toLowerCase() == "th") {
                uid = element.offsetParent.id.split('_');
                uid = uid[uid.length - 1];
            }
            for (var iCounter = 0; iCounter < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCounter++) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCounter].UID == parseInt(uid)) {
                    $.grep(objLayoutInformation.Pages[iCurrentPage].PageHeader[iCounter].PageBody, function (x) {
                        if (x.FieldId == element.getAttribute("data-fieldid") &&
                            (x.Column == element.getAttribute("data-colname") || x.Alias == element.getAttribute("data-colname")) &&
                            x.ColumnIndex == element.getAttribute("data-colindex")) { // compare with 3 unique properties
                            x.ColumnWidth = iWidth;
                        }
                    });
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.updateBodyColumnWidth}" + err.message, "EXCEPTION");
        }
    },

    ////// Copy , Cut - Paste Functionality
    PasteControl: function (copyEle, targetEle) {
        var cloned_ct = null, cloned_obj = null;
        var cloned_height = 0, cloned_width = 0, cloned_uid = 0;
        try {
            if (copyEle) {
                cloned_ct = parseInt(copyEle.getAttribute("data-controltype"));
                cloned_height = copyEle.style.height.substr(0, copyEle.style.height.length - 2);
                cloned_width = copyEle.style.width.substr(0, copyEle.style.width.length - 2);
                cloned_uid = copyEle.getAttribute("data-bodyid");
                m_iControlIds++;
                cloned_obj = $.grep(objLayoutInformation.Pages[iCurrentPage].PageHeader, function (x) {
                    return x.UID == parseInt(cloned_uid);
                })[0];
                // to deep copy by value , not by reference
                cloned_obj = $.extend(true, {}, cloned_obj);

                copyEle.id = copyEle.id.replace(cloned_uid, m_iControlIds);
                copyEle.setAttribute("data-bodyid", m_iControlIds);

                //then add to dom
                INVOICEDESIGN.AddControlToDOM(copyEle, targetEle);
                //add dragger and resizer 
                INVOICEDESIGN.InitializeResizeAndDrag(copyEle);
                //change object properties
                cloned_obj.UID = m_iControlIds;
                cloned_obj.Top = copyEle.style.top.substr(0, copyEle.style.top.length - 2);
                cloned_obj.Left = copyEle.style.left.substr(0, copyEle.style.left.length - 2);
                //add the entry of cloned object in global array 
                //push the cloned obj in pageheader
                objLayoutInformation.Pages[iCurrentPage].PageHeader.push(cloned_obj);
                //reset clonedEle
                clonedEle = null;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.PasteControl}" + err.message, "EXCEPTION");
        }
    },

    RemoveDragGhost: function (ele, event) {
        var crt = ele.cloneNode(true);
        crt.style.opacity = "0"; /* or visibility: hidden, or any of the above */
        crt.style.visibility = "hidden";
        document.body.appendChild(crt);
        event.dataTransfer.setDragImage(crt, 0, 0);
    },

    AddColumnToLayout: function (ele, evt) {
        DraggedColumn = ele;
        evt.dataTransfer.setData("text", evt.currentTarget.id);
    },

    ImageUpload: function (inputele, imageEleId) {
        try {
            if (inputele.files && inputele.files[0]) {
                var fileType = inputele.files[0].type;
                if (fileType == "image/png" || fileType == "image/gif" || fileType == "image/jpg" || fileType == "image/jpeg" || fileType == "image/bmp") {
                    if (inputele.files[0].size < 100000) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $(SelectedField.children[0]).attr('src', e.target.result);
                            INVOICEDESIGN.UpdateArrPageHeaderforImage(SelectedField.children[0].id);
                        }
                        reader.readAsDataURL(inputele.files[0]);
                        $(inputele).css("color", "#000");
                        $(SelectedField.children[0]).attr('src', reader.result);
                        INVOICEDESIGN.UpdateArrPageHeaderforImage(SelectedField.children[0].id);
                    }
                    else {
                        $(inputele).css("color", "red");
                        COMMON.prototype.showMessage(document.getElementById("msgFilesizeExceed").value, "Error");
                    }
                    inputele.value = "";
                    console.log("image upload ends...")
                }
                else {
                    $(inputele).css("color", "red");
                    COMMON.prototype.showMessage(document.getElementById("msgInvalidFileType").value, "Error");
                }
                return true;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ImageUpload}" + err.message.toString(), "Exception");
        }
    },

    TriggerImageUpload: function (ele, id) {
        try {
            if (ele.getAttribute('src') == '#') {
                $('#' + id).trigger('click');
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.TriggerImageUpload}" + err.message.toString(), "Exception");
        }
    },

    ShowScreen: function (id) {
        var id_InvoiceDesignPage = document.getElementById(id);
        if (id_InvoiceDesignPage != null) {
            id_InvoiceDesignPage.style.display = "block";
        }
    },

    HideScreen: function (id) {
        var id_InvoiceDesignPage = document.getElementById(id);
        if (id_InvoiceDesignPage != null) {
            id_InvoiceDesignPage.style.display = "none";
        }
    },

    CloseInvoiceDesign_Internal: function (element, event) {
        try {
            callBack = fromExitElement.dataset.callback;
            if (callBack != undefined && callBack != "") {
                if (typeof (callBack) === "string")
                    eval(callBack)(event);
                else
                    callBack;
            }
            else {
                GLOBAL.gotoHomePage();
            }
            //clear invoice designer page
            var ishomepageprint = INVOICEDESIGN.isHomePagePrint();
            var invoicedesignpage = null;
            if (ishomepageprint == true) {
                invoicedesignpage = document.getElementById("id_InvoiceDesignPage");
            }
            else {
                invoicedesignpage = document.getElementById("id_InvoiceDesignPageMain");
            }

            $(invoicedesignpage).html('');//empty its content
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.CloseInvoiceDesign_Internal" + err.message.toString(), "Exception");
        }
    },

    CloseInvoiceDesign: function (element, event) {
        try {

            var iClose = 0;
            var callBack = null;
            fromExit = true;
            fromExitElement = element;
            if (bModified == true) {
                INVOICEDESIGN.SaveValidation(false, true, element, false, false, event);
            }
            else {
                INVOICEDESIGN.CloseInvoiceDesign_Internal(element, event);
                if (FCommon.UI.isValidObject(document.getElementById('navbarSupportedContent2'))) {
                    document.getElementById('navbarSupportedContent2').style.pointerEvents = 'auto';
                    document.getElementById("navbarSupportedContent2").style.opacity = "1";
                    $("#navbarSupportedContent2").children("ul").children("li").children("span").css("opacity", "1");
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.CloseInvoiceDesign" + err.message.toString(), "Exception");
        }
    },


    getFormulaControlId: function (Count, iPageNo) {
        return "FormulaBlock_" + iPageNo + "_" + Count;
    },
    getStaticTextControlId: function (Count, iPageNo) {
        return "StaticText_" + iPageNo + "_" + Count;
    },

    getRectangleControlId: function (Count, iPageNo) {
        return "Rectangle_" + iPageNo + "_" + Count;
    },

    getLineControlId: function (Count, iPageNo) {
        return "Line_" + iPageNo + "_" + Count;
    },

    getEllipseControlId: function (Count, iPageNo) {
        return "Ellipse_" + iPageNo + "_" + Count;
    },

    getBitMapControlId: function (Count, iPageNo) {
        return "BitMap_" + iPageNo + "_" + Count;
    },

    getAreaControlId: function (count, iPageNo) {
        return "Area_" + iPageNo + "_" + count;
    },

    getApprovalHistoryControlId: function (count, iPageNo) {
        return "ApprovalHistory_" + iPageNo + "_" + count;
    },

    getPostingDetailsControlId: function (count, iPageNo) {
        return "PostingDetails_" + iPageNo + "_" + count;
    },
    getTableControlId: function (count, iPageNo) {
        return "Table_" + iPageNo + "_" + count;
    },

    getMainGridTableControlId: function (Count, iPageNo) {
        return "TableGrid_" + iPageNo + "_" + Count;
    },
    getMainGridControlId: function (Count, iPageNo) {
        return "MainGrid_" + iPageNo + "_" + Count;
    },

    getBodyGridControlId: function (Count, iPageNo) {
        return "BodyGrid_" + iPageNo + "_" + Count;
    },

    getColumnGridControlId: function (Count, iPageNo) {
        return "ColumnGrid_" + iPageNo + "_" + Count;
    },

    getTextBlockControlId: function (Count, iPageNo) {
        return "InputBlock_" + iPageNo + "_" + Count;
    },

    CentiMeterToPixel: function (value) {
        if (!isNaN(parseInt(value))) {
            return parseFloat(value) * 37.795276;
        }
        return 0;
    },

    PixelToCentiMeter: function (value) {
        if (!isNaN(parseInt(value))) {
            return parseFloat(value) * 0.02645833;
        }
        return 0;
    },

    InchesToPixels: function (value) {
        if (!isNaN(parseInt(value))) {
            return parseFloat(value) * 96;
        }
        return 0;
    },

    getUnit: function (value) {
        var unit = "in";
        switch (parseInt(value)) {
            case Unit.Centimeter:
                unit = "cm";
                break;
            case Unit.Inch:
                unit = "in";
                break;
        }
        return unit;
    },

    PageUnit: function (PageUnit) {
        return PageUnit == Unit.Inch ? DPI_SIZE : (DPI_SIZE / 2.54);
    },

    getLeftPosOfControl: function () {

    },

    getTopPosOfControl: function () {

    },

    getOffsetRect: function (elem) {
        // (1)
        var box = elem.getBoundingClientRect()

        var body = document.body
        var docElem = document.documentElement

        // (2)
        var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop
        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft

        // (3)
        var clientTop = docElem.clientTop || body.clientTop || 0
        var clientLeft = docElem.clientLeft || body.clientLeft || 0

        // (4)
        var top = box.top + scrollTop - clientTop
        var left = box.left + scrollLeft - clientLeft

        return { top: Math.round(top), left: Math.round(left) }
    },

    getPopupElement: function () {
        var elePopup = null;

        elePopup = document.getElementById("id_transaction_voucherprint");

        return (elePopup);
    },
    ToggleTreeNew: function (element, e) {
        e.preventDefault();
        //if (element.className == "icon-expand icon-font7 pull-right")
        if ($(element).hasClass("icon-new"))
            element.className = "ConfigureIcon icon-minus";
        else
            element.className = "ConfigureIcon icon-new";
        $(element.nextElementSibling).slideToggle("slow");
    },
    toggleNodeState: function (ele, event) {

        try {
            if (event != null) {
                event.stopImmediatePropagation();
            }

            jqResult = $(ele.parentElement.parentElement).children("ul");
            if (jqResult.length > 0) { // has children
                for (iCounter = 0; iCounter < jqResult.length; iCounter++) {
                    if (jqResult[iCounter].style.display != "block") {
                        jqResult[iCounter].style.display = "block";

                    }
                    else {
                        jqResult[iCounter].style.display = "none";
                    }
                }
                //$(ele).toggleClass('icon-add139, icon-minus65');
                $(ele).toggleClass('icon-new icon-collapse');
            }
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.toggleNodeState} " + err.message);
        }
    },


    ToggleTree: function (ele) {
        ele.parentNode.className = ele.parentNode.className.indexOf("active") > -1 ? "treeview" : "treeview active";
        ele.children[0].children[0].className = ele.children[0].children[0].className.indexOf("icon-expand") > -1 ? "icon-collepse icon-font8" : "icon-expand icon-font8";
        $(ele.nextElementSibling).slideToggle("slow");
    },

    getParentElement: function (element) {
        if (element != undefined && element != null && element.id.indexOf("BodyGrid_") > -1
            || element.id.indexOf("ColumnGrid_") > -1 ||
            element.id.indexOf("imageEle_") > -1) {
            return element.parentNode;
        }
        return element;
    },

    SelectPageDiv: function (ele, e, ctrlName, ctrl) {
        try {

            // iControlType = ele.parentElement.getAttribute('data-controltype');
            //var allCtrls = ele.querySelectorAll('[data-pageno]');
            //for (var i = 0; i < allCtrls.length; i++) {
            //    iControlType = document.getElementById(allCtrls[i].id).getAttribute('data-controltype');
            //    document.getElementById(allCtrls[i].id).style.boxShadow = "";
            //}
            if (INVOICEDESIGN.previousSelectedField && INVOICEDESIGN.previousSelectedField != ele) {
                INVOICEDESIGN.SelectField(ele, e, ctrlName, ctrl);
            }
            else {
                INVOICEDESIGN.SelectField(ele, e, ctrlName, ctrl);
            }
            if (ele.style.backgroundImage != "") { //bitmap is set as background
                //search bitmap element whose src is same as background image src
                var bitmapid = ele.getAttribute("data-bitmapid");
                if (bitmapid) {
                    var bimapele = document.getElementById(bitmapid);
                    INVOICEDESIGN.SelectField(bimapele, e, "BitMap", ctrl);
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("SelectPageDiv" + err.message, " EXCEPTION");
        }
    },

    SelectField: function (ele, e, ctrlName, ctrl) {

        var eleControlType = 0;
        try {
            e.stopPropagation();
            if (INVOICEDESIGN.fromDrag == true && ctrlName != "Line") {
                INVOICEDESIGN.fromDrag = false;
                if (($(ele).hasClass("ui-draggable-dragging"))) {
                    $(ele).removeClass("ui-draggable-dragging");
                }
                return;
            }
            if (INVOICEDESIGN.previousSelectedField != null && INVOICEDESIGN.previousSelectedField != ele) {
                INVOICEDESIGN.previousSelectedField.style.boxShadow = "none";
                //if previous selected field is static text type , then call StaticText_Focusout() method 
                if (INVOICEDESIGN.previousSelectedField.dataset.controltype == CONTROLTYPE.Statictext ||
                   INVOICEDESIGN.previousSelectedField.dataset.controltype == CONTROLTYPE.Formula) {
                    INVOICEDESIGN.StaticText_onFocusOut(INVOICEDESIGN.previousSelectedField, e);
                }
            }
            if (FCommon.UI.isValidObject(ele)) {
                eleControlType = FConvert.toInt(ele.getAttribute('data-controltype'));
            }
            switch (ctrlName) {
                case "Table":
                    if (ctrl != undefined) {
                        var isContenteditable = ctrl.getAttribute('contenteditable');
                        if (isContenteditable == 'false') {

                        }
                        else {

                        }
                    }
                    if (ele.nodeName.toLowerCase() == "td") {
                        SelectedField = ele.offsetParent;
                    }
                    break;
                case "HeaderColumn":
                    if (ele.id.indexOf('ColumnGrid') > -1) {
                        INVOICEDESIGN.isSelectFieldExecutedOnce = true;
                        INVOICEDESIGN.previousSelectedField = SelectedField;
                        return;
                    }
                    else {
                        if (FCommon.UI.isValidObject(ele)) {
                            eleControlType = FConvert.toInt(ele.getAttribute('data-controltype'));
                        }
                        if (SelectedField != undefined && SelectedField != ele) {
                            SelectedField = undefined;
                        }
                        if (ele != undefined) {
                            if (ctrlName == undefined && ele.dataset.controltype != "2") {
                                SelectedField = e.target;
                            } else {
                                SelectedField = ele;
                            }
                            SelectedField.style.boxShadow = "0 0 8px #036EC4";
                        }
                        if (FCommon.UI.isValidObject(SelectedField)) {
                            if (SelectedField.nodeName == "#text") {// if the text element is clicked ,make its parent element td as selectedFields 
                                SelectedField = SelectedField.parentElement;
                            }
                            var eleParent = SelectedField.parentElement;
                            var eleChild = null;
                            var iChildCount = 0;
                            if (FCommon.UI.isValidObject(eleParent)) {
                                iChildCount = eleParent.children.length;
                                for (var i = 0; i < iChildCount; i++) {
                                    eleChild = eleParent.children[i];
                                    if (FCommon.UI.isValidObject(eleChild)) {
                                        eleChild.style.backgroundColor = SelectedField.getAttribute('data-background-color');
                                        eleChild.style.color = SelectedField.getAttribute('data-color');
                                    }
                                }
                            }
                        }
                    }
                    break;
                case "BodyGrid":
                case "MainLayout":
                    if (FCommon.UI.isValidObject(ele)) {
                        eleControlType = FConvert.toInt(ele.getAttribute('data-controltype'));
                    }
                    if (SelectedField != undefined && SelectedField != ele) {
                        SelectedField = undefined;
                    }
                    if (ele != undefined) {
                        if (ctrlName == undefined && ele.dataset.controltype != "2") {
                            SelectedField = e.target;
                        } else {
                            SelectedField = ele;
                        }
                        if (SelectedField.style.boxShadow == "0 0 8px #036EC4" || SelectedField.style.boxShadow == "rgb(3, 110, 196) 0px 0px 8px") {
                            SelectedField.style.boxShadow = "none";
                        }
                        else {
                            SelectedField.style.boxShadow = "0 0 8px #036EC4";
                        }
                    }
                    break;
                case "BitMap":
                    SelectedField = ele;
                    break;
                case "StaticText":
                case "Formula":
                    SelectedField = ele;
                    if ($(ele).hasClass("ui-draggable-handle") && $(ele).data("ui-draggable")) {
                        if ($(SelectedField).is('.ui-draggable-dragging')) {
                            return;
                        }
                        $(SelectedField).draggable("disable");
                        $(SelectedField).children("p").attr("draggable", "false");
                        $(SelectedField).children("p").focus();
                        $(SelectedField).css("cursor", "text");
                        $(SelectedField).attr("title", "Edit");
                        $(SelectedField).attr("draggable", "false");
                    }
                    break;
                case "TextBlock":
                case "Posting Details":
                case "Approval History":
                    SelectedField = ele;
                    if (!blnMouseDown) { //not in drag mode
                        if ($(ele).hasClass("ui-draggable") && $(ele).data("ui-draggable")) {
                            if (($(SelectedField.children[0]).hasClass("ui-draggable-dragging"))) {
                                $(SelectedField.children[0]).removeClass("ui-draggable-dragging");
                                $(SelectedField.children[0]).draggable("disable");
                            }
                        }
                    }
                    break;
                case "Rectangle":
                case "Area":
                    //check if clicked point lies on a line in rectangle or area
                    if (svgcontainer) {
                        var point = INVOICEDESIGN.oMousePosSVG(e);
                        var isOnLine = false; var oLine = null;
                        var x1 = 0.0, y1 = 0.0, x2 = 0.0, y2 = 0.0;
                        var slope_M = 0.0, intercept_C = 0.0;
                        for (var iCounter = 0; iCounter < svgcontainer.children.length; iCounter++) {
                            oLine = svgcontainer.children[iCounter];
                            x1 = parseFloat(oLine.getAttribute("x1"));
                            y1 = parseFloat(oLine.getAttribute("y1"));
                            x2 = parseFloat(oLine.getAttribute("x2"));
                            y2 = parseFloat(oLine.getAttribute("y2"));
                            slope_M = (y2 - y1) / (x2 - x1);
                            isOnLine = (point.y - y1 == slope_M * (point.x - x1));
                            if ((x1 <= point.x && point.x <= x2) &&
                               (y1 + 1 <= point.y && point.y <= y2 + 1)) {
                                SelectedField = oLine;
                                eleControlType = CONTROLTYPE.Line;
                                isOnLine = false;
                            }
                        }
                    }
                    break;
                default:
                    if (e != undefined && e.currentTarget != ele)
                        return 0;
                    if (eleControlType != CONTROLTYPE.Maincanvas) {
                        if ($(ele).hasClass("ui-draggable") || $(ele).data("'ui-draggable'")) {
                            if ($(ele).is('.ui-draggable-dragging')) {
                                $(ele).draggable("disable")
                                return;
                            }
                            else {
                                $(ele).draggable("enable")
                            }
                        }
                    }
            }

            if (SelectedField != undefined && SelectedField != ele && eleControlType != CONTROLTYPE.Line) {
                if (eleControlType == 11) {

                }
                else {
                    if (SelectedField.id.indexOf("BodyColumn") > -1) {
                        SelectedField.style.backgroundColor = SelectedField.dataset.backgroundColor;
                        SelectedField.style.color = SelectedField.dataset.color;
                    }
                    else {
                        SelectedField.style.boxShadow = "";
                    }
                }
                SelectedField = undefined;
            }
            if (ele != undefined && ctrlName != "BodyGrid" && ctrlName != "MainLayout") {
                if (ctrlName == undefined && ele.dataset.controltype != "2" && ele.dataset.controltype != "3") {
                    SelectedField = e.target;
                    if (SelectedField.nodeName.toLowerCase() == "svg") {
                        SelectedField = SelectedField.parentElement;
                    }
                }
                else if (ctrlName == "Table") {
                    if (ele.nodeName.toLowerCase() == "td" && ele.id == "" && ele.id.includes("Table") == false) {//then it is a table control
                        SelectedField = ele.offsetParent;
                    }
                    else {
                        SelectedField = ele;
                    }
                }
                else if (ctrlName != "TextBlock" && ctrlName != "StaticText" && ctrlName != "Formula" && eleControlType != CONTROLTYPE.Line) {
                    SelectedField = ele;
                }

                if (SelectedField.dataset.controltype == "0") {
                    iCurrentPage = parseInt(SelectedField.dataset.pageno);
                    document.getElementById('lblInvoiceDesignPageCount').textContent = document.getElementById("msgLayoutPageCount").value + " " + (iCurrentPage == 0 ? 1 : iCurrentPage + 1) + " of " + iNoofPages;
                }
                if (eleControlType == CONTROLTYPE.Line) {
                    INVOICEDESIGN.fromDrag = false;
                    var otherline = null;
                    //de selects previous selected ones 
                    for (var iCounter = 0 ; iCounter < SelectedField.parentElement.children.length; iCounter++) {
                        otherline = SelectedField.parentElement.children[iCounter];
                        otherline.style.stroke = "black";
                    }
                    if (SelectedField.style.stroke == "#036EC4" || SelectedField.style.stroke == "rgb(3, 110, 196)") {
                        SelectedField.style.stroke = "black";
                    }
                    else {
                        SelectedField.style.stroke = "#036EC4";
                    }
                }
                else {
                    //if the control is already selected , then deselect it else select it
                    if (SelectedField.style.boxShadow == "0 0 8px #036EC4" || SelectedField.style.boxShadow == "rgb(3, 110, 196) 0px 0px 8px") {
                        SelectedField.style.boxShadow = "none";
                    }
                    else {
                        SelectedField.style.boxShadow = "0 0 8px #036EC4";
                    }
                }
            }
            if (SelectedField.id.indexOf("BodyGrid") > -1) {
                SelectedField = SelectedField.parentNode;
            }
            if (SelectedField.id.indexOf("BodyColumn") > -1) {
                INVOICEDESIGN.selectUnselectColumn(SelectedField);
            }
            if (document.getElementById("InvoiceDesignFieldProperties").className.indexOf("active") > -1) {
                INVOICEDESIGN.GetFieldProperties();
            }
            INVOICEDESIGN.isSelectFieldExecutedOnce = true;
            INVOICEDESIGN.previousSelectedField = SelectedField;
        }
        catch (err) {
            alert("Exception: {INVOICEDESIGN.SelectField} " + err.message);
        }
    },

    selectUnselectColumn: function (elecolumn) {
        var eleparent = null, currentChild = null;
        try {
            eleparent = elecolumn.parentElement;
            for (var icounter = 0; icounter < eleparent.children.length; icounter++) {
                currentChild = eleparent.children[icounter];
                $(currentChild).addClass("theme_background-color-reverse theme_color-reverse")
            }
            $(SelectedField).removeClass("theme_background-color-reverse theme_color-reverse");
            SelectedField.style.backgroundColor = "#ffffff";
            SelectedField.style.color = "black";
        }
        catch (err) {
            COMMON.prototype.showMessage("selectUnselectColumn" + err.message, "EXCEPTION");
        }
    },

    GetFieldProperties: function () {

        var controltype = 0, datatype = 0, uid = 0;
        var eleTable = null;
        var sFormula = "";
        try {
            document.getElementById('LiDesignField').children[0].setAttribute('class', 'theme_background-color-reverse');
            document.getElementById('LiProp').children[0].setAttribute('class', 'active labeltext theme_color-inverse');

            document.getElementById('InvoiceDesignFields').setAttribute('class', 'tab-pane');
            document.getElementById('InvoiceDesignFieldProperties').setAttribute('class', 'tab-pane active');

            if (SelectedField != undefined) {
                if (SelectedField != undefined && SelectedField.id.indexOf('LayoutDiv') > -1) {
                    SelectedField = document.getElementById($("#InvoiceDesignFieldProperties").attr("data-domid")) != null ? document.getElementById($("#InvoiceDesignFieldProperties").attr("data-domid")) : SelectedField;
                }
                if (SelectedField.id.includes("ColumnGrid")) { //to select the Main Body Grid
                    SelectedField = SelectedField.parentElement;
                }
                if (SelectedField.nodeName.toLowerCase() == "img") { // for bitmap field , the field should be image parent div
                    SelectedField = SelectedField.parentElement;
                }
                if (SelectedField.nodeName.toLowerCase() == "p") { // for static text field , the field should be its parent div
                    SelectedField = SelectedField.parentElement;
                }
                if ($(SelectedField).hasClass("ui-resizable-handle")) {
                    SelectedField = SelectedField.parentElement;
                }
                controltype = parseInt(SelectedField.dataset.controltype);
                datatype = parseInt(SelectedField.getAttribute('data-datatype'));

                if (datatype == 10) {
                    eleTable = SelectedField.children[0];
                    // eleTable = SelectedField;
                    if (FCommon.UI.isValidObject(eleTable)) {
                        if (eleTable.id != "") {
                            uid = eleTable.id.split('_');
                            uid = uid[uid.length - 1];
                        }
                    }
                }
                else {
                    if (SelectedField.id != "") {
                        if (SelectedField.nodeName.toLowerCase() == "th") {
                            if (SelectedField.hasAttribute("data-bodyid")) {
                                uid = parseInt(SelectedField.getAttribute("data-bodyid"));
                                sFormula = SelectedField.getAttribute("data-formula");
                            }
                        }
                        else {
                            uid = SelectedField.id.split('_');
                            uid = uid[uid.length - 1];
                        }
                        if (uid == "0") {
                            if (SelectedField.hasAttribute("data-bodyid")) {
                                uid = parseInt(SelectedField.getAttribute("data-bodyid"));
                            }
                        }
                    }
                }
                var FieldId = 0;
                if (SelectedField) {
                    if (SelectedField.hasAttribute("data-fieldid"))
                        FieldId = SelectedField.getAttribute("data-fieldid");
                }

                var sURL = GLOBAL.getContextPath("FieldProperties", "InvoiceDesign", "Transactions");
                result = NETWORK.executeServerMethod(sURL,
                           true,
                           {
                               Type: controltype == CONTROLTYPE.BodyColumn ? CONTROLTYPE.BodyCanvas : controltype,
                               DataType: isNaN(datatype) ? 0 : datatype,
                               UID: uid,
                               FieldId: FieldId,
                               sFormula: sFormula,
                               bBodyCanvas: controltype == CONTROLTYPE.BodyCanvas ? true : false,
                               iVoucherType: iVoucherType
                           },
                           "html",
                           false,
                           "INVOICEDESIGN.GetFieldPropertiesSuccess",
                           "GLOBAL.LoadingStart",
                           "GLOBAL.LoadingEnd"
                   );
            }
            else {
                $("#InvoiceDesignFieldProperties").html('');
                var sVar = "<center><label style='padding-top:150px;color:red;font-size:20px'>" + document.getElementById("hdnMsgNoData").value + "</label></center>";
                $("#InvoiceDesignFieldProperties").append(sVar);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.GetFieldProperties}" + err.message.toString(), "Exception");
        }

    },

    GetFieldPropertiesSuccess: function (bSuccess, html) {
        try {
            if (bSuccess == true) {
                $("#InvoiceDesignFieldProperties").html(html);
                if (SelectedField.id == "" && SelectedField.dataset.controltype == CONTROLTYPE.Table) {
                    $("#InvoiceDesignFieldProperties").attr("data-domid", SelectedField.children[0].id);
                }
                else {
                    $("#InvoiceDesignFieldProperties").attr("data-domid", SelectedField.id);
                }

                INVOICEDESIGN.SetFieldPropertiesInObject(SelectedField);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.GetFieldPropertiesSuccess" + err.message.toString(), "Exception");
        }
    },

    GetDesignerFields: function () {
        try {
            document.getElementById('LiDesignField').children[0].setAttribute('class', 'active labeltext theme_color-inverse');
            document.getElementById('LiProp').children[0].setAttribute('class', 'labeltext theme_color-inverse');
            document.getElementById('InvoiceDesignFields').setAttribute('class', 'tab-pane active');
            document.getElementById('InvoiceDesignFieldProperties').setAttribute('class', 'tab-pane');
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.GetDesignerFields}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    reverseString: function (sText, chrAdd) {
        try {
            // reverse should initialized as a empty String
            // to prevent adding char to "undefined" string
            var strReversed = '';

            for (var i = sText.length - 1; i >= 0; i--) {
                strReversed += sText[i] + chrAdd;
            }

            return strReversed;
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.reverseString" + err.message.toString(), "Exception");
        }
    },

    //Internal
    reverseArray: function (sArray, chrAdd) {
        try {
            var strReversed = '';

            for (var i = sArray.length - 1; i >= 0; i--) {
                strReversed += sArray[i] + chrAdd;
            }

            return strReversed;
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.reverseArray" + err.message.toString(), "Exception");
        }
    },

    //Internal
    setEmptyTextinTable: function (SelectedField) {
        var eleTable = null;
        var iActualRows = 0, iActualColumns = 0;
        var iVal = -1;
        eleTable = SelectedField.children[0];
        if (FCommon.UI.isValidObject(eleTable)) {
            iActualRows = FConvert.toInt(SelectedField.children[0].children.length);
            if (iActualRows > 0) {
                iActualColumns = FConvert.toInt(SelectedField.children[0].children[0].children.length);
                if (iActualColumns > 0) {
                    for (iRow = 0; iRow < iActualRows; iRow++) {
                        for (var iCol = 0; iCol < iActualColumns; iCol++) {
                            iVal = iVal + 1;
                            eleTable.children[iRow].children[iCol].textContent = "";
                        }
                    }
                }
            }
        }
    },

    ChangePropertyValue: function (ele) {
        ;
        var eleTable = null, eleTr = null, eleTd = null, selectfline = null;
        var iActualRows = 0, iActualColumns = 0, iBalanceRows = 0, iBalanceColumns = 0;
        var iRow = 0, iCol = 0, controltype = 0;
        var selectf = null;
        try {
            if (SelectedField != null || SelectedField != undefined) {
                selectf = SelectedField;
            }
            else {
                selectf = document.getElementById($("#InvoiceDesignFieldProperties").attr("data-domid"));
            }
            var e = ele;
            if (FCommon.String.isNullOrEmpty(selectf.id) == false) {
                selectfline = $(selectf).attr("id").indexOf("Line_");
            }
            else {

            }
            if (selectfline != null && selectfline > -1) {
                switch (ele.dataset.bindingname) {
                    case PROPERTY.Left:
                        selectf.setAttributeNS(null, "x1", ele.value)
                        break;
                    case PROPERTY.Top:
                        //  INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value + "px");
                        //left is set to lines x1 and top to y1
                        selectf.setAttributeNS(null, "y1", ele.value)
                        break;
                    case PROPERTY.Height:
                        // extract y2 value from height and y1  and set in line's y2
                        selectf.setAttributeNS(null, "y2", parseInt(ele.value) + parseFloat(selectf.getAttributeNS(null, "y1")));
                        break;
                    case PROPERTY.Width:
                        //extract x2 value from widht and y1 and set in line x2
                        selectf.setAttributeNS(null, "x2", parseInt(ele.value) + parseFloat(selectf.getAttributeNS(null, "x1")));
                        break;
                    case PROPERTY.BorderColor:
                        //set in lines stroke css property
                        selectf.setAttributeNS(null, "stroke", ele.selectedOptions[0].text);
                        break;
                    case PROPERTY.BorderThickness:
                        // set in lines stokewidth css property
                        selectf.setAttributeNS(null, "stroke-width", ele.value);
                        break;
                }
            }
            else if (selectf != undefined && selectf != null) {
                var controltype = parseInt(selectf.getAttribute("data-controltype"));
                var bindingvalue = null;
                switch (ele.dataset.bindingname) {
                    case PROPERTY.Left:
                        if (selectf.dataset.masterid > 0) {
                            //bindingvalue = ele.value - FConvert.toDecimal(selectf.parentElement.style.left.substring(0, selectf.parentElement.style.left.length - 2));
                            INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value + "px");
                        }
                        else {
                            INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value + "px");
                        }
                        break;
                    case PROPERTY.Top:
                        if (selectf.dataset.masterid > 0) {
                            //bindingvalue = ele.value - FConvert.toDecimal(selectf.parentElement.style.top.substring(0, selectf.parentElement.style.top.length - 2));
                            INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value + "px");
                        }
                        else {
                            INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value + "px");
                        }
                        break;
                    case PROPERTY.Width:
                    case PROPERTY.Height:
                        INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value + "px");
                        break;
                    case PROPERTY.BorderColor:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            var borderProperties = selectf.style.border.split(' ');
                            borderProperties[2] = ele.selectedOptions[0].text;
                            INVOICEDESIGN.SetFieldProperty(selectf, "border", borderProperties.join(' '));
                        }
                        break;
                    case PROPERTY.BorderThickness:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            var borderProperties = selectf.style.border.split(' ');
                            borderProperties[0] = ele.value + "px";
                            if (parseInt(selectf.dataset.controltype) == CONTROLTYPE.Rectangle) {
                                borderProperties[0] = "2px";
                            }
                            INVOICEDESIGN.SetFieldProperty(selectf, "border", borderProperties.join(' '));
                        }
                        break;
                    case PROPERTY.IsAlternateRowColor:
                        //INVOICEDESIGN.SetFieldProperty(selectf, ele.dataset.bindingname.toLowerCase(), ele.value);
                        break;
                    case PROPERTY.IsImageBackground:
                        var strImage = "";
                        if (parseInt(ele.value) == 0) { //0 means isImageBackground = false
                            //unset background image 
                            INVOICEDESIGN.SetFieldProperty(selectf.parentElement, "background-image", "none");
                            INVOICEDESIGN.SetFieldProperty(selectf.parentElement, "background-repeat", "");
                            INVOICEDESIGN.SetFieldProperty(selectf.parentElement, "background-size", "");
                            //show bitmap ele
                            selectf.style.visibility = "";
                        }
                        else {//1 means isImageBackground = true
                            //set background Image
                            strImage = $(selectf).children("img").attr("src");
                            strImage = strImage.replace(/\n/g, '');

                            INVOICEDESIGN.SetFieldProperty(selectf.parentElement, "background-image", "url(" + strImage + ")");
                            selectf.parentElement.style.backgroundRepeat = "no-repeat";
                            selectf.parentElement.style.backgroundSize = "100% 100%";
                            selectf.parentElement.setAttribute("data-bitmapid", selectf.id);

                            //hide bitmap ele
                            selectf.style.visibility = "hidden";
                        }
                        break;
                    case PROPERTY.BackColor:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            INVOICEDESIGN.SetFieldProperty(selectf, "background-color", ele.selectedOptions[0].text);
                        }
                        break;
                    case PROPERTY.IsSkipLineBetweenRow:
                        break;
                    case PROPERTY.ShowGridLineType:
                        break;
                    case PROPERTY.IsSkipPageAfterInvoice:
                        break;
                    case PROPERTY.IsPrefixColumnNamePUPC:
                        break;
                    case PROPERTY.IsBodyLengthVariable:
                        break;
                    case PROPERTY.IsDisplayPrevPageBalance:
                        break;
                    case PROPERTY.IsAddBalbfToPageTotal:
                        break;
                    case PROPERTY.IsDonotPrintPartialItem:
                        break;
                    case PROPERTY.IsHideItemUnderItemSet:
                        break;
                    case PROPERTY.BodyPositionIfHeaderSkip:
                        break;
                    case PROPERTY.IsPrintTotalOnEveryPage:
                        break;
                    case PROPERTY.IsPrintTotalInsideGrid:
                        break;
                    case PROPERTY.IsDoNotShowGridHeader:
                        break;
                    case PROPERTY.GroupBy:
                        break;
                    case PROPERTY.OrderBy:
                        break;
                    case PROPERTY.ClubBy:
                        break;
                    case PROPERTY.DefaultFont:
                        break;
                    case PROPERTY.HeadingFont:
                        break;
                    case PROPERTY.TotalFont:
                        break;
                    case PROPERTY.ExternalModuleNamespace:
                        break;
                    case PROPERTY.ExternalModuleClass:
                        break;
                    case PROPERTY.ExternalModuleFunction:
                        break;
                    case PROPERTY.Alias:
                        break;
                    case PROPERTY.Heading2:
                        break;
                    case PROPERTY.Formula:
                        break;
                    case PROPERTY.ColumnWidth:
                        if (ele.value < 20) {
                            ele.value = 20;
                        }
                        INVOICEDESIGN.SetFieldProperty(selectf, "width", ele.value + "px");
                        break;
                    case PROPERTY.DecimalInColumn:
                        break;
                    case PROPERTY.PixelInLinesWordWrap:
                        break;
                    case PROPERTY.DontShowTotal:
                        break;
                    case PROPERTY.InsertComma:
                        break;
                    case PROPERTY.Sign:
                        break;
                    case PROPERTY.HideColumn:
                        break;
                    case PROPERTY.WordWrap:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            switch (parseInt(ele.value)) {
                                case 0:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "word-wrap", "normal");
                                    break;
                                case 1:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "word-wrap", "break-word");
                                    break;
                            }
                        }
                        break;
                    case PROPERTY.PrintUnderPreviousColumn:

                        break;
                    case PROPERTY.PrintInLine2:
                        break;
                    case PROPERTY.Alignment:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            INVOICEDESIGN.SetFieldProperty(selectf, 'text-align', ele.selectedOptions[0].text.toLowerCase());
                        }
                        break;
                    case PROPERTY.HeadingAlignment:
                        break;
                    case PROPERTY.ColumnFont:
                        break;
                    case PROPERTY.ColumnCondition:
                        break;
                    case PROPERTY.Text:
                        switch (controltype) {
                            case CONTROLTYPE.Table:
                                var uid = null, eleAlignment = null;
                                if (ele.id != "") {
                                    uid = ele.id.split('_');
                                    uid = uid[uid.length - 1];
                                    eleAlignment = document.getElementById('Combobox_2_' + uid);
                                }

                                var eleTable = null, eleRow = null, eleCol = null;
                                var chrText = [];
                                var iLen = 0, iLenCommas = 0;
                                var iVal = -1;
                                if (FCommon.UI.isValidObject(eleAlignment)) {
                                    if (eleAlignment.value == 0) { //left to right alignment.
                                        chrText = ele.value.split(',');
                                        if (chrText.length <= 1) {
                                            chrText = ele.value.split('');
                                        }
                                        iLen = chrText.length;
                                        if (iLen > 0) {
                                            if (selectf.nodeName.toLowerCase() == "table") {
                                                eleTable = selectf;
                                            }
                                            else if (selectf.nodeName.toLowerCase() == "div") {
                                                eleTable = selectf.children[0];
                                            }
                                            if (FCommon.UI.isValidObject(eleTable)) {
                                                iActualRows = FConvert.toInt(selectf.children[0].children.length);
                                                if (iActualRows > 0) {
                                                    iActualColumns = FConvert.toInt(selectf.children[0].children.length);
                                                    if (iActualColumns > 0) {
                                                        for (iRow = 0; iRow < iActualRows; iRow++) {
                                                            for (iCol = 0; iCol < iActualColumns; iCol++) {
                                                                iVal = iVal + 1;
                                                                if (iVal >= iLen) {
                                                                    eleTable.children[iRow].children[iCol].textContent = "";
                                                                }
                                                                else {
                                                                    eleTable.children[iRow].children[iCol].textContent = chrText[iVal];
                                                                }
                                                                eleTable.children[iRow].children[iCol].valign = "top";
                                                                eleTable.children[iRow].children[iCol].align = "center";
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            INVOICEDESIGN.setEmptyTextinTable(selectf);
                                        }
                                    }
                                    else { //right to left alignment.
                                        var eleReverse = null, chrContainsComma = null;
                                        chrContainsComma = ele.value.split(',');
                                        if (chrContainsComma.length <= 1) {
                                            eleReverse = INVOICEDESIGN.reverseString(ele.value, '');
                                            if (chrText.length <= 1) {
                                                chrText = eleReverse.split('');
                                            }
                                        }
                                        else {
                                            eleReverse = INVOICEDESIGN.reverseString(chrContainsComma, ',');
                                            eleReverse.substring(0, [eleReverse.length - 1]);
                                            chrText = eleReverse.split(',');
                                        }
                                        iLen = chrText.length;
                                        if (iLen > 0) {
                                            eleTable = selectf.children[0];
                                            if (FCommon.UI.isValidObject(eleTable)) {
                                                iActualRows = FConvert.toInt(selectf.children[0].children.length);
                                                if (iActualRows > 0) {
                                                    iActualColumns = FConvert.toInt(selectf.children[0].children[0].children.length);
                                                    if (iActualColumns > 0) {
                                                        for (iRow = 0; iRow < iActualRows; iRow++) {
                                                            for (iCol = iActualColumns - 1; iCol >= 0; iCol--) {
                                                                iVal = iVal + 1;
                                                                if (iVal >= iLen) {
                                                                    eleTable.children[iRow].children[iCol].textContent = "";
                                                                }
                                                                else {
                                                                    eleTable.children[iRow].children[iCol].textContent = chrText[iVal];
                                                                }
                                                                eleTable.children[iRow].children[iCol].valign = "top";
                                                                eleTable.children[iRow].children[iCol].align = "center";
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            INVOICEDESIGN.setEmptyTextinTable(selectf);
                                        }
                                    }
                                }
                                break;
                            case CONTROLTYPE.Statictext:
                            case CONTROLTYPE.Textblock:
                                //change P content
                                if (selectf.nodeName.toLowerCase() == "div") {
                                    selectf.children[0].textContent = ele.value;
                                }
                                else if (selectf.nodeName.toLowerCase() == "textarea") {
                                    selectf.textContent = ele.value;
                                }
                                break;
                            default:
                                selectf.textContent = ele.value;
                                break;
                        }
                        break;
                    case PROPERTY.TotalRow:
                        switch (controltype) {
                            case CONTROLTYPE.Table:
                                if (ele.value == "" || ele.value == "0") {
                                    return;
                                }
                                //Code to add/remove rows(TRs) based on value entered.
                                if (selectf.nodeName.toLowerCase() == "table") {
                                    eleTable = selectf;
                                }
                                else {
                                    eleTable = selectf.children[0];
                                }
                                iActualRows = eleTable.children.length;
                                iActualColumns = 0;
                                if (iActualRows > 0) {
                                    iActualColumns = eleTable.children[0].children.length;
                                }
                                iBalanceRows = ele.value - iActualRows;
                                if (iBalanceRows > 0) { //Adding rows along with actual columns.
                                    for (iRow = 0; iRow < iBalanceRows; iRow++) {
                                        eleTr = document.createElement("TR");
                                        for (iCol = 0; iCol < iActualColumns; iCol++) {
                                            eleTd = document.createElement("TD");
                                            eleTd.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this.parentElement.parentElement.parentElement,event)");
                                            eleTd.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this.parentElement.parentElement.parentElement,event,'Table')");
                                            eleTd.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");
                                            eleTd.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this.parentElement.parentElement.parentElement, event, 'Table')");
                                            eleTr.appendChild(eleTd);
                                        }
                                        eleTable.appendChild(eleTr);
                                    }
                                }
                                else if (iBalanceRows < 0) { //Removing rows.
                                    for (iRow = 0; iRow > iBalanceRows; iRow--) {
                                        eleTable.removeChild(eleTable.children[eleTable.children.length - 1]);
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                        break;
                    case PROPERTY.TotalColumn:
                        switch (controltype) {
                            case CONTROLTYPE.Table:
                                if (ele.value == "" || ele.value == "0") {
                                    return;
                                }
                                //Code to add/remove columns(TDs) based on value entered.
                                if (selectf.nodeName.toLowerCase() == "table") {
                                    eleTable = selectf;
                                }
                                else {
                                    eleTable = selectf.children[0];
                                }
                                iActualRows = eleTable.children.length;
                                if (iActualRows > 0) {
                                    iActualColumns = eleTable.children[0].children.length;
                                }
                                iBalanceColumns = ele.value - iActualColumns;
                                if (iBalanceColumns > 0) {//Adding columns
                                    for (iRow = 0; iRow < iActualRows; iRow++) {
                                        for (iCol = 0; iCol < iBalanceColumns; iCol++) {
                                            eleTd = document.createElement("TD");
                                            eleTd.setAttribute("onmousedown", "INVOICEDESIGN.startDrag(this.parentElement.parentElement.parentElement,event)");
                                            eleTd.setAttribute("ondblclick", "INVOICEDESIGN.SelectField(this.parentElement.parentElement.parentElement,event,'Table')");
                                            eleTd.setAttribute("onmouseup", "INVOICEDESIGN.UpdateControlSize(event)");
                                            eleTd.setAttribute("onclick", "INVOICEDESIGN.ctrl_Click(this.parentElement.parentElement.parentElement, event,'Table')");
                                            eleTable.children[iRow].appendChild(eleTd);
                                        }
                                    }
                                }
                                else if (ele.value < iActualColumns) {//Removing columns
                                    for (iRow = 0; iRow < iActualRows; iRow++) {
                                        for (var iCol = 0; iCol > iBalanceColumns; iCol--) {
                                            eleTable.children[iRow].removeChild(eleTable.children[iRow].children[eleTable.children[iRow].children.length - 1]);
                                        }
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                        break;
                    case PROPERTY.Align:
                        switch (controltype) {
                            case CONTROLTYPE.Table:
                                var uid = null;
                                var eleText = null;
                                if (ele.id != "") {
                                    uid = ele.id.split('_');
                                    uid = uid[uid.length - 1];
                                    eleText = document.getElementById('TextBox_2_' + uid);
                                    if (FCommon.UI.isValidObject(eleText)) {
                                        INVOICEDESIGN.ChangePropertyValue(eleText);
                                    }
                                }
                                break;
                            default:
                                switch (parseInt(ele.value)) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(selectf, "dir", "ltr");
                                        break
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(selectf, "dir", "rtl");
                                        break;
                                }
                                break;
                        }
                        break;
                    case PROPERTY.IsEditable:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            //Making uneditable all the TDs in the table.
                            if (selectf.children.length > 0) {
                                var iRows = 0, iCols = 0, iRow = 0, iCol = 0;
                                var eleTr = null, eleTd = null, UID = null;
                                var eleTable = selectf.children[0];
                                var sCompleteText = '';
                                iRows = selectf.children[0].children.length;
                                if (iRows > 0) {
                                    eleTr = eleTable.children[iRow];
                                    iCols = eleTr.children.length;
                                    if (iCols > 0) {
                                        eleTd = eleTr.children[0];
                                        sCompleteText = eleTd.textContent;
                                        if (iCols > 1) {
                                            for (iCol = 1; iCol < iCols; iCol++) {
                                                eleTd = eleTr.children[iCol];
                                                switch (parseInt(ele.value)) {
                                                    case 0:
                                                        eleTd.contentEditable = 'false';
                                                        sCompleteText = sCompleteText + eleTd.textContent;
                                                        break;
                                                    case 1:
                                                        eleTd.contentEditable = 'true';
                                                        sCompleteText = sCompleteText + ',' + eleTd.textContent;
                                                        break;
                                                }
                                            }
                                        }
                                        if (iRows > 1) {
                                            for (iRow = 1; iRow < iRows; iRow++) {
                                                eleTr = eleTable.children[iRow];
                                                if (FCommon.UI.isValidObject(eleTr)) {
                                                    iCols = eleTr.children.length;
                                                    if (iCols > 0) {
                                                        for (iCol = 0; iCol < iCols; iCol++) {
                                                            eleTd = eleTr.children[iCol];
                                                            if (FCommon.UI.isValidObject(eleTd)) {
                                                                switch (parseInt(ele.value)) {
                                                                    case 0:
                                                                        eleTd.contentEditable = 'false';
                                                                        sCompleteText = sCompleteText + eleTd.textContent;
                                                                        break;
                                                                    case 1:
                                                                        eleTd.contentEditable = 'true';
                                                                        sCompleteText = sCompleteText + ',' + eleTd.textContent;
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        UID = eleTable.id.split('_');
                                        UID = parseInt(UID[UID.length - 1]);
                                        UID = 'TextBox_2_' + UID;
                                        if (FCommon.UI.isValidObject(document.getElementById(UID))) {
                                            document.getElementById(UID).value = sCompleteText;
                                            INVOICEDESIGN.UpdateArrPageHeader(selectf, document.getElementById(UID));
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case PROPERTY.Condition:
                        break;
                    case PROPERTY.DisplayBorder:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            switch (parseInt(ele.value)) {
                                case 0:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "border", "");
                                    break;
                                case 1:
                                    if (selectf.style.border.length == 0)
                                        INVOICEDESIGN.SetFieldProperty(selectf, "border", "1px solid block");
                                    break;
                            }
                        }
                        break;
                    case PROPERTY.PageSelect:
                        break;
                    case PROPERTY.AutoExpand:
                        break;
                    case PROPERTY.IgnorePageAfterPreviousPage:
                        break;
                    case PROPERTY.FunctionType:
                        //save the selected function type in Field
                        var selectedoption = ele.selectedOptions[0].value;
                        break;
                    case PROPERTY.AmountInWords:
                        break;
                    case PROPERTY.RoundOffType:
                        break;
                    case PROPERTY.RoundUptoValue:
                        break;
                    case PROPERTY.SuffixForAmtInWords:
                        break;
                    case PROPERTY.Prefix:
                        break;
                    case PROPERTY.Labelforzerovalue:
                        break;
                    case PROPERTY.Sign:
                        break;
                    case PROPERTY.CaseStyles:
                        switch (controltype) {
                            case CONTROLTYPE.Textblock:
                                break;
                            default:
                                if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                    switch (parseInt(ele.value)) {
                                        case 0:
                                            INVOICEDESIGN.SetFieldProperty(selectf, "text-transform", "capitalize");
                                            break;
                                        case 1:
                                            INVOICEDESIGN.SetFieldProperty(selectf, "text-transform", "uppercase");
                                            break;
                                        case 2:
                                            INVOICEDESIGN.SetFieldProperty(selectf, "text-transform", "lowercase");
                                            break;
                                    }
                                }
                                break;
                        }
                        break;
                    case PROPERTY.TextColor:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            INVOICEDESIGN.SetFieldProperty(selectf, "color", ele.selectedOptions[0].text);
                        }
                        break;
                    case PROPERTY.TextFont:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            INVOICEDESIGN.SetFieldProperty(selectf, "font-family", ele.selectedOptions[0].text);
                        }
                        break;
                    case PROPERTY.FontSize:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            INVOICEDESIGN.SetFieldProperty(selectf, "font-size", ele.value + "px");
                        }
                        break;
                    case PROPERTY.FontWeight:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            if (ele.selectedOptions[0].text.toLowerCase() == "regular") {
                                INVOICEDESIGN.SetFieldProperty(selectf, "font-weight", "400");
                            }
                            else {
                                INVOICEDESIGN.SetFieldProperty(selectf, "font-weight", ele.selectedOptions[0].text.toLowerCase());
                            }
                        }
                        break;
                    case PROPERTY.FontStyle:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            switch (ele.selectedOptions[0].value) {
                                case "0": INVOICEDESIGN.SetFieldProperty(selectf, "font-style", "normal");
                                    break;
                                case "1": INVOICEDESIGN.SetFieldProperty(selectf, "font-style", "italic");
                                    break;
                                case "2": INVOICEDESIGN.SetFieldProperty(selectf, "font-style", "oblique");
                                    break;
                            }

                        }
                        break;
                    case PROPERTY.FontEffect:
                        if (parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(selectf.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                            switch (parseInt(ele.value)) {
                                case 0:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "text-decoration", "");
                                    break;
                                case 1:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "text-decoration", "initial");
                                    break;
                                case 2:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "text-decoration", "overline");
                                    break;
                                case 3:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "text-decoration", "underline");
                                    break;
                                case 4:
                                    INVOICEDESIGN.SetFieldProperty(selectf, "text-decoration", "line-through");
                                    break;
                            }
                        }
                        break;
                    case PROPERTY.ReportType:
                        break;
                    case PROPERTY.DefaultPrinter:
                        break;
                    case PROPERTY.NoOfCopies:
                        break;
                    case PROPERTY.IsPrintInDraftMode:
                        break;
                    case PROPERTY.IsDonotPrintQuantityforModifiers:
                        break;
                    case PROPERTY.IsPageAfterPreviousPage:
                        break;
                    case PROPERTY.AttachDocuments:
                        break;
                    case PROPERTY.ModifierOption:
                        break;
                    case PROPERTY.IsSuspendNet:
                        break;
                    case PROPERTY.ColumnHeight:
                        break;
                    case PROPERTY.HorizontalGap:
                        break;
                    case PROPERTY.VerticalGap:
                        break;
                    case PROPERTY.RowsPerPage:
                        break;
                    case PROPERTY.ColumnsPerPage:
                        break;
                }
            }
            INVOICEDESIGN.UpdateArrPageHeader(selectf, ele);
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ChangePropertyValue}" + err.message, "Exception");
        }
    },

    GetField: function (UID) {
        if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
            for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID == parseInt(UID)) {
                    return objLayoutInformation.Pages[iCurrentPage].PageHeader[count];
                }
            }
        }
    },

    AddFieldToLayoutObject: function (type, datatype, UID, BodyId, sText, columnindex, imasterid) {

        var PageHeaderObject = {};
        var PageBodyObj = null;
        try {
            //make pageHeaderObject and insert in objLayoutInformation.Pages[iCounter].PageHeader array
            PageHeaderObject = INVOICEDESIGN.getEmptyPageHeaderObj();
            //common properties
            PageHeaderObject.Type = type;
            PageHeaderObject.UID = UID;
            PageHeaderObject.BorderColor = -16777216;//black
            PageHeaderObject.BorderThickness = 1;//default
            PageHeaderObject.FontEffect = 0;//default
            PageHeaderObject.FontSize = objDefaultFont.FontSize;
            PageHeaderObject.FontStyle = objDefaultFont.FontStyle;
            PageHeaderObject.FontWeight = objDefaultFont.FontWeight;
            PageHeaderObject.TextColor = objDefaultFont.Foreground;
            PageHeaderObject.TextFont = "";
            PageHeaderObject.MasterId = imasterid;
            PageHeaderObject.StaticTextProperties = INVOICEDESIGN.getEmptyStaticTextClassObj();
            switch (type) {
                case CONTROLTYPE.BodyCanvas:
                    if (BodyId && BodyId > 0) {
                        PageBodyObj = INVOICEDESIGN.getEmptyPageBodyObj(); //PageBody
                        PageBodyObj.FieldId = UID;
                        PageBodyObj.ColumnIndex = columnindex;
                        PageBodyObj.ColumnWidth = (datatype == DATATYPE.Fraction) ? 120 : 60;
                        PageBodyObj.DataType = datatype;
                        if (datatype == DATATYPE.Fraction || datatype == DATATYPE.Number || datatype == DATATYPE.BigNumber ||
                            datatype == DATATYPE.SmallNumber || datatype == DATATYPE.NumberList) {
                            PageBodyObj.Alignment = 2; // Default alignment for numeric columns
                            PageBodyObj.DecimalInColumn = 2;
                        }

                        PageBodyObj.FontSize = objDefaultFont.FontSize;
                        PageBodyObj.ColumnFont = null;
                        PageBodyObj.BodyId = parseInt(BodyId);
                        PageBodyObj.Alias = sText;
                        PageBodyObj.Column = sText;
                    }
                    else {
                        PageHeaderObject.BorderThickness = 1;//default
                        PageHeaderObject.BackColor = objDefaultFont.Background;
                        PageHeaderObject.PageBodyClass = INVOICEDESIGN.getEmptyPageBodyClassObj();
                        PageHeaderObject.PageBodyClass.WidthPercent = 100;
                        PageHeaderObject.PageBodyClass.HeightPercent = 72.222;
                        PageHeaderObject.PageBodyClass.ClubByOption = {
                            ClubBy: [],
                            IsDontClubIfRateDifferent: false
                        };
                        PageHeaderObject.PageBodyClass.GroupByOption = {
                            GroupBy: [],//idNamePair[]
                            IsNewGroupOnDiffPrinter: false,
                            IsNewGroupOnNewPage: false,
                            IsPrintGroupHeading: false,
                            IsPrintSubTotal: false
                        };
                    }
                    PageHeaderObject.StaticTextProperties.DecimalInColumn = (datatype == DATATYPE.Fraction ? 2 : 0);
                    break;
                case CONTROLTYPE.Statictext:
                case CONTROLTYPE.Textblock:
                case CONTROLTYPE.Formula:
                    PageHeaderObject.Text = sText != undefined ? sText : "";
                    PageHeaderObject.Status = true;
                    PageHeaderObject.BorderThickness = 0.5;
                    PageHeaderObject.TextColor = -16777216;// generalMethods.ConvertToInt("Black");
                    PageHeaderObject.BackColor = -1;// generalMethods.ConvertToInt("White");
                    PageHeaderObject.TextFont = "Segoe UI";
                    PageHeaderObject.FontSize = 12.0;
                    PageHeaderObject.FontWeight = 0;
                    PageHeaderObject.FontStyle = 0;
                    PageHeaderObject.ShowOnPage = 1;
                    PageHeaderObject.ImageSource = null;
                    PageHeaderObject.TableProperties.TotalRow = 2;
                    PageHeaderObject.TableProperties.TotalColumn = 2;
                    PageHeaderObject.StaticTextProperties.DataType = datatype;
                    PageHeaderObject.StaticTextProperties.DecimalInColumn = (datatype == DATATYPE.Fraction ? 2 : 0);
                    break;
                case CONTROLTYPE.Area:
                    PageHeaderObject.BackColor = objDefaultFont.Background;
                    PageHeaderObject.TextColor = objDefaultFont.Foreground;
                    PageHeaderObject.TextFont = objDefaultFont.FontFamily;
                    break;
                case CONTROLTYPE.PostingDetails:
                    PageHeaderObject.StaticTextProperties.InsertComma = true;
                    if (sText)
                        PageHeaderObject.Text = sText;
                    PageHeaderObject.BackColor = objDefaultFont.Background;
                    PageHeaderObject.Width = 100;
                    break;
                default:
                    if (sText)
                        PageHeaderObject.Text = sText;
                    PageHeaderObject.BackColor = (CONTROLTYPE.Rectangle == type) ? 16777215 : objDefaultFont.Background;
                    PageHeaderObject.Width = 100;
                    break;
            }

            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader == null)
                    objLayoutInformation.Pages[iCurrentPage].PageHeader = [];
                if (type == CONTROLTYPE.BodyCanvas && parseInt(BodyId) > 0) {
                    for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == iCurrentBodyGrid) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody == null)
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody = [];
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.push(PageBodyObj);
                            break;
                        }
                    }
                    return PageBodyObj;
                }
                else {
                    objLayoutInformation.Pages[iCurrentPage].PageHeader.push(PageHeaderObject);
                }
            }
            return PageHeaderObject;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.AddFieldToLayoutObject}" + err.message.toString(), "exception");
        }
    },

    getEmptyPageObj: function () {
        var ObjPage = {};

        ObjPage.IsPageAfterPreviousPage = false;
        ObjPage.PageHeader = [];
        ObjPage.PageHeader.push(INVOICEDESIGN.getEmptyPageHeaderObj());
        ObjPage.PageId = 0;

        return ObjPage;
    },

    getEmptyPrintInfoObj: function () {
        var objPrintInfo = {};
        try {
            objPrintInfo.Margin = {
                Bottom: 0.5,
                Left: 0.5,
                Top: 0.5,
                Right: 0.5
            };
            objPrintInfo.PageHeight = 11.69;
            objPrintInfo.PageWidth = 8.27;
            objPrintInfo.Unit = Unit.getDefault();
            objPrintInfo.View = 0; //enum for Potrait - 0
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.getEmptyPrintInfoObj}" + err.message, "EXCEPTION");
        }
        return objPrintInfo;
    },

    getEmptyPageHeaderObj: function () {
        var pageHeaderObj = {};
        try {
            pageHeaderObj.Alignment = 0;
            pageHeaderObj.AreaProperties = {}; //AreaClass
            pageHeaderObj.BackColor = 0;
            pageHeaderObj.BorderColor = 0;
            pageHeaderObj.BorderThickness = 0.0;
            pageHeaderObj.DecimalInColumn = 0;
            pageHeaderObj.FieldId = 0;
            pageHeaderObj.FieldOnPage = {}; //PageList
            pageHeaderObj.FontEffect = 0;
            pageHeaderObj.FontSize = 0;
            pageHeaderObj.FontStyle = 0;
            pageHeaderObj.FontWeight = 0;
            pageHeaderObj.Height = 0.0;
            pageHeaderObj.ImageSource = [];//byte[]
            pageHeaderObj.IsImageBackground = 0;
            pageHeaderObj.IsVisibility = false;
            pageHeaderObj.Left = 0.0;
            pageHeaderObj.MasterId = 0;
            pageHeaderObj.PageBody = [];//PageBody[]
            pageHeaderObj.PageBodyClass = []; //PageBodyClass[]
            pageHeaderObj.RoundOffType = {}; //RoundingType
            pageHeaderObj.RoundUptoValue = 0.0;
            pageHeaderObj.ShowOnPage = {};//ShowOnPage
            pageHeaderObj.StaticTextProperties = {};//StaticTextClass
            pageHeaderObj.Status = false;
            pageHeaderObj.SubParentId = 0;
            pageHeaderObj.TableProperties = {}; //TableClass
            pageHeaderObj.Text = "";
            pageHeaderObj.TextColor = 0;
            pageHeaderObj.TextFont = "";
            pageHeaderObj.Top = 0.0;
            pageHeaderObj.Type = CONTROLTYPE.getDefault();//ControlType
            pageHeaderObj.UID = 0;
            pageHeaderObj.VariableType = VARIABLETYPE.None;//VariableType
            pageHeaderObj.Width = 0.0;
            pageHeaderObj.WordWrap = false;
            pageHeaderObj.IsArabicDigit = false;

            return pageHeaderObj;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.getEmptyPageHeaderObj}" + err.message, "EXCEPTION");
        }
    },

    getEmptyPageBodyObj: function () {
        var PageBodyObj = {};

        PageBodyObj.Alias = "";
        PageBodyObj.Alignment = {};//TextAlignment
        PageBodyObj.BodyId = 0;
        PageBodyObj.Column = "";
        PageBodyObj.ColumnFont = null;//FontClass
        PageBodyObj.ColumnIndex = 0;
        PageBodyObj.ColumnWidth = 0.0;
        PageBodyObj.Condition = [];//_Filter[]
        PageBodyObj.DataType = 0;//
        PageBodyObj.DecimalInColumn = 0;
        PageBodyObj.DontShowTotal = false;
        PageBodyObj.FieldId = 0;
        PageBodyObj.FontSize = 0.0;
        PageBodyObj.Formula = "";
        PageBodyObj.FunctionType = {};//InvoiceFunction
        PageBodyObj.Heading2 = "";
        PageBodyObj.HeadingAlignment = {};//TextAlignment
        PageBodyObj.HideColumn = false;
        PageBodyObj.InsertCommas = false;
        PageBodyObj.MasterId = 0;
        PageBodyObj.PrintInLine2 = false;
        PageBodyObj.PrintUnderPreviousColumn = false;
        PageBodyObj.RoundOffType = {}; //RoundingType
        PageBodyObj.RoundUptoValue = 0.0;
        PageBodyObj.Sign = {};
        PageBodyObj.SubParentId = 0;
        PageBodyObj.WordWrap = false;
        PageBodyObj.IsArabicDigit = false;
        return PageBodyObj;
    },

    getEmptyPageBodyClassObj: function () {
        var PageBodyClassObj = {}

        PageBodyClassObj.BodyPositionIfHeaderSkip = 0;
        PageBodyClassObj.ClubByOption = {}; //ClubByOptions
        PageBodyClassObj.DefaultFont = objDefaultFont;//FontClass
        PageBodyClassObj.ExternalModuleClass = "";
        PageBodyClassObj.ExternalModuleFunction = "";
        PageBodyClassObj.ExternalModuleNamespace = "";
        PageBodyClassObj.GroupByOption = {};//GroupByOptions
        PageBodyClassObj.HeadingFont = objDefaultFont;//FontClass
        PageBodyClassObj.HeightPercent = 0.0;
        PageBodyClassObj.IsAddBalbfToPageTotal = false;
        PageBodyClassObj.IsAlternateRowColor = false;
        PageBodyClassObj.IsBodyLengthVariable = false;
        PageBodyClassObj.IsDisplayPrevPageBalance = false;
        PageBodyClassObj.IsDoNoPrintPartialFooter = false;
        PageBodyClassObj.IsDonotPrintPartialItem = false;
        PageBodyClassObj.IsDoNotShowGridHeader = false;
        PageBodyClassObj.IsHideItemUnderItemSet = false;
        PageBodyClassObj.IsPrefixColumnNamePUPC = false;
        PageBodyClassObj.IsPrintTotalOnEveryPage = false;
        PageBodyClassObj.IsPrintTotalInsideGrid = false;
        PageBodyClassObj.IsSkipHeaderIfFooterSpill = false;
        PageBodyClassObj.IsSkipLineBetweenRow = false;
        PageBodyClassObj.IsSkipPageAfterInvoice = false;
        PageBodyClassObj.OrderBy = [];//IdNamePair[]
        PageBodyClassObj.ShowGridLineType = {}; //GridLineType
        PageBodyClassObj.TotalFont = objDefaultFont; //FontClass
        PageBodyClassObj.WidthPercent = 0.0;

        return PageBodyClassObj;
    },

    getEmptyStaticTextClassObj: function () {
        var objStaticTextClass = {};

        objStaticTextClass.Alignment = 0;
        objStaticTextClass.AmountInWords = {};
        objStaticTextClass.CaseStyle = 0;
        objStaticTextClass.DataType = 0;//DATATYPE.getDefault();//not working in latest
        objStaticTextClass.DecimalInColumn = 0;
        objStaticTextClass.FunctionType = 0;//InvoiceFunction enum
        objStaticTextClass.InsertComma = false;
        objStaticTextClass.Labelforzerovalue = "";
        objStaticTextClass.RoundOffType = {};//RoundingType enum
        objStaticTextClass.RoundUptoValue = 0.0;
        objStaticTextClass.Sign = {};//Sign enum
        objStaticTextClass.SuffixForAmtInWords = "";
        objStaticTextClass.Prefix = "";
        objStaticTextClass.WordWrap = false;
        objStaticTextClass.IsArabicDigit = false;
        objStaticTextClass.PixelInLinesWordWrap = 0;

        return objStaticTextClass;
    },

    IsArrPageHeaderValidObject: function () {
        if (objLayoutInformation.Pages != null &&
            objLayoutInformation.Pages[iCurrentPage] != null &&
            objLayoutInformation.Pages[iCurrentPage].PageHeader != undefined &&
            objLayoutInformation.Pages[iCurrentPage].PageHeader != null) {
            return true;
        }
        return false;
    },

    UpdateArrPageHeader: function (Field, element) {
        ;
        var eleTable = null, eleBodyGrid = null, eleParent = null, eleChild = null;
        var iTotalCount = 0;
        var UID = null, controltype = null;
        try {
            bModified = true;
            if (Field.getAttribute('data-datatype') == 10) {
                eleTable = Field.children[0];
                UID = eleTable.id.split('_');
                UID = parseInt(UID[UID.length - 1]);
            }
            else {
                UID = Field.id.split('_');
                UID = parseInt(UID[UID.length - 1]);
            }
            controltype = parseInt(Field.dataset.controltype);
            iCurrentPage = FConvert.toInt(Field.getAttribute('data-pageno'));
            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                switch (controltype) {
                    case CONTROLTYPE.Maincanvas:
                        objLayoutInformation[element.dataset.bindingname] = parseInt(element.value);
                        break;
                    case CONTROLTYPE.BodyColumn:
                        //Run the loop for the grid columns in the body grid.
                        //eleBodyGrid = Field.parentElement.parentElement.parentElement;
                        eleBodyGrid = Field.offsetParent;//to get the Main Grid element
                        UID = Field.getAttribute("data-bodyid");
                        eleBodyGrid = document.getElementById(INVOICEDESIGN.getBodyGridControlId(UID, iCurrentPage)).parentElement;
                        if (FCommon.UI.isValidObject(eleBodyGrid)) {
                            if (parseInt(UID) <= 0) {
                                UID = eleBodyGrid.id.split('_');
                                UID = parseInt(UID[UID.length - 1]);
                            }

                            for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                    if (iCurrentPage > 0) {
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ShowOnPage = 'PageHeader';
                                    }
                                    eleParent = Field.parentElement;
                                    iTotalCount = eleParent.children.length;
                                    if (iTotalCount > 0) {
                                        for (var iChildCount = 0; iChildCount < iTotalCount; iChildCount++) {
                                            eleChild = eleParent.children[iChildCount];
                                            if (FCommon.UI.isValidObject(eleChild)) {
                                                if (eleChild.id == Field.id) {
                                                    switch (element.dataset.bindingname) {
                                                        case PROPERTY.Alias:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                eleChild.textContent = element.value;
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = element.value;
                                                            }
                                                            break;
                                                        case PROPERTY.Alignment:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.DecimalInColumn:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.PixelInLinesWordWrap:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.DontShowTotal:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.Formula:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = element.value;
                                                            }
                                                            break;
                                                        case PROPERTY.Heading2:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = element.value;
                                                            }
                                                            break;
                                                        case PROPERTY.HeadingAlignment:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                eleChild.style.textAlign = element[element.value].text;
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.HideColumn:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.InsertCommas:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.PrintInLine2:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.PrintUnderPreviousColumn:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.Sign:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.WordWrap:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount]) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.IsArabicDigit:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount]) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                                            }
                                                            break;
                                                        case PROPERTY.ColumnWidth:
                                                            if (element.value < 20) {
                                                                element.value = 20;
                                                            }
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                eleChild.style.width = parseInt(element.value) + "px";
                                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = element.value;
                                                                }
                                                            }
                                                            break;
                                                        default:
                                                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody) {
                                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[iChildCount][element.dataset.bindingname] = element.value;
                                                            }
                                                            break;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case CONTROLTYPE.Table:
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                if (iCurrentPage > 0) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ShowOnPage = 'PageHeader';
                                }
                                switch (element.dataset.bindingname) {
                                    case PROPERTY.Align:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = element[element.value].innerText;
                                        //objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount]["Alignment"] = element[element.value].innerText;//element.value;
                                        break;
                                    case PROPERTY.IsEditable:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.EnableQRCode:
                                        if (element.value == "1") {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].VariableType = VARIABLETYPE.QRCode;
                                        }
                                        break;
                                    case PROPERTY.Text:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = element.value;
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = element.value == null ? "" : element.value;
                                        break;
                                    case PROPERTY.TotalColumn:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.TotalRow:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.Left:
                                    case PROPERTY.Top:
                                    case PROPERTY.Width:
                                    case PROPERTY.Height:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                }
                            }
                        }
                        break;
                    default:
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                if (iCurrentPage > 0) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ShowOnPage = 'PageHeader';
                                }
                                switch (element.dataset.bindingname) {
                                    case PROPERTY.Left:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseFloat(element.value);
                                        break;
                                    case PROPERTY.Top:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseFloat(element.value);
                                        break;
                                    case PROPERTY.Width:
                                    case PROPERTY.Height:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseFloat(element.value);
                                        break;
                                    case PROPERTY.BorderColor:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.BorderThickness:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseFloat(element.value);
                                        break;
                                    case PROPERTY.IsAlternateRowColor:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = Boolean(parseInt(element.selectedOptions[0].value));
                                        break;
                                    case PROPERTY.IsImageBackground:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        if (parseInt(element.value) == 0) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].VariableType = VARIABLETYPE.None;
                                        }
                                        else {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].VariableType = VARIABLETYPE.Image;
                                        }
                                        break;
                                    case PROPERTY.BackColor:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);;
                                        break;
                                    case PROPERTY.IsSkipLineBetweenRow:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.ShowGridLineType:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.IsSkipPageAfterInvoice:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsPrefixColumnNamePUPC:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsBodyLengthVariable:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsDisplayPrevPageBalance:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsAddBalbfToPageTotal:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsDonotPrintPartialItem:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsHideItemUnderItemSet:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.BodyPositionIfHeaderSkip:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.IsPrintTotalOnEveryPage:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsPrintTotalInsideGrid:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            switch (parseInt(element.value)) {
                                                case 0:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = false;
                                                    break;
                                                case 1:
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = true;
                                                    break;
                                            }
                                        }
                                        break;
                                    case PROPERTY.IsDoNotShowGridHeader:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.GroupBy:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass.GroupByOption[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.OrderBy:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.ClubBy:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass.ClubByOption[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.DefaultFont:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.HeadingFont:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.TotalFont:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.ExternalModuleNamespace:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.ExternalModuleClass:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.ExternalModuleFunction:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.Alias:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.Heading2:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.Formula:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.ColumnWidth:
                                        if (element.value < 20) {
                                            element.value = 20;
                                        }
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.DecimalInColumn:
                                        switch (controltype) {
                                            case CONTROLTYPE.Textblock:
                                            case CONTROLTYPE.Formula:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount] != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount] != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                                }
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                                }
                                                break;
                                        }
                                        break;
                                    case PROPERTY.PixelInLinesWordWrap:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.DontShowTotal:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.InsertComma:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = (FConvert.toInt(element.value) == "1" ? "true" : "false");
                                        }
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = (FConvert.toInt(element.value) == "1" ? "true" : "false");
                                        }
                                        break;
                                    case PROPERTY.Sign:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.HideColumn:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.WordWrap:
                                        switch (controltype) {
                                            case CONTROLTYPE.Statictext:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.length != 0) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount]) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].WordWrap = parseInt(element.value);
                                                }
                                                break;
                                            case CONTROLTYPE.Textblock:
                                            case CONTROLTYPE.Formula:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount] != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount] != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                break;
                                            case CONTROLTYPE.BodyCanvas:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                break;
                                        }
                                        break;
                                    case PROPERTY.IsArabicDigit:
                                        switch (controltype) {
                                            case CONTROLTYPE.Statictext:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody.length != 0) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount]) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].IsArabicDigit = parseInt(element.value);
                                                }
                                                break;
                                            case CONTROLTYPE.Textblock:
                                            case CONTROLTYPE.Formula:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount] != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount] != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                break;
                                            case CONTROLTYPE.BodyCanvas:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = (parseInt(element.value) == 0) ? false : true;
                                                }
                                                break;
                                        }
                                        break;
                                    case PROPERTY.PrintUnderPreviousColumn:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.PrintInLine2:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.Alignment:
                                        switch (controltype) {
                                            case CONTROLTYPE.Statictext:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                                }
                                                break;
                                            case CONTROLTYPE.Textblock:
                                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                                }
                                                break;
                                            default:
                                                objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                                break;
                                        }
                                        break;
                                    case PROPERTY.HeadingAlignment:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.ColumnFont:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.ColumnCondition:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount]["Condition"] = element.value;
                                        break;
                                    case PROPERTY.EnableQRCode:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].VariableType = element.value == "1" ? VARIABLETYPE.QRCode : VARIABLETYPE.None;
                                        break;
                                    case PROPERTY.Text:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = element.value == null ? "" : element.value;
                                        break;
                                    case PROPERTY.TotalRow:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.TotalColumn:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.Align:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.IsEditable:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].TableProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.Condition:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.DisplayBorder:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties[element.dataset.bindingname] = (parseInt(element.value) == "1" ? true : false);
                                        }
                                        break;
                                    case PROPERTY.PageSelect:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.AutoExpand:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.IgnorePageAfterPreviousPage:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.FunctionType:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.AmountInWords:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.RoundOffType:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.RoundUptoValue:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseFloat(element.value);
                                        }
                                        break;
                                    case PROPERTY.Labelforzerovalue:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.Sign:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.CaseStyles:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties["CaseStyle"] = parseInt(element.value);
                                        }
                                        break;
                                    case PROPERTY.SuffixForAmtInWords:
                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.Prefix:

                                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties != undefined) {
                                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].StaticTextProperties[element.dataset.bindingname] = element.value;
                                        }
                                        break;
                                    case PROPERTY.TextColor:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.TextFont:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = element[element.selectedIndex].text;
                                        break;
                                    case PROPERTY.FontSize:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.FontWeight:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.FontStyle:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.FontEffect:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.IsPageAfterPreviousPage:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][element.dataset.bindingname] = parseInt(element.value);
                                        break;
                                    case PROPERTY.Column:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBody[element.dataset.bindingname] = element.value;
                                        break;
                                }
                            }
                        }
                        break;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.UpdateArrPageHeader}" + err.message.toString(), "Exception");
        }
    },

    UpdateArrPageHeaderforImage: function (ImageEleid) {
        var eleParent = null, UID = null;
        try {
            bModified = true;
            UID = ImageEleid.split('_');
            UID = parseInt(UID[UID.length - 1]);
            if (document.getElementById(ImageEleid) != null) {
                eleParent = document.getElementById(ImageEleid).parentElement;
            }

            if (FCommon.UI.isValidObject(eleParent)) {
                iCurrentPage = FConvert.toInt(eleParent.getAttribute('data-pageno'));
            }
            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                    if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                        if ($("#" + ImageEleid)[0] && $("#" + ImageEleid)[0].hasAttribute("src")) {
                            objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].ImageSource = $("#" + ImageEleid).attr("src").substring($("#" + ImageEleid).attr("src").indexOf("base64,") + 7);
                        }
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.UpdateArrPageHeaderforImage}" + err.message.toString(), "Exception");
        }
    },
    UpdatePositionPageHeaderforImage: function (ImageEleid, left, top) {
        var eleParent = null, UID = null;
        try {
            bModified = true;
            UID = ImageEleid.split('_');
            UID = parseInt(UID[UID.length - 1]);
            if (document.getElementById(ImageEleid) != null) {
                eleParent = document.getElementById(ImageEleid).parentElement;
            }

            if (FCommon.UI.isValidObject(eleParent)) {
                iCurrentPage = FConvert.toInt(eleParent.getAttribute('data-pageno'));
            }
            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                    if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Left = left;
                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].Top = top;

                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.UpdatePositionPageHeaderforImage}" + err.message.toString(), "Exception");
        }
    },
    GetFontText: function (fontid) {
        if (FONTCOLOR.hasOwnProperty) {
            for (key in FONTCOLOR) {
                if (FONTCOLOR[key] == parseInt(fontid)) {
                    return key.toString();
                }
            }
        }
    },

    OpenDialog: function () {
        $("#" + INVOICEDESIGN.GetPopupDialogId()).modal("show");
    },

    CloseDialog: function () {
        $("#" + INVOICEDESIGN.GetPopupDialogId()).modal("hide");
    },

    closePopup: function (popupId) {
        $("#" + popupId).modal('hide');
    },

    Selectlayout: function (ele) {

        if (SelectedLayout == ele) {
            SelectedLayout.style.color = "";
            SelectedLayout = undefined;
            return;
        }
        if (SelectedLayout != undefined) {
            SelectedLayout.style.color = "";
            SelectedLayout = undefined;
        }
        SelectedLayout = ele;
        SelectedLayout.style.color = "#34C4F9";
        document.getElementById('id_PopuplayoutName').textContent = SelectedLayout.textContent;
    },

    BindOkToPopUp: function (eventName) {
        document.getElementById("btn_PopUpOk").setAttribute("onclick", eventName);
    },

    GetLayoutsUlId: function () {
        return "ul_layouts";
    },

    GetPopupDialogId: function () {
        return "id_PopUp";
    },

    LayoutExist: function (layoutName) {
        if (arrLayouts != null && arrLayouts.length > 0) {
            for (var i = 0; i < arrLayouts.length; i++) {
                if (arrLayouts[i].Name.toLowerCase() == layoutName.toLowerCase()) {
                    return true;
                }
            }
        }
        return false;
    },

    OpenControlDialog: function (ele) {
        var ColumnIndex = undefined;
        var UID = 0;
        try {
            if (!SelectedField) {
                SelectedField = document.getElementById($("#InvoiceDesignFieldProperties").attr("data-domid"));
            }
            if (parseInt(SelectedField.dataset.controltype) == CONTROLTYPE.BodyCanvas) {
                UID = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
            }
            else {
                if (SelectedField.dataset.bodyid != undefined) {
                    UID = SelectedField.dataset.bodyid;
                }
                ColumnIndex = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
            }
            var BodyGrid = INVOICEDESIGN.GetField(UID);
            var PropertyValue = INVOICEDESIGN.GetColumnPropertyValue(BodyGrid, ColumnIndex, ele.dataset.bindingname == "ColumnCondition" ? "Condition" : ele.dataset.bindingname)
            switch (ele.dataset.bindingname) {
                case PROPERTY.ColumnCondition:
                    $("#id_FilterControl").modal('show');
                    FILTER.setFilter(iVoucherType, 100, PropertyValue != undefined ? PropertyValue : null);
                    INVOICEDESIGN.SetOpenControlDialogOkEventName("INVOICEDESIGN.SetFilterToColumnObject('" + ele.id + "')", 'id_FilterControlOkBtn');
                    break;
                case PROPERTY.ColumnFont:
                case PROPERTY.DefaultFont:
                case PROPERTY.HeadingFont:
                case PROPERTY.TotalFont:
                    $("#id_FontDialog").modal('show');
                    FONTDIALOG.setFontData("FontControl", PropertyValue == null ? objDefaultFont : PropertyValue);
                    INVOICEDESIGN.SetOpenControlDialogOkEventName("INVOICEDESIGN.SetFontToColumnObject('" + ele.id + "')", "id_FontDialogOkBtn");
                    break;
                case PROPERTY.ClubBy:
                    var ParentBodyId = SelectedField.dataset.uid;
                    objPageHeader = INVOICEDESIGN.GetField(ParentBodyId);
                    INVOICEDESIGN.OrderByPopup("ClubBy", ele.id, PropertyValue);
                    break;
                case PROPERTY.OrderBy:
                    INVOICEDESIGN.OrderByPopup("OrderBy", ele.id, PropertyValue);
                    break;
                case PROPERTY.GroupBy:
                    INVOICEDESIGN.OrderByPopup("GroupBy", ele.id, PropertyValue);
                    break;
                case PROPERTY.AttachDocuments:
                    //open the Attach Documents Popup 
                    INVOICEDESIGN.openAttachDocsPopup();
                    break;
                case PROPERTY.Condition:
                    //opens a create condition popup here and display
                    //create filter control and attach the html to popup body
                    INVOICEDESIGN.createAreaConditionFilter(ele.id, UID);
                    break;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.OpenControlDialog}" + err.message, "Exception");
        }
    },

    ////////Area -- Condition popup functions
    createAreaConditionFilter: function (browsebtnid, uid) {
        var result = null;
        var RDCustomizationTreeDataObj = {};
        var RDCustomizationTreeDataObjArr = [], cusCols = [];

        try {
            cusCols = arrHeaderGroup[0].Fields;
            if (cusCols.length != 0) {
                for (var i = 0; i < cusCols.length; i++) {
                    RDCustomizationTreeDataObj = {};
                    RDCustomizationTreeDataObj.iFieldId = cusCols[i].FieldId;
                    RDCustomizationTreeDataObj.iLevel = 1;
                    RDCustomizationTreeDataObj.sName = cusCols[i].Name;
                    RDCustomizationTreeDataObj.iParentId = 0;
                    RDCustomizationTreeDataObj.iSubParentId = 0;
                    RDCustomizationTreeDataObj.iDataTypeId = cusCols[i].DataType;
                    RDCustomizationTreeDataObj.iMasterLink = 1;
                    RDCustomizationTreeDataObjArr.push(RDCustomizationTreeDataObj);
                }
                if (cusCols.length < 1) {
                    return;
                }
                result = FILTER.createControl(uid, 7, RDCustomizationTreeDataObjArr, null, true);

                var filterControldiv = null;
                filterControldiv = document.getElementById("id_area_condition_popup_body");
                $(filterControldiv).html(result);
                //set the Condition label ele id in popup , so as to set in it value
                var browsebtnid_split = browsebtnid.split("_");
                var labelId = "Label_" + browsebtnid_split[1] + "_" + browsebtnid_split[2];
                $("#id_area_condition_popup").attr("data-labelid", labelId);
                // show the popup
                $("#id_area_condition_popup").modal("show");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.createAreaConditionFilter" + err.message, "EXCEPTION");
        }
    },

    onConditionFilterOk_Click: function () {
        var filterValues = null, uid = null;
        var PropertiesTab = document.getElementById("InvoiceDesignFieldProperties");
        var sFilterQuery = "";
        try {
            if (!SelectedField) {
                SelectedField = document.getElementById($("#InvoiceDesignFieldProperties").attr("data-domid"));
            }
            // retrieve filter object , convert it into string and display in Condition property
            uid = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1]
            filterValues = FILTER.getFilterValue(uid, 7);
            sFilterQuery = INVOICEDESIGN.makeQueryString(filterValues);

            //store this filterValues in global object objLayoutInformation.Pages[0].PageHeader
            for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(uid)) {
                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].AreaProperties.Condition = sFilterQuery;
                }
            }
            var labelid = $("#id_area_condition_popup").attr("data-labelid");
            $("#" + labelid).css("text-overflow", "ellipsis");
            $("#" + labelid).text(sFilterQuery);
            //close the condition filter popup
            $("#id_area_condition_popup").modal("hide");
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.onConditionFilterOk_Click}" + err.message);
        }
    },

    makeQueryString: function (filterValues) {
        var queryString_ConjuctionVal = [], queryString_FieldVal = [], queryString_Operator = [];
        var queryString_CompareWith = [], queryString_CompareValue = [], cusCols = [];
        var datevalue = "", sQuery = "";
        try {
            if (filterValues != null && filterValues.length != 0) {
                for (var i = 0; i < filterValues.length; i++) {
                    //Conjuction selected value
                    switch (filterValues[i].Conjuction) {
                        case 0: queryString_ConjuctionVal.push("WHERE"); break;
                        case 1: queryString_ConjuctionVal.push("WHERE("); break;
                        case 2: queryString_ConjuctionVal.push("AND"); break;
                        case 3: queryString_ConjuctionVal.push("AND("); break;
                        case 4: queryString_ConjuctionVal.push(")AND"); break;
                        case 5: queryString_ConjuctionVal.push(")AND("); break;
                        case 6: queryString_ConjuctionVal.push("OR"); break;
                        case 7: queryString_ConjuctionVal.push("OR("); break;
                        case 8: queryString_ConjuctionVal.push(")OR"); break;
                        case 9: queryString_ConjuctionVal.push(")OR("); break;
                        case 10: queryString_ConjuctionVal.push(")"); break;
                        case 11: queryString_ConjuctionVal.push("ONLY"); break;
                    }
                    ////Field selected value
                    cusCols = arrHeaderGroup[0].Fields;
                    for (var j = 0; j < cusCols.length; j++) {
                        if (cusCols[j].FieldId == filterValues[i].FieldId) {
                            queryString_FieldVal.push(cusCols[j].Name);
                            break;
                        }
                    }
                    //compare value entered
                    if (filterValues[i].FieldId == 2) {////field Id = 2 for Date fields
                        datevalue = DATE.prototype.getDayFromFocusDate(filterValues[i].CompareValue) + "-";
                        datevalue += DATE.prototype.getMonthFromFocusDate(filterValues[i].CompareValue) + "-";
                        datevalue += DATE.prototype.getYearFromFocusDate(filterValues[i].CompareValue);
                    }
                    else {
                        queryString_CompareValue.push(filterValues[i].CompareValue);
                    }
                    //Operator selected value
                    switch (filterValues[i].Operator) {
                        case 0: queryString_Operator.push("="); break;
                        case 1: queryString_Operator.push("!="); break;
                        case 2: queryString_Operator.push("<"); break;
                        case 3: queryString_Operator.push(">"); break;
                        case 4: queryString_Operator.push("<="); break;
                        case 5: queryString_Operator.push(">="); break;
                        case 6: queryString_Operator.push("="); break;
                        case 7: queryString_Operator.push("<>"); break;
                        case 8://BeginsWith
                            queryString_Operator.push("LIKE");
                            queryString_CompareValue[i] = filterValues[i].CompareValue + "%";
                            break;
                        case 9: //DoesNotBeginWith
                            queryString_Operator.push("NOT LIKE");
                            queryString_CompareValue[i] = filterValues[i].CompareValue + "%";
                            break;
                        case 10: //Contains
                            queryString_Operator.push("LIKE");
                            queryString_FieldVal[i] = "LOWER(" + queryString_FieldVal[i] + ")";
                            queryString_CompareValue[i] = "LOWER(\'%" + queryString_CompareValue[i] + "%\')";
                            break;
                        case 11: queryString_Operator.push("NOT LIKE"); break;
                        case 12: queryString_Operator.push("EndWith"); break;
                    }
                }

                //setting advance filter queries to selected new div element    
                for (var k = 0; k < queryString_ConjuctionVal.length; k++) {
                    if (filterValues[k].FieldId == 2) { // field id = 2 for date 
                        sQuery += queryString_ConjuctionVal[k] + " " + queryString_FieldVal[k] + " " + queryString_Operator[k] + " " + "\'" + datevalue + "\'" + " .";
                    }
                    else if (filterValues[k].Operator == 10) {//8 for BeginsWith
                        sQuery += queryString_ConjuctionVal[k] + " " + queryString_FieldVal[k] + " " + queryString_Operator[k] + " " + queryString_CompareValue[k] + " .";
                    }
                    else {
                        sQuery += queryString_ConjuctionVal[k] + " " + queryString_FieldVal[k] + " " + queryString_Operator[k] + " " + "\'" + queryString_CompareValue[k] + "\'" + " .";
                    }
                }
            }
            return sQuery;
        }
        catch (err) {
            COMMON.prototype.showMessage("INVOICEDESIGN.makeQueryString" + err.message, "EXCEPTION");
        }
    },
    ///////////////

    ////Page Properties -- Attach Documents Popup

    openAttachDocsPopup: function () {
        var arrdoc = [], arrTemp = [];
        var sMasterName = "";
        var result = null;
        try {
            //clear the body contents
            $("#id_page_attachdocs_popup_body").empty();

            //filled the data in modal body
            if (INVOICEDESIGN.m_arrDocuments != null) {
                arrdoc = INVOICEDESIGN.m_arrDocuments.slice(0);
                arrdoc = $.grep(arrdoc, function (x) {
                    return typeof (x.Tag) == "object";
                });

                arrTemp = $.grep(arrdoc, function (x) {
                    return x.Tag.IsBodyField == false;
                });

                if (arrdoc.length > 0) {
                    INVOICEDESIGN.MakeTextBlock("Header");
                    INVOICEDESIGN.MakeCheckBoxes(arrTemp);
                }

                arrTemp = $.grep(arrdoc, function (x) {
                    return x.Tag.IsBodyField == true;
                });

                if (arrTemp.length > 0) {
                    INVOICEDESIGN.MakeTextBlock("Body");
                    INVOICEDESIGN.MakeCheckBoxes(arrTemp);
                }
                arrdoc = INVOICEDESIGN.m_arrDocuments.slice(0);
                arrdoc = $.grep(arrdoc, function (x) {
                    return typeof (x.Tag) != "object";
                });

                arrdoc.forEach(function (list) {
                    arrTemp = [];
                    if (arrBodyGroup) {
                        result = $.grep(arrBodyGroup[0].Fields, function (x) {
                            return x.MasterType == list.Tag;
                        });
                    }
                    if (result != null && result.length > 0) {
                        sMasterName = result[0].Name;
                    }

                    INVOICEDESIGN.MakeTextBlock(sMasterName);
                    arrTemp.push(list);
                    INVOICEDESIGN.MakeCheckBoxes(arrTemp);
                });
            }
            $("#id_page_attachdocs_popup").modal("show");
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.openAttachDocsPopup}" + err.message, "EXCEPTION");
        }
    },

    MakeTextBlock: function (sHeader) {
        var attachpopupbody = document.getElementById("id_page_attachdocs_popup_body");
        try {
            var div = document.createElement("div");
            div.setAttribute("class", "col-lg-12");
            var label = document.createElement("label");
            label.setAttribute("class", "Flabel");
            label.innerText = sHeader;
            div.appendChild(label);
            attachpopupbody.appendChild(div);
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.MakeTextBlock}" + err.message, "EXCEPTION");
        }
    },

    MakeCheckBoxes: function (arrCheckboxes) {
        var attachpopupbody = document.getElementById("id_page_attachdocs_popup_body");
        var div = null, label = null, chkbox = null, textnode = null, result = null;
        var isChecked = false;
        try {
            arrCheckboxes.forEach(function (objDoc) {
                div = document.createElement("div");
                div.setAttribute("class", "col-xs-offset-1 col-xs-11 Fcheckbox");

                label = document.createElement("label");
                label.setAttribute("class", "Flabel");

                chkbox = document.createElement("input");
                chkbox.setAttribute("type", "checkbox");
                chkbox.setAttribute("id", objDoc.ID);

                if (objLayoutInformation.AttachDocuments != null && objLayoutInformation.AttachDocuments.length > 0) {
                    result = $.grep(objLayoutInformation.AttachDocuments, function (x) {
                        return x.ID == objDoc.ID;
                    });
                }
                if (result && result.length > 0) {
                    isChecked = true;
                }
                if (isChecked == true) {
                    chkbox.setAttribute("checked", "true");
                }
                chkbox.setAttribute("class", "Fchkbox");
                label.appendChild(chkbox);
                textnode = document.createTextNode(objDoc.Name)
                label.appendChild(textnode);
                div.appendChild(label);

                attachpopupbody.appendChild(div);
            });
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.MakeCheckBoxes}" + err.message, "EXCEPTION");
        }
    },

    onAttachDocsOk_Click: function () {
        var attachpopupbody = document.getElementById("id_page_attachdocs_popup_body");
        var attachpopup = document.getElementById("id_page_attachdocs_popup");
        var arrChkbox = [], m_arrAttachDocuments = [];
        var objChkbox = null;
        try {
            //check the checkboxes in Attachment popup , whchever is selcted , enter its detail in objLayoutInformation.AttachDocuments
            arrChkbox = $(attachpopupbody).find("[type=checkbox]");

            for (var iCounter = 0; iCounter < arrChkbox.length; iCounter++) {
                objChkbox = arrChkbox[iCounter];
                if (objChkbox.checked == true) {
                    m_arrAttachDocuments.push({
                        ID: objChkbox.id,
                        Name: objChkbox.labels[0].textContent,
                        Tag: null
                    });
                }
            }
            objLayoutInformation.AttachDocuments = m_arrAttachDocuments;

            //close the popup
            $(attachpopup).modal('hide');
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.AttachDocsOk_Click}" + err.message, "EXCEPTION");
        }
    },

    /////////////////
    //Set methods.

    SetPageSize: function () {
        try {
            var id_PageSetUpPreview = document.getElementById("id_PageSetUpPreview");
            if (id_PageSetUpPreview != null) {
                var id_PageType = document.getElementById("id_PageType");
                var id_PaperOrientation = FConvert.toInt(document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value);
                var id_PaperUnit = FConvert.toInt(document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value);
                var id_PageSizeLeftMargin = document.getElementById("id_PageSizeLeftMargin");
                var id_PageSizeRightMargin = document.getElementById("id_PageSizeRightMargin");
                var id_PageSizeTopMargin = document.getElementById("id_PageSizeTopMargin");
                var id_PageSizeBottomMargin = document.getElementById("id_PageSizeBottomMargin");
                var id_PageSizeLeftMarginDisplay = document.getElementById("id_PageSizeLeftMarginDisplay");
                var id_PageSizeRightMarginDisplay = document.getElementById("id_PageSizeRightMarginDisplay");
                var id_PageSizeTopMarginDisplay = document.getElementById("id_PageSizeTopMarginDisplay");
                var id_PageSizeBottomMarginDisplay = document.getElementById("id_PageSizeBottomMarginDisplay");
                var Width = 0, Height = 0;
                var HeightAndWidth = undefined;

                HeightAndWidth = id_PageType.value.split(',');
                if (id_PaperOrientation == 1) { //Landscape
                    var eleArray = null;
                    if (HeightAndWidth.length > 1) {
                        HeightAndWidth = INVOICEDESIGN.reverseArray(HeightAndWidth, ',');
                        HeightAndWidth = HeightAndWidth.substring(0, HeightAndWidth.length - 1);
                        HeightAndWidth = HeightAndWidth.split(',');
                    }
                }
                if (id_PageType != null) {
                    var id_PageSizeText = document.getElementById("id_PageSizeText");
                    var id_pagesizeunit = document.getElementById("id_pagesizeunit");
                    if (id_PageSizeText != null)
                        id_PageSizeText.innerText = id_PaperUnit == 1 ?
                            HeightAndWidth[0] + " X " + HeightAndWidth[1]
                            : FConvert.toDecimal((HeightAndWidth[0] * 2.54), 2) + " X " + FConvert.toDecimal((HeightAndWidth[1] * 2.54), 2);
                    id_pagesizeunit.innerText = id_PaperUnit == 1 ? "Inch" : "Cm";
                }

                if (HeightAndWidth != undefined) {
                    Width = INVOICEDESIGN.InchesToPixels(HeightAndWidth[0]);
                    Height = INVOICEDESIGN.InchesToPixels(HeightAndWidth[1]);
                    id_PageSetUpPreview.children[0].style.width = (Width) / 4 + "px";
                    id_PageSetUpPreview.children[0].style.height = (Height) / 4 + "px";
                }

                if (id_PaperUnit == 1) { //Inches
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value;

                    LeftMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeBottomMargin.value);
                }
                else { //Centimeter
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value / 2.54;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value / 2.54;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value / 2.54;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value / 2.54;

                    LeftMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeBottomMargin.value);
                }
                id_PageSetUpPreview.style.paddingLeft = (LeftMargin) + "px";
                id_PageSetUpPreview.style.paddingRight = (RightMargin) + "px";
                id_PageSetUpPreview.style.paddingTop = (TopMargin) + "px";
                id_PageSetUpPreview.style.paddingBottom = (BottomMargin) + "px";
                INVOICEDESIGN.setValuetoPrintInfoObject(parseFloat(id_PageSizeLeftMargin.value), parseFloat(id_PageSizeRightMargin.value), parseFloat(id_PageSizeTopMargin.value), parseFloat(id_PageSizeBottomMargin.value), parseFloat((id_PaperOrientation == 0 ? HeightAndWidth[1] : HeightAndWidth[0])), parseFloat((id_PaperOrientation == 0 ? HeightAndWidth[0] : HeightAndWidth[1])), id_PaperUnit == 1 ? 1 : 0, id_PaperOrientation == 0 ? 0 : 1);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetPageSize}" + err.message.toString(), "Exception");
        }
    },

    SetPageSizeforOrientation: function () {
        var paperSizeWidth = document.getElementById("id_papersize_width");
        var paperSizeHeight = document.getElementById("id_papersize_height");
        try {
            var id_PageSetUpPreview = document.getElementById("id_PageSetUpPreview");
            if (id_PageSetUpPreview != null) {
                var id_PageType = document.getElementById("id_PageType");
                var id_PaperOrientation = FConvert.toInt(document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value);
                var id_PaperUnit = FConvert.toInt(document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value);
                var id_PageSizeLeftMargin = document.getElementById("id_PageSizeLeftMargin");
                var id_PageSizeRightMargin = document.getElementById("id_PageSizeRightMargin");
                var id_PageSizeTopMargin = document.getElementById("id_PageSizeTopMargin");
                var id_PageSizeBottomMargin = document.getElementById("id_PageSizeBottomMargin");
                var id_PageSizeLeftMarginDisplay = document.getElementById("id_PageSizeLeftMarginDisplay");
                var id_PageSizeRightMarginDisplay = document.getElementById("id_PageSizeRightMarginDisplay");
                var id_PageSizeTopMarginDisplay = document.getElementById("id_PageSizeTopMarginDisplay");
                var id_PageSizeBottomMarginDisplay = document.getElementById("id_PageSizeBottomMarginDisplay");
                var Width = 0, Height = 0;
                var oldWidthAndHeight = undefined, newWidthAndHeight = undefined;
                if (id_PageType.selectedOptions[0].textContent == "Custom...") {
                    oldWidthAndHeight = [];
                    oldWidthAndHeight.push(paperSizeWidth.value);
                    oldWidthAndHeight.push(paperSizeHeight.value);
                }
                else {
                    oldWidthAndHeight = id_PageType.value.split(',');
                }
                if (oldWidthAndHeight.length > 1) {
                    if (id_PaperOrientation == 1) { //Landscape
                        newWidthAndHeight = INVOICEDESIGN.reverseArray(oldWidthAndHeight, ','); // reverse as given
                        newWidthAndHeight = newWidthAndHeight.substring(0, newWidthAndHeight.length - 1);
                        newWidthAndHeight = newWidthAndHeight.split(',');
                    }
                    else {//Potrait
                        newWidthAndHeight = oldWidthAndHeight; // same as given
                    }
                }

                if (id_PageType != null) {
                    var id_PageSizeText = document.getElementById("id_PageSizeText");
                    var id_pagesizeunit = document.getElementById("id_pagesizeunit");
                    if (id_PageSizeText != null) {
                        id_PageSizeText.innerText = id_PaperUnit == 1 ?
                                                    "(" + newWidthAndHeight[0] + " x " + newWidthAndHeight[1] + ")"
                                                    : "(" + FConvert.toDecimal((newWidthAndHeight[0] * 2.54), 2) + " x " + FConvert.toDecimal((newWidthAndHeight[1] * 2.54), 2) + ")";
                        id_pagesizeunit.innerText = id_PaperUnit == 1 ? "Inch" : "Cm";
                        paperSizeWidth.value = oldWidthAndHeight[0];
                        paperSizeHeight.value = oldWidthAndHeight[1];
                    }
                    if (id_PageType.options[id_PageType.selectedIndex].textContent == "Custom...") {
                        paperSizeWidth.removeAttribute("disabled");
                        paperSizeHeight.removeAttribute("disabled");
                    }
                    else {
                        paperSizeWidth.setAttribute("disabled", "true");
                        paperSizeHeight.setAttribute("disabled", "true");
                    }
                }

                if (newWidthAndHeight != undefined) {
                    Width = INVOICEDESIGN.InchesToPixels(newWidthAndHeight[0]);
                    Height = INVOICEDESIGN.InchesToPixels(newWidthAndHeight[1]);
                    id_PageSetUpPreview.children[0].style.width = (Width) / 4 + "px";
                    id_PageSetUpPreview.children[0].style.height = (Height) / 4 + "px";
                }

                if (id_PaperUnit == 1) { //Inches
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value;

                    LeftMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeBottomMargin.value);
                }
                else { //Centimeter
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value / 2.54;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value / 2.54;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value / 2.54;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value / 2.54;

                    LeftMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeBottomMargin.value);
                }

                id_PageSetUpPreview.style.paddingLeft = (LeftMargin) / 5 + "px";
                id_PageSetUpPreview.style.paddingRight = (RightMargin) / 5 + "px";
                id_PageSetUpPreview.style.paddingTop = (TopMargin) / 5 + "px";
                id_PageSetUpPreview.style.paddingBottom = (BottomMargin) / 5 + "px";
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetPageSizeforOrientation}" + err.message.toString(), "Exception");
        }
    },

    SetPageSizeonUnitChange: function () {
        try {
            var id_PageSetUpPreview = document.getElementById("id_PageSetUpPreview");
            if (id_PageSetUpPreview != null) {
                var id_PageType = document.getElementById("id_PageType");
                var id_PaperOrientation = FConvert.toInt(document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value);
                var id_PaperUnit = FConvert.toInt(document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value);
                var id_PageSizeLeftMargin = document.getElementById("id_PageSizeLeftMargin");
                var id_PageSizeRightMargin = document.getElementById("id_PageSizeRightMargin");
                var id_PageSizeTopMargin = document.getElementById("id_PageSizeTopMargin");
                var id_PageSizeBottomMargin = document.getElementById("id_PageSizeBottomMargin");
                var id_PageSizeLeftMarginDisplay = document.getElementById("id_PageSizeLeftMarginDisplay");
                var id_PageSizeRightMarginDisplay = document.getElementById("id_PageSizeRightMarginDisplay");
                var id_PageSizeTopMarginDisplay = document.getElementById("id_PageSizeTopMarginDisplay");
                var id_PageSizeBottomMarginDisplay = document.getElementById("id_PageSizeBottomMarginDisplay");
                var id_pagesizeunit = document.getElementById("id_pagesizeunit");

                if (id_PaperUnit == 1) { //Inches
                    id_PageSizeLeftMarginDisplay.value = id_PageSizeLeftMargin.value;
                    id_PageSizeRightMarginDisplay.value = id_PageSizeRightMargin.value;
                    id_PageSizeTopMarginDisplay.value = id_PageSizeTopMargin.value;
                    id_PageSizeBottomMarginDisplay.value = id_PageSizeBottomMargin.value;

                    LeftMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeBottomMargin.value);

                    id_pagesizeunit.innerText = "Inch";

                }
                else { //Centimeter
                    id_PageSizeLeftMarginDisplay.value = parseFloat(id_PageSizeLeftMargin.value * 2.54);
                    id_PageSizeRightMarginDisplay.value = parseFloat(id_PageSizeRightMargin.value * 2.54);
                    id_PageSizeTopMarginDisplay.value = parseFloat(id_PageSizeTopMargin.value * 2.54);
                    id_PageSizeBottomMarginDisplay.value = parseFloat(id_PageSizeBottomMargin.value * 2.54);

                    LeftMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeBottomMargin.value);

                    id_pagesizeunit.innerText = "Cm";
                }

                id_PageSetUpPreview.style.paddingLeft = (LeftMargin) / 5 + "px";
                id_PageSetUpPreview.style.paddingRight = (RightMargin) / 5 + "px";
                id_PageSetUpPreview.style.paddingTop = (TopMargin) / 5 + "px";
                id_PageSetUpPreview.style.paddingBottom = (BottomMargin) / 5 + "px";
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetPageSizeonUnitChange}" + err.message.toString(), "Exception");
        }
    },

    SetPageSizeonMarginChange: function () {
        try {
            var id_PageSetUpPreview = document.getElementById("id_PageSetUpPreview");
            if (id_PageSetUpPreview != null) {
                var id_PageType = document.getElementById("id_PageType");
                var id_PaperOrientation = FConvert.toInt(document.getElementsByName("id_PaperOrientation")[0].checked ? document.getElementsByName("id_PaperOrientation")[0].value : document.getElementsByName("id_PaperOrientation")[1].value);
                var id_PaperUnit = FConvert.toInt(document.getElementsByName("id_PaperUnit")[0].checked ? document.getElementsByName("id_PaperUnit")[0].value : document.getElementsByName("id_PaperUnit")[1].value);
                var id_PageSizeLeftMargin = document.getElementById("id_PageSizeLeftMargin");
                var id_PageSizeRightMargin = document.getElementById("id_PageSizeRightMargin");
                var id_PageSizeTopMargin = document.getElementById("id_PageSizeTopMargin");
                var id_PageSizeBottomMargin = document.getElementById("id_PageSizeBottomMargin");
                var id_PageSizeLeftMarginDisplay = document.getElementById("id_PageSizeLeftMarginDisplay");
                var id_PageSizeRightMarginDisplay = document.getElementById("id_PageSizeRightMarginDisplay");
                var id_PageSizeTopMarginDisplay = document.getElementById("id_PageSizeTopMarginDisplay");
                var id_PageSizeBottomMarginDisplay = document.getElementById("id_PageSizeBottomMarginDisplay");
                var HeightAndWidth = undefined;

                HeightAndWidth = id_PageType.value.split(',');
                if (id_PaperOrientation == 1) { //Landscape
                    var eleArray = null;
                    if (HeightAndWidth.length > 1) {
                        HeightAndWidth = INVOICEDESIGN.reverseArray(HeightAndWidth, ',');
                        HeightAndWidth = HeightAndWidth.substring(0, HeightAndWidth.length - 1);
                        HeightAndWidth = HeightAndWidth.split(',');
                    }
                }

                if (id_PaperUnit == 1) { //Inches
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value;

                    LeftMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.InchesToPixels(id_PageSizeBottomMargin.value);
                }
                else { //Centimeter
                    id_PageSizeLeftMargin.value = id_PageSizeLeftMarginDisplay.value / 2.54;
                    id_PageSizeRightMargin.value = id_PageSizeRightMarginDisplay.value / 2.54;
                    id_PageSizeTopMargin.value = id_PageSizeTopMarginDisplay.value / 2.54;
                    id_PageSizeBottomMargin.value = id_PageSizeBottomMarginDisplay.value / 2.54;

                    LeftMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeLeftMargin.value);
                    RightMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeRightMargin.value);
                    TopMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeTopMargin.value);
                    BottomMargin = INVOICEDESIGN.CentiMeterToPixel(id_PageSizeBottomMargin.value);
                }
                id_PageSetUpPreview.style.paddingLeft = (LeftMargin) + "px";
                id_PageSetUpPreview.style.paddingRight = (RightMargin) + "px";
                id_PageSetUpPreview.style.paddingTop = (TopMargin) + "px";
                id_PageSetUpPreview.style.paddingBottom = (BottomMargin) + "px";
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetPageSizeonMarginChange}" + err.message.toString(), "Exception");
        }
    },

    //Internal
    setValuetoPrintInfoObject: function (ftPageSizeLeftMargin, ftPageSizeRightMargin, ftPageSizeTopMargin, ftPageSizeBottomMargin, ftPageHeight, ftPageWidth, iUnit, iView) {
        objPrintInfo = {
            Margin: {
                Left: ftPageSizeLeftMargin,
                Right: ftPageSizeRightMargin,
                Top: ftPageSizeTopMargin,
                Bottom: ftPageSizeBottomMargin
            },
            PageHeight: ftPageHeight,
            PageWidth: ftPageWidth,
            Unit: iUnit,
            View: iView
        };
    },

    //Interal method to set the saved values to the control while loading the layout.
    SetControlProperty: function (FieldPropertiesObject, CTRLTYPE, control) {
        try {

            var newfocus10marginadjustment = 0;//in px//in inches 0.5in
            if (SelectedField != undefined) {
                var iCtrlType = FConvert.toInt(SelectedField.getAttribute('data-controltype'));
                for (key in FieldPropertiesObject) {
                    switch (key) {
                        case PROPERTY.Left:
                            if (control == undefined) { INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + "px"); }
                            else {
                                if (control.style.left == "") {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + newfocus10marginadjustment + "px");
                                }
                                else {
                                    //if (control.id.includes("Area_") == false)
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), (FieldPropertiesObject[key] - FConvert.toDecimal(control.style.left)) + "px");
                                }
                            }
                            break;
                        case PROPERTY.Top:
                            if (control == undefined) { INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + "px"); }
                            else {
                                if (control.style.top == "") {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + newfocus10marginadjustment + "px");
                                }
                                else {
                                    //if (control.id.includes("Area_") == false)
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), (FieldPropertiesObject[key] - FConvert.toDecimal(control.style.top)) + "px");
                                }
                            }
                            break;
                        case PROPERTY.Width:
                            if (parseInt(FieldPropertiesObject[key]) == 0) {
                                INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), "100px");
                            }
                            else {
                                INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + "px");
                            }
                            break;
                        case PROPERTY.Height:
                            if (controlType == CONTROLTYPE.Line || SelectedField.id.includes("Line") == true) {
                                if (FieldPropertiesObject["Width"] <= 0) {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + "px");
                                }
                                else {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), "0px");
                                }
                            }
                            else {
                                if (parseInt(FieldPropertiesObject[key]) == 0) {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), "50px");
                                }
                                else {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, key.toLowerCase(), FieldPropertiesObject[key] + "px");
                                }
                            }
                            break;
                        case PROPERTY.BorderColor:
                            if (parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                var borderProperties = SelectedField.style.border.split(' ');
                                borderProperties[2] = INVOICEDESIGN.GetFontText(FieldPropertiesObject[key]);
                                INVOICEDESIGN.SetFieldProperty(SelectedField, "border", borderProperties.join(' '));
                            }
                            break;
                        case PROPERTY.BorderThickness:
                            if (parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                var borderProperties = SelectedField.style.border.split(' ');
                                borderProperties[0] = FieldPropertiesObject[key] + "px";
                                if (parseInt(SelectedField.dataset.controltype) == CONTROLTYPE.Rectangle && parseFloat(FieldPropertiesObject[key]) < 2) {
                                    borderProperties[0] = "2px";
                                }
                                INVOICEDESIGN.SetFieldProperty(SelectedField, "border", borderProperties.join(' '));
                            }
                            break;
                        case PROPERTY.IsImageBackground:
                            var strImage = "";
                            if (parseInt(SelectedField.dataset.controltype) == CONTROLTYPE.Image) {
                                if (FieldPropertiesObject[key] == 0) {// Image background = false

                                }
                                else {//1 -- Image background = true

                                }
                                if (FieldPropertiesObject.VariableType == 0) {//Image background = false
                                    //show bitmap ele
                                    SelectedField.style.visibility = "";
                                    INVOICEDESIGN.SetFieldProperty(SelectedField.parentElement, "background-image", "");
                                    INVOICEDESIGN.SetFieldProperty(SelectedField.parentElement, "background-repeat", "")
                                    INVOICEDESIGN.SetFieldProperty(SelectedField.parentElement, "background-size", "")
                                    SelectedField.parentElement.setAttribute("data-bitmapid", "");
                                }
                                else if (FieldPropertiesObject.VariableType == 1) {//1 -- Image background = true
                                    strImage = "url(" + $(SelectedField).children("img").attr("src").replace(/\n/g, '') + ")";
                                    INVOICEDESIGN.SetFieldProperty(SelectedField.parentElement, "background-image", strImage);
                                    INVOICEDESIGN.SetFieldProperty(SelectedField.parentElement, "background-repeat", "no-repeat")
                                    INVOICEDESIGN.SetFieldProperty(SelectedField.parentElement, "background-size", "100% 100%")
                                    SelectedField.parentElement.setAttribute("data-bitmapid", SelectedField.id);

                                    //hide bitmap ele
                                    SelectedField.style.visibility = "hidden";
                                }
                            }
                            break;
                        case PROPERTY.BackColor:
                            if (parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                if (FieldPropertiesObject[key] == objDefaultFont.Background) {
                                    if (iCtrlType == CONTROLTYPE.Textblock)
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "background-color", "rgb(127, 174, 212)");
                                    if (iCtrlType == CONTROLTYPE.Formula)
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "background-color", "rgb(193, 245, 146)");
                                }
                                else {
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "background-color", INVOICEDESIGN.GetFontText(FieldPropertiesObject[key]));
                                }
                            }
                            break;
                        case PROPERTY.IsSkipLineBetweenRow:
                            break;
                        case PROPERTY.ShowGridLineType:
                            break;
                        case PROPERTY.IsSkipPageAfterInvoice:
                            break;
                        case PROPERTY.IsPrefixColumnNamePUPC:
                            break;
                        case PROPERTY.IsBodyLengthVariable:
                            break;
                        case PROPERTY.IsDisplayPrevPageBalance:
                            break;
                        case PROPERTY.IsAddBalbfToPageTotal:
                            break;
                        case PROPERTY.IsDonotPrintPartialItem:
                            break;
                        case PROPERTY.IsHideItemUnderItemSet:
                            break;
                        case PROPERTY.BodyPositionIfHeaderSkip:
                            break;
                        case PROPERTY.IsPrintTotalOnEveryPage:
                            break;
                        case PROPERTY.IsPrintTotalInsideGrid:
                            break;
                        case PROPERTY.IsDoNotShowGridHeader:
                            break;
                        case PROPERTY.GroupBy:
                            break;
                        case PROPERTY.OrderBy:
                            break;
                        case PROPERTY.ClubBy:
                            break;
                        case PROPERTY.DefaultFont:
                            break;
                        case PROPERTY.HeadingFont:
                            break;
                        case PROPERTY.TotalFont:
                            break;
                        case PROPERTY.ExternalModuleNamespace:
                            break;
                        case PROPERTY.ExternalModuleClass:
                            break;
                        case PROPERTY.ExternalModuleFunction:
                            break;
                        case PROPERTY.Alias:
                            INVOICEDESIGN.SetFieldProperty(SelectedField, "textContent", FieldPropertiesObject[key]);
                            break;
                        case PROPERTY.Heading2:
                            break;
                        case PROPERTY.Formula:
                            break;
                        case PROPERTY.ColumnWidth:
                            INVOICEDESIGN.SetFieldProperty(SelectedField, "width", FieldPropertiesObject[key] + "px");
                            break;
                        case PROPERTY.DecimalInColumn:
                            break;
                        case PROPERTY.PixelInLinesWordWrap:
                            break;
                        case PROPERTY.DontShowTotal:
                            break;
                        case PROPERTY.InsertComma:
                            break;
                        case PROPERTY.Sign:
                            break;
                        case PROPERTY.HideColumn:
                            break;
                        case PROPERTY.WordWrap:
                            switch (FieldPropertiesObject[key]) {
                                case "true":
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "word-wrap", "normal");
                                    break;
                                case "false":
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "word-wrap", "break-word");
                                    break;
                            }
                            break;
                        case PROPERTY.PrintUnderPreviousColumn:
                            break;
                        case PROPERTY.PrintInLine2:
                            break;
                        case PROPERTY.Alignment:
                            if (parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-align", "left");
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-align", "center");
                                        break;
                                    case 2:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-align", "right");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.HeadingAlignment:
                            switch (parseInt(FieldPropertiesObject[key])) {
                                case 0:
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "textAlign", "left");
                                    break;
                                case 1:
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "textAlign", "center");
                                    break;
                                case 2:
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "textAlign", "right");
                                    break;
                            }
                            break;
                        case PROPERTY.ColumnFont:
                            if (parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyCanvas && parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                if (FieldPropertiesObject[key] != null) {
                                    var objFont = FieldPropertiesObject[key]
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "background-color", INVOICEDESIGN.GetFontText(objFont.Background));
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "color", INVOICEDESIGN.GetFontText(objFont.Foreground));
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "font-family", objFont.FontFamily);
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "font-size", objFont.FontSize + "px");
                                    switch (parseInt(objFont.FontStyle)) {
                                        case 0:
                                            INVOICEDESIGN.SetFieldProperty(SelectedField, "font-weight", "regular");
                                            break;
                                        case 1:
                                            INVOICEDESIGN.SetFieldProperty(SelectedField, "font-weight", "bold");
                                            break;
                                    }
                                    switch (parseInt(objFont.FontWeight)) {
                                        case 0:
                                            INVOICEDESIGN.SetFieldProperty(SelectedField, "font-weight", "regular");
                                            break;
                                        case 1:
                                            INVOICEDESIGN.SetFieldProperty(SelectedField, "font-weight", "bold");
                                            break;
                                    }
                                    INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "");
                                    if (parseInt(objFont.BaseLine) == 1)
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "initial");
                                    if (parseInt(objFont.OverLine) == 2)
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "overline");
                                    if (parseInt(objFont.StrikeThrough) == 3)
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "line-through");
                                    if (parseInt(objFont.UnderLine) == 4)
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "underline");
                                }
                            }
                            break;
                        case PROPERTY.ColumnCondition:
                            break;
                        case PROPERTY.Text:
                            var text = document.createTextNode(FieldPropertiesObject[key]);
                            var cache = $(SelectedField).children();
                            switch (iCtrlType) {
                                case CONTROLTYPE.Statictext: //in order to preserve the child nodes
                                case CONTROLTYPE.Textblock:
                                case CONTROLTYPE.Formula:
                                    if (FCommon.String.isNullOrEmpty(FieldPropertiesObject[key]) == false) {
                                        $(SelectedField).append(cache);
                                        $(SelectedField).children("p").append(text)
                                    }
                                    break;
                                case CONTROLTYPE.ApprovalHistory:
                                case CONTROLTYPE.PostingDetails:
                                    if (FCommon.String.isNullOrEmpty(FieldPropertiesObject[key]) == false) {
                                        $(SelectedField).append(text).append(cache);
                                    }
                                    break;
                                default:
                                    if (FCommon.String.isNullOrEmpty(FieldPropertiesObject[key]) == false) {
                                        SelectedField.textContent = FieldPropertiesObject[key];
                                    }
                                    break;
                            }
                            if (iCtrlType == CONTROLTYPE.Statictext) {
                                //check if text is english or arabic , if english , then set direction to ltr
                                var isEnglish = INVOICEDESIGN.isEnglishText(FieldPropertiesObject[key]);
                                if (isEnglish) {
                                    SelectedField.style.direction = "ltr";
                                }
                            }
                            break;
                        case PROPERTY.TotalRow:
                            break;
                        case PROPERTY.TotalColumn:
                            break;
                        case PROPERTY.Align:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "dir", "ltr");
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "dir", "rtl");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.IsEditable:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "readonly", false);
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "readonly", true);
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.Condition:
                            break;
                        case PROPERTY.DisplayBorder:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "border", "");
                                        break;
                                    case 1:
                                        if (SelectedField.style.border.length == 0)
                                            INVOICEDESIGN.SetFieldProperty(SelectedField, "border", "1px solid block");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.PageSelect:
                            break;
                        case PROPERTY.AutoExpand:
                            break;
                        case PROPERTY.IgnorePageAfterPreviousPage:
                            break;
                        case PROPERTY.FunctionType:
                            break;
                        case PROPERTY.AmountInWords:
                            break;
                        case PROPERTY.RoundOffType:
                            break;
                        case PROPERTY.RoundUptoValue:
                            break;
                        case PROPERTY.SuffixForAmtInWords:
                            break;
                        case PROPERTY.Prefix:
                            break;
                        case PROPERTY.Labelforzerovalue:
                            break;
                        case PROPERTY.Sign:
                            break;
                        case PROPERTY.CaseStyle:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && parseInt(SelectedField.dataset.controltype) != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-transform", "capitalize");
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-transform", "uppercase");
                                        break;
                                    case 2:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-transform", "lowercase");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.TextColor:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                INVOICEDESIGN.SetFieldProperty(SelectedField, "color", INVOICEDESIGN.GetFontText(FieldPropertiesObject[key]));
                            }
                            break;
                        case PROPERTY.TextFont:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                INVOICEDESIGN.SetFieldProperty(SelectedField, "font-family", FieldPropertiesObject[key]);
                            }
                            break;
                        case PROPERTY.FontSize:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                INVOICEDESIGN.SetFieldProperty(SelectedField, "font-size", FieldPropertiesObject[key] + "px");
                            }
                            break;
                        case PROPERTY.FontWeight:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "font-weight", "regular");
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "font-weight", "bold");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.FontStyle:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "font-style", "regular");
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "font-style", "italic");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.FontEffect:
                            if (iCtrlType != CONTROLTYPE.BodyCanvas && iCtrlType != CONTROLTYPE.BodyColumn) {
                                switch (parseInt(FieldPropertiesObject[key])) {
                                    case 0:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "");
                                        break;
                                    case 1:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "initial");
                                        break;
                                    case 2:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "overline");
                                        break;
                                    case 3:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "underline");
                                        break;
                                    case 4:
                                        INVOICEDESIGN.SetFieldProperty(SelectedField, "text-decoration", "line-through");
                                        break;
                                }
                            }
                            break;
                        case PROPERTY.ReportType:
                            break;
                        case PROPERTY.DefaultPrinter:
                            break;
                        case PROPERTY.NoOfCopies:
                            break;
                        case PROPERTY.IsPrintInDraftMode:
                            break;
                        case PROPERTY.IsDonotPrintQuantityforModifiers:
                            break;
                        case PROPERTY.IsPageAfterPreviousPage:
                            break;
                        case PROPERTY.AttachDocuments:
                            break;
                        case PROPERTY.ModifierOption:
                            break;
                        case PROPERTY.IsSuspendNet:
                            break;
                        case PROPERTY.ColumnHeight:
                            break;
                        case PROPERTY.HorizontalGap:
                            break;
                        case PROPERTY.VerticalGap:
                            break;
                        case PROPERTY.RowsPerPage:
                            break;
                        case PROPERTY.ColumnsPerPage:
                            break;
                        case PROPERTY.Column:
                            break;
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetControlProperty}" + err.message, "Exception");
        }
    },

    SetHeight: function () {

        var layoutDiv = document.getElementById("InvoiceDesignMainDiv");
        var id_PrintPreview = document.getElementById("id_PrintPreview");
        var InvoiceDesignFields = document.getElementById("InvoiceDesignFields");
        var InvoiceDesignFieldProperties = document.getElementById("InvoiceDesignFieldProperties");
        var pageHeight = GLOBAL.getPageHeight();
        if (layoutDiv != null) {
            layoutDiv.style.height = (pageHeight - layoutDiv.getBoundingClientRect().top) + 45 + "px";
            id_PrintPreview.style.height = (pageHeight - layoutDiv.getBoundingClientRect().top) + 45 + "px";

            InvoiceDesignFields.style.height = (pageHeight - InvoiceDesignFields.getBoundingClientRect().top) + "px";
            InvoiceDesignFields.style.overflow = "Auto";
            InvoiceDesignFieldProperties.style.height = (pageHeight - InvoiceDesignFields.getBoundingClientRect().top) + "px";
            InvoiceDesignFieldProperties.style.overflow = "Auto";
        }

        var id_PageSetupBody = document.getElementById("id_PageSetupBody");
        var EmailTemplateBody = document.getElementById("EmailTemplatebodydiv");
        if (id_PageSetupBody != null) {
            if (EmailTemplateBody) {
                id_PageSetupBody.style.height = ((pageHeight - id_PageSetupBody.getBoundingClientRect().top) + 20) + "px";
            }
            else {
                id_PageSetupBody.style.height = ((pageHeight - id_PageSetupBody.getBoundingClientRect().top) - 150) + "px";
            }
        }
    },

    setImageHeightWidth: function (ele) {
        if (resizeImage == true) {
            var imageEle = document.getElementById("imageEle_" + ele.id.substring(ele.id.lastIndexOf("_") + 1));
            imageEle.style.height = ele.style.height;
            imageEle.style.width = ele.style.width;
        }
    },

    setAreaControlPosition: function (ele, e) {
        if (SetAreaCtrlPos = true) {

        }
    },

    SetDialogTitle: function (title) {
        document.getElementById("popup_title").textContent = title;
    },

    SetLayoutsToPopUpDialog: function (arrLayouts, Hidelist) {
        try {
            var ul_layouts = document.getElementById(INVOICEDESIGN.GetLayoutsUlId());
            ul_layouts.innerHTML = "";
            if (arrLayouts != null && arrLayouts.length > 0) {
                for (key in arrLayouts) {
                    var li = document.createElement("li");
                    li.textContent = arrLayouts[key].Name;
                    li.id = arrLayouts[key].ID;
                    li.style.padding = "3px";
                    li.style.cursor = "pointer";
                    li.setAttribute("onclick", "INVOICEDESIGN.Selectlayout(this)");
                    ul_layouts.appendChild(li);
                }
            }

            if (Hidelist == true) {
                ul_layouts.style.display = "none";
            }
            else {
                ul_layouts.style.display = "";
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetLayoutsToPopUpDialog}" + err.message.toString(), "Exception");
        }
    },

    SetOpenControlDialogOkEventName: function (EventName, ButtonId) {
        var id_FontDialogOkBtn = document.getElementById(ButtonId);
        if (id_FontDialogOkBtn != null) {
            id_FontDialogOkBtn.setAttribute("onclick", EventName);
        }
    },

    SetFontToColumnObject: function (PropertyObject) {
        PropertyObject = document.getElementById(PropertyObject);
        var objFont = FONTDIALOG.getFontData("FontControl");

        if (SelectedField != undefined) {
            var UID = 0;
            var ColumnIndex = undefined;
            if (parseInt(SelectedField.dataset.controltype) == CONTROLTYPE.BodyCanvas) {
                UID = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
            }
            else {
                UID = SelectedField.dataset.bodyid;
                ColumnIndex = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
            }
            INVOICEDESIGN.SetColumnPropertyValue(UID, ColumnIndex, PropertyObject.dataset.bindingname, objFont);
        }
        FONTDIALOG.setFontData("FontControl", objDefaultFont);
        INVOICEDESIGN.SetControlProperty(objFont);
        PropertyObject.parentNode.children[0].textContent = objFont.FontFamily + ',' + objFont.FontSize;
        $("#id_FontDialog").modal('hide');
    },

    SetFilterToColumnObject: function (PropertyObject) {
        PropertyObject = document.getElementById(PropertyObject);
        var objFilterObj = FILTER.getFilterValue(iVoucherType, 100);
        if (SelectedField != undefined) {
            var UID = 0;
            var ColumnIndex = undefined;
            if (parseInt(SelectedField.dataset.controltype) == CONTROLTYPE.BodyCanvas) {
                UID = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
            }
            else {
                UID = SelectedField.dataset.bodyid;
                ColumnIndex = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
            }
            INVOICEDESIGN.SetColumnPropertyValue(UID, ColumnIndex, PropertyObject.dataset.bindingname == "ColumnCondition" ? "Condition" : PropertyObject.dataset.bindingname, objFilterObj);
        }
        FILTER.Clear(iVoucherType, 100, false);
        var arrFilterValue = INVOICEDESIGN.ConvertFilterObjToString(objFilterObj);
        PropertyObject.parentNode.children[0].textContent = arrFilterValue;
        $("#id_FilterControl").modal('hide');
    },

    SetOrderByToColumnObject: function (PropertyObject) {
        try {
            PropertyObject = document.getElementById(PropertyObject);
            var objOrderBy = INVOICEDESIGN.GetOrderByValue();
            if (SelectedField != undefined) {
                var UID = 0;
                var ColumnIndex = undefined;
                if (parseInt(SelectedField.dataset.controltype) == CONTROLTYPE.BodyCanvas) {
                    UID = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
                }
                else {
                    UID = SelectedField.dataset.bodyid;
                    ColumnIndex = SelectedField.id.split('_')[SelectedField.id.split('_').length - 1];
                }
                INVOICEDESIGN.SetColumnPropertyValue(UID, ColumnIndex, PropertyObject.dataset.bindingname, objOrderBy);
            }
            var strOrdeBy = INVOICEDESIGN.ConvertOrderByObjToString(objOrderBy);
            PropertyObject.parentNode.children[0].textContent = strOrdeBy;
            $("#id_OrderByControl").modal('hide');
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetOrderByToColumnObject}" + err.message.toString(), "Exception");
        }
    },

    //Internal method to set the saved values in the respective control properties tab.
    SetFieldPropertiesInObject: function (eleSelectedField) {
        ;
        var eleTable = null;
        var UID = null;
        try {
            if (FConvert.toInt(eleSelectedField.getAttribute('data-datatype')) == 10) {
                if (eleSelectedField.nodeName.toLowerCase() == "table") {
                    eleTable = eleSelectedField;
                }
                else if (eleSelectedField.nodeName.toLowerCase() == "div") {
                    eleTable = eleSelectedField.children[0];
                }
                UID = parseInt(eleTable.id.split('_')[eleTable.id.split('_').length - 1]);
            }
            else {
                if (eleSelectedField.nodeName.toLowerCase() == "th") {
                    if (eleSelectedField.hasAttribute("data-bodyid")) {
                        UID = eleSelectedField.getAttribute("data-bodyid");
                    }
                }
                else {
                    UID = parseInt(eleSelectedField.id.split('_')[eleSelectedField.id.split('_').length - 1]);
                }
            }
            iCurrentPage = FConvert.toInt(eleSelectedField.getAttribute('data-pageno'));
            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                var objPageHeader = undefined;
                if (SelectedField != undefined && SelectedField.id.indexOf("BodyColumn") > -1) {
                    var ParentBodyId = null;
                    if (SelectedField.dataset != undefined) {
                        ParentBodyId = SelectedField.dataset.bodyid;
                    }
                    objPageHeader = INVOICEDESIGN.GetField(ParentBodyId);
                    var columnIndex = 0;
                    columnIndex = parseInt(eleSelectedField.id.split('_')[eleSelectedField.id.split('_').length - 1]);
                    if (objPageHeader != null && objPageHeader.PageBody != null) {
                        for (var iCount = 0; iCount < objPageHeader.PageBody.length; iCount++) {
                            // since after interchanging columns positions , their index will change , and recognising them with columnIndex property
                            if (objPageHeader.PageBody[iCount].ColumnIndex == columnIndex) {
                                objPageHeader = objPageHeader.PageBody[iCount];
                                break;
                            }
                        }
                    }
                }
                else if (SelectedField != undefined && SelectedField.id.indexOf('LayoutDiv') > -1) {
                    objPageHeader = objLayoutInformation;
                }
                else {
                    objPageHeader = INVOICEDESIGN.GetField(UID);
                }
                var fieldDataType = FConvert.toInt(eleSelectedField.getAttribute('data-controltype'));
                if (SelectedField != undefined && SelectedField != null && objPageHeader != undefined) {
                    var arrFieldProporties = document.getElementsByName("property_" + UID);
                    var eleMaster = null;
                    for (icount = 0; icount < arrFieldProporties.length; icount++) {
                        switch (arrFieldProporties[icount].dataset.bindingname) {
                            case PROPERTY.Left:
                                if (objPageHeader.Left == 0) {
                                    arrFieldProporties[icount].value = objPageHeader.Left = SelectedField.style.left.substr(0, SelectedField.style.left.length - 2);
                                }
                                else {
                                    // if (objPageHeader.MasterId > 0) {
                                    //    var objAreaPageHeaderleft = INVOICEDESIGN.GetField(objPageHeader.MasterId);
                                    //    arrFieldProporties[icount].value = objPageHeader.Left - objAreaPageHeaderleft.Left;
                                    //}
                                    //else
                                    //{
                                    arrFieldProporties[icount].value = SelectedField.style.left.substr(0, SelectedField.style.left.length - 2);
                                }
                                break;
                            case PROPERTY.Top:
                                if (objPageHeader.Top == 0) {
                                    arrFieldProporties[icount].value = objPageHeader.Top = SelectedField.style.top.substr(0, SelectedField.style.top.length - 2);
                                }
                                else {
                                    arrFieldProporties[icount].value = SelectedField.style.top.substr(0, SelectedField.style.top.length - 2);
                                }

                                //if (parseInt(objPageHeader.MasterId) > 0 && FConvert.toInt(SelectedField.getAttribute('data-isnew')) != 1) {
                                //    eleMaster = document.getElementById(INVOICEDESIGN.getAreaControlId(parseInt(objPageHeader.MasterId), iCurrentPage));
                                //    if (FCommon.UI.isValidObject(eleMaster)) {
                                //        arrFieldProporties[icount].value = (FConvert.toDecimal(objPageHeader.Top) + FConvert.toDecimal(eleMaster.style.top));
                                //    }
                                //}
                                //else {
                                //    if (objPageHeader.Top == 0) {
                                //        arrFieldProporties[icount].value = objPageHeader.Top = SelectedField.style.top.substr(0, SelectedField.style.top.length - 2);
                                //    }
                                //    else {
                                //        arrFieldProporties[icount].value = objPageHeader.Top;
                                //    }
                                //}

                                break;
                            case PROPERTY.Width:
                                if (FConvert.toInt(eleSelectedField.getAttribute('data-controltype')) == 10) {
                                    arrFieldProporties[icount].value = FConvert.toDecimal(eleSelectedField.style.width);
                                }
                                else {
                                    if (eleSelectedField.id.indexOf("MainGrid") > -1) {
                                        arrFieldProporties[icount].value = FConvert.toDecimal(eleSelectedField.style.width);
                                    }
                                    else {
                                        if (objPageHeader.Width == 0) {
                                            arrFieldProporties[icount].value = objPageHeader.Width = SelectedField.style.width.substr(0, SelectedField.style.width.length - 2);
                                        }
                                        else {
                                            arrFieldProporties[icount].value = objPageHeader.Width;
                                        }
                                    }
                                }
                                break;
                            case PROPERTY.Height:
                                if (FConvert.toInt(eleSelectedField.getAttribute('data-controltype')) == 10) {
                                    arrFieldProporties[icount].value = FConvert.toDecimal(eleSelectedField.style.height);
                                }
                                else {
                                    if (eleSelectedField.id.indexOf("MainGrid") > -1) {
                                        arrFieldProporties[icount].value = FConvert.toDecimal(eleSelectedField.style.height);
                                    }
                                    else {
                                        if (objPageHeader.Height == 0) {
                                            arrFieldProporties[icount].value = objPageHeader.Height = SelectedField.style.height.substr(0, SelectedField.style.height.length - 2);
                                        }
                                        else {
                                            arrFieldProporties[icount].value = objPageHeader.Height;
                                        }
                                    }
                                }
                                break;
                            case PROPERTY.BorderColor:
                                arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.BorderColor);
                                break;
                            case PROPERTY.BorderThickness:
                                arrFieldProporties[icount].value = FConvert.toDecimal(objPageHeader.BorderThickness);
                                break;
                            case PROPERTY.IsAlternateRowColor:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = objPageHeader.PageBodyClass.IsAlternateRowColor ? 1 : 0;
                                }
                                break;
                            case PROPERTY.IsImageBackground:
                                arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.IsImageBackground);
                                arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.VariableType);
                                break;
                            case PROPERTY.BackColor:
                                arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.BackColor);
                                break;
                            case PROPERTY.IsSkipLineBetweenRow:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsSkipLineBetweenRow == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.ShowGridLineType:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.PageBodyClass.ShowGridLineType);
                                }
                                break;
                            case PROPERTY.IsSkipPageAfterInvoice:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsSkipPageAfterInvoice == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsPrefixColumnNamePUPC:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsPrefixColumnNamePUPC == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsBodyLengthVariable:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsBodyLengthVariable == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsDisplayPrevPageBalance:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsDisplayPrevPageBalance == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsAddBalbfToPageTotal:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsAddBalbfToPageTotal == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsDonotPrintPartialItem:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsDonotPrintPartialItem == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsHideItemUnderItemSet:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsHideItemUnderItemSet == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.BodyPositionIfHeaderSkip:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = objPageHeader.PageBodyClass.BodyPositionIfHeaderSkip;
                                }
                                break;
                            case PROPERTY.IsPrintTotalOnEveryPage:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsPrintTotalOnEveryPage == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsPrintTotalInsideGrid:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsPrintTotalInsideGrid == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.IsDoNotShowGridHeader:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = (objPageHeader.PageBodyClass.IsDoNotShowGridHeader == true ? 1 : 0);
                                }
                                break;
                            case PROPERTY.GroupBy:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined && objPageHeader.PageBodyClass.GroupByOption != null && objPageHeader.PageBodyClass.GroupByOption != undefined)
                                    arrFieldProporties[icount].textContent = INVOICEDESIGN.ConvertOrderByObjToString(objPageHeader.PageBodyClass.GroupByOption[arrFieldProporties[icount].dataset.bindingname]);
                                break;
                            case PROPERTY.OrderBy:
                                if (objPageHeader.PageBodyClass != undefined && objPageHeader.PageBodyClass != null)
                                    arrFieldProporties[icount].textContent = INVOICEDESIGN.ConvertOrderByObjToString(objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname]);
                                break;
                            case PROPERTY.ClubBy:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined && objPageHeader.PageBodyClass.ClubByOption != undefined && objPageHeader.PageBodyClass.ClubByOption != null)
                                    arrFieldProporties[icount].textContent = INVOICEDESIGN.ConvertOrderByObjToString(objPageHeader.PageBodyClass.ClubByOption[arrFieldProporties[icount].dataset.bindingname]);
                                break;
                            case PROPERTY.DefaultFont:
                            case PROPERTY.HeadingFont:
                            case PROPERTY.TotalFont:
                                if (objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname] != objDefaultFont) {
                                    if (objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname] != null && objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname] != undefined) {
                                        if (objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname].FontFamily != "" && objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname].FontSize > 2) {
                                            arrFieldProporties[icount].textContent = objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname].FontFamily + ',' + objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname].FontSize;
                                        }
                                    }
                                }
                                break;
                            case PROPERTY.ExternalModuleNamespace:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = objPageHeader.PageBodyClass[arrFieldProporties[icount].dataset.bindingname];
                                }
                                break;
                            case PROPERTY.ExternalModuleClass:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = objPageHeader.PageBodyClass.ExternalModuleClass;
                                }
                                break;
                            case PROPERTY.ExternalModuleFunction:
                                if (objPageHeader.PageBodyClass != null && objPageHeader.PageBodyClass != undefined) {
                                    arrFieldProporties[icount].value = objPageHeader.PageBodyClass.ExternalModuleFunction;
                                }
                                break;
                            case PROPERTY.Alias:
                                arrFieldProporties[icount].value = objPageHeader.Alias;
                                break;
                            case PROPERTY.Heading2:
                                arrFieldProporties[icount].value = objPageHeader.Heading2;
                                break;
                            case PROPERTY.Formula:
                                arrFieldProporties[icount].value = objPageHeader.Formula;
                                break;
                            case PROPERTY.ColumnWidth:
                                arrFieldProporties[icount].value = objPageHeader.ColumnWidth;
                                break;
                            case PROPERTY.DecimalInColumn:
                                arrFieldProporties[icount].value = objPageHeader.DecimalInColumn;
                                break;
                            case PROPERTY.PixelInLinesWordWrap:
                                arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.PixelInLinesWordWrap;
                                break;
                            case PROPERTY.DontShowTotal:
                                arrFieldProporties[icount].value = (objPageHeader.DontShowTotal == true ? 1 : 0);
                                break;
                            case PROPERTY.InsertComma:
                                if (objPageHeader.StaticTextProperties != null) {
                                    arrFieldProporties[icount].value = (objPageHeader.StaticTextProperties.InsertComma == true ? 1 : 0);
                                }
                                else {
                                    switch (fieldDataType) {
                                        case CONTROLTYPE.Statictext:
                                            if (objPageHeader.StaticTextProperties == null) {
                                                arrFieldProporties[icount].value = 0;
                                            }
                                            else {
                                                arrFieldProporties[icount].value = (objPageHeader.StaticTextProperties.InsertComma == true ? 1 : 0);
                                            }
                                            break;
                                        case CONTROLTYPE.Textblock:
                                            if (objPageHeader.StaticTextProperties == null) {
                                                arrFieldProporties[icount].value = 0;
                                            }
                                            else {
                                                arrFieldProporties[icount].value = (objPageHeader.StaticTextProperties.InsertComma == true ? 1 : 0);
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                break;
                            case PROPERTY.HideColumn:
                                arrFieldProporties[icount].value = (objPageHeader.HideColumn == true ? 1 : 0);
                                break;
                            case PROPERTY.WordWrap:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Statictext:
                                        if (objPageHeader.StaticTextProperties == null) {
                                            arrFieldProporties[icount].value = 0;
                                        }
                                        else {
                                            arrFieldProporties[icount].value = (objPageHeader.StaticTextProperties.WordWrap == true ? 1 : 0) ||
                                                (objPageHeader.WordWrap == true ? 1 : 0);
                                        }
                                        break;
                                    case CONTROLTYPE.Textblock:
                                        arrFieldProporties[icount].value = (objPageHeader.WordWrap == true ? 1 : 0);
                                        break;
                                    default:
                                        arrFieldProporties[icount].value = (objPageHeader.WordWrap == true ? 1 : 0);
                                        break;
                                }
                                break;
                            case PROPERTY.IsArabicDigit:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Statictext:
                                        if (objPageHeader.StaticTextProperties == null) {
                                            arrFieldProporties[icount].value = 0;
                                        }
                                        else {
                                            arrFieldProporties[icount].value = (objPageHeader.StaticTextProperties.IsArabicDigit == true ? 1 : 0) ||
                                                (objPageHeader.IsArabicDigit == true ? 1 : 0);
                                        }
                                        break;
                                    case CONTROLTYPE.Textblock:
                                        arrFieldProporties[icount].value = (objPageHeader.IsArabicDigit == true ? 1 : 0);
                                        break;
                                    default:
                                        arrFieldProporties[icount].value = (objPageHeader.IsArabicDigit == true ? 1 : 0);
                                        break;
                                }
                                break;
                            case PROPERTY.Suffix:
                                arrFieldProporties[icount].value = (objPageHeader.Suffix == "" ? "" : objPageHeader.Suffix);
                                break;
                            case PROPERTY.PrintUnderPreviousColumn:
                                arrFieldProporties[icount].value = (objPageHeader.PrintUnderPreviousColumn == true ? 1 : 0);
                                break;
                            case PROPERTY.PrintInLine2:
                                arrFieldProporties[icount].value = (objPageHeader.PrintInLine2 == true ? 1 : 0);
                                break;
                            case PROPERTY.Alignment:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.BodyCanvas:
                                        if (objPageHeader.PageBody != null) {
                                            arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.PageBody.Alignment);
                                        }
                                        break;
                                    case CONTROLTYPE.Statictext:
                                    case CONTROLTYPE.Textblock:
                                        if (objPageHeader.StaticTextProperties != null) {
                                            arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.StaticTextProperties.Alignment);
                                        }
                                        break;
                                    default:
                                        arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.Alignment);
                                        break;
                                }
                                break;
                            case PROPERTY.HeadingAlignment:
                                arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.HeadingAlignment);
                                break;
                            case PROPERTY.ColumnFont:
                                if (objPageHeader[arrFieldProporties[icount].dataset.bindingname] != null && objPageHeader[arrFieldProporties[icount].dataset.bindingname] != undefined)
                                    arrFieldProporties[icount].textContent = objPageHeader[arrFieldProporties[icount].dataset.bindingname].FontFamily + ',' + objPageHeader[arrFieldProporties[icount].dataset.bindingname].FontSize;
                                break;
                            case PROPERTY.ColumnCondition:
                                arrFieldProporties[icount].textContent = INVOICEDESIGN.ConvertFilterObjToString(objPageHeader["Condition"]);
                                break;
                            case PROPERTY.EnableQRCode:
                                arrFieldProporties[icount].value = (objPageHeader.VariableType == VARIABLETYPE.QRCode) ? "1" : "0";
                                break;
                            case PROPERTY.Text:
                                arrFieldProporties[icount].value = objPageHeader.Text == null ? "" : objPageHeader.Text;
                                break;
                            case PROPERTY.TotalRow:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Table:
                                        arrFieldProporties[icount].value = (FConvert.toInt(objPageHeader.TableProperties.TotalRow) > 0 ? FConvert.toInt(objPageHeader.TableProperties.TotalRow) : 2);
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.TotalColumn:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Table:
                                        arrFieldProporties[icount].value = (FConvert.toInt(objPageHeader.TableProperties.TotalColumn) > 0 ? FConvert.toInt(objPageHeader.TableProperties.TotalColumn) : 2);
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.Align:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Table:
                                        arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.TableProperties.Align);
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.IsEditable:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Table:
                                        arrFieldProporties[icount].value = (objPageHeader.TableProperties.IsEditable == true ? 1 : 0);
                                        break;
                                    default:
                                        arrFieldProporties[icount].value = (objPageHeader.IsEditable == true ? 1 : 0);
                                        break;
                                }
                                break;
                            case PROPERTY.Condition:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Area:
                                        arrFieldProporties[icount].textContent = objPageHeader.AreaProperties.Condition;
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.DisplayBorder:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Area:
                                        arrFieldProporties[icount].value = (objPageHeader.AreaProperties.DisplayBorder == true ? 1 : 0);
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.PageSelect:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Area:
                                        arrFieldProporties[icount].value = objPageHeader.AreaProperties.PageSelect;
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.AutoExpand:
                                switch (fieldDataType) {
                                    case CONTROLTYPE.Area:
                                        arrFieldProporties[icount].value = (objPageHeader.AreaProperties.AutoExpand == true ? 1 : 0);
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case PROPERTY.IgnorePageAfterPreviousPage:
                                arrFieldProporties[icount].value = (objPageHeader.AreaProperties.IgnorePageAfterPreviousPage == true ? 1 : 0);
                                break;
                            case PROPERTY.FunctionType:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = objPageHeader.FunctionType;
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.FunctionType;
                                }
                                break;
                            case PROPERTY.AmountInWords:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = 0;
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.AmountInWords;
                                    break;
                                }
                                break;


                            case PROPERTY.RoundOffType:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = objPageHeader.RoundOffType;
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.RoundOffType;
                                }
                                break;
                            case PROPERTY.RoundUptoValue:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = objPageHeader.RoundUptoValue;
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.RoundUptoValue;
                                }
                                break;
                            case PROPERTY.SuffixForAmtInWords:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = "";
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.SuffixForAmtInWords;
                                }
                                break;
                            case PROPERTY.Prefix:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = "";
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.Prefix;
                                    break;
                                }
                                break;
                            case PROPERTY.Labelforzerovalue:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = "";
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.Labelforzerovalue;
                                }
                                break;
                            case PROPERTY.Sign:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = objPageHeader.Sign;
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.Sign;
                                }
                                break;
                            case PROPERTY.CaseStyles:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = 0;
                                }
                                else {
                                    arrFieldProporties[icount].value = objPageHeader.StaticTextProperties.CaseStyle;
                                }
                                break;
                            case PROPERTY.TextColor:
                                arrFieldProporties[icount].value = objPageHeader.TextColor;
                                break;
                            case PROPERTY.TextFont:
                                if (objPageHeader.TextFont == null) {
                                    arrFieldProporties[icount].selectedIndex = 46;
                                    break;
                                }
                                for (var i = 0; i < arrFieldProporties[icount].options.length; i++) {
                                    if (arrFieldProporties[icount][i].text.includes(objPageHeader.TextFont)) {
                                        arrFieldProporties[icount].selectedIndex = i;
                                        break;
                                    }
                                }
                                break;
                            case PROPERTY.FontSize:
                                arrFieldProporties[icount].value = objPageHeader.FontSize;
                                break;
                            case PROPERTY.FontWeight:
                                arrFieldProporties[icount].value = objPageHeader.FontWeight;
                                break;
                            case PROPERTY.FontStyle:
                                arrFieldProporties[icount].value = objPageHeader.FontStyle;
                                break;
                            case PROPERTY.FontEffect:
                                arrFieldProporties[icount].value = objPageHeader.FontEffect;
                                break;
                            case PROPERTY.ReportType:
                                arrFieldProporties[icount].value = objPageHeader.ReportType;
                                break;
                            case PROPERTY.DefaultPrinter:
                                arrFieldProporties[icount].value = objPageHeader.DefaultPrinter;
                                break;
                            case PROPERTY.NoOfCopies:
                                arrFieldProporties[icount].value = FConvert.toInt(objPageHeader.NoOfCopies);
                                break;
                            case PROPERTY.IsPrintInDraftMode:
                                arrFieldProporties[icount].value = (objPageHeader.IsPrintInDraftMode == true ? 1 : 0);
                                break;
                            case PROPERTY.IsDonotPrintQuantityforModifiers:
                                arrFieldProporties[icount].value = (objPageHeader.IsDonotPrintQuantityforModifiers == true ? 1 : 0);
                                break;
                            case PROPERTY.IsPageAfterPreviousPage:

                                break;
                            case PROPERTY.AttachDocuments:

                                break;
                            case PROPERTY.ModifierOption:
                                arrFieldProporties[icount].value = objPageHeader.ModifierOption;
                                break;
                            case PROPERTY.IsSuspendNet:
                                arrFieldProporties[icount].value = (objPageHeader.IsSuspendNet == true ? 1 : 0);
                                break;
                            case PROPERTY.ColumnHeight:
                                arrFieldProporties[icount].value = objPageHeader.ColumnHeight;
                                break;
                            case PROPERTY.HorizontalGap:
                                arrFieldProporties[icount].value = objPageHeader.HorizontalGap;
                                break;
                            case PROPERTY.VerticalGap:
                                arrFieldProporties[icount].value = objPageHeader.VerticalGap;
                                break;
                            case PROPERTY.RowsPerPage:
                                arrFieldProporties[icount].value = objPageHeader.RowsPerPage;
                                break;
                            case PROPERTY.ColumnsPerPage:
                                arrFieldProporties[icount].value = objPageHeader.ColumnsPerPage;
                                break;
                            case PROPERTY.Column:
                                arrFieldProporties[icount].value = objPageHeader[arrFieldProporties[icount].dataset.bindingname];
                                break;
                            case PROPERTY.InsertCommas:
                                if (objPageHeader.StaticTextProperties == null) {
                                    arrFieldProporties[icount].value = (objPageHeader.InsertCommas == true ? 1 : 0);
                                }
                                else {
                                    arrFieldProporties[icount].value = (objPageHeader.StaticTextProperties.InsertComma == true ? 1 : 0);
                                }
                                break;
                            default:
                                arrFieldProporties[icount].value = objPageHeader[arrFieldProporties[icount].dataset.bindingname];
                                break;
                        }
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.SetFieldPropertiesInObject}" + err.message, "Exception");
        }
    },

    SetFieldProperty: function (field, propertyname, value) {
        if (field != null && field != undefined) {
            $(field).css(propertyname, value);
        }
    },

    GetColumnPropertyValue: function (FieldObject, ColumnIndex, PropertyName) {

        if (ColumnIndex == undefined) {
            switch (PropertyName) {
                case PROPERTY.GroupBy:
                    if (FieldObject.PageBodyClass != null && FieldObject.PageBodyClass.GroupByOption != null)
                        return FieldObject.PageBodyClass.GroupByOption;
                    break;
                case PROPERTY.ClubBy:
                    if (FieldObject.PageBodyClass != null && FieldObject.PageBodyClass.ClubByOption != null && FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy])
                        for (var iCounter = 0; iCounter < FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy].length ; iCounter++) {
                            if (FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy][iCounter].ID > 0 &&
                            FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy][iCounter].Name == "" &&
                            FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy][iCounter].Tag != null) {
                                FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy][iCounter].Name = INVOICEDESIGN.ConvertOrderByObjToString(FieldObject.PageBodyClass.ClubByOption[PROPERTY.ClubBy]);
                            }
                        }
                    return FieldObject.PageBodyClass.ClubByOption;
                    break;
                default:
                    if (FieldObject.PageBodyClass != null)
                        return FieldObject.PageBodyClass[PropertyName];
                    break;
            }
        }

        if (FieldObject != null && FieldObject.PageBody != null && FieldObject.PageBody.length > 0) {
            for (var iCount = 0; iCount < FieldObject.PageBody.length; iCount++) {
                if (FieldObject.PageBody[iCount].ColumnIndex == parseInt(ColumnIndex)) {
                    return FieldObject.PageBody[iCount][PropertyName];
                }
            }
            //For Area control
            if (FieldObject.Type == CONTROLTYPE.Area) {
                return FieldObject.AreaProperties.Condition;
            }
        }

        if (PropertyName == "AttachDocuments") {
            return objLayoutInformation.AttachDocuments;
        }
    },

    SetColumnPropertyValue: function (UID, ColumnIndex, PropertyName, Value) {
        ;
        if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
            for (var count = 0; count < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; count++) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[count].UID == parseInt(UID)) {
                    if (ColumnIndex == undefined) {
                        switch (PropertyName) {
                            case PROPERTY.OrderBy:
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass[PropertyName] = Value;
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass.GroupByOption[PropertyName] = null;
                                break;
                            case PROPERTY.GroupBy:

                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass.GroupByOption[PropertyName] = Value;
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass.GroupByOption["IsPrintGroupHeading"] = document.getElementById("chkprintgrpheading").checked;
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass.GroupByOption["IsPrintSubTotal"] = document.getElementById("chkprntSubTotaftersubgrp").checked;
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass[PROPERTY.OrderBy] = null;
                                break;
                            case PROPERTY.ClubBy:
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass.ClubByOption[PropertyName] = Value;
                                break;
                            default:
                                objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBodyClass[PropertyName] = Value;
                        }
                    }
                    else {
                        if (objLayoutInformation.Pages[iCurrentPage].PageHeader[count] != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody != null && objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody.length > 0) {
                            for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody.length; iCount++) {
                                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody[iCount].ColumnIndex == parseInt(ColumnIndex)) {
                                    objLayoutInformation.Pages[iCurrentPage].PageHeader[count].PageBody[iCount][PropertyName] = Value;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                }
            }
        }
    },

    SetCancelCallBack: function (FunctionName) {
        var id_InvoiceDesingCancel = document.getElementById("id_InvoiceDesingCancel");
        if (id_InvoiceDesingCancel != null) {
            id_InvoiceDesingCancel.dataset.callback = FunctionName;
        }
    },

    ConvertFilterObjToString: function (objFilterObj) {
        var arrFilterValue = [];
        if (objFilterObj != null && objFilterObj.length > 0) {
            for (var key in objFilterObj) {
                arrFilterValue.push('CompareValue =' + objFilterObj[key].CompareValue);
            }
        }
        return arrFilterValue.join(',');
    },

    ConvertOrderByObjToString: function (objOrderBy) {
        var strOrdeBy = [];
        var arrGroupname = [];
        var groupname = "";
        var itemname = "";
        if (objOrderBy != undefined && objOrderBy != null && objOrderBy.length > 0) {
            for (var i = 0; i < objOrderBy.length; i++) {
                if (objOrderBy[i].Name != null && objOrderBy[i].Name != "") {
                    if (objOrderBy[i].Tag > 1) { // if it is a group element , append its group name
                        arrGroupname = $.grep(arrAllOrderByFields, function (x) {
                            if (x.ID == objOrderBy[i].Tag) return x;
                        });
                        if (arrGroupname.length > 0) {
                            groupname = arrGroupname[0].Name;
                        }
                        if (groupname) {
                            strOrdeBy.push(groupname + "." + objOrderBy[i].Name);
                        }
                    }
                    else {
                        strOrdeBy.push(objOrderBy[i].Name);
                    }
                }
                else {
                    itemname = INVOICEDESIGN.GetFieldNameFromOrderByFields(objOrderBy[i].ID, objOrderBy[i].Tag)
                    if (itemname != "") {
                        strOrdeBy.push(itemname);
                    }
                }
            }
        }
        return strOrdeBy.join(',');
    },

    GetOrderByValue: function () {
        var arrIdNamePair = [];
        var id = 0, tag = 0;
        var name = "";
        var id_allOrderBySelectedFields = document.getElementById("id_allOrderBySelectedFields");
        for (var i = 0; i < id_allOrderBySelectedFields.children.length; i++) {
            if (id_allOrderBySelectedFields.children[i].children[0]) {
                id = parseInt(id_allOrderBySelectedFields.children[i].children[0].getAttribute("data-fieldid"));
                name = id_allOrderBySelectedFields.children[i].children[0].getAttribute("data-columnname");
                tag = parseInt(id_allOrderBySelectedFields.children[i].children[0].getAttribute("data-masterid"));
                if (isNaN(tag) || tag == id) {
                    tag = -1;
                }
            }
            if (id > 0) {
                arrIdNamePair.push({ ID: id < 0 ? id * -1 : id, Name: name, Tag: tag });
            }
        }
        return arrIdNamePair;
    },

    GetFieldNameFromOrderByFields: function (Id, Tag) {
        var fieldname = "";
        var i = 0;
        var result = [];
        try {
            if (arrAllOrderByFields != null && arrAllOrderByFields != undefined && arrAllOrderByFields.length > 0) {
                for (i = 0; i < arrAllOrderByFields.length; i++) {
                    if (arrAllOrderByFields[i].ID == Id && arrAllOrderByFields[i].Tag == Tag) {
                        //return arrAllOrderByFields[i].Name;
                        fieldname = arrAllOrderByFields[i].Name;
                    }
                    else if (arrAllOrderByFields[i].ID == Id) {
                        // return arrAllOrderByFields[i].Name;
                        fieldname = arrAllOrderByFields[i].Name;
                    }
                }
            }

            if (fieldname == "") {
                //search in arrHeaderGroup and arrBodyGroup Tree
                if (arrHeaderGroup) {
                    for (i = 0; i < arrHeaderGroup.length; i++) {
                        result = $.grep(arrHeaderGroup[i].Fields, function (x) {
                            if (x.FieldId == Id) return x
                        });
                        if (result.length > 0) {
                            fieldname = result[0].Name;
                            break;
                        }
                    }
                    if (fieldname)
                        return fieldname;
                }
                if (arrBodyGroup) {
                    for (i = 0; i < arrBodyGroup.length; i++) {
                        result = $.grep(arrBodyGroup[i].Fields, function (x) {
                            if (x.FieldId == Id) return x
                        });
                        if (result.length > 0) {
                            fieldname = result[0].Name;
                            break;
                        }
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.GetFieldNameFromOrderByFields}" + err.message, "EXCEPTION");
        }
        return fieldname;
    },

    OrderByPopup: function (PropertyName, PropertyId, Value) {
        var wndOrderByObj = {};
        var OrderByValue = null;
        var SelectedValues = [], arrFieldsGroup = [], arrPropValueNames = [];
        var IsDontClubIfRateDifferent = false;
        var IsPrintGroupHeading = false;
        var IsPrintSubTotal = false

        try {
            switch (PropertyName) {
                case "GroupBy":

                    SelectedValues = Value.GroupBy;
                    IsPrintSubTotal = Value.IsPrintSubTotal;
                    IsPrintGroupHeading = Value.IsPrintGroupHeading;
                    break;
                case "ClubBy":
                    SelectedValues = Value.ClubBy;
                    IsDontClubIfRateDifferent = Value.IsDontClubIfRateDifferent;
                    break;
                case "OrderBy":
                    wndOrderByObj.HeaderFields = arrHeaderGroup;
                    wndOrderByObj.BodyFields = arrBodyGroup;
                    wndOrderByObj.VoucherType = iVoucherType;
                    OrderByValue = Value;
                    SelectedValues = Value;
                    if (OrderByValue != null) {
                        wndOrderByObj.OrderByData = OrderByValue;
                    }
                    break;
            }
            if (document.getElementById(PropertyId)) {
                if (document.getElementById(PropertyId).parentElement.textContent.trim() != "")
                    arrPropValueNames = document.getElementById(PropertyId).parentElement.textContent.trim().split(",");
            }
            if (arrHeaderGroup) {
                arrFieldsGroup = arrHeaderGroup.slice(0);
            }
            if (arrBodyGroup) {
                arrFieldsGroup.push($.grep(arrBodyGroup, function (x) {
                    return x.GroupName == "Body";
                })[0]);
            }
            result = NETWORK.executeServerMethod(
                                     GLOBAL.getContextPath("OrderBy", "InvoiceDesign", "Transactions"),
                                    true,
                                     { PropertyName: PropertyName, PropertyId: PropertyId, Value: SelectedValues, iVoucherType: iVoucherType, arrHeaderGroup: arrFieldsGroup, arrPropValueNames: arrPropValueNames, iModuleType: iModuleType, IsDontClubIfRateDifferent: IsDontClubIfRateDifferent, IsPrintSubTotal: IsPrintSubTotal, IsPrintGroupHeading: IsPrintGroupHeading },
                                    "",
                                    true,
                                    "INVOICEDESIGN.OrderBySuccess",
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd"
                               );
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.OrderByPopup}" + err.message, "EXCEPTION");
        }
    },

    OrderBySuccess: function (bSuccess, html) {
        if (bSuccess == true) {
            $("#id_OrderByControl").html(html);
            $("#id_OrderByControl").modal('show');
            if ($("#id_orderbyheading").html() == "ClubBy") {
                $("#clubbycheckbox").css("display", "");
            }
        }
    },

    updateClubByCheckbox: function (ischecked) {
        var uid = null;
        try {
            //update the value in objLayoutInformation
            if (SelectedField.getAttribute('data-datatype') == 10) {
                eleTable = SelectedField.children[0];
                UID = eleTable.id.split('_');
                UID = parseInt(UID[UID.length - 1]);
            }
            else {
                UID = SelectedField.id.split('_');
                UID = parseInt(UID[UID.length - 1]);
            }

            for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                    objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].PageBodyClass.ClubByOption.IsDontClubIfRateDifferent = ischecked;
                    break;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.updateClubByCheckbox}" + err.message, "EXCEPTION");
        }
    },

    SelectOrderByField: function (ele, ToDelete) {
        if (ToDelete == false || ToDelete == undefined) {
            if (SelectedOrderByField == ele) {
                SelectedOrderByField.className = "";
                SelectedOrderByField = undefined;
                return 0;
            }
            if (SelectedOrderByField != undefined) {
                SelectedOrderByField.className = "";
            }
            if (ele != undefined) {
                if (ele.nodeName.toLowerCase() == "a") {
                    SelectedOrderByField = ele.parentElement;
                    SelectedOrderByField.id = ele.getAttribute("data-fieldid");
                }
                else if (ele.nodeName.toLowerCase() == "li") {
                    SelectedOrderByField = ele;
                    SelectedOrderByField.id = ele.children[0].getAttribute("data-fieldid");
                }
                ele.removeAttribute("onclick");
                SelectedOrderByField.className = "theme_color-inverse";
            }
        }
        else {
            if (SelectedOrderByFieldToDel == ele) {
                SelectedOrderByFieldToDel.className = "";
                SelectedOrderByFieldToDel = undefined;
                return 0;
            }
            if (SelectedOrderByFieldToDel != undefined) {
                SelectedOrderByFieldToDel.className = "";
            }
            if (ele != undefined) {
                if (ele.nodeName.toLowerCase() == "a") {
                    SelectedOrderByFieldToDel = ele.parentElement;
                }
                else if (ele.nodeName.toLowerCase() == "li") {
                    SelectedOrderByFieldToDel = ele;
                }
                SelectedOrderByFieldToDel.className = "theme_color-inverse";
            }
        }
    },

    AddSelectedFieldToOrderByField: function (ToRemove) {
        var id_allOrderBySelectedFields = document.getElementById("id_allOrderBySelectedFields");
        var id_allOrderByFields = document.getElementById("id_allOrderByFields");
        if (ToRemove == false) {
            if (SelectedOrderByField != undefined) {
                var ele = SelectedOrderByField.cloneNode(true);
                ele.className = "";
                ele.setAttribute("onclick", "INVOICEDESIGN.SelectOrderByField(this,true)");
                ele.setAttribute("id", SelectedOrderByField.id + "_right");

                var sMasterName = ele.children[0].getAttribute("data-groupname");
                var sColName = ele.children[0].getAttribute("data-columnname");
                if (id_allOrderBySelectedFields != null) {
                    ele.children[0].textContent = sMasterName + "." + sColName;
                    id_allOrderBySelectedFields.appendChild(ele);
                    // SelectedOrderByField.parentNode.removeChild(SelectedOrderByField);
                    SelectedOrderByField = undefined;
                }
            }
        }
        else {
            if (SelectedOrderByFieldToDel != undefined) {
                var ele = SelectedOrderByFieldToDel.cloneNode(true);
                ele.className = "";
                ele.setAttribute("onclick", "INVOICEDESIGN.SelectOrderByField(this,false)");
                var leftfield = document.getElementById(ele.id.split("_")[0]);
                leftfield.setAttribute("onclick", "INVOICEDESIGN.SelectOrderByField(this,false)"); //to again enable onclick of order by fields , to add them in left box

                if (id_allOrderByFields != null) {
                    // id_allOrderByFields.appendChild(ele);
                    SelectedOrderByFieldToDel.parentNode.removeChild(SelectedOrderByFieldToDel);
                    SelectedOrderByFieldToDel = undefined;
                }
            }
        }
    },

    //Method to select the contol on clicking the control by pressing ctrl key.
    ctrl_Click: function (ele, evt, ctrlName) {

        var arrControls = objLayoutInformation.Pages != null ? objLayoutInformation.Pages[iCurrentPage].PageHeader.slice(0) : null;
        var iCurrentPgNo = 0, iControlType = 0;

        var arrCtrlIDs = [];//ele.parentElement.querySelectorAll('[data-pageno]');

        blnMouseDown = false;
        try {
            evt.stopPropagation();
            //INVOICEDESIGN.setCaret(ele, -1);
            if (evt.ctrlKey) {
                iCurrentPgNo = ele.parentElement.getAttribute('data-pageno');
                iControlType = ele.parentElement.getAttribute('data-controltype');//str.includes("Geeks");
                if (iControlType == 9 || iControlType == 2 && ele.parentElement.id.toString().includes("Area_")) {
                    ele.parentElement.style.boxShadow = "";
                }
                if (iSelectedCtrlPageNo != iCurrentPgNo) {
                    iSelectedCtrlPageNo = iCurrentPgNo;
                    ctrlIDs = "";
                }
                //for (var i = 0; i < arrCtrlIDs.length; i++) {
                //    if (arrCtrlIDs[i].id != ele.id) {
                //        document.getElementById(arrCtrlIDs[i].id).style.boxShadow = "";
                //    }
                //}

                if (ctrlIDs.includes(ele.id)) {
                    ctrlIDs = ctrlIDs.replace(ele.id, '');
                    document.getElementById(ele.id).style.boxShadow = "";
                    return;
                }
                if (ctrlIDs == "") {
                    ctrlIDs = ele.id;
                    iFirsteleControlType = ele.parentElement.getAttribute('data-controltype');
                    document.getElementById(ele.id).style.boxShadow = "rgb(3, 110, 196) 0px 0px 8px";
                }
                else {
                    iControlType = ele.parentElement.getAttribute('data-controltype');
                    //if (iControlType == iFirsteleControlType) {
                    ctrlIDs = ctrlIDs + ";" + ele.id;
                    document.getElementById(ele.id).style.boxShadow = "rgb(3, 110, 196) 0px 0px 8px";
                    //}
                }
                ele.focus();
                //ele.draggable = true;
                //}
                //else {
                //    //INVOICEDESIGN.SelectField(ele, evt, ctrlName);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_Click}" + err.message.toString(), "Exception");
        }
    },

    //Align the selected controls to the left position equal to the left position of the first selected control.
    ctrl_LeftAlign: function () {
        try {
            var iLeft = 0, iItemsinArray = 0;
            var arrCtrlIDs = [];
            var ele = null;

            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iLeft = ele.style.left;
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        ele.style.left = iLeft;
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Left', iLeft);
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_LeftAlign}" + err.message, "Exception");
        }
    },

    //Align the selected controls to the right position equal to the right position of the first selected control.
    ctrl_RightAlign: function () {
        try {
            var iFirsteleLeft = 0, iFirsteleWidth = 0, iLeft = 0, iWidth = 0, iGap = 0, iItemsinArray = 0;
            var arrCtrlIDs = [];
            var ele = null;

            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iFirsteleLeft = FConvert.toInt(ele.style.left);
                    iFirsteleWidth = FConvert.toInt(ele.style.width);
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        iLeft = FConvert.toInt(ele.style.left);
                        iWidth = FConvert.toInt(ele.style.width);
                        iGap = iLeft - (iFirsteleLeft + iFirsteleWidth);
                        ele.style.left = (iLeft - iGap - iWidth) + 'px';
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Left', (iLeft - iGap - iWidth));
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_RightAlign}" + err.message.toString(), "Exception");
        }
    },

    //Align the selected controls to the top position equal to the top position of the first selected control.
    ctrl_TopAlign: function () {
        try {
            var iTop = 0, iItemsinArray = 0;
            var arrCtrlIDs = [];
            var ele = null;

            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iTop = ele.style.top;
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        ele.style.top = iTop;
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Top', iTop);
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_TopAlign}" + err.message.toString(), "Exception");
        }
    },

    //Align the selected controls to the bottom position equal to the bottom position of the first selected control.
    ctrl_BottomAlign: function () {
        try {
            var iFirsteleTop = 0, iFirsteleHeight = 0, iTop = 0, iHeight = 0, iGap = 0, iItemsinArray = 0;
            var arrCtrlIDs = [];
            var ele = null;

            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iFirsteleTop = FConvert.toInt(ele.style.top);
                    iFirsteleHeight = FConvert.toInt(ele.style.height);
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        iTop = FConvert.toInt(ele.style.top);
                        iHeight = FConvert.toInt(ele.style.height);
                        iGap = iTop - (iFirsteleTop + iFirsteleHeight);
                        ele.style.top = (iTop - iGap - iHeight) + 'px';
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Top', (iTop - iGap - iHeight));
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_BottomAlign}" + err.message.toString(), "Exception");
        }
    },

    //Equalizing the selected controls both height and width to the height and width values of the first selected control.
    ctrl_SameSize: function () {
        try {
            var iHeight = 0, iWidth = 0, iItemsinArray = 0;
            var arrCtrlIDs = [];
            var ele = null;

            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iHeight = ele.style.height;
                    iWidth = ele.style.width;
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        ele.style.height = iHeight;
                        ele.style.width = iWidth;
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Height', iHeight);
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Width', iWidth);
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_SameSize}" + err.message.toString(), "Exception");
        }
    },

    //Equalizing the selected controls width to the width of the first selected control.
    ctrl_SameWidth: function () {
        try {
            var iWidth = 0, iItemsinArray = 0;
            var arrCtrlIDs = [];
            var ele = null;

            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iWidth = ele.style.width;
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        ele.style.width = iWidth;
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Width', iWidth);
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_SameWidth}" + err.message.toString(), "Exception");
        }
    },

    //Equalizing the selected controls height to the height of the first selected control.
    ctrl_SameHeight: function () {
        var iWidth = 0, iItemsinArray = 0;
        var arrCtrlIDs = [];
        var ele = null;
        try {
            if (ctrlIDs != "" || ctrlIDs != undefined) {
                arrCtrlIDs = ctrlIDs.split(';');
            }

            iItemsinArray = arrCtrlIDs.length;
            if (iItemsinArray > 0) {
                ele = document.getElementById(arrCtrlIDs[0]);
                if (FCommon.UI.isValidObject(ele)) {
                    iHeight = ele.style.height;
                }
                for (var i = 0; i < iItemsinArray; i++) {
                    ele = document.getElementById(arrCtrlIDs[i]);
                    if (FCommon.UI.isValidObject(ele)) {
                        ele.style.height = iHeight;
                        document.getElementById(ele.id).style.boxShadow = "";
                        INVOICEDESIGN.UpdateValueonCommonAlignandResize(ele, 'Height', iHeight);
                    }
                }
            }
            ctrlIDs = "";
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.ctrl_SameHeight}" + err.message.toString(), "Exception");
        }
    },

    //Internal method to update left/top/height/width values in the objLayoutInformation variable.
    UpdateValueonCommonAlignandResize: function (Field, propertyName, propertyValue) {
        try {
            var eleTable = null, UID = null;
            if (Field.getAttribute('data-datatype') == 10) {
                eleTable = Field.children[0];
                UID = eleTable.id.split('_');
                UID = parseInt(UID[UID.length - 1]);
            }
            else {
                UID = Field.id.split('_');
                UID = parseInt(UID[UID.length - 1]);
            }
            var controltype = parseInt(Field.dataset.controltype);
            iCurrentPage = FConvert.toInt(Field.getAttribute('data-pageno'));
            if (INVOICEDESIGN.IsArrPageHeaderValidObject()) {
                switch (controltype) {
                    case CONTROLTYPE.Maincanvas:
                        objLayoutInformation[propertyName] = parseInt(propertyValue);
                    default:
                        for (var iCount = 0; iCount < objLayoutInformation.Pages[iCurrentPage].PageHeader.length; iCount++) {
                            if (objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount].UID == parseInt(UID)) {
                                switch (propertyName) {
                                    case PROPERTY.Left:
                                    case PROPERTY.Top:
                                    case PROPERTY.Width:
                                    case PROPERTY.Height:
                                        objLayoutInformation.Pages[iCurrentPage].PageHeader[iCount][propertyName] = parseInt(propertyValue);
                                        break;
                                }
                            }
                        }
                        break;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.UpdateValueonCommonAlignandResize}" + err.message.toString(), "Exception");
        }
    },

    RulerSize: function (units) {
        try {
            units = "in";
            var RulerDiv = document.getElementById("InvoiceDesignMainDiv").querySelectorAll("#ruler");
            var RulerDiv2 = document.getElementById("InvoiceDesignMainDiv").querySelectorAll("#rulerv");
            var DivW = parseFloat(document.getElementById("id_LayoutDiv_0").style.width);
            var DivH = parseFloat(document.getElementById("id_LayoutDiv_0").style.height);
            var AllDivMargins = $("div[id^=divmargin]");
            var AllDivMargins0 = null, AllDivMargins1 = null, AllDivMargins2 = null, AllDivMargins3 = null;
            var RulerDiv0 = null, RulerDiv20 = null;
            for (var i = 0; i < AllDivMargins.length; i++) {
                AllDivMargins0 = AllDivMargins[i];
                AllDivMargins0.style.width = DivW + units;
                i++;
                AllDivMargins1 = AllDivMargins[i];
                AllDivMargins1.style.width = DivW + units;
                i++;
                AllDivMargins2 = AllDivMargins[i];
                AllDivMargins2.style.height = DivH + units;
                i++;
                AllDivMargins3 = AllDivMargins[i];
                AllDivMargins3.style.height = DivH + units;

            }
            for (var rad = 0; rad < RulerDiv.length; rad++) {
                RulerDiv0 = RulerDiv[rad];
                RulerDiv20 = RulerDiv2[rad];
                RulerDiv0.style.width = DivW + units;
                RulerDiv20.style.height = DivH + units;
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.RulerSize}" + err.message, "Exception");
        }
    },

    Page_Margin: function (ele, units) {
        try {

            var eleid = ele.id;
            var DivLayout = document.getElementById(eleid);
            var DivLayoutMargin;
            for (var divmar = 1; divmar <= 4; divmar++) {
                DivLayoutMargin = document.createElement("div");
                DivLayoutMargin.setAttribute("id", "divmargin" + divmar);
                DivLayout.appendChild(DivLayoutMargin)
                switch (divmar) {
                    case 1:
                        DivLayoutMargin.style.position = "absolute";
                        DivLayoutMargin.style.width = 794 + "px";
                        DivLayoutMargin.style.height = 1 + "px";
                        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                        //DivLayoutMargin.style.top = 0.5 + units;
                        DivLayoutMargin.style.top = 0.5 + units;
                        //DivLayoutMargin.style.left = 0 + "px";
                        DivLayoutMargin.style.left = 0 + units;
                        break;
                    case 2:
                        DivLayoutMargin.style.position = "absolute";
                        DivLayoutMargin.style.width = 794 + "px";
                        DivLayoutMargin.style.height = 1 + "px";
                        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                        //DivLayoutMargin.style.bottom = 0.5 + units;
                        //DivLayoutMargin.style.left = 0 + "px";
                        DivLayoutMargin.style.bottom = 0.5 + units;
                        DivLayoutMargin.style.left = 0 + units;
                        break;
                    case 3:
                        DivLayoutMargin.style.position = "absolute";
                        DivLayoutMargin.style.width = 1 + "px";
                        DivLayoutMargin.style.height = 1123 + "px";
                        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                        //DivLayoutMargin.style.Top = 0 + "px";
                        DivLayoutMargin.style.top = 0 + units;
                        //DivLayoutMargin.style.top = 0 + "px";
                        DivLayoutMargin.style.left = 0.5 + units;

                        break;
                    case 4:
                        DivLayoutMargin.style.position = "absolute";
                        DivLayoutMargin.style.width = 1 + "px";
                        DivLayoutMargin.style.height = 1123 + "px";
                        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                        //DivLayoutMargin.style.marginTop = 0 + "px";
                        //DivLayoutMargin.style.left = 7.7 + units;
                        //DivLayoutMargin.style.top = 0 + "px";
                        DivLayoutMargin.style.top = 0 + units;
                        DivLayoutMargin.style.right = 0.5 + units;

                        break;
                }
                //new by rasool
                //switch (divmar) {
                //    case 1:
                //        DivLayoutMargin.style.position = "absolute";
                //        DivLayoutMargin.style.width = 794 + "px";
                //        DivLayoutMargin.style.height = 1 + "px";
                //        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                //        DivLayoutMargin.style.top = 0.5 + units;
                //        DivLayoutMargin.style.left = 0.5 + units;
                //        break;
                //    case 2:
                //        DivLayoutMargin.style.position = "absolute";
                //        DivLayoutMargin.style.width = 794 + "px";
                //        DivLayoutMargin.style.height = 1 + "px";
                //        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                //        DivLayoutMargin.style.bottom = 0.5 + units;
                //        DivLayoutMargin.style.left = 0.5 + units;
                //        break;
                //    case 3:
                //        DivLayoutMargin.style.position = "absolute";
                //        DivLayoutMargin.style.width = 1 + "px";
                //        DivLayoutMargin.style.height = 1123 + "px";
                //        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                //        DivLayoutMargin.style.top = 0.5 + units;
                //        DivLayoutMargin.style.left = 0.5 + units;

                //        break;
                //    case 4:
                //        DivLayoutMargin.style.position = "absolute";
                //        DivLayoutMargin.style.width = 1 + "px";
                //        DivLayoutMargin.style.height = 1123 + "px";
                //        DivLayoutMargin.style.border = 1 + "px solid #b7b7b7";
                //        DivLayoutMargin.style.top = 0.5 + units;
                //        DivLayoutMargin.style.right = 0.2 + units;
                //        break;
                //}
            }
            iNoofPages = iNoofPages + 1;
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.Page_Margin}" + err.message, "Exception");
        }
    },

    Ruler: function (ele, units, callee) {

        var lable = document.getElementById("lbl");
        var lable1 = document.getElementById("lbl1");
        var getdiv = null, appendToLayout = null, div = null;
        var j = 1, u = 1, k = 1, r = 1;
        var dv = null, div2 = null;

        try {
            if (lable == null && lable1 == null) {
                INVOICEDESIGN.LableUnit();
                lable = document.getElementById("lbl");
                lable1 = document.getElementById("lbl1");
            }

            if (units == "in") {
                lable.style.display = "block";
                lable1.style.display = "none";
            }
            else {
                lable1.style.display = "block";
                lable.style.display = "none";
            }
            if (callee != "UpdatePageSize") {
                var id = INVOICEDESIGN.getLayoutDivId(iNoofPages);
                getdiv = document.getElementById(id);
                var ElementId = ele.id;
                appendToLayout = document.getElementById(ElementId);
                var maindiv = document.createElement("div");
                maindiv.setAttribute("id", "ruler");
                maindiv.style.position = "-absolute";
                maindiv.style.top = "-28px";
                maindiv.style.left = "0px";
                var mdfirstchild = document.createElement("div");
                mdfirstchild.style.marginLeft = 0 + "px";
                mdfirstchild.innerHTML = "0";
                maindiv.appendChild(mdfirstchild);
                appendToLayout.appendChild(maindiv);
                for (var i = 0.1; i <= 40; i = u / 10) {
                    if (i % 1 == 0) {
                        if (j <= 40) {
                            div = document.createElement("div");
                            div.setAttribute("id", "tickLable");
                            div.style.position = "absolute";
                            div.style.top = "0px";
                            div.style.width = "1px";
                            div.style.height = "100%";
                            div.style.textIndent = "1px";
                            div.style.lineHeight = "20px"
                            div.style.left = j + units;
                            div.style.background = "black";
                            j++;
                        }
                        div.innerHTML = i;
                        maindiv.appendChild(div)
                    }
                    else {
                        dv = document.createElement("div");
                        if (i % 0.5 == 0) {
                            dv.style.height = "12px";
                        }
                        else {
                            dv.style.height = "6px";
                        }
                        dv.setAttribute("id", "tick");
                        dv.style.position = "absolute";
                        dv.style.bottom = "0px";
                        dv.style.width = "1px";
                        dv.style.left = i + units;
                        dv.style.background = "black";
                        maindiv.appendChild(dv)
                    }
                    u++
                }

                var maindiv2 = document.createElement("div");
                maindiv2.setAttribute("id", "rulerv");
                maindiv2.style.position = "-absolute";
                maindiv2.style.top = "0px";
                maindiv2.style.left = "-28px";
                var md2firstchild = document.createElement("div");
                md2firstchild.style.marginTop = 0 + "px";
                md2firstchild.innerHTML = "0";
                maindiv2.appendChild(md2firstchild);
                appendToLayout.appendChild(maindiv2);
                var dv = null;
                for (var l = 0.1; l <= 40; l = r / 10) {
                    if (l % 1 == 0) {
                        if (k <= 40) {
                            div2 = document.createElement("div");
                            div2.setAttribute("id", "tickLable2");
                            div2.style.position = "absolute";
                            div2.style.left = "0px";
                            div2.style.width = "100%";
                            div2.style.height = "1px";
                            div2.style.textIndent = "1px";
                            div2.style.lineHeight = "20px"
                            div2.style.top = k + units;
                            div2.style.background = "black";
                            k++;
                        }
                        div2.innerHTML = l;
                        maindiv2.appendChild(div2)
                    }
                    else {
                        dv = document.createElement("div");
                        if (l % 0.5 == 0) {
                            dv.style.width = "12px";
                        }
                        else {
                            dv.style.width = "6px";
                        }
                        dv.setAttribute("id", "tick2");
                        dv.style.position = "absolute";
                        dv.style.right = "0px";
                        dv.style.height = "1px";
                        dv.style.top = l + units;
                        dv.style.background = "black";
                        maindiv2.appendChild(dv)
                    }
                    r++;
                }
            }
            else {
                var ele0 = 1;
                var ticklbl = null, ticklbl2 = null, tick = null, tick2 = null;
                var ticklbl0 = null, ticklunit = null, ticklbl20 = null, tickl2unit = null;
                var tick0 = null, tickunit = null, tick20 = null, tick2unit = null;
                for (var i = 0; i < 1; i++) {
                    ele0 = 1;
                    ticklbl = document.getElementById(ele.id).querySelectorAll("#tickLable");
                    ticklbl2 = document.getElementById(ele.id).querySelectorAll("#tickLable2");
                    tick = document.getElementById(ele.id).querySelectorAll("#tick");
                    tick2 = document.getElementById(ele.id).querySelectorAll("#tick2");
                    for (var j = 0; j < ticklbl.length; j++) {
                        ticklbl0 = ticklbl[j]
                        ticklunit = parseFloat(ticklbl0.style.left);
                        ticklbl0.style.left = ticklunit + units;
                    }
                    for (var k = 0; k < ticklbl2.length; k++) {
                        ticklbl20 = ticklbl2[k]
                        tickl2unit = parseFloat(ticklbl20.style.top);
                        ticklbl20.style.top = tickl2unit + units;
                    }
                    for (var l = 0; l < tick.length; l++) {
                        tick0 = tick[l]
                        tickunit = parseFloat(tick0.style.left);
                        tick0.style.left = tickunit + units;
                    }
                    for (var m = 0; m < tick2.length; m++) {
                        tick20 = tick2[m]
                        tick2unit = parseFloat(tick20.style.top);
                        tick20.style.top = tick2unit + units;
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.Ruler}" + err.message, "Exception");
        }
    },

    LableUnit: function () {
        var lable = document.createElement("lable");
        lable.setAttribute("id", "lbl");
        lable.style.position = "absolute";
        lable.style.left = 10 + "px";
        lable.style.top = 22 + "px";
        lable.innerHTML = "Inch";
        var lable2 = document.createElement("lable");
        lable2.setAttribute("id", "lbl1");
        lable2.style.position = "absolute";
        lable2.style.left = 10 + "px";
        lable2.style.top = 22 + "px";
        lable2.innerHTML = "CM";
        var InvcdsnMainDiv = document.getElementById("InvoiceDesignMainDiv");
        InvcdsnMainDiv.appendChild(lable);
        InvcdsnMainDiv.appendChild(lable2);
    },

    UI: {
        selectElement: function (ele) {
            try {

                if ($(ele).hasClass("theme_background-color") == true) {
                    $(ele).removeClass("theme_background-color");
                }

                if ($(ele).hasClass("theme_color") == true) {
                    $(ele).removeClass("theme_color");
                }

                if ($(ele).hasClass("labeltext theme_color-inverse") == false) {
                    $(ele).addClass("labeltext theme_color-inverse");
                }

                if ($(ele).hasClass("theme_color-inverse") == false) {
                    $(ele).addClass("theme_color-inverse");
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{INVOICEDESIGN.UI.selectElement}" + err.message, "Exception");
            }
        },

        unselectElement: function (ele) {
            try {
                if ($(ele).hasClass("labeltext theme_color-inverse") == true) {
                    $(ele).removeClass("labeltext theme_color-inverse");
                }

                if ($(ele).hasClass("theme_color-inverse") == true) {
                    $(ele).removeClass("theme_color-inverse");
                }

                if ($(ele).hasClass("theme_background-color") == false) {
                    $(ele).addClass("theme_background-color");
                }

                if ($(ele).hasClass("theme_color") == false) {
                    $(ele).addClass("theme_color");
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{INVOICEDESIGN.UI.unselectElement}" + err.message, "Exception");
            }
        },
    },

    /////////////

    removeDuplicatesBy: function (keyFn, array) {
        var mySet = new Set();
        return array.filter(function (x) {
            var key = keyFn(x), isNew = !mySet.has(key);
            if (isNew) mySet.add(key);
            return isNew;
        });
    },

    isArabic: function (text) {
        var arabic = /[\u0600-\u06FF]/;
        var result = arabic.test(text);
        return result;
    },

    isEnglishText: function (text) {
        var english = /^[A-Za-z0-9 ]*$/;
        var result = english.test(text);
        return result;
    },

    //////////////
    // keyboard arrow functions

    control_onkeyarrowpress: function (element) {
        try {

            var direction,
            keyCode = event.keyCode;

            if (isArrowKey(keyCode)) {
                direction = getArrowKeyDirection(keyCode);

                console.log(direction);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.control_onkeyarrowpress}" + err.message, "EXCEPTION");
        }
    },

    getKeyAndMove: function (element, event) {
        var isdrag = element.getAttribute("draggable");

        if (isdrag == "false")
            return;
        var uid = 0, pageno = 0;
        var currentField = null, currentControlType = null;
        var caretPos = undefined;
        try {
            if (event.key == "Delete") {
                if (element.id.includes("Area_")) {
                    var retVal = confirm(document.getElementById("msgDelBodyAreaControlValidation").value);
                    if (retVal == false) {
                        return;
                    }
                }
                INVOICEDESIGN.RemoveControl(element);
                event.stopPropagation();
                return;
            }
            //if (event.ctrlKey == true) { // means that the control key is pressed and mouse is clicked
            //    return;
            //}
            if (blnMouseDown) {
                return;
            }
            var key_code = event.which || event.keyCode;
            var cursorPosition = $(element).prop("selectionStart");
            if (iCurrentPage) {
                pageno = iCurrentPage;
            }
            else {
                pageno = parseInt(element.dataset.pageno);
            }
            if (isNaN(pageno)) {
                pageno = 0;
            }
            uid = element.id.split("_");
            uid = uid[uid.length - 1];
            if (element.id.includes("StaticText") == true) {
                caretPos = INVOICEDESIGN.getCaretPosition();
            }
            switch (key_code) {
                case 37: //left arrow key
                    if (event.ctrlKey) {
                        element.style.width = parseInt(element.style.width) - 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Width = parseInt(element.style.width) - 2;
                            }
                        });
                    }
                    else {
                        if (caretPos != undefined || caretPos != null) {
                            //if (caretPos == 0) {
                            element.style.left = parseInt(element.style.left) - 2 + 'px';
                            $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                                if (x.UID == uid) {
                                    x.Left = parseInt(element.style.left) - 2;
                                }
                            });
                            //}
                        }
                        else {
                            element.style.left = parseInt(element.style.left) - 2 + 'px';
                            $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                                if (x.UID == uid) {
                                    x.Left = parseInt(element.style.left) - 2;
                                }
                            });
                        }
                    }
                    break;
                case 38: //Up arrow key
                    if (event.ctrlKey) {
                        element.style.height = parseInt(element.style.height) - 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Height = parseInt(element.style.height) - 2;
                            }
                        })
                    }
                    else {
                        element.style.top = parseInt(element.style.top) - 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Top = parseInt(element.style.top) - 2;
                            }
                        })
                    }
                    break;
                case 39: //right arrow key
                    if (event.ctrlKey) {
                        element.style.width = parseInt(element.style.width) + 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Width = parseInt(element.style.width) + 2;
                            }
                        });
                    }
                    else {
                        //if (caretPos != undefined || caretPos != null) {
                        //if ($(element).text().length <= caretPos) {
                        element.style.left = parseInt(element.style.left) + 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Left = parseInt(element.style.left) + 2;
                            }
                        })
                    }
                    //}
                    //}
                    break;
                case 40: //down arrow key
                    if (event.ctrlKey) {
                        element.style.height = parseInt(element.style.height) + 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Height = parseInt(element.style.height) + 2;
                            }
                        })
                    }
                    else {
                        element.style.top = parseInt(element.style.top) + 2 + 'px';
                        $.grep(objLayoutInformation.Pages[pageno].PageHeader, function (x) {
                            if (x.UID == uid) {
                                x.Top = parseInt(element.style.top) + 2;
                            }
                        });
                    }
                    break;
            }
            if (caretPos != undefined || caretPos != null) {
                if ((key_code == 37 && caretPos == 0)
                || key_code == 38 ||
                (key_code == 39 && $(element).text().length <= caretPos) || key_code == 40) {
                    FCommon.UI.stopKeyProcess(event);
                }
                //else if (key_code == 39) {
                //    INVOICEDESIGN.setCaret(element, caretPos + 1);
                //}
                //else if (key_code == 37 && caretPos != 0) {
                //    INVOICEDESIGN.setCaret(element, caretPos - 1);
                //}
            }
            else if (key_code == 37 || key_code == 38 || key_code == 39 || key_code == 40) {
                FCommon.UI.stopKeyProcess(event);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{INVOICEDESIGN.getKeyAndMove}" + err.message, "EXCEPTION");
        }
    },

    getCaretPosition: function () {
        if (window.getSelection && window.getSelection().getRangeAt) {
            var range = window.getSelection().getRangeAt(0);
            var selectedObj = window.getSelection();
            var rangeCount = 0;
            var childNodes = selectedObj.anchorNode.parentNode.childNodes;
            for (var i = 0; i < childNodes.length; i++) {
                if (childNodes[i] == selectedObj.anchorNode) {
                    break;
                }
                if (childNodes[i].outerHTML)
                    rangeCount += childNodes[i].outerHTML.length;
                else if (childNodes[i].nodeType == 3) {
                    rangeCount += childNodes[i].textContent.length;
                }
            }
            return range.startOffset + rangeCount;
        }
        return -1;
    },

    setSelectionRange: function (element, start, end) {
        var rng = document.createRange(),
            sel = getSelection(),
            n, o = 0,
            tw = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null, null);
        while (n = tw.nextNode()) {
            o += n.nodeValue.length;
            if (o >= start) {
                rng.setStart(n, n.nodeValue.length + start - o);
                start = Infinity;
            }
            if (o >= end) {
                rng.setEnd(n, n.nodeValue.length + end - o);
                break;
            }
        }
        sel.removeAllRanges();
        sel.addRange(rng);
    },

    setCaret: function (element, index) {
        INVOICEDESIGN.setSelectionRange(element, index, index);
    },

    //Transaction Authorization close event function
    closeInvoicePopup: function () {

        $('#EmailTemplateModal ').modal('hide');
        $('#EmailTemplateModal ').modal().hide();
        if ($('#EmailTemplateModal').hasClass('in')) {
            $('#EmailTemplateModal').modal('hide')
        }
    },

    isHomePagePrint: function () {
        var ishomepageprint = false;
        var homepage = document.getElementById("id_transaction_homepage_container");
        var voucherpage = document.getElementById("id_transaction_homepage_entry");
        if (homepage && voucherpage) {
            if ((homepage.style.display == "block" || homepage.style.display == "") && voucherpage.style.display == "none") {
                ishomepageprint = true;
            }
        }
        return ishomepageprint;
    }
}

//enums
var MODULETYPE = {
    "None": 0,
    "CoreMasters": 1,
    "CoreTransactions": 2,
    "CRM": 3,
    "MRP": 4,
    "Quality": 5,
    "FixAssets": 6,
    "Maintenance": 7,
    "Payroll": 8,
    "WMS": 9,
    "POS": 10,
    "WinTax": 11,
    "TDS": 12,
    "ARMS": 13,
    "Inventory": 14,
    "Security": 15,
    "Production": 16,
    getDefault() {
        return this.None;
    }
}

var CONTROLTYPE = {
    "Maincanvas": 0,
    "BodyCanvas": 1,
    "Textblock": 2,
    "Statictext": 3,
    "Rectangle": 4,
    "Ellipse": 5,
    "Image": 6,
    "RichTextBox": 7,
    "Line": 8,
    "Area": 9,
    "Table": 10,
    "BodyColumn": 11,
    "Formula": 12,
    "ApprovalHistory": 13,
    "PostingDetails": 14,
    getDefault: function () {
        return CONTROLTYPE.Maincanvas;
    }
}

var VARIABLETYPE = {
    "None": 0,
    "Image": 1,
    "Formula": 2,
    "Date": 3,
    "PageNo": 4,
    "ImageBackground": 5,
    "QRCode": 6
}

var Unit = {
    "Centimeter": 0,
    "Inch": 1,
    getDefault: function () {
        return this.Inch;
    }
}

var DATATYPE = {
    "Text": 0,
    "Number": 1,
    "Boolean": 2,
    "DateTime": 3,
    "Date": 4,
    "Time": 5,
    "Fraction": 6,
    "Picture": 7,
    "StringList": 8,
    "NumberList": 9,
    "DocumentViewer": 10,
    "UpdatedTime": 11,
    "Master": 12,
    "BigNumber": 13,
    "ExternalTable": 14,
    "SmallNumber": 15,
    "TinyNumber": 16,
    getDefault: function () {
        return this.Text;
    }
}

var PROPERTY = {
    "Left": "Left",
    "Top": "Top",
    "Width": "Width",
    "Height": "Height",
    "BorderColor": "BorderColor",
    "BorderThickness": "BorderThickness",
    "IsAlternateRowColor": "IsAlternateRowColor",
    "IsImageBackground": "IsImageBackground",
    "ImageSource": "ImageSource",
    "BackColor": "BackColor",
    "IsSkipLineBetweenRow": "IsSkipLineBetweenRow",
    "ShowGridLineType": "ShowGridLineType",
    "IsSkipPageAfterInvoice": "IsSkipPageAfterInvoice",
    "IsPrefixColumnNamePUPC": "IsPrefixColumnNamePUPC",
    "IsBodyLengthVariable": "IsBodyLengthVariable",
    "IsDisplayPrevPageBalance": "IsDisplayPrevPageBalance",
    "IsAddBalbfToPageTotal": "IsAddBalbfToPageTotal",
    "IsDonotPrintPartialItem": "IsDonotPrintPartialItem",
    "IsHideItemUnderItemSet": "IsHideItemUnderItemSet",
    "BodyPositionIfHeaderSkip": "BodyPositionIfHeaderSkip",
    "IsPrintTotalOnEveryPage": "IsPrintTotalOnEveryPage",
    "IsPrintTotalInsideGrid": "IsPrintTotalInsideGrid",
    "IsDoNotShowGridHeader": "IsDoNotShowGridHeader",
    "GroupBy": "GroupBy",
    "OrderBy": "OrderBy",
    "ClubBy": "ClubBy",
    "DefaultFont": "DefaultFont",
    "HeadingFont": "HeadingFont",
    "TotalFont": "TotalFont",
    "ExternalModuleNamespace": "ExternalModuleNamespace",
    "ExternalModuleClass": "ExternalModuleClass",
    "ExternalModuleFunction": "ExternalModuleFunction",
    "Alias": "Alias",
    "Heading2": "Heading2",
    "Formula": "Formula",
    "ColumnWidth": "ColumnWidth",
    "DecimalInColumn": "DecimalInColumn",
    "DontShowTotal": "DontShowTotal",
    "InsertComma": "InsertComma",
    "InsertCommas": "InsertCommas",
    "Sign": "Sign",
    "HideColumn": "HideColumn",
    "WordWrap": "WordWrap",
    "IsArabicDigit": "IsArabicDigit",
    "Suffix": "Suffix",
    "PrintUnderPreviousColumn": "PrintUnderPreviousColumn",
    "PrintInLine2": "PrintInLine2",
    "Alignment": "Alignment",
    "HeadingAlignment": "HeadingAlignment",
    "ColumnFont": "ColumnFont",
    "ColumnCondition": "ColumnCondition",
    "EnableQRCode": "EnableQRCode",
    "Text": "Text",
    "TotalRow": "TotalRow",
    "TotalColumn": "TotalColumn",
    "Align": "Align",
    "IsEditable": "IsEditable",
    "Condition": "Condition",
    "DisplayBorder": "DisplayBorder",
    "PageSelect": "PageSelect",
    "AutoExpand": "AutoExpand",
    "IgnorePageAfterPreviousPage": "IgnorePageAfterPreviousPage",
    "WordWrap": "WordWrap",
    "FunctionType": "FunctionType",
    "AmountInWords": "AmountInWords",
    "PixelInLinesWordWrap": "PixelInLinesWordWrap",
    "Prefix": "Prefix",
    "RoundOffType": "RoundOffType",
    "RoundUptoValue": "RoundUptoValue",
    "SuffixForAmtInWords": "SuffixForAmtInWords",
    "Labelforzerovalue": "Labelforzerovalue",
    "Sign": "Sign",
    "CaseStyles": "CaseStyles",
    "TextColor": "TextColor",
    "TextFont": "TextFont",
    "FontSize": "FontSize",
    "FontWeight": "FontWeight",
    "FontStyle": "FontStyle",
    "FontEffect": "FontEffect",
    "ReportType": "ReportType",
    "DefaultPrinter": "DefaultPrinter",
    "NoOfCopies": "NoOfCopies",
    "IsPrintInDraftMode": "IsPrintInDraftMode",
    "IsDonotPrintQuantityforModifiers": "IsDonotPrintQuantityforModifiers",
    "IsPageAfterPreviousPage": "IsPageAfterPreviousPage",
    "AttachDocuments": "AttachDocuments",
    "ModifierOption": "ModifierOption",
    "IsSuspendNet": "IsSuspendNet",
    "ColumnHeight": "ColumnHeight",
    "HorizontalGap": "HorizontalGap",
    "VerticalGap": "VerticalGap",
    "RowsPerPage": "RowsPerPage",
    "ColumnsPerPage": "ColumnsPerPage",
    "Column": "Column"
}

String.prototype.visualLength = function () {
    var textele = document.getElementById("measuretextlength");
    var textwidth = null;
    textele.innerHTML = this;
    textwidth = textele.offsetWidth;
    $(textele).html("");
    return textwidth;
}

String.prototype.visualHeight = function () {
    var textele = document.getElementById("measuretextlength");
    var textheight = null;
    textele.innerHTML = this;
    textheight = textele.offsetHeight;
    $(textele).html("");
    return textheight;
};
