/* Minification failed. Returning unminified contents.
(10597,66-67): run-time error JS1195: Expected expression: >
(10597,80-81): run-time error JS1004: Expected ';': )
(10598,71-72): run-time error JS1195: Expected expression: >
(10598,85-86): run-time error JS1004: Expected ';': )
(10600,94-95): run-time error JS1004: Expected ';': {
(10604,37-38): run-time error JS1002: Syntax error: }
(10610,25-26): run-time error JS1197: Too many errors. The file might not be a JavaScript file: }
(10602,45-57): run-time error JS1018: 'return' statement outside of function: return false
 */
/* FORMSETTINGS.js
 * Implementation:- 23-02-2016
 *
 * By:- Tarun Kumar Dewangan
 * License:- Focussoftnet pvt. ltd.
 */

var isFormSelected = false;
var selectedFormName = "";
var viewId = -1;
var m_FormViewData;
var ConfigForm_ResourceMsgs;
var bFormAlreadyExist;
var m_FromLandingScreen = false;
var FormMapping = [];
var arrFormDependencyUsed = {};
var arrFormDependency = {};
var FORMSETTINGS = {

    setHeight: function () {
        debugger;
        var sCtrlId = document.getElementById("id_Accountbody");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 230 + "px";
        }

        var sCtrlId = document.getElementById("ContentArea");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 200 + "px";
        }

        var sCtrlId = document.getElementById("FormTreeMenu");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 320 + "px";
        }

        var sCtrlId = document.getElementById("Ms_Dependency");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 560 + "px";
        }

        var sCtrlId = document.getElementById("Ms_DependencyUsed");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 560 + "px";
        }

        var sAllExportImportFormsHeight = 0;
        var sCtrlId = document.getElementById("AllExportImportForms");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 280 + "px";
            sAllExportImportFormsHeight = $(window).height() - 280;
        }

        var sCtrlId = document.getElementById("ExportImportForms_Views");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = sAllExportImportFormsHeight / 2 + "px";
        }

        var sCtrlId = document.getElementById("ExportImportForms_DependantForms");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = sAllExportImportFormsHeight / 2 + "px";
        }
    },

    setModuleFilter: function (ele) {
        //debugger;
        OPTIONCONTROL.setControlText("txtFormName", "");
        $("#tblDependency_Form tbody").empty();
        $("#tblUsed_Form tbody").empty();
        $("#txtFormCaption").val("");
        document.getElementById('ddlModule').disabled = false;
        document.getElementById("chkIsDefault").checked = false;
        document.getElementById("chkIsDefault").disabled = false;

        var iLanguageId = parseInt($("#hdnLanguageId").val());
        var sModule = document.getElementById('ddlModule').options[document.getElementById('ddlModule').selectedIndex].text;
        var sFilter = "iLanguageId=" + iLanguageId + " and sModule='" + sModule + "'";
        OPTIONCONTROL.setFilter("txtFormName", sFilter);
    },

    ToggleMenu: function () {
        $("#FormMenus_div").toggle();
        $("#altMenu_Icon").toggle();
        if ($("#FormContent_div").hasClass("col-xs-12 col-sm-9 col-md-9 col-lg-9")) {
            $("#FormContent_div").removeClass("col-xs-12 col-sm-9 col-md-9 col-lg-9").addClass("col-xs-12 col-sm-12 col-md-12 col-lg-12");
        }
        else {
            $("#FormContent_div").removeClass("col-xs-12 col-sm-12 col-md-12 col-lg-12").addClass("col-xs-12 col-sm-9 col-md-9 col-lg-9");
        }
    },

    SetFormDetails: function () {
        debugger;
        var optionData = OPTIONCONTROL.convertRawDataIntoObject("txtFormName", OPTIONCONTROL.getControlData("txtFormName"));
        var mName = optionData.sCaption;
        if (mName == "" || mName == undefined) {
            mName = OPTIONCONTROL.getControlText("txtFormName");
        }
        $("#txtFormCaption").val(mName.replace(/[^a-z\d\s]+/gi, '').trim());
        //debugger;
        var msTypeId = OPTIONCONTROL.getControlValue("txtFormName");
        if (msTypeId > 0) {
            FORM_MENU.selectMenuForForm(mName, "FormTreeMenu");
            var msDetails = FORMSETTINGS.GetFormDetails();
            //debugger;
            var moduleName = msDetails.FormModule;
            var ddl = document.getElementById('ddlModule');
            for (var i = 0; i < ddl.options.length; i++) {
                if (ddl.options[i].text.trim() === moduleName.trim()) {
                    ddl.selectedIndex = i;
                    break;
                }
            }
            if (msDetails.FormIsDefault == true) {
                document.getElementById("chkIsDefault").checked = true;
                document.getElementById("chkIsDefault").disabled = true;
                if (document.getElementById("btnDelete_ConfigureForms") != null && document.getElementById("btnDelete_ConfigureForms") != undefined) {
                    document.getElementById("btnDelete_ConfigureForms").style.display = "none";
                }
            }
            else {
                document.getElementById("chkIsDefault").checked = false;
                document.getElementById("chkIsDefault").disabled = false;
                if (document.getElementById("btnDelete_ConfigureForms") != null && document.getElementById("btnDelete_ConfigureForms") != undefined) {
                    document.getElementById("btnDelete_ConfigureForms").style.display = "inline-block";
                }
            }
            if (msDetails.FormAllowRevision == true) {
                document.getElementById("chkAllowRivisions").checked = true;
            }
            else {
                document.getElementById("chkAllowRivisions").checked = false;
            }

            if (msDetails.FormbSaveRecords) {
                document.getElementById("chkSaveRecords").checked = true;
            }
            else { document.getElementById("chkSaveRecords").checked = false; }

            if (msDetails.FormbOpenFromMenu) {
                //openNav();
                document.getElementById("chkOpenFromMenu").checked = true;
            }
            else {
                //closeNav();
                $('#FormTreeMenu a').removeClass('menu-selected infounpaid');
                document.getElementById("chkOpenFromMenu").checked = false;
            }

            if (msDetails.HTML != undefined && msDetails.HTML != null && msDetails.HTML != "") {
                document.getElementById("chkSaveDesignAsHtml").checked = true;
            }
            else { document.getElementById("chkSaveDesignAsHtml").checked = false; }
            
            //$("#MViewCustomizationTabs, #MViewCustomizationDetailsDiv").html("");
            //OPTIONCONTROL.clear("txtFormViewName", false);
           // $("#chkIsVisible, #chkIsAvailableInMobile").prop("checked", false);
            //$("#Form_Customization").css("display", "block");
            //$("#Form_TreeCustomization").css("display", "block");
            var urlPath = GLOBAL.getContextPath("GetDependenciesDetails", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormId: msTypeId }, "JSON", true, "FORMSETTINGS.ShowDependency_onSuccess");
        }
        else {
            FORMSETTINGS.Clear(mName);
            openNav();
         
          
        }
        $("#txtFormCaption").focus();
    },

    GetFormDefinition: function (ele) {
        //debugger;
        if (!FORMSETTINGS.IsExtraFieldOpened()) {
            FORMSETTINGS.selectTab(ele);
            FORMSETTINGS.showTabContent(ele);
        }
        else {
            FORMSETTINGS.unSelectTab(ele);
        }

        if (document.getElementById("chkOpenFromMenu").checked) {
            openNav();
        }
        else {
            closeNav();
            $('#FormTreeMenu a').removeClass('menu-selected infounpaid');
        }
    },

    GetFormDetails: function () {
        //debugger;
        var iFormId = OPTIONCONTROL.getControlValue("txtFormName");
        if (iFormId > 0) {
            var urlPath = GLOBAL.getContextPath("GetFormDetails", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: iFormId }, "JSON", false, "");
            //debugger;
            if (fnResult.lValue == 1) {
                if (fnResult.data.strError == "") {
                var msDetails = fnResult.data.objFormDetail;
                //debugger;
                var msData = {
                    FormId: msDetails.FormTypeId,
                    FormName: msDetails.FormName,
                    FormIsDefault: msDetails.IsDefault,
                    FormModule: msDetails.Module,
                    FormAllowRevision: msDetails.AllowRevision,
                    FormbSaveRecords: msDetails.AllowSave,
                    FormbOpenFromMenu: msDetails.OpenFromMenu,
                    HTML: msDetails.HTML
                }
                return msData;
                }
                else {
                    COMMON.prototype.showMessage(fnResult.data.strError);
                    return false;
                }
            }
        }
        else {
            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelectForm"));
            return false;
        }
    },

    GetFormViewDetails: function (iFormId) {
        var msvDetails;
        for (var i = 0; i < m_FormViewData.length; i++) {
            if (parseInt(m_FormViewData[i].FormId) == parseInt(iFormId)) {
                msvDetails = m_FormViewData[i].FormViews;
                break;
            }
        }
        //var msvDetails = $("#FormViewDetails_" + iFormId).find('input[type="hidden"]');
        var arrMsViews = [];
        for (var i = 0; i < msvDetails.length; i++) {
            var msvData = {
                msvId: msvDetails[i].ViewId,
                msvCaption: msvDetails[i].Caption,
                msvIsVisible: msvDetails[i].IsVisible,
                msvIsDefault: msvDetails[i].Default,
                msvIsInMobile: msvDetails[i].IsAvlblOnMobile,
            }
            arrMsViews.push(msvData);
        }
        return arrMsViews;
    },

    GetMenuDetails: function () {
        var mMenuData = FORM_MENU.getSelectedMenu("FormTreeMenu");
        return mMenuData;
    },

    GetFormTypeId: function () {
        debugger
        var msTypeId = OPTIONCONTROL.getControlValue("txtFormName");
        if (msTypeId != null && msTypeId != undefined && msTypeId !== "") {
            return parseInt(msTypeId);
        }
        else {
            return 0;
        }
    },

    GetFormName: function () {
        var msName = OPTIONCONTROL.getControlText("txtFormName").replace(/\s/g, '');
        return msName;
    },

    unSelectTab: function (ele) {
        //debugger
        $('#FormTabs ul li a').removeClass('unSelected');
        $(ele).children(':first-child').addClass('unSelected');
        $(ele).children(':first-child').attr("data-toggle", "");
    },
    selectTab: function (ele) {
        //debugger
        $('#FormTabs ul li a').removeClass('selected');
        $(ele).children(':first-child').addClass('selected');
    },
    showTabContent: function (ele) {
        $(ele).children(':first-child').attr("data-toggle", "tab");
    },

    IsExtraFieldOpened: function () {
        ////debugger
        //if (document.getElementById("FormTabs").style.opacity != 1) {
        //    return true;
        //}
        //else
            return false;
    },

    //SetFormViewModalData: function (arrFormView) {
    //    if (arrFormView != null && arrFormView != undefined) {
    //        m_FormViewData = null;
    //        m_FormViewData = arrFormView;
    //    }
    //},

    SetResourceMessages: function (arrResourceMsgs) {
        if (arrResourceMsgs != null && arrResourceMsgs != undefined) {
            ConfigForm_ResourceMsgs = arrResourceMsgs;
        }
    },

    IsFormAlreadyExist: function (sFormName) {
        var hasForm = false;
        try {
            if (m_FormViewData != null && m_FormViewData != undefined) {
                for (var i = 0; i < m_FormViewData.length; i++) {
                    var msName = m_FormViewData[i].FormName;
                    if (msName != undefined && msName != null) {
                        if (sFormName == msName) {
                            hasForm = true;
                            break;
                        }
                    }
                }
            }
        } catch (e) {
            hasForm = false;
        }
        return hasForm;
    },

    SaveFormOrViewDetails: function () {
        debugger;
        var MSTabId = 0;
        if ($("#FormTabs .active")[0].dataset.tabid == undefined) {
            MSTabId = 1;
        }
        else {
            MSTabId = $("#FormTabs .active")[0].dataset.tabid;
        }
        //FORMCUSTOMIZATION.RemoveLandingFormCacheData();
        //debugger;
        if (MSTabId == 1) {
            FORMSETTINGS.SaveFormDetails();
        }
        else {
            FormMapping = [];
            var externalModules = Form_ExternalModule.GetExternalModules("FormExternalModule");
            var allTriggers = document.getElementById("tblExternalModules_Triggers").tBodies[0].rows;
            for (var i = 0; i < allTriggers.length; i++) {
               

                var Triggers = {};
                Triggers.MappingDetails =
                    JSON.parse(allTriggers[i].dataset.mappingdetails)
                FormMapping.push(Triggers);
            }
            
            //debugger;
            FORMCUSTOMIZATION.UpdateFormCustomization(null, null, externalModules, null);
        }
        FORMCUSTOMIZATION.setHeight();
    },

    SaveFormDetails_FromLanding: function () {
        debugger;
        var MSTabId = 2;
        //FORMCUSTOMIZATION.RemoveLandingFormCacheData();
        var externalModules = Form_ExternalModule.GetExternalModules("FormExternalModule");
        FORMCUSTOMIZATION.UpdateFormCustomization(null, null, externalModules, null);
    },

    SaveViewDetails_FromLanding: function () {
        //debugger;
        var MSTabId = 3;
        //FORMCUSTOMIZATION.RemoveLandingFormCacheData();
        FORMSETTINGS.SaveFormViewDetails();
    },

    //Code Added by Sagar For Updating the External Module From Forms Screen
    SaveFormOrViewDetailsForExternalModule: function () {
        //debugger;
        //FORMCUSTOMIZATION.RemoveLandingFormCacheData();
        var externalModules = Form_ExternalModule.GetExternalModules("FormExternalModule");
        FORMCUSTOMIZATION.UpdateFormCustomization(null, null, externalModules, null);
    },
    //Code Ended
    
    //// Form Import and Export Methods

    ImportDefaultForm: function (ele) {
        debugger;
        if (ele.files.length > 0) {
            var fileType = ele.files[0].type;
            if (fileType == "text/xml") {
                var formData = new FormData();
                formData.append('ImportedForm', ele.files[0]);
                var urlPath = GLOBAL.getContextPath("ImportForms", "FormCustomization", "Forms");
                $.ajax({
                    type: 'POST',
                    url: urlPath,
                    data: formData,
                    contentType: false,
                    processData: false,
                    beforeSend: function () {
                        GLOBAL.LoadingStart();
                    },
                    complete: function () {
                        GLOBAL.LoadingEnd();
                    },
                    success: function (data) {
                        debugger;
                        if (data != "") {
                            if (data == "Successs") {
                                COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("Forms Imported Succeessfully"));
                            }
                            else {
                                COMMON.prototype.showMessage(data);
                            }
                        }
                        else {
                            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgImportFailed"));
                        }
                    },
                    error: function () { }
                });
            }
            else {
                COMMON.prototype.showMessage("Please select an XML file only");
                return false;
            }
        }
    },

    GetExportingForm_ViewsAndDependencies: function (ele) {
        debugger;
        if (ele.id == "chkSelectAllExportingForm") {
            if (ele.checked) {
                $("#AllExportImportForms input[type='checkbox']").prop("checked", true);
                $("#lblSelectAllForms").html("");
                var eleCheckBox =   '<label class="containerr"> Unselect All ' +
                                    '<input id="chkSelectAllExportingForm" type="checkbox" onchange="FORMSETTINGS.GetExportingForm_ViewsAndDependencies(this);" checked/>' +
                                    '<span class="checkmark"></span>' +
                                    '</label>' 
                $("#lblSelectAllForms").append(eleCheckBox);
            }
            else {
                $("#AllExportImportForms input[type='checkbox']").prop("checked", false);
                $("#lblSelectAllForms").html("");
                var eleCheckBox = '<label class="containerr"> Select All ' +
                                 '<input id="chkSelectAllExportingForm" type="checkbox" onchange="FORMSETTINGS.GetExportingForm_ViewsAndDependencies(this);" />' +
                                 '<span class="checkmark"></span>' +
                                 '</label>'
                $("#lblSelectAllForms").append(eleCheckBox);
            }
        }
        else {
            var allChkForms = $("#AllExportImportForms input[type='checkbox']");
            var allCheckedForms = $("#AllExportImportForms input[type='checkbox']:checked");
            if (allChkForms.length == allCheckedForms.length) {
                $("#chkSelectAllExportingForm").prop("checked", true);
            }
            else {
                $("#chkSelectAllExportingForm").prop("checked", false);
            }
        }
        var allChkForms = $("#AllExportImportForms input[type='checkbox']:checked");
        var FormIds = [];
        for (var i = 0; i < allChkForms.length; i++) {
            FormIds.push(parseInt(allChkForms[i].value));
        }
        var urlPath = GLOBAL.getContextPath("SetDependencyForm", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { arrFormIds: FormIds }, "JSON", true, "FORMSETTINGS.ShowViewsAndDependencies");
    },

    ShowViewsAndDependencies: function (bSuccess, data) {
        debugger;
        if (bSuccess && data != "") {
            $("#ExportImportForms_Views, #ExportImportForms_DependantForms").html('');
            for (var i = 0; i < data.ViewsList.length; i++) {
                var div = '<div  class="col-md-12">' +
                                  '<label class="labeltext" data-value="' + data.ViewsList[i].ViewId + '">' + data.ViewsList[i].Caption + '</label>' +
                              '</div>';
                $("#ExportImportForms_Views").append(div);
            }
            for (var i = 0; i < data.DeptFormList.length; i++) {
                var div = '<div  class="col-md-12">' +
                                 '<label class="labeltext" data-value="' + data.DeptFormList[i].ViewId + '">' + data.DeptFormList[i].Caption + '</label>' +
                             '</div>';
                $("#ExportImportForms_DependantForms").append(div);
            }
        }
    },

    ExportForms: function () {
        debugger;
        var allChkForms = $("#AllExportImportForms input[type='checkbox']:checked");
        var FormIds = [];
        for (var i = 0; i < allChkForms.length; i++) {
            FormIds.push(parseInt(allChkForms[i].value));
        }
        if (FormIds.length > 0) {
            var urlPath = GLOBAL.getContextPath("GetExportingForms", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { arrFormIds: FormIds }, "", true, "FORMSETTINGS.SaveExportedFormsFile", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            alert("Select atleast one Form to Export");
        }
    },

    ExportAll: function () {
        debugger;
        var FormIds = [];
        //var allChkForms = $("#AllExportImportForms input[type='checkbox']:checked");
        //for (var i = 0; i < allChkForms.length; i++) {
        //    FormIds.push(parseInt(allChkForms[i].value));
        //}
        FormIds.push(0);
        if (FormIds.length > 0) {
            var urlPath = GLOBAL.getContextPath("GetExporAllForms", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { lstFormExport: null }, "", true, "FORMSETTINGS.SaveExportedFormsFile", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            alert("Select atleast one Form to Export");
        }
    },

    SaveExportedFormsFile: function (bSuccess, data) {
        debugger;
        if (bSuccess && data != "") {
            if (data.length > 100) {
                var dataBlob = new Blob([data], { type: "text/xml" });
                var tempURL = window.URL.createObjectURL(dataBlob);
                var currentdate = new Date();
                var datetime = currentdate.getDate() + "_"
                                + (currentdate.getMonth() + 1) + "_"
                                + currentdate.getFullYear() + "_"
                                + currentdate.getHours() + "_"
                                + currentdate.getMinutes() + "_"
                                + currentdate.getSeconds();
                var fileName = "ExportedForm_" + datetime + ".xml";
                var tempLink = document.createElement("a");
                tempLink.download = fileName;
                tempLink.innerHTML = "Download File";
                tempLink.href = tempURL;
                tempLink.style.display = "none";
                document.body.appendChild(tempLink);
                tempLink.click();
                tempLink.remove();
                alert("Export successfully");
                $("#ExportForms_Modal").modal("hide");
            }
            else {
                alert(data);
            }
        }
        else {
            alert("Error while exporting Form");
        }
    },

    ImportDefaultForm: function (ele) {
        debugger;
        if (ele.files.length > 0) {
            var fileType = ele.files[0].type;
            if (fileType == "text/xml") {
                var formData = new FormData();
                formData.append('ImportedForm', ele.files[0]);
                var urlPath = GLOBAL.getContextPath("ImportForms", "FormCustomization", "Forms");
                $.ajax({
                    type: 'POST',
                    url: urlPath,
                    data: formData,
                    contentType: false,
                    processData: false,
                    beforeSend: function () {
                        GLOBAL.LoadingStart();
                    },
                    complete: function () {
                        GLOBAL.LoadingEnd();
                    },
                    success: function (data) {
                        if (data != "") {
                            if (data == "Successs") {
                                COMMON.prototype.showMessage("Forms Imported Succeessfully");
                            }
                            else {
                                COMMON.prototype.showMessage(data);
                            }
                        }
                        else {
                            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgImportFailed"));
                        }
                    },
                    error: function () { }
                });
            }
            else {
                COMMON.prototype.showMessage("Please select an XML file only");
                return false;
            }
        }
    },

    ///........ Methods For Form Configuration ............

    toggleFormTabs: function (eleId) {
        ////debugger;
        var btnDeleteForm = document.getElementById("btnDelete_ConfigureForms");
        if (eleId.id == "header_group_Form_ConfigureForm") {
            eleId.children[0].className = "btn col-xs-12 header-button-mv  infounpaid";
            eleId.nextElementSibling.children[0].className = "btn col-xs-12 header-button-mv  ";
            document.getElementById("Form_ConfigureForm").style.display = "block";
            document.getElementById("FormView_ConfigureForm").style.display = "none";
            document.getElementById("btnNew_ConfigureForms").style.display = "inline-block";
            document.getElementById("btnSave_ConfigureForms").style.display = "inline-block";
            //var ms_selected = false;
            //$("#Forms_name ul li").each(function () {
            //    if ($(this).hasClass('selectedLi') && this.children[1].dataset.Formisdefault == "True") {
            //        ms_selected = true;
            //    }
            //});
            if (FORMSETTINGS.IsDefaultForm()) {
                if (btnDeleteForm != null && btnDeleteForm != undefined) {
                    btnDeleteForm.style.display = "none";
                }
            }
            else
                if (btnDeleteForm != null && btnDeleteForm != undefined) {
                    btnDeleteForm.style.display = "inline-block";
                }
            document.getElementById("lblFormLegend").innerHTML = "Form Customization";
        }
        else if (eleId.id == "header_group_FormView_ConfigureForm") {
            eleId.children[0].className = "btn col-xs-12 header-button-mv  infounpaid";
            eleId.previousElementSibling.children[0].className = "btn col-xs-12 header-button-mv  ";
            document.getElementById("Form_ConfigureForm").style.display = "none";
            document.getElementById("FormView_ConfigureForm").style.display = "block";
            document.getElementById("btnNew_ConfigureForms").style.display = "none";
            document.getElementById("btnSave_ConfigureForms").style.display = "none";
            document.getElementById("lblFormLegend").innerHTML = "View Customization";
            if (btnDeleteForm != null && btnDeleteForm != undefined) {
                btnDeleteForm.style.display = "none";
            }
        }
    },

    IsDefaultForm: function () {
        var ms_selected = false;
        $("#Forms_name ul li").each(function () {
            if ($(this).hasClass('selectedLi') && this.children[1].dataset.Formisdefault == "True") {
                ms_selected = true;
            }
        });
        if (ms_selected) {
            return true;
        }
        else
            return false;
    },

    showFormDetailsForEdit: function (ele) {
        //debugger;
        if (document.getElementById("Forms_name").style.opacity != "0.8") {
            //$("#Forms_name ul li").each(function () {
            //    $(this).removeClass('selectedLi');
            //});
            //ele.className = "selectedLi";
            isFormSelected = true;
            selectedFormId = ele.children[1].dataset.formid;
            //document.getElementById("txtFormCaption").value = ele.children[1].dataset.formcaption;
            //document.getElementById("txtFormName").value = ele.children[1].dataset.formname;
            //document.getElementById("txtFormName").disabled = true;
            var moduleName = ele.children[1].dataset.Formmodule;
            var ddl = document.getElementById('ddlModule');
            for (var i = 0; i < ddl.options.length; i++) {
                if (ddl.options[i].text.trim() === moduleName.trim()) {
                    ddl.selectedIndex = i;
                    //ddl.disabled = true;
                    break;
                }
            }
            if (ele.children[1].dataset.Formisdefault == "True") {
                document.getElementById("chkIsDefault").checked = true;
                document.getElementById("chkIsDefault").disabled = true;
                document.getElementById("btnDelete_ConfigureForms").style.display = "none";
            }
            else {
                document.getElementById("chkIsDefault").checked = false;
                document.getElementById("chkIsDefault").disabled = false;
                document.getElementById("btnDelete_ConfigureForms").style.display = "inline-block";
            }

            //document.getElementById("txtFormViewCaption").value = ele.children[1].dataset.Formcaption;
            //document.getElementById("chkIsVisible").checked = true;
            //document.getElementById("chkIsVisible").disabled = true;
            //document.getElementById("chkIsAvailableInMobile").checked = false;
            ////$("#tblFormViews tbody").empty();
            //document.getElementById("tblFormViews").tBodies[0].innerHTML = "";
            //$(ele).find('#FormView_div div').each(function () {
            //    ////debugger;
            //    var eleDiv = $(this);
            //    var divId = eleDiv.index();
            //    var vCaption = eleDiv[0].children[0].dataset.Formviewcaption;
            //    var vDefault = '<input type="checkbox" disabled />';
            //    if (eleDiv[0].children[0].dataset.Formviewisdefault == "True") {
            //        vDefault = '<input type="checkbox" checked="checked" disabled /><input type="hidden" value="1" />';
            //    }
            //    var vIsVisible = '<input type="checkbox" disabled />';
            //    if (eleDiv[0].children[0].dataset.Formviewisvisible == "True") {
            //        vIsVisible = '<input type="checkbox" checked="checked" disabled />';
            //    }
            //    var vIsAvlblOnMobile = '<input type="checkbox" disabled hidden />';
            //    if (eleDiv[0].children[0].dataset.Formviewisavlblonmobile == "True") {
            //        vIsAvlblOnMobile = '<input type="checkbox" checked="checked" disabled hidden /><input type="hidden" value="1" />';
            //    }
            //    var vViewId = eleDiv[0].children[0].dataset.Formviewid;
            //    $("#tblFormViews tbody").append('<tr onclick="return FORMSETTINGS.selectedFormView(this);" ondblclick="FORMSETTINGS.GetMViewCustomizationWindow();">' +
            //                           '<td><input type="hidden" id="viewId' + divId + '" value="' + vViewId + '" />' + (divId + 1) + '</td>' +
            //                           '<td>' + vCaption + '</td>' +
            //                           '<td>' + vIsVisible + vIsAvlblOnMobile + '</td>' +
            //                           '<td>' + vDefault + '</td>' +
            //                           + '</tr>');
            //});
            selectedFormName = ele.textContent.trim();
            //var searchMenu;
            //$("#FormTreeMenu span").each(function () {
            //    //$(this).removeClass('menu-selection');
            //    if ($(this).text().trim() == selectedFormName) {
            //        searchMenu = this;
            //    }
            //});
            //if (searchMenu != null && searchMenu != undefined) {
            //    //FORMSETTINGS.setEmptyMenuSelection(document.getElementById("FormTreeMenu"));
            //    //FORMSETTINGS.ShowParent(searchMenu, searchMenu.text.trim());
            //    //FORM_MENU.selectMenuForForm(searchMenu.textContent.trim(), "FormTreeMenu");
            //}
            //document.getElementById("tblDependency_ConfigureForm").style.display = "none";
            //document.getElementById("header_group_FormView_ConfigureForm").style.display = "block";
            //document.getElementById("btnCustomize_ConfigureForms").disabled = false;
            //document.getElementById("btnCustomizeTree_ConfigureForms").disabled = false;
            viewId = -1;
        }
    },

    ClearFields_ForNewForm: function () {
        ////debugger;
        document.getElementById("txtFormCaption").value = "";
        document.getElementById("txtFormCaption").focus();
        document.getElementById("txtFormCaption").disabled = false;
        document.getElementById("txtFormName").value = "";
        document.getElementById("txtFormName").disabled = false;
        document.getElementById("chkIsDefault").checked = false;
        document.getElementById("chkIsDefault").disabled = false;
        document.getElementById("chkAllowRivisions").checked = false;
        document.getElementById("chkAllowRivisions").disabled = false;
        document.getElementById("ddlModule").selectedIndex = "0";
        document.getElementById("ddlModule").disabled = false;
        document.getElementById("header_group_FormView_ConfigureForm").style.display = "none";
        document.getElementById("tblDependency_ConfigureForm").style.display = "none";
        if (document.getElementById("id_toggle_dependency").className == "fa fa-caret-up") {
            document.getElementById("id_toggle_dependency").className = "fa fa-caret-down";
        }
        document.getElementById("btnCustomize_ConfigureForms").disabled = true;
        document.getElementById("btnCustomizeTree_ConfigureForms").disabled = true;
        document.getElementById("btnDelete_ConfigureForms").disabled = true;
        $("#Forms_name ul li").each(function () {
            $(this).removeClass('selectedLi');
        });
        isFormSelected = false;
        selectedFormId = 0;
        selectedFormName = "";
    },

    AddDefaultFormName: function (ele) {
        ////debugger;
        if (ele.value.trim() != "") {
            if (selectedFormName == "" && isFormSelected == false) {
                document.getElementById("txtFormName").value = ele.value.trim().replace(/\s/g, '');
            }
        }
        else {
            document.getElementById("txtFormCaption").value = "";
            document.getElementById("txtFormName").value = "";
        }
    },

    SaveFormDetails: function () {
        //debugger;
        if (!FORMSETTINGS.IsExtraFieldOpened()) {
            var menuselection = FORM_MENU.isMenuSelected();
            if (menuselection == true || document.getElementById('chkOpenFromMenu').checked == false) {
                var FormCaption = document.getElementById("txtFormCaption").value.trim();
                var FormName = FORMSETTINGS.GetFormName();
                if (FormName == "") {
                    COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelectForm"));
                    //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelectForm"));//"Enter Form Name."
                    document.getElementById("txtFormName").focus();
                    return false;
                }
                if (FormCaption == "") {
                    COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("EnterCaption"));
                    //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("EnterCaption"));//"Enter Caption."
                    document.getElementById("txtFormCaption").focus();
                    return false;
                }
                if (FormCaption != "" && FormName != "") {
                    ////debugger;
                    var selectedFormId = FORMSETTINGS.GetFormTypeId();
                    if (selectedFormId <= 0) {
                        if (FORMSETTINGS.IsFormAlreadyExist(FormName)) {
                            COMMON.prototype.showMessage("Form Name already exist");
                            //FORMSETTINGS.ShowAlertMessage("Form Name already exist");
                            return false;
                        }
                    }
                    //var searchBy = $("#FormSearchOptionDiv input[type='radio']:checked").val();
                    //if (searchBy == 1) {
                    //    searchBy = true;
                    //}
                    //else {
                    //    searchBy = false;
                    //}
                    var allowRevision = document.getElementById('chkAllowRivisions').checked;
                    //var PickCode = document.getElementById('chkPickCode').checked;
                    //var GroupMandatory = document.getElementById('chkGroupMandatory').checked;
                    var isDefault = document.getElementById('chkIsDefault').checked;
                    var IsSaveRecords = document.getElementById('chkSaveRecords').checked;
                    var IsOpenFromMenu = document.getElementById('chkOpenFromMenu').checked;
                    var IsSaveDesignAsHtml = document.getElementById('chkSaveDesignAsHtml').checked;
                    var module = document.getElementById('ddlModule').options[document.getElementById('ddlModule').selectedIndex].text;
                    var menuData = FORMSETTINGS.GetMenuDetails();
                    ////debugger;
                    var menuId = 0;
                    var parentId = 0;
                    if (IsOpenFromMenu) {
                        if (selectedFormId > 0) {
                            if (menuData.isGroup == "True") {
                                menuId = menuData.menuId;
                            }
                            else {
                                menuId = menuData.parentId;
                            }
                        }
                        else {
                            menuId = menuData.menuId;
                        }
                        parentId = menuData.parentId;
                    }
                    debugger;
                    var sForms_PageContainer = $("#ConfigureForms_PageContainer").html();
                    var urlPath = GLOBAL.getContextPath("SaveConfigureForm", "FormCustomization", "Forms");
                    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: selectedFormId, strFormName: FormName, strCaption: FormCaption, bAllowRivisions: allowRevision, bIsDefault: isDefault, bSaveRecords: IsSaveRecords, bOpenFromMenu: IsOpenFromMenu, bSaveDesignAsHtml: IsSaveDesignAsHtml, sModule: module, iSelectedMenuId: menuId, iParentId: parentId, sHTMLPage: sForms_PageContainer }, "HTML", true, "FORMSETTINGS.SaveFormDetails_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
                }
            }
            else {
                COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelectmenu"));
                return false;
            }
        }
    },
    SaveFormDetails_onSuccess: function (bSuccess, data) {
        debugger
        if (data != "" && bSuccess == true) {
            if (data.length <= 250) {
                COMMON.prototype.showMessage(data);
                //FORMSETTINGS.ShowAlertMessage(data);
            }
            else {
                //GLOBAL.pageRefresh();
                GLOBAL.LoadScreen(true, data);
                GLOBAL.RefreshMenu();

                var iFormId = parseInt($("#hdnFormId").val());
                if (iFormId > 0) {
                    OPTIONCONTROL.setControlValue("txtFormName", iFormId);
                    FORMSETTINGS.SetFormDetails();
                }

                var IsFormAlreadyExist = bFormAlreadyExist;
                if (IsFormAlreadyExist == true) {
                    COMMON.prototype.showMessage("Form updated successfully");
                    //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgFormupdatedsuccessfully"), "green");//"Form Saved Successfully."
                }
                else {
                    COMMON.prototype.showMessage("Form Saved Successfully");
                    //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgFormSavedSuccessfully"), "green");//"Form Saved Successfully."   
                }
            }
        }
        else {
            COMMON.prototype.showMessage(data);
            //FORMSETTINGS.ShowAlertMessage(data);
        }
    },

    DeleteFormDetails: function () {
        ////debugger;
        if (!FORMSETTINGS.IsExtraFieldOpened()) {
            var mTypeId = FORMSETTINGS.GetFormTypeId();
            if (mTypeId > 0) {
                $("#ConfigureForms_DeleteForm_Modal").modal('show');
            }
            else {
                COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelecttheFormtoDelete"));
                //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelecttheFormtoDelete"));//"Select the Form to Delete."
                document.getElementById("txtFormName").focus();
                return false;
            }
        }
    },
    DeleteForm: function () {
        ////debugger;
        var mTypeId = FORMSETTINGS.GetFormTypeId();
        if (mTypeId > 0) {
            $("#ConfigureForms_DeleteForm_Modal").modal('hide');
            var urlPath = GLOBAL.getContextPath("DeleteForm", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: mTypeId }, "HTML", true, "FORMSETTINGS.DeleteForm_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },
    DeleteForm_onSuccess: function (bSuccess, data) {
        if (bSuccess == true && data != '"Error"') {
            GLOBAL.LoadScreen(true, data);
            GLOBAL.RefreshMenu();
            COMMON.prototype.showMessage("Form deleted successfully");
            //COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgFormdeletesuccessfully"));

            //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgFormdeletesuccessfully"), "green");//"Form deleted successfully."
        }
        else {
            COMMON.prototype.showMessage(data);
            //FORMSETTINGS.ShowAlertMessage(data);
        }
    },

    GetGridCustomization: function (ele) {
        //debugger;
        if (!FORMSETTINGS.IsExtraFieldOpened()) {
            var selectedFormId = FORMSETTINGS.GetFormTypeId();
            if (selectedFormId > 0) {
                FORMSETTINGS.HideAlertMessage();
                FORMSETTINGS.selectTab(ele);
                FORMSETTINGS.showTabContent(ele);
                closeNav();

                if (selectedFormId == ele.dataset.formid && ele.children[0].className == "selected") {
                    return false;
                }
                ele.dataset.formid = selectedFormId;
                var urlPath = GLOBAL.getContextPath("GridCustomization", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: parseInt(selectedFormId), bFromLandingScreen: false }, "HTML", true, "FORMSETTINGS.DisplayGridPopup_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else {
                COMMON.prototype.showMessage("Enter Form Name Or Create new Form");
                //FORMSETTINGS.ShowAlertMessage("Enter Form Name Or Create new Form");
                FORMSETTINGS.unSelectTab(ele);
            }
        }
        else {
            FORMSETTINGS.unSelectTab(ele);
        }
    },
    DisplayGridPopup_onSuccess: function (bSuccess, data, bFromOK_Click) {
        debugger;  
        if (data != "") {
            $("#Form_TreeCustomization").html(data);
            //$("#gridFields_div").height(GLOBAL.getPageHeight() - 300);
            if (m_FromLandingScreen == true) {
                FORM.GetFormGrid("CustomizeTree", 1);
                if ($("#CustomizeTree_Modal").hasClass("fade")) {
                    $(".modal-backdrop").remove();
                }
            }
            else if (bFromOK_Click) {
                COMMON.prototype.showMessage("Tree Customization Saved Successfully.");
            }
        }
    },
    EnableConfigureButton: function () {
        document.getElementById("btnCustomize_ConfigureForms").disabled = false;
    },

    RemoveClickAndDblClickEvent: function (eleId, clsName) {
        document.getElementById(eleId).style.opacity = "0.8";
        document.getElementById(eleId).className = clsName; //"Forms-name-div";
    },
    AddClickAndDblClickEvent: function (eleId, clsName) {
        document.getElementById(eleId).style.opacity = "1";
        document.getElementById(eleId).className = clsName; //"Forms-name-div scrollable";
    },

    GetFormCustomization: function (ele) {
        //debugger;
        if (!FORMSETTINGS.IsExtraFieldOpened()) {
            var selectedFormId = FORMSETTINGS.GetFormTypeId();
            if (selectedFormId > 0) {
                closeNav();
                $(ele).children().removeClass("unSelected");
                FORMSETTINGS.selectTab(ele);
                FORMSETTINGS.showTabContent(ele);
                if (selectedFormId == ele.dataset.formid && ele.children[0].className == "selected") {
                    return false;
                }
                ele.dataset.formid = selectedFormId;
                var msMenuId = document.getElementById("htnCurrentMenuId_ConfigureForm").value;
                var urlPath = GLOBAL.getContextPath("FormCustomization", "FormCustomization", "Forms");
                console.log('CUSTOMIZATION AJAX starts: GetFormCustomization() ', new Date().toLocaleString());
                debugger;
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: selectedFormId, IsForm: false, iMenuId: msMenuId }, "HTML", true, "FORMSETTINGS.LoadFormCustomizationWindow", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else {
                if (selectedFormId <= 0) {
                    COMMON.prototype.showMessage("Enter Form Name Or Create new Form");
                }
                FORMSETTINGS.unSelectTab(ele);
            }
        }
        else {
            FORMSETTINGS.unSelectTab(ele);
        }
    },

    selectTabs: function myfunction(ele) {
        ////debugger;
        $($(ele)[0].parentElement.children).each(function () {
            $(this).find('a').removeClass(" infounpaid");
        })
        $(ele).children().addClass(" infounpaid");
    },

    LoadFormCustomizationWindow: function (bSuccess, data) {
        debugger;
        if (data != "" && bSuccess == true) {
            console.log('CUSTOMIZATION AJAX Success: GetFormCustomization ', new Date().toLocaleString());
            $("#Form_Customization").html('').html(data);
            //debugger;
            if (document.getElementById("FormFields_list") != null && document.getElementById("FormFields_list") != undefined) {
                FORMCUSTOMIZATION.ShowFieldsForTab(document.getElementById("FormFields_list").children[0], true);
            }
            if (document.getElementById("ddlConstraintTabList") != null && document.getElementById("ddlConstraintTabList") != undefined) {
                FORMCUSTOMIZATION.SelectTab_ForConstraint($("#ddlConstraintTabList option:selected"));
            }
            debugger;
            FORMCUSTOMIZATION.setHeight();
        }
    },

    GetFormCustomizationForExternal: function (iFormId, fnCallBackOnSuccess) {
        var urlPath = GLOBAL.getContextPath("FormCustomization", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: iFormId }, "HTML", true, fnCallBackOnSuccess, "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },

    ToggleDependencyDetails: function (ele) {
        if (isFormSelected) {
            var FormId = selectedFormId;
            if (ele.className == "fa fa-caret-down showhide-dependency-icon") {
                ele.className = "fa fa-caret-up showhide-dependency-icon";
                var urlPath = GLOBAL.getContextPath("GetDependenciesDetails", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormId: FormId }, "JSON", false, "FORMSETTINGS.ShowDependency_onSuccess");
            }
            else {
                ele.className = "fa fa-caret-down showhide-dependency-icon";
                $("#tblDependency_ConfigureForm").toggle();
            }
        }
        else {
            COMMON.prototype.showMessage("Select the Form to see the dependency");
            //FORMSETTINGS.ShowAlertMessage("Select the Form to see the dependency");
        }
    },
    ShowDependency_onSuccess: function (bSuccess, data) {
        if (data != "Error") {
            debugger;
            $("#divUsed_Form").empty();
            if (data.UsedDependenciesPartialView.length > 5) {
                $("#divUsed_Form").append(data.UsedDependenciesPartialView);
                $("#tblUsed_Form_body").height(GLOBAL.getPageHeight() - ($("#msPageHeader").height() + $("#FormTabs").height() + 200));

                for (var i = 0; i < arrFormDependencyUsed.length; i++) {
                    for (var j = 0; j < 4; j++) {
                        var cell = FGRIDCONTROL.getCellObject("tblUsed_Form", (i + 1), (j + 1));
                        var cellText = "";
                        if (j == 0) {
                            cellText = arrFormDependencyUsed[i].LinkMasterName;
                        }
                        else if (j == 1) {
                            cellText = arrFormDependencyUsed[i].TabName;
                        }
                        else if (j == 2) {
                            cellText = arrFormDependencyUsed[i].FieldCaption;
                        }
                        else if (j == 3) {
                            cellText = arrFormDependencyUsed[i].FieldType;
                        }
                        cell.setCellText(cellText);
                    }
                }
                FORMSETTINGS.ResizeFGrid("tblUsed_Form");
            }

            $("#divDependency_Form").empty();
            if (data.DependenciesPartialView.length > 5) {
                $("#divDependency_Form").append(data.DependenciesPartialView);
                $("#tblDependency_Form_body").height(GLOBAL.getPageHeight() - ($("#msPageHeader").height() + $("#FormTabs").height() + 200));

                for (var i = 0; i < arrFormDependency.length; i++) {
                    for (var j = 0; j < 4; j++) {
                        var cell = FGRIDCONTROL.getCellObject("tblDependency_Form", (i + 1), (j + 1));
                        var cellText = "";
                        if (j == 0) {
                            cellText = arrFormDependency[i].LinkMasterName;
                        }
                        else if (j == 1) {
                            cellText = arrFormDependency[i].TabName;
                        }
                        else if (j == 2) {
                            cellText = arrFormDependency[i].FieldCaption;
                        }
                        else if (j == 3) {
                            cellText = arrFormDependency[i].FieldType;
                        }
                        cell.setCellText(cellText);
                    }
                }
                FORMSETTINGS.ResizeFGrid("tblDependency_Form");
            }

            $("#liDependency_tab").addClass("active");
            $("#liDependencyUsed_tab").removeClass("active");
        }
        else {
            COMMON.prototype.showMessage("Error");
            //FORMSETTINGS.ShowAlertMessage("Error");
        }
    },

    ResizeFGrid: function (sGridId, ele) {
        //debugger;
        for (var iCounter = 1; iCounter <= 4; iCounter++) {
            $($('#' + sGridId).find('th')[iCounter]).css('width', '28%');
            $($($('#' + sGridId + '_body').find('tr')[0]).find('td')[iCounter]).css({ "max-width": "", "width": "28%" });
        }

        //if (sGridId == "tblUsed_Form") {
        //    $("#Ms_Dependency").hide();
        //    $("#Ms_DependencyUsed").show();
        //    if (ele != null && ele != undefined) {
        //        ele.nextElementSibling.className = "pull-right";
        //        ele.className = "active pull-right";
        //    }
        //}
        //else {
        //    $("#Ms_DependencyUsed").hide();
        //    $("#Ms_Dependency").show();
        //    if (ele != null && ele != undefined) {
        //        ele.previousElementSibling.className = "pull-right";
        //        ele.className = "active pull-right";
        //    }
        //}
        //var tblHeader = document.getElementById(sGridId + "_head");
        //var HeaderTr = document.getElementById(sGridId + "_row_heading");
        //var iHeaderWidth = parseInt(tblHeader.clientWidth);
        //var iHeaderTrWidth = parseInt(HeaderTr.clientWidth);
        //////debugger;
        //if (iHeaderWidth > iHeaderTrWidth) {

        //    //// for resize header colums..........
        //    var arrHeaderColumns = [];
        //    for (var i = 0; i < HeaderTr.children.length; i++) {
        //        if (HeaderTr.children[i].style.display != "none") {
        //            arrHeaderColumns.push(HeaderTr.children[i]);
        //        }
        //    }
        //    var iNewWidth = parseInt(iHeaderWidth / arrHeaderColumns.length);
        //    for (var i = 0; i < arrHeaderColumns.length; i++) {
        //        arrHeaderColumns[i].style.minWidth = iNewWidth + "px";
        //        arrHeaderColumns[i].style.maxWidth = arrHeaderColumns[i].style.minWidth;
        //    }

        //    //// for resize body colums...........
        //    var tblBody = document.getElementById(sGridId + "_body");
        //    var arrBodyRows = tblBody.children;

        //    for (var iRowCount = 0; iRowCount < arrBodyRows.length; iRowCount++) {
        //        var arrBodyColumns = [];
        //        var allColums = arrBodyRows[iRowCount].children;
        //        for (var iColCount = 0; iColCount < allColums.length; iColCount++) {
        //            if (allColums[iColCount].style.display != "none") {
        //                arrBodyColumns.push(allColums[iColCount]);
        //            }
        //        }
        //        for (var iCount = 0; iCount < arrBodyColumns.length; iCount++) {
        //            arrBodyColumns[iCount].style.minWidth = iNewWidth + "px";
        //            arrBodyColumns[iCount].style.maxWidth = arrBodyColumns[iCount].style.minWidth;
        //        }
        //    }
        //}
    },

    AddNewGroup_FormMenu: function () {
        var menuselection = FORM_MENU.isMenuSelected();
        if (menuselection == true) {
            document.getElementById("txtNewGroupName").value = "";
            $("#ConfigureForms_AddGroup_Modal").modal('show');
        }
        else {
            COMMON.prototype.showMessage("Select the menu in which you want to add Group");
            //FORMSETTINGS.ShowAlertMessage("Select the menu in which you want to add Group");
            return false;
        }
    },

    SaveNewGroup_ForFormMenu: function () {
        var newGroupName = document.getElementById("txtNewGroupName").value.trim();
        var menuDetails = FORMSETTINGS.GetMenuDetails();
        if (newGroupName != "") {
            var urlPath = GLOBAL.getContextPath("SaveNewGroup", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { sCaption: newGroupName, bIsGroup: menuDetails.isGroup, iMenuUnder: menuDetails.menuId, iParentId: menuDetails.parentId, iSequenceId: menuDetails.sequenceId }, "JSON", true, "FORMSETTINGS.RefreshFormMenu_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else
            $("#lblgroupNameError").html('<i class="fa fa-warning" style="color:red;" ></i> Enter Group Name.').fadeIn().delay(2000).hide(1);
    },
    RefreshFormMenu_onSuccess: function (bSuccess, data) {
        if (data != "Error") {
            ////debugger;
            $("#FormTreeMenu").html('').html(data);
            $("#ConfigureForms_AddGroup_Modal").modal('hide');
        }
        else
            COMMON.prototype.showMessage(data);
        //FORMSETTINGS.ShowAlertMessage(data);
    },

    DeleteGroup_FormMenu: function () {
        //debugger;
        var menuselection = FORM_MENU.isMenuSelected();
        if (menuselection == true) {
            var urlPath = GLOBAL.getContextPath("DeleteGroup", "FormCustomization", "Forms");
            var menuDetails = FORMSETTINGS.GetMenuDetails();
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iMenuId: menuDetails.menuId, bIsGroup: menuDetails.isGroup }, "JSON", true, "FORMSETTINGS.RefreshMenuAfterDelete", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelectmenu"));
            //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelectmenu"));//"Select Menu."
            return false;
        }
    },
    RefreshMenuAfterDelete: function (bSuccess, data) {
        ////debugger;
        if (data.length != 30 && data.length != 44 && data.length != 29) {
            ////debugger;
            COMMON.prototype.showMessage(data.msg);
            //FORMSETTINGS.ShowAlertMessage(data.msg, "green");
            $("#FormTreeMenu").html('').html(data.mnu);
        }
        else
            COMMON.prototype.showMessage(data);
        //FORMSETTINGS.ShowAlertMessage(data);
    },


    ///// Form view methods............

    ClearFields_ForNewFormView: function () {
        document.getElementById("txtFormViewCaption").value = "";
        document.getElementById("txtFormViewCaption").focus();
        document.getElementById("chkIsVisible").checked = false;
        document.getElementById("chkIsVisible").disabled = false;
        document.getElementById("chkIsAvailableInMobile").checked = false;
        document.getElementById("chkIsAvailableInMobile").disabled = false;
        viewId = -1;
    },

    SaveFormViewDetails: function () {
        //debugger;
        var viewId = OPTIONCONTROL.getControlValue("txtFormViewName");
        if (viewId == undefined || viewId == null) {
            viewId = parseInt($('#id_hdnFormTypeId').val());
        }
        var vCaption = OPTIONCONTROL.getControlText("txtFormViewName");
        if (vCaption == undefined || vCaption == null || vCaption == "") {
            vCaption = $('#hdnFormTypeName').val();
        }
        var mTypeId = FORMSETTINGS.GetFormTypeId();
        if (mTypeId == 0) {
            mTypeId = viewId;
        }
        if (vCaption != "" && mTypeId > 0) {
            var bViewExist = false;
            var arrViews = FORMSETTINGS.GetFormViewDetails(mTypeId);
            for (var i = 0; i < arrViews.length; i++) {
                if (arrViews[i].msvCaption == vCaption) {
                    bViewExist = true;
                }
            }
            if (bViewExist && viewId <= 0) {
                COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgViewalreadyexist"));
                //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgViewalreadyexist"));//"View already exist."
                return false;
            }
            var isVisible = document.getElementById("chkIsVisible").checked;
            var isMobileApp = document.getElementById("chkIsAvailableInMobile").checked;
            var IsUserOrRole = document.getElementById("ddl_MV_UserRole").value;
            var UserOrRoleIds = [];
            if (IsUserOrRole == 0) {
                $(".clsUsers").each(function () {
                    if ($(this).is(":checked"))
                        UserOrRoleIds.push($(this).attr("data-id"));
                });
            } else {
                $(".clsRoles").each(function () {
                    if ($(this).is(":checked"))
                        UserOrRoleIds.push($(this).attr("data-id"));
                });
            }
            var urlPath = GLOBAL.getContextPath("SaveFormView", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, {
                iViewId: viewId, iFormTypeId: mTypeId, strViewName: vCaption, bIsVisible: isVisible, bIsMobileApp: isMobileApp, IsUserOrRole: IsUserOrRole,
                UserOrRoleIds: UserOrRoleIds
            }, "HTML", true, "FORMSETTINGS.RefreshFormViewAndPage_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", mTypeId);
        }
        else {
            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgEnterViewCaption"));
            //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgEnterViewCaption"));// 'Enter View Caption.'
        }
    },
    RefreshFormViewAndPage_onSuccess: function (bSuccess, data, tag) {
        //debugger;
        if (data != "Error") {
            GLOBAL.LoadScreen(true, data);
            //FORMSETTINGS.ShowAlertMessage(".", "green");
            if (tag != "") {
                OPTIONCONTROL.setControlValue("txtFormName", tag);
                FORMSETTINGS.SetFormDetails();
                var MSViewTab = $("#FormTabs> ul>li[data-tabid='3']"); //$("#FormTabs> ul>li:eq(2)");
                FORMSETTINGS.GetMViewCustomization(MSViewTab, tag, "Form View Saved Successfully");
            }
        }
        else
            COMMON.prototype.showMessage(data);
        //FORMSETTINGS.ShowAlertMessage(data);
    },

    DeleteFormViewDetails: function () {
        var viewId = OPTIONCONTROL.getControlValue("txtFormViewName");
        if (viewId > 0) {
            $("#ConfigureForms_DeleteFormView_Modal").modal('show');
        }
        else {
            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelecttheFormViewtoDelete"));
            //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgSelecttheFormViewtoDelete"));// "Select the Form View to Delete."
        }
    },
    DeleteFormView: function () {
        var viewId = OPTIONCONTROL.getControlValue("txtFormViewName");
        if (viewId > 0) {
            $("#ConfigureForms_DeleteFormView_Modal").modal('hide');
            var mTypeId = FORMSETTINGS.GetFormTypeId();
            var urlPath = GLOBAL.getContextPath("DeleteView", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iViewId: viewId }, "HTML", true, "FORMSETTINGS.DeleteFormView_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", mTypeId);
        }
    },
    DeleteFormView_onSuccess: function (bSuccess, data, tag) {
        if (data != "" && bSuccess) {
            GLOBAL.LoadScreen(true, data);
            if (tag != "") {
                OPTIONCONTROL.setControlValue("txtFormName", tag);
                FORMSETTINGS.SetFormDetails();
                var MSViewTab = $("#FormTabs> ul>li[data-tabid='3']"); // $("#FormTabs> ul>li:eq(2)");
                FORMSETTINGS.GetMViewCustomization(MSViewTab, tag, "View deleted successfully.");
            }
        }
        else
            COMMON.prototype.showMessage(FORMSETTINGS.GetResourceErrorMessage("msgcannotdeletedefaultView"));
        //FORMSETTINGS.ShowAlertMessage(FORMSETTINGS.GetResourceErrorMessage("msgcannotdeletedefaultView"));// "Cannot delete the View."
    },

    selectedFormView: function (ctrl) {
        //debugger;
        FORMSETTINGS.clearViewSelection();
        ctrl.className = "selectdTr";
        document.getElementById("txtFormViewCaption").value = ctrl.children[1].innerHTML;
        if (ctrl.children[3].children[1] != undefined) {
            document.getElementById("chkIsVisible").checked = true;
            document.getElementById("chkIsVisible").disabled = true;
        }
        else {
            if (ctrl.children[2].children[0].checked == true) {
                document.getElementById("chkIsVisible").checked = true;
                document.getElementById("chkIsVisible").disabled = false;
            }
            else {
                document.getElementById("chkIsVisible").checked = false;
                document.getElementById("chkIsVisible").disabled = false;
            }
        }
        if (ctrl.children[2].children[1].checked) {
            document.getElementById("chkIsAvailableInMobile").checked = true;
        }
        else {
            document.getElementById("chkIsAvailableInMobile").checked = false;
        }
        viewId = ctrl.children[0].children[0].value;
    },
    clearViewSelection: function () {
        $("#tblFormViews > tbody tr").each(function () {
            $(this).removeClass("selectdTr");
        });
    },



    ShowProgressBeforeAjaxCall: function () {
        document.getElementById("loading").style.display = "block";
        $('#loading').modal({ backdrop: 'static', keyboard: false });
    },
    HideProgressAfterAjaxCall: function () {
        $('#loading').modal('hide');
        document.getElementById("loading").style.display = "none";
    },

    ShowAlertMessage: function (msgText, color) {
        ////debugger;
        $("#lblErrorMessage_FORMSETTINGS").fadeIn('fast');
        if (color == null && color == undefined) {
            $("#lblErrorMessage_FORMSETTINGS").css("color", "red");
            $("#lblErrorMessage_FORMSETTINGS").html('').html("<i class='fa fa-warning' style='color:red;'></i>&nbsp; " + msgText).delay(2000).fadeOut('slow');
        }
        else {
            $("#lblErrorMessage_FORMSETTINGS").css("color", color);
            $("#lblErrorMessage_FORMSETTINGS").html('').html("<i class='fa fa-warning' style='color:" + color + ";'></i>&nbsp; " + msgText).delay(2000).fadeOut('slow');
        }

        document.getElementById("lblErrorMessage_FORMSETTINGS").scrollIntoView(true);

        //if (color == "#34c4f9") {
        //    document.getElementById("lblErrorMessage_FORMSETTINGS").innerHTML = "<i class='fa fa-warning'></i>&nbsp; " + msgText;
        //    document.getElementById("lblErrorMessage_FORMSETTINGS").style.color = color;
        //}
        //else {
        //    document.getElementById("lblErrorMessage_FORMSETTINGS").innerHTML = "<i class='fa fa-warning'></i>&nbsp; " + msgText;
        //    document.getElementById("lblErrorMessage_FORMSETTINGS").style.color = "red";
        //}
        //$("#FormsCustomization_Alert_Modal").modal('show');
    },
    HideAlertMessage: function () {
        $("#lblErrorMessage_FORMSETTINGS").hide().delay(-1);
    },
    ShowModalPopup: function (modalId) {
        $("#" + modalId).modal('show');
    },

    CloseFormCustomizationWindow: function () {
        GLOBAL.gotoHomePage();
    },

    //UpdateFormCustomization: function (ele) {
    //    if (document.getElementById("Form_Customizing_div").dataset.Formorview == "Form") {
    //        FORMCUSTOMIZATION.UpdateFormCustomization();
    //    }
    //    //else if (document.getElementById("Form_Customizing_div").dataset.Formorview == "FormView") {
    //    //    MVIEW_CUSTOMIZATION.UpdateMViewCustomization();
    //    //}
    //    else {
    //        COMMON.prototype.showMessage("Customize the Form/View to update");
    //        //FORMSETTINGS.ShowAlertMessage("Customize the Form/View to update");
    //    }
    //},


    ///........ Methods For Form View Tab Customization ............

    GetMViewCustomization: function (ele, iFormId, msg) {
      //  //debugger;
        if (!FORMSETTINGS.IsExtraFieldOpened()) {
            var selectedFormId = FORMSETTINGS.GetFormTypeId();
            if (selectedFormId > 0) {
                FORMSETTINGS.HideAlertMessage();
                FORMSETTINGS.selectTab(ele);
                FORMSETTINGS.showTabContent(ele);

                var oldFilter = OPTIONCONTROL.getFilter("txtFormViewName");
                if (parseInt(oldFilter.substring(28, oldFilter.length)) != selectedFormId) {
                    var iLanguageId = parseInt($("#hdnLanguageId").val());
                    var newFilter = "iLanguageId=" + iLanguageId + " and iFormId=" + selectedFormId;
                    OPTIONCONTROL.setFilter("txtFormViewName", newFilter);
                    document.getElementById("iFormViewId_mvCust").value = "";
                }
                $("#MViewCustomizationTabs").height(GLOBAL.getPageHeight() - ($("#msPageHeader").height() + $("#FormTabs").height() + 60));

                /// Used only when New View Saving
                if ((iFormId != null && msg != null) && (iFormId != undefined && msg != undefined)) {
                    $("#FormTabs> ul>li").removeClass("active");
                    $("#FormTabs> ul>li[data-tabid='3']").addClass("active");
                    //$("#FormTabs> ul>li:eq(2)").addClass("active");
                    FORMSETTINGS.selectTab(ele);
                    FORMSETTINGS.showTabContent(ele);
                    $("#FormTabs_ContentDiv>div").removeClass('active');
                    $("#FormTabs_ContentDiv>div:eq(2)").addClass('active');
                    COMMON.prototype.showMessage(msg);
                    //FORMSETTINGS.ShowAlertMessage(msg, "green");
                    ////debugger;
                }
                // var urlPath = GLOBAL.getContextPath("FormViewCustomization", "FormCustomization", "Forms");
                // var fnResult = NETWORK.executeServerMethod(urlPath, true, { iViewId: viewId }, "HTML", true, "FORMSETTINGS.LoadMViewCustomizationWindow", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

                OPTIONCONTROL.setControlValue("txtFormViewName", selectedFormId);
                FORMSETTINGS.GetMViewCustomizationDetails();
            }
            else {
                COMMON.prototype.showMessage("Enter Form Name Or Create new Form");
                //FORMSETTINGS.ShowAlertMessage("Enter Form Name Or Create new Form");
                FORMSETTINGS.unSelectTab(ele);
            }
        }
        else {
            FORMSETTINGS.unSelectTab(ele);
        }
    },
    LoadMViewCustomizationWindow: function (bSuccess, data) {
        ////debugger;
        if (data != "" && bSuccess == true) {
            $("#allForms *").prop("disabled", true).fadeTo('slow', .8);
            document.getElementById("FormDetailsAnd_Menu_div").style.display = "none";
            document.getElementById("Form_Customizing_div").dataset.Formorview = "FormView";
            //document.getElementById("btnDelete_ConfigureForms").style.display = "none";
            $("#Form_Customizing_div").html(data);
        }
    },

    GetMViewCustomizationDetails: function () {
        //debugger
        var viewId = OPTIONCONTROL.getControlValue("txtFormViewName");
        var bDefault = OPTIONCONTROL.getControlData("txtFormViewName");
        if (viewId > 0) {
            var oldViewId = document.getElementById("iFormViewId_mvCust");
            if (oldViewId.value.trim() != "") {
                if (viewId == parseInt(oldViewId.value.trim())) {
                    if (bDefault != null && bDefault.length >= 3) {
                        if (bDefault[2].bDefault == "True") {
                            document.getElementById("chkIsVisible").disabled = true;
                        }
                        else {
                            document.getElementById("chkIsVisible").disabled = false;
                        }
                    }
                    return false;
                }
            }
            oldViewId.value = viewId;
            var msMenuId = document.getElementById("htnCurrentMenuId_ConfigureForm").value;
            var urlPath = GLOBAL.getContextPath("FormViewCustomization", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iViewId: viewId, iMenuId: msMenuId }, "JSON", true, "FORMSETTINGS.SetMViewCustomizationDetails", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            document.getElementById("chkIsVisible").checked = false;
            document.getElementById("chkIsVisible").disabled = false;// for new view
            document.getElementById("chkIsAvailableInMobile").checked = false;
            $('#ddl_MV_UserRole').removeAttr("disabled");

            $("#ddl_MV_UserRole").val(0);
            $("#ddl_MV_UserRole").trigger("change");
            $(".clsUsers").each(function (index) {
                if (index > 0) {
                    $(this).attr("checked", false);
                }
                else {
                    $(this).attr("checked", true);
                }
            });
            $(".clsRoles").each(function () {
                $(this).attr("checked", false);
            });
        }
    },
    SetMViewCustomizationDetails: function (bSuccess, data) {
        //debugger
        if (bSuccess && data != null) {
            var mvDetails = FORMSETTINGS.GetFormViewDetails(FORMSETTINGS.GetFormTypeId());
            var viewId = OPTIONCONTROL.getControlValue("txtFormViewName");
            var viewData;
            for (var i = 0; i < mvDetails.length; i++) {
                if (mvDetails[i].msvId == viewId) {
                    viewData = mvDetails[i];
                }
            }
            if (viewData.msvIsVisible == true) {
                document.getElementById("chkIsVisible").checked = true;
                if (viewData.msvIsDefault == true) {
                    document.getElementById("chkIsVisible").disabled = true;
                }
                else {
                    document.getElementById("chkIsVisible").disabled = false;
                }
            } else {
                document.getElementById("chkIsVisible").checked = false;
                document.getElementById("chkIsVisible").disabled = false;
            }
            if (viewData.msvIsInMobile == true) {
                document.getElementById("chkIsAvailableInMobile").checked = true;
            } else {
                document.getElementById("chkIsAvailableInMobile").checked = false;
                document.getElementById("chkIsAvailableInMobile").disabled = false;
            }
            $("#MViewCustomizationTabs").html(data.FormViewTabsPartial);
            $("#MViewCustomizationDetailsDiv").html(data.FormViewCustomizationPartial);
        }
    },

    //testView: function () {
    //    var viewId = OPTIONCONTROL.getControlValue("txtFormViewName");
    //    viewId = 83;
    //    var urlPath = GLOBAL.getContextPath("FormViewCustomizationForMS", "FormCustomization", "Forms");
    //    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iViewId: viewId }, "HTML", false, "FORMSETTINGS.loadTest", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    //},
    //loadTest: function (bSuccess, data) {
    //    if (bSuccess && data != "") {
    //        //debugger;
    //        $("#testMSview").html(data);
    //    }
    //},
    ///........ Methods For Form Rules Tab ............

    GetNewRule: function (RuleId, ContainerId) {
        if ((RuleId != "" && RuleId != undefined) && (ContainerId != "" && ContainerId != undefined)) {
            var mTypeId = FORMSETTINGS.GetFormTypeId();
            var urlPath = GLOBAL.getContextPath("FormRules", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { sRuleId: RuleId, iFormTypeId: mTypeId }, "HTML", true, "FORMSETTINGS.LoadNewRule", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ContainerId);
        }
    },
    LoadNewRule: function (bSuccess, data, containerId) {
        //debugger;
        if (bSuccess && data != "") {
            $(".lnkbtnRule").hide();
            $("#" + containerId).append(data);
        }
        else {
            COMMON.prototype.showMessage("Error");
            //FORMSETTINGS.ShowAlertMessage("Error");
        }
    },

    ///........ Methods For Tree Customization Popup ............

    GRID_CUSTOMIZATION: {
        selectedLi: null,
        SelectLiForEdit: function (ele) {
            //debugger;
            $("#ul_details_TreeCust li").each(function () {
                $(this).removeClass('selectedLi');
            });
            ele.className = "selectedLi";
            FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi = ele;
            var fWidth = ele.children[0].children[0].children[0].dataset.width;
            var fAllignment = ele.children[0].children[0].children[0].dataset.align;
            (fWidth == undefined) ? document.getElementById("txtColumnWidth_TreeCust_Form").value = "0" : document.getElementById("txtColumnWidth_TreeCust_Form").value = fWidth;
            (fAllignment == undefined) ? document.getElementById("ddlTextAlign_TreeCust_Form").selectedIndex = 0 : document.getElementById("ddlTextAlign_TreeCust_Form").selectedIndex = fAllignment;
        },

        MoveLi: function (ctrl, isHidden, direction, index, oldCtrl) {
            ////debugger;
            if (direction == "UP") {
                ctrl_Copy = ctrl;
                if (isHidden) {
                    if (oldCtrl != undefined) {
                        FORMSETTINGS.GRID_CUSTOMIZATION.MoveLi(ctrl, $(oldCtrl).prev().hasClass('li-hidden'), "UP", oldCtrl.index(), oldCtrl.prev());
                    }
                    else {
                        FORMSETTINGS.GRID_CUSTOMIZATION.MoveLi(ctrl, $(ctrl).prev().hasClass('li-hidden'), "UP", ctrl.index(), ctrl.prev());
                    }
                }
                else {
                    if (index != undefined) {
                        ctrl.insertBefore($("#ul_details_TreeCust li:eq(" + (index - 1) + ")"));
                    }
                    else {
                        before = ctrl.prev();
                        ctrl.insertBefore(before);
                    }
                }
            }
            else {
                if (isHidden) {
                    if (oldCtrl != undefined) {
                        FORMSETTINGS.GRID_CUSTOMIZATION.MoveLi(ctrl, $(oldCtrl).next().hasClass('li-hidden'), "DOWN", oldCtrl.index(), oldCtrl.next());
                    }
                    else {
                        FORMSETTINGS.GRID_CUSTOMIZATION.MoveLi(ctrl, $(ctrl).next().hasClass('li-hidden'), "DOWN", ctrl.index(), ctrl.next());
                    }
                }
                else {
                    if (index != undefined) {
                        ctrl.insertAfter($("#ul_details_TreeCust li:eq(" + (index + 1) + ")"));
                    }
                    else {
                        after = ctrl.next();
                        ctrl.insertAfter(after);
                    }
                }
            }
        },

        MoveLiUp: function () {
         ////debugger;
            var li;
            if (FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi != null) {
                li = FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi;
                FORMSETTINGS.GRID_CUSTOMIZATION.MoveLi($(li), $(li).prev().hasClass('li-hidden'), "UP");
            }
        },
        MoveLiDown: function () {
            var li;
            if (FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi != null) {
                li = FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi;
                FORMSETTINGS.GRID_CUSTOMIZATION.MoveLi($(li), $(li).next().hasClass('li-hidden'), "DOWN");
            }
        },

        ChangeColumnWidth: function (ele) {
            ////debugger;
            if (FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi != null) {
                var Li = FORMSETTINGS.GRID_CUSTOMIZATION.SearchForSelectedLi();
                if (Li != null) {
                    Li[0].children[0].children[0].children[0].dataset.width = ele.value.trim();
                }
            }
        },
        ChangeTextAlignment: function (ele) {
            if (FORMSETTINGS.GRID_CUSTOMIZATION.selectedLi != null) {
                var Li = FORMSETTINGS.GRID_CUSTOMIZATION.SearchForSelectedLi();
                if (Li != null) {
                    Li[0].children[0].children[0].children[0].dataset.align = ele.selectedIndex;
                }
            }
        },
        SearchForSelectedLi: function () {
            var Li = null;
            $("#ul_details_TreeCust li").each(function () {
                if ($(this).hasClass('selectedLi')) {
                    Li = $(this);
                }
            });
            return Li;
        },

        SaveGridCustomizationData: function (bFromLandingScreen) {
            debugger
            m_FromLandingScreen = bFromLandingScreen;
            var mstypeId = document.getElementById("gridCustomizationFor").value.trim();
            var arrTreedata = [];
            var li_Length = $("#ul_details_TreeCust li").length;
            $("#ul_details_TreeCust li").each(function () {
                ////debugger;
                var inputTypeChk = this.children[0].children[0].children[0];
                var isSelectedForCustomization = inputTypeChk.checked;
                if (isSelectedForCustomization == true) {
                    var falign = inputTypeChk.dataset.align;
                    var fcolIndex = $(this).index();
                    var fdatatype = inputTypeChk.dataset.type;
                    var fname = inputTypeChk.dataset.field;
                    var ftext = this.textContent.trim();
                    var fwidth = inputTypeChk.dataset.width;

                    var trgdata = {
                        Allignment: falign,
                        ColumnIndex: fcolIndex,
                        DataType: fdatatype,
                        FieldName: fname,
                        HeaderText: ftext,
                        Width: fwidth
                    };
                    arrTreedata.push(trgdata);
                }
            });
            ////debugger;
            var objData = {
                IsReport:2,
                FormTypeId: mstypeId,
                TreeCustomization: arrTreedata
            };

            if (objData != null) {
                var urlPath = GLOBAL.getContextPath("SaveGridCustomization", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { objGridData: objData }, "HTML", true, "FORMSETTINGS.DisplayGridPopup_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", true);
            }
        },
        RefreshFormAfter_onTCnSuccess: function (bS, data) {
            ////debugger;
            if (data != "Error") {
                $("#Forms_name ul li").each(function () {
                    $(this).removeClass('selectedLi');
                });
                isFormSelected = false;
                selectedFormId = 0;
                selectedFormName = "";
                $("#FormTreeMenu").html('').html(data);
                $("#ConfigureForms_GridCustomization_Modal").modal('hide');
                FORMSETTINGS.ClearFields_ForNewForm();
                document.getElementById("btnDelete_ConfigureForms").style.display = "inline-block";
                document.getElementById("btnCustomize_ConfigureForms").disabled = false;
                document.getElementById("btnCustomizeTree_ConfigureForms").disabled = false;
            }
            else {
                alert(data);
            }
        },
    },

    GetResourceErrorMessage: function (sKey) {
        var value = "";
        var result = FORMSETTINGS.FindErrorMsg(sKey);

        if (result != null) {
            if (result.Value.length > 0) {
                value = result.Value;
            }
        }
        return (value);
    },

    FindErrorMsg: function (sKey) {
        var resultMsg = null;
        var obj = null;
        try {
            for (var iCounter = 0; iCounter < ConfigForm_ResourceMsgs.length; iCounter++) {
                obj = ConfigForm_ResourceMsgs[iCounter];
                if (obj.Key == sKey) {
                    resultMsg = {
                        Value: obj.Value
                    }
                    break;
                }
            }
        }
        catch (err) {
            resultMsg = {
                Value: err.message
            }
        }
        return (resultMsg);
    },

    Clear: function (mName) {
        debugger;
        mName = mName.replace(/[^a-z]+/gi, '').trim(); //mName.replace(/\s/g, '').replace(/[0-9]/g, '').trim();
        if (mName.length > 0) {
            OPTIONCONTROL.setControlText("txtFormName", mName);
        }
        else {
            $("#ddlModule").val("1");
            $("#ddlModule").trigger("change");
            OPTIONCONTROL.clear("txtFormName");
            $("#txtFormCaption").val("");
        }
        $("#tblDependency_Form tbody").empty();
        $("#tblUsed_Form tbody").empty();
        document.getElementById('ddlModule').disabled = false;
        document.getElementById("chkIsDefault").checked = false;
        document.getElementById("chkIsDefault").disabled = false;
        document.getElementById("chkAllowRivisions").checked = false;
        document.getElementById("chkSaveRecords").checked = true;
        document.getElementById("chkOpenFromMenu").checked = true;
        document.getElementById("chkSaveDesignAsHtml").checked = false;
      
        //hide the customization tab
        $("#nav-Customization-tab").css("display", "none");
        $("#nav-Customization-tab").removeClass("nav-item nav-linkk active");
        $("#nav-Customization-tab").addClass("nav-item nav-linkk");
        $("#Form_Customization").removeClass("tab-pane fade show active");
        $("#Form_Customization").addClass("tab-pane fade");

//hide the tree customization tab
        $("#nav-TreeCustomization-tab").css("display", "none");
        $("#nav-TreeCustomization-tab").removeClass("nav-item nav-linkk active");
        $("#nav-TreeCustomization-tab").addClass("nav-item nav-linkk");
        $("#Form_TreeCustomization").removeClass("tab-pane fade show active");
        $("#Form_TreeCustomization").addClass("tab-pane fade");
        //display defination tab 

 $("#nav-Defination-tab").addClass("nav-item nav-linkk active");

        $("#Form_Definition").addClass("tab-pane fade show active");
        
        

        closeNav();
       $('#FormTreeMenu a').removeClass('menu-selected infounpaid');
    }
};

var FORM_MENU = {
    selectElement: function (ele) {
        ////debugger;
        try {
            ele.className += " menu-selected infounpaid";
            if ($(ele.children[0]).hasClass('fa fa-circle')) {
                $(ele.children[0]).removeClass("circle-icon-color");
                $(ele.children[0]).addClass("infounpaid");
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.selectElement} " + err.message);
        }
    },

    unselectElement: function (ele) {
        try {
            $(ele).removeClass("menu-selected");
            $(ele).removeClass("infounpaid");
            if ($(ele.children[0]).hasClass('fa fa-circle')) {
                $(ele.children[0]).removeClass("infounpaid");
                $(ele.children[0]).addClass("circle-icon-color");
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.unselectElement} " + err.message);
        }
    },

    toggleNodes: function (ele, event, isSearching) {
        //debugger;
        try {
            if (event != null) {
                event.stopImmediatePropagation();
            }
            allChilds = $(ele.parentElement.parentElement).children("ul");
            if (allChilds.length > 0) { // has children
                for (iCounter = 0; iCounter < allChilds.length; iCounter++) {
                    if (!isSearching) {
                        if (allChilds[iCounter].style.display != "none") {
                            allChilds[iCounter].style.display = "none";
                        }
                        else {
                            allChilds[iCounter].style.display = "block";
                        }
                    }
                    else {
                        allChilds[iCounter].style.display = "block";
                    }
                }
                ////debugger;
                //if (isSearching && $(ele).hasClass("icon-minus")) {
                //    $(ele).addClass('icon-minus');
                //}
                //else {
                //    $(ele).toggleClass('icon-plus, icon-minus');
                //}

                if ($(ele).hasClass("icon-minus")) {
                    $(ele).addClass('icon-new');
                    $(ele).removeClass('icon-minus');
                }
                else {
                    $(ele).addClass('icon-minus');
                    $(ele).removeClass('icon-new');
                }
            }
        }
        catch (err) {
            alert("Exception: toggleNodes " + err.message);
        }
    },

    getParentElements: function (ele) {
        var isFound = false;
        var arrData = [];
        try {
            ele = ele.parentElement;
            while (COMMON.prototype.isValidObject(ele) == true) {
                if ($(ele).hasClass("FormMenu") == true) {
                    isFound = true;
                    break;
                }
                if (COMMON.prototype.isNullOrEmpty(ele.nodeName) == false
                    && ele.nodeName.toLowerCase() == "li"
                    && ele.children.length > 0
                    && ele.children[0].nodeName.toLowerCase() == "a") {
                    arrData.push(ele.children[0]);
                }
                ele = ele.parentElement;
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.getParentElements} " + err.message);
        }
        return (arrData);
    },

    unselectAll: function (ele) {
        var isFound = false;
        try {
            do {
                if ($(ele).hasClass("FormMenu") == true) {
                    isFound = true;
                    break;
                }
                ele = ele.parentElement;
            } while (COMMON.prototype.isValidObject(ele) == true);
            ////debugger;
            if (isFound == true) {
                $("#" + ele.id + " li a").each(function () {
                    FORM_MENU.unselectElement(this);
                });
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.unselectAll} " + err.message);
        }
    },

    selectNode: function (ele) {
        debugger;
        try {
            FORM_MENU.selectParentNodes(ele);
            currentMenu = $(ele).parent("a");
            ////debugger;
            FORM_MENU.selectElement(currentMenu[0]);
        }
        catch (err) {
            alert("Exception: {FORM_MENU.selectNode} " + err.message);
        }
    },

    selectParentNodes: function (ele) {
        ////debugger;
        var arrParent = null;
        try {
            arrParent = FORM_MENU.getParentElements(ele);
            for (var iCount = 0; iCount < arrParent.length; iCount++) {
                FORM_MENU.selectElement(arrParent[iCount]);
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.selectParentNodes} " + err.message);
        }
    },

    expandAllParent: function (ele, bSearch) {
        var arrParent = null;
        try {
            arrParent = FORM_MENU.getParentElements(ele);
            for (var iCount = 0; iCount < arrParent.length; iCount++) {
                var eleI = arrParent[iCount].children[0];
                FORM_MENU.toggleNodes(eleI, null, bSearch);
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.expandAllParent} " + err.message);
        }
    },

    isMenuSelected: function () {
        var bSelected = false;
        $("#FormTreeMenu li a").each(function () {
            if ($(this).hasClass('menu-selected')) {
                bSelected = true;
            }
        });
        return bSelected;
    },

    selectMenuForForm: function (sFormName, sMainMenuId) {
        var eleLi = null;
        debugger;
        try {
            $("#" + sMainMenuId + " li").each(function () {
                debugger
                if ($(this).find("a>span").text().trim() == sFormName) {
                    eleLi = this;
                }
            });
            if (COMMON.prototype.isValidObject(eleLi) == true) {

                FORM_MENU.unselectAll(eleLi);
                FORM_MENU.expandAllParent(eleLi, true);

                FORM_MENU.selectParentNodes(eleLi);
                currentMenu = $(eleLi).children("a");
                FORM_MENU.selectElement(currentMenu[0]);
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.selectMenuId} " + err.message);
        }
    },

    selectMenu: function (ele, event) {
        //debugger
        try {
            if (event != null) {
                event.stopImmediatePropagation();
            }
            FORM_MENU.unselectAll(ele);
            FORM_MENU.selectNode(ele);
        }
        catch (err) {
            alert("Exception: {FORM_MENU.selectMenu} " + err.message);
        }
    },

    getSelectedMenu: function (sMainMenuId) {
        //var iMenuId = 0;
        var mnuData = [];
        try {
            ////debugger;
            var selectedMenu = $("#FormTreeMenu li .menu-selected").last();
            if (selectedMenu.length > 0) {
                selectedMenu = selectedMenu[0].children[1];
                var menuData = selectedMenu.dataset;
                mnuData = {
                    isGroup: menuData.isgroup,
                    menuId: menuData.imenuid,
                    parentId: menuData.iparentid,
                    sequenceId: menuData.isequence
                };
            }
        }
        catch (err) {
            alert("Exception: {FORM_MENU.getSelectedMenu} " + err.message);
        }
        return (mnuData);
    },
};


//$(function () {
//    GLOBAL.getnavigationHeader("header");

//    var SetContentHeights = function () {
//        var pageHeight = GLOBAL.getPageHeight();
//        var headerHeight = $("#msPageHeader").height();
//        var msTabsHeight = $("#FormTabs").height();
//        $("#Ms_Dependency").height(pageHeight - (headerHeight + msTabsHeight + 170));
//        $("#FormTreeMenu").height(pageHeight - (headerHeight + msTabsHeight + 125));
//        $(".msTreeMenuContainer").height(pageHeight - (headerHeight + msTabsHeight + 15));
//    };

//    setTimeout(function () {
//        SetContentHeights();
//    }, 10);
//});
;
/* FORMCUSTOMIZATION.js
 * Implementation:- 23-02-2016
 *
 * By:- Tarun Kumar Dewangan
 * License:- Focussoftnet pvt. ltd. 
 */

//var selectedTabId_mFields = 0;
var formatingFontData = null;
var FilterConditions;
var isOpenedFromForm;
var FormCust_ResourceMsgs;
var objCustomFont = null;
var arrFont = [];
var m_FldRules;
var m_sMappingGridId = "";
var lstHeaderGroups;
var arrexmapping;
var rowNo = -1;
var sFormula;
var ScreenId;
var FORMCUSTOMIZATION = {

    setHeight: function () {
        debugger;
        var sCtrlId = document.getElementsByClassName("bodyGridContainer");
        $(sCtrlId).each(function () {
            if (this != null && this != undefined) {
                this.style.height = $(window).height() - 230 + "px";
            }
        });

        var sCtrlId = document.getElementsByClassName("FormTabPannel");
        $(sCtrlId).each(function () {
            if (this != null && this != undefined) {
                this.style.height = $(window).height() - 300 + "px";
            }
        });

        var sCtrlId = document.getElementsByClassName("AllRulesDiv_Container");
        $(sCtrlId).each(function () {
            if (this != null && this != undefined) {
                this.style.height = $(window).height() - 600 + "px";
            }
        });
    },

    validateInputNumber: function (eleInput, iType, evt) {
        // 0 For Signed Integer
        // 1 For Unsigned Integer
        // 2 For Signed Decimal
        // 3 For Unsingned Decimal
        //debugger;
        var charCode = null;
        var dataType = $("#ddlDatatype_ExtraField").val();

        try {
            bResult = false;
            if (evt.which == 0 || evt.which == 8) {
                return (true);
            }

            charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode == 45) { // -
                if ((iType == 0 || iType == 2)
                    && eleInput.value.length == 0) { // Signed Integer, Signed Decimal
                    return (true);
                }
            }
            else if (charCode == 46) { // .
                if ((iType == 2 || iType == 3)
                    && eleInput.value.indexOf(".") == -1) { // Signed Decimal, Unsingned Decimal
                    //for fraction datatype
                    if (dataType == 6 && eleInput.id.toString() == "ExtraField_DefaultValue") {
                        var decimalprecison = document.getElementById("ExtraField_NoOfDecimals").value;
                        if (decimalprecison <= 0) {
                            return false;
                        } else {
                            return true;
                        }

                    } else {
                        return (true);
                    }
                }
            }
            else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                //added this for fraction field restriction based  on no of decimals defined

                if (iType == 2 && eleInput.id.toString() == "ExtraField_DefaultValue" && dataType == 6) {
                    var inputdecimal = eleInput.value;
                    var decimalprecison = document.getElementById("ExtraField_NoOfDecimals").value;
                    var afterdecimal = inputdecimal.toString().split(".");
                    if (afterdecimal != null && afterdecimal != NaN) {
                        if (afterdecimal[1] != null && afterdecimal[1].length >= decimalprecison && decimalprecison > 0) {
                            return false;
                        } else { return (true); }
                    }
                }
                else {
                    return (true);
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{FORMCUSTOMIZATION.validateInputNumber} " + err.message, "Exception");
        }

        return (false);
    },

    validateTinyDefaultValue: function (ele) {
        ////debugger;
        var DefaultValue = ele.value;
        if (DefaultValue > 255) {
            ele.value = 0;
            COMMON.prototype.showMessage(getResourceValue("msgTinyDefaultValue", FormCust_ResourceMsgs));
            return false;
        }
    },

    validateTextDefaultValue: function (ele) {
        //debugger;
        var TextDefaultValue = $("#ExtraField_DefaultValue").val();
        var ddlDatatype = $("#ddlDatatype_ExtraField option:selected")[0].innerHTML;
        var maxSizeValue = 0;
        if (ddlDatatype == "String List") {
            var StringValue = ele.value;
            arrStringValue = StringValue.split(',');
            for (var i = 0; i < arrStringValue.length; i++) {
                var currentIndexValueLength = arrStringValue[i].length;
                var prevIndexValueLength = i > 0 ? arrStringValue[i - 1].length : 1;
                if (i > 0) {
                    if (currentIndexValueLength > prevIndexValueLength) {
                        maxSizeValue = currentIndexValueLength;
                    }
                }
                else {
                    maxSizeValue = currentIndexValueLength;
                }

            }
            $("#ExtraField_MaxSize").val(maxSizeValue);
        }
        else {
            if (ele.id == "ExtraField_DefaultValue") {
                TextDefaultValue = ele.value;
            }
            var TextMaxSize = parseInt($("#ExtraField_MaxSize").val());
            if (parseInt(TextDefaultValue.length) > TextMaxSize) {
                if (ele.id == "ExtraField_DefaultValue") {
                    ele.value = "";
                }
                else {
                    $("#ExtraField_DefaultValue").val("");
                }
                COMMON.prototype.showMessage(getResourceValue("msgdefaultvalueshouldnotgreaterthanMaxSize", FormCust_ResourceMsgs));
                return false;
            }

            ////debugger;
            var iDefaultValue = $("#ExtraField_DefaultValue").val();
            var beforDecimal = iDefaultValue.split('.')[0];
            var afterDecimal = iDefaultValue.split('.')[1];

            beforDecimalDefaultValue = FORMCUSTOMIZATION.numberWithCommas(beforDecimal);
            if (beforDecimalDefaultValue != undefined && beforDecimalDefaultValue != null) {
                $("#ExtraField_DefaultValue").val(beforDecimalDefaultValue.toString() + "." + afterDecimal.toString());
            }
            else {
                $("#ExtraField_DefaultValue").val(0 + "." + afterDecimal.toString());
            }
        }

    },

    numberWithCommas: function (x) {
        ////debugger;
        x = x.toString();
        return Number(x).toLocaleString('en-IN');
    },

    validateTextDefaultValueMax: function (ele) {
        ////debugger;
        var MaxValueSize = parseInt(ele.value);
        var TextDefaultValue = $("#ExtraField_DefaultValue").val();
        if (TextDefaultValue != undefined && TextDefaultValue != null && MaxValueSize != undefined && MaxValueSize != null && parseInt(TextDefaultValue.length) > MaxValueSize) {
            document.getElementById("ExtraField_DefaultValue").value = "";
            COMMON.prototype.showMessage(getResourceValue("msgdefaultvalueshouldnotgreaterthanMaxSize", FormCust_ResourceMsgs));
            return false;
        }
    },


    Toggle_MstrCustTabs: function (ele) {
        debugger;
        var siblingsCount = ele.parentElement.children.length;
        var tabParent = ele.parentElement;
        var eleId = ele.dataset.contentid;
        for (var i = 0; i < siblingsCount; i++) {
            var tabId = tabParent.children[i].dataset.contentid
            if (eleId != tabId) {
                document.getElementById(tabId).style.display = "none";
                $("#tab_" + tabId).removeClass('current');
            }
        }
        document.getElementById(eleId).style.display = "block";
        $("#tab_" + eleId).addClass('current');
    },

    Show_CreateTabMenu: function (ele) {
        debugger;
        $("#CreateTabMeanu").css("display", "block");
    },

    ToggleFormFieldTabs: function (ele, evt) {
        if (evt != null) {
            evt.stopImmediatePropagation();
        }
        if ($(ele).hasClass("icon-minus")) {
            $(ele).removeClass("icon-minus").addClass("icon-new");
            $("#FormFields_list").slideToggle();
        }
        else {
            $(ele).removeClass("icon-new").addClass("icon-minus");
            $("#FormFields_list").slideToggle();
        }
    },

    ShowDetails: function (ele) {
        debugger;
        if (!FORMCUSTOMIZATION.IsExtraFieldOpened()) {
            if (isOpenedFromForm == "True") {
                $("#FormextraFieldContainer_div").height($(".tab-lst-Formcust").height() + 70);
                $("#infoPanelContainer_div").height($(".tab-lst-Formcust").height()-30);

            }
            else {
                $("#FormextraFieldContainer_div").height($(".tab-lst-Formcust").height() + 10);
                $("#infoPanelContainer_div").height($(".tab-lst-Formcust").height()-30);

            }

            var siblingsCount = ele.parentElement.children.length;
            var tabParent = ele.parentElement;
            var eleId = ele.dataset.id;
            if (eleId != "Fields") {
                $("#CreateTabMeanu").css("display", "none");
            }
            else {
                $("#CreateTabMeanu").css("display", "block");
            }
            for (var i = 0; i < siblingsCount; i++) {
                var tabId = tabParent.children[i].dataset.id;
                if (eleId != tabId) {
                    document.getElementById("tabContent_" + tabId + "_FormCust").style.display = "none";
                }
                if (i == 0) {
                    tabParent.children[i].className = "tab-link nav-item msFieldTab";
                }
                else {
                    tabParent.children[i].className = "tab-link nav-item";
                }
            }
            document.getElementById("tabContent_" + eleId + "_FormCust").style.display = "block";
            ////debugger;
            if (ele.dataset.id == "Fields") {
                ele.className = "tab-link nav-item msFieldTab";
                $("#FormFields_list .mcFieldsTab").addClass("selectedTab FormSelectedRowColor");
                $("#btnCreateTab_FormCust, #btnCreateTab_FormCust").prop("disabled", false);
                }
            else if (ele.dataset.id == "Rules") {
                RULECONDITIONS.FormRulesPartials(document.getElementById("txtFormRuleName_FormRules"));
                //RULECONDITIONS.GetRuleDetails(document.getElementById("txtFormRuleName_FormRules"));
                var pageHeight = GLOBAL.getPageHeight();
                var rTop = document.getElementById("newRuleTab_div_FormRules").getBoundingClientRect().top;
                $("#newRuleTab_div_FormRules").height(pageHeight - (rTop - 40));
                ele.className = "tab-link nav-item selectedTab FormSelectedRowColor";
                $("#btnCreateTab_FormCust, #btnCreateTab_FormCust").prop("disabled", true);
                FORMCUSTOMIZATION.UnSelectFormFieldsTab();
            }
            else {
                ele.className = "tab-link nav-item selectedTab FormSelectedRowColor";
                $("#btnCreateTab_FormCust, #btnCreateTab_FormCust").prop("disabled", true);
                FORMCUSTOMIZATION.UnSelectFormFieldsTab();
            }
        }
    },

    SetRuleContentsHeight: function () {
        ruleDefHeight = $("#settings_FormRules").height();
        var rdefinitionheight = $("#settings_FormRules").height();
        var headheight = $("#mspageheader").height();
        var mTabsHeight = $("#FormTabs").height();
        var FormatingbodyHeight = GLOBAL.getPageHeight() - ((rdefinitionheight * 5.9) + headheight + mTabsHeight);
        if (FormatingbodyHeight > 40) {
            $("#tblFormating_IF_Rule_FormRules_body").height(FormatingbodyHeight);
        }
        else {
            $("#tblFormating_IF_Rule_FormRules_body").height(40);
        }
        var AlertBodyHeight = GLOBAL.getPageHeight() - ((rdefinitionheight * 6.4) + headheight + mTabsHeight);
        if (AlertBodyHeight > 30) {
            $("#tblAlert_IF_Rule_FormRules_body").height(AlertBodyHeight);
        }
        else {
            $("#tblAlert_IF_Rule_FormRules_body").height(40);
        }
        $("#tblFormating_Else_Rule_FormRules_body").height(GLOBAL.getPageHeight() - ((rdefinitionheight * 4.8) + headheight + mTabsHeight));
        $("#tblAlert_Else_Rule_FormRules_body").height(GLOBAL.getPageHeight() - ((rdefinitionheight * 5) + headheight + mTabsHeight + 20));
    },

    UnSelectFormFieldsTab: function () {
        $("#FormFields_list>li").removeClass("selectedTab FormSelectedRowColor");
    },

    GetFormTypeId: function () {
        //debugger;
        var iFormTypeId = 0;
        try {
            if (document.getElementById("FormAndViewId_MsCust") != null) {
                iFormTypeId = parseInt(document.getElementById("FormAndViewId_MsCust").dataset.formid);
            }
            else {
                iFormTypeId = OPTIONCONTROL.getControlValue("txtFormName");
            }
        } catch (e) {
            alert("Error: GetFormTypeId, ", e.message);
        }
        return parseInt(iFormTypeId);
    },
    GetFormName: function () {
        var msName = "";
        try {
            msName = document.getElementById("FormAndViewId_MsCust").dataset.formname.trim().replace(/\s/g, '');
        } catch (e) {
            alert("Error: GetFormName, ", e.message);
        }
        return msName;
    },

    IsExtraFieldOpened: function () {
        try {
            if (document.getElementById("FormCustomizingTabList").style.opacity != 1) {
                return true;
            }
            else
                return false;
        } catch (e) {
            alert("Error: IsExtraFieldOpened, ", e.message);
            return false;
        }
    },
    SetEditingMode: function () {
        try {
            var mcTabList = document.getElementById("FormCustomizingTabList");
            if (mcTabList != "" && mcTabList != undefined) {
                mcTabList.style.opacity = "0.5";
            }
            var btnHeader = document.getElementById("btn_common_header");
            if (btnHeader != "" && btnHeader != undefined) {
                btnHeader.style.opacity = "0.5";
            }
            var msTabs = document.getElementById("FormTabs");
            if (msTabs != "" && msTabs != undefined) {
                msTabs.style.opacity = "0.5";
            }
        } catch (e) {
            alert("Error: SetEditingMode, ", e.message);
        }
    },
    ClearEditingMode: function () {
        try {
            var mcTabList = document.getElementById("FormCustomizingTabList");
            if (mcTabList != "" && mcTabList != undefined) {
                mcTabList.style.opacity = "1";
            }
            var btnHeader = document.getElementById("btn_common_header");
            if (btnHeader != "" && btnHeader != undefined) {
                btnHeader.style.opacity = "1";
            }
            var msTabs = document.getElementById("FormTabs");
            if (msTabs != "" && msTabs != undefined) {
                msTabs.style.opacity = "1";
            }
        } catch (e) {
            alert("Error: ClearEditingMode, ", e.message);
        }
    },

    SetFormCustResourceMessages: function (arrResourceMsgs) {
        if (arrResourceMsgs != null && arrResourceMsgs != undefined) {
            FormCust_ResourceMsgs = arrResourceMsgs;
        }
    },

    ///........ Methods for Form Fields Tab ........

    AddClassToTab_ForFields: function (ele) {
        ////debugger;
        $("#all_TabsField div").removeClass("selected_for_FormTab");
        ele.className += "tab-link nav-item selected_for_FormTab";
    },

    ShowHideFieldButtons: function (ele) {
        debugger;
        var tabIndex = 0;
        var allTabs = document.getElementById("FormFields_list").children;
        for (var itab = 0; itab < allTabs.length; itab++) {
            if ($(allTabs[itab]).hasClass("selectedTab")) {
                tabIndex = itab;
            }
        }
        var btnMoveFld = document.getElementById("btnMove_Field_FormCust");
        var btnAddFld = document.getElementById("btnAdd_Field_FormCust");

        if (ele.dataset.tbltype == "Main") {
            if (btnMoveFld != null && btnMoveFld != undefined) {
                btnMoveFld.style.display = "none";
            }
            if (btnAddFld != null && btnAddFld != undefined) {
                btnAddFld.style.display = "none";
            }
        }
        else {
            //debugger;
            if (ele.dataset.tbltype == "Header Details") {
                var tabContent = document.getElementById("HeaderDetails_" + tabIndex);
                var hasFields = $("#" + tabContent.id + " table>tbody>tr");
                if (btnMoveFld != null && btnMoveFld != undefined) {
                    if (hasFields.length > 0) {
                        btnMoveFld.style.display = "inline-block";
                    }
                    else {
                        btnMoveFld.style.display = "none";
                    }
                }
            }
            else {
                var tabContent = document.getElementById("BodyDetails_" + tabIndex);
                var hasFields = $("#" + tabContent.id + " table>tbody>tr");
                if (btnMoveFld != null && btnMoveFld != undefined) {
                    if (hasFields.length > 0) {
                        btnMoveFld.style.display = "none";
                    }
                    else {
                        btnMoveFld.style.display = "none";
                    }
                }
            }
            if (btnAddFld != null && btnAddFld != undefined) {
                btnAddFld.style.display = "inline-block";
            }
        }

        $(ele.parentElement.children).removeClass("current");
        $(ele).addClass("current");
    },

    ShowFieldsForTab: function (ele, bRefresh) {
        debugger;
        var selectedTabId_mFields = 0;

        if (!FORMCUSTOMIZATION.IsExtraFieldOpened()) {
            $("#FormFields_list li").each(function () {              
                if ($(this).hasClass("selectedTab FormSelectedRowColor mcFieldsTab")) {
                    if (parseInt(selectedTabId_mFields) == 0) {
                        selectedTabId_mFields = $(this).attr("data-id");
                    }
                }
                $(this).removeClass('selectedTab FormSelectedRowColor mcFieldsTab');
            });
            ele.className = "tab-link nav-item selectedTab FormSelectedRowColor mcFieldsTab";
            $(".mCustTable>tbody>tr").removeClass('mCustTable-selectedTr');
            $(".mCustTable>tbody>tr").removeClass('FormSelectedRowColor');

            //////debugger;
            if (selectedTabId_mFields > 0) {
                $("#tabId_" + selectedTabId_mFields).hide();
            }
            var findDiv = ele.dataset.id;
            document.getElementById("tabId_" + findDiv).style.display = "block";
            if (selectedTabId_mFields != findDiv) {
                $("#tabId_" + findDiv + " ul > li").removeClass("current");
                $("#tabId_" + findDiv + " ul > li:first")[0].className = "tab-link nav-item current";
                $("#tabId_" + findDiv + " > ul:first").children().each(function () {
                    debugger;
                    if ($(this).index() != 0) {
                        this.className = "tab-link nav-item";
                        if (this.dataset.contentid != null) {
                            document.getElementById(this.dataset.contentid).style.display = "none";
                        }
                    }
                    else {
                        if (this.dataset.contentid != null) {
                            document.getElementById(this.dataset.contentid).style.display = "block";
                        }
                    }
                });
                FORMCUSTOMIZATION.ShowHideFieldButtons(document.getElementById("tabId_" + findDiv).children[0].children[0]);
                //if (ele.dataset.tabtype.trim() != "0") {
                //    document.getElementById("btnAdd_Field_FormCust").disabled = true;
                //    document.getElementById("btnEdit_Field_FormCust").disabled = true;
                //}
                //else {
                //    document.getElementById("btnAdd_Field_FormCust").disabled = false;
                //    document.getElementById("btnEdit_Field_FormCust").disabled = false;
                //}
            }
            selectedTabId_mFields = findDiv;
        }
    },

    SelectRowToMoveField: function (selectedTr) {
        var parentTable = selectedTr.parentElement;
        for (var i = 0; i < parentTable.children.length; i++) {
            $(parentTable.children[i]).removeClass("mCustTable-selectedTr");
            $(parentTable.children[i]).removeClass("FormSelectedRowColor");

        }
        $(selectedTr).addClass("mCustTable-selectedTr");
        $(selectedTr).addClass("FormSelectedRowColor");
    },

    SetNewTabCaption: function (ele, txtField) {
        if (ele.value.trim() != "") {
            document.getElementById(txtField).value = ele.value.trim().replace(/\s/g, '');
        }
    },

    SetNewTreeFieldCaption: function (ele, txtField) {
        ////debugger;
        if (ele.value.trim() != "") {
            document.getElementById(txtField).value = ele.value.trim().replace(/\s/g, '');
        }
    },

    CreateNewDocTab: function (tabType) {
        var allTabs = document.getElementById("FormFields_list").children;
        var hasDocTab = false;
        for (var i = 0; i < allTabs.length; i++) {
            if (allTabs[i].dataset.tabtype == tabType) {
                hasDocTab = true;
            }
        }
        if (hasDocTab == false) {
            document.getElementById("txtNewDocTabCaption").value = "";
            document.getElementById("txtNewDocTabName").value = "";
            $("#MCustomize_CreateDocTab_Modal").modal('show');
        }
        else {
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgOnlyonedocumenttabisallowedperForm"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgOnlyonedocumenttabisallowedperForm")); // "Only one document tab is allowed per Form. "
        }
    },
    SaveNewDocTab: function () {
        var tabCaption = document.getElementById("txtNewDocTabCaption").value.trim();
        if (tabCaption == "") {
            document.getElementById("txtNewDocTabCaption").focus();
            $("#lblNameError_DocTab").html('<i class="fa fa-warning" style="color:red;" ></i> Please enter Tab name.').fadeIn().delay(3000).hide(1);
            return false;
        }
        if (tabCaption != "") {
            var tabName = document.getElementById("txtNewDocTabName").value.trim();
            if (tabName != "") {
                tabName = tabName.replace(/\s/g, '');
            }
            else
                tabName = tabCaption.replace(/\s/g, '');
            $("#MCustomize_CreateDocTab_Modal").modal('hide');
            var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            FORMCUSTOMIZATION.SaveTab(mTypeId, tabCaption, tabName, 1);
        }
        $("#CreateTabMeanu").css("display", "none");
    },
    CloseNewDocTab: function () {
        $("#MCustomize_CreateDocTab_Modal").modal('hide');
    },

    CreateNewTab: function (tabType) {
        document.getElementById("txtNewTabCaption").value = "";
        document.getElementById("txtNewTabName").value = "";
        $("#MCustomize_CreateTab_Modal").modal('show');
    },
    SaveNewTab: function () {
        debugger;
        var tabCaption = document.getElementById("txtNewTabCaption").value.trim();
        if (tabCaption == "") {
            document.getElementById("txtNewTabCaption").focus();
            $("#lblNameError_NewTab").html('<i class="fa fa-warning" style="color:red;" ></i> Please enter Tab name.').fadeIn().delay(3000).hide(1);
            return false;
        }
        if (tabCaption != "") {
            var tabName = document.getElementById("txtNewTabName").value.trim();
            if (tabName != "") {
                tabName = tabName.replace(/\s/g, '');
            }
            else
                tabName = tabCaption.replace(/\s/g, '');
            $("#MCustomize_CreateTab_Modal").modal('hide');
            var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            FORMCUSTOMIZATION.SaveTab(mTypeId, tabCaption, tabName, 0);
        }
        $("#CreateTabMeanu").css("display", "none");
    },
    CloseNewTab: function () {
        $("#MCustomize_CreateTab_Modal").modal('hide');
    },


    SaveTab: function (FormId, caption, name, tabType) {
        debugger;
        var isShowClose = false;
        var bhiddenTab = false;
        if (isOpenedFromForm == "True") {
            isShowClose = true;
        }
        if (tabType == 2) {
            bhiddenTab = document.getElementById("bIsTreeHiddenTab").checked;
        }
        else if (tabType == 1) {
            bhiddenTab = document.getElementById("bIsDocHiddenTab").checked;
        }
        else {
            bhiddenTab = document.getElementById("bIsHiddenTab").checked;
        }
        var urlPath = GLOBAL.getContextPath("SaveFormFieldTab", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormId: FormId, sCaption: caption, sName: name, iTabType: tabType, bShowClose: isShowClose, bIshidden: bhiddenTab }, "HTML", true, "FORMCUSTOMIZATION.RefreshTab_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },
    RefreshTab_onSuccess: function (bs, data) {
        debugger;
        if (data != "" && data != null && bs == true) {
            if (data.length <= 200) {
                //data = data.substring(1, data.length - 1);
                COMMON.prototype.showMessage(data);
                //FORMCUSTOMIZATION.ShowAlertMessage(data);
            }
            else {
                if ($("#btnCloseFormCutomizationFromFormScreen").length <= 0) {
                    $("#Form_Customization").html(data);
                    //COMMON.prototype.showMessage(data);
                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgTabAddedSuccessfully"));
                }
                else {
                    //$("#divSecondsub").html(data);
                    $("#Form_Customization").html(data);
                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgTabAddedSuccessfully"));
                    //COMMON.prototype.showMessage(data);
                }
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgTabAddedSuccessfully"), "green"); // "Tab Added Successfully."
                //debugger;
                var tabId = $("#FormFields_list>li").last()[0].dataset.id;
                FORMCUSTOMIZATION.SelectTabFromTabId(tabId);
            }
        }
        else
            COMMON.prototype.showMessage(data);
        FORMCUSTOMIZATION.setHeight();
        //FORMCUSTOMIZATION.ShowAlertMessage(data);
    },

    ShowDelWarning: function () {
        //////debugger;
        var allTabs = document.getElementById("FormFields_list").children;
        var isGeneralTab = false;
        var tabId;
        for (var i = 0; i < allTabs.length; i++) {
            //if (allTabs[i].className == "tab-link nav-item selectedTab FormSelectedRowColor mcFieldsTab" && allTabs[i].textContent.trim() == "General") {
            if ($(allTabs[i]).hasClass("FormSelectedRowColor") == true && allTabs[i].textContent.trim() == "General") {
                isGeneralTab = true;
            }
            //if (allTabs[i].className == "tab-link nav-item selectedTab FormSelectedRowColor mcFieldsTab") {
            if ($(allTabs[i]).hasClass("FormSelectedRowColor") == true) {
                tabId = allTabs[i].dataset.id.trim();
            }
        }
        if (!isGeneralTab) {
            //////debugger;
            var hasDefaultField = false;
            $("#tabId_" + tabId + " > div:first").children().each(function () {
                //////debugger;
                var fld = document.getElementById("tab_contentFor_" + this.id);
                if ($(fld).find("table>tbody>tr").hasClass("defualtField")) {
                    hasDefaultField = true;
                }
            });
            if (hasDefaultField) {
                hasDefaultField = false;
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultfieldsfoundTabcannotbeDeleted"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultfieldsfoundTabcannotbeDeleted")); // "Default fields found, Tab cannot be Deleted."
            }
            else {
                $("#MCustomize_DeleteTab_Modal").modal('show');
            }
        }
        else {
            COMMON.prototype.showMessage("General Tab cannot be Deleted.");
            //FORMCUSTOMIZATION.ShowAlertMessage("General Tab cannot be Deleted.");
        }
    },
    DeleteSelectedTab: function () {
        debugger;
        var allTabs = document.getElementById("FormFields_list").children;
        var tabId = 0;
        var bDeleteTab = false;
        var tabSelection = false;
        for (var i = 0; i < allTabs.length; i++) {
            //if (allTabs[i].className == "tab-link nav-item selectedTab FormSelectedRowColor mcFieldsTab" && allTabs[i].textContent.trim() != "General") {
            if ($(allTabs[i]).hasClass("FormSelectedRowColor") == true && allTabs[i].textContent.trim() != "General") {
                tabSelection = true;
                tabId = allTabs[i].dataset.id;
                if (allTabs[i].dataset.tabtype == 0) {
                    bDeleteTab = true;
                }
            }
        }
        if (tabSelection && tabId != 0) {
            $("#MCustomize_DeleteTab_Modal").modal('hide');
            var detailsType = $("#fields_tabContent_" + tabId).find('table>tbody');
            var hasDefaultField = false;
            if (detailsType.length > 0) {
                for (var i = 0; i < detailsType.length; i++) {
                    for (var j = 0; j < detailsType[i].children.length; j++) {
                        if ($(detailsType[i].children[j]).hasClass("defualtField") && bDeleteTab == true) {
                            hasDefaultField = true;
                            break;
                        }
                    }
                }
            }
            if (hasDefaultField) {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultfieldsfoundTabcannotbeDeleted"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultfieldsfoundTabcannotbeDeleted"));
                return false;
            }
            var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            var isShowClose = false;
            if (isOpenedFromForm == "True") {
                isShowClose = true;
            }
            var urlPath = GLOBAL.getContextPath("DeleteFormTab", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iTabId: tabId, iFormTypeId: mTypeId, bShowClose: isShowClose }, "HTML", true, "FORMCUSTOMIZATION.RefreshTabAfterDel_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },
    RefreshTabAfterDel_onSuccess: function (bs, data) {
       //debugger;
        if (data != '"Error"' && bs == true) {
            if (data.length == 46) {
                data = data.substring(1, data.length - 1);
                COMMON.prototype.showMessage(data);
                //FORMCUSTOMIZATION.ShowAlertMessage(data);
            }
            else {
                if ($("#btnCloseFormCutomizationFromFormScreen").length <= 0) {
                    $("#Form_Customization").html(data);
                }
                else {
                    //$("#divSecondsub").html(data);
                    $("#Form_Customization").html(data);
                }
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgTabDeleted"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgTabDeleted"), "green"); // "Tab Deleted Successfully."
            }
        }
        else {
            data = data.substring(1, data.length - 1);
            COMMON.prototype.showMessage(data);
            //FORMCUSTOMIZATION.ShowAlertMessage(data);
        }
        var tabId = $("#FormFields_list>li").first()[0].dataset.id;        
        FORMCUSTOMIZATION.SelectTabFromTabId(tabId);
        FORMCUSTOMIZATION.setHeight();
    },

    EditTabDetail: function (ele) {
       //debugger;
        if (ele.dataset.canedittabcaption == "True") {
            if (ele.textContent.trim() != "General") {
                document.getElementById("txtEditTabCaption").value = ele.textContent.trim();
                document.getElementById("bIsCustHiddenTab").checked = ele.dataset.hidden == "False" ? false : true;
                $("#MCustomize_EditTab_Modal").modal('show');
            }
            else {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgCaptioncannotEdit"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgCaptioncannotEdit"));// "Caption Cannot be Edited."
            }
        }
    },
    SaveUpdatedCaptionTab: function () {
        //debugger;
        if (document.getElementById("txtEditTabCaption").value.trim() != "") {
            var tabId = 0;
            var allTabs = document.getElementById("FormFields_list").children;
            for (var i = 0; i < allTabs.length; i++) {
                if (allTabs[i].className == "tab-link nav-item selectedTab FormSelectedRowColor mcFieldsTab" && allTabs[i].textContent.trim() != "General") {
                    tabId = allTabs[i].dataset.id;
                }
            }
            var newTabCaption = document.getElementById("txtEditTabCaption").value.trim();
            $("#MCustomize_EditTab_Modal").modal('hide');
            var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            var isShowClose = false;
            var IsHidden = document.getElementById("bIsCustHiddenTab").checked;
            if (isOpenedFromForm == "True") {
                isShowClose = true;
            }
            var urlPath = GLOBAL.getContextPath("UpdateFormFieldTab", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: mTypeId, iTabId: tabId, sTabCaption: newTabCaption, strTabAlias: "", bShowClose: isShowClose, IsHidden: IsHidden }, "HTML", true, "FORMCUSTOMIZATION.RefreshTabAfterEdit_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            document.getElementById("txtEditTabCaption").focus();
            $("#lblEditCaptionError_Tab").html('<i class="fa fa-warning" style="color:red;" ></i> Please enter Tab name.').fadeIn().delay(3000).hide(1);
        }
    },
    RefreshTabAfterEdit_onSuccess: function (bs, data) {
        if (data != '"Error"' && bs == true) {
            $("#Form_Customization").html(data);
            //if ($("#btnCloseFormCutomizationFromFormScreen").length <= 0) {
            //    $("#Form_Customization").html(data);
            //}
            //else {
            //    $("#divSecondsub").html(data);
            //}
            COMMON.prototype.showMessage("Tab Caption Updated Successfully.");
            //FORMCUSTOMIZATION.ShowAlertMessage("Tab Caption Updated Successfully.", "green");
        }
        else {
            data = data.substring(1, data.length - 1);
            COMMON.prototype.showMessage(data);
            //FORMCUSTOMIZATION.ShowAlertMessage(data);
        }
    },

    ShowPopupToAddExtraField: function () {
        debugger;
        var mName = FORMCUSTOMIZATION.GetFormName(); // document.getElementById("Customizing_FormName").textContent.trim();
        var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();// selectedFormId;
        var currentTab = $("#FormFields_list>li.selectedTab")[0];
        if (currentTab.dataset.tabtype != 0) {
            COMMON.prototype.showMessage("New Field can not be Add.");
            //FORMCUSTOMIZATION.ShowAlertMessage("New Field can not be Add.");
            return false;
        }
        var tabCaption = currentTab.dataset.name.trim();
        var tabId = currentTab.dataset.id;
        var tab = $("#tabId_" + tabId + " > ul .current")[0];
        var tableId = tab.dataset.tableid;
        var tableTypeName = tab.textContent.trim();
        var tableName = tab.dataset.tablename;
        var tableType = tab.dataset.tabletype;
        var urlPath = GLOBAL.getContextPath("ExtraFields_FormCustomization", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { sFormName: mName, iFormTypeId: mTypeId, iFieldId: 0, sTabCaption: tabCaption, iTabId: tabId, iTableId: tableId, sTableTypeName: tableTypeName, sTableName: tableName, iTableType: tableType, sCallFor: "Create" }, "HTML", true, "FORMCUSTOMIZATION.ShowExtraFieldPopup", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },

    DisplayOtherControls: function (ele, datatype) {
       ////debugger;
        var controlType = $(ele).val();

        if (datatype == 0) {
            if (controlType == 12 || controlType == 13 || controlType == 14) {
                controlType = parseInt(controlType);
                switch (controlType) {
                    case 12:
                        $("#ExtraField_RegularExpression").val('^\\d{10}$');
                        $("#ExtraField_ErrorMessage").val("Please enter valid 10 digit phone number");
                        break;
                    case 13:
                        $("#ExtraField_RegularExpression").val('^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$');
                        $("#ExtraField_ErrorMessage").val("Please enter valid email address");
                        break;
                    case 14:
                        var url = '(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})';
                        $("#ExtraField_RegularExpression").val(url);
                        $("#ExtraField_ErrorMessage").val("Please enter valid url for Website");
                        break;
                }

            }
        }
        else {
            if (controlType == 0) {
                $("#intervalDiv_ExtraField, #MinValueDiv_ExtraField, #MaxValueDiv_ExtraField").hide();
                $("#BannerTextDiv_ExtraField, #ValidationDiv_ExtraField").show();
                $("#ExtraField_BannerText").prop("disabled", false);
                $("#ExtraField_MaxSize").prop("disabled", false);
            }
            else if (controlType == 1) {
                $("#intervalDiv_ExtraField, #ValidationDiv_ExtraField").hide();
                $("#BannerTextDiv_ExtraField").show();
                $("#ExtraField_BannerText").prop("disabled", true);
                $("#MinValueDiv_ExtraField, #MaxValueDiv_ExtraField").show();
                $("#ExtraField_MaxSize").prop("disabled", false);
            }
            else {
                $("#BannerTextDiv_ExtraField, #ValidationDiv_ExtraField").hide();
                $("#intervalDiv_ExtraField").show();
                $("#MinValueDiv_ExtraField, #MaxValueDiv_ExtraField").show();
                $("#ExtraField_MaxSize").prop("disabled", false);
            }
        }
    },

    showBehaviour_Prop: function (ele) {
        ////debugger;
        var behaviourValue = ele.options[ele.selectedIndex].value.trim();
        if (behaviourValue == 4) {
            document.getElementById("incremental_behaviour_div").style.display = "none";
            document.getElementById("multiLine_behaviour_div").style.display = "block";
            document.getElementById("lblIncrementalOutput").style.display = "none";
        }
        else if (behaviourValue == 5) {
            document.getElementById("multiLine_behaviour_div").style.display = "none";
            document.getElementById("incremental_behaviour_div").style.display = "block";
            document.getElementById("lblIncrementalOutput").style.display = "block";
        }
        else {
            document.getElementById("incremental_behaviour_div").style.display = "none";
            document.getElementById("multiLine_behaviour_div").style.display = "none";
            document.getElementById("lblIncrementalOutput").style.display = "none";
        }
    },
    ChangeLabel_defField: function (ele) {
        if (ele.checked) {
            ele.nextElementSibling.textContent = "True";
        }
        else {
            ele.nextElementSibling.textContent = "False";
        }
    },

    selectDefaultMandatoryFields: function () {
        document.getElementById("ExtraField_FormToLink");
    },

    GetFormExtraFields: function (bFromLoad) {  
        FORMCUSTOMIZATION.GetMandatoryFields(bFromLoad);
    },
    GetMandatoryFields: function (bFromLoad) {
        debugger;
        var FormTypeId = 0;
        var isFromTable = false;
        var tblName = "";
        var mToLink = document.getElementById("ExtraField_FormToLink");
        if (mToLink != null && mToLink != undefined) {
            if (mToLink.value.trim() != "") {
                FormTypeId = OPTIONCONTROL.getControlValue('ExtraField_FormToLink');
            }
            else {
                document.getElementById("ExtraField_MandatoryFields").value = "";
                $("#lblFieldsCount, #chkList_MandatoryFields_ExtraField").html("");
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the link Form"; // "Select the link Form";
                COMMON.prototype.showMessage("Select the link Form");
                $("#lblErrorMsg_ExtraField").hide();
                return;
            }
        }
        else {
            tblName = document.getElementById("ExtraField_TableName");
            if (tblName != undefined || tblName != null) {
                tblName = tblName.value.trim();
            }
            else {
                document.getElementById("ExtraField_MandatoryFields").value = "";
                $("#lblFieldsCount, #chkList_MandatoryFields_ExtraField").html("");
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("EnterTableName"); // "Enter Table name first";
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("EnterTableName"));
                $("#lblErrorMsg_ExtraField").hide();
                return;
            }
            FormTypeId = 0;
            isFromTable = true;
        }
        if (tblName != "" || FormTypeId > 0) {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lblErrorMsg_ExtraField"));
            $("#lblErrorMsg_ExtraField").hide();
            var urlPath = GLOBAL.getContextPath("GetFormFields_ExtraField", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, IsTable: isFromTable, sTableName: tblName }, "JSON", true, "FORMCUSTOMIZATION.SetMandatoryFields", "", "", bFromLoad);
        }
    },
    SetMandatoryFields: function (bs, data, tag) {
        debugger;
        if (bs == true && data != "Error") {
            var divContainer = document.getElementById("chkList_MandatoryFields_ExtraField");
            var ddlFilterOnColumn = document.getElementById("ddlFilterOnColumn_FormFilter");
            $(divContainer).html('');
            $(ddlFilterOnColumn).html('');

            var ddlDisplayField = document.getElementById("ExtraField_DisplayFields");
            var ddlValueField = document.getElementById("ExtraField_ValueFields");
            if ((ddlDisplayField != null && ddlDisplayField != undefined) && (ddlValueField != null && ddlValueField != undefined)) {
                $(ddlValueField).html('');
                $(ddlDisplayField).html('');
            }
            var txtMandatoryFields = document.getElementById("ExtraField_MandatoryFields");
            if (txtMandatoryFields != null && txtMandatoryFields != undefined) {
                if (tag == "" || tag == null || tag == undefined) {
                    $(txtMandatoryFields).val('');
                }
            }
            $("#lblFieldsCount").html(data.length + " Fields");
            for (var i = 0; i < data.length; i++) {
                var chkdiv;
                if (data[i].FieldName == "iFormId" || data[i].FieldName == "sName") {
                    if (tag == "" || tag == null || tag == undefined) {
                        //txtMandatoryFields.value += data[i].FieldName + ",";
                        if (txtMandatoryFields.value.trim().length > 0) {
                            txtMandatoryFields.value += "," + data[i].FieldName;
                        }
                        else {
                            txtMandatoryFields.value += data[i].FieldName;
                        }
                    }
                    chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' checked disabled data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                }
                else if (data[i].FieldName == "iFormTypeId" || data[i].FieldName == "sFormName") {
                    if (tag == "" || tag == null || tag == undefined) {
                        //txtMandatoryFields.value += data[i].FieldName + ",";
                        if (txtMandatoryFields.value.trim().length > 0) {
                            txtMandatoryFields.value += "," + data[i].FieldName;
                        }
                        else {
                            txtMandatoryFields.value += data[i].FieldName;
                        }
                    }
                    chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' checked disabled data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                }
                else {
                    if (data[i].FieldName == "sCode") {
                        if (tag == "" || tag == null || tag == undefined) {
                            //txtMandatoryFields.value += data[i].FieldName;
                            if (txtMandatoryFields.value.trim().length > 0) {
                                txtMandatoryFields.value += "," + data[i].FieldName;
                            }
                            else {
                                txtMandatoryFields.value += data[i].FieldName;
                            }
                        }
                        chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' checked data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                    }
                    else
                        chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                }
                $(divContainer).append(chkdiv);

                if (data[i].FieldName != "iFormId") {
                    if (data[i].DataType == 8 || data[i].DataType == 9) {

                        var opt = "<option value='" + data[i].FieldId + "' data-fldname='" + data[i].FieldName + "' data-datatype='" + data[i].DataType + "' data-optValues='" + data[i].DefaultValue + "' data-lnkFormid='" + data[i].linkFormID + "' >" + data[i].FieldName + "</option>";
                    }
                    else if (data[i].DataType == 14) {
                        //var tblName = data[i].TableName.toString().trim();
                        var opt = "<option value='" + data[i].FieldId + "' data-fldname='" + data[i].FieldName + "' data-datatype='" + data[i].DataType + "' data-optValues='" + data[i].DefaultValue + "' data-lnkFormid='" + data[i].linkFormID + "' data-ftablename='" + data[i].TableName + "' data-fvaluefield='" + data[i].FieldName + "' data-fdisplayfield='" + data[i].DisplayMenmber + " '>" + data[i].FieldName + "</option>";
                    }
                    else
                        var opt = "<option value='" + data[i].FieldId + "' data-fldname='" + data[i].FieldName + "' data-datatype='" + data[i].DataType + "' data-optValues='" + data[i].DefaultValue + "' data-lnkFormid='" + data[i].linkFormID + "' >" + data[i].FieldName + "</option>";
                    $(ddlFilterOnColumn).append(opt);
                }
                if ((ddlDisplayField != null && ddlDisplayField != undefined) && (ddlValueField != null && ddlValueField != undefined)) {
                    var opt = "<option value='" + data[i].FieldId + "' >" + data[i].FieldName + "</option>";
                    $(ddlValueField).append(opt);
                    $(ddlDisplayField).append(opt);
                }
            }

            FORMCUSTOMIZATION.SetCheckboxForEditField(false, 21);
            //////debugger;
            if ((ddlDisplayField != null && ddlDisplayField != undefined) && (ddlValueField != null && ddlValueField != undefined)) {
                var displayField = ddlDisplayField.dataset.linkdisplayfield;
                var valueField = ddlValueField.dataset.linkvaluefield;
                $(ddlValueField).find("option:contains(" + valueField + ")").attr('selected', true);
                $(ddlDisplayField).find("option:contains(" + displayField + ")").attr('selected', true);
            }
        }
        else {
            document.getElementById("lblErrorMsg_ExtraField").textContent = "Error! in getting fields";
            COMMON.prototype.showMessage("Select the link Form");
            $("#lblErrorMsg_ExtraField").hide();
        }
    },
    SetCheckboxForEditField: function (isTxtClicked, iDataTypeId) {
        ////debugger;
        if (document.getElementById("ModeOfPopup_ExtraField").value.trim() == "Edit") {
            // check all the Checkboxes if already selected (for Edit only)
            //////debugger;
            var allchkChecked = document.getElementById("ExtraField_MandatoryFields").value.trim();
            if (allchkChecked != "") {
                allchkChecked = allchkChecked.split(",");
                for (var i = 0; i < allchkChecked.length; i++) {
                    var allList = document.getElementById("chkList_MandatoryFields_ExtraField").getElementsByTagName("input");
                    for (var ichk = 0; ichk < allList.length; ichk++) {
                        if (allList[ichk].type = "checkbox") {
                            if (allList[ichk].dataset.fieldname == allchkChecked[i]) {
                                allList[ichk].checked = true;
                            }
                        }
                    }
                }
                if (!isTxtClicked) {
                    document.getElementById("MandatoryFieldsDiv_ExtraField").style.display = "none";
                }
                else
                    document.getElementById("MandatoryFieldsDiv_ExtraField").style.display = "block";
            }
            if (iDataTypeId == 21) {
                FORMCUSTOMIZATION.SetFormFilterCriteriaData(FilterConditions);
            }
            else {
                FORMCUSTOMIZATION.SetMasterFilterCriteriaData(FilterConditions);
            }
            //FORMCUSTOMIZATION.SetFilterCriteriaField();
        }
    },
    checkAllMandatoryFields_ExtraField: function (ele) {
        //////debugger;
        var isChecked = false;
        if (ele.checked) {
            isChecked = true;
        }
        var allchkDiv = document.getElementById("chkList_MandatoryFields_ExtraField").getElementsByTagName('input');
        for (var i = 0; i < allchkDiv.length; i++) {
            if (allchkDiv[i].type = "checkbox") {
                if (allchkDiv[i].disabled == false) {
                    allchkDiv[i].checked = isChecked;
                }
            }
        }
    },
    showSelectedMandatoryFields: function () {
        document.getElementById('MandatoryFieldsDiv_ExtraField').style.display = 'none';
        var allchkDiv = document.getElementById("chkList_MandatoryFields_ExtraField").getElementsByTagName('input');
        var checkedList = "";
        for (var i = 0; i < allchkDiv.length; i++) {
            if (allchkDiv[i].type = "checkbox") {
                if (allchkDiv[i].checked) {
                    checkedList += allchkDiv[i].parentElement.textContent.trim() + ",";
                }
            }
        }
        checkedList = checkedList.substring(0, checkedList.lastIndexOf(','));
        document.getElementById("ExtraField_MandatoryFields").value = checkedList;
    },
    showMandatoryFields_Popup: function () {
        document.getElementById("MandatoryFieldsDiv_ExtraField").style.display = "block";
    },

    SetNoOfDecimals: function (ele) {
        //debugger;
        if (ele.value.trim() == "") {
            ele.value = "0";
        }
        else {
            if (parseInt(ele.value.trim()) > 15) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Max 15 No of Decimal are allowed";
                COMMON.prototype.showMessage("Max 15 No of Decimal are allowed");
                $("#lblErrorMsg_ExtraField").hide();
            }
            else {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
                $("#lblErrorMsg_ExtraField").hide();
                //var DefaultValue = parseFloat($("#ExtraField_DefaultValue").val().split('.')[0].replace(/,/g, ""));
                var DefaultValue = parseFloat($("#ExtraField_DefaultValue").val());

                var totalNoOfDecimals = parseFloat(ele.value.trim());
                $("#ExtraField_DefaultValue").val(DefaultValue.toFixed(totalNoOfDecimals));
            }
        }

        ////debugger;
        var iDefaultValue = $("#ExtraField_DefaultValue").val();
        var beforDecimal = iDefaultValue.split('.')[0];
        var afterDecimal = iDefaultValue.split('.')[1];

        beforDecimalDefaultValue = FORMCUSTOMIZATION.numberWithCommas(beforDecimal);
        $("#ExtraField_DefaultValue").val(beforDecimalDefaultValue.toString() + "." + afterDecimal.toString());
    },

    SetDefaultMinMaxValue: function (ele) {
        //debugger;
        var selectedDataType = $("#ddlDatatype_ExtraField").text().trim();
        if (selectedDataType == "Fraction") {
            if (ele.value.trim() == "") {
                ele.value = "0";
            }
            else
                //ele.value = ele.value.trim().replace(/[^0-9]+/gi, '');
                ele.value = ele.value.trim();
            var DefaultValue = parseFloat($("#ExtraField_DefaultValue").val().split('.')[0].replace(/,/g, ""));
            var totalNoOfDecimals = parseFloat($("#ExtraField_NoOfDecimals").val());
            //$("#ExtraField_DefaultValue").val(DefaultValue.toFixed(totalNoOfDecimals) == "NaN" ? 0 : DefaultValue.toFixed(totalNoOfDecimals));
            $("#ExtraField_DefaultValue").val(parseFloat(ele.value).toFixed(totalNoOfDecimals) == "NaN" ? 0 : parseFloat(ele.value).toFixed(totalNoOfDecimals));

            FORMCUSTOMIZATION.validateTextDefaultValue(ele);
        }
    },

    FillExtraFieldName: function (ele) {
        //debugger;
        if (ele.value.trim() != "") {
            var popupMode = document.getElementById("ModeOfPopup_ExtraField").value.trim();
            if (popupMode == "Create") {
                FORMCUSTOMIZATION.SetExtraFieldName(ele.value.trim());
                //document.getElementById("ExtraField_FieldName").value = ele.value.trim().replace(/\s/g, '');
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
                $("#lblErrorMsg_ExtraField").hide();
            }
        }
    },

    SetExtraFieldName: function (sCaption) {
        //debugger;
        //document.getElementById("ExtraField_FieldName").value = sCaption.replace(/[^a-z\d\s]+/gi, '').trim().replace(/\s/g, '');
        $('#ExtraField_FieldName[type=hidden]').val(sCaption.replace(/[^a-z\d\s]+/gi, '').trim().replace(/\s/g, ''));
        $('#ExtraField_FieldName[type=text]').val(sCaption.replace(/[^a-z\d\s]+/gi, '').trim().replace(/\s/g, ''));

    },

    IsExtraFieldExist: function (sFieldName) {
        ////debugger;
        var isFieldExist = false;
        try {
            var allTabs = $("#all_TabsField").find("tbody");
            for (var i = 0; i < allTabs.length; i++) {
                var TR = allTabs[i].children;
                for (var j = 0; j < TR.length; j++) {
                    if (TR[j].children[1].dataset.fieldname == sFieldName) {
                        isFieldExist = true;
                    }
                }
            }
        } catch (e) {
            alert("Error: IsExtraFieldExist, " + e.message);
        }
        return isFieldExist;
    },

    CheckExtraFieldName: function (ele) {
        ////debugger;
        if (ele.value.trim() != "") {
            FORMCUSTOMIZATION.SetExtraFieldName(ele.value.trim());
            if (FORMCUSTOMIZATION.validateExraFieldName(ele.value.trim())) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgFieldNamealreadyexist"); // "Field Name already exist";
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldNamealreadyexist"));
                $("#lblErrorMsg_ExtraField").hide();
            }
            else {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
                $("#lblErrorMsg_ExtraField").hide();
            }
        }
    },

    validateExraFieldName: function myfunction(sFieldName) {
        ////debugger;
        var FormTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var urlPath = GLOBAL.getContextPath("validateExtraFieldName", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, sFieldName: sFieldName }, "JSON", true, "FORMCUSTOMIZATION.validateExraFieldNameSuccess", "", "");
    },

    validateExraFieldNameSuccess: function myfunction(flag, data, tag) {
        ////debugger;
        if (flag == true) {
            if (data == true) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgFieldNamealreadyexist"); // "Field Name already exist";
                document.getElementById("ExtraField_FieldName").value = "";
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldNamealreadyexist"));
                $("#lblErrorMsg_ExtraField").hide();

            }
            else {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
                $("#lblErrorMsg_ExtraField").hide();
            }
        }
        else {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
            $("#lblErrorMsg_ExtraField").hide();
        }
    },

    Show_NumList: function () {
        document.getElementById("ExtraField_NumValueTable").style.display = "block";
    },
    Hide_NumList: function () {
        document.getElementById("ExtraField_NumValueTable").style.display = "none";
    },
    AddNewRow_NumList: function (ele) {
        //////debugger;
        var trCount = ele.parentElement.children.length;
        var currentIndex = ele.rowIndex;
        if (trCount == (currentIndex + 1)) {
            var trHtml = "<tr onclick='FORMCUSTOMIZATION.AddNewRow_NumList(this);' onkeyup='FORMCUSTOMIZATION.AddNewRow_NumList(this);'>" +
                         //"<td><input type='number' class='form-control hideSpinner' min='0' onkeypress='return FORMCUSTOMIZATION.IsNumber(event)' /></td>" +
                         "<td><input type='text' class='form-control hideSpinner' min='0' onkeypress='return FORMCUSTOMIZATION.IsNumber(event)' /></td>" +
                         "<td><input type='text' class='form-control' /></td>" +
                     "</tr>";
            $(ele.parentElement).append(trHtml);
        }

    },
    AddValues_NumList: function () {
        ////debugger;
        var tblNumListRows = document.getElementById("tblNumList_ExtraField").tBodies[0].rows;
        var allValues = "";
        for (var i = 0; i < tblNumListRows.length; i++) {
            if (tblNumListRows[i].children[0].children[0].value.trim() != "" && tblNumListRows[i].children[1].children[0].value.trim() != "") {
                allValues += tblNumListRows[i].children[0].children[0].value.trim();
                allValues += "," + tblNumListRows[i].children[1].children[0].value.trim() + ",";
            }
        }
        allValues = allValues.substring(0, allValues.lastIndexOf(','));
        var urlPath = GLOBAL.getContextPath("CreateNumberList", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { strDefaultValue: allValues }, "JSON", false);
        if (fnResult.data != "") {
            COMMON.prototype.showMessage(fnResult.data);
            return false;
        }
        var arr = allValues.split(',');
        if (FORMCUSTOMIZATION.Find_duplicates(arr) != "") {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Duplicate Values not allowed";
            document.getElementById("ExtraField_DefaultValue").value = "";
            COMMON.prototype.showMessage("Duplicate Values not allowed");
            $("#lblErrorMsg_ExtraField").hide();
            return;
        }
        document.getElementById("ExtraField_DefaultValue").value = allValues.trim();
        if (allValues.length > 0) {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
            $("#lblErrorMsg_ExtraField").hide();
        }
        FORMCUSTOMIZATION.Hide_NumList();
    },

    ClearValues_NumList: function () {
        //////debugger;
        var tblNumListRows = document.getElementById("tblNumList_ExtraField").tBodies[0].rows;
        for (var i = 0; i < tblNumListRows.length; i++) {
            tblNumListRows[i].children[0].children[0].value = "";
            tblNumListRows[i].children[1].children[0].value = "";
        }
        document.getElementById("ExtraField_DefaultValue").value = "";
        document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
        $("#lblErrorMsg_ExtraField").hide();
    },

    HideMandatoryFlds_FormAndExtr: function () {
        //////debugger;
        $(document).on("click keydown", function (event) {
            //////debugger;
            if (!$(event.target).closest('#MandatoryFieldsDiv_ExtraField').length && !$(event.target).is('#MandatoryFieldsDiv_ExtraField') && !$(event.target).is('#ExtraField_MandatoryFields')) {
                if ($('#MandatoryFieldsDiv_ExtraField').is(":visible")) {
                    //////debugger;
                    $('#MandatoryFieldsDiv_ExtraField').hide();
                }
            }
        });
    },

    ChangeFilterCriteriaCell: function (objCell, event) {
        //////debugger
        if (objCell.bLeave == true) {
            return (FORMCUSTOMIZATION.onFilterCellLeave(objCell, event));
        }
        else {
            FORMCUSTOMIZATION.onFilterCellEnter(objCell, event);
        }

    },
    onFilterCellEnter: function (objCell, evt) {
        debugger;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(objCell.cell);
        //if (objCell.iRow != 1) {
        //    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 7);
        //    if (cellField.CellData.value == 0) {
        //        document.getElementById("lblErrorMsg_ExtraField").textContent = "In Conjunction column [ONLY] should come in last row";
        //        return false;
        //    }
        //}
        if (objCell.iColumn == 1) {
            //return false;
            objCell.processDefault(evt);
        }
        else {
            var hasFieldSelection = false;
            if (document.getElementById("ExtraField_MandatoryFields").value.trim() != "") {
                if (objCell.iColumn != 1 && objCell.iColumn != 2 && objCell.iColumn != 6) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value == undefined || cellField.CellData.value == null || cellField.CellData.value == "") {
                        hasFieldSelection = true;
                    }
                }
            }
            if (hasFieldSelection == true && objCell.iColumn != 2) {
                if (document.getElementById("lblErrorMsg_ExtraField").textContent == "Select Field first") {
                    document.getElementById("lblErrorMsg_ExtraField").textContent = "Select Field first";
                    COMMON.prototype.showMessage("Select the link Form");
                    $("#lblErrorMsg_ExtraField").hide();
                }
                return true;
            }
            if (objCell.iColumn == 5) {
                debugger;
                var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellField.CellData.value == 0) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value != null && cellField.CellData.value != undefined && cellField.CellData.value != "") {
                        var fieldDetails = $("#ddlFilterOnColumn_FormFilter option[value='" + cellField.CellData.value + "']")[0];
                        //////debugger;
                        switch (parseInt(fieldDetails.dataset.datatype)) {
                            case MasterDataType.get('TEXT'):
                                if ($("#txtTextField_MsField").length <= 0) {
                                    var txtNew = document.createElement("input");
                                    txtNew.type = "text";
                                    txtNew.className = "form-control";
                                    txtNew.placeholder = "value";
                                    txtNew.style.width = "100%";
                                    txtNew.id = "txtTextField_MsField";
                                }
                                else
                                    var txtNew = document.getElementById("txtTextField_MsField");
                                objCell.setControl(txtNew, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('NUMBER'):
                                if ($("#txtNumField_MsField").length <= 0) {
                                    var txtNum = document.createElement("input");
                                    txtNum.type = "text";
                                    txtNum.className = "form-control";
                                    txtNum.placeholder = "value";
                                    txtNum.style.width = "100%";
                                    txtNum.id = "txtNumField_MsField";
                                    txtNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 1, event)");
                                }
                                else
                                    var txtNum = document.getElementById("txtNumField_MsField");
                                objCell.setControl(txtNum, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('BOOLEAN'):
                                if ($("#ddlBoolField_MsField").length <= 0) {
                                    var ddlBool = document.createElement("select");
                                    ddlBool.className = "custom-select";
                                    ddlBool.id = "ddlBoolField_MsField";
                                    ddlBool.style.width = "100%";
                                    var option1 = document.createElement("option");
                                    option1.value = 1;
                                    option1.textContent = "True";
                                    ddlBool.appendChild(option1);
                                    var option2 = document.createElement("option");
                                    option2.value = 0;
                                    option2.textContent = "False";
                                    ddlBool.appendChild(option2);
                                }
                                else
                                    var ddlBool = document.getElementById("ddlBoolField_MsField");
                                objCell.setControl(ddlBool, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('DATETIME'):
                                var element = document.getElementById("fDatePicker_containerDiv");
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('DATE'):
                                var element = document.getElementById("fDatePicker_containerDiv");
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('TIME'):
                                if ($("#txtTimeField_MsField").length <= 0) {
                                    var txtTime = document.createElement("input");
                                    txtTime.type = "text";
                                    txtTime.className = "form-control";
                                    txtTime.placeholder = "value";
                                    txtTime.style.width = "100%";
                                    txtTime.id = "txtTimeField_MsField";
                                }
                                else
                                    var txtTime = document.getElementById("txtTimeField_MsField");
                                $(txtTime).timepicker();
                                objCell.setControl(txtTime, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('FRACTION'):
                                if ($("#txtFloatField_MsField").length <= 0) {
                                    var txtFloat = document.createElement("input");
                                    txtFloat.type = "text";
                                    txtFloat.className = "form-control";
                                    txtFloat.placeholder = "value";
                                    txtFloat.style.width = "100%";
                                    txtFloat.id = "txtFloatField_MsField";
                                    txtFloat.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 3, event)");
                                }
                                else
                                    var txtFloat = document.getElementById("txtFloatField_MsField");
                                objCell.setControl(txtFloat, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('PICTURE'):

                                break;
                            case MasterDataType.get('STRINGLIST'):
                                var opts = fieldDetails.dataset.optvalues.split(',');
                                var newSelect = "<select id='ddlStrListNew_MsField' class='custom-select strListNew' style='width:100%;'>";
                                for (var i = 0; i < opts.length; i++) {
                                    var opt = "<option value='" + opts[i] + "'>" + opts[i] + "</option>";
                                    newSelect += opt;
                                }
                                newSelect += "</select>";
                                var ddlStringList = $($.parseHTML(newSelect));
                                if ($(document).find("#ddlStrListNew_MsField").length > 0) {
                                    $(document).find('#ddlStrListNew_MsField').remove();
                                }
                                objCell.setControl(ddlStringList[0], objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('NUMBERLIST'):
                                var opts = fieldDetails.dataset.optvalues.split(',');
                                var newSelect = "<select id='ddlNumListNew_MsField' class='custom-select numListNew' style='width:100%;'>";
                                for (var i = 0; i < opts.length; i++) {
                                    var pId;
                                    var pName;
                                    if (i % 2 == 0) {
                                        pId = opts[i];
                                    }
                                    if ((i + 1) % 2 != 0) {
                                        pName = opts[i + 1];
                                    }
                                    var opt = "<option value='" + pId + "'>" + pName + "</option>";
                                    newSelect += opt;
                                    i++;
                                }
                                newSelect += "</select>";
                                var ddlNumberList = $($.parseHTML(newSelect));
                                if ($(document).find("#ddlNumListNew_MsField").length > 0) {
                                    $(document).find('#ddlNumListNew_MsField').remove();
                                }
                                objCell.setControl(ddlNumberList[0], objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('DOCUMENTVIEWER'):

                                break;
                            case MasterDataType.get('FORM'):
                                var element = document.getElementById("foptControl_containerDiv");
                                cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 1);
                                var optControl = document.getElementById('FOption_FormFilter');
                                optControl.dataset.Formtypeid = cellChangeValue.CellData.ilinkFormid;
                                optControl.dataset.tablename = "";
                                optControl.dataset.primaryfield = "";
                                optControl.dataset.displayfield = "";
                                optControl.value = "";
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('MASTER'):
                                var element = document.getElementById("foptControl_containerDiv");
                                cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 1);
                                var optControl = document.getElementById('FOption_MasterFilter');
                                optControl.dataset.Mastertypeid = cellChangeValue.CellData.ilinkMasterid;
                                optControl.dataset.tablename = "";
                                optControl.dataset.primaryfield = "";
                                optControl.dataset.displayfield = "";
                                optControl.value = "";
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('BIGNUMBER'):
                                if ($("#txtBigNumField_MsField").length <= 0) {
                                    var txtBigNum = document.createElement("input");
                                    txtBigNum.type = "text";
                                    txtBigNum.className = "form-control";
                                    txtBigNum.placeholder = "value";
                                    txtBigNum.style.width = "100%";
                                    txtBigNum.id = "txtBigNumField_MsField";
                                    txtBigNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 0, event)");
                                }
                                else
                                    var txtBigNum = document.getElementById("txtBigNumField_MsField");
                                objCell.setControl(txtBigNum, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('EXTERNALTABLE'):
                                var element = document.getElementById("foptControl_containerDiv");
                                cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 1);
                                var optControl = document.getElementById('FOption_FormFilter');
                                optControl.dataset.Formtypeid = cellChangeValue.CellData.ilinkFormid;
                                optControl.dataset.tablename = cellChangeValue.CellData.stablename;
                                optControl.dataset.primaryfield = cellChangeValue.CellData.svaluemember;
                                optControl.dataset.displayfield = cellChangeValue.CellData.sdisplaymember;
                                optControl.value = "";
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('SMALLNUMBER'):
                                if ($("#txtSmallNumField_MsField").length <= 0) {
                                    var txtSmallNum = document.createElement("input");
                                    txtSmallNum.type = "text";
                                    txtSmallNum.className = "form-control";
                                    txtSmallNum.placeholder = "value";
                                    txtSmallNum.style.width = "100%";
                                    txtSmallNum.id = "txtSmallNumField_MsField";
                                    txtSmallNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 0, event)");
                                }
                                else
                                    var txtSmallNum = document.getElementById("txtSmallNumField_MsField");
                                objCell.setControl(txtSmallNum, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('TINYNUMBER'):
                                if ($("#txtTinyNumField_MsField").length <= 0) {
                                    var txtTinyNum = document.createElement("input");
                                    txtTinyNum.type = "text";
                                    txtTinyNum.className = "form-control";
                                    txtTinyNum.placeholder = "value";
                                    txtTinyNum.style.width = "100%";
                                    txtTinyNum.id = "txtTinyNumField_MsField";
                                    txtTinyNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 0, event)");
                                }
                                else
                                    var txtTinyNum = document.getElementById("txtTinyNumField_MsField");
                                objCell.setControl(txtTinyNum, objCell.getCellData("value"));
                                break;
                        }
                    }
                }
                else if (cellField.CellData.value == 1) {
                    var element = document.getElementById("ddlField_FormFields");
                    objCell.setControl(element, objCell.getCellData("value"));
                    if (element.style.display == "none") {
                        element.style.display = "block";
                    }
                }
                //objCell.processDefault(evt);
            }
            else if (objCell.iColumn == 6) {
                var cellValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellValue.CellData.value == 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 5);
                    var fieldId = cellField.CellData.value;
                    var fieldDetails = $("#ddlField_FormFields option[value='" + fieldId + "']")[0];
                    if (fieldDetails.dataset.datatype == 21) {
                        var mFields = fieldDetails.dataset.mandatoryfields.split(',');
                        $("#ddlLinkField_FormFilter").empty();
                        for (var i = 0; i < mFields.length; i++) {
                            $("#ddlLinkField_FormFilter").append("<option value='" + mFields[i] + "'>" + mFields[i] + "</option>");
                        }
                        var element = document.getElementById("ddlLinkField_FormFilter");
                        objCell.setControl(element, objCell.getCellData("value"));
                    }
                    else if (fieldDetails.dataset.datatype == 12 || fieldDetails.dataset.datatype == 14) {
                        var mFields = fieldDetails.dataset.mandatoryfields.split(',');
                        $("#ddlLinkField_MasterFilter").empty();
                        for (var i = 0; i < mFields.length; i++) {
                            $("#ddlLinkField_MasterFilter").append("<option value='" + mFields[i] + "'>" + mFields[i] + "</option>");
                        }
                        var element = document.getElementById("ddlLinkField_MasterFilter");
                        objCell.setControl(element, objCell.getCellData("value"));
                    }
                    else {
                        //$("#" + objCell.ColumnAttribute.scontrolid).empty();
                        //element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                        //objCell.setControl(element);
                        objCell.setCellText("");
                        objCell.setCellData("value", "");
                    }
                }
                else {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                    objCell.processDefault(evt);
                }
            }
            else if (objCell.iColumn == 7) {
                var element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                objCell.setControl(element, objCell.getCellData("value"));
                if (element.style.display == "none") {
                    element.style.display = "block";
                }
                if (objCell.iRow > 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, (objCell.iRow - 1), 7);
                    if (cellField.CellData.value != 0) {
                        document.getElementById("lblErrorMsg_ExtraField").textContent = "";
                        COMMON.prototype.showMessage("Select the link Form");
                        $("#lblErrorMsg_ExtraField").hide();
                    }
                }
            }
            else {
                var element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                objCell.setControl(element, objCell.getCellData("value"));
                if (element.style.display == "none") {
                    element.style.display = "block";
                }
            }
        }
    },
    onFilterCellLeave: function (objCell, evt) {
        debugger;
        var element = null;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(objCell.cell);
        if (COMMON.prototype.isValidObject(objCell.ColumnAttribute.scontrolid) == true) {
            if (objCell.iColumn == 1) { objCell.processDefault(evt); }
            else if (objCell.iColumn == 2) {
                var hasPreOnly = false;
                if (objCell.iRow > 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, (objCell.iRow - 1), 7);
                    if (cellField.CellData.value == 0) {
                        hasPreOnly = true;
                    }
                }
                if (hasPreOnly == true) {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                    objCell.setCellData("sFieldName", "");
                    document.getElementById("lblErrorMsg_ExtraField").textContent = FORMCUSTOMIZATION.GetResourceMessage("msgtheaboveConjunctionshouldnotbeONLY"); // "The above Conjunction should not be {ONLY}";
                    COMMON.prototype.showMessage("Select the link Form");
                    $("#lblErrorMsg_ExtraField").hide();
                }
                else {
                    element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                    var optSelected = $(element).find("option:selected")[0];
                    if (optSelected != null && optSelected != undefined) {
                        objCell.setCellText($(optSelected).text().trim());
                        objCell.setCellData("value", optSelected.value);
                        objCell.setCellData("sFieldName", optSelected.dataset.fldname);
                       
                    }
                }
            }
            else if (objCell.iColumn == 5) {
                debugger;
                var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellField.CellData.value == 0) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value != null && cellField.CellData.value != undefined) {
                        var fieldDetails = $("#ddlFilterOnColumn_FormFilter option[value='" + cellField.CellData.value + "']")[0];
                        switch (parseInt(fieldDetails.dataset.datatype)) {
                            case MasterDataType.get('TEXT'):
                                var txtText = document.getElementById("txtTextField_MsField");
                                objCell.setCellText(txtText.value.trim());
                                objCell.setCellData("value", txtText.value.trim());
                                break;
                            case MasterDataType.get('NUMBER'):
                                var txtNum = document.getElementById("txtNumField_MsField");
                                objCell.setCellText(txtNum.value.trim());
                                objCell.setCellData("value", txtNum.value.trim());
                                break;
                            case MasterDataType.get('BOOLEAN'):
                                var ddlBool = document.getElementById("ddlBoolField_MsField");
                                objCell.setCellText($(ddlBool).find("option:selected").text().trim());
                                objCell.setCellData("value", $(ddlBool).find("option:selected").val());
                                break;
                            case MasterDataType.get('DATETIME'):
                                var idateValue = DATEPICKER.getDate('fDatePicker_FormFilter');
                                var sdateText = document.getElementById("fDatePicker_FormFilter").value;
                                objCell.setCellText(sdateText);
                                objCell.setCellData("value", idateValue);
                                break;
                            case MasterDataType.get('DATE'):
                                var idateValue = DATEPICKER.getDate('fDatePicker_FormFilter');
                                var sdateText = document.getElementById("fDatePicker_FormFilter").value;
                                objCell.setCellText(sdateText);
                                objCell.setCellData("value", idateValue);
                                break;
                            case MasterDataType.get('TIME'):
                                var txtTime = document.getElementById("txtTimeField_MsField");
                                objCell.setCellText(txtTime.value.trim());
                                objCell.setCellData("value", txtTime.value.trim());
                                break;
                            case MasterDataType.get('FRACTION'):
                                var txtFloat = document.getElementById("txtFloatField_MsField");
                                objCell.setCellText(txtFloat.value.trim());
                                objCell.setCellData("value", txtFloat.value.trim());
                                break;
                            case MasterDataType.get('PICTURE'):

                                break;
                            case MasterDataType.get('STRINGLIST'):
                                var ddlStrList = document.getElementById("ddlStrListNew_MsField");
                                objCell.setCellText($(ddlStrList).find("option:selected").text().trim());
                                objCell.setCellData("value", $(ddlStrList).find("option:selected").val());
                                objCell.setCellData("sFieldName", $(ddlStrList).find("option:selected").text().trim());
                                break;
                            case MasterDataType.get('NUMBERLIST'):
                                var ddlNumList = document.getElementById("ddlNumListNew_MsField");
                                objCell.setCellText($(ddlNumList).find("option:selected").text().trim());
                                objCell.setCellData("value", $(ddlNumList).find("option:selected").val());
                                objCell.setCellData("sFieldName", $(ddlNumList).find("option:selected").text().trim());
                                break;
                            case MasterDataType.get('DOCUMENTVIEWER'):

                                break;
                            case MasterDataType.get('FORM'):
                                var msTypeId = OPTIONCONTROL.getControlValue("FOption_FormFilter");
                                var msName = OPTIONCONTROL.getControlText("FOption_FormFilter");
                                objCell.setCellText(msName);
                                objCell.setCellData("value", msTypeId);
                                break;
                            case MasterDataType.get('MASTER'):
                                var msTypeId = OPTIONCONTROL.getControlValue("FOption_MasterFilter");
                                var msName = OPTIONCONTROL.getControlText("FOption_MasterFilter");
                                objCell.setCellText(msName);
                                objCell.setCellData("value", msTypeId);
                                break;
                            case MasterDataType.get('BIGNUMBER'):
                                var txtBigNum = document.getElementById("txtBigNumField_MsField");
                                objCell.setCellText(txtBigNum.value.trim());
                                objCell.setCellData("value", txtBigNum.value.trim());
                                break;
                            case MasterDataType.get('EXTERNALTABLE'):
                                var msTypeId = OPTIONCONTROL.getControlValue("FOption_FormFilter");
                                var msName = OPTIONCONTROL.getControlText("FOption_FormFilter");
                                objCell.setCellText(msName);
                                objCell.setCellData("value", msTypeId);
                                break;
                            case MasterDataType.get('SMALLNUMBER'):
                                var txtSmallNum = document.getElementById("txtSmallNumField_MsField");
                                objCell.setCellText(txtSmallNum.value.trim());
                                objCell.setCellData("value", txtSmallNum.value.trim());
                                break;
                            case MasterDataType.get('TINYNUMBER'):
                                var txtTinyNum = document.getElementById("txtTinyNumField_MsField");
                                objCell.setCellText(txtTinyNum.value.trim());
                                objCell.setCellData("value", txtTinyNum.value.trim());
                                break;
                        }
                    }
                }
                else if (cellField.CellData.value == 1) {
                    element = document.getElementById("ddlField_FormFields");
                    var optSelected = $(element).find("option:selected")[0];
                    if (optSelected != null && optSelected != undefined) {
                        objCell.setCellText($(optSelected).text().trim());
                        objCell.setCellData("value", optSelected.value);
                        if (optSelected.dataset.datatype == 12 || optSelected.dataset.datatype == 14 || optSelected.dataset.datatype == 21) {
                            objCell.setCellData("idatatype", optSelected.dataset.datatype);
                        }
                    }
                }
                objCell.processDefault(evt);
            }
            else if (objCell.iColumn == 6) {
                var cellValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellValue.CellData.value == 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 5);
                    var fieldId = cellField.CellData.value;
                    var fieldDetails = $("#ddlField_FormFields option[value='" + fieldId + "']")[0];
                    if (fieldDetails.dataset.datatype == 21) {
                        element = document.getElementById("ddlLinkField_FormFilter");
                        var optSelected = $(element).find("option:selected")[0];
                        if (optSelected != null && optSelected != undefined) {
                            objCell.setCellText($(optSelected).text().trim());
                            objCell.setCellData("value", optSelected.value);
                        }
                    }
                    else if (fieldDetails.dataset.datatype == 12 || fieldDetails.dataset.datatype == 14) {
                        element = document.getElementById("ddlLinkField_MasterFilter");
                        var optSelected = $(element).find("option:selected")[0];
                        if (optSelected != null && optSelected != undefined) {
                            objCell.setCellText($(optSelected).text().trim());
                            objCell.setCellData("value", optSelected.value);
                        }
                    }
                    else {
                        objCell.setCellText("");
                        objCell.setCellData("value", "");
                    }
                }
                else {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                }
                //objCell.processDefault(evt);
            }
            else {
                if (objCell.iColumn == 3 || objCell.iColumn == 4 || objCell.iColumn == 7) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value != undefined && cellField.CellData.value != null && cellField.CellData.value != "") {
                        element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                        var optSelected = $(element).find("option:selected")[0];
                        if (optSelected != null && optSelected != undefined) {
                            objCell.setCellText($(optSelected).text().trim(), optSelected.value);
                            //objCell.setCellData("value", optSelected.value);
                        }
                    }
                    else {
                        document.getElementById("lblErrorMsg_ExtraField").textContent = FORMCUSTOMIZATION.GetResourceMessage("msgSelectFieldfirst"); // "Select Field first
                        COMMON.prototype.showMessage("Select the link Form");
                        $("#lblErrorMsg_ExtraField").hide();
                    }
                }
            }
        }
        return (true);
    },

    ChangeMasterFilterCriteriaCell: function (objCell, event) {
        //////debugger
        if (objCell.bLeave == true) {
            return (FORMCUSTOMIZATION.onMasterFilterCellLeave(objCell, event));
        }
        else {
            FORMCUSTOMIZATION.onMasterFilterCellEnter(objCell, event);
        }

    },
    onMasterFilterCellEnter: function (objCell, evt) {
        debugger;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(objCell.cell);
        if (objCell.iColumn == 1) {
            //return false;
            objCell.processDefault(evt);
        }
        else {
            var hasFieldSelection = false;
            if (document.getElementById("ExtraField_MandatoryFields").value.trim() != "") {
                if (objCell.iColumn != 1 && objCell.iColumn != 2 && objCell.iColumn != 6) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value == undefined || cellField.CellData.value == null || cellField.CellData.value == "") {
                        hasFieldSelection = true;
                    }
                }
            }
            if (hasFieldSelection == true && objCell.iColumn != 2) {
                if (document.getElementById("lblErrorMsg_ExtraField").textContent == "Select Field first") {
                    document.getElementById("lblErrorMsg_ExtraField").textContent = "Select Field first";
                    COMMON.prototype.showMessage("Select the link Form");
                    $("#lblErrorMsg_ExtraField").hide();
                }
                return true;
            }
            if (objCell.iColumn == 5) {
                debugger;
                var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellField.CellData.value == 0) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value != null && cellField.CellData.value != undefined && cellField.CellData.value != "") {
                        var fieldDetails = $("#ddlFilterOnColumn_MasterFilter option[value='" + cellField.CellData.value + "']")[0];
                        //////debugger;
                        switch (parseInt(fieldDetails.dataset.datatype)) {
                            case MasterDataType.get('TEXT'):
                                if ($("#txtTextField_MsField").length <= 0) {
                                    var txtNew = document.createElement("input");
                                    txtNew.type = "text";
                                    txtNew.className = "form-control";
                                    txtNew.placeholder = "value";
                                    txtNew.style.width = "100%";
                                    txtNew.id = "txtTextField_MsField";
                                }
                                else
                                    var txtNew = document.getElementById("txtTextField_MsField");
                                objCell.setControl(txtNew, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('NUMBER'):
                                if ($("#txtNumField_MsField").length <= 0) {
                                    var txtNum = document.createElement("input");
                                    txtNum.type = "text";
                                    txtNum.className = "form-control";
                                    txtNum.placeholder = "value";
                                    txtNum.style.width = "100%";
                                    txtNum.id = "txtNumField_MsField";
                                    txtNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 1, event)");
                                }
                                else
                                    var txtNum = document.getElementById("txtNumField_MsField");
                                objCell.setControl(txtNum, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('BOOLEAN'):
                                if ($("#ddlBoolField_MsField").length <= 0) {
                                    var ddlBool = document.createElement("select");
                                    ddlBool.className = "custom-select";
                                    ddlBool.id = "ddlBoolField_MsField";
                                    ddlBool.style.width = "100%";
                                    var option1 = document.createElement("option");
                                    option1.value = 1;
                                    option1.textContent = "True";
                                    ddlBool.appendChild(option1);
                                    var option2 = document.createElement("option");
                                    option2.value = 0;
                                    option2.textContent = "False";
                                    ddlBool.appendChild(option2);
                                }
                                else
                                    var ddlBool = document.getElementById("ddlBoolField_MsField");
                                objCell.setControl(ddlBool, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('DATETIME'):
                                var element = document.getElementById("fDatePicker_containerDiv");
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('DATE'):
                                var element = document.getElementById("fDatePicker_containerDiv");
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('TIME'):
                                if ($("#txtTimeField_MsField").length <= 0) {
                                    var txtTime = document.createElement("input");
                                    txtTime.type = "text";
                                    txtTime.className = "form-control";
                                    txtTime.placeholder = "value";
                                    txtTime.style.width = "100%";
                                    txtTime.id = "txtTimeField_MsField";
                                }
                                else
                                    var txtTime = document.getElementById("txtTimeField_MsField");
                                $(txtTime).timepicker();
                                objCell.setControl(txtTime, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('FRACTION'):
                                if ($("#txtFloatField_MsField").length <= 0) {
                                    var txtFloat = document.createElement("input");
                                    txtFloat.type = "text";
                                    txtFloat.className = "form-control";
                                    txtFloat.placeholder = "value";
                                    txtFloat.style.width = "100%";
                                    txtFloat.id = "txtFloatField_MsField";
                                    txtFloat.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 3, event)");
                                }
                                else
                                    var txtFloat = document.getElementById("txtFloatField_MsField");
                                objCell.setControl(txtFloat, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('PICTURE'):

                                break;
                            case MasterDataType.get('STRINGLIST'):
                                var opts = fieldDetails.dataset.optvalues.split(',');
                                var newSelect = "<select id='ddlStrListNew_MsField' class='custom-select strListNew' style='width:100%;'>";
                                for (var i = 0; i < opts.length; i++) {
                                    var opt = "<option value='" + opts[i] + "'>" + opts[i] + "</option>";
                                    newSelect += opt;
                                }
                                newSelect += "</select>";
                                var ddlStringList = $($.parseHTML(newSelect));
                                if ($(document).find("#ddlStrListNew_MsField").length > 0) {
                                    $(document).find('#ddlStrListNew_MsField').remove();
                                }
                                objCell.setControl(ddlStringList[0], objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('NUMBERLIST'):
                                var opts = fieldDetails.dataset.optvalues.split(',');
                                var newSelect = "<select id='ddlNumListNew_MsField' class='custom-select numListNew' style='width:100%;'>";
                                for (var i = 0; i < opts.length; i++) {
                                    var pId;
                                    var pName;
                                    if (i % 2 == 0) {
                                        pId = opts[i];
                                    }
                                    if ((i + 1) % 2 != 0) {
                                        pName = opts[i + 1];
                                    }
                                    var opt = "<option value='" + pId + "'>" + pName + "</option>";
                                    newSelect += opt;
                                    i++;
                                }
                                newSelect += "</select>";
                                var ddlNumberList = $($.parseHTML(newSelect));
                                if ($(document).find("#ddlNumListNew_MsField").length > 0) {
                                    $(document).find('#ddlNumListNew_MsField').remove();
                                }
                                objCell.setControl(ddlNumberList[0], objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('DOCUMENTVIEWER'):

                                break;
                            case MasterDataType.get('FORM'):
                                var element = document.getElementById("foptControl_containerDiv");
                                cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 1);
                                var optControl = document.getElementById('FOption_FormFilter');
                                optControl.dataset.Formtypeid = cellChangeValue.CellData.ilinkFormid;
                                optControl.dataset.tablename = "";
                                optControl.dataset.primaryfield = "";
                                optControl.dataset.displayfield = "";
                                optControl.value = "";
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('MASTER'):
                                var element = document.getElementById("foptControl_containerDiv");
                                //cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 1);
                                 cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                                var optControl = document.getElementById('FOption_MasterFilter');
                                optControl.dataset.mastertypeid = cellChangeValue.CellData.ilinkmasterid;
                                optControl.dataset.tablename = "";
                                optControl.dataset.primaryfield = "";
                                optControl.dataset.displayfield = "";
                                optControl.value = "";
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('BIGNUMBER'):
                                if ($("#txtBigNumField_MsField").length <= 0) {
                                    var txtBigNum = document.createElement("input");
                                    txtBigNum.type = "text";
                                    txtBigNum.className = "form-control";
                                    txtBigNum.placeholder = "value";
                                    txtBigNum.style.width = "100%";
                                    txtBigNum.id = "txtBigNumField_MsField";
                                    txtBigNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 0, event)");
                                }
                                else
                                    var txtBigNum = document.getElementById("txtBigNumField_MsField");
                                objCell.setControl(txtBigNum, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('EXTERNALTABLE'):
                                var element = document.getElementById("foptControl_containerDiv");
                                cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 1);
                                var optControl = document.getElementById('FOption_FormFilter');
                                optControl.dataset.Formtypeid = cellChangeValue.CellData.ilinkFormid;
                                optControl.dataset.tablename = cellChangeValue.CellData.stablename;
                                optControl.dataset.primaryfield = cellChangeValue.CellData.svaluemember;
                                optControl.dataset.displayfield = cellChangeValue.CellData.sdisplaymember;
                                optControl.value = "";
                                if (element.style.display == "none") {
                                    element.style.display = "block";
                                }
                                objCell.setControl(element, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('SMALLNUMBER'):
                                if ($("#txtSmallNumField_MsField").length <= 0) {
                                    var txtSmallNum = document.createElement("input");
                                    txtSmallNum.type = "text";
                                    txtSmallNum.className = "form-control";
                                    txtSmallNum.placeholder = "value";
                                    txtSmallNum.style.width = "100%";
                                    txtSmallNum.id = "txtSmallNumField_MsField";
                                    txtSmallNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 0, event)");
                                }
                                else
                                    var txtSmallNum = document.getElementById("txtSmallNumField_MsField");
                                objCell.setControl(txtSmallNum, objCell.getCellData("value"));
                                break;
                            case MasterDataType.get('TINYNUMBER'):
                                if ($("#txtTinyNumField_MsField").length <= 0) {
                                    var txtTinyNum = document.createElement("input");
                                    txtTinyNum.type = "text";
                                    txtTinyNum.className = "form-control";
                                    txtTinyNum.placeholder = "value";
                                    txtTinyNum.style.width = "100%";
                                    txtTinyNum.id = "txtTinyNumField_MsField";
                                    txtTinyNum.setAttribute("onkeypress", "return FORMCUSTOMIZATION.validateInputNumber(this, 0, event)");
                                }
                                else
                                    var txtTinyNum = document.getElementById("txtTinyNumField_MsField");
                                objCell.setControl(txtTinyNum, objCell.getCellData("value"));
                                break;
                        }
                    }
                }
                else if (cellField.CellData.value == 1) {
                    var element = document.getElementById("ddlField_FormFields");
                    objCell.setControl(element, objCell.getCellData("value"));
                    if (element.style.display == "none") {
                        element.style.display = "block";
                    }
                }
                //objCell.processDefault(evt);
            }
            else if (objCell.iColumn == 6) {
                var cellValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellValue.CellData.value == 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 5);
                    var fieldId = cellField.CellData.value;
                    var fieldDetails = $("#ddlField_MasterFields option[value='" + fieldId + "']")[0];
                    if (fieldDetails.dataset.datatype == 21) {
                        var mFields = fieldDetails.dataset.mandatoryfields.split(',');
                        $("#ddlLinkField_MasterFilter").empty();
                        for (var i = 0; i < mFields.length; i++) {
                            $("#ddlLinkField_MasterFilter").append("<option value='" + mFields[i] + "'>" + mFields[i] + "</option>");
                        }
                        var element = document.getElementById("ddlLinkField_MasterFilter");
                        objCell.setControl(element, objCell.getCellData("value"));
                    }
                    else if (fieldDetails.dataset.datatype == 12 || fieldDetails.dataset.datatype == 14) {
                        var mFields = fieldDetails.dataset.mandatoryfields.split(',');
                        $("#ddlLinkField_MasterFilter").empty();
                        for (var i = 0; i < mFields.length; i++) {
                            $("#ddlLinkField_MasterFilter").append("<option value='" + mFields[i] + "'>" + mFields[i] + "</option>");
                        }
                        var element = document.getElementById("ddlLinkField_MasterFilter");
                        objCell.setControl(element, objCell.getCellData("value"));
                    }
                    else {
                        //$("#" + objCell.ColumnAttribute.scontrolid).empty();
                        //element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                        //objCell.setControl(element);
                        objCell.setCellText("");
                        objCell.setCellData("value", "");
                    }
                }
                else {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                    objCell.processDefault(evt);
                }
            }
            else if (objCell.iColumn == 7) {
                var element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                objCell.setControl(element, objCell.getCellData("value"));
                if (element.style.display == "none") {
                    element.style.display = "block";
                }
                if (objCell.iRow > 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, (objCell.iRow - 1), 7);
                    if (cellField.CellData.value != 0) {
                        document.getElementById("lblErrorMsg_ExtraField").textContent = "";
                        COMMON.prototype.showMessage("Select the link Form");
                        $("#lblErrorMsg_ExtraField").hide();
                    }
                }
            }
            else {
                var element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                objCell.setControl(element, objCell.getCellData("value"));
                if (element.style.display == "none") {
                    element.style.display = "block";
                }
            }
        }
    },
    onMasterFilterCellLeave: function (objCell, evt) {
        debugger;
        var element = null;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(objCell.cell);
        if (COMMON.prototype.isValidObject(objCell.ColumnAttribute.scontrolid) == true) {
            if (objCell.iColumn == 1) { objCell.processDefault(evt); }
            else if (objCell.iColumn == 2) {
                var hasPreOnly = false;
                if (objCell.iRow > 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, (objCell.iRow - 1), 7);
                    if (cellField.CellData.value == 0) {
                        hasPreOnly = true;
                    }
                }
                if (hasPreOnly == true) {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                    objCell.setCellData("sFieldName", "");
                    document.getElementById("lblErrorMsg_ExtraField").textContent = FORMCUSTOMIZATION.GetResourceMessage("msgtheaboveConjunctionshouldnotbeONLY"); // "The above Conjunction should not be {ONLY}";
                    COMMON.prototype.showMessage("Select the link Form");
                    $("#lblErrorMsg_ExtraField").hide();
                }
                else {
                    element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                    var optSelected = $(element).find("option:selected")[0];
                    if (optSelected != null && optSelected != undefined) {
                        objCell.setCellText($(optSelected).text().trim());
                        objCell.setCellData("value", optSelected.value);
                        objCell.setCellData("sFieldName", optSelected.dataset.fldname);
                        objCell.setCellData("ilinkMasterid", optSelected.dataset.lnkmasterid);
                    }
                }
            }
            else if (objCell.iColumn == 5) {
                debugger;
                var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellField.CellData.value == 0) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value != null && cellField.CellData.value != undefined) {
                        var fieldDetails = $("#ddlFilterOnColumn_MasterFilter option[value='" + cellField.CellData.value + "']")[0];
                        switch (parseInt(fieldDetails.dataset.datatype)) {
                            case MasterDataType.get('TEXT'):
                                var txtText = document.getElementById("txtTextField_MsField");
                                objCell.setCellText(txtText.value.trim());
                                objCell.setCellData("value", txtText.value.trim());
                                break;
                            case MasterDataType.get('NUMBER'):
                                var txtNum = document.getElementById("txtNumField_MsField");
                                objCell.setCellText(txtNum.value.trim());
                                objCell.setCellData("value", txtNum.value.trim());
                                break;
                            case MasterDataType.get('BOOLEAN'):
                                var ddlBool = document.getElementById("ddlBoolField_MsField");
                                objCell.setCellText($(ddlBool).find("option:selected").text().trim());
                                objCell.setCellData("value", $(ddlBool).find("option:selected").val());
                                break;
                            case MasterDataType.get('DATETIME'):
                                var idateValue = DATEPICKER.getDate('fDatePicker_FormFilter');
                                var sdateText = document.getElementById("fDatePicker_FormFilter").value;
                                objCell.setCellText(sdateText);
                                objCell.setCellData("value", idateValue);
                                break;
                            case MasterDataType.get('DATE'):
                                var idateValue = DATEPICKER.getDate('fDatePicker_FormFilter');
                                var sdateText = document.getElementById("fDatePicker_FormFilter").value;
                                objCell.setCellText(sdateText);
                                objCell.setCellData("value", idateValue);
                                break;
                            case MasterDataType.get('TIME'):
                                var txtTime = document.getElementById("txtTimeField_MsField");
                                objCell.setCellText(txtTime.value.trim());
                                objCell.setCellData("value", txtTime.value.trim());
                                break;
                            case MasterDataType.get('FRACTION'):
                                var txtFloat = document.getElementById("txtFloatField_MsField");
                                objCell.setCellText(txtFloat.value.trim());
                                objCell.setCellData("value", txtFloat.value.trim());
                                break;
                            case MasterDataType.get('PICTURE'):

                                break;
                            case MasterDataType.get('STRINGLIST'):
                                var ddlStrList = document.getElementById("ddlStrListNew_MsField");
                                objCell.setCellText($(ddlStrList).find("option:selected").text().trim());
                                objCell.setCellData("value", $(ddlStrList).find("option:selected").val());
                                objCell.setCellData("sFieldName", $(ddlStrList).find("option:selected").text().trim());
                                break;
                            case MasterDataType.get('NUMBERLIST'):
                                var ddlNumList = document.getElementById("ddlNumListNew_MsField");
                                objCell.setCellText($(ddlNumList).find("option:selected").text().trim());
                                objCell.setCellData("value", $(ddlNumList).find("option:selected").val());
                                objCell.setCellData("sFieldName", $(ddlNumList).find("option:selected").text().trim());
                                break;
                            case MasterDataType.get('DOCUMENTVIEWER'):

                                break;
                            case MasterDataType.get('FORM'):
                                var msTypeId = OPTIONCONTROL.getControlValue("FOption_FormFilter");
                                var msName = OPTIONCONTROL.getControlText("FOption_FormFilter");
                                objCell.setCellText(msName);
                                objCell.setCellData("value", msTypeId);
                                break;
                            case MasterDataType.get('MASTER'):
                                var msTypeId = OPTIONCONTROL.getControlValue("FOption_MasterFilter");
                                var msName = OPTIONCONTROL.getControlText("FOption_MasterFilter");
                                objCell.setCellText(msName);
                                objCell.setCellData("value", msTypeId);
                                break;
                            case MasterDataType.get('BIGNUMBER'):
                                var txtBigNum = document.getElementById("txtBigNumField_MsField");
                                objCell.setCellText(txtBigNum.value.trim());
                                objCell.setCellData("value", txtBigNum.value.trim());
                                break;
                            case MasterDataType.get('EXTERNALTABLE'):
                                var msTypeId = OPTIONCONTROL.getControlValue("FOption_FormFilter");
                                var msName = OPTIONCONTROL.getControlText("FOption_FormFilter");
                                objCell.setCellText(msName);
                                objCell.setCellData("value", msTypeId);
                                break;
                            case MasterDataType.get('SMALLNUMBER'):
                                var txtSmallNum = document.getElementById("txtSmallNumField_MsField");
                                objCell.setCellText(txtSmallNum.value.trim());
                                objCell.setCellData("value", txtSmallNum.value.trim());
                                break;
                            case MasterDataType.get('TINYNUMBER'):
                                var txtTinyNum = document.getElementById("txtTinyNumField_MsField");
                                objCell.setCellText(txtTinyNum.value.trim());
                                objCell.setCellData("value", txtTinyNum.value.trim());
                                break;
                        }
                    }
                }
                else if (cellField.CellData.value == 1) {
                    element = document.getElementById("ddlField_MasterFields");
                    var optSelected = $(element).find("option:selected")[0];
                    if (optSelected != null && optSelected != undefined) {
                        objCell.setCellText($(optSelected).text().trim());
                        objCell.setCellData("value", optSelected.value);
                        if (optSelected.dataset.datatype == 12 || optSelected.dataset.datatype == 14 || optSelected.dataset.datatype == 21) {
                            objCell.setCellData("idatatype", optSelected.dataset.datatype);
                        }
                    }
                }
                objCell.processDefault(evt);
            }
            else if (objCell.iColumn == 6) {
                var cellValue = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 4);
                if (cellValue.CellData.value == 1) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 5);
                    var fieldId = cellField.CellData.value;
                    var fieldDetails = $("#ddlField_MasterFields option[value='" + fieldId + "']")[0];
                    if (fieldDetails.dataset.datatype == 21) {
                        element = document.getElementById("ddlLinkField_FormFilter");
                        var optSelected = $(element).find("option:selected")[0];
                        if (optSelected != null && optSelected != undefined) {
                            objCell.setCellText($(optSelected).text().trim());
                            objCell.setCellData("value", optSelected.value);
                        }
                    }
                    else if (fieldDetails.dataset.datatype == 12 || fieldDetails.dataset.datatype == 14) {
                        element = document.getElementById("ddlLinkField_MasterFilter");
                        var optSelected = $(element).find("option:selected")[0];
                        if (optSelected != null && optSelected != undefined) {
                            objCell.setCellText($(optSelected).text().trim());
                            objCell.setCellData("value", optSelected.value);
                        }
                    }
                    else {
                        objCell.setCellText("");
                        objCell.setCellData("value", "");
                    }
                }
                else {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                }
                //objCell.processDefault(evt);
            }
            else {
                if (objCell.iColumn == 3 || objCell.iColumn == 4 || objCell.iColumn == 7) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                    if (cellField.CellData.value != undefined && cellField.CellData.value != null && cellField.CellData.value != "") {
                        element = document.getElementById(objCell.ColumnAttribute.scontrolid);
                        var optSelected = $(element).find("option:selected")[0];
                        if (optSelected != null && optSelected != undefined) {
                            objCell.setCellText($(optSelected).text().trim(), optSelected.value);
                            //objCell.setCellData("value", optSelected.value);
                        }
                    }
                    else {
                        document.getElementById("lblErrorMsg_ExtraField").textContent = FORMCUSTOMIZATION.GetResourceMessage("msgSelectFieldfirst"); // "Select Field first
                        COMMON.prototype.showMessage("Select the link Form");
                        $("#lblErrorMsg_ExtraField").hide();
                    }
                }
            }
        }
        return (true);
    },

    HasFilterCriteria: function () {
        ////debugger;
        var bHasFilter = false;
        try {
            var iTotalRows = FGRIDCONTROL.getTotalRows("tblFilterCriteria_FormField");
            for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
                var gridRowData = FGRIDCONTROL.getRowValue("tblFilterCriteria_FormField", iRowIndex);
                if (gridRowData[1].Value != null && gridRowData[1].Text.trim() != "" && gridRowData[3].Value != null) {
                    bHasFilter = true;
                }
            }
        } catch (e) {
            bHasFilter = false;
        }
        return bHasFilter;
    },
    HasMultipleOnlyConjunction_FilterCriteria: function () {
        var isDuplicateExist = false;
        try {
            var iTotalRows = FGRIDCONTROL.getTotalRows("tblFilterCriteria_FormField");
            var arrConjunction = "";
            for (var i = 0; i < iTotalRows; i++) {
                var cell = FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", (i + 1), 7);
                if (cell.CellData.value != null && cell.CellData.value != undefined) {
                    if (cell.CellData.value == 0) {
                        arrConjunction += cell.CellData.value + ",";
                    }
                }
            }
            ////debugger;
            arrConjunction = arrConjunction.substring(0, (arrConjunction.lastIndexOf(',')));
            arrConjunction = FORMCUSTOMIZATION.Find_duplicates(arrConjunction.split(','));
            if (arrConjunction.length > 0) {
                isDuplicateExist = true;
            }
            return isDuplicateExist;
        } catch (e) {
            return true
        }
    },
    IsOnlyConjunctionInLast: function () {
        var iTotalRows = FGRIDCONTROL.getTotalRows("tblFilterCriteria_FormField");
        var arrOnly = "";
        var bIsLast = false;
        try {
            for (var i = 0; i < iTotalRows; i++) {
                var cell = FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", (i + 1), 7);
                if ($(cell.cell).find("select").length > 0) {
                    if ($(cell.cell).find("select").val() != null && $(cell.cell).find("select").val() != undefined && $(cell.cell).find("select").val() !== "") {
                        arrOnly += $(cell.cell).find("select").val() + ",";
                    }
                }
                else {
                    if (cell.CellData.value != null && cell.CellData.value != undefined && cell.CellData.value !== "") {
                        arrOnly += cell.CellData.value + ",";
                    }
                }
            }
            arrOnly = (arrOnly.substring(0, (arrOnly.lastIndexOf(',')))).split(',');
            var LastConjunction = parseInt(arrOnly[arrOnly.length - 1]);
            if (LastConjunction == 0) {
                bIsLast = true;
            }
        } catch (e) {
            bIsLast = false;
        }
        return bIsLast;
    },
    GetFilterCriteriaData: function () {
        ////debugger;
        var arrFilters = [];
        try {
            if (FORMCUSTOMIZATION.HasFilterCriteria()) {
                if (!FORMCUSTOMIZATION.HasMultipleOnlyConjunction_FilterCriteria()) {
                    ////debugger;
                    if (FORMCUSTOMIZATION.IsOnlyConjunctionInLast()) {
                        var iTotalRows = FGRIDCONTROL.getTotalRows("tblFilterCriteria_FormField");
                        for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
                            var gridRowData = FGRIDCONTROL.getRowValue("tblFilterCriteria_FormField", iRowIndex);
                            //////debugger;
                            if (gridRowData[1].Value != null && gridRowData[1].Text.trim() != "" && gridRowData[3].Value != null) {
                                var ValueOrLink = "";
                                var filterField = 0;
                                if (gridRowData[3].Value == 0) {
                                    ValueOrLink = gridRowData[4].Value;
                                }
                                else if (gridRowData[3].Value == 1) {
                                    filterField = gridRowData[4].Value;
                                    if (gridRowData[4].Data.idatatype == 12 || gridRowData[4].Data.idatatype == 14 || gridRowData[4].Data.idatatype == 21) {
                                        ValueOrLink = gridRowData[5].Value;
                                    }
                                }
                                var rowData = {
                                    CompareWith: gridRowData[3].Value,
                                    Conjunction: gridRowData[6].Value,
                                    FilterField: "",
                                    FilterFieldID: filterField,
                                    FilterOnColumn: gridRowData[1].Data.sfieldname,
                                    //FilterOnColumn: gridRowData[1].Text,
                                    FilterOnColumnValue: gridRowData[1].Value,
                                    LinkField: ValueOrLink,
                                    OldFilterFieldID: "",
                                    OldFilterOnColumnValue: "",
                                    Operator: "",
                                    OperatorID: gridRowData[2].Value,
                                }
                                arrFilters.push(rowData);
                            }
                        }
                    }
                    else {
                        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msginConjunctioncolumnONLYshouldcomeinlastrow"));
                        //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msginConjunctioncolumnONLYshouldcomeinlastrow"));// "In Conjunction column [ONLY] should come in last row"
                        return false;
                    }
                }
                else {
                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msginConjunctioncolumnONLYshouldcomeonce"));
                    //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msginConjunctioncolumnONLYshouldcomeonce")); // "In Conjunction column [ONLY] should come once"
                    return false;
                }
            }
        } catch (e) {
            COMMON.prototype.showMessage(e.message);
            //FORMCUSTOMIZATION.ShowAlertMessage(e.message);
        }
        arrFilters = (arrFilters.length > 0) ? arrFilters : null;
        return arrFilters;
    },
    SetFormFilterCriteriaData: function (arrFilters) {
        debugger;
        if (arrFilters != null && arrFilters != undefined) {
            for (var i = 0; i < arrFilters.length; i++) {
                for (var j = 1; j <= 7; j++) {
                    var cell = FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", (i + 1), j);
                    switch (j) {
                        case 1:
                            //var icon = document.createElement("SPAN");
                            //icon.className = "icon-close7 icon-font9 deleteField";
                            //icon.style.cursor = "pointer";
                            //icon.setAttribute("onclick", "FORMCUSTOMIZATION.ClearFilterRowData(this)");
                            //icon.setAttribute("data-rowid", cell.iRow);
                            //FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", (i + 1), 1).cell.appendChild(icon);
                            break;
                        case 2:
                            debugger;
                            var ddlFilterOnColumn = document.getElementById("ddlFilterOnColumn_FormFilter");
                            $(ddlFilterOnColumn).val(arrFilters[i].FilterOnColumnValue);
                            cell.setCellText($(ddlFilterOnColumn).find("option:selected").text()); //FilterOnColumn => fldName
                            cell.setCellData("value", arrFilters[i].FilterOnColumnValue);
                            cell.setCellData("sFieldName", arrFilters[i].FilterOnColumn);
                            break;
                        case 3:
                            var ddlOperator = document.getElementById("ddlOperators_FormFilter");
                            $(ddlOperator).val(arrFilters[i].OperatorID);
                            cell.setCellText($(ddlOperator).find("option:selected").text());
                            cell.setCellData("value", arrFilters[i].OperatorID);
                            break;
                        case 4:
                            var ddlCompareWith = document.getElementById("ddlCompareWith_FormFilter");
                            $(ddlCompareWith).val(arrFilters[i].CompareWith);
                            cell.setCellText($(ddlCompareWith).find("option:selected").text());
                            cell.setCellData("value", arrFilters[i].CompareWith);
                            break;
                        case 5:
                            ////debugger;
                            if (arrFilters[i].CompareWith == 0) {
                                var fld = $("#ddlFilterOnColumn_FormFilter option[value='" + arrFilters[i].FilterOnColumnValue + "']");
                                if (fld[0].dataset.datatype == 8) {
                                    var opts = fld[0].dataset.optvalues.split(',');
                                    var newSelect = "<select id='ddlStrListNew_MsField' class='custom-select' style='width:100%;'>";
                                    for (var n = 0; n < opts.length; n++) {
                                        var opt = "<option value='" + opts[n] + "'>" + opts[n] + "</option>";
                                        newSelect += opt;
                                    }
                                    newSelect += "</select>";
                                    if ($(document).find("#ddlStrListNew_MsField").length > 0) {
                                        $(document).find('#ddlStrListNew_MsField').remove();
                                    }
                                    var ddlStringList = $($.parseHTML(newSelect));
                                    cell.setCellText($(newSelect).find("option[value='" + arrFilters[i].LinkField + "']").text());
                                    cell.setCellData("value", arrFilters[i].LinkField);
                                }
                                else if (fld[0].dataset.datatype == 9) {
                                    var opts = fld[0].dataset.optvalues.split(',');
                                    var newSelect = "<select id='ddlNumListNew_MsField' class='custom-select' style='width:100%;'>";
                                    for (var n = 0; n < opts.length; n++) {
                                        var pId;
                                        var pName;
                                        if (n % 2 == 0) {
                                            pId = opts[n];
                                        }
                                        if ((n + 1) % 2 != 0) {
                                            pName = opts[n + 1];
                                        }
                                        var opt = "<option value='" + pId + "'>" + pName + "</option>";
                                        newSelect += opt;
                                        n++;
                                    }
                                    newSelect += "</select>";
                                    if ($(document).find("#ddlNumListNew_MsField").length > 0) {
                                        $(document).find('#ddlNumListNew_MsField').remove();
                                    }
                                    var ddlNumberList = $($.parseHTML(newSelect));
                                    cell.setCellText($(newSelect).find("option[value='" + arrFilters[i].LinkField + "']").text());
                                    cell.setCellData("value", arrFilters[i].LinkField);
                                }
                                else {
                                    cell.setCellText(arrFilters[i].LinkField);
                                    cell.setCellData("value", arrFilters[i].LinkField);
                                }
                            }
                            else {
                                var fld = $("#ddlField_FormFields option[value='" + arrFilters[i].FilterFieldID + "']");
                                cell.setCellText($(fld).text().trim());
                                cell.setCellData("value", $(fld).val());
                                if (fld[0].dataset.datatype == 12 || fld[0].dataset.datatype == 14 || fld[0].dataset.datatype == 21) {
                                    cell.setCellData("idatatype", fld[0].dataset.datatype);
                                }
                            }
                            break;
                        case 6:
                            if (arrFilters[i].CompareWith == 1) {
                                cell.setCellText(arrFilters[i].LinkField);
                                cell.setCellData("value", arrFilters[i].LinkField);
                            }
                            break;
                        case 7:
                            var ddlConjunction = document.getElementById("ddlCunjunction_FormFilter");
                            $(ddlConjunction).val(arrFilters[i].Conjunction);
                            cell.setCellText($(ddlConjunction).find("option:selected").text());
                            cell.setCellData("value", arrFilters[i].Conjunction);
                            break;
                    }
                }
            }
        }

        var iTotalRows = FGRIDCONTROL.getTotalRows("tblFilterCriteria_FormField");
        for (var i = 1; i <= iTotalRows; i++) {
            var icon = document.createElement("SPAN");
            icon.className = "icon-close icon-font9 deleteField";
            icon.style.cursor = "pointer";
            icon.style.paddingLeft = "3px";
            icon.setAttribute("onclick", "FORMCUSTOMIZATION.ClearFilterRowData(this)");
            icon.setAttribute("data-rowid", i);
            var FirstCell = FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", i, 1).cell;
            while (FirstCell.hasChildNodes()) {
                FirstCell.removeChild(FirstCell.firstChild);
            }
            FirstCell.appendChild(icon);
        }
    },
    SetFilterCondition: function (arrFilters) {
        //debugger;
        FilterConditions = arrFilters;
    },
    ClearFilterRowData: function (ele) {
        ////debugger;
        //var arrContainerDataAttribute = [];
        //arrContainerDataAttribute.push({});
        //var iTotalColumns = FGRIDCONTROL.getTotalColumns("tblFilterCriteria_FormField");
        //for (iCounter = 1; iCounter <= iTotalColumns; iCounter++) {
        //    obj = FGRIDCONTROL.getContainerDataObject("tblFilterCriteria_FormField", iCounter);
        //    arrContainerDataAttribute.push(obj);
        //}
        //var eleRow = FGRIDCONTROL.getRowElement("tblFilterCriteria_FormField", ele.dataset.rowid);
        //FGRIDCONTROL.resetRowValue(eleRow, arrContainerDataAttribute, true);
        FGRIDCONTROL.clearRowData("tblFilterCriteria_FormField", ele.dataset.rowid, true);

        //var icon = document.createElement("SPAN");
        //icon.className = "icon-close icon-font9 deleteField";
        //icon.style.cursor = "pointer";
        //icon.style.paddingLeft = "3px";
        //icon.setAttribute("onclick", "FORMCUSTOMIZATION.ClearFilterRowData(this)");
        //icon.setAttribute("data-rowid", ele.dataset.rowid);
        //FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", ele.dataset.rowid, 1).cell.appendChild(icon);
    },

    ///..... Old Methods for Filter Form Condition..........
    Bind_ddl_FilterCriteria: function (ele, tableOrFormId) {
        ////debugger;
        if (document.getElementById(tableOrFormId).value.trim() != "") {
            if (document.getElementById("ExtraField_MandatoryFields").value.trim() != "") {
                var ddl = document.getElementById("ddlFilterOnColumn");
                $(ele.parentElement).append(ddl);
                ele.style.display = "none";
                ddl.style.display = "block";
                if (ele.value.trim() != "") {
                    var fVal = ele.dataset.fieldid.trim();
                    $("#ddlFilterOnColumn").val(fVal);
                }
                else
                    $("#ddlFilterOnColumn")[0].selectedIndex = 0;
                ddl.focus();
            }
            else
                document.getElementById("lblErrorMsg_ExtraField").textContent = FORMCUSTOMIZATION.GetResourceMessage("msgSelecttheManadatoryField"); // "Select the Mandatory Fields";
            COMMON.prototype.showMessage("Select the link Form");
            $("#lblErrorMsg_ExtraField").hide();
        }
        else {
            if (tableOrFormId == "ExtraField_FormToLink") {
                document.getElementById("lblErrorMsg_ExtraField").textContent = "Select the Link Form";
                COMMON.prototype.showMessage("Select the link Form");
                $("#lblErrorMsg_ExtraField").hide();
            }
            else
                document.getElementById("lblErrorMsg_ExtraField").textContent = "Enter Table name first";
            COMMON.prototype.showMessage("Select the link Form");
            $("#lblErrorMsg_ExtraField").hide();
        }
    },
    Hide_ddl_FilterCriteria: function (ele) {
        ele.previousElementSibling.value = ele.options[ele.selectedIndex].text.trim();
        ele.previousElementSibling.dataset.fieldid = ele.options[ele.selectedIndex].value.trim();
        ele.previousElementSibling.dataset.filterdatatype = ele.options[ele.selectedIndex].dataset.datatype;
        ele.previousElementSibling.dataset.lnkFormid = ele.options[ele.selectedIndex].dataset.lnkFormid;
        ele.previousElementSibling.dataset.filtercolumn = ele.options[ele.selectedIndex].dataset.fldname;
        if (ele.options[ele.selectedIndex].dataset.datatype.trim() == "14") {
            ////debugger;
            ele.previousElementSibling.dataset.tblname = ele.options[ele.selectedIndex].dataset.ftablename;
            ele.previousElementSibling.dataset.displayfield = ele.options[ele.selectedIndex].dataset.fdisplayfield;
            ele.previousElementSibling.dataset.valuefield = ele.options[ele.selectedIndex].dataset.fvaluefield;
        }
        else {
            ele.previousElementSibling.dataset.tblname = "";
            ele.previousElementSibling.dataset.displayfield = "";
            ele.previousElementSibling.dataset.valuefield = "";
        }
        ele.previousElementSibling.style.display = "block";
        ele.style.display = "none";
        document.getElementById("lblErrorMsg_ExtraField").textContent = "";
        COMMON.prototype.showMessage("Select the link Form");
        $("#lblErrorMsg_ExtraField").hide();
    },
    Hide_ddl_FilterField: function (ele) {
        ////debugger;
        var eleParent = ele.parentElement;
        eleParent.children[0].value = ele.options[ele.selectedIndex].text.trim();
        //eleParent.children[0].dataset.filterfield = ele.options[ele.selectedIndex].value.trim();
        eleParent.children[0].dataset.filterfield = ele.options[ele.selectedIndex].text.trim();
        eleParent.children[0].dataset.filterfieldid = ele.options[ele.selectedIndex].value.trim();
        eleParent.children[0].style.display = "block";
        ele.style.display = "none";
        document.getElementById("lblErrorMsg_ExtraField").textContent = "";
        COMMON.prototype.showMessage("Select the link Form");
        $("#lblErrorMsg_ExtraField").hide();
    },
    Hide_optControl: function (ele) {
        ////debugger;
        var optDiv = document.getElementById("foptControl_containerDiv");
        var txtInput = $(optDiv).parent().find('input')[0];
        txtInput.value = ele.value.trim();
        txtInput.dataset.filterfield = OPTIONCONTROL.getControlValue('optFilter_FilterForm');
        txtInput.style.display = "block";
        optDiv.style.display = "none";
    },
    Hide_ddl_FilterOpt: function (ele) {
        ////debugger;
        var txtField = $(ele).parent().find('input')[0];
        txtField.value = ele.options[ele.selectedIndex].text.trim();
        txtField.dataset.filterfield = ele.options[ele.selectedIndex].value.trim();
        txtField.dataset.linkfield = ele.options[ele.selectedIndex].value.trim();
        ele.style.display = "none";
        txtField.style.display = "block";
    },

    showFieldOrValue: function (ele, evt) {
        ////debugger;
        var ddlCompare = ele.parentElement.parentElement.children[2].children[0];
        var valOrFld = ddlCompare.options[ddlCompare.selectedIndex].value;
        if (valOrFld == 0) {
            var filterOnCriteria = ele.parentElement.parentElement.children[0].children[0];
            if (filterOnCriteria.dataset.filterdatatype == 4) {
                // get datepicker
                var fdatepicker = document.getElementById("fDatePicker_containerDiv");
                $(ele.parentElement).append(fdatepicker);
                fdatepicker.style.display = "block";
                ele.style.display = "none";
            }
            else if (filterOnCriteria.dataset.filterdatatype == 8) {
                var ddlFielterOnCol = document.getElementById("ddlFilterOnColumn");
                var ddlFilterVals = $('#ddlFilterOnColumn option[value="' + filterOnCriteria.dataset.fieldid + '"]')[0];
                var opts = ddlFilterVals.dataset.optvalues.split(',');
                var newSelect = "<select class='custom-select dynFilterOpt' onblur='FORMCUSTOMIZATION.Hide_ddl_FilterOpt(this)'>";
                for (var i = 0; i < opts.length; i++) {
                    var pName;
                    pName = opts[i];
                    var opt = "<option value='" + i + "'>" + pName + "</option>";
                    newSelect += opt;
                }
                newSelect += "</select>";
                if ($(ele.parentElement).find('select').length > 0) {
                    $(ele.parentElement).find('select').remove();
                }
                $(ele.parentElement).append(newSelect);
                ele.parentElement.children[1].focus();
                ele.style.display = "none";
            }
            else if (filterOnCriteria.dataset.filterdatatype == 9) {
                var ddlFielterOnCol = document.getElementById("ddlFilterOnColumn");
                var ddlFilterVals = $('#ddlFilterOnColumn option[value="' + filterOnCriteria.dataset.fieldid + '"]')[0];
                var opts = ddlFilterVals.dataset.optvalues.split(',');
                var newSelect = "<select class='custom-select dynFilterOpt' onblur='FORMCUSTOMIZATION.Hide_ddl_FilterOpt(this)'>";
                for (var i = 0; i < opts.length; i++) {
                    var pId;
                    var pName;
                    if (i % 2 == 0) {
                        pId = opts[i];
                    }
                    if ((i + 1) % 2 != 0) {
                        pName = opts[i + 1];
                    }
                    var opt = "<option value='" + pId + "'>" + pName + "</option>";
                    newSelect += opt;
                    i++;
                }
                newSelect += "</select>";
                ////debugger;
                if ($(ele.parentElement).find('select').length > 0) {
                    $(ele.parentElement).find('select').remove();
                }
                $(ele.parentElement).append(newSelect);
                ele.parentElement.children[1].focus();
                ele.style.display = "none";
            }
            else if (filterOnCriteria.dataset.filterdatatype == 21) {
                // get OptionControl
                var optControl_div = document.getElementById("foptControl_containerDiv");
                var optControl = document.getElementById('optFilter_FilterForm');
                optControl.dataset.Formtypeid = filterOnCriteria.dataset.lnkFormid;
                optControl.dataset.tablename = "";
                optControl.dataset.primaryfield = "";
                optControl.dataset.displayfield = "";
                optControl.value = "";
                $(ele.parentElement).append(optControl_div);
                ele.style.display = "none";
                optControl_div.style.display = "block";
                evt.stopPropagation();
            }
            else if (filterOnCriteria.dataset.filterdatatype == 12) {
                // get OptionControl
                var optControl_div = document.getElementById("foptControl_containerDiv");
                var optControl = document.getElementById('optFilter_FilterMaster');
                optControl.dataset.mastertypeid = filterOnCriteria.dataset.lnkmasterid;
                optControl.dataset.tablename = "";
                optControl.dataset.primaryfield = "";
                optControl.dataset.displayfield = "";
                optControl.value = "";
                $(ele.parentElement).append(optControl_div);
                ele.style.display = "none";
                optControl_div.style.display = "block";
                evt.stopPropagation();
            }
            else if (filterOnCriteria.dataset.filterdatatype == 14) {
                // get OptionControl for ExternalTable
                var optControl_div = document.getElementById("foptControl_containerDiv");
                var optControl = document.getElementById('optFilter_FilterMaster');
                optControl.dataset.mastertypeid = 0;
                optControl.dataset.tablename = ele.dataset.ftablename.trim();
                optControl.dataset.primaryfield = ele.dataset.fvaluefield.trim();
                optControl.dataset.displayfield = ele.dataset.fdisplayfield.trim();
                $(ele.parentElement).append(optControl_div);
                ele.style.display = "none";
                optControl_div.style.display = "block";
            }
            else {
                ele.readOnly = false;
                ele.style.display = "block";
                ele.focus();
            }
        }
        else if (valOrFld == 1) {
            var ddlFields = document.getElementById("ddlFilterOnColumn");
            $(ele.parentElement).append(ddlFields);
            if (ele.value.trim() != "") {
                var fVal = ele.dataset.filterfield.trim();
                $("#ddlFilterOnColumn").val(fVal);
            }
            else
                $("#ddlFilterOnColumn")[0].selectedIndex = 0;
            ddlFields.style.display = "block";
            ddlFields.focus();
            ele.readOnly = true;
            ele.style.display = "none";
        }
        else {
            document.getElementById("lblErrorMsg_ExtraField").textContent = "Select compare field first";
            COMMON.prototype.showMessage("Select the link Form");
            $("#lblErrorMsg_ExtraField").hide();
        }
    },
    hideFieldOrValue: function (ele) {
        //////debugger;
        ele.readOnly = true;
        ele.dataset.filterfield = ele.value;

    },
    showLinkField: function (ele) {
        ////debugger;
        ele.readOnly = false;
    },
    hideLinkField: function (ele) {
        ele.readOnly = true;
    },
    setEmptyFieldOrValue: function (ele) {
        ele.parentElement.parentElement.children[3].children[0].value = "";
    },
    SetFilterCriteriaField: function () {
        //ddlFilterOnColumn  //tblFilterCriteria_FormField
       debugger;
        var FilterCriteriaTable = document.getElementById("tblFilterCriteria_FormField");
        var allTr = FilterCriteriaTable.tBodies[0].children;
        var ddlFilterField = document.getElementById("ddlFilterOnColumn");
        for (var i = 0; i < allTr.length; i++) {
            var filterOnClumn = allTr[i].children[0].children[0];
            if (filterOnClumn.value.trim() != "") {
                var opt = $(ddlFilterField).find('option[value="' + filterOnClumn.dataset.fieldid.trim() + '"]');

                if (opt[0].dataset.datatype.trim() == 9) {
                    filterOnClumn.value = opt.text().trim();
                }
                else if (opt[0].dataset.datatype.trim() == 14) {
                    filterOnClumn.value = opt.text().trim();
                    allTr[i].children[3].children[0].dataset.ftablename = opt[0].dataset.ftablename.trim();
                    allTr[i].children[3].children[0].dataset.fvaluefield = opt[0].dataset.fvaluefield.trim();
                    allTr[i].children[3].children[0].dataset.fdisplayfield = opt[0].dataset.fdisplayfield.trim();
                }
                else {
                    filterOnClumn.value = opt.text().trim();
                }
                filterOnClumn.dataset.filterdatatype = opt[0].dataset.datatype.trim();
                ////debugger;
                /// to set the Filter Field Name (On Edit Mode)
                var ddlFldOrVal = allTr[i].children[2].children[0];
                var fieldOrVal = ddlFldOrVal.options[ddlFldOrVal.selectedIndex].value;
                if (fieldOrVal == 1) {
                    var fldName = $('#ddlFormFields option[value="' + allTr[i].children[3].children[0].dataset.filterfieldid.trim() + '"]').text();
                    allTr[i].children[3].children[0].value = fldName;
                    allTr[i].children[3].children[0].dataset.filterfield = fldName;
                }
                else {
                    if (opt[0].dataset.datatype.trim() == 9) {
                        var arrVals = opt[0].dataset.optvalues.split(",");
                        for (var j = 0; j < arrVals.length; j++) {
                            if (arrVals[j].trim() == allTr[i].children[3].children[0].value.trim()) {
                                allTr[i].children[3].children[0].value = arrVals[j + 1];
                            }
                            j++;
                        }
                    }
                }
            }
        }

    },

    ///..... Old Methods for Incremental Condition..........
    Bind_ddl_IncType: function (ele) {
        ////debugger
        var ddlIncType = document.getElementById("ddlIncremental_Type");
        $(ele.parentElement).append(ddlIncType);
        ele.style.display = "none";
        ddlIncType.style.display = "block";
        if (ele.value.trim() != "") {
            var iVal = ele.dataset.itypeid.trim();
            $("#ddlIncremental_Type").val(iVal);
        }
        else
            $("#ddlIncremental_Type")[0].selectedIndex = 0;
        ddlIncType.focus();
    },
    Hide_ddl_IncType: function (ele) {
        var txtFld = $(ele).parent().find('input')[0];
        txtFld.value = ele.options[ele.selectedIndex].text.trim();
        txtFld.dataset.itypeid = ele.options[ele.selectedIndex].value.trim();
        ele.style.display = "none";
        txtFld.style.display = "block";
    },
    SetEmptyIncValue: function (ele) {
        ele.parentElement.parentElement.children[1].children[0].value = "";
    },
    Bind_ddl_IncValue: function (ele) {
        ////debugger
        var typeId = ele.parentElement.parentElement.children[0].children[0].dataset.itypeid;
        if (typeId == 0) {
            var ddlMFields = document.getElementById("ddlFormFields");
            $(ele.parentElement).append(ddlMFields);
            ele.style.display = "none";
            ddlMFields.style.display = "block";
            if (ele.value.trim() != "") {
                var iVal = ele.dataset.filterfield.trim();
                $("#ddlFormFields").val(iVal);
            }
            else
                $("#ddlFormFields")[0].selectedIndex = 0;
            ddlMFields.focus();
        }
        else if (typeId == 1) {
            var ddlLogin = document.getElementById("ddlIncremental_LoginValue");
            $(ele.parentElement).append(ddlLogin);
            ele.style.display = "none";
            ddlLogin.style.display = "block";
            if (ele.value.trim() != "") {
                var iVal = ele.dataset.ivalueid.trim();
                $("#ddlIncremental_LoginValue").val(iVal);
            }
            else
                $("#ddlIncremental_LoginValue")[0].selectedIndex = 0;
            ddlLogin.focus();
        }
        else if (typeId == 2) {
            var ddlChars = document.getElementById("ddlIncremental_Characters");
            $(ele.parentElement).append(ddlChars);
            ele.style.display = "none";
            ddlChars.style.display = "block";
            if (ele.value.trim() != "") {
                var iVal = ele.dataset.ivalueid.trim();
                $("#ddlIncremental_Characters").val(iVal);
            }
            else
                $("#ddlIncremental_Characters")[0].selectedIndex = 0;
            ddlChars.focus();
        }
        else if (typeId == 3) {
            var ddlDate = document.getElementById("ddlIncremental_DateType");
            $(ele.parentElement).append(ddlDate);
            ele.style.display = "none";
            ddlDate.style.display = "block";
            if (ele.value.trim() != "") {
                var iVal = ele.dataset.ivalueid.trim();
                $("#ddlIncremental_DateType").val(iVal);
            }
            else
                $("#ddlIncremental_DateType")[0].selectedIndex = 0;
            ddlDate.focus();
        }
        else if (typeId == 4 || typeId == 5) {
            ele.value = "";
            ele.readOnly = false;
        }
        else {
            ele.value = "";
            ele.readOnly = false;
        }
    },
    Hide_ddl_IncValue: function (ele) {
        var txtFld = $(ele).parent().find('input')[0];
        txtFld.value = ele.options[ele.selectedIndex].text.trim();
        ele.style.display = "none";
        txtFld.style.display = "block";
    },
    Hide_ddl_LoginVal: function (ele) {
        var txtFld = $(ele).parent().find('input')[0];
        txtFld.value = ele.options[ele.selectedIndex].text.trim();
        ele.style.display = "none";
        txtFld.style.display = "block";
    },
    Hide_ddl_Chars: function (ele) {
        var txtFld = $(ele).parent().find('input')[0];
        txtFld.value = ele.options[ele.selectedIndex].text.trim();
        ele.style.display = "none";
        txtFld.style.display = "block";
    },
    Hide_ddl_DateType: function (ele) {
        var txtFld = $(ele).parent().find('input')[0];
        txtFld.value = ele.options[ele.selectedIndex].text.trim();
        ele.style.display = "none";
        txtFld.style.display = "block";
    },
    ShowStartingChar: function (ele) {
        ele.readOnly = false;
    },
    HideStartingChar: function (ele) {
        ele.readOnly = true;
    },
    ShowNoOfChar: function (ele) {
        ele.readOnly = false;
    },
    HideNoOfChar: function (ele) {
        ////debugger;
        var txtStartingChar = ele.parentElement.parentElement.children[3].children[0].value.trim();
        if (txtStartingChar != "") {
            if (parseInt(txtStartingChar) < parseInt(ele.value.trim())) {
                ele.readOnly = true;
            }
            else {
                alert("Start Position should less than No of characters");
                ele.value = "";
                ele.focus();
            }
        }
    },

    GetRegExPopup: function () {
        var urlPath = GLOBAL.getContextPath("RegularExpression_ExtraField", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, null, "HTML", true, "FORMCUSTOMIZATION.ShowRegExPopup");
    },
    ShowRegExPopup: function (bSuccess, data) {
        //debugger;
        if (bSuccess && data != "") {
            $("#RegExPopup_div_ExtraField").html(data);
            $("#RegularExpressions_ExtraField").modal("show");
            document.getElementById("txtRExpression_RExp").value = document.getElementById("ExtraField_RegularExpression").value;
        }
    },

    AddNewRow_IncBehaviour: function (eleTr) {
        ////debugger;
        var trCount = eleTr.parentElement.children.length;
        var currentIndex = eleTr.rowIndex;
        if (trCount == currentIndex) {
            var trHtml = "<tr onclick='FORMCUSTOMIZATION.AddNewRow_IncBehaviour(this);'>" +
                             "<td><input type='text' class='form-control' readonly data-itypeid='' ondblclick='FORMCUSTOMIZATION.Bind_ddl_IncType(this);' /> </td>" +
                             "<td><input type='text' class='form-control' readonly data-ivalueid='' data-filterfield='' ondblclick='FORMCUSTOMIZATION.Bind_ddl_IncValue(this);'/></td>" +
                             "<td><input type='text' class='form-control' readonly /></td>" +
                             "<td><input type='number' class='form-control' readonly ondblclick='FORMCUSTOMIZATION.ShowStartingChar(this);' onblur='FORMCUSTOMIZATION.HideStartingChar(this);' /></td>" +
                             "<td><input type='number' class='form-control' readonly ondblclick='FORMCUSTOMIZATION.ShowNoOfChar(this);' onblur='FORMCUSTOMIZATION.HideNoOfChar(this);' /></td>" +
                         "</tr>";
            $(eleTr.parentElement).append(trHtml);
        }
    },
    AddNewRow_FormFilter: function (eleTr, sFrom) {
        //////debugger;
        var trCount = eleTr.parentElement.children.length;
        var currentIndex = eleTr.rowIndex;
        if (trCount == currentIndex) {
            var filterFor = "";
            if (sFrom == "Form") {
                filterFor = "ExtraField_FormToLink";
            }
            else {
                filterFor = "ExtraField_TableName";
            }
            var trHtml = "<tr onclick='FORMCUSTOMIZATION.AddNewRow_FormFilter(this);' onkeyup='FORMCUSTOMIZATION.AddNewRow_FormFilter(this);'>" +
                             "<td><input type='text' class='form-control' data-fieldid='' data-filterdatatype='' data-lnkFormid='' data-tblName='' data-displayfield='' data-valuefield='' readonly ondblclick=FORMCUSTOMIZATION.Bind_ddl_FilterCriteria(this,'" + filterFor + "') /> </td>" +
                             "<td>" +
                                "<select class='custom-select'>" +
                                    "<option value='-1' selected disabled></option>" +
                                    "<option value='0'>=</option>" +
                                    "<option value='1'>< ></option>" +
                                    "<option value='2'>></option>" +
                                    "<option value='3'>> =</option>" +
                                    "<option value='4'><</option>" +
                                    "<option value='5'>< =</option>" +
                                "</select>" +
                            "</td>" +
                            "<td>" +
                                "<select class='custom-select' onchange='FORMCUSTOMIZATION.setEmptyFieldOrValue(this);'>" +
                                    "<option value='-1' selected disabled></option>" +
                                    "<option value='0'>Value</option>" +
                                    "<option value='1'>Field</option>" +
                                "</select>" +
                            "</td>" +
                            "<td><input type='text' class='form-control' data-linkfield='' data-filterfield='' data-ftablename='' data-fvaluefield='' data-fdisplayfield='' readonly ondblclick='FORMCUSTOMIZATION.showFieldOrValue(this, event);' onblur='FORMCUSTOMIZATION.hideFieldOrValue(this);' /> </td>" +
                            "<td><input type='text' class='form-control' data-linkfield='' readonly ondblclick='FORMCUSTOMIZATION.showLinkField(this);' onblur='FORMCUSTOMIZATION.hideLinkField(this);' /> </td>" +
                            "<td>" +
                                "<select class='custom-select'>" +
                                    "<option value='-1' selected></option>" +
                                    "<option value='0'>ONLY</option>" +
                                    "<option value='1'>AND</option>" +
                                    "<option value='2'>OR</option>" +
                                "</select>" +
                            "</td>" +
                        "</tr>";
            $(eleTr.parentElement).append(trHtml);
        }
    },

    ShowBackColorPicker: function (ele) {
        //////debugger;
        //if (ele.disabled == true) {
        //    document.getElementById(ele.id).jscolor.hide();
        //}
        //else {
        //    document.getElementById(ele.id).jscolor.show();
        //}
    },
    RgbToHex: function (rgb) {
        rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
        return (rgb && rgb.length === 4) ? "#" +
         ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) +
         ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) +
         ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';
    },
    ChangeBackColorOfText: function (ele) {
        ////debugger;
        document.getElementById("previewFormatingText_ExtraField").style.backgroundColor = ele.value.trim();
    },

    ShowFontDialog: function () {
        ////debugger;
        $("#MCustomize_FontDialog_Modal").modal('show');
        //if (bSuccess && data != "") {
        //    FONTDIALOG.openFontDialog(data, "FORMCUSTOMIZATION.GetDataFrom_FontDialog");
        //}
    },
    GetDataFrom_FontDialog: function () {
        ////debugger;
        formatingFontData = FONTDIALOG.getFontData("ExtraField_FontCtrl");
        document.getElementById("FieldsDetails_Font").value = formatingFontData.FontFamily;
        $("#MCustomize_FontDialog_Modal").modal('hide');
    },
    ClearFontData: function () {
        formatingFontData = null;

        //$("#Form_ExtraFields_div").hide();
        //$("#Form_Customizing_div").show();
        //document.getElementById("FormCustTieleBar").style.display = "block";
        //document.getElementById("FormCustTieleBar").parentElement.style.border = "1px solid #e5e5e5";
        //document.getElementById("btnUpdate_ConfigureForms").style.display = "inline-block";
    },

    SaveExtraFieldDetails: function () {
        debugger;
        var fCaption = document.getElementById("ExtraField_FieldCaption").value.trim();
        var firstChar = fCaption.charAt(0);
        var FieldMap=null;
        if (fCaption != "") {
            if (!firstChar.match(/[a-z]/i)) {
                if (isNaN(firstChar)) {
                    document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgEnterfieldcaption");
                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterfieldcaption"));
                    $("#lblErrorMsg_ExtraField").hide();
                }
                else {
                    document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgFieldNameshouldnotstartwithnumeric");
                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldNameshouldnotstartwithnumeric"));
                    $("#lblErrorMsg_ExtraField").hide();
                }
            }
            else {
                var fName = document.getElementById("ExtraField_FieldName").value.trim().replace(/\s/g, '');
                var popupMode = document.getElementById("ModeOfPopup_ExtraField").value.trim();
                if (popupMode == "Create") {
                    if (FORMCUSTOMIZATION.IsExtraFieldExist(fName)) {
                        document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgFieldNamealreadyexist"); // "Field Name already exist";
                        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldNamealreadyexist"));
                        $("#lblErrorMsg_ExtraField").hide();
                        return false;
                    }
                }
                if (fName != "") {
                    var fMaxSize = document.getElementById("ExtraField_MaxSize");
                    if (fMaxSize != null && fMaxSize != undefined) {
                        fMaxSize = fMaxSize.value.trim();
                    }
                    else if (fMaxSize == "" && fMaxSize != null && fMaxSize != undefined) {
                        document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("lblEntermaximumsize"); // "Enter Max Size for Field";
                        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lblEntermaximumsize"));
                        $("#lblErrorMsg_ExtraField").hide();
                        return false;
                    }
                    var fieldData;
                    //////debugger;
                    var mName = FORMCUSTOMIZATION.GetFormName();
                    var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
                    var currentTab = $("#FormFields_list>li.selectedTab")[0];
                    var tabCaption = currentTab.textContent.trim();
                    var tabId = currentTab.dataset.id;
                    var tab = $("#tabId_" + tabId + " > ul .current")[0];
                    var tableId = tab.dataset.tableid;
                    var tableName = tab.dataset.tablename;
                    var tableType = tab.dataset.tabletype;
                    var isDef = false;
                    var viewId = document.getElementById("FormAndViewId_MsCust").value.trim();

                    var field;
                    var extraFieldId = document.getElementById("ModeOfPopup_ExtraField").dataset.extrafieldid.trim();
                    var extraFieldOrder = document.getElementById("ModeOfPopup_ExtraField").dataset.extrafieldorder.trim();
                    //var fldCaption = document.getElementById("ExtraField_FieldCaption").value.trim();
                    //var fldName = document.getElementById("ExtraField_FieldName").value.trim();
                    var datatypeId = document.getElementById("ddlDatatype_ExtraField").options[document.getElementById('ddlDatatype_ExtraField').selectedIndex].value.trim();
                    var datatypeText = document.getElementById("ddlDatatype_ExtraField").options[document.getElementById('ddlDatatype_ExtraField').selectedIndex].text.trim();
                    //var FormulaBehaviour = document.getElementById("FormFormulaBehaviour").value;
                    var sFormula = "";
                    //if (FormulaBehaviour == 1) {
                        sFormula = document.getElementById("Form_RestrictFormula_textbox").value;
                    //}
                    var defValues = document.getElementById("ExtraField_DefaultValue");
                    var maxlen = 0;
                    if (defValues.type == "text" || defValues.type == "number") {
                        if (datatypeText == "String List") {
                            if (defValues.value.trim() == "") {
                                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("Enterdefaultvalue"); // "Enter default value.";
                                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("Enterdefaultvalue"));
                                $("#lblErrorMsg_ExtraField").hide();
                                return false;
                            }
                            else if (defValues.value.trim().indexOf(',') > -1) {
                                defValues = defValues.value.trim();
                                var mArr = defValues.split(',');
                                var duplicateList = FORMCUSTOMIZATION.Find_duplicates(mArr);
                                if (duplicateList.length > 0) {
                                    document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Duplicate Values not allowed [" + duplicateList + "]";
                                    COMMON.prototype.showMessage("Duplicate Values not allowed [" + duplicateList + "]");
                                    $("#lblErrorMsg_ExtraField").hide();
                                    return false;
                                }
                                for (i = 0; i < mArr.length; i++) {
                                    if (mArr[i].length > maxlen) {
                                        maxlen = mArr[i].length;
                                    }
                                }
                            }
                            else {
                                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Atleast two default values required";
                                COMMON.prototype.showMessage("Atleast two default values required");
                                $("#lblErrorMsg_ExtraField").hide();
                                return false;
                            }
                        }
                        else if (datatypeText == "Number List") {
                            if (defValues.value.trim() == "") {
                                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("Enterdefaultvalue");// "Enter default value.";
                                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("Enterdefaultvalue"));
                                $("#lblErrorMsg_ExtraField").hide();
                                return false;
                            }
                            else if (defValues.value.trim().indexOf(',') > -1) {
                                defValues = defValues.value.trim();
                            }
                            else {
                                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Atleast two default values required";
                                COMMON.prototype.showMessage("Atleast two default values required");
                                $("#lblErrorMsg_ExtraField").hide();
                                return false;
                            }
                        }
                        else if (datatypeText == "Master") {
                            defValues = OPTIONCONTROL.getControlValue('ExtraField_DefaultValue');
                        }
                        else if (defValues.value.trim() != "Todays Date" && defValues.value.trim() != "Time Now") {
                            defValues = defValues.value.trim();
                        }
                        else
                            defValues = "";
                    }
                    else if (defValues.type == "checkbox") {
                        if (defValues.checked) {
                            defValues = "1";
                        }
                        else {
                            defValues = "0";
                        }
                    }
                    else if (datatypeText == "DateTime" || datatypeText == "Date" || datatypeText == "Time") {
                        defValues = defValues.value.trim();
                    }

                    var maxsize = fMaxSize == null ? "" : fMaxSize;
                    if (datatypeText == "String List") {
                        maxsize = maxlen;
                    }
                    var noOfDec = document.getElementById("ExtraField_NoOfDecimals");
                    noOfDec = (noOfDec != null && noOfDec != undefined) ? noOfDec.value.trim() : "0";
                    if (fMaxSize == null && datatypeText != "String List") {
                        maxsize = noOfDec;
                    }
                    if (datatypeText == "Fraction") {
                        if (parseInt(maxsize) > 15) {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Max 15 No of Decimal are allowed";
                            COMMON.prototype.showMessage("Max 15 No of Decimal are allowed");
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                    }
                    if (m_arrFieldExMapping.length > 0) {
                        FieldMap = m_arrFieldExMapping;
                    }
                    //var intervalValue = document.getElementById("ExtraField_Interval");
                    //intervalValue = (intervalValue != null && intervalValue != undefined) ? intervalValue.value.trim() : 0;

                    //var calType = document.getElementById("ExtraField_CalenderType");
                    //if (calType != null && calType != undefined) {
                    //    intervalValue = calType.options[calType.selectedIndex].value.trim();
                    //}
                    //var includeGroup = document.getElementById("ExtraField_IncludeGroups");
                    //includeGroup = (includeGroup != null && includeGroup != undefined) ? includeGroup.options[includeGroup.selectedIndex].value : "";

                    var banerTxt = document.getElementById("ExtraField_BannerText").value.trim();
                    var toolTip = document.getElementById("ExtraField_ToolTipText").value.trim();
                    var ctrlType = document.getElementById("ExtraField_ControlType").options[document.getElementById("ExtraField_ControlType").selectedIndex].value.trim();
                    //////debugger;
                    //if (parseInt(ctrlType) == 10) {
                    //    if (parseInt(intervalValue) == 0) {
                    //        document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Interval Value should be greater than 0";
                    //        COMMON.prototype.showMessage("Interval Value should be greater than 0");
                    //        $("#lblErrorMsg_ExtraField").hide();
                    //        return false;
                    //    }
                    //}
                    var minValue = document.getElementById("ExtraField_MinValue");
                    minValue = (minValue != null && minValue != undefined) ? minValue.value.trim() : "0";
                    var maxValue = document.getElementById("ExtraField_MaxValue");
                    maxValue = (maxValue != null && maxValue != undefined) ? maxValue.value.trim() : "0";
                    if (parseInt(ctrlType) == 10 || parseInt(ctrlType) == 1) {
                        if (parseInt(minValue) >= parseInt(maxValue)) {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgMaxValueshouldbegreaterthanminValue"); // "Max Value should be greater than min Value";
                            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgMaxValueshouldbegreaterthanminValue"));
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                    }
                    //////debugger;
                    var linkFormId = document.getElementById("ExtraField_FormToLink");
                    //var linkForm = "";
                    if (linkFormId != null && linkFormId != undefined) {
                        if (linkFormId.value.trim() == "") {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the link Form"; // "Select the link Form";
                            COMMON.prototype.showMessage("Select the link Form");
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                        else {
                            linkFormId = OPTIONCONTROL.getControlValue('ExtraField_FormToLink');
                            //linkForm = document.getElementById("ExtraField_FormToLink").value.trim();
                        }
                    }

                    //////debugger;
                    var linkMasterId = document.getElementById("ExtraField_MasterToLink");
                    //var linkMaster = "";
                    if (linkMasterId != null && linkMasterId != undefined) {
                        if (linkMasterId.value.trim() == "") {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the link Master"; // "Select the link Master";
                            COMMON.prototype.showMessage("Select the link Master");
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                        else {
                            linkMasterId = OPTIONCONTROL.getControlValue('ExtraField_MasterToLink');
                            //linkMaster = document.getElementById("ExtraField_MasterToLink").value.trim();
                        }
                    }
                  

                    //var externalTableName = document.getElementById("ExtraField_TableName");
                    //if (externalTableName != null && externalTableName != undefined) {
                    //    if (externalTableName.value.trim() != "") {
                    //        externalTableName = externalTableName.value.trim();
                    //    }
                    //    else {
                    //        document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("lbEnterexternaltablename"); // "Enter external table name";
                    //        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lbEnterexternaltablename"));
                    //        $("#lblErrorMsg_ExtraField").hide();
                    //        return false;
                    //    }
                    //}
                    //else
                    //    externalTableName = "";

                    var mandatoryFlds = document.getElementById("ExtraField_MandatoryFields");
                    //var mandatoryVals = "";
                    if (mandatoryFlds != null && mandatoryFlds != undefined) {
                        //var allMandatory = [];
                        //var mfldsDiv = document.getElementById("chkList_MandatoryFields_ExtraField").getElementsByTagName("input");
                        //for (var i = 0; i < mfldsDiv.length; i++) {
                        //    if (mfldsDiv[i].checked) {
                        //        var fld = {
                        //            FieldId: mfldsDiv[i].dataset.fieldid,
                        //            FieldName: mfldsDiv[i].dataset.fieldname
                        //        }
                        //        allMandatory.push(fld);
                        //    }
                        //}
                        //////debugger;
                        //mandatoryVals = allMandatory;
                        //if (mandatoryVals.length <= 0) {
                        //    document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Mandatory fields";
                        //    return false;
                        //}
                        if (mandatoryFlds.value.trim() != "") {
                            mandatoryFlds = mandatoryFlds.value.trim();
                            //mandatoryVals = mandatoryFlds.split(",");
                        }
                        else {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Mandatory fields and click 'OK'";
                            COMMON.prototype.showMessage("Select the Mandatory fields and click 'OK'");
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                    }
                    else
                        mandatoryFlds = "";

                    //var linkDisplayFld = document.getElementById("ExtraField_DisplayFields");
                    //if (linkDisplayFld != null && linkDisplayFld != undefined) {
                    //    linkDisplayFld = linkDisplayFld.options[linkDisplayFld.selectedIndex].text.trim();
                    //    if (linkDisplayFld == "") {
                    //        document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("lbEnterDisplaymember"); // "Enter Display member";
                    //        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lbEnterDisplaymember"));
                    //        $("#lblErrorMsg_ExtraField").hide();
                    //        return false;
                    //    }
                    //}
                    //else
                    //    linkDisplayFld = "";

                    //var linkValueFld = document.getElementById("ExtraField_ValueFields");
                    //if (linkValueFld != null && linkValueFld != undefined) {
                    //    linkValueFld = linkValueFld.options[linkValueFld.selectedIndex].text.trim();
                    //    if (linkValueFld == "") {
                    //        document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("lbEnterValuemember"); // "Enter Value member";
                    //        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lbEnterValuemember"));
                    //        $("#lblErrorMsg_ExtraField").hide();
                    //        return false;
                    //    }
                    //}
                    //else
                    //    linkValueFld = "";
                    ////debugger;
                    var filterCriteriaData = document.getElementById("tblFilterCriteria_FormField");
                    if (filterCriteriaData != null && filterCriteriaData != undefined) {
                        filterCriteriaData = [];
                        filterCriteriaData = FORMCUSTOMIZATION.GetFilterCriteriaData();
                        if (filterCriteriaData == false) {
                            return false;
                        }
                        if (filterCriteriaData == null) {
                            filterCriteriaData = [];
                        }
                    }
                    else {
                        filterCriteriaData = [];
                    }
                    var regExp = document.getElementById("ExtraField_RegularExpression")
                    if (regExp != null && regExp != undefined) {
                        regExp = regExp.value.trim();
                    }
                    var errMsg = document.getElementById("ExtraField_ErrorMessage");
                    if (errMsg != null && errMsg != undefined) {
                        errMsg = errMsg.value.trim();
                    }
                    var IsAvalInCustPortal = false;
                    var IsEditInCustPortal = false;
                    //var partOfDeliveryAdd = document.getElementById("FieldsDetails_PartOfDeliveryAddress").checked;
                    //var partOfBillingAdd = document.getElementById("FieldsDetails_PartOfBillingAddress").checked;
                    var mandatory = document.getElementById("FieldsDetails_IsMandatory").checked;
                    //var allowAsParam = document.getElementById("FieldsDetails_AllowAsParameter").checked;
                    var isHidden = document.getElementById("FieldsDetails_IsHidden").checked;
                    //var hiddenInGrp = document.getElementById("FieldsDetails_HiddenInGroup").checked;
                    var spellCheck = document.getElementById("FieldsDetails_SpellCheck").checked;
                    //var mandatoryInGrp = document.getElementById("FieldsDetails_MandatoryInGroup").checked;
                    var auditTrail = document.getElementById("FieldsDetails_AuditTrial").checked;
                    var notAvailForReport = document.getElementById("FieldsDetails_NotAvailableForReports").checked;
                    //var mergeField = document.getElementById("FieldsDetails_MergeField").checked;
                    //var massUpdate = document.getElementById("FieldsDetails_MassUpdate").checked;
                    //var inQuickCreate = document.getElementById("FieldsDetails_IncludeInQuickCreate").checked;
                    var forExport = document.getElementById("FieldsDetails_CannotBeExported").checked;
                    var forImport = document.getElementById("FieldsDetails_CannotBeImported").checked;
                    //var copyFromParent = document.getElementById("FieldsDetails_CopyFromParent").checked;
                    var isReadonly = document.getElementById("FieldsDetails_ReadOnly").checked;
                    var infoField = document.getElementById("FieldsDetails_InformationField").checked;
                    var mandatoryInRevision = document.getElementById("FieldsDetails_MandatoryRevision").checked;
                    var behaviour = document.getElementById("Behaviour").options[document.getElementById("Behaviour").selectedIndex].value.trim();
                    var wordwrap = document.getElementById("FieldsDetails_WordWrap").checked;
                    //if (document.getElementById("FieldsDetails_AvailableinCustomerPortal") != undefined && document.getElementById("FieldsDetails_AvailableinCustomerPortal") != null) {
                    //    IsAvalInCustPortal = document.getElementById("FieldsDetails_AvailableinCustomerPortal").checked;
                    //}
                    //if (document.getElementById("FieldsDetails_EditableinCustomerPortal") != undefined && document.getElementById("FieldsDetails_EditableinCustomerPortal") != null) {
                    //    IsEditInCustPortal = document.getElementById("FieldsDetails_EditableinCustomerPortal").checked;
                    //}
                    debugger;

                    var bSendAlert = false;
                    if (FCommon.UI.isValidObject(document.getElementById("ExtraField_SendAlert"))) {
                        bSendAlert = document.getElementById("ExtraField_SendAlert").checked;
                    }

                    var iNoOfDays = 0;
                    if (FCommon.UI.isValidObject(document.getElementById("ExtraField_DaysText"))) {
                        iNoOfDays = document.getElementById("ExtraField_DaysText").value.trim();
                    }

                    var iRecurrenceType = 0;
                    if (FCommon.UI.isValidObject(document.getElementById("ExtraField_Days"))) {
                        iRecurrenceType = document.getElementById("ExtraField_Days").value.trim();
                    }

                    var iAlertType = 0;
                    if (FCommon.UI.isValidObject(document.getElementById("ExtraField_AlertType"))) {
                        iAlertType = document.getElementById("ExtraField_AlertType").value.trim();
                    }

                    var iTemplateId = 0;
                    if (FCommon.UI.isValidObject(document.getElementById("ExtraField_Template"))) {
                        if (document.getElementById("ExtraField_Template").style.display == "block") {
                            iTemplateId = OPTIONCONTROL.getControlValue('OptExtraField_Template');
                        }
                        else {
                            iTemplateId = OPTIONCONTROL.getControlValue('OptExtraField_AlertTemplate');
                        }
                    }

                    var iUserOrRoleSelectionFlag = 0;
                    if (FCommon.UI.isValidObject(document.getElementById("ExtraField_SendAlertTo"))) {
                        iUserOrRoleSelectionFlag = document.getElementById("ExtraField_SendAlertTo").options[document.getElementById('ExtraField_SendAlertTo').selectedIndex].value.trim();
                    }
                    var IUserOrRoleId = 0;
                    debugger;
                    var strUserOrRoleIds = '';
                    if (datatypeText == "Date") {
                        if (iUserOrRoleSelectionFlag == 1) {                          
                            if (FCommon.UI.isValidObject(document.getElementById("ExtraField_UsersList"))) {
                                var iCount = $("#ExtraField_UsersList")[0].children.length;
                                for (var iRow = 0; iRow < iCount; iRow++) {
                                    if (document.getElementById("chkUser" + iRow).checked == true) {
                                        if (strUserOrRoleIds != '') {
                                            strUserOrRoleIds = strUserOrRoleIds + ','
                                        }
                                        strUserOrRoleIds = strUserOrRoleIds + document.getElementById("chkUser" + iRow).value;
                                    }
                                }
                            }
                        }
                        else if (iUserOrRoleSelectionFlag == 2) {                           
                            if (FCommon.UI.isValidObject(document.getElementById("ExtraField_RolesList"))) {
                                var iCount = $("#ExtraField_RolesList")[0].children.length;
                                for (var iRow = 0; iRow < iCount; iRow++) {
                                    if (document.getElementById("chkRole" + iRow).checked == true) {
                                        if (strUserOrRoleIds != '') {
                                            strUserOrRoleIds = strUserOrRoleIds + ','
                                        }
                                        strUserOrRoleIds = strUserOrRoleIds + document.getElementById("chkRole" + iRow).value;
                                    }
                                }
                            }
                            else {
                                strUserOrRoleIds = '';
                            }
                        }
                    }



                    var fScrollBar = 0;
                    var fieldIncremental = [];
                    if (behaviour == 4) {
                        var hScrollbar = document.getElementById("ScrollBar_Horizontal").checked;
                        var vScrollbar = document.getElementById("ScrollBar_Vertical").checked;
                        if (wordwrap == true || hScrollbar == true || vScrollbar == true) {

                        }
                        else {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select atleast one option for multiline in Properties.";
                            COMMON.prototype.showMessage("Select atleast one option for multiline in Properties.");
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                        if (hScrollbar && !vScrollbar) {
                            fScrollBar = 1;
                        }
                        else if (!hScrollbar && vScrollbar) {
                            fScrollBar = 2;
                        }
                        else if (hScrollbar && vScrollbar) {
                            fScrollBar = 3;
                        }
                    }
                    else if (behaviour == 5) {
                        fieldIncremental = FORMCUSTOMIZATION.getIncrementalCondition();
                        if (fieldIncremental == null || fieldIncremental.length == 0) {
                            document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgAtleastoneconditionrequiredforincreamentalField");
                            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgAtleastoneconditionrequiredforincreamentalField"));
                            $("#lblErrorMsg_ExtraField").hide();
                            return false;
                        }
                    }
                    //var colSpan = document.getElementById("FieldsDetails_ColumnSpan").value.trim();
                    //var rowSpan = document.getElementById("FieldsDetails_RowSpan").value.trim();
                    var charCasing = document.getElementById("CharacterCasing").options[document.getElementById("CharacterCasing").selectedIndex].value.trim();
                    var txtAlign = document.getElementById("TextAlign").options[document.getElementById("TextAlign").selectedIndex].value.trim();
                    var backcolor = document.getElementById("FieldsDetails_BackColor").value.trim();
                    if (backcolor.indexOf('#') == -1) {
                        backcolor = FORMCUSTOMIZATION.RgbToHex(backcolor);
                    }
                    //////debugger;
                    var font = "";//formatingFontData;
                    var externalModules = Form_ExternalModule.GetExternalModules("mExtraFieldExternalModule");
                    var externalModuleAttachedOnField = false;
                    if (externalModules.length > 0) {
                        externalModuleAttachedOnField = true;
                    }
                    var FldRules = [];
                    //debugger;
                    if ($("#newRuleTab_div_FieldRules").css("display") == "block") {
                        if (popupMode == "Create") {
                            //FldRules.push(RULECONDITIONS.GetRules("FieldRules"));
                            if (m_FldRules != null) {
                                if (m_FldRules.RuleBody != null && m_FldRules.RuleBody.length > 0) {
                                    if (m_FldRules.RuleId == 0) {
                                        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                                        return false;
                                    }
                                    FldRules.push(m_FldRules);
                                    if (FldRules.length > 0 && FldRules[0] == false) {
                                        return false;
                                    }
                                }
                            }
                        }
                        else {
                            if (popupMode != "Create") {
                                //FldRules.push(RULECONDITIONS.GetRules("FieldRules"));
                                if (m_FldRules != null) {
                                    if (m_FldRules.RuleBody != null && m_FldRules.RuleBody.length > 0) {
                                        if (m_FldRules.RuleId == 0) {
                                            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                                            return false;
                                        }
                                        FldRules.push(m_FldRules);
                                    }
                                }
                            }
                            else {
                                if (FldRules != null && FldRules.length > 0) {
                                    document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded");
                                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                                    $("#lblErrorMsg_ExtraField").hide();
                                    return false;
                                }
                            }
                        }
                    }
                    debugger;
                    var ruleAttachedOnField = false;
                    if (FldRules.length > 0) {
                        if (FldRules[0] != null) {
                            if (FldRules[0] == false) {
                                FldRules = [];
                                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded");
                                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                                $("#lblErrorMsg_ExtraField").hide();
                                return false;
                            }
                            else {
                                ruleAttachedOnField = true;
                            }

                            if (FldRules[0].RuleName == null || FldRules[0].RuleName == undefined || FldRules[0].RuleName == "") {
                                ruleAttachedOnField = false;
                                FldRules = [];
                                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded");
                                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                                $("#lblErrorMsg_ExtraField").hide();
                                return false;
                            }
                        }
                    }
                    field = {
                        Alias: fCaption,
                        //AllowAsParameter: allowAsParam,
                        AuditTrial: auditTrail,
                        BackColor: backcolor,
                        BannerText: banerTxt,
                        Behaviour: behaviour,
                        CannotBeExported: forExport,
                        CannotBeImported: forImport,
                       
                        CharacterCasing: charCasing,
                        FieldIncrement: fieldIncremental,
                        //ColumnSpan: colSpan,
                        //CopyFromParent: copyFromParent,
                        DataTypeId: datatypeId,
                        DataTypeText: datatypeText,
                        DefaultValue: defValues,
                        DisplayControlId: ctrlType,
                        ErrorMessage: errMsg,
                        ExternalModules: externalModules,
                        ExternalModuleAttachedOnField: externalModuleAttachedOnField,
                        FieldCaption: fCaption,
                        FieldId: extraFieldId,
                        FieldName: fName,
                        FieldOrder: extraFieldOrder,
                        FilterCriteria: filterCriteriaData,
                        Font: font,
                        //HiddenInGroup: hiddenInGrp,
                        //IncludeGroups: includeGroup,
                        //IncludeInQuickCreate: inQuickCreate,
                        InformationField: infoField,
                        //IntervalValue: intervalValue,
                        IsHidden: isHidden,
                        IsMandatory: mandatory,
                        LinkTypeId: datatypeId == 21 ? linkFormId : linkMasterId,
                        LinkType: datatypeId == 21 ? 1 : 0,
                        //LinkForm: externalTableName,
                        //LinkDisplayField: linkDisplayFld,
                        //LinkValueField: linkValueFld,
                        //MandatoryInGroup: mandatoryInGrp,
                        MandatoryFields: mandatoryFlds,
                        //MandatoryValues: mandatoryVals,
                        //MassUpdate: massUpdate,
                        FormTypeId: mTypeId,
                        MaxSize: maxsize,
                        MaxVal: maxValue,
                        MinVal: minValue,
                        //MergeField: mergeField,
                        NotAvailableForReports: notAvailForReport,
                        MandatoryRevision: mandatoryInRevision,
                        //PartOfBillingAddress: partOfBillingAdd,
                        //PartOfDeliveryAddress: partOfDeliveryAdd,
                        ReadOnly: isReadonly,
                        RegularExpression: regExp,
                        //RowSpan: rowSpan,
                        RuleAttachedOnField: ruleAttachedOnField,
                        Rules: FldRules,
                        SpellCheck: spellCheck,
                        ScrollBar: fScrollBar,
                        sFormula:sFormula,
                        TableId: tableId,
                        TextAlign: txtAlign,
                        ToolTip: toolTip,
                        WordWrap: wordwrap,
                        FieldMap:FieldMap,
                        //AvailableinCustomerPortal: IsAvalInCustPortal,
                        //EditableinCustomerPortal: IsEditInCustPortal
                        SendDateAlert: bSendAlert,
                        UserOrRoleSelectionFlag: iUserOrRoleSelectionFlag,
                        UserOrRoleIdVals: strUserOrRoleIds,
                    NoOfDays: iNoOfDays,
                    AlertRecurrenceType: iRecurrenceType,
                    AlertType: iAlertType,
                    TemplateId:iTemplateId
                    }
                    fieldData = {
                        Default: isDef,
                        FieldsDetails: field,
                        FormName: mName,
                        FormTypeId: mTypeId,
                        TabCaption: tabCaption,
                        TabId: tabId,
                        TableId: tableId,
                        TableName: tableName,
                        TableType: tableType,
                        ViewId: viewId,
                    }
                    //debugger;
                    var urlPath = GLOBAL.getContextPath("SaveExtraField", "FormCustomization", "Forms");
                    var isShowClose = false;
                    if (isOpenedFromForm == "True") {
                        isShowClose = true;
                    }
                    //FORMCUSTOMIZATION.RemoveLandingFormCacheData();
                    var selectedTabText = $("#tabId_" + tabId + ">ul>li.current")[0].innerText.trim();
                    if (popupMode == "Create") {
                        var Tags = "true," + tabId + "," + tableId;
                        var fnResult = NETWORK.executeServerMethod(urlPath, true, { objField: fieldData, objFont: formatingFontData, sMode: "Create", bShowClose: isShowClose }, "HTML", true, "FORMCUSTOMIZATION.RefreshTabAfterFieldEdit_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", Tags, selectedTabText);
                    }
                    else {
                        var Tags = "false," + tabId + "," + tableId;
                        var fnResult = NETWORK.executeServerMethod(urlPath, true, { objField: fieldData, objFont: formatingFontData, sMode: "Edit", bShowClose: isShowClose }, "HTML", true, "FORMCUSTOMIZATION.RefreshTabAfterFieldEdit_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", Tags, selectedTabText);
                    }
                }
                else {
                    document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("EnterFieldName"); // "Enter field Name";
                    COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("EnterFieldName"));
                    $("#lblErrorMsg_ExtraField").hide();
                }
            }
        }
        else {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgEnterfieldcaption"); // "Enter field Caption";
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterfieldcaption"));
            $("#lblErrorMsg_ExtraField").hide();
        }
    },
    RefreshTabAfterFieldEdit_onSuccess: function (bs, data, tag, selectedTabText) {
        //debugger;
        if (data != "" && bs == true) {
            if (data.length < 200) {
                COMMON.prototype.showMessage(data);
                //FORMCUSTOMIZATION.ShowAlertMessage(data);
                return false;
            }
            FORMCUSTOMIZATION.ClearEditingMode();
            if ($("#btnCloseFormCutomizationFromFormScreen").length <= 0) {
                $("#Form_Customization").html(data);
            }
            else {
                //$("#divSecondsub").html(data);
                $("#Form_Customization").html(data);
            }
            ////debugger;
            var Tags = tag.split(',');
            if (Tags[0] == "true") {
                COMMON.prototype.showMessage("Field Added Successfully.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Field Added Successfully.", "green");
            }
            else {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldUpdatedSuccessfully"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldUpdatedSuccessfully"), "green"); // "Field Updated Successfully."
            }
            //debugger;
            FORMCUSTOMIZATION.SelectTabFromTabId(Tags[1]);
            var tab;
            //debugger;
            if (parseInt(Tags[2]) > 0) {
                tab = $("#tabId_" + Tags[1] + ">ul>li[data-tableid=" + Tags[2] + "]");
            }
            else if (selectedTabText == "Header Details") {
                tab = $($("#tabId_" + Tags[1] + ">ul>li")[0]);
            }
            else if (selectedTabText == "Body Details") {
                tab = $($("#tabId_" + Tags[1] + ">ul>li")[1]);
            }
            else {
                tab = $("#tabId_" + Tags[1] + ">ul>li.current");
            }
            if (tab.length > 0) {
                $("#tabId_" + Tags[1] + ">ul>li").removeClass("current");
                $(tab).addClass("current");
                FORMCUSTOMIZATION.Toggle_MstrCustTabs(tab[0]);
                FORMCUSTOMIZATION.ShowHideFieldButtons(tab[0]);
            }

            FORMCUSTOMIZATION.ClearFontData();
        }
        else {
            //data = data.substring(1, data.length - 1);
            COMMON.prototype.showMessage(data);
            //FORMCUSTOMIZATION.ShowAlertMessage(data);
        }
        FORMCUSTOMIZATION.setHeight();       
    },

    CloseExtraFieldPopup: function () {
        //debugger
        FORMCUSTOMIZATION.ClearFontData();
        FORMCUSTOMIZATION.ClearEditingMode();
        $("#all_TabsField").show();
        $("#loadExtraFields_Area").hide();
        $("#loadExtraFields_Area").html('');
        var Tab = $(".tab-lst-Formcust")[0];
        $(Tab).find("h5").css("opacity", "");
        $(Tab).css("pointer-events","auto");
        //$("#" + Tab.children[1].children[0].id + " li a").each(function () {
        //    $(this).css("opacity", "");
        
        //})
        //$("#FormFields_list li").each(function () {
        //    if ($(this).hasClass("selectedTab FormSelectedRowColor mcFieldsTab")) {
        //        $(this).find("a,select").css("opacity", "");
        //    }
        //})
    },
    CheckFieldNameFirst: function (fName) {
        ////debugger;
        var allTabsFields = $('#all_TabsField table').find('tbody');
        var hasField = false;
        for (var i = 0; i < allTabsFields.length; i++) {
            var allrows = allTabsFields[i].rows;
            //////debugger;
            for (var j = 0; j < allrows.length; j++) {
                if (allrows[j].style.display != "none") {
                    if (allrows[j].children[2].textContent.trim().toLowerCase() == fName.trim().toLowerCase()) {
                        hasField = true;
                    }
                }
            }
        }
        if (hasField) {
            return true;
        }
        return false;
    },
    ChangePreviewTextAlign: function (ele) {
        var previewTxt = document.getElementById("previewFormatingText_ExtraField").parentElement;
        if (ele.selectedIndex == 0) {
            previewTxt.style.textAlign = "left";
        }
        else if (ele.selectedIndex == 1) {
            previewTxt.style.textAlign = "right";
        }
        else {
            previewTxt.style.textAlign = "center";
        }
    },
    ChangeCharCasing: function (ele) {
        var previewTxt = document.getElementById("previewFormatingText_ExtraField");
        if (ele.selectedIndex == 1) {
            previewTxt.textContent = previewTxt.textContent.toUpperCase();
        }
        else if (ele.selectedIndex == 2) {
            previewTxt.textContent = previewTxt.textContent.toLowerCase();
        }
        else if (ele.selectedIndex == 3) {
            previewTxt.textContent = previewTxt.textContent.replace(/\w\S*/g, function (txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
        }
        else {
            var str = previewTxt.textContent.substring(0, 1);
            previewTxt.textContent = str + previewTxt.textContent.substring(1, previewTxt.textContent.length).toLowerCase();
        }
    },
    CheckColSpanSize: function (ele, evt) {
        if (ele.value.trim() > 10) {
            ele.value = ele.value.substring(0, 1);
            return false;
        }
    },
    SetCheckbox_GeneralProperty: function (ele) {
        var chkId = ele.id;
        switch (chkId) {
            case "FieldsDetails_IsMandatory":
                if (ele.checked) {
                    document.getElementById("FieldsDetails_IsHidden").disabled = true;
                    document.getElementById("FieldsDetails_IsHidden").checked = false;
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = true;
                    document.getElementById("FieldsDetails_HiddenInGroup").checked = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = true;
                    document.getElementById("FieldsDetails_InformationField").checked = false;
                    document.getElementById("FieldsDetails_CannotBeImported").disabled = true;
                    document.getElementById("FieldsDetails_CannotBeImported").checked = false;
                }
                else {
                    document.getElementById("FieldsDetails_IsHidden").disabled = false;
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = false;
                    document.getElementById("FieldsDetails_CannotBeImported").disabled = false;
                }
                break;
            case "FieldsDetails_IsHidden":
                if (ele.checked) {
                    document.getElementById("FieldsDetails_IsMandatory").disabled = true;
                    document.getElementById("FieldsDetails_IsMandatory").checked = false;
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = true;
                    document.getElementById("FieldsDetails_MandatoryInGroup").checked = false;
                    document.getElementById("FieldsDetails_ReadOnly").disabled = true;
                    document.getElementById("FieldsDetails_InformationField").disabled = true;
                    document.getElementById("FieldsDetails_InformationField").checked = false;
                }
                else {
                    document.getElementById("FieldsDetails_IsMandatory").disabled = false;
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = false;
                    document.getElementById("FieldsDetails_ReadOnly").disabled = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = false;
                }
                break;
            case "FieldsDetails_HiddenInGroup":
                if (ele.checked) {
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = true;
                    document.getElementById("FieldsDetails_MandatoryInGroup").checked = false;
                }
                else {
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = false;
                }
                break;
            case "FieldsDetails_SpellCheck":
                if (ele.checked) {
                    document.getElementById("FieldsDetails_IsHidden").disabled = true;
                    document.getElementById("FieldsDetails_IsHidden").checked = false;
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = true;
                    document.getElementById("FieldsDetails_HiddenInGroup").checked = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = true;
                    document.getElementById("FieldsDetails_InformationField").checked = false;
                }
                else {
                    document.getElementById("FieldsDetails_IsHidden").disabled = false;
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = false;
                }
                break;
            case "FieldsDetails_MandatoryInGroup":
                if (ele.checked) {
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = true;
                    document.getElementById("FieldsDetails_HiddenInGroup").checked = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = true;
                    document.getElementById("FieldsDetails_InformationField").checked = false;
                }
                else {
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = false;
                    document.getElementById("FieldsDetails_InformationField").disabled = false;
                }
                break;
            case "FieldsDetails_ReadOnly":
                if (ele.checked) {
                    document.getElementById("FieldsDetails_IsMandatory").disabled = true;
                    document.getElementById("FieldsDetails_IsMandatory").checked = false;
                    document.getElementById("FieldsDetails_SpellCheck").disabled = true;
                    document.getElementById("FieldsDetails_SpellCheck").checked = false;
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = true;
                    document.getElementById("FieldsDetails_MandatoryInGroup").checked = false;
                }
                else {
                    document.getElementById("FieldsDetails_IsMandatory").disabled = false;
                    document.getElementById("FieldsDetails_SpellCheck").disabled = false;
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = false;
                }
                break;
            case "FieldsDetails_AvailableinCustomerPortal":
                {
                    //debugger
                    if (ele.checked) {
                        document.getElementById("FieldsDetails_EditableinCustomerPortal").disabled = false;
                    }
                    else {
                        document.getElementById("FieldsDetails_EditableinCustomerPortal").disabled = true;
                        document.getElementById("FieldsDetails_EditableinCustomerPortal").checked = false;
                    }
                }
                break;
            default:
                if (ele.checked) {
                    document.getElementById("FieldsDetails_IsMandatory").disabled = true;
                    document.getElementById("FieldsDetails_IsMandatory").checked = false;
                    document.getElementById("FieldsDetails_IsHidden").disabled = true;
                    document.getElementById("FieldsDetails_IsHidden").checked = false;
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = true;
                    document.getElementById("FieldsDetails_HiddenInGroup").checked = false;
                    document.getElementById("FieldsDetails_SpellCheck").disabled = true;
                    document.getElementById("FieldsDetails_SpellCheck").checked = false;
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = true;
                    document.getElementById("FieldsDetails_MandatoryInGroup").checked = false;
                    document.getElementById("FieldsDetails_CopyFromParent").disabled = true;
                    document.getElementById("FieldsDetails_CopyFromParent").checked = false;
                    document.getElementById("FieldsDetails_ReadOnly").disabled = true;
                    document.getElementById("FieldsDetails_ReadOnly").checked = true;
                }
                else {
                    document.getElementById("FieldsDetails_IsMandatory").disabled = false;
                    document.getElementById("FieldsDetails_IsHidden").disabled = false;
                    document.getElementById("FieldsDetails_HiddenInGroup").disabled = false;
                    document.getElementById("FieldsDetails_SpellCheck").disabled = false;
                    document.getElementById("FieldsDetails_MandatoryInGroup").disabled = false;
                    document.getElementById("FieldsDetails_CopyFromParent").disabled = false;
                    document.getElementById("FieldsDetails_ReadOnly").disabled = false;
                    document.getElementById("FieldsDetails_ReadOnly").checked = false;
                }
        }
    },

    HasSelectedField: function () {
      //////debugger;
        var maindiv;
        $("#all_TabsField>div").each(function () {
            if ($(this)[0].style.display == "block") {
                maindiv = $(this);
            }
        });
        var selectedTr = maindiv.find('tbody').find("[class*='mCustTable-selectedTr']");
        if (selectedTr.length > 0) {
            return selectedTr;
        }
        else
            return null;
    },

    ShowPopupForEditField: function (ele) {
        debugger;        
        var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        if (mTypeId != null && mTypeId > 0) {
            var mName = FORMCUSTOMIZATION.GetFormName();
            //var mTypeId = selectedFormId;
            var currentTab = $("#FormFields_list>li.selectedTab")[0];
            var tabCaption = currentTab.dataset.name.trim();
            if (currentTab.dataset.tabtype != 0) {
                return false;
            }
            var tabId = currentTab.dataset.id;
            var tab = $("#tabId_" + tabId + " > ul .current")[0];
            var tableId = tab.dataset.tableid;
            var tableTypeName = tab.textContent.trim();
            var tableName = tab.dataset.tablename;
            var tableType = tab.dataset.tabletype;
            var fieldId = ele.dataset.fieldid.trim();
            var urlPath = GLOBAL.getContextPath("ExtraFields_FormCustomization", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { sFormName: mName, iFormTypeId: mTypeId, iFieldId: fieldId, sTabCaption: tabCaption, iTabId: tabId, iTableId: tableId, sTableTypeName: tableTypeName, sTableName: tableName, iTableType: tableType, sCallFor: "Edit" }, "HTML", true, "FORMCUSTOMIZATION.ShowExtraFieldPopup", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        }
        else {
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgSelectFieldfirst"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgSelectFieldfirst")); // 'Please select the Field'
        }
    },
    ShowExtraFieldPopup: function (bs, data) {
       debugger;
       if (data != '"Error"' && bs == true) {
           //FORMCUSTOMIZATION.SetEditingMode();
            $("#all_TabsField").hide();
            $("#loadExtraFields_Area").html(data);
            $("#loadExtraFields_Area").show();
            var DatatypeId = $('#ddlDatatype_ExtraField').val();
            if (DatatypeId == 12 || DatatypeId == 21)
            {
                if(DatatypeId == 12)
                {
                    m_sMappingGridId = "FieldMasterTable"
                }
                else
                {
                     m_sMappingGridId = "FieldFormTable";
                }
            }
            //else if (sFormula != null && sFormula != "" && (DatatypeId == 1 || DatatypeId == 6 ||
            //    DatatypeId == 13 || DatatypeId == 15 ||
            //    DatatypeId == 16)) {
            //    $("#FormFormulaBehaviour").val('1');
            //    //document.getElementById("Form_Formula").style.display = 'block';

            //}
            if (isOpenedFromForm == "True") {
                $("#extraFieldContainer_div").height($(".tab-lst-Formcust").height() + 70);
                $('#FormextraFieldContainer_div').css({ "max-height": $(".tab-lst-Formcust").height() + 70 });
            }
            else {
                $("#extraFieldContainer_div").height($(".tab-lst-Formcust").height() + 10);
                $('#FormextraFieldContainer_div').css({ "max-height": $(".tab-lst-Formcust").height() + 10 });;
            }

            //document.getElementById("btnUpdate_ConfigureForms").style.display = "none";
            //document.getElementById("FormCustTieleBar").style.display = "none";
            //document.getElementById("FormCustTieleBar").parentElement.style.border = "0";
            //$("#tab_contentFor_tab_Details_ExtraField, #tab_contentFor_tab_Properties_ExtraField, #tab_contentFor_tab_Formatting_ExtraField, #tab_contentFor_tab_ExternalModule_ExtraField").height(GLOBAL.getPageHeight() - 185);

            //$("#loadExtraFields_Area").html('').html(data);
            ////FORMCUSTOMIZATION.ShowFieldProp_ForDataType(document.getElementById("ddlDatatype_ExtraField"));
            //$("#FORMCUSTOMIZATION_ExtraField").modal('show');
            ////debugger;
            if (FORMCUSTOMIZATION.HasSelectedField() != null) {
                var fldType = FORMCUSTOMIZATION.HasSelectedField()[0].children[6].textContent.trim();
                if (fldType.trim() == "Form") {
                    setTimeout(function () {
                        FORMCUSTOMIZATION.GetFormExtraFields(true);
                    }, 500);
                }
                else if (fldType.trim() == "ExternalTable") {
                    setTimeout(function () {
                        FORMCUSTOMIZATION.GetMandatoryFields(true);
                    }, 500);
                }
                else if (fldType.trim() == "Master") {
                    setTimeout(function () {
                        FORMCUSTOMIZATION.GetMasterExtraFields(true);
                    }, 500);
                }
            }
            if ($("#ddlDatatype_ExtraField").val() == "0") {
                FORMCUSTOMIZATION.DisplayOtherControls(document.getElementById('ExtraField_ControlType'), "0");
            }
            var Tab = $(".tab-lst-Formcust")[0];        
            $(Tab).find("h5").css("opacity", ".5");
            $(Tab).css("pointer-events", "none");
            //$("#" + Tab.children[1].children[0].id + " li a").each(function () {
            //    $(this).css("opacity", ".5");
           
            //})
            $("#FormFields_list li").each(function () {
                if ($(this).hasClass("selectedTab FormSelectedRowColor mcFieldsTab")) {
                    $(this).find("a,select").css("opacity", "1");                 
                }
            })
       }      
    },


    SetBehaviourDropDown: function (iDataType, selectBehaviour) {
        ////debugger;
        $("#Behaviour").empty();
        if (iDataType == 0 || iDataType == 6 || iDataType == 13 || iDataType == 15 || iDataType == 16) {
            var opts = "<option selected='selected' value='0'>--None--</option>" +
                        "<option value='1'>Password Field</option>" +
                        "<option value='2'>Selection</option>" +
                        "<option value='3'>Auto Complete</option>" +
                        "<option value='4'>Multi-Line</option>" +
                        "<option value='5'>Incremental</option>";
            $("#Behaviour").append(opts);
            $("#Behaviour").prop("disabled", false);
        }
        else if (iDataType == 1) {
            var opts = "<option selected='selected' value='0'>--None--</option>" +
                        "<option value='5'>Incremental</option>";
            $("#Behaviour").append(opts);
            $("#Behaviour").prop("disabled", false);
        }
        else {
            var opts = "<option selected='selected' value='0'>--None--</option>";
            $("#Behaviour").append(opts);
            $("#Behaviour").prop("disabled", true);
        }
        //////debugger;
        if (selectBehaviour != undefined && selectBehaviour != null) {
            $("#Behaviour option[value=" + selectBehaviour + "]").prop("selected", true);
        }
        document.getElementById("incremental_behaviour_div").style.display = "none";
        document.getElementById("multiLine_behaviour_div").style.display = "none";
    },

    SetFormattingTabFieldsProp: function (iDataType) {
        // //debugger;
        if (iDataType == 0 || iDataType == 13) {
            $("#TextAlign").prop("disabled", false);
            $("#CharacterCasing").prop("disabled", false);
            //to check for character casing disability
            if (iTableTypeValue == true) {
                $("#CharacterCasing").prop("disabled", true);
            }
            $("#FieldsDetails_Font").prop("disabled", false);
            $("#FieldsDetails_Font_Button").prop("disabled", false);
            //$("#FieldsDetails_BackColor").prop("disabled", false);
            //$("#FieldsDetails_BackColor").colorpicker('enable');
            //$("#FieldsDetails_BackColor").addClass("jscolor");
        }
        else if (iDataType == 6) {
            $("#TextAlign").prop("disabled", false);
            $("#CharacterCasing").prop("disabled", true);
            $("#FieldsDetails_Font").prop("disabled", true);
            $("#FieldsDetails_Font_Button").prop("disabled", true);
            //$("#FieldsDetails_BackColor").prop("disabled", true);
            //$("#FieldsDetails_BackColor").colorpicker('disable');
            //$("#FieldsDetails_BackColor").removeClass("jscolor");
        }
        else {
            $("#TextAlign").prop("disabled", true);
            $("#CharacterCasing").prop("disabled", true);
            $("#FieldsDetails_Font").prop("disabled", true);
            $("#FieldsDetails_Font_Button").prop("disabled", true);
            //$("#FieldsDetails_BackColor").prop("disabled", true);
            //$("#FieldsDetails_BackColor").colorpicker('disable');
            //$("#FieldsDetails_BackColor").removeClass("jscolor");
        }
    },

    ShowFieldProp_ForDataType: function (ele) {
        debugger;
        document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
        $("#lblErrorMsg_ExtraField").hide();
        var dataType = ele.options[ele.selectedIndex].value;
        if (dataType==12||dataType==21)
        {
            document.getElementById("btnMapFieldsModule").style.display="block";
            document.getElementById("FormulaForm").style.display = "none";
            if(dataType==12)
            {
                document.getElementById("FieldMasterName").style.display = "block";
                document.getElementById("FieldhiddenTableDiv").style.display = "block";
                document.getElementById("FieldFormName").style.display = "none";
                document.getElementById("FieldFormhiddenTableDiv").style.display = "none";
            }
            else {
                document.getElementById("FieldMasterName").style.display = "none";
                document.getElementById("FieldhiddenTableDiv").style.display = "none";
                document.getElementById("FieldFormName").style.display = "block";
                document.getElementById("FieldFormhiddenTableDiv").style.display = "block";
            }
        }
        else if (dataType == 1 || dataType == 6 ||
                dataType == 13 || dataType == 15 ||
                dataType == 16)
        {
            document.getElementById("btnMapFieldsModule").style.display = "none";
            document.getElementById("FieldMasterName").style.display = "none";
            document.getElementById("FieldhiddenTableDiv").style.display = "none";
            document.getElementById("FieldFormName").style.display = "none";
            document.getElementById("FieldFormhiddenTableDiv").style.display = "none";
            m_sMappingGridId = "";
            document.getElementById("FormulaForm").style.display = "block";

        }
        else
        {
            document.getElementById("btnMapFieldsModule").style.display = "none";
            document.getElementById("FormulaForm").style.display = "none";
            document.getElementById("FieldMasterName").style.display = "none";
            document.getElementById("FieldhiddenTableDiv").style.display = "none";
            document.getElementById("FieldFormName").style.display = "none";
            document.getElementById("FieldFormhiddenTableDiv").style.display = "none";
            m_sMappingGridId = "";
        }
        var detailsFor = document.getElementById("extraFieldTitlebar").textContent.trim();
        var mode = document.getElementById("ModeOfPopup_ExtraField").value.trim();
        var FormTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var urlPath = GLOBAL.getContextPath("ExtraField_Properties", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { sDataType: dataType, sDetailsFor: detailsFor, iFormTypeId: FormTypeId }, "HTML", true, "FORMCUSTOMIZATION.LoadFldProperties_onSuccess");
    },
    LoadFldProperties_onSuccess: function (bs, data) {
        debugger;
        if (data != "" && bs == true) {
            $("#ExtraField_PropertyArea").html("").html(data);
            var dataType = $("#ddlDatatype_ExtraField").val();
            FORMCUSTOMIZATION.SetBehaviourDropDown(dataType);
            FORMCUSTOMIZATION.SetFormattingTabFieldsProp(dataType);
            if (dataType == 12 || dataType == 14) {
                FORMCUSTOMIZATION.SetMasterFilterCriteriaData(null);
                if(dataType == 12 )
                    document.getElementById("FieldMasterName").style.display = "block";
                document.getElementById("FieldhiddenTableDiv").style.display = "block";
                document.getElementById("FieldFormName").style.display = "none";
                document.getElementById("FieldFormhiddenTableDiv").style.display = "none";
                m_sMappingGridId = "FieldMasterTable"
            }
            else if (dataType == 21) {
                FORMCUSTOMIZATION.SetFormFilterCriteriaData(null);
                document.getElementById("FieldFormName").style.display = "block";
                document.getElementById("FieldFormhiddenTableDiv").style.display = "block";
                document.getElementById("FieldMasterName").style.display = "none";
                document.getElementById("FieldhiddenTableDiv").style.display = "none";
                m_sMappingGridId = "FieldFormTable";
            }
        }
    },

    GetFormFieldsForEdit: function () {

    },

    ShowPopupToMoveField: function () {
        debugger;
        var fTr = FORMCUSTOMIZATION.HasSelectedField();
        if (fTr != null && fTr.length > 0) {
            if (!$(fTr).hasClass("defualtField")) {
                document.getElementById("selectedfield_FormTab").textContent = fTr[0].children[3].textContent.trim();
                $("#ddlAllTabs_FormFieldTab").html('<option value="" disabled selected></option>');
                $("#FormFields_list>li").each(function () {
                    if (this.dataset.tabtype == "0") {
                        var opt = "<option value='" + this.dataset.id + "'>" + this.textContent.trim() + "</option>";
                        $("#ddlAllTabs_FormFieldTab").append(opt);
                    }
                });
                $("#MCustomize_MoveField_Modal").modal('show');
            }
            else {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage('Default Field cannot Move'));
            }
        }
        else
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgSelectFieldfirst"));
    },
    
    MoveField_FormTabs: function () {
       debugger;
        var selectedTab = document.getElementById("ddlAllTabs_FormFieldTab");
        if (selectedTab.selectedIndex > 0) {
            var TabName = $(selectedTab).find("option:selected").text().trim();
            if (TabName == "General") {
                if ($("#tableType_div").find('input:checked').val() == 2) {
                    return false;
                }
            }
            var currentTab = $("#FormFields_list>li.selectedTab")[0];
            var tabCaption = currentTab.textContent.trim();
            if (TabName == tabCaption) {
                COMMON.prototype.showMessage("Field cannot move in the same table.");
                return false;
            }
            var fromTabId = currentTab.dataset.id;
            var toTabId = selectedTab.options[selectedTab.selectedIndex].value.trim();
            var tableType = $("#tableType_div").find('input:checked').val();
            var tableId = 0;
            if (tableType == 0) {
                tableId = $("#tabId_" + toTabId + " > ul>li:eq(1)")[0].dataset.tableid;
            }
            else {
                if (TabName == "General") {
                    tableId = $("#tabId_" + toTabId + " > ul>li:eq(1)")[0].dataset.tableid;
                }
                else
                    tableId = $("#tabId_" + toTabId + " > ul>li:eq(0)")[0].dataset.tableid;
            }
            var fTr = FORMCUSTOMIZATION.HasSelectedField();
            var fieldId = 0;
            if (fTr != null && fTr.length > 0) {
                fieldId = fTr[0].children[1].dataset.fieldid.trim();
            }
            var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            $("#MCustomize_MoveField_Modal").modal('hide');
            var isShowClose = false;
            if (isOpenedFromForm == "True") {
                isShowClose = true;
            }
            debugger;
            var urlPath = GLOBAL.getContextPath("MoveField_FromFormTab", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: mTypeId, iTabId: toTabId, iFieldId: fieldId, iTableType: tableType, bShowClose: isShowClose }, "HTML", true, "FORMCUSTOMIZATION.RefreshFieldsAfterMoveField_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", fromTabId);
        }
        else
        {
            COMMON.prototype.showMessage("Please select tab name.");
            return false;
        }
    },

    RefreshFieldsAfterMoveField_onSuccess: function (bs, data, tabId) {
        debugger;
        if (data != "" && bs == true) {
            if (data.length < 200) {
                COMMON.prototype.showMessage(data);
                return false;
            }
            $("#Form_Customization").html(data);
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFieldMoved"));
            if (tabId != undefined && tabId != null) {
                FORMCUSTOMIZATION.SelectTabFromTabId(tabId);
            }
        }
        else {
            COMMON.prototype.showMessage(data);
        }
        FORMCUSTOMIZATION.setHeight();
    },

    ShowPopupConfirmDelete: function (ele) {
        ////debugger;
        if (ele != undefined) {
            if (ele.parentElement.parentElement.children[7].children[0].checked) {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultFieldcannotdelete"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultFieldcannotdelete")); // "Default Field cannot delete."
                return false;
            }
            else {
                $("#MCustomize_DeleteField_Modal").modal('show');
            }
        }
    },

    DeleteSelectedField: function (ele) {
        ////debugger;
        var currentTab = $("#FormFields_list>li.selectedTab")[0];
        var tabCaption = currentTab.textContent.trim();
        var tabId = currentTab.dataset.id;
        var tab = $("#tabId_" + tabId + " > ul .current")[0];
        var tableId = tab.dataset.tableid;

        var fieldsId = [];
        var field = FORMCUSTOMIZATION.HasSelectedField();
        field = field[0].children[1].dataset.fieldid.trim();
        //var fieldId = ele.dataset.fieldid.trim();
        fieldsId.push(field);
        $("#MCustomize_DeleteField_Modal").modal('hide');
        //var tabId = $("#FormFields_list>li.selectedTab")[0].dataset.id;
        var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var isShowClose = false;
        if (isOpenedFromForm == "True") {
            isShowClose = true;
        }
        var urlPath = GLOBAL.getContextPath("DeleteExtraField_FromFormTab", "FormCustomization", "Forms");
        var Tags = "true," + tabId + "," + tableId;
        var selectedTabText = $("#tabId_" + tabId + ">ul>li.current")[0].innerText.trim();
        //FORMCUSTOMIZATION.RemoveLandingFormCacheData();
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: mTypeId, iFieldId: fieldsId, bShowClose: isShowClose }, "HTML", true, "FORMCUSTOMIZATION.RefreshFieldsAfterDel_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", Tags, selectedTabText);
    },

    RefreshFieldsAfterDel_onSuccess: function (bs, data, tag, selectedTabText) {
        //debugger;
        if (data != '"Error"' && bs == true) {
            if ($("#btnCloseFormCutomizationFromFormScreen").length <= 0) {
                $("#Form_Customization").html(data);
            }
            else {
                //$("#divSecondsub").html(data);
                $("#Form_Customization").html(data);
            }
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("FielddeletedSuccessfully"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("FielddeletedSuccessfully"), "green"); // "Field Deleted Successfully."
            var Tags = tag.split(',');
            //debugger;
            FORMCUSTOMIZATION.SelectTabFromTabId(Tags[1]);
            var tab;
            //debugger;
            if (parseInt(Tags[2]) > 0) {
                tab = $("#tabId_" + Tags[1] + ">ul>li[data-tableid=" + Tags[2] + "]");
            }
            else if (selectedTabText == "Header Details") {
                tab = $($("#tabId_" + Tags[1] + ">ul>li")[0]);
            }
            else if (selectedTabText == "Body Details") {
                tab = $($("#tabId_" + Tags[1] + ">ul>li")[1]);
            }
            else {
                tab = $("#tabId_" + Tags[1] + ">ul>li.current");
            }
            if (tab.length > 0) {
                $("#tabId_" + Tags[1] + ">ul>li").removeClass("current");
                $(tab).addClass("current");
                FORMCUSTOMIZATION.Toggle_MstrCustTabs(tab[0]);
                FORMCUSTOMIZATION.ShowHideFieldButtons(tab[0]);
            }
            FORMCUSTOMIZATION.ClearFontData();
        }
        else {
            data = data.substring(1, data.length - 1);
            COMMON.prototype.showMessage(data);
            //FORMCUSTOMIZATION.ShowAlertMessage(data);
        }
        FORMCUSTOMIZATION.setHeight();
    },

    SelectTabFromTabId: function (iTabId) {
        //debugger;
        var allTabs = $("#FormFields_list>li");
        var Tab;
        for (var i = 0; i < allTabs.length; i++) {
            var tabId = allTabs[i].dataset.id;
            if (tabId == iTabId) {
                Tab = allTabs[i];
            }
        }
        if (Tab != null && Tab != undefined) {
            FORMCUSTOMIZATION.ShowFieldsForTab(Tab);
        }
    },

    ///........ Methods for Incremental Conditions.........

    ChangeIncrementalCell: function (objCell, event) {      
        if (objCell.bLeave == true) {
            return (FORMCUSTOMIZATION.onIncrementalCellLeave(objCell, event));
        }
        else {
            FORMCUSTOMIZATION.onIncrementalCellEnter(objCell, event);
        }
    },
    onIncrementalCellLeave: function (objCell, evt) {
        //debugger;
        var element = null;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(objCell.cell);
        if (COMMON.prototype.isValidObject(objCell.ColumnAttribute.scontrolid) == true) {
            element = document.getElementById(objCell.ColumnAttribute.scontrolid);
            if (objCell.iColumn == 1) {
                objCell.processDefault(evt);
            }
            if (objCell.iColumn == 2) {
                var optSelected = $(element).find("option:selected")[0];
                var Selectedvalue = optSelected != undefined ? optSelected.value : "";
                objCell.setCellText($(optSelected).text().trim());
                objCell.setCellData("value", Selectedvalue);
                FORMCUSTOMIZATION.setIncrementalOutputText();
            }
            else if (objCell.iColumn == 3) {
                cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                switch (parseInt(cellField.CellData.value)) {
                    case 1:
                        element = document.getElementById("ddlField_FormFields");
                        objCell.setCellText($(element).find("option:selected").text().trim());
                        objCell.setCellData("value", $(element).val());
                        break;
                    case 2:
                        element = document.getElementById("ddlIncremental_LoginValue");
                        objCell.setCellText($(element).find("option:selected").text().trim());
                        objCell.setCellData("value", $(element).val());
                        break;
                    case 3:
                        element = document.getElementById("ddlIncremental_Characters");
                        objCell.setCellText($(element).find("option:selected").text().trim());
                        objCell.setCellData("value", $(element).val());
                        break;
                    case 4:
                        element = document.getElementById("ddlIncremental_DateType");
                        objCell.setCellText($(element).find("option:selected").text().trim());
                        objCell.setCellData("value", $(element).val());
                        break;
                    default:
                        element = document.getElementById("txtIncrementalTypes_ExtraFld");
                        objCell.setCellText(element.value);
                        objCell.setCellData("value", element.value);
                        break;
                }
                if (element.style.display == "block") {
                    element.style.display = "none";
                }
                FORMCUSTOMIZATION.setIncrementalOutputText();
            }
            else if (objCell.iColumn == 4) {
                cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
                if (cellField.CellData.value == 1) {
                    fldCell = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 3);
                    var opt = $("#ddlField_FormFields option[value='" + fldCell.CellData.value + "']")[0];
                    if (opt != null && opt != undefined) {
                        if (opt.dataset.datatype == 12 || opt.dataset.datatype == 14 || opt.dataset.datatype == 21) {
                            mfldOption = $("#ddlMandatoryVal_ExtraFld option:selected");
                            if (mfldOption.length > 0) {
                                objCell.setCellText(mfldOption[0].textContent.trim());
                                objCell.setCellData("value", mfldOption[0].value.trim());
                            }
                        }
                        else {
                            objCell.setCellText("");
                            objCell.setCellData("value", "");
                            objCell.processDefault(evt);
                        }
                    }
                }
                else {
                    objCell.setCellText("");
                    objCell.setCellData("value", "");
                    objCell.processDefault(evt);
                }
                FORMCUSTOMIZATION.setIncrementalOutputText();
            }
            else {
                if (objCell.iColumn == 6) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 5);
                    if (parseInt(cellField.CellData.value) >= parseInt(element.value.trim())) {
                        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgStartPositionshouldlessthanNoofcharacters"));
                        //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgStartPositionshouldlessthanNoofcharacters")); // "Start Position should less than No of characters"
                        element.value = "";
                        return false
                    }
                }
                objCell.setCellText(element.value.trim());
                objCell.setCellData("value", element.value.trim());
                FORMCUSTOMIZATION.setIncrementalOutputText();
            }
        }
        return (true);
    },
    onIncrementalCellEnter: function (objCell, evt) {
        //debugger;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(objCell.cell);
        if (objCell.iColumn == 1) {
            //return false;
            objCell.processDefault(evt);
        }
        else if (objCell.iColumn == 2) {
            var element = document.getElementById(objCell.ColumnAttribute.scontrolid);
            objCell.setControl(element, objCell.getCellData("value"));
        }
        else if (objCell.iColumn == 3) {
            cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
            switch (parseInt(cellField.CellData.value)) {
                case 1:
                    var element = document.getElementById("ddlField_FormFields");
                    break;
                case 2:
                    var element = document.getElementById("ddlIncremental_LoginValue");
                    break;
                case 3:
                    var element = document.getElementById("ddlIncremental_Characters");
                    break;
                case 4:
                    var element = document.getElementById("ddlIncremental_DateType");
                    break;
                default:
                    var element = document.getElementById("txtIncrementalTypes_ExtraFld");
                    break;
            }
            if (element.style.display == "none") {
                element.style.display = "block";
            }
            objCell.setControl(element, objCell.getCellData("value"));
        }
        else if (objCell.iColumn == 4) {
            cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 2);
            if (cellField.CellData.value == 1) {
                fldCell = FGRIDCONTROL.getCellObject(sGridCtrlId, objCell.iRow, 3);
                var opt = $("#ddlField_FormFields option[value='" + fldCell.CellData.value + "']")[0];
                if (opt != null && opt != undefined) {
                    if (opt.dataset.datatype == 12 || opt.dataset.datatype == 14 || opt.dataset.datatype == 21) {
                        var mFields = opt.dataset.mandatoryfields.split(',');
                        $("#ddlMandatoryVal_ExtraFld").html('');
                        for (var i = 0; i < mFields.length; i++) {
                            $("#ddlMandatoryVal_ExtraFld").append("<option value=" + mFields[i] + ">" + mFields[i] + "</option>");
                        }
                        $("#ddlMandatoryVal_ExtraFld").css("display", "block");
                        element = document.getElementById("ddlMandatoryVal_ExtraFld");
                        objCell.setControl(element, objCell.getCellData("value"));
                    }
                    else {
                        $("#ddlMandatoryVal_ExtraFld").css("display", "none");
                        objCell.processDefault(evt);
                    }
                }
                else {
                    objCell.processDefault(evt);
                }
            }
            else {
                $("#ddlMandatoryVal_ExtraFld").css("display", "none");
                objCell.processDefault(evt);
            }
        }
        else {
            var element = document.getElementById(objCell.ColumnAttribute.scontrolid);
            objCell.setControl(element, objCell.getCellData("value"));
        }
    },
    getIncrementalCondition: function () {
        ////debugger;
        var arrIncrementalCondition = [];
        var iTotalRows = FGRIDCONTROL.getTotalRows("tblIncremental_ExtraField");
        var sequenceNo = 0;
        for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
            var gridRowData = FGRIDCONTROL.getRowValue("tblIncremental_ExtraField", iRowIndex);
            if ((gridRowData[1].Value != null) && (gridRowData[1].Value != "") && (gridRowData[1].Value != undefined)) {
                var fieldId = document.getElementById("ModeOfPopup_ExtraField").dataset.extrafieldid.trim();
                var typeId = 0;
                var sValue = "";
                if (gridRowData[1].Value == 1) {
                    typeId = gridRowData[2].Value;
                }
                if (gridRowData[1].Value == 1) {
                    sValue = gridRowData[3].Value;
                }
                else {
                    sValue = gridRowData[2].Value;
                }
                var rowData = {
                    DataTypeId: "",
                    DefaultValue: "",
                    FieldID: fieldId,
                    FieldName: "",
                    LinkFormId: "",
                    NumberOfChars: gridRowData[5].Value,
                    OldFieldID: typeId,
                    OldTypeID: "",
                    Sequence: sequenceNo,
                    StartPosition: gridRowData[4].Value,
                    Type: gridRowData[1].Value,
                    TypeID: typeId,
                    Value: sValue,
                }
                arrIncrementalCondition.push(rowData);
                sequenceNo += 1;
            }
        }
        ////debugger;
        return arrIncrementalCondition;
    },
    setIncrementalCondition: function (arrCondtion) {
        debugger;
        if (arrCondtion != null) {
            for (var i = 0; i < arrCondtion.length; i++) {
                for (var j = 2; j <= 6; j++) {
                    var cell = FGRIDCONTROL.getCellObject("tblIncremental_ExtraField", (i + 1), j);
                    switch (j) {
                        case 2:
                            var ddlTypes = document.getElementById("ddlIncremental_Type_ExtraFld");
                            $(ddlTypes).val(arrCondtion[i].Type);
                            cell.setCellText($(ddlTypes).find("option:selected").text());
                            cell.setCellData("value", arrCondtion[i].Type);
                            break;
                        case 3:
                            switch (arrCondtion[i].Type) {
                                case 1:
                                    var ddlFields = document.getElementById("ddlField_FormFields");
                                    $(ddlFields).val(arrCondtion[i].TypeID);
                                    cell.setCellText($(ddlFields).find("option:selected").text());
                                    cell.setCellData("value", arrCondtion[i].TypeID);
                                    break;
                                case 2:
                                    var ddlLogin = document.getElementById("ddlIncremental_LoginValue");
                                    $(ddlLogin).val(arrCondtion[i].Value);
                                    cell.setCellText($(ddlLogin).find("option:selected").text());
                                    cell.setCellData("value", arrCondtion[i].Value);
                                    break;
                                case 3:
                                    var ddlChars = document.getElementById("ddlIncremental_Characters");
                                    $(ddlChars).val(arrCondtion[i].Value);
                                    cell.setCellText($(ddlChars).find("option:selected").text());
                                    cell.setCellData("value", arrCondtion[i].Value);
                                    break;
                                case 4:
                                    var ddlDateTypes = document.getElementById("ddlIncremental_DateType");
                                    $(ddlDateTypes).val(arrCondtion[i].Value);
                                    cell.setCellText($(ddlDateTypes).find("option:selected").text());
                                    cell.setCellData("value", arrCondtion[i].Value);
                                    break;
                                default:
                                    cell.setCellText(arrCondtion[i].Value);
                                    cell.setCellData("value", arrCondtion[i].Value);
                                    break;
                            }
                            break;
                        case 4:
                            if (arrCondtion[i].Type == 1) {
                                var optFields = $("#ddlField_FormFields option[value='" + arrCondtion[i].TypeID + "']")[0];
                                if (optFields.dataset.datatype == 12 || optFields.dataset.datatype == 14 || optFields.dataset.datatype == 21) {
                                    cell.setCellText(arrCondtion[i].Value);
                                    cell.setCellData("value", arrCondtion[i].Value);
                                }
                            }
                            break;
                        case 5:
                            cell.setCellText(arrCondtion[i].StartPosition);
                            cell.setCellData("value", arrCondtion[i].StartPosition);
                            break;
                        case 6:
                            cell.setCellText(arrCondtion[i].NumberOfChars);
                            cell.setCellData("value", arrCondtion[i].NumberOfChars);
                            break;

                    }
                }
            }
        }
    },

    setIncrementalOutputText: function () {
       debugger;
        var strOutputText = "";
        var strTemp = "";
        var behaviour = parseInt(document.getElementById("Behaviour").options[document.getElementById("Behaviour").selectedIndex].value.trim());
        if (behaviour == 5) {
            var iTotalRows = FGRIDCONTROL.getTotalRows("tblIncremental_ExtraField");
            for (var i = 0; i < iTotalRows; i++) {
                var objType = FGRIDCONTROL.getCellObject("tblIncremental_ExtraField", (i + 1), 2);
                var iSelectedType = parseInt(objType.getCellData("value"));
                if (iSelectedType > 0) {
                    var objStartingCharPosition = FGRIDCONTROL.getCellObject("tblIncremental_ExtraField", (i + 1), 5);
                    var iStartingCharPosition = objStartingCharPosition.getCellData("value") == undefined ? 0 : objStartingCharPosition.getCellData("value");
                    var objNoOfCharacters = FGRIDCONTROL.getCellObject("tblIncremental_ExtraField", (i + 1), 6);
                    var iNoOfCharacters = objNoOfCharacters.getCellData("value") == undefined ? 0 : objNoOfCharacters.getCellData("value");
                    var objValue = FGRIDCONTROL.getCellObject("tblIncremental_ExtraField", (i + 1), 3);
                    var sValue = objValue.getCellData("value");
                    switch (iSelectedType) {
                        case 1:
                            if (iNoOfCharacters > 0) {
                                strTemp = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
                                strOutputText += strTemp.substring(iStartingCharPosition, iNoOfCharacters);
                            }
                            break;
                        case 2:
                            if (iNoOfCharacters > 0) {
                                strTemp = FORMCUSTOMIZATION.GetResourceMessage("lblSu");
                                strOutputText += strTemp.substring(iStartingCharPosition, iNoOfCharacters);
                            }
                            break;
                        case 3:
                            if (iNoOfCharacters > 0) {
                                var objCharacterInput = FGRIDCONTROL.getCellObject("tblIncremental_ExtraField", (i + 1), 3);
                                var cCharacterInput = objCharacterInput.getCellData("value");
                                strTemp = cCharacterInput;
                                if (strTemp.trim() != "") {
                                    for (var j = 0; j < iNoOfCharacters; j++) {
                                        strOutputText += strTemp;
                                    }
                                }
                            }
                            break;
                        case 4:
                            if (sValue.trim() != "") {
                                var sDate = new Date();
                                var sDD = sDate.getDate();
                                var sMM = sDate.getMonth() + 1; //January is 0
                                var sYY = sDate.getYear();
                                var sYYY = sDate.getFullYear();
                                switch (sValue) {
                                    case "DD":
                                        strOutputText += sDD;
                                        break;
                                    case "MM":
                                        strOutputText += sMM;
                                        break;
                                    case "MMM":
                                        strOutputText += sMM;
                                        break;
                                    case "YY":
                                        strOutputText += sYY;
                                        break;
                                    case "YYY":
                                        strOutputText += sYYY;
                                        break;
                                }
                            }
                            break;
                        case 5:
                        case 6:
                            if (sValue != null && sValue != undefined && sValue.trim() != "") {
                                var iLen = parseInt(iNoOfCharacters - parseInt(sValue.length));
                                for (k = 0; k < iLen; k++) {
                                    strOutputText += '0';
                                }
                                strOutputText += sValue;
                            }
                            break;
                        case 7:
                            if (iNoOfCharacters >= 1) {
                                strTemp = sValue;
                                strOutputText += strTemp.substring(iStartingCharPosition, iNoOfCharacters);
                            }
                            break;
                    }
                    if (strOutputText.length == 0)
                        strOutputText = FORMCUSTOMIZATION.GetResourceMessage("lblundefined");
                }
            }
            $("#lblIncrementalOutput").text("Output : " + strOutputText);
        }
    },
    ///........ Methods for Unique Constaints Tab ........

    SelectConstraintForEdit: function (ele) {
        debugger;
        var ucId = OPTIONCONTROL.getControlValue("txtConstraintName");
        var ucName = OPTIONCONTROL.getControlText("txtConstraintName");

        if (ucId > 0) {
            var msUcList = $("#FormConstraints_list")[0].children;
            var tabId = "";
            var tableType = "";
            var eleUC;
            for (var i = 0; i < msUcList.length; i++) {
                if (msUcList[i].dataset.id == ucId) {
                    tabId = msUcList[i].dataset.tabid;
                    tableType = msUcList[i].dataset.tbltype;
                    eleUC = msUcList[i].children;
                }
            }
            //////debugger;
            if (tabId != "") {
                $('#ddlConstraintTabList option[data-id=' + tabId + ']').prop("selected", "selected");
            }

            //for (var i = 0; i < ele.parentElement.children.length; i++) {
            //    ele.parentElement.children[i].className = "";
            //}
            //document.getElementById("txtConstraintName").value = ele.textContent.trim();
            //var tabId = ele.dataset.tabid;
            //var allTabs = document.getElementById("allTabsForConstraint").children;
            //var eleTab;
            //for (var i = 0; i < allTabs.length; i++) {
            //    if (allTabs[i].dataset.id == tabId) {
            //        eleTab = allTabs[i];
            //    }
            //}
            //FORMCUSTOMIZATION.SelectTab_ForConstraint(eleTab);
            //ele.className = "selected-constraint";

            //var rdo = document.getElementById("allTableTaypes").getElementsByTagName("input");
            //FORMCUSTOMIZATION.showAllColumnFields(rdo[ele.dataset.tbltype]);
            //rdo[ele.dataset.tbltype].checked = true;
            //for (var i = 0; i < rdo.length; i++) {
            //    rdo[i].disabled = true;
            //}

            ////debugger;
            if (tableType == 0) {
                var ucFieldsTab = document.getElementById("tab_Header_UcFields");
                FORMCUSTOMIZATION.toggleUcTabs(ucFieldsTab);
                FORMCUSTOMIZATION.showAllColumnFields(tableType);
                div_id = "chkList_HeaderFields_" + tabId;
                FORMCUSTOMIZATION.checkChkbox_ForConstraint("tabId_Header", div_id, eleUC);
            }
            else if (tableType == 1) {
                var ucFieldsTab = document.getElementById("tab_Body_UcFields");
                FORMCUSTOMIZATION.toggleUcTabs(ucFieldsTab);
                FORMCUSTOMIZATION.showAllColumnFields(tableType);
                div_id = "chkList_BodyFields_" + tabId;
                FORMCUSTOMIZATION.checkChkbox_ForConstraint("tabId_Body", div_id, eleUC);
            }
            else if (tableType == 2) {
                var ucFieldsTab = document.getElementById("tab_Footer_UcFields");
                FORMCUSTOMIZATION.toggleUcTabs(ucFieldsTab);
                FORMCUSTOMIZATION.showAllColumnFields(tableType);
                div_id = "chkList_FooterFields_" + tabId;
                FORMCUSTOMIZATION.checkChkbox_ForConstraint("tabId_Footer", div_id, eleUC);
            }


            //var allDiv = document.getElementById("allchklistforfields").children[0].children;
            //for (var i = 0; i < 3; i++) {
            //    var div_id;
            //    var allChkChecked = ele.children[0].children;
            //    for (var j = 0; j < allDiv.length; j++) {
            //        var id = allDiv[j].id;
            //        if (id == div_id) {
            //            var chk_lst = allDiv[j].children;
            //            for (var k = 0; k < chk_lst.length; k++) {
            //                if (allChkChecked[i].children[0].children[0].dataset.fieldid == chk_lst[k].dataset.fieldid) {
            //                    chk_lst[k].children[0].children[0].children[0].children[0].checked = true;
            //                    if (chk_lst[k].dataset.fieldname.trim() == "sCode") {
            //                        chk_lst[k].children[0].children[0].children[0].children[0].disabled = true;
            //                    }
            //                }
            //            }
            //            document.getElementById(div_id).style.display = "block";
            //        }
            //        else {
            //            if (id != div_id) {
            //                allDiv[j].style.display = "none";
            //            }
            //        }
            //    }
            //}
            //debugger;
            //$("#btnAddOrEdit_UniqueConstraints").text("Edit");
            //$("#btnAddOrEdit_UniqueConstraints").text("Save");
            if (FCommon.UI.isValidObject(document.getElementById("btnAddOrEdit_UniqueConstraints")) == true) {
                $("#btnAddOrEdit_UniqueConstraints")[0].children[0].title = "Edit";
            }
            $("#ddlConstraintTabList").prop("disabled", true);
        }
        else {
            //debugger;
            //$("#btnAddOrEdit_UniqueConstraints").text("Save");
            //$("#btnAddOrEdit_UniqueConstraints")[0].children[0].title = "Save";
            if (FCommon.UI.isValidObject(document.getElementById("btnAddOrEdit_UniqueConstraints")) == true) {
                $("#btnAddOrEdit_UniqueConstraints")[0].children[0].title = "Edit";
            }
            $("#ddlConstraintTabList option:first-child").prop("selected", true);
            FORMCUSTOMIZATION.SelectTab_ForConstraint(document.getElementById("ddlConstraintTabList"));
            OPTIONCONTROL.setControlText("txtConstraintName", ucName);
            $("#ddlConstraintTabList").prop("disabled", false);
        }
    },

    SelectTab_ForConstraint: function (ele) {
        //debugger;

        //var cntrlist = document.getElementById("FormConstraints_list").children;
        //var cntrSelected = false;
        //for (var i = 0; i < cntrlist.length; i++) {
        //    if (cntrlist[i].className == "selected-constraint") {
        //        cntrSelected = true;
        //    }
        //}

        //if (cntrSelected != true) {
        //    //var allContrs = document.getElementById("allTabsForConstraint").children;
        //    var preSelection_Id = null;
        //    //for (var i = 0; i < allContrs.length; i++) {
        //    //    if (allContrs[i].className != "") {
        //    //        preSelection_Id = allContrs[i].dataset.id;
        //    //        allContrs[i].className = "";
        //    //    }
        //    //}

        //    preSelection_Id = $("#ddlConstraintTabList options:selected")[0].dataset.id;
        //    ele.className = "selectedTab";
        //    var tabId = ele.dataset.id;
        //    var isDefault = ele.textContent.trim();
        //    if (isDefault == "General") {
        //        document.getElementById("tableType_main").style.display = "block";
        //    }
        //    else {
        //        document.getElementById("tableType_main").style.display = "none";
        //    }
        //    if (tabId != preSelection_Id) {
        //        var rdo = document.getElementById("allTableTaypes").getElementsByTagName("input")[1];
        //        rdo.checked = true;
        //    }
        //}

        var ucId = OPTIONCONTROL.getControlValue("txtConstraintName");
        if (ucId > 0) {
            OPTIONCONTROL.clear("txtConstraintName", false);
        }
        FORMCUSTOMIZATION.displayUcFields(document.getElementById("tab_Header_UcFields"));
    },

    displayUcFields: function (ele) {
        //////debugger;
        if (ele != null) {
            var ucId = OPTIONCONTROL.getControlValue("txtConstraintName");
            if (ucId > 0) {
                OPTIONCONTROL.setControlText("txtConstraintName", "")
                $('#ddlConstraintTabList option:first-child').prop("selected", "selected");
            }
            FORMCUSTOMIZATION.toggleUcTabs(ele);
            FORMCUSTOMIZATION.showAllColumnFields(ele.dataset.value);
            //debugger;
            if (document.getElementById("btnAddOrEdit_UniqueConstraints") != null && document.getElementById("btnAddOrEdit_UniqueConstraints") != undefined) {
                //document.getElementById("btnAddOrEdit_UniqueConstraints").textContent = "Save";
                $("#btnAddOrEdit_UniqueConstraints")[0].children[0].title = "Save";
            }
        }
    },

    showAllColumnFields: function (iTblType) {
        //debugger;
        if ($("#ddlConstraintTabList option:selected").length > 0) {
            //var iTblType = ele.dataset.value.trim();
            var chkListId = $("#ddlConstraintTabList option:selected")[0].dataset.id;
            //for (var iTblType = 0; iTblType < 3; iTblType++) {
            if (iTblType == 0) {
                var divId = "chkList_HeaderFields_" + chkListId;
                FORMCUSTOMIZATION.showChkbox_ForSelection("tabId_Header", divId, chkListId);
            }
            else if (iTblType == 1) {
                var divId = "chkList_BodyFields_" + chkListId;
                FORMCUSTOMIZATION.showChkbox_ForSelection("tabId_Body", divId, chkListId);
            }
            else {
                var divId = "chkList_FooterFields_" + chkListId;
                FORMCUSTOMIZATION.showChkbox_ForSelection("tabId_Footer", divId, chkListId);
            }
            //}
        }

    },

    showChkbox_ForSelection: function (tblFieldType, div_Id, chkList_Id) {
        //////debugger;
        var allDiv = document.getElementById(tblFieldType).children[0].children;
        for (var i = 0; i < allDiv.length; i++) {
            var id = allDiv[i].id;
            if (id == div_Id) {
                var chk_lst = allDiv[i].children;
                for (var k = 0; k < chk_lst.length; k++) {
                    chk_lst[k].children[0].children[0].children[0].children[0].checked = false;
                }
                document.getElementById(div_Id).style.display = "flex";
            }
            else {
                allDiv[i].style.display = "none";
            }
        }
    },

    checkChkbox_ForConstraint: function (tblFieldType, div_id, arrFields) {
        var allDiv = document.getElementById(tblFieldType).children[0].children;
        if (arrFields.length > 0) {
            for (var i = 0; i < arrFields.length; i++) {
                for (var j = 0; j < allDiv.length; j++) {
                    var id = allDiv[j].id;
                    if (id == div_id) {
                        var chk_lst = allDiv[j].children;
                        for (var k = 0; k < chk_lst.length; k++) {
                            if (arrFields[i].dataset.fieldid == chk_lst[k].dataset.fieldid) {
                                chk_lst[k].children[0].children[0].children[0].children[0].checked = true;
                            }
                        }
                        document.getElementById(div_id).style.display = "flex";
                    }
                    else {
                        if (id != div_id) {
                            allDiv[j].style.display = "none";
                        }
                    }
                }
            }
        }
    },

    toggleUcTabs: function (ele) {
        //debugger;
        if (ele != null) {
            var iTableType = ele.dataset.value;
            if (iTableType == 0) {
                $("#tabId_Header").slideDown("fast");
                if ($("#tab_Header_UcFields > i").hasClass("icon-new")) {
                    $("#tab_Footer_UcFields > i").removeClass("icon-minus").addClass("icon-new");
                    $("#tab_Body_UcFields > i").removeClass("icon-minus").addClass("icon-new");
                    $("#tab_Header_UcFields > i").removeClass("icon-new").addClass("icon-minus");
                }
                $("#tabId_Footer, #tabId_Body").slideUp("fast");
            }
            else if (iTableType == 1) {
                $("#tabId_Body").slideDown("fast");
                if ($("#tab_Body_UcFields > i").hasClass("icon-new")) {
                    $("#tab_Body_UcFields > i").removeClass("icon-new").addClass("icon-minus");
                    $("#tab_Footer_UcFields > i").removeClass("icon-minus").addClass("icon-new");
                    $("#tab_Header_UcFields > i").removeClass("icon-minus").addClass("icon-new");
                }
                $("#tabId_Footer, #tabId_Header").slideUp("fast");
            }
            else {
                $("#tabId_Footer").slideDown("fast");
                if ($("#tab_Footer_UcFields > i").hasClass("icon-new")) {
                    $("#tab_Footer_UcFields > i").removeClass("icon-new").addClass("icon-minus");
                    $("#tab_Body_UcFields > i").removeClass("icon-minus").addClass("icon-new");
                    $("#tab_Header_UcFields > i").removeClass("icon-minus").addClass("icon-new");
                }
                $("#tabId_Header, #tabId_Body").slideUp("fast");
            }
        }
    },

    ClearFields_UcNew: function () {
        //////debugger;
        //var cnstrs = document.getElementById("FormConstraints_list").children;
        //for (var i = 0; i < cnstrs.length; i++) {
        //    cnstrs[i].className = "";
        //}
        //document.getElementById("txtConstraintName").value = "";
        //var allInputs = document.getElementById('allTableTaypes').getElementsByTagName('input');
        //for (var i = 0; i < allInputs.length; i++) {
        //    if (allInputs[i].type.toLowerCase() == "radio") {
        //        allInputs[i].disabled = false;
        //    }
        //}
        //FORMCUSTOMIZATION.SelectTab_ForConstraint(document.getElementById("allTabsForConstraint").children[0]);

        //var rdo = document.getElementById("allTableTaypes").getElementsByTagName("input")[1];
        //rdo.checked = true;
        //FORMCUSTOMIZATION.showAllColumnFields(rdo);
        var ucId = OPTIONCONTROL.getControlValue("txtConstraintName");
        var ucName = OPTIONCONTROL.getControlText("txtConstraintName");
        if (ucId > 0 && ucName != "") {
            OPTIONCONTROL.clear("txtConstraintName", false);
        }
        //debugger;
        $("#ddlConstraintTabList option:first-child").prop("selected", true);
        //$("#btnAddOrEdit_UniqueConstraints").text("Save");
        if (FCommon.UI.isValidObject(document.getElementById("btnAddOrEdit_UniqueConstraints")) == true) {
            $("#btnAddOrEdit_UniqueConstraints")[0].children[0].title = "Save";
        }        
    },

    AddNewOrEditConstraint: function (ele) {
        //debugger;
        var constraintName = OPTIONCONTROL.getControlText("txtConstraintName").trim();
        if (constraintName == "") {
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterConstraintname"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterConstraintname")); // "Enter Constraint name."
            //document.getElementById("btnAddOrEdit_UniqueConstraints").textContent = "Save";
            $("#btnAddOrEdit_UniqueConstraints")[0].children[0].title = "Save";
            document.getElementById("txtConstraintName").focus();
            return false;
        }
        var selectedTab = $("#ddlConstraintTabList option:selected")[0];
        var TableType;
        if ($("#tabId_Header").css("display") == "block") {
            TableType = 0;
        }
        else if ($("#tabId_Body").css("display") == "block") {
            TableType = 1;
        }
        else if ($("#tabId_Footer").css("display") == "block") {
            TableType = 2;
        }
        var tableTypeName;
        if (TableType == 0) {
            tableTypeName = "HeaderFields_";
        }
        else if (TableType == 1) {
            tableTypeName = "BodyFields_";
        }
        else {
            tableTypeName = "FooterFields_"
        }
        var allChkList = $("#chkList_" + tableTypeName + selectedTab.dataset.id).find("input:checked");
        var selectedFields = [];
        //debugger;
        if (allChkList.length > 0) {
            var Consts = $("#FormConstraints_list>li");
            for (var i = 0; i < Consts.length; i++) {
                if ($("#btnAddOrEdit_UniqueConstraints")[0].children[0].title.trim() != "Edit") {
                    if (constraintName.toLowerCase() == Consts[i].textContent.trim().toLowerCase()) {
                        COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgUniqueConstrainstalreadyexist"));
                        //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgUniqueConstrainstalreadyexist"));//"Unique Constraint already exist with this Name."
                        return false;
                    }
                }
            }
            for (var i = 0; i < Consts.length; i++) {
                if ($("#btnAddOrEdit_UniqueConstraints")[0].children[0].title.trim() != "Edit") {
                    if (allChkList.length == 1 && allChkList[0].parentElement.parentElement.parentElement.textContent.trim() == "Code") {
                        COMMON.prototype.showMessage("[Code] Field contains in other UC namely [Default Code Constraint].");
                        //FORMCUSTOMIZATION.ShowAlertMessage("[Code] Field contains in other UC namely [Default Code Constraint].");
                        return false;
                    }
                }
            }

            var uConstraints = [];
            var uId = OPTIONCONTROL.getControlValue("txtConstraintName");
            var uName = OPTIONCONTROL.getControlText("txtConstraintName");
            var utabId = selectedTab.dataset.id;
            var uTableTyep = TableType;
            var constraintFlds = [];
            for (var i = 0; i < allChkList.length; i++) {
                var fldid = allChkList[i].parentElement.parentElement.parentElement.parentElement.dataset.fieldid;
                var fldname = allChkList[i].parentElement.parentElement.parentElement.parentElement.dataset.fieldname;
                var newfldId = fldid;
                var oldfldId = fldid;
                var Constraint = {
                    FieldId: fldid,
                    FieldName: fldname,
                    NewFieldId: newfldId,
                    OldFieldId: oldfldId,
                }
                constraintFlds.push(Constraint);
            }
            var mUConstraint = {
                ConstraintFields: constraintFlds,
                ConstraintId: uId,
                ConstraintName: uName,
                TabId: utabId,
                TableType: uTableTyep,
            }
            uConstraints.push(mUConstraint);

            ////debugger;
            COMMON.prototype.showMessage("Constraint Saved Successfully.");
            FORMCUSTOMIZATION.UpdateFormCustomization(uConstraints, null, null, null);
            //FORMCUSTOMIZATION.UpdateFormCustomization(uConstraints, null, null);

            ///////     working for constraint continuessss.....................

            //var liIndex = 0;
            //var liSelectedId = "";
            ////////debugger;
            //if (ele.textContent == "Edit") {
            //    for (var i = 0; i < Consts.length; i++) {
            //        if (constraintName.toLowerCase() == Consts[i].textContent.trim().toLowerCase()) {
            //            liIndex = i;
            //        }
            //    }
            //    liSelectedId = $("#FormConstraints_list").find('.selected-constraint').attr("data-id");
            //}
            //var LiHtml = '<li data-id="' + liSelectedId + '" data-tabid="' + selectedTab.dataset.id + '" data-tbltype="' + TableType + '" class="" >' + constraintName;
            //for (var i = 0; i < allChkList.length; i++) {
            //    var id = allChkList[i].parentElement.parentElement.parentElement.parentElement.dataset.fieldid;
            //    var name = allChkList[i].parentElement.parentElement.parentElement.parentElement.dataset.fieldname;
            //    var inputHidden = '<input type="hidden" data-fieldid="' + id + '" data-fieldname="' + name + '" data-oldfieldid="' + id + '" data-newfieldid="' + id + '">';
            //    LiHtml += inputHidden;
            //}
            //LiHtml += "</li>";
            ////////debugger;
            //if (ele.textContent == "Edit") {
            //    $("#FormConstraints_list>li").eq(liIndex).after(LiHtml);
            //    $("#FormConstraints_list>li:eq(" + liIndex + ")").remove();
            //}
            //else {
            //    $("#FormConstraints_list").append(LiHtml);
            //}

            ////FORMCUSTOMIZATION.ClearFields_ForNewConstraint();
            //FORMCUSTOMIZATION.ShowAlertMessage("Unique Constraint Successfully Updated. Update the Form For Changes.");
            //var urlPath = GLOBAL.getContextPath("SaveFormConstraint", "FormCustomization", "Forms");
            //var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFieldFormId: fFormId, iFormId: FormId, sCaption: caption, sName: name, iTabType: tabType, sAlias: alias, sTabFieldName: tabFieldName, sTabFieldCaption: tabFieldCaption }, "HTML", true, "FORMCUSTOMIZATION.RefreshConstraints_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgPleaseselectatleastonefieldtoaddUC"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgPleaseselectatleastonefieldtoaddUC"));// "Please select atleast one field to add Unique Constraint."
            return false;
        }

    },
    RefreshConstraints_onSuccess: function (bs, data) {
        debugger;
        if (data != '"Error"' && bs == true) {
            $("#Form_Customizing_div").html('').html(data);
            COMMON.prototype.showMessage("Constraint Added Successfully.");
            //FORMCUSTOMIZATION.ShowAlertMessage("Constraint Added Successfully.", "green");
        }
        else {
            data = data.substring(1, data.length - 1);
            COMMON.prototype.showMessage(data);
            //FORMCUSTOMIZATION.ShowAlertMessage(data);
        }
    },
    DeleteConstraint: function () {
        debugger;
        var ucId = OPTIONCONTROL.getControlValue("txtConstraintName");
        var ucName = OPTIONCONTROL.getControlText("txtConstraintName");
        if (ucId > 0 && ucName != "") {
            if (ucName.trim() == "Default Code Constraint") {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgcannotdeleteDefaultConstrainst"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgcannotdeleteDefaultConstrainst"));//  "Cannot delete Default Constraint."
                return false;
            }
            else {
                var arrDeletingUCId = [];
                arrDeletingUCId.push(ucId);
                COMMON.prototype.showMessage("Constraint Deleted Successfully.");
                FORMCUSTOMIZATION.UpdateFormCustomization(null, arrDeletingUCId, null, null);
                //FORMCUSTOMIZATION.UpdateFormCustomization(null, arrDeletingUCId, null);
            }
        }
        else {
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgSelecttheUniqueConstrainst"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgSelecttheUniqueConstrainst"));// "Select the Unique Constraint."
            return false;
        }
    },

    CheckConstraintName: function (ele) {
        //debugger;
        var ucName = OPTIONCONTROL.getControlText("txtConstraintName").trim();
        var UCSelectedId = OPTIONCONTROL.getControlValue("txtConstraintName");
        if (ucName == "") {
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterConstraintname"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterConstraintname")); //  "Enter Constraint name"
            ele.checked = false;
        }
        else {
            var allUC = $("#FormConstraints_list").find("input[type='hidden']");
            if (allUC.length > 0) {
                var bFoundField = false;
                var fieldName = "";
                var oldUcName = "";
                for (var i = 0; i < allUC.length; i++) {
                    var eleGrandParent = ele.parentElement.parentElement;  // fieldname
                    if (allUC[i].dataset.fieldid === eleGrandParent.dataset.fieldid && UCSelectedId != allUC[i].parentElement.dataset.id) /// added this condition as per window's validation for selecting same fields in other constraint
                    {
                        bFoundField = true;
                        fieldName = ele.parentElement.textContent.trim();
                        oldUcName = allUC[i].parentElement.textContent.trim();
                        break;
                    }
                }
                if (bFoundField) {
                    COMMON.prototype.showMessage("[ " + fieldName + " ] Field contains in other UC namely [ " + oldUcName + " ]");
                    //FORMCUSTOMIZATION.ShowAlertMessage("[ " + fieldName + " ] Field contains in other UC namely [ " + oldUcName + " ]");
                    ele.checked = false;
                }
            }

        }
    },

    ///........ Methods for Rules Tab ........

    AddNewRule: function (ctrlElement) {

    },

    DeleteRule: function (ctrlElement) {

    },

    ShowFieldsList_Formating: function (ctrlElement) {
        ////debugger;
        var $this = $(ctrlElement);
        var tblName = ctrlElement.parentElement.parentElement.parentElement.id;
        var trCount = $("#" + tblName + " tbody tr").length;
        var currentTrIndex = $this.parent().index() + 1;
        if (trCount == currentTrIndex) {
            $("#" + tblName + " tbody:last").
                append("<tr>" +
                    "<td ondblclick='FORMCUSTOMIZATION.ShowFieldsList_Formating(this);'><input type='text' class='form-control clsShow-control' data-id='' readonly /></td>" +
                    "<td ondblclick='FORMCUSTOMIZATION.ShowChangeValues(this);'><input type='text' class='form-control clsShow-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='checkbox' class='' readonly /></td>" +
                    "<td><input type='checkbox' class='' /></td>" +
                    "<td><input type='checkbox' class='' /></td>" +
                    "<td><input type='checkbox' class='' /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly />" +
                        "<select class='custom-select clsHide-control'>" +
                        "<option value='0'>None</option>" +
                        "<option value='1'>Left</option>" +
                        "<option value='2'>Right</option>" +
                        "<option value='3'>Center</option>" +
                        "</select></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly />" +
                        "<select class='custom-select clsHide-control'>" +
                        "<option value='0'>None</option>" +
                        "<option value='1'>Upper</option>" +
                        "<option value='2'>Lower</option>" +
                        "<option value='3'>Proper</option>" +
                        "<option value='4'>Sentence</option>" +
                        "</select></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly /><input type='button' class='Fbutton clsHide-control' readonly value='Font' /></td>" +
                    "</tr>");
        }
        //////debugger;
        var txtInput = $this.find('input').attr('data-id');
        if (txtInput != "" || txtInput != undefined) {
            $("#FieldsDetails_OptionNames_RuleTab").val(txtInput)
        }
        else {
            $("#FieldsDetails_OptionNames_RuleTab").val($("#FieldsDetails_OptionNames_RuleTab option:first").val());
        }

        var ddlFields = $("#FieldsDetails_OptionNames_RuleTab");
        $this.append(ddlFields);
        $this.find('input')[0].style.display = "none";
        var ddl = $this.find('select')[0];
        ddl.style.display = "block";
        ddl.focus();
    },

    ChangeField_Formating: function (ctrlElement) {
        var dllSelectedOption = $(ctrlElement).find('option:selected');
        var ddlText = dllSelectedOption[0].innerHTML;
        var ddlVal = dllSelectedOption[0].value;
        var txtField = $(ctrlElement).parent().find('input');
        txtField[0].value = ddlText;
        txtField[0].id = ddlVal
        txtField[0].style.display = "block";
        ctrlElement.style.display = "none";
    },

    ShowChangeValues: function (ctrlElement) {
        ctrlElement.children[0].style.display = "none";
        var ddlOperators = document.getElementById('ddlChangeValue_FieldsOption');
        ctrlElement.appendChild(ddlOperators);
        ddlOperators.style.display = "block";
        ddlOperators.focus();
    },

    ChangeField: function (ctrlElement) {
        ////debugger;
        var dllSelectedOption = $(ctrlElement).find('option:selected');
        var ddlText = dllSelectedOption[0].innerHTML;
        var ddlVal = dllSelectedOption[0].value;
        var preTag = ctrlElement.previousElementSibling.tagName;
        if (preTag == "INPUT") {
            var txtField = $(ctrlElement).parent().find('input');
            txtField[0].value = ddlText;
            txtField[0].id = ddlVal
            txtField[0].style.display = "block";
        }
        else if (preTag == "A") {
            ctrlElement.previousElementSibling.innerHTML = dllSelectedOption[0].innerHTML;
            ctrlElement.previousElementSibling.style.display = "block";
        }
        ctrlElement.style.display = "none";
    },

    showField: function (ctrlElement) {
        ctrlElement.style.display = "none";
        ctrlElement.nextElementSibling.style.display = "block";
        ctrlElement.nextElementSibling.focus();
    },
    hideField: function (ctrlElement) {
        ctrlElement.previousElementSibling.innerHTML = ctrlElement.options[ctrlElement.selectedIndex].text;
        ctrlElement.style.display = "none";
        ctrlElement.previousElementSibling.style.display = "block";
    },

    showInputForBracket: function (ctrlElement) {
        //////debugger;
        ctrlElement.nextElementSibling.value = ctrlElement.innerHTML;
        FORMCUSTOMIZATION.showField(ctrlElement);
    },
    hideInputOnBlur: function (ctrlElement, typeOfBracket) {
        //////debugger;
        if (ctrlElement.value.trim() != "") {
            ctrlElement.style.display = "none";
            ctrlElement.previousElementSibling.innerHTML = ctrlElement.value.trim();
            ctrlElement.previousElementSibling.style.display = "block";
        }
        else {
            if (typeOfBracket == "open") {
                alert("Opening Bracket cannot be leave empty.");
            }
            else {
                alert("Closing Bracket cannot be leave empty.");
            }
            ctrlElement.focus();
        }
    },

    showFieldsListForCondition: function (ctrlElement) {
        ctrlElement.style.display = "none";
        var ddlFieldsDetails = document.getElementById('FieldsDetails_OptionNames_RuleTab');
        ctrlElement.parentElement.appendChild(ddlFieldsDetails);
        ddlFieldsDetails.style.display = "block";
        ddlFieldsDetails.focus();
    },

    showOperatorsForCondition: function (ctrlElement) {
        ////debugger;
        ctrlElement.style.display = "none";
        var ddlOperators = document.getElementById('ddlOperatorsForRule');
        ctrlElement.parentElement.appendChild(ddlOperators);
        ddlOperators.style.display = "block";
        ddlOperators.focus();
    },
    hideOperatorOnBlur: function (ctrlElement) {
        ////debugger;
        FORMCUSTOMIZATION.hideField(ctrlElement);
        //var selectedOpt = $("#" + ctrlElement.id + " option:selected");
        //ctrlElement.previousElementSibling.innerHTML = selectedOpt[0].innerHTML;

        //ctrlElement.previousElementSibling.innerHTML = ctrlElement.options[ctrlElement.selectedIndex].text;
        //ctrlElement.style.display = "none";
        //ctrlElement.previousElementSibling.style.display = "block";
    },

    showCompareOption: function (ctrlElement) {
        FORMCUSTOMIZATION.showField(ctrlElement);
        //ctrlElement.style.display = "none";
        //ctrlElement.nextElementSibling.style.display = "block";
        //ctrlElement.nextElementSibling.focus();
    },
    hideCompareOption: function (ctrlElement) {
        ////debugger;
        FORMCUSTOMIZATION.hideField(ctrlElement);
        //ctrlElement.previousElementSibling.innerHTML = ctrlElement.options[ctrlElement.selectedIndex].text;
        //ctrlElement.style.display = "none";
        //ctrlElement.previousElementSibling.style.display = "block";
    },

    showComparingFields: function (ctrlElement) {
        ////debugger;
        FORMCUSTOMIZATION.showField(ctrlElement);
        //ctrlElement.style.display = "none";
        //ctrlElement.nextElementSibling.style.display = "block";
        //ctrlElement.nextElementSibling.focus();
    },
    hideComparingFields: function (ctrlElement) {
        ////debugger;
        if (ctrlElement.tagName == "SELECT") {
            ctrlElement.previousElementSibling.innerHTML = ctrlElement.options[ctrlElement.selectedIndex].text;
        }
        else if (ctrlElement.tagName == "INPUT") {
            if (ctrlElement.value.trim() != "") {
                ctrlElement.previousElementSibling.innerHTML = ctrlElement.value.trim();
            }
            else {
                alert("Value cannot be leave empty.");
            }
        }
        ctrlElement.style.display = "none";
        ctrlElement.previousElementSibling.style.display = "block";
    },

    showConjunction: function (ctrlElement) {
        FORMCUSTOMIZATION.showField(ctrlElement);
        //ctrlElement.style.display = "none";
        //ctrlElement.nextElementSibling.style.display = "block";
        //ctrlElement.nextElementSibling.focus();
    },
    hideConjunctionOnBlur: function (ctrlElement) {
        ////debugger;
        FORMCUSTOMIZATION.hideField(ctrlElement);
        //var selectedOpt = $("#" + ctrlElement.id + " option:selected");
        //ctrlElement.previousElementSibling.innerHTML = selectedOpt[0].innerHTML;

        //ctrlElement.previousElementSibling.innerHTML = ctrlElement.options[ctrlElement.selectedIndex].text;
        //ctrlElement.style.display = "none";
        //ctrlElement.previousElementSibling.style.display = "block";

    },

    changeByConjuntion: function (ctrlElement) {
        var conjnVal = ctrlElement.options[ctrlElement.selectedIndex].value;
        if (conjnVal != 0) {
            ctrlElement.parentElement.nextElementSibling.style.display = "inline-block";
        }
        else {
            ctrlElement.parentElement.nextElementSibling.style.display = "none";
        }
    },



    ///........ Methods for External Module Tab ........

    ChangeOnEventOption_FormCust: function (ele, sFrom) {
        //////debugger;
        if (sFrom == "Form") {
            if ($(ele).val() == 7 || $(ele).val() == 8) {
                if ($(ele).val() == 7) {
                    $("#externalModuleAvailable_div input[type='radio']").prop('disabled', false);
                }
                else
                    $("#externalModuleAvailable_div input[type='radio']").prop('disabled', true);
                document.getElementById("txtbuttonCaption_FormCustomization").disabled = false;
            }
            else {
                $("#externalModuleAvailable_div input[type='radio']").prop('disabled', true);
                document.getElementById("txtbuttonCaption_FormCustomization").disabled = true;
            }
        }
        else {

        }
    },

    ChangeModuleType_FormCust: function (ele, sFrom) {
        ////debugger;
        if (sFrom == "Form") {
            $("#ddlClassNames_FormCustomization").empty().append("<option></option>").prop('disabled', false);
            $("#ddlClassMethods_FormCustomization").empty().append("<option></option>");
            if ($(ele).val() == 1) {
                document.getElementById("lblModuleType_FormCustomization").textContent = "ghMaduleName";
                document.getElementById("ddlAllDllFiles_FormCustomization").style.display = "block";
                document.getElementById("ddlAllDllFiles_FormCustomization").disabled = false;
                document.getElementById("txtServiceUrl_FormCustomization").style.display = "none";
            }
            else if ($(ele).val() == 2) {
                document.getElementById("lblModuleType_FormCustomization").textContent = "Url";
                document.getElementById("ddlAllDllFiles_FormCustomization").style.display = "none";
                document.getElementById("txtServiceUrl_FormCustomization").style.display = "block";
                document.getElementById("txtServiceUrl_FormCustomization").disabled = false;
            }
            else {
                document.getElementById("lblModuleType_FormCustomization").textContent = "Module Name";
                document.getElementById("ddlAllDllFiles_FormCustomization").style.display = "none";
                document.getElementById("ddlClassNames_FormCustomization").disabled = true;
                $("#txtServiceUrl_FormCustomization").show().prop('disabled', true).val('');
                $("#ddlClassMethods_FormCustomization")
                    .append("<option value='1'>Validation for Insured Value</option>" +
                    "<option value='2'>Validate Price Value</option>" +
                    "<option value='3'>Validation on Dates</option>");
            }
        }
        else {
            $("#ddlClassNames_ExtraField").empty().append("<option></option>").prop('disabled', false);
            $("#ddlClassMethods_ExtraField").empty().append("<option></option>");
            if ($(ele).val() == 1) {
                document.getElementById("lblModuleType_ExtraField").textContent = "ghMaduleName";
                document.getElementById("ddlAllDllFiles_ExtraField").style.display = "block";
                document.getElementById("ddlAllDllFiles_ExtraField").disabled = false;
                document.getElementById("txtServiceUrl_ExtraField").style.display = "none";
            }
            else if ($(ele).val() == 2) {
                document.getElementById("lblModuleType_ExtraField").textContent = "Url";
                document.getElementById("ddlAllDllFiles_ExtraField").style.display = "none";
                document.getElementById("txtServiceUrl_ExtraField").style.display = "block";
                document.getElementById("txtServiceUrl_ExtraField").disabled = false;
            }
            else {
                document.getElementById("lblModuleType_ExtraField").textContent = "Module Name";
                document.getElementById("ddlAllDllFiles_ExtraField").style.display = "none";
                document.getElementById("ddlClassNames_ExtraField").disabled = true;
                $("#txtServiceUrl_ExtraField").show().prop('disabled', true).val('');
                $("#ddlClassMethods_ExtraField")
                    .append("<option value='1'>Validation for Insured Value</option>" +
                    "<option value='2'>Validate Price Value</option>" +
                    "<option value='3'>Validation on Dates</option>");
            }
        }
    },

    ChangeAllDllFiles_FormCust: function (ele, sFrom) {
        ////debugger;
        if (sFrom == "Form") {
            var dllName = ele.value.trim();
            $("#ddlClassNames_FormCustomization").html("<option></option>");
            $("#ddlClassMethods_FormCustomization").html("<option></option>");
            if (dllName != "") {
                var urlPath = GLOBAL.getContextPath("GetAllClasses", "FormCustomization", "Forms");
                $.ajax({
                    url: urlPath,
                    type: "POST",
                    data: {
                        sFileName: dllName
                    },
                    datatype: "json",
                    success: function (data) {
                        if (data != "") {
                            //////debugger;
                            for (var idataLength = 0; idataLength < data.length; idataLength++) {
                                $("#ddlClassNames_FormCustomization").append("<option value='" + data[idataLength] + "'>" + data[idataLength] + "</option>");
                            }
                        }
                    },
                    error: function () {
                        alert("Error cought.");
                    }
                });
            }
        }
        else {
            var dllName = ele.value.trim();
            $("#ddlClassNames_ExtraField").html("<option></option>");
            $("#ddlClassMethods_ExtraField").html("<option></option>");
            if (dllName != "") {
                var urlPath = GLOBAL.getContextPath("GetAllClasses", "FormCustomization", "Forms");
                $.ajax({
                    url: urlPath,
                    type: "POST",
                    data: {
                        sFileName: dllName
                    },
                    datatype: "json",
                    success: function (data) {
                        if (data != "") {
                            //////debugger;
                            for (var idataLength = 0; idataLength < data.length; idataLength++) {
                                $("#ddlClassNames_ExtraField").append("<option value='" + data[idataLength] + "'>" + data[idataLength] + "</option>");
                            }
                        }
                    },
                    error: function () {
                        alert("Error cought.");
                    }
                });
            }
        }
    },

    ChangeClassNames_FormCust: function (ele, sFrom) {
        ////debugger;
        if (sFrom == "Form") {
            var dllName = document.getElementById("ddlAllDllFiles_FormCustomization").value.trim();
            var className = ele.value.trim();
            var moduleType = document.getElementById("ddlModuleType_FormCustomization").value.trim();
            $("#ddlClassMethods_FormCustomization").empty().append("<option></option>");
            if (dllName != "") {
                var urlPath = GLOBAL.getContextPath("GetAllMethodsForClass", "FormCustomization", "Forms");
                $.ajax({
                    url: urlPath,
                    type: "POST",
                    data: {
                        sClassName: className, sFileName: dllName, iModuleType: moduleType
                    },
                    datatype: "json",
                    success: function (data) {
                        if (data != "") {
                            //////debugger;
                            for (var idataLength = 0; idataLength < data.length; idataLength++) {
                                $("#ddlClassMethods_FormCustomization").append("<option value='" + data[idataLength] + "'>" + data[idataLength] + "</option>");
                            }
                        }
                    },
                    error: function () {
                        alert("Error cought.");
                    }
                });
            }
        }
        else {
            var dllName = document.getElementById("ddlAllDllFiles_ExtraField").value.trim();
            var className = ele.value.trim();
            var moduleType = document.getElementById("ddlModuleType_ExtraField").value.trim();
            $("#ddlClassMethods_ExtraField").empty().append("<option></option>");
            if (dllName != "") {
                var urlPath = GLOBAL.getContextPath("GetAllMethodsForClass", "FormCustomization", "Forms");
                $.ajax({
                    url: urlPath,
                    type: "POST",
                    data: {
                        sClassName: className, sFileName: dllName, iModuleType: moduleType
                    },
                    datatype: "json",
                    success: function (data) {
                        if (data != "") {
                            //////debugger;
                            for (var idataLength = 0; idataLength < data.length; idataLength++) {
                                $("#ddlClassMethods_ExtraField").append("<option value='" + data[idataLength] + "'>" + data[idataLength] + "</option>");
                            }
                        }
                    },
                    error: function () {
                        alert("Error cought.");
                    }
                });
            }
        }
    },

    AddExternalModule_FormCust: function (sFrom) {
        if (sFrom == "Form") {
            //////debugger;
            var onEventVal = $("#ddlOnEvent_FormCustomization").val();
            var onEventTxt = $("#ddlOnEvent_FormCustomization option:selected").text();
            var btnCaption = $("#txtbuttonCaption_FormCustomization").val().trim();
            var moduleTypeVal = $("#ddlModuleType_FormCustomization").val();
            var moduleTypeTxt = $("#ddlModuleType_FormCustomization option:selected").text();
            var moduleNameVal = $("#ddlAllDllFiles_FormCustomization").val();
            var moduleNameTxt = "";
            if (moduleTypeVal == 1) {
                moduleNameTxt = $("#ddlAllDllFiles_FormCustomization option:selected").text();
            }
            else if (moduleTypeVal == 2) {
                moduleNameTxt = $("#txtServiceUrl_FormCustomization").val().trim();
            }
            var className = $("#ddlClassNames_FormCustomization").val();
            var functionName = $("#ddlClassMethods_FormCustomization option:selected").text();
            var functionVal = $("#ddlClassMethods_FormCustomization").val();
            var availOnVal = "";
            var availOnTxt = "";
            if (onEventVal == 7) {
                availOnVal = $("#externalModuleAvailable_div input[type='radio']:checked").val();
                availOnTxt = $("#externalModuleAvailable_div input[type='radio']:checked").parent().text().trim();
            }
            var tbodyIndex = $("#tblExternalModules_FormCustomization tbody tr").length;

            if (onEventVal == undefined || onEventVal == null) {
                COMMON.prototype.showMessage("Select the Event.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Select the Event.");
                return false;
            }
            if (onEventVal == 7 || onEventVal == 8) {
                if (btnCaption == "" || btnCaption == null) {
                    COMMON.prototype.showMessage("Enter Button Caption.");
                    //FORMCUSTOMIZATION.ShowAlertMessage("Enter Button Caption.");
                    return false;
                }
            }
            if (moduleTypeVal == undefined || moduleTypeVal == null) {
                COMMON.prototype.showMessage("Select the Module Type.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Select the Module Type.");
                return false;
            }
            if (moduleTypeVal == 1 && (moduleNameVal == null || moduleNameVal == undefined || moduleNameVal == "")) {
                COMMON.prototype.showMessage("Enter Module Name.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Enter Module Name.");
                return false;
            }
            else if (moduleTypeVal == 2 && moduleNameTxt == "") {
                COMMON.prototype.showMessage("Enter Url.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Enter Url.");
                return false;
            }
            else if (moduleTypeVal == 3 && (functionVal == null || functionVal == undefined || functionVal == "")) {
                COMMON.prototype.showMessage("Select the Function Name.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Select the Function Name.");
                return false;
            }

            if (moduleTypeVal == 1 && (className == null || className == undefined || className == "")) {
                COMMON.prototype.showMessage("Select the Class Name.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Select the Class Name.");
                return false;
            }
            if (moduleTypeVal == 1 && (functionVal == null || functionVal == undefined || functionVal == "")) {
                COMMON.prototype.showMessage("Select the Function Name.");
                //FORMCUSTOMIZATION.ShowAlertMessage("Select the Function Name.");
                return false;
            }
            ////debugger;
            $("#tblExternalModules_FormCustomization tbody")
                .append('<tr onclick="FORMCUSTOMIZATION.SelectExternalModuleTr_FormCust(this);">' +
                        '<td>' + (tbodyIndex + 1) + '</td>' +
                        '<td data-onevent="' + onEventVal + '">' + onEventTxt + '</td>' +
                        '<td data-moduletype="' + moduleTypeVal + '">' + moduleTypeTxt + '</td>' +
                        '<td>' + moduleNameTxt + '</td>' +
                        '<td>' + className + '</td>' +
                        '<td>' + functionName + '</td>' +
                        '<td>' + btnCaption + '</td>' +
                        '<td data-availablein="' + availOnVal + '">' + availOnTxt + '</td>' +
                       + '</tr>');

            $("#moduleFields_FormCust select option:first-child").attr("selected", "selected");
            $("#txtbuttonCaption_FormCustomization").val('').prop('disabled', true);
            $("#ddlClassNames_FormCustomization").empty().append("<option></option>");
            $("#ddlClassMethods_FormCustomization").empty().append("<option></option>");
            $("#externalModuleAvailable_div input[type='radio']").prop('disabled', true);
            $("#externalModuleAvailable_div input[type='radio']:eq(2)").prop('checked', true);
        }
        else {
            var onEventVal = $("#ddlOnEvent_ExtraField").val();
            var onEventTxt = $("#ddlOnEvent_ExtraField option:selected").text();
            //var btnCaption = $("#txtbuttonCaption_FormCustomization").val().trim();
            var moduleTypeVal = $("#ddlModuleType_ExtraField").val();
            var moduleTypeTxt = $("#ddlModuleType_ExtraField option:selected").text();
            var moduleNameVal = $("#ddlAllDllFiles_ExtraField").val();
            var moduleNameTxt = "";
            if (moduleTypeVal == 1) {
                moduleNameTxt = $("#ddlAllDllFiles_ExtraField option:selected").text();
            }
            else if (moduleTypeVal == 2) {
                moduleNameTxt = $("#txtServiceUrl_ExtraField").val().trim();
            }
            var className = $("#ddlClassNames_ExtraField").val();
            var functionName = $("#ddlClassMethods_ExtraField option:selected").text();
            var functionVal = $("#ddlClassMethods_ExtraField").val();
            //var availOnVal;
            //var availOnTxt = "";
            //if (onEventVal == 7) {
            //    availOnVal = $("#externalModuleAvailable_div input[type='radio']:checked").val();
            //    availOnTxt = $("#externalModuleAvailable_div input[type='radio']:checked").parent().text().trim();
            //}
            var tbodyIndex = $("#tblExternalModules_ExtraField tbody tr").length;

            if (onEventVal == undefined || onEventVal == null) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Event.";
                COMMON.prototype.showMessage("Select the Event.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }
            //if (onEventVal == 7 || onEventVal == 8) {
            //    if (btnCaption == "" || btnCaption == null) {
            //        FORMCUSTOMIZATION.ShowAlertMessage("Enter Button Caption!");
            //        return false;
            //    }
            //}
            if (moduleTypeVal == undefined || moduleTypeVal == null) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Module Type.";
                COMMON.prototype.showMessage("Select the Module Type.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }
            if (moduleTypeVal == 1 && (moduleNameVal == null || moduleNameVal == undefined || moduleNameVal == "")) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Enter Module Name.";
                COMMON.prototype.showMessage("Enter Module Name.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }
            else if (moduleTypeVal == 2 && moduleNameTxt == "") {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Enter Url.";
                COMMON.prototype.showMessage("Enter Url.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }
            else if (moduleTypeVal == 3 && (functionVal == null || functionVal == undefined || functionVal == "")) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Function Name.";
                COMMON.prototype.showMessage("Select the Function Name.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }

            if (moduleTypeVal == 1 && (className == null || className == undefined || className == "")) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Class Name.";
                COMMON.prototype.showMessage("Select the Class Name.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }
            if (moduleTypeVal == 1 && (functionVal == null || functionVal == undefined || functionVal == "")) {
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = "Select the Function Name.";
                COMMON.prototype.showMessage("Select the Function Name.");
                $("#lblErrorMsg_ExtraField").hide();
                return false;
            }

            $("#tblExternalModules_ExtraField tbody")
                .append('<tr onclick="FORMCUSTOMIZATION.SelectExternalModuleTr_FormCust(this);">' +
                        '<td>' + (tbodyIndex + 1) + '</td>' +
                        '<td data-onevent="' + onEventVal + '">' + onEventTxt + '</td>' +
                        '<td data-moduletype="' + moduleTypeVal + '">' + moduleTypeTxt + '</td>' +
                        '<td>' + moduleNameTxt + '</td>' +
                        '<td>' + className + '</td>' +
                        '<td>' + functionName + '</td>' +
                        '<td></td><td></td>' +
                       + '</tr>');
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
            $("#lblErrorMsg_ExtraField").hide();
            $("#ddlOnEvent_ExtraField, #ddlModuleType_ExtraField").val("0");
            $("#ddlAllDllFiles_ExtraField option:first-child").attr("selected", "selected");
            $("#ddlClassNames_ExtraField").empty().append("<option></option>");
            $("#ddlClassMethods_ExtraField").empty().append("<option></option>");
            //$("#moduleFields_ExtraField select options:first-child").attr("selected", "selected");
            //$("#txtbuttonCaption_FormCustomization").val('').prop('disabled', true);
            //$("#externalModuleAvailable_div input[type='radio']").prop('disabled', true);
            //$("#externalModuleAvailable_div input[type='radio']:eq(2)").prop('checked', true);
        }
    },

    SelectExternalModuleTr_FormCust: function (ele) {
        $(ele).parent().children().removeClass("FormSelectedRowColor");
        $(ele).addClass("FormSelectedRowColor");
    },

    DeleteExternalModuleTr_FormCust: function (sFrom) {
        ////debugger;
        if (sFrom == "Form") {
            var tr = $("#tblExternalModules_FormCustomization tbody").find("FormSelectedRowColor");
            if (tr.length > 0) {
                $("#tblExternalModules_FormCustomization tbody").find("FormSelectedRowColor").remove();
                document.getElementById("lblErrorMsg_ExtraField").textContent = "";
                COMMON.prototype.showMessage("Select the link Form");
                $("#lblErrorMsg_ExtraField").hide();
                var allTr = document.getElementById("tblExternalModules_FormCustomization").tBodies[0].children;
                for (var i = 0; i < allTr.length; i++) {
                    allTr[i].children[0].textContent = (i + 1);
                }
            }
            else
                document.getElementById("lblErrorMsg_ExtraField").textContent = "Select the External Module to delete.";
            COMMON.prototype.showMessage("Select the link Form");
            $("#lblErrorMsg_ExtraField").hide();
        }
        else {
            var tr = $("#tblExternalModules_ExtraField tbody").find("FormSelectedRowColor");
            if (tr.length > 0) {
                $("#tblExternalModules_ExtraField tbody").find("FormSelectedRowColor").remove();
                document.getElementById("lblErrorMsg_ExtraField").textContent = "";
                COMMON.prototype.showMessage("Select the link Form");
                $("#lblErrorMsg_ExtraField").hide();
                var allTr = document.getElementById("tblExternalModules_ExtraField").tBodies[0].children;
                for (var i = 0; i < allTr.length; i++) {
                    allTr[i].children[0].textContent = (i + 1);
                }
            }
            else
                document.getElementById("lblErrorMsg_ExtraField").textContent = "Select the External Module to delete.";
            COMMON.prototype.showMessage("Select the link Form");
            $("#lblErrorMsg_ExtraField").hide();
        }
    },




    ///........ Methods for InfoPanel Customization Tab ........

    EditInfoPanel: function (ele) {
       debugger;
        if (ele.dataset.caneditinfopanel == "True") {
            var panelId = ele.dataset.panelid.trim();
            var panelType = ele.dataset.paneltype.trim();
            if (panelType != 3 && panelType != 4 && panelType != 5) {
                var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
                var urlPath = GLOBAL.getContextPath("FormInfoPanelSetting", "FormInfoPanel", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iPanelId: panelId, iFormTypeId: mTypeId }, "HTML", true, "FORMCUSTOMIZATION.ShowInfoPanelSetting");
            }
            else {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultInfoPanelcannotedit"));
                //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgDefaultInfoPanelcannotedit")); // "Default InfoPanel cannot edit."
            }
        }
    },
    ShowInfoPanelSetting: function (bSuccess, data) {
        debugger;
        if (bSuccess && data != "") {
            $("#infoPanel_popupDiv").html("");
            $("#infoPanel_popupDiv").html(data);
            $("#infopanelbodydiv").hide();
            $("#infoPanelHeading_div").hide();
            $("#FormInfoPanelBodyDetails").height($(".tab-lst-Formcust").height() + 10);

            $("#infoPanel_popupDiv").show();

           // $("#infoPanelSetting_modal").modal('show');
        }
    },

    AddNewInfoPanel: function () {
debugger
        var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var urlPath = GLOBAL.getContextPath("FormInfoPanelSetting", "FormInfoPanel", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: mTypeId }, "HTML", true, "FORMCUSTOMIZATION.ShowInfoPanelSetting");
    },

    ShowInfoPanelDelAlert: function () {
        debugger;
        var panelID = $("#infoPanelContainer_div").find(".selected-Ipanel").data("panelid");
        if (panelID != "" && panelID > 0) {
            document.getElementById("deletingInfoPanelID").value = panelID;
            $("#MCustomize_DeleteInfoPanel_Modal").modal("show");
        }
        else
            COMMON.prototype.showMessage("Select the Infopanel to delete.");
        //FORMCUSTOMIZATION.ShowAlertMessage("Select the Infopanel to delete.");
    },
    DeleteInfoPanel: function () {
        debugger
        var panelId = document.getElementById("deletingInfoPanelID").value;
        if (panelId > 0 && panelId != "") {
            $("#MCustomize_DeleteInfoPanel_Modal").modal("hide");
            var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            var urlPath = GLOBAL.getContextPath("DeleteInfoPanelFromForm", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iPanelId: panelId, iFormTypeId: mTypeId }, "HTML", true, "FORMCUSTOMIZATION.RefreshInfoPanels");
        }
    },
    RefreshInfoPanels: function (bSuccess, data) {
        ////debugger;
        if (data != '"Error"' && bSuccess == true) {
            $("#Form_Customizing_div").html(data);
            COMMON.prototype.showMessage("InfoPanel Deleted Successfully.");
            //FORMCUSTOMIZATION.ShowAlertMessage("InfoPanel Deleted Successfully.", "green");
        }
        else {
            COMMON.prototype.showMessage("InfoPanel Deletion Failed.");
            //FORMCUSTOMIZATION.ShowAlertMessage("InfoPanel Deletion Failed.");
        }
    },


    SaveReportsForForm: function () {
        var allReports = $("#AllReportsDiv_FormCust").find('input[type="checkbox"]:checked');
        var rptIds = [];
        for (var i = 0; i < allReports.length; i++) {
            var rptId = allReports[i].value.trim();
            rptIds.push(rptId);
        }

        var allRDReports = $("#AllRDReportsDiv_FormCust").find('input[type="checkbox"]:checked');
        for (var i = 0; i < allRDReports.length; i++) {
            var rptId = allRDReports[i].value.trim();
            rptIds.push(rptId);
        }

        var mTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var urlPath = GLOBAL.getContextPath("AttachReportsToForm", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { arrReportIds: rptIds, iFormTypeId: mTypeId }, "JSON", true, "FORMCUSTOMIZATION.RefreshFormReports");
    },
    RefreshFormReports: function (bSuccess, data) {
        if (bSuccess && data != "") {
            COMMON.prototype.showMessage(data);
            //FORMCUSTOMIZATION.ShowAlertMessage(data, "green");
        }
        else {
            COMMON.prototype.showMessage("Reports Attachment to Form Failed.");
            //FORMCUSTOMIZATION.ShowAlertMessage("Reports Attachment to Form Failed.");
        }
    },

    ///...........Update Form Customization.........

    UpdateFormCustomization: function (arrConstraints, arrDeletedConstraint, externalModules, rules) {
        var fldOrders = [];
        //debugger;
        var tabid = $("#FormFields_list").find(".mcFieldsTab")[0].dataset.id;
        var allFlds = $("#fields_tabContent_" + tabid).find('table>tbody');
        for (var i = 0; i < allFlds.length; i++) {
            var trs = allFlds[i].children
            for (var j = 0; j < trs.length; j++) {
                var fldIdSeq = {
                    FieldId: trs[j].children[1].dataset.fieldid,
                    Sequence: trs[j].rowIndex,
                }
                fldOrders.push(fldIdSeq);
            }
        }
        ////debugger;
        var tabsOrder = [];
        var alltabs = document.getElementById("FormFields_list").children;
        for (var i = 0; i < alltabs.length; i++) {
            var tab = {
                TabId: alltabs[i].dataset.id,
                Sequence: i,
            }
            tabsOrder.push(tab);
        }
        ////debugger;
        var msTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var msViewId = document.getElementById("FormAndViewId_MsCust").value.trim();
        var FormCustInfo = {
            FieldOrder: fldOrders,
            TabsOrder: tabsOrder,
            DeletedUniqueConstraints: arrDeletedConstraint,
            ExternalModule: externalModules,
            FormID: msTypeId,
            UniqueConstraints: arrConstraints,
        }
        var isShowClose = false;
        if (isOpenedFromForm == "True") {
            isShowClose = true;
        }
     
        var urlPath = GLOBAL.getContextPath("UpdateFormCustomization", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { objFormInfo: FormCustInfo, bIsView: false, iFormTypeId: msTypeId, iViewId: msViewId, sFormOrView: "Form", bShowClose: isShowClose, Triggers: FormMapping }, "HTML", true, "FORMCUSTOMIZATION.RefreshFormCustomization", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },
    RefreshFormCustomization: function (bSuccess, data) {
        debugger;
        if (data != "" && bSuccess == true) {
            if ($("#btnCloseFormCutomizationFromFormScreen").length <= 0) {
                $("#Form_Customization").html(data);
            }
            else {
                //$("#divSecondsub").html(data);
                $("#Form_Customization").html(data);
            }
            //$($("#allFormCustTabs")[0].children[1]).trigger('click');
            //$($("#FormFields_list")[0].children[0]).trigger('click');
            
           
            COMMON.prototype.showMessage("Form Saved Successfully");
            //COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFormupdatedsuccessfully"));
            //FORMCUSTOMIZATION.ShowAlertMessage(FORMCUSTOMIZATION.GetResourceMessage("msgFormupdatedsuccessfully"), "green"); //  "Form Updated Successfully."
        }
        else {
            COMMON.prototype.showMessage("Form Updation Failed.");
            //FORMCUSTOMIZATION.ShowAlertMessage("Form Updation Failed.");
        }
    },


    ///...........Common Methods............

    GetResourceMessage: function (sKey) {
        var value = "";
        var result = FORMCUSTOMIZATION.FindErrorMsg(sKey);

        if (result != null) {
            if (result.Value.length > 0) {
                value = result.Value;
            }
        }
        return (value);
    },
    FindErrorMsg: function (sKey) {
        var resultMsg = null;
        var obj = null;
        try {
            for (var iCounter = 0; iCounter < FormCust_ResourceMsgs.length; iCounter++) {
                obj = FormCust_ResourceMsgs[iCounter];
                if (obj.Key == sKey) {
                    resultMsg = {
                        Value: obj.Value
                    }
                    break;
                }
            }
        }
        catch (err) {
            resultMsg = {
                Value: err.message
            }
        }
        return (resultMsg);
    },
    //ShowAlertMessage: function (msgText, color) {
    //    $("#lblErrorMessage_FormCustomization").fadeIn('fast');
    //    if (color == null && color == undefined) {
    //        $("#lblErrorMessage_FormCustomization").css("color", "red");
    //        $("#lblErrorMessage_FormCustomization").html('').html("<i class='fa fa-warning' style='color:red;'></i>&nbsp; " + msgText).delay(2000).fadeOut('slow');
    //    }
    //    else {
    //        $("#lblErrorMessage_FormCustomization").css("color", color);
    //        $("#lblErrorMessage_FormCustomization").html('').html("<i class='fa fa-warning' style='color:" + color + ";'></i>&nbsp; " + msgText).delay(2000).fadeOut('slow');
    //    }
    //    document.getElementById("lblErrorMessage_FormCustomization").scrollIntoView(true);
    //},

    /// Use......onkeypress="return isNumber(event)"
    IsNumber: function (evt) {
        ////debugger;
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if ((charCode > 31 && (charCode < 48 || charCode > 57)) || charCode == 46 && charCode != 37 && charCode != 39) {
            return false;
        }
        else if (evt.currentTarget.id == "ExtraField_MaxSize" && charCode == 46) {
            return false;
        }
        return true;

    },

    Eliminate_Duplicates: function (arr) {
        var i,
        len = arr.length,
        out = [],
        obj = {
        };
        for (i = 0; i < len; i++) {
            obj[arr[i].trim()] = 0;
        }
        for (i in obj) {
            out.push(i);
        }
        return out;
    },

    Find_duplicates: function (arr) {
        var len = arr.length,
            out = [],
            counts = {
            };

        for (var i = 0; i < len; i++) {
            var item = arr[i].trim();
            counts[item] = counts[item] >= 1 ? counts[item] + 1 : 1;
        }
        for (var item in counts) {
            if (counts[item] > 1)
                out.push(item);
        }
        return out;
    },


    getFontControl_IF: function (element, event) {
        ////debugger;
        arrFont = [];
        arrFont = $(element).attr('data-fontarray').split(',');
        var newArray = arrFont.filter(function (v) { return v !== '' });
        if (newArray.length > 0) {
            var url = GLOBAL.getContextPath("byteArrayToObject", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(url, true, { arrFont: arrFont }, "JSON", false);
            if (fnResult.lValue == 1) {
                objCustomFont = fnResult.data;
            }
        }
        else {
            objCustomFont = null;
        }
        var urlPath = GLOBAL.getContextPath("FontControl", "Home", "");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { area: "", sFontCtrlId: "ctrlFontControl_IF", objFontClass: objCustomFont }, "HTML", true, "FORMCUSTOMIZATION.getFontControl_IFSuccess", "", "");
    },

    getFontControl_IFSuccess: function (flag, data) {
        ////debugger;
        $("#myFontControl_IF_Body").empty();
        $("#myFontControl_IF_Body").html(data);
        $("#myFontControl_IF").modal("show");

    },

    getFontControl_ELSE: function (element, event) {
        ////debugger;
        arrFont = [];
        arrFont = $(element).attr('data-fontarray').split(',');
        var newArray = arrFont.filter(function (v) { return v !== '' });
        if (newArray.length > 0) {
            var url = GLOBAL.getContextPath("byteArrayToObject", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(url, true, { arrFont: arrFont }, "JSON", false);
            if (fnResult.lValue == 1) {
                objCustomFont = fnResult.data;
            }
        }
        else {
            objCustomFont = null;
        }
        var urlPath = GLOBAL.getContextPath("FontControl", "Home", "");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { area: "", sFontCtrlId: "ctrlFontControl_ELSE", objFontClass: objCustomFont }, "HTML", true, "FORMCUSTOMIZATION.getFontControl_ELSESuccess", "", "");
    },

    getFontControl_ELSESuccess: function (flag, data) {
        ////debugger;
        $("#myFontControl_ELSE_Body").empty();
        $("#myFontControl_ELSE_Body").html(data);
        $("#myFontControl_ELSE").modal("show");

    },


    //******Context Meanu for ExtraField_MapFieldsModule for MaterTable and FormTable************//

    OnExtraField_MapFieldGrid_RightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "ExtraField_MapFieldsModule_body_menu");

            eleMenu = document.getElementById("ExtraField_MapFieldsModule_body_menu");
            document.getElementById("ExtraField_MapFieldsModule_body_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.ExtraFieldMapFieldGrid_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            
            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.ExtraFieldMapFieldGrid_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORMCUSTOMIZATION.toggleExtraFieldMapFieldEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();
            
            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                eleMenu.style.left = (rectContainer.left - 368) + "px";
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            eleMenu.style.top = (rectContainer.top - 80) + "px";
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORMCUSTOMIZATION.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    toggleExtraFieldMapFieldEntryMore: function (ele, evt) {
        debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {toggleExtraFieldMapFieldEntryMore} " +err.message, "red");
        }
    },

    ExtraFieldMapFieldGrid_InsertRow: function (iRow, event) {
        debugger
        try {
            FCommon.UI.stopKeyProcess(event);
            if (m_sMappingGridId == "FieldMasterTable") {
                FGRIDCONTROL.update("FieldMasterTable");
                FGRIDCONTROL.insertRows("FieldMasterTable", iRow, 1);
            }
            else if (m_sMappingGridId == "FieldFormTable") {
                FGRIDCONTROL.update("FieldFormTable");
                FGRIDCONTROL.insertRows("FieldFormTable", iRow, 1);
            }           
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    ExtraFieldMapFieldGrid_DeleteRow: function (iRow, event) {
        debugger
        if (confirm(FORMCUSTOMIZATION.GetResourceMessage("ConfirmToDeleteRow"))) {
            FCommon.UI.stopKeyProcess(event);
            if (FORMCUSTOMIZATION.ExtraFieldMapFieldGrid_getTotalRows() == 1) {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgCannotDeleteRow"));

                return;
            }
            if (m_sMappingGridId == "FieldMasterTable") {
                FGRIDCONTROL.update("FieldMasterTable");
                FGRIDCONTROL.deleteRows("FieldMasterTable", iRow, 1);
            }
            else if (m_sMappingGridId == "FieldFormTable") {
                FGRIDCONTROL.update("FieldFormTable");
                FGRIDCONTROL.deleteRows("FieldFormTable", iRow, 1);
            }            
        }
    },

    ExtraFieldMapFieldGrid_getTotalRows: function () {
        debugger;
        if (m_sMappingGridId == "FieldMasterTable") {
            return document.getElementById('FieldMasterTable_body').rows.length;
        }
        else if (m_sMappingGridId == "FieldFormTable") {
            return document.getElementById('FieldFormTable_body').rows.length;
        }        
    },

    //******End Context Meanu for ExtraField_MapFieldsModule for MaterTable and FormTable************// 



    //************MasterField FilterCreiteria Grid****************//   

    toggle_tblFilterCriteriaEntryMore: function (ele, evt) {
        debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {toggleIncremental_behaviourEntryMore} " + err.message, "red");
        }
    },
   
    onMasterField_tblFilterCriteria_RightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "id_tblFilterCriteria_MasterField_menu");

            eleMenu = document.getElementById("id_tblFilterCriteria_MasterField_menu");
            document.getElementById("id_tblFilterCriteria_MasterField_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            //for SelectRow
            bSelect = false;
            if (FORMCUSTOMIZATION.MasterField_tblFilterCriteria_isRowSelected(obj.iRow) == false) {
                bSelect = true;
            }

            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_SelectRow(" + obj.iRow + ", " + bSelect + ", event);");//#

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";

            if (bSelect == true) {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblSelectRow"));
            }
            else {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblUnselectRow"));
            }

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORMCUSTOMIZATION.toggle_tblFilterCriteriaEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();


            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                if (isOpenedFromForm == "True") {
                    eleMenu.style.left = (rectContainer.left - 506) + "px";
                } else {
                    eleMenu.style.left = (rectContainer.left - 75) + "px";
                }                
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            if (isOpenedFromForm == "True") {
                eleMenu.style.top = (rectContainer.top - 100) + "px";
            } else {
                eleMenu.style.top = (rectContainer.top - 200) + "px";
            }           
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORMCUSTOMIZATION.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    MasterField_tblFilterCriteria_isRowSelected: function (iRow) {
        //debugger;
        let bSelected = false;
        let eleRow = null;

        eleRow = FGRIDCONTROL.getRowElement("tblFilterCriteria_FormField", iRow);
        if (FCommon.UI.isValidObject(eleRow) == true) {
            if ($(eleRow).hasClass("FormSelectedRowColor") == true) {
                bSelected = true;
            }
        }
        return (bSelected);
    },

    onMasterField_tblFilterCriteria_DeleteRow: function (iRow, event) {
        debugger
        if (confirm(FORMCUSTOMIZATION.GetResourceMessage("ConfirmToDeleteRow"))) {
            FCommon.UI.stopKeyProcess(event);
            if (FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_getTotalRows() == 1) {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgCannotDeleteRow"));

                return;
            }
            FGRIDCONTROL.update("tblFilterCriteria_FormField");
            FGRIDCONTROL.deleteRows("tblFilterCriteria_FormField", iRow, 1);
        }
    },

    onMasterField_tblFilterCriteria_SelectRow: function (iRow, bSelect, evt) {
        //debugger;
        let eleRow = null;
        try {
            FCommon.UI.stopKeyProcess(event);
            eleRow = FGRIDCONTROL.getRowElement("tblFilterCriteria_FormField", iRow);
            if (bSelect == true) {
                $(eleRow).addClass("FormSelectedRowColor");
            }
            else {
                $(eleRow).removeClass("FormSelectedRowColor");
            }
        }
        catch (err) {
            //transEntryGlobal.showAlert("{onSelectRow}" + err.message, GlobalPref.getResourceValue("Exception"))
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    onMasterField_tblFilterCriteria_InsertRow: function (iRow, event) {
        debugger
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update("tblFilterCriteria_FormField");
            FGRIDCONTROL.insertRows("tblFilterCriteria_FormField", iRow, 1);
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    onMasterField_tblFilterCriteria_getTotalRows: function () {
        //debugger;
        return document.getElementById('tblFilterCriteria_FormField_body').rows.length;
    },
    //************End MasterField FilterCreiteria Grid****************//

    //************FormField FilterCreiteria Grid****************//
    onFormField_tblFilterCriteria_RightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "id_tblFilterCriteria_FormField_menu");

            eleMenu = document.getElementById("id_tblFilterCriteria_FormField_menu");
            document.getElementById("id_tblFilterCriteria_FormField_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            //for SelectRow
            bSelect = false;
            if (FORMCUSTOMIZATION.MasterField_tblFilterCriteria_isRowSelected(obj.iRow) == false) {
                bSelect = true;
            }

            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_SelectRow(" + obj.iRow + ", " + bSelect + ", event);");//#

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";

            if (bSelect == true) {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblSelectRow"));
            }
            else {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblUnselectRow"));
            }

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORMCUSTOMIZATION.toggle_tblFilterCriteriaEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();


            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                if (isOpenedFromForm == "True") {
                    eleMenu.style.left = (rectContainer.left - 506) + "px";
                } else {
                    eleMenu.style.left = (rectContainer.left - 75) + "px";
                }               
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            if (isOpenedFromForm == "True") {
                eleMenu.style.top = (rectContainer.top - 100) + "px";
            } else {
                eleMenu.style.top = (rectContainer.top - 200) + "px";
            }
           
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORMCUSTOMIZATION.onSerialNo_Click}" + err.message, "Exception");
        }
    },
    //************End FormrField FilterCreiteria Grid****************//

    //************ExternalTable FilterCreiteria Grid****************//
    onExternalTable_tblFilterCriteria_RightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "id_tblFilterCriteria_ExternalTable_menu");

            eleMenu = document.getElementById("id_tblFilterCriteria_ExternalTable_menu");
            document.getElementById("id_tblFilterCriteria_ExternalTable_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            //for SelectRow
            bSelect = false;
            if (FORMCUSTOMIZATION.MasterField_tblFilterCriteria_isRowSelected(obj.iRow) == false) {
                bSelect = true;
            }

            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_SelectRow(" + obj.iRow + ", " + bSelect + ", event);");//#

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";

            if (bSelect == true) {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblSelectRow"));
            }
            else {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblUnselectRow"));
            }

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onMasterField_tblFilterCriteria_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORMCUSTOMIZATION.toggle_tblFilterCriteriaEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();


            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                eleMenu.style.left = (rectContainer.left - 75) + "px";
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            eleMenu.style.top = (rectContainer.top - 200) + "px";
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORMCUSTOMIZATION.onSerialNo_Click}" + err.message, "Exception");
        }
    },
    //************End ExternalTable FilterCreiteria Grid****************//



    onIncrementalSNoHover: function (obj, event) {
        //debugger;
        var sControl = "";
        var sContent = "";
        var bSelect = true;
        var innerTextString = obj.Cell.innerText.replace(/\s/g, "");
        var iRowNum = innerTextString.replace(/\D/g, '');
        if (obj.bEnter == true) {
            FCommon.UI.setText(obj.Cell, "");

            obj.Cell.style.paddingLeft = "";

            sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
            sControl += iRowNum;
            sControl += "</div>";

            //sControl = "<div class='col-xs-12 Fcontrolbuttons' style='padding: 0px;'>";
            //sControl += "<div onclick='TRANSACTION_ENTRY.BODY.onDeleteRow(" + obj.iRow + ", event);' class='col-xs-6' data-toggle='tooltip' title='Remove Row' style='padding: 0px;'><span class='icon-delete icon-font8'></span></div>";
            //sControl += "<div onclick='TRANSACTION_ENTRY.BODY.onInsertRow(" + obj.iRow + ", event);' class='col-xs-6' data-toggle='tooltip' title='Insert Row' style='padding: 0px;'><span class='icon-insertrow icon-font8'></span></div>";
            //sControl += "</div>"

            $(obj.Cell).html(sControl);

            sContent = "<table>";
            sContent += "<tbody class='grid_row_menu'>";

            bSelect = false;
            if (FORMCUSTOMIZATION.isRowSelected(obj.iRow) == false) {
                bSelect = true;
            }

            sContent += "<tr class='highlightPopUpItems' onclick='FORMCUSTOMIZATION.onIncrementalSelectRow(" + obj.iRow + ", " + bSelect + ", event);' style='cursor: pointer;'>";

            if (bSelect == true) {
                sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
                sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + FORMCUSTOMIZATION.GetResourceMessage("lblSelectRow") + "</div></td>";
            }
            else {
                sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
                sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + FORMCUSTOMIZATION.GetResourceMessage("lblUnselectRow") + "</div></td>";
            }
            sContent += "</tr>";
            sContent += "<tr class='highlightPopUpItems' onclick='FORMCUSTOMIZATION.onIncrementalDeleteRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Delete Current Row' style='cursor: pointer;'>";
            sContent += "<td><span class='icon-delete icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow") + "</div></td>";
            sContent += "</tr>";
            sContent += "<tr class='highlightPopUpItems' onclick='FORMCUSTOMIZATION.onIncrementalInsertRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Add Row Above' style='cursor: pointer;'>";
            sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow") + "</div></td>";
            sContent += "</tr>";

            sContent += "</tbody>";
            sContent += "</table>";

            $("#id_row_popup").popover({
                type: "tooltip",
                trigger: "manual",
                placement: $("#hdnLanguageId").val() == "0" ? "right" : "left",
                html: true,
                content: sContent
            });
            $("#id_row_popup").popover('show');
        }
        else {
            $("#id_row_popup").popover('destroy');
            FCommon.UI.removeChildren(obj.Cell);
            FCommon.UI.setText(obj.Cell, iRowNum);
            obj.Cell.style.paddingLeft = "3px;";
        }
    },

    toggleIncremental_behaviourEntryMore: function (ele, evt) {
        debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {toggleIncremental_behaviourEntryMore} " + err.message, "red");
        }
    },

    onIncrementalGrid_RightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "id_incremental_behaviour_body_menu");

            eleMenu = document.getElementById("id_incremental_behaviour_body_menu");
            document.getElementById("id_incremental_behaviour_body_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onIncrementalInsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            //for SelectRow
            bSelect = false;
            if (FORMCUSTOMIZATION.isRowSelected(obj.iRow) == false) {
                bSelect = true;
            }

            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onIncrementalSelectRow(" + obj.iRow + ", " + bSelect + ", event);");//#

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";

            if (bSelect == true) {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblSelectRow"));
            }
            else {
                $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblUnselectRow"));
            }

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORMCUSTOMIZATION.onIncrementalDeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORMCUSTOMIZATION.toggleIncremental_behaviourEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();

            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                if (isOpenedFromForm == "False") {
                    eleMenu.style.left = (rectContainer.left - 74) + "px";
                } else {
                    eleMenu.style.left = (rectContainer.left - 505) + "px";
                }
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            if (isOpenedFromForm == "False") {
                eleMenu.style.top = (rectContainer.top - 201) + "px";
            } else {
                eleMenu.style.top = (rectContainer.top - 102) + "px";
            }           
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORMCUSTOMIZATION.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    isRowSelected: function (iRow) {
        debugger;
        let bSelected = false;
        let eleRow = null;
        eleRow = FGRIDCONTROL.getRowElement("tblIncremental_ExtraField", iRow);
        if (FCommon.UI.isValidObject(eleRow) == true) {
            if ($(eleRow).hasClass("FormSelectedRowColor") == true) {
                bSelected = true;
            }
        }
        return (bSelected);
    },

    onIncrementalDeleteRow: function (iRow, event) {
        debugger
        if (confirm(FORMCUSTOMIZATION.GetResourceMessage("ConfirmToDeleteRow"))) {
            FCommon.UI.stopKeyProcess(event);
            if (FORMCUSTOMIZATION.IncrementalGrid_getTotalRows() == 1) {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgCannotDeleteRow"));

                return;
            }
            FGRIDCONTROL.update("tblIncremental_ExtraField");
            FGRIDCONTROL.deleteRows("tblIncremental_ExtraField", iRow, 1);
        }
    },

    onIncrementalSelectRow: function (iRow, bSelect, event) {
       debugger
        var eleRow = null;

        try {
            FCommon.UI.stopKeyProcess(event);
            eleRow = FGRIDCONTROL.getRowElement("tblIncremental_ExtraField", iRow);
            if (bSelect == true) {
                $(eleRow).addClass("FormSelectedRowColor");               
            }
            else {
                $(eleRow).removeClass("FormSelectedRowColor");              
            }
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    onIncrementalInsertRow: function (iRow, event) {
        //debugger
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update("tblIncremental_ExtraField");
            FGRIDCONTROL.insertRows("tblIncremental_ExtraField", iRow, 1);
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    IncrementalGrid_getTotalRows: function () {
        ////debugger;
        return document.getElementById('tblIncremental_ExtraField_body').rows.length;
    },

    RemoveLandingFormCacheData: function () {
        //debugger
        if (GLOBAL.GlobalCacheForFormEntryScreen.length > 0) {
            for (var i = GLOBAL.GlobalCacheForFormEntryScreen.length - 1; i >= 0 ; i--) {
                var Formtypeid = parseInt(FORMCUSTOMIZATION.GetFormTypeId());
                if (GLOBAL.GlobalCacheForFormEntryScreen[i].FormTypeId == parseInt(Formtypeid + $("#companyId").val())) {
                    GLOBAL.GlobalCacheForFormEntryScreen.splice(i, 1);
                    // break;
                }
            }
        }
    },

    validateExtraFieldName: function () {
        debugger;
        var fCaption = document.getElementById("ExtraField_FieldCaption").value.trim();
        if (fCaption == "") {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("msgEnterfieldcaption"); // "Enter field Caption";
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgEnterfieldcaption"));
            $("#lblErrorMsg_ExtraField").hide();

            setTimeout(function () {
                $($("#ExtraField_Tabs").find('.nav-item')).removeClass("active");
                $($("#ExtraField_Tabs").find('.nav-item')[0]).addClass("active");

                //$($("#ExtraField_Tabs")[0].children).removeClass("active");
                //$($("#ExtraField_Tabs")[0].children[0]).addClass("active");

                $($("#AllContentsDiv")[0].children).removeClass("active");
                $($("#AllContentsDiv")[0].children[0]).addClass("active");
            }, 1);

            return false;
        }
    },

    GetMasterExtraFields: function (bFromLoad) {
        //debugger;
        FORMCUSTOMIZATION.GetMasterMandatoryFields(bFromLoad);
    },

    GetMasterMandatoryFields: function (bFromLoad) {
      //debugger;
        var masterTypeId = 0;
        var isFromTable = false;
        var tblName = "";
        var mToLink = document.getElementById("ExtraField_MasterToLink");
        if (mToLink != null && mToLink != undefined) {
            if (mToLink.value.trim() != "") {
                masterTypeId = OPTIONCONTROL.getControlValue('ExtraField_MasterToLink');
            }
            else {
                document.getElementById("ExtraField_MandatoryFields").value = "";
                $("#lblFieldsCount, #chkList_MandatoryFields_ExtraField").html("");
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("lbSelectthelinkMaster"); // "Select the link Master";
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lbSelectthelinkMaster"));
                $("#lblErrorMsg_ExtraField").hide();
                return;
            }
        }
        else {
            tblName = document.getElementById("ExtraField_TableName");
            if (tblName != undefined || tblName != null) {
                tblName = tblName.value.trim();
            }
            else {
                document.getElementById("ExtraField_MandatoryFields").value = "";
                $("#lblFieldsCount, #chkList_MandatoryFields_ExtraField").html("");
                document.getElementById("lblErrorMsg_ExtraField").innerHTML = FORMCUSTOMIZATION.GetResourceMessage("EnterTableName"); // "Enter Table name first";
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("EnterTableName"));
                $("#lblErrorMsg_ExtraField").hide();
                return;
            }
            masterTypeId = 0;
            isFromTable = true;
        }
        if (tblName != "" || masterTypeId > 0) {
            if (bFromLoad != true) {             
                OPTIONCONTROL.setMasterTypeId("ExtraField_DefaultValue", masterTypeId);              
            }
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lblErrorMsg_ExtraField"));
            $("#lblErrorMsg_ExtraField").hide();
            var urlPath = GLOBAL.getContextPath("GetMasterFields_ExtraField", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iMasterTypeId: masterTypeId, IsTable: isFromTable, sTableName: tblName }, "JSON", true, "FORMCUSTOMIZATION.SetMasterMandatoryFields", "", "", bFromLoad);
        }
    },

    SetMasterMandatoryFields: function (bs, data, tag) {
    //debugger;
        if (bs == true && data != "Error") {
            var divContainer = document.getElementById("chkList_MandatoryFields_ExtraField");
            var ddlFilterOnColumn = document.getElementById("ddlFilterOnColumn_MasterFilter");
            $(divContainer).html('');
            $(ddlFilterOnColumn).html('');

            var ddlDisplayField = document.getElementById("ExtraField_DisplayFields");
            var ddlValueField = document.getElementById("ExtraField_ValueFields");
            if ((ddlDisplayField != null && ddlDisplayField != undefined) && (ddlValueField != null && ddlValueField != undefined)) {
                $(ddlValueField).html('');
                $(ddlDisplayField).html('');
            }
            var txtMandatoryFields = document.getElementById("ExtraField_MandatoryFields");
            if (txtMandatoryFields != null && txtMandatoryFields != undefined) {
                if (tag == "" || tag == null || tag == undefined) {
                    $(txtMandatoryFields).val('');
                }
            }
            $("#lblFieldsCount").html(data.length + " Fields");
            for (var i = 0; i < data.length; i++) {
                var chkdiv;
                if (data[i].FieldName == "iMasterId" || data[i].FieldName == "sName") {
                    if (tag == "" || tag == null || tag == undefined) {
                        txtMandatoryFields.value += data[i].FieldName + ",";
                    }
                    chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' checked disabled data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                }
                else if (data[i].FieldName == "iMasterTypeId" || data[i].FieldName == "sMasterName") {
                    if (tag == "" || tag == null || tag == undefined) {
                        txtMandatoryFields.value += data[i].FieldName + ",";
                    }
                    chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' checked disabled data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                }
                else {
                    if (data[i].FieldName == "sCode") {
                        if (tag == "" || tag == null || tag == undefined) {
                            txtMandatoryFields.value += data[i].FieldName;
                        }
                        chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' checked data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                    }
                    else
                        chkdiv = "<div><label class='Flabel' style='white-space:nowrap;'><input type='checkbox' data-fieldid='" + data[i].FieldId + "' data-fieldname='" + data[i].FieldName + "' /> " + data[i].FieldName + "</label></div>";
                }
                $(divContainer).append(chkdiv);

                //if (data[i].FieldName != "iMasterId") {
                    if (data[i].DataType == 8 || data[i].DataType == 9) {

                        var opt = "<option value='" + data[i].FieldId + "' data-fldname='" + data[i].FieldName + "' data-datatype='" + data[i].DataType + "' data-optValues='" + data[i].DefaultValue + "' data-lnkmasterid='" + data[i].linkMasterID + "' >" + data[i].Caption + "</option>";
                    }
                    else if (data[i].DataType == 14) {
                        //var tblName = data[i].TableName.toString().trim();
                        var opt = "<option value='" + data[i].FieldId + "' data-fldname='" + data[i].FieldName + "' data-datatype='" + data[i].DataType + "' data-optValues='" + data[i].DefaultValue + "' data-lnkmasterid='" + data[i].linkMasterID + "' data-ftablename='" + data[i].TableName + "' data-fvaluefield='" + data[i].FieldName + "' data-fdisplayfield='" + data[i].DisplayMenmber + " '>" + data[i].Caption + "</option>";
                    }
                    else
                        var opt = "<option value='" + data[i].FieldId + "' data-fldname='" + data[i].FieldName + "' data-datatype='" + data[i].DataType + "' data-optValues='" + data[i].DefaultValue + "' data-lnkmasterid='" + data[i].linkMasterID + "' >" + data[i].Caption + "</option>";
                    $(ddlFilterOnColumn).append(opt);
                //}
                if ((ddlDisplayField != null && ddlDisplayField != undefined) && (ddlValueField != null && ddlValueField != undefined)) {
                    var opt = "<option value='" + data[i].FieldId + "' >" + data[i].FieldName + "</option>";
                    $(ddlValueField).append(opt);
                    $(ddlDisplayField).append(opt);
                }
            }

            FORMCUSTOMIZATION.SetCheckboxForEditField(false, 12);
            ////debugger;
            if ((ddlDisplayField != null && ddlDisplayField != undefined) && (ddlValueField != null && ddlValueField != undefined)) {
                var displayField = ddlDisplayField.dataset.linkdisplayfield;
                var valueField = ddlValueField.dataset.linkvaluefield;
                $(ddlValueField).find("option:contains(" + valueField + ")").attr('selected', true);
                $(ddlDisplayField).find("option:contains(" + displayField + ")").attr('selected', true);
            }
        }
        else {
            document.getElementById("lblErrorMsg_ExtraField").textContent = "Error! in getting fields";
            COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("lbSelectthelinkMaster"));
            $("#lblErrorMsg_ExtraField").hide();
        }
    },

    SetMasterFilterCriteriaData: function (arrFilters) {
        //debugger;
        if (arrFilters != null && arrFilters != undefined) {
            for (var i = 0; i < arrFilters.length; i++) {
                for (var j = 1; j <= 7; j++) {
                    var cell = FGRIDCONTROL.getCellObject("tblFilterCriteria_FormField", (i + 1), j);
                    switch (j) {
                        case 1:
                            //var icon = document.createElement("SPAN");
                            //icon.className = "icon-close7 icon-font9 deleteField";
                            //icon.style.cursor = "pointer";
                            //icon.setAttribute("onclick", "FORMCUSTOMIZATION.ClearFilterRowData(this)");
                            //icon.setAttribute("data-rowid", cell.iRow);
                            //FGRIDCONTROL.getCellObject("tblFilterCriteria_MasterField", (i + 1), 1).cell.appendChild(icon);
                            break;
                        case 2:
                            var ddlFilterOnColumn = document.getElementById("ddlFilterOnColumn_MasterFilter");
                            $(ddlFilterOnColumn).val(arrFilters[i].FilterOnColumnValue);
                            cell.setCellText($(ddlFilterOnColumn).find("option:selected").text()); //FilterOnColumn => fldName
                            cell.setCellData("value", arrFilters[i].FilterOnColumnValue);
                            cell.setCellData("sFieldName", arrFilters[i].FilterOnColumn);
                            break;
                        case 3:
                            var ddlOperator = document.getElementById("ddlOperators_MasterFilter");
                            $(ddlOperator).val(arrFilters[i].OperatorID);
                            cell.setCellText($(ddlOperator).find("option:selected").text());
                            cell.setCellData("value", arrFilters[i].OperatorID);
                            break;
                        case 4:
                            var ddlCompareWith = document.getElementById("ddlCompareWith_MasterFilter");
                            $(ddlCompareWith).val(arrFilters[i].CompareWith);
                            cell.setCellText($(ddlCompareWith).find("option:selected").text());
                            cell.setCellData("value", arrFilters[i].CompareWith);
                            break;
                        case 5:
                            //debugger;
                            if (arrFilters[i].CompareWith == 0) {
                                var fld = $("#ddlFilterOnColumn_MasterFilter option[value='" + arrFilters[i].FilterOnColumnValue + "']");
                                if (fld[0].dataset.datatype == 8) {
                                    var opts = fld[0].dataset.optvalues.split(',');
                                    var newSelect = "<select id='ddlStrListNew_MsField' class='custom-select' style='width:100%;'>";
                                    for (var n = 0; n < opts.length; n++) {
                                        var opt = "<option value='" + opts[n] + "'>" + opts[n] + "</option>";
                                        newSelect += opt;
                                    }
                                    newSelect += "</select>";
                                    if ($(document).find("#ddlStrListNew_MsField").length > 0) {
                                        $(document).find('#ddlStrListNew_MsField').remove();
                                    }
                                    var ddlStringList = $($.parseHTML(newSelect));
                                    cell.setCellText($(newSelect).find("option[value='" + arrFilters[i].LinkField + "']").text());
                                    cell.setCellData("value", arrFilters[i].LinkField);
                                }
                                else if (fld[0].dataset.datatype == 9) {
                                    var opts = fld[0].dataset.optvalues.split(',');
                                    var newSelect = "<select id='ddlNumListNew_MsField' class='custom-select' style='width:100%;'>";
                                    for (var n = 0; n < opts.length; n++) {
                                        var pId;
                                        var pName;
                                        if (n % 2 == 0) {
                                            pId = opts[n];
                                        }
                                        if ((n + 1) % 2 != 0) {
                                            pName = opts[n + 1];
                                        }
                                        var opt = "<option value='" + pId + "'>" + pName + "</option>";
                                        newSelect += opt;
                                        n++;
                                    }
                                    newSelect += "</select>";
                                    if ($(document).find("#ddlNumListNew_MsField").length > 0) {
                                        $(document).find('#ddlNumListNew_MsField').remove();
                                    }
                                    var ddlNumberList = $($.parseHTML(newSelect));
                                    cell.setCellText($(newSelect).find("option[value='" + arrFilters[i].LinkField + "']").text());
                                    cell.setCellData("value", arrFilters[i].LinkField);
                                }
                                else {
                                    cell.setCellText(arrFilters[i].LinkField);
                                    cell.setCellData("value", arrFilters[i].LinkField);
                                }
                            }
                            else {
                                var fld = $("#ddlField_MasterFields option[value='" + arrFilters[i].FilterFieldID + "']");
                                cell.setCellText($(fld).text().trim());
                                cell.setCellData("value", $(fld).val());
                                if (fld[0].dataset.datatype == 12 || fld[0].dataset.datatype == 14 || fld[0].dataset.datatype == 21) {
                                    cell.setCellData("idatatype", fld[0].dataset.datatype);
                                }
                            }
                            break;
                        case 6:
                            if (arrFilters[i].CompareWith == 1) {
                                cell.setCellText(arrFilters[i].LinkField);
                                cell.setCellData("value", arrFilters[i].LinkField);
                            }
                            break;
                        case 7:
                            var ddlConjunction = document.getElementById("ddlCunjunction_MasterFilter");
                            $(ddlConjunction).val(arrFilters[i].Conjunction);
                            cell.setCellText($(ddlConjunction).find("option:selected").text());
                            cell.setCellData("value", arrFilters[i].Conjunction);
                            break;
                    }
                }
            }
        }

        var iTotalRows = FGRIDCONTROL.getTotalRows("tblFilterCriteria_MasterField");
        for (var i = 1; i <= iTotalRows; i++) {
            var icon = document.createElement("SPAN");
            icon.className = "icon-close icon-font9 deleteField";
            icon.style.cursor = "pointer";
            icon.style.paddingLeft = "3px";
            icon.setAttribute("onclick", "FORMCUSTOMIZATION.ClearFilterRowData(this)");
            icon.setAttribute("data-rowid", i);
            var FirstCell = FGRIDCONTROL.getCellObject("tblFilterCriteria_MasterField", i, 1).cell;
            while (FirstCell.hasChildNodes()) {
                FirstCell.removeChild(FirstCell.firstChild);
            }
            FirstCell.appendChild(icon);
        }
    },

    GetPreview: function () {
        debugger;
        try {
            //var SaveHtml=document.getElementById("chkSaveDesignAsHtml").checked;
            var ClickedElement = "Preview";
            var FormTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            if (FormTypeId > 0) {
                var urlPath = GLOBAL.getContextPath("GetPreview", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, sClickedElement: ClickedElement, SaveHtml:false }, "HTML", true, "FORMCUSTOMIZATION.GetPreview_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        } catch (ex) {
            COMMON.prototype.showMessage("Exception - FORMCUSTOMIZATION.GetPreview " + ex.message);
            return false;
        }
    },


    GetPreview_Success: function (flag, data) {
        debugger;
        if (flag) {
            $($(document).find("#PreviewModal_Body")).html("");
            $($(document).find("#PreviewModal_Body")).html(data);
            $($(document).find("#Preview_Modal")).modal("show");
        }
    },

    SavePreview: function (sClickedElement) {
        debugger
        try {
            var arrFields = [];
            var arrTables = [];
            $(".HeaderField_" + sClickedElement + "").each(function (index, element) {
                var iTop = 0;
                var iLeft = 0;
                var sTop = $($(element).closest('.draggable')).css('top');
                var sLeft = $($(element).closest('.draggable')).css('left');
                //var sTop = $($(element)[0].parentElement.parentElement.parentElement.parentElement).css('top');
                //var sLeft = $($(element)[0].parentElement.parentElement.parentElement.parentElement).css('left');
                if (sTop != "auto") {
                    iTop = parseInt(sTop);
                }
                if (sLeft != "auto") {
                    iLeft = parseInt(sLeft);
                }
                debugger;
                var sDatePickerCtrlId = "hdn" + element.id;
                var bOptionControl = $(element).hasClass('FOptionControl') ? true : false;
                var bDatePicker = $(element).hasClass('DatePicker') ? true : false;
                var bTimePicker = $(element).hasClass('TimePicker') ? true : false;
                var FieldId = 0;
                if (bOptionControl == true) {
                    iFieldId = $(element).data('fieldid');
                }
                else if (bDatePicker == true || bTimePicker == true) {
                    iFieldId = $("#" + sDatePickerCtrlId).data('fieldid');
                }
                else {
                    iFieldId = $(element).attr('fieldid');
                }
                var Field = {
                    FieldId: iFieldId,
                    Top: iTop,
                    Left: iLeft
                }
                if (Field.FieldId > 0) {
                    arrFields.push(Field);
                }
            })

            $(".FooterField_" + sClickedElement + "").each(function (index, element) {
                var iTop = 0;
                var iLeft = 0;
                var sTop = $($(element).closest('.draggable')).css('top');
                var sLeft = $($(element).closest('.draggable')).css('left');
                //var sTop = $($(element)[0].parentElement.parentElement.parentElement.parentElement).css('top');
                //var sLeft = $($(element)[0].parentElement.parentElement.parentElement.parentElement).css('left');
                if (sTop != "auto") {
                    iTop = parseInt(sTop);
                }
                if (sLeft != "auto") {
                    iLeft = parseInt(sLeft);
                }
                debugger;
                var sDatePickerCtrlId = "hdn" + element.id;
                var bOptionControl = $(element).hasClass('FOptionControl') ? true : false;
                var bDatePicker = $(element).hasClass('DatePicker') ? true : false;
                var bTimePicker = $(element).hasClass('TimePicker') ? true : false;
                var FieldId = 0;
                if (bOptionControl == true) {
                    iFieldId = $(element).data('fieldid');
                }
                else if (bDatePicker == true || bTimePicker == true) {
                    iFieldId = $("#" + sDatePickerCtrlId).data('fieldid');
                }
                else {
                    iFieldId = $(element).attr('fieldid');
                }
                var Field = {
                    FieldId: iFieldId,
                    Top: iTop,
                    Left: iLeft
                }
                if (Field.FieldId > 0) {
                    arrFields.push(Field);
                }
            })

            $(".BodyField_" + sClickedElement + "_DraggableContainer").each(function (index, element) {
                debugger;
                var iTop = 0;
                var iLeft = 0;
                var sTop = $(element).css('top');
                var sLeft = $(element).css('left');
                if (sTop != "auto") {
                    iTop = parseInt(sTop);                   
                }
                if (sLeft != "auto") {
                    iLeft = parseInt(sLeft);                 
                }
                var Table = {
                    TableId: $(element).attr('tableid'),
                    Top: iTop,
                    Left: iLeft
                }
                if (Table.TableId > 0) {
                    arrTables.push(Table);
                }
            })

            debugger;
            var urlPath = GLOBAL.getContextPath("SavePreview", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { arrFormFields: arrFields, arrFormTables: arrTables }, "JSON", true, "FORMCUSTOMIZATION.SavePreview_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        }
        catch (ex) {
            alert("Exception - FORMCUSTOMIZATION.SavePreview " + ex.message);
        }
    },

    SavePreview_Success: function (flag, data) {
        debugger;
        if (flag) {
            if (data.strError.trim() == "") {
                COMMON.prototype.showMessage("Preview saved successfully.");
                return false;
            }
            else {
                COMMON.prototype.showMessage(data.strError);
                return false;
            } s
        }
    },
    CreateTemplate: function (ele) {
        debugger
        if (document.getElementById("ExtraField_AlertType").value == 2) {
            var pro = document.getElementById('loading');
            pro.style.display = "block";
            NETWORK.executeServerMethod(
                      GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                         true,
                         { iVouchertype: 19, ModuleType: 1, HeaderGroup: lstHeaderGroups, bSaveHTMLSource: true },
                          "",
                          true,
                          "FORMCUSTOMIZATION.CreateTemplate_Success", "", "");
        }
        else {
            var formTypeId = FORMCUSTOMIZATION.GetFormTypeId();
            var arrTemp = [];
            arrTemp.push(formTypeId, '');
            SMSTEMPLATE.CreateControl('id_SMSTemplate', 'divSMSCustomization', ScreenId, arrTemp)
        }
    },
    CreateTemplate_Success: function (flag, data) {
        debugger
        var proend = document.getElementById('loading');
        proend.style.display = "none";
        if (flag) {
            if (data != "") {
                FORMCUSTOMIZATION.openclosepreview("id_emailtemplatemodal");
                $("#dvid_emailtemplatemodal").html(data);
                $("#id_emailtemplatemodal").modal({ backdrop: 'static'}, "show");
                $("#id_emailtemplatemodal").css({ 'display': 'block'});
                document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "FORMCUSTOMIZATION.CloseEmailTemplateView('id_emailtemplatemodal')");
                //document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "$('#id_emailtemplatemodal').modal('hide')");
            }
        }
    },

    openclosepreview: function (id) {
        debugger;
        var count = 0;
        //Open & Close the modal when open more than one modal

        $("#" + id).on('show.bs.modal shown.bs.modal hide.bs.modal hidden.bs.modal', function (e) {
            if (e.type == "hide") {
                count++;
                return count != 1 ? false : true;
            }
            if (e.type == "shown") {
                document.getElementById("InvoiceDesignMainDiv").style.height = "450px";
                document.getElementById("InvoiceDesignFields").style.height = "465px";
                document.getElementById("InvoiceDesignFieldProperties").style.height = "465px";
                document.getElementById("id_PrintPreview").style.height = "465px";
            }
            count = 0;
        });
    },

    CloseEmailTemplateView: function (id) {
            $('#' +id).modal('hide');
            $('#' +id).css({'display' : 'none'});
    },

    onTrigger_Change:function(ele)
    {
        debugger
     if ($(ele).val() == 2) {
        m_sMappingGridId = "MasterTable";
        document.getElementById("btnMapExternalModule").style.display = "block";    
        document.getElementById("ExternalhiddenTableDiv").style.display = "block"    
        document.getElementById("MasterName").style.display = "Block";
        document.getElementById("ExternalDocumenthiddenTableDiv").style.display = "none"
        document.getElementById("ExternalFormhiddenTableDiv").style.display = "none"
        document.getElementById("FormName").style.display = "none";
        document.getElementById("DocumentName").style.display = "none";
        Form_ExternalModule.FillMappingDetails(true);
    }
    else if ($(ele).val() == 3) {
        m_sMappingGridId = "FormTable";
        document.getElementById("btnMapExternalModule").style.display = "block";        
        document.getElementById("ExternalhiddenTableDiv").style.display = "none"      
        document.getElementById("MasterName").style.display = "none";
        document.getElementById("ExternalDocumenthiddenTableDiv").style.display = "none"
        document.getElementById("ExternalFormhiddenTableDiv").style.display = "block";
        document.getElementById("FormName").style.display = "block";
        document.getElementById("DocumentName").style.display = "none";
        Form_ExternalModule.FillMappingDetails(true);
      
    }
    else if ($(ele).val() == 4) {
        m_sMappingGridId = "DocumentTable";
        document.getElementById("btnMapExternalModule").style.display = "block";      
        document.getElementById("ExternalhiddenTableDiv").style.display = "none"      
        document.getElementById("MasterName").style.display = "none";
        document.getElementById("ExternalDocumenthiddenTableDiv").style.display = "block";
        document.getElementById("ExternalFormhiddenTableDiv").style.display = "none";
        document.getElementById("FormName").style.display = "none";
        document.getElementById("DocumentName").style.display = "block";
        Form_ExternalModule.FillMappingDetails(true);
    }
    else {
        m_sMappingGridId = "";
        document.getElementById("btnMapExternalModule").style.display = "none";
        document.getElementById("ExternalhiddenTableDiv").style.display = "none"
        document.getElementById("MasterName").style.display = "none";
        document.getElementById("ExternalDocumenthiddenTableDiv").style.display = "none";
        document.getElementById("ExternalFormhiddenTableDiv").style.display = "none";
        document.getElementById("FormName").style.display = "none";
        document.getElementById("DocumentName").style.display = "none";
        //Form_ExternalModule.FillMappingDetails(true);
    }
    },
    InsertTrigger: function () {
        debugger
        var imoduletype = $("#ddlModuleType_Triggers").val();
        var imoduleText = $("#ddlModuleType_Triggers")[0].selectedOptions[0].textContent;
        var iTypeId;
        var sMappedname;
        if (imoduletype == 2)
        {
            iTypeId = parseInt(OPTIONCONTROL.getControlValue("id_MasterName"));
            sMappedname = OPTIONCONTROL.getControlText("id_MasterName");
        }
        else if (imoduletype == 3)
        {
            iTypeId = parseInt(OPTIONCONTROL.getControlValue("id_FormName"));
            sMappedname = OPTIONCONTROL.getControlText("id_FormName");
        }
        else if(imoduletype == 4)
        {
            iTypeId = parseInt(OPTIONCONTROL.getControlValue("Id_DocumentName"));
            sMappedname = OPTIONCONTROL.getControlText("Id_DocumentName");
        }
      
        var FormMapping = Form_ExternalModule.GetFormMapping();
        var Triiger_table = document.getElementById("tblExternalModules_Triggers").tBodies[0].rows;
        for (var i = 0; i < Triiger_table.length; i++) {
            var iType = parseInt(Triiger_table[i].children[1].dataset.moduletype);
            var iTypeId1 = parseInt(Triiger_table[i].children[2].dataset.mappedname);
            if(iType==FormMapping[0].Type && iTypeId1==FormMapping[0].TypeId )
            {
                FORMCUSTOMIZATION.selectTriggerRow(Triiger_table[i]);
                FORMCUSTOMIZATION.DeleteTriggerRow(imoduletype);

            }

        }
        var tbodyIndex = $("#tblExternalModules_Triggers tbody tr").length;
        $("#tblExternalModules_Triggers tbody")
          .append('<tr data-irowid=' + tbodyIndex + ' data-mappingdetails=' + JSON.stringify(FormMapping) + ' onclick="FORMCUSTOMIZATION.selectTriggerRow(this)">' +
                  '<td>' + (tbodyIndex+1) + '</td>' +
                  '<td data-moduletype="' + imoduletype + '">' + imoduleText + '</td>' +
                  '<td data-mappedname="'+iTypeId+'">' +sMappedname + '</td>' +
                  '</tr>');
        $("#ddlModuleType_Triggers").val("");
        document.getElementById("btnMapExternalModule").style.display = "none";
        //FORMCUSTOMIZATION.onTrigger_Change($("#ddlModuleType_Triggers"));
    },
    EditTrigger:function()
    {
        debugger
        var arrExternalModule = [];
        var allExtrModules = document.getElementById("tblExternalModules_Triggers").tBodies[0].rows;
        var tr = $("#tblExternalModules_Triggers tbody").find(".FormSelectedRowColor");
        if (allExtrModules.length == 0) {
            COMMON.prototype.showMessage("No Record in Table to Edit.");
        } else {
            if (tr.length > 0) {
                for (var i = 0; i < allExtrModules.length; i++) {
                    var extrModule = {
                        CallingOrder: (i + 1),
                        ModuleType: allExtrModules[i].children[1].dataset.moduletype,
                        MappedName: parseInt(allExtrModules[i].children[2].dataset.mappedname),
                        MappingDetails: allExtrModules[i].dataset.mappingdetails
                    }
                    arrExternalModule.push(extrModule);
                }
                if (rowNo > -1) {
                    document.getElementById("ddlModuleType_Triggers").value = arrExternalModule[rowNo].ModuleType;
                    FORMCUSTOMIZATION.onTrigger_Change(document.getElementById("ddlModuleType_Triggers"));
                    arrexmapping = JSON.parse(arrExternalModule[rowNo].MappingDetails);
                    FORMCUSTOMIZATION.EditMappedData(arrExternalModule[rowNo].MappedName);
                }
            }
            else {
                COMMON.prototype.showMessage("Select the Row to Edit.");
            }
        }
    },
    selectTriggerRow:function(ele)
    {
       debugger
       $(ele).parent().children().removeClass("FormSelectedRowColor");
       $(ele).addClass("FormSelectedRowColor");
        rowNo = ele.getAttribute('data-irowid');
    },
    EditMappedData:function(iTypeId)
    {
        debugger
        //$("#MapExternalModule_Modal").modal('show');
        if (m_sMappingGridId == "MasterTable") {

            //var ExtraField_MasterToLinkvalue = OPTIONCONTROL.getControlValue("ExtraField_MasterToLink");
            //var ExtraField_MasterToLinkName = OPTIONCONTROL.getControlText("ExtraField_MasterToLink");
            //OPTIONCONTROL.setControlText("id_MasterName", ExtraField_MasterToLinkName);
            OPTIONCONTROL.setControlValue("id_MasterName", iTypeId);
            FGRIDCONTROL.clearData("MasterTable", true);
            if (arrexmapping.length > 0) {
                FGRIDCONTROL.deleteRows("MasterTable", 1, arrexmapping.length + 1);
                for (var i = 0; i < arrexmapping.length; i++) {

                    FGRIDCONTROL.insertRows("MasterTable", i + 1, 1);
                    for (var col = 1; col <= 6; col++) {

                        var cellobj = FGRIDCONTROL.getCellObject("MasterTable", i + 1, col);
                        if (cellobj != null) {
                            switch (col) {
                                case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId);
                                    cellobj.setCellData(arrexmapping[i].FieldId);
                                    cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId)); break;

                                    break;

                                case 2: var chargetype = Form_ExternalModule.GetMappingFieldValue(parseInt(arrexmapping[i].MappingType));
                                    cellobj.setCellData(arrexmapping[i].MappingType);
                                    cellobj.setCellText(chargetype);
                                    break;

                                case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId);
                                    cellobj.setCellData(arrexmapping[i].MapFieldId);
                                    cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId)); break;
                                    break;

                                case 4: cellobj.setCellText(arrexmapping[i].Value);
                                    cellobj.setCellData(arrexmapping[i].Value); break;

                                default: break;
                            }
                        }
                    }
                }
            }
        }
        else if (m_sMappingGridId == "FormTable") {

            //var ExtraField_FormtoLinkvalue = OPTIONCONTROL.getControlValue("ExtraField_FormToLink");
            //var ExtraField_FormtoLinkNAme = OPTIONCONTROL.getControlText("ExtraField_FormToLink");
            //OPTIONCONTROL.setControlText("idF_FormName", ExtraField_FormtoLinkNAme);
            OPTIONCONTROL.setControlValue("id_FormName", iTypeId);

            FGRIDCONTROL.clearData("FormTable", true);
            if (arrexmapping.length > 0) {
                FGRIDCONTROL.deleteRows("FormTable", 1, arrexmapping.length + 1);

                for (var i = 0; i < arrexmapping.length; i++) {

                    FGRIDCONTROL.insertRows("FormTable", i + 1, 1);
                    for (var col = 1; col <= 4; col++) {

                        var cellobj = FGRIDCONTROL.getCellObject("FormTable", i + 1, col);
                        if (cellobj != null) {
                            switch (col) {
                                case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId);
                                    cellobj.setCellData(arrexmapping[i].FieldId);
                                    cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId)); break;

                                    break;

                                case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(parseInt(arrexmapping[i].MappingType));
                                    cellobj.setCellData(arrexmapping[i].MappingType);
                                    cellobj.setCellText(MappingType);
                                    break;

                                case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId);
                                    cellobj.setCellData(arrexmapping[i].MapFieldId);
                                    cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId)); break;
                                    break;

                                case 4: cellobj.setCellText(arrexmapping[i].Value);
                                    cellobj.setCellData(arrexmapping[i].Value); break;

                                default: break;
                            }
                        }
                    }
                }
            }

        }
        else
        {
            OPTIONCONTROL.setControlValue("Id_DocumentName", iTypeId);

            FGRIDCONTROL.clearData("DocumentTable", true);
            if (arrexmapping.length > 0) {
                FGRIDCONTROL.deleteRows("DocumentTable", 1, arrexmapping.length + 1);

                for (var i = 0; i < arrexmapping.length; i++) {

                    FGRIDCONTROL.insertRows("DocumentTable", i + 1, 1);
                    for (var col = 1; col <= 4; col++) {

                        var cellobj = FGRIDCONTROL.getCellObject("DocumentTable", i + 1, col);
                        if (cellobj != null) {
                            switch (col) {
                                case 1:
                                    $("#" + cellobj.ColumnAttribute.ctrlid).val(arrexmapping[i].FieldId);
                                    var DocText = $("#" + cellobj.ColumnAttribute.ctrlid).find("option:selected").text();
                                    cellobj.setCellData(arrexmapping[i].FieldId);
                                    cellobj.setCellText(DocText); break;

                                    break;

                                case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(parseInt(arrexmapping[i].MappingType));
                                    cellobj.setCellData(arrexmapping[i].MappingType);
                                    cellobj.setCellText(MappingType);
                                    break;

                                case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId);
                                    cellobj.setCellData(arrexmapping[i].MapFieldId);
                                    cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId)); break;
                                    break;

                                case 4: cellobj.setCellText(arrexmapping[i].Value);
                                    cellobj.setCellData(arrexmapping[i].Value); break;

                                default: break;
                            }
                        }
                    }
                }
            }
        }
    },
    DeleteTriggerRow: function (imoduletype)
    {
        debugger
        var tr = $("#tblExternalModules_Triggers tbody").find(".FormSelectedRowColor");
        var allExtrModules = document.getElementById("tblExternalModules_Triggers").tBodies[0].rows;

        if (allExtrModules.length == 0) {
            COMMON.prototype.showMessage("No Record in Table to Delete.");
        } else {
            if (tr.length > 0) {
                $("#tblExternalModules_Triggers tbody").find(".FormSelectedRowColor").remove();
                //if (document.getElementById("lblErrorMsg_ExtraField") != null && document.getElementById("lblErrorMsg_ExtraField") != undefined) {
                //    document.getElementById("lblErrorMsg_ExtraField").textContent = "";
                //}
                var allTr = document.getElementById("tblExternalModules_Triggers").tBodies[0].children;
                for (var i = 0; i < allTr.length; i++) {
                    allTr[i].dataset.irowid = i;
                    allTr[i].children[0].textContent = (i + 1);
                }
                if (imoduletype > 0) {
                    $("#ddlModuleType_Triggers").val(imoduletype);
                    FORMCUSTOMIZATION.onTrigger_Change(document.getElementById("ddlModuleType_Triggers"));
                }
                else {
                    $("#ddlModuleType_Triggers").val("");
                    FORMCUSTOMIZATION.onTrigger_Change($("#ddlModuleType_Triggers")[0]);
                }
            }
            else {
                COMMON.prototype.showMessage("Select the Row to delete.");
            }
        }
    },

    ShowFormulaCtrl: function (element) {
        debugger;
    var behaviorFormula = document.getElementById("Form_Formula");
    if (element.value == 1)
        behaviorFormula.style.display = "block";
    else
        behaviorFormula.style.display = "none";

    },

    sendAlertto: function (ele) {
        debugger;
        var sendAlertto = $(ele).val();
        if (sendAlertto == 1) {
            document.getElementById("DivUsers").style.display = "block";
            document.getElementById("DivRoles").style.display = "none";
            if ($("#iUserRoleFlagId").val() == 1 && $("#iUserRoleId").val() > 1) {
                $("#ExtraField_Users").val($("#iUserRoleId").val());
            }
            else {
                $("#ExtraField_Users").val("1");

            }
        }
        else if (sendAlertto == 2) {
            document.getElementById("DivRoles").style.display = "block";
            document.getElementById("DivUsers").style.display = "none";
            if ($("#iUserRoleFlagId").val() == 2 && $("#iUserRoleId").val() > 1) {
                $("#ExtraField_Roles").val($("#iUserRoleId").val());
            }
            else {
                $("#ExtraField_Roles").val("1");

            }
        }
        else {
            document.getElementById("DivUsers").style.display = "none";
            document.getElementById("DivRoles").style.display = "none";
            $("#ExtraField_Users").val("1");
            $("#ExtraField_Roles").val("1");
        }
    }
 
};

//debugger;
//if (document.getElementById("FormFields_list") != null && document.getElementById("FormFields_list") != undefined) {
//    FORMCUSTOMIZATION.ShowFieldsForTab(document.getElementById("FormFields_list").children[0], true);
//}
//if (document.getElementById("ddlConstraintTabList") != null && document.getElementById("ddlConstraintTabList") != undefined) {
//    FORMCUSTOMIZATION.SelectTab_ForConstraint($("#ddlConstraintTabList option:selected"));
//}

$(function () {
    debugger
    $("#FormFields_list").sortable({
        items: "li:not(':first')",
        cursor: "row-resize"
    });
    $(".sortable-Fields tbody").sortable({
        helper: 'fixHelper',
        cursor: "row-resize",
        //cursor: "-webkit-grabbing"
    });
    //function SetFieldsHeight() {
    //    //debugger;
    //    var pageHeight = GLOBAL.getPageHeight();
    //    var headerHeight = $("#msPageHeader").height();
    //    var msTabsHeight = $("#FormTabs").height();

    //    $("#allFormCustTabs").height(pageHeight - (headerHeight + msTabsHeight + 100));
    //    $(".tab-lst-Formcust").height(pageHeight - (headerHeight + msTabsHeight + 50));
    //    $(".sortable-Fields, .tbl-emptyfields-Formcust, .mainDivFlds").height(pageHeight - (headerHeight + msTabsHeight + 55));

    //    $("#AllReportsDiv_FormCust").height($("#FormCustomizingTabList").height() - 120);
    //    $("#infoPanelContainer_div").height($("#FormCustomizingTabList").height() - 120);

    //}
    //SetFieldsHeight();
    //$(window).on("resize", function (e) {
    //    SetFieldsHeight();
    //});

});
var m_arrFieldExMapping = [];
var Form_FieldModule = {
    cellChange: function (cellobj, event) {
        //debugger
        if (cellobj.bLeave == true) {
            return (Form_FieldModule.onLeave(cellobj, event));
        }
        else {
            Form_FieldModule.onEnter(cellobj, event);
        }
    },
    onEnter: function (cellobj, event) {
        debugger
        var element = null;
        var iValue = 0;
        var data = null;
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
        var MasterName = OPTIONCONTROL.getControlValue("idF_MasterName");
        var formName = OPTIONCONTROL.getControlValue("idF_FormName");
        if ((MasterName > 0 && MasterName != null) || (formName > 0 && formName != null)) {
            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                case MasterDataType.get("MASTER"):
                    if (cellobj.iColumn == 1) {
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        if (COMMON.prototype.isValidObject(element) == true) {
                            if (cellobj.getCellData("value") != null) {
                                cellobj.setControl(element, cellobj.getCellData("value"));
                            }
                        }
                        else {
                            cellobj.processDefault(event);
                        }
                    }
                    else {
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                        if ((rowvalue[1].Value == "0" && rowvalue[1].Value != null && rowvalue[1].Value != "") || (rowvalue[1].Value == "1" && rowvalue[1].Value != null && rowvalue[1].Value != "")) {
                            if (COMMON.prototype.isValidObject(element) == true) {
                                if (cellobj.getCellData("value") != null) {
                                    cellobj.setControl(element, cellobj.getCellData("value"));
                                }
                            }
                            else {
                                cellobj.processDefault(event);
                            }
                        }
                    }
                    break;
                case MasterDataType.get("NUMBERLIST"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (COMMON.prototype.isValidObject(element) == true) {
                        if (cellobj.getCellData("value") == null) {
                        }
                        else {
                            cellobj.setControl(element, cellobj.getCellData("value"));
                        }
                    }
                    else {
                        cellobj.processDefault(event);
                    }
                    break;
                case MasterDataType.get("FRACTION"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                    if ((rowvalue[1].Value == 2 && rowvalue[1].Value != null && rowvalue[1].Value != "") || (rowvalue[1].Value == 3 && rowvalue[1].Value != null && rowvalue[1].Value != "")) {
                        cellobj.setControl(element, cellobj.getCellData("value"));
                    }
                    else {
                        cellobj.processDefault(event);
                    }
                    break;
                default:
                    break;
            }
        }
    },
    onLeave: function (cellobj, event) {
        debugger
        var element = null;
        var data = null;
        var MasterName = OPTIONCONTROL.getControlValue("idF_MasterName");
        var formName = OPTIONCONTROL.getControlValue("idF_FormName");
       
        if ((MasterName > 0 && MasterName != null) || (formName > 0 && formName != null)) {
            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
                switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                    case MasterDataType.get("MASTER"):
                        if (cellobj.iColumn == 1) {
                            data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                           
                            var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                            if ((rowvalue[2].Value.trim() != "" && rowvalue[2].Text.trim()!="" ))
                            {
                                if (COMMON.prototype.getObjectFirstPropertyValue(data[0]).trim() != "" && COMMON.prototype.getObjectFirstPropertyValue(data[1]).trim() != "") {
                                    OPTIONCONTROL.setControlValue(rowvalue[2].MetaData.ctrlid, parseInt(rowvalue[2].Value));
                                    //var v = OPTIONCONTROL.getControlDataObject(rowvalue[2].MetaData.ctrlid);
                                    var FieldData = OPTIONCONTROL.getControlData(rowvalue[2].MetaData.ctrlid);
                                    if (FieldData.length != 0 && data.length != 0) {
                                        var i = data.findIndex(x=>x.iDataTypeId);
                                        var k = FieldData.findIndex(x=>x.iDataTypeId);

                                        if (data[i].iDataTypeId != FieldData[k].iDataTypeId) {
                                            alert("DataType Mismatch");
                                            return false;
                                        }
                                    }
                                }
                            }
                            cellobj.setCellData("value", parseFloat(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                            cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                            break;
                        }
                        else {
                            data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                            var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);

                            if ((rowvalue[1].Value != "" && rowvalue[1].Value == 0) || (rowvalue[1].Value != "" && rowvalue[1].Value == 1)) {

                               
                                if ((rowvalue[0].Value.trim() != "") & !isNaN(rowvalue[0].Value.trim())) {
                                    if (COMMON.prototype.getObjectFirstPropertyValue(data[0]).trim() != "" && COMMON.prototype.getObjectFirstPropertyValue(data[1]).trim() != "") {
                                       OPTIONCONTROL.setControlValue(rowvalue[0].MetaData.ctrlid, parseInt(rowvalue[0].Value))
                                        //var v = OPTIONCONTROL.getControlDataObject(rowvalue[0].MetaData.ctrlid);
                                        var FieldData = OPTIONCONTROL.getControlData(rowvalue[0].MetaData.ctrlid);

                                        if (FieldData.length != 0 && data.length != 0) {
                                            var i = data.findIndex(x=>x.iDataTypeId);
                                            var k = FieldData.findIndex(x=>x.iDataTypeId);
                                            if (data[i].iDataTypeId != FieldData[k].iDataTypeId) {
                                                alert("DataType Mismatch");
                                                return false;
                                            }
                                        }
                                    }
                                }
                                cellobj.setCellData("value", parseFloat(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                                cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                            }
                        }
                        break;
                    case MasterDataType.get("NUMBERLIST"):
                        if (cellobj.iColumn == 1) {
                            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                            cellobj.setCellData("value", element.value);
                            cellobj.setCellText($(element).find("option:selected").text());
                        }
                        else {
                            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                            //var v = element.options[element.selectedIndex].value;
                            var v = element.selectedIndex;                          
                            if(v!=-1){
                                if (COMMON.prototype.isValidObject(element) == true) {

                                if (element.selectedOptions[0] != undefined) {
                                    cellobj.setCellText(element.selectedOptions[0].text, element.selectedOptions[0].value);
                                }
                                else {
                                    cellobj.setCellText(element.value, element.value);
                                }
                                var MapField = parseInt(cellobj.getCellData("value"));
                                switch (MapField) {
                                    //case 0: {
                                    //    //Field

                                    //    var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                    //    if (MyFields != null && MyFields != undefined) {
                                    //        var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                    //        objMyFields.setControl("value", "0");
                                    //        objMyFields.setCellData("value", "0");
                                    //        objMyFields.setCellText("");
                                    //        var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                    //        ObjValue.setCellData("value", "");
                                    //        ObjValue.setCellText("");
                                    //    }
                                    //    break;
                                    //}
                                    //case 1:
                                    //    {   //variable
                                    //        var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                    //        if (MyFields != null && MyFields != undefined) {
                                    //            var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                    //            objMyFields.setControl("value", "0");
                                    //            objMyFields.setCellData("value", "0");
                                    //            objMyFields.setCellText("");
                                    //            var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                    //            ObjValue.setCellData("value", "");
                                    //            ObjValue.setCellText("");
                                    //        }
                                    //        break;
                                    //    }
                                    case 2://value
                                        {
                                            var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                            if (MyFields != null && MyFields != undefined) {
                                                var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                                objMyFields.setControl("value", "0");
                                                objMyFields.setCellData("value", "0");
                                                objMyFields.setCellText("");
                                                var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                                ObjValue.setCellData("value", "");
                                                ObjValue.setCellText("");
                                            }
                                            //if (cellobj.iColumn == 2) {
                                            //    FGRIDCONTROL.gotoCell(sGridCtrlId, cellobj.iRow, 4, event);
                                            //}
                                            break;
                                        }
                                    case 3:
                                        {//Formulae
                                            var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                            if (MyFields != null && MyFields != undefined) {
                                                var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                                objMyFields.setControl("value", "0");
                                                objMyFields.setCellData("value", "0");
                                                objMyFields.setCellText("");
                                                var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                                ObjValue.setCellData("value", "");
                                                ObjValue.setCellText("");
                                            }
                                            //if (cellobj.iColumn == 2) {
                                            //    FGRIDCONTROL.gotoCell(sGridCtrlId, cellobj.iRow, 4, event);
                                            //}
                                            break;
                                        }
                                    default:
                                        break;
                                }
                            }
                        }else{
                                COMMON.prototype.showMessage("Select Mapping Type");
                                //cellobj.setControl(element, cellobj.getCellData("value"));
                                //cellobj.focus();
                        }


                            var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                            if (parseInt(FGRIDCONTROL.getTotalRows(sGridCtrlId)) == parseInt(cellobj.iRow)) {
                                if (rowvalue[1].Value != "" && rowvalue[1].Value >= 0) {
                                    var row = FGRIDCONTROL.getTotalRows(sGridCtrlId)
                                    FGRIDCONTROL.insertRows(sGridCtrlId, row + 1, 1);
                                }
                            }
                        }

                        break;
                    case MasterDataType.get("FRACTION"):
                        var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                        if (rowvalue[1].Value != "" && rowvalue[1].Value >= 2) {
                            cellobj.setCellText($("#" + cellobj.ColumnAttribute.ctrlid).val());
                            cellobj.setCellData("value", $("#" + cellobj.ColumnAttribute.ctrlid).val());
                        }
                        break;
                }
            }
        }
        return (true);
    },
    SetMasterDetails: function () {
        debugger
        FGRIDCONTROL.clearData("FieldMasterTable");
        var iMasterTypeId = parseInt(OPTIONCONTROL.getControlValue("idF_MasterName"));
        if (iMasterTypeId > 0) {
            var sFilter = "iMasterId=" + iMasterTypeId;
            OPTIONCONTROL.setFilter("FieldMasterTable_MasterName", sFilter);
            FGRIDCONTROL.gotoCell("FieldMasterTable", 1, 1, event);
        }
    },
    setFormDetails: function () {
        debugger
        FGRIDCONTROL.clearData("FieldFormTable");

        var iFormTypeId = parseInt(OPTIONCONTROL.getControlValue("idF_FormName"));
        if (iFormTypeId > 0) {
            var sFilter = "iFormId=" + iFormTypeId;
            OPTIONCONTROL.setFilter("FieldFormTable_FormName", sFilter);
            FGRIDCONTROL.gotoCell("FieldFormTable", 1, 1, event);
        }
    },
    FillMappingDetails: function () {
    debugger
    m_arrFieldExMapping = [];
    FGRIDCONTROL.update(m_sMappingGridId);
    for (var i = 1; i <= FGRIDCONTROL.getTotalRows(m_sMappingGridId) ; i++) {
        var obj_RowData = FGRIDCONTROL.getRowValue(m_sMappingGridId, i);
        if (!isNaN(obj_RowData[0].Value) & obj_RowData[0].Value!="")
        {
            var FormsExMapping = {
                FieldId: obj_RowData[0].Value,
                MapFieldId: obj_RowData[2].Value,
                FormFieldId: document.getElementById("ModeOfPopup_ExtraField").dataset.extrafieldid,
                MappingType: obj_RowData[1].Value,
                ModuleId: 0,
                Type: m_sMappingGridId == "FieldMasterTable" ? 0 : 1,//1-Formatble
                Value: obj_RowData[3].Value,
                TypeId: m_sMappingGridId == "FieldMasterTable" ? parseInt(OPTIONCONTROL.getControlValue("idF_MasterName")) : parseInt(OPTIONCONTROL.getControlValue("idF_FormName"))
            }
         
            m_arrFieldExMapping.push(FormsExMapping);
        }
    }       

    FGRIDCONTROL.clearData(m_sMappingGridId, true);
    OPTIONCONTROL.clear("idF_MasterName");
    OPTIONCONTROL.clear("idF_FormName");
    $("#MapFieldsModule_Modal").modal('hide');
    $("#MapFieldsModule_Modal").css('display','none');

    },

    Openpopup: function () {
debugger
$("#MapFieldsModule_Modal").modal('show');
        $("#MapFieldsModule_Modal").css('display','block');
        if (m_sMappingGridId == "FieldMasterTable") {

            var ExtraField_MasterToLinkvalue = OPTIONCONTROL.getControlValue("ExtraField_MasterToLink");
            var ExtraField_MasterToLinkName = OPTIONCONTROL.getControlText("ExtraField_MasterToLink");          
            OPTIONCONTROL.setControlText("idF_MasterName", ExtraField_MasterToLinkName);
            OPTIONCONTROL.setControlValue("idF_MasterName", ExtraField_MasterToLinkvalue);
            FGRIDCONTROL.clearData("FieldMasterTable", true);
            if (arrexmapping != null) {
                if (arrexmapping.length > 0) {
                    FGRIDCONTROL.deleteRows("FieldMasterTable", 1, arrexmapping.length + 1);
                    for (var i = 0; i < arrexmapping.length; i++) {

                        FGRIDCONTROL.insertRows("FieldMasterTable", i + 1, 1);
                        for (var col = 1; col <= 6; col++) {

                            var cellobj = FGRIDCONTROL.getCellObject("FieldMasterTable", i + 1, col);
                            if (cellobj != null) {
                                switch (col) {
                                    case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId);
                                        cellobj.setCellData(arrexmapping[i].FieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId)); break;

                                        break;

                                    case 2: var chargetype = Form_ExternalModule.GetMappingFieldValue(arrexmapping[i].MappingType);
                                        cellobj.setCellData(arrexmapping[i].MappingType);
                                        cellobj.setCellText(chargetype);
                                        break;

                                    case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId);
                                        cellobj.setCellData(arrexmapping[i].MapFieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId)); break;
                                        break;

                                    case 4: cellobj.setCellText(arrexmapping[i].Value);
                                        cellobj.setCellData(arrexmapping[i].Value); break;

                                    default: break;
                                }
                            }
                        }
                    }
                }
            }
        }
        else {

            var ExtraField_FormtoLinkvalue = OPTIONCONTROL.getControlValue("ExtraField_FormToLink");
            var ExtraField_FormtoLinkNAme = OPTIONCONTROL.getControlText("ExtraField_FormToLink");         
            OPTIONCONTROL.setControlText("idF_FormName", ExtraField_FormtoLinkNAme);
            OPTIONCONTROL.setControlValue("idF_FormName", ExtraField_FormtoLinkvalue);

            FGRIDCONTROL.clearData("FieldFormTable", true);
            if (arrexmapping != null) {
                if (arrexmapping.length > 0) {
                    FGRIDCONTROL.deleteRows("FieldFormTable", 1, arrexmapping.length + 1);

                    for (var i = 0; i < arrexmapping.length; i++) {

                        FGRIDCONTROL.insertRows("FieldFormTable", i + 1, 1);
                        for (var col = 1; col <= 4; col++) {

                            var cellobj = FGRIDCONTROL.getCellObject("FieldFormTable", i + 1, col);
                            if (cellobj != null) {
                                switch (col) {
                                    case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId);
                                        cellobj.setCellData(arrexmapping[i].FieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].FieldId)); break;

                                        break;

                                    case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(arrexmapping[i].MappingType);
                                        cellobj.setCellData(arrexmapping[i].MappingType);
                                        cellobj.setCellText(MappingType);
                                        break;

                                    case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId);
                                        cellobj.setCellData(arrexmapping[i].MapFieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, arrexmapping[i].MapFieldId)); break;
                                        break;

                                    case 4: cellobj.setCellText(arrexmapping[i].Value);
                                        cellobj.setCellData(arrexmapping[i].Value); break;

                                    default: break;
                                }
                            }
                        }
                    }
                }
            }
        }
    },
};
/* RULECONDITIONS.js
 * Implementation:- 29-06-2016
 *
 * By:- Tarun Kumar Dewangan
 * License:- Focussoftnet pvt. ltd. 
 */
var strFilter = "";
var LeaveEventGrid;
var selectedRow = 0;
var selectedColumn = 0;
var iNewConditionNo;
var Globaldata;
var GlobalRuleId;
var bIsFieldDDL = false;
var bClear = true;
var m_FldRules;
var m_DeletedRuleConditions = [];
var objCustomFontClass = {
    arrFontData_IF: [],
    arrFontData_ELSE: [],
    arrFontData_ELSEIF: []
};
var RULECONDITIONS = {
    arrOperators: [],
    arrConjuction: [],
    arrCompareWith: [],    
    ruleDefHeight: 0,
    Rules_ResourceMsgs: null,
    RuleIdAndConditionNo: null,

    setValues: function (operators, comparewith, conjuctions) {
        RULECONDITIONS.arrOperators = operators;
        RULECONDITIONS.arrConjuction = conjuctions;
        RULECONDITIONS.arrCompareWith = comparewith;
    },
    SetRulesResourceMessages: function (arrResourceMsgs) {
        //////debugger;
        if (arrResourceMsgs != null && arrResourceMsgs != undefined) {
            RULECONDITIONS.Rules_ResourceMsgs = arrResourceMsgs;
        }
    },

    OnDivScroll: function (ele) {
        OPTIONCONTROL.updatePopupPosition();
    },

    GetSelectedRuleId: function (sRuleId) {
        var iRuleId = 0;
        try {
            iRuleId = parseInt(OPTIONCONTROL.getControlValue("txtFormRuleName_" + sRuleId));
        } catch (e) {
            iRuleId = 0;
        }
        return iRuleId
    },
    GetRuleIdFromControl: function (ctrlID) {
        var rId = ctrlID.lastIndexOf("_");
        rId = ctrlID.substring((rId + 1), ctrlID.length);
        return rId;
    },

    //***Added by Rashmi*****//
    UserOrRoles: function (ele) {
        debugger;
        var opt_value = ele.value;
        var sRuleId = ele.dataset.id;
        var d = document.getElementById("ddlRolesAlert_" + sRuleId + "");
        var rolecount = parseInt(ele.dataset.rolecount);
        var usercountn = parseInt(ele.dataset.usercount);
        for (i = 0; i < rolecount + usercountn  ; i++) {
            d.options[i].hidden = false;
        }
        if (opt_value == 0) {
            for (i = usercountn; i < rolecount + usercountn ; i++) {
                d.options[i].hidden = true;
            }
        }

        if (opt_value == 1) {
            for (i = 0; i < usercountn ; i++) {
                d.options[i].hidden = true;
            }
        }
        if (opt_value == 2) {
            var loginid = parseInt(ele.dataset.globalid);
            for (i = 0; i < d.length; i++) {
                if (loginid == d.options[i].value) {
                    d.options[i].hidden = false;
                }
                else {
                    d.options[i].hidden = true;
                }
            }
        }
    },

    Toggle_RuleCondition: function (ele) {
        debugger;
        var siblingsCount = ele.parentElement.children.length;
        var tabParent = ele.parentElement;
        var eleId = ele.dataset.divid;
        for (var i = 0; i < siblingsCount; i++) {
            var tabId = tabParent.children[i].dataset.divid;
            if (eleId != tabId) {
                document.getElementById(tabId).style.display = "none";
                $("#tab_" + tabId).removeClass('active');
                $("#" + tabId).removeClass('active');              
            }
        }
        document.getElementById(eleId).style.display = "block";
        $("#tab_" + eleId).addClass('active');
        $("#" + eleId).addClass('active');
    },

    GetRuleDetails: function (ctrl) {
        ////debugger;
        var ruleId = OPTIONCONTROL.getControlValue(ctrl.id.trim());
        var sRuleId = RULECONDITIONS.GetRuleIdFromControl(ctrl.id.trim());
        if (ruleId > 0) {
            var oldRuleId = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
            if (oldRuleId.value.trim() != "") {
                if (ruleId == parseInt(oldRuleId.value.trim())) {
                    return false;
                }
            }
            oldRuleId.value = ruleId;
            RULECONDITIONS.ClearRuleDetails(sRuleId);
            var msTypeId = parseInt(document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId).dataset.linktypeid); // OPTIONCONTROL.getControlValue("txtFormName");
            var LinkTypeId = oldRuleId.dataset.linktype;
            var urlPath = GLOBAL.getContextPath("GetFormRules", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: msTypeId, iRuleId: ruleId, iLinkType: LinkTypeId }, "JSON", true, "RULECONDITIONS.SetRuleDetails", "", "", sRuleId);
        }
        else {
            var oldRuleId = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
            oldRuleId.value = ruleId;
            oldRuleId.dataset.conditionid1 = "";
            oldRuleId.dataset.conditionid2 = "";
            RULECONDITIONS.ClearRuleDetails(sRuleId);
        }
    },

    FormRulesPartials: function (ctrl, iNewConditionNo) {
        debugger;
        var ruleId = OPTIONCONTROL.getControlValue(ctrl.id.trim());
        var ruleText = OPTIONCONTROL.getControlText(ctrl.id.trim());
        var sRuleId = RULECONDITIONS.GetRuleIdFromControl(ctrl.id.trim());

        RULECONDITIONS.ClearRuleDetails(sRuleId);

        var tempData = {
            iSelectedRuleId: ruleId,
            sSelectedRuleId: sRuleId,
            sSelectedRuleText: ruleText
        }
        if (ruleId > 0) {
            //RULECONDITIONS.ClearRuleDetails(sRuleId);

            var oldRuleId = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
            //if (oldRuleId.value.trim() != "") {
            //    if (ruleId == parseInt(oldRuleId.value.trim())) {
            //        return false;
            //    }
            //}
            oldRuleId.value = ruleId;
            var msTypeId = parseInt(document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId).dataset.linktypeid); // OPTIONCONTROL.getControlValue("txtFormName");
            var LinkTypeId = oldRuleId.dataset.linktype;
            var urlPath = GLOBAL.getContextPath("FormRules", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iRuleId: ruleId, sRuleId: sRuleId, iFormOrLinkTypeId: msTypeId, iLinkType: LinkTypeId, iMenuId: 3329, objRule: null, arrAllFields: null }, "HTML", true, "RULECONDITIONS.FormRulesPartialsSuccess", "", "", tempData);
        }
        else {
            //$(".ELSE_IF-DynamicTab_" + sRuleId).remove();
            //$(".dynamic_ELSEIF_TabContainer").remove();
            RULECONDITIONS.NewRuleDetails(sRuleId);
            //RULECONDITIONS.ClearRuleDetails(sRuleId);
            //$('#Conditions-Context_Menu a[href="#Rule_IF_' + sRuleId + '"]').trigger('click');
            //$('#Conditions-Context_Menu li[data-divid="Rule_IF' + sRuleId + '"]').trigger('click');
            //document.getElementById("chkNoRuleCondition_" + sRuleId).checked = false;
            //RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + sRuleId));

            //document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId).value = "";
        }
    },
    FormRulesPartialsSuccess: function (bSuccess, data, tempData) {
        debugger;
        if (bSuccess && data != "") {
            $(".lnkbtnRule").hide();
            $("#newRuleTab_div_" + tempData.sSelectedRuleId).html("");
            $("#newRuleTab_div_" + tempData.sSelectedRuleId).html(data);

            data = Globaldata;
            RuleId = GlobalRuleId;
            ////debugger;
            $("#chkCreatingGroup_Rule_" + RuleId + "").focus();

            $(".ddlOperatorsClass").each(function () {
                ////debugger;
                $(this).trigger("change");
            });

            //OPTIONCONTROL.setControlValue("txtFormRuleName_" + tempData.sSelectedRuleId, tempData.iSelectedRuleId);
            //OPTIONCONTROL.setControlText("txtFormRuleName_" + tempData.sSelectedRuleId, tempData.sSelectedRuleText);
            //RULECONDITIONS.SetRuleConditions(RuleId, arrRuleCondition);
            //RULECONDITIONS.SetRuleDetailsForPartials(data, tempData.sSelectedRuleId);
        }
    },

    RuleConditionsPartials: function (ctrl, iNewConditionNo) {
       //debugger;
        var ruleId = OPTIONCONTROL.getControlValue(ctrl.id.trim());
        var sRuleId = RULECONDITIONS.GetRuleIdFromControl(ctrl.id.trim());
        if (iNewConditionNo == 0) {
            RULECONDITIONS.ClearRuleDetails(sRuleId);
        }
        if (ruleId > 0 || iNewConditionNo > 0) {
            var oldRuleId = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
            //if (oldRuleId.value.trim() != "") {
            //    if (ruleId == parseInt(oldRuleId.value.trim())) {
            //        return false;
            //    }
            //}
            oldRuleId.value = ruleId;
            var msTypeId = parseInt(document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId).dataset.linktypeid); // OPTIONCONTROL.getControlValue("txtFormName");
            var LinkTypeId = oldRuleId.dataset.linktype;
            ////debugger;
            var urlPath = GLOBAL.getContextPath("RuleConditions", "FormCustomization", "Forms");
            var RuleConditionsData = {
                iRuleId: ruleId,
                sRuleId: sRuleId,
                iNewConditionNo: iNewConditionNo
            };
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { objRule: null, AllFields: null, iRuleId: ruleId, sRuleId: sRuleId, iFormTypeId: msTypeId, iNewConditionNo: iNewConditionNo, iLinkType: LinkTypeId }, "HTML", true, "RULECONDITIONS.RuleConditionsPartialsSuccess", "", "", RuleConditionsData);
        }
    },
    RuleConditionsPartialsSuccess: function (bSuccess, data, RuleConditionsData) {
        //debugger;
        if (bSuccess && data != "") {
            $(".lnkbtnRule").hide();
            if (RuleConditionsData.iNewConditionNo > 0) {
                //$("#AllRulesDiv_" + RuleConditionsData.sRuleId).html("");
                $(data).insertBefore('.ELSE-TabContainer');
                $('#Conditions-Context_Menu a[href="#Rule_ELSEIF_' + RuleConditionsData.iNewConditionNo + '_' + RuleConditionsData.sRuleId + '"]').trigger('click');
            }
            else {
                $("#AllRulesDiv_" + RuleConditionsData.sRuleId).html("");
                $("#AllRulesDiv_" + RuleConditionsData.sRuleId).append(data);
            }
            //RULECONDITIONS.SetRuleConditions(RuleConditionsData.sRuleId, arrRuleCondition);
            //RULECONDITIONS.SetRuleDetailsForPartials();

            //RULECONDITIONS.SetRuleDetailsForPartials();
        }
    },

    removeCondition: function (ctrl, iNewConditionNo, sRuleId) {
        debugger;
      
        var eSelectedLi = $('#Conditions-Context_Menu li[data-divId="Rule_ELSEIF_' + iNewConditionNo + '_' + sRuleId + '"]');
        var iRuleConditionId = 0;
        if (eSelectedLi != undefined) {           
            iRuleConditionId = parseInt(eSelectedLi[0].children[0].dataset.ruleconditionid);
        }
        if (iRuleConditionId > 0) {
            m_DeletedRuleConditions.push(iRuleConditionId);
        }        
        $('#Conditions-Context_Menu li[data-divId="Rule_ELSEIF_' + iNewConditionNo + '_' + sRuleId + '"]').remove();
        $('#Rule_ELSEIF_' + iNewConditionNo + '_' + sRuleId + '').remove();        
        $('#Conditions-Context_Menu li[data-divid="Rule_IF' + sRuleId + '"]').trigger('click');
    },

    SetRuleDetails: function (bSuccess, data, RuleId) {
        //debugger;
        if (bSuccess && data != "") {
            if (data.CreateGroup == true) {
                document.getElementById("chkCreatingGroup_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkCreatingGroup_Rule_" + RuleId).checked = false;
            }
            if (data.NewRecord == true) {
                document.getElementById("chkNewRecord_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkNewRecord_Rule_" + RuleId).checked = false;
            }
            if (data.Edit == true) {
                document.getElementById("chkEdit_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkEdit_Rule_" + RuleId).checked = false;
            }
            if (data.Load == true) {
                document.getElementById("chkLoad_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkLoad_Rule_" + RuleId).checked = false;
            }
            if (data.onLeave == true) {
                document.getElementById("chkOnLeave_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkOnLeave_Rule_" + RuleId).checked = false;
            }
            if (data.onEnter == true) {
                document.getElementById("chkOnEnter_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkOnEnter_Rule_" + RuleId).checked = false;
            }
            if (data.BeforeSave == true) {
                document.getElementById("chkBeforeSave_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkBeforeSave_Rule_" + RuleId).checked = false;
            }
            if (data.BeforeDelete == true) {
                document.getElementById("chkBeforeDelete_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkBeforeDelete_Rule_" + RuleId).checked = false;
            }
            if (data.IsRuleActive == true) {
                document.getElementById("chkIsRuleActive_Rule_" + RuleId).checked = true;
            } else {
                document.getElementById("chkIsRuleActive_Rule_" + RuleId).checked = false;
            }
            ////debugger;
            var ruleConditions = document.getElementById("sRuleIdAndConditionNo_Rules_" + RuleId);
            if (!data.DoNotCheckCondition) {
                ruleConditions.dataset.conditionid1 = data.RuleBody[0].RuleConditionId;
                ruleConditions.dataset.conditionid2 = data.RuleBody[1].RuleConditionId;
                document.getElementById("chkNoRuleCondition_" + RuleId).checked = false;
            }
            else {
                ruleConditions.dataset.conditionid1 = data.RuleBody[0].RuleConditionId;
                document.getElementById("chkNoRuleCondition_" + RuleId).checked = true;
            }
            var arrConditions_IF = data.RuleBody[0].RuleCondition;
            if (data.DoNotCheckCondition == false) {
                RULECONDITIONS.SetRuleConditions(RuleId, arrConditions_IF);
                //RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));
            }
            else {
                RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));
            }
            //debugger;
            var arrFormating_IF = data.RuleBody[0].RuleFormatting == undefined ? [] : data.RuleBody[0].RuleFormatting;
            var arrAlerts_IF = data.RuleBody[0].RuleAlertBody == undefined ? [] : data.RuleBody[0].RuleAlertBody;
            RULECONDITIONS.FillFormatingTable(RuleId, "tblFormating_IF_Rule_" + RuleId, arrFormating_IF);
            document.getElementById("txtGeneralMsg_RuleIfMsg_" + RuleId).value = data.RuleBody[0].GeneralMessage;
            document.getElementById("txtAlertMsg_RuleIfAlert_" + RuleId).value = data.RuleBody[0].AlertMessage;
            $("#lstRdoMessageType_RuleIF_" + RuleId + " input[type='radio'][value=" + data.RuleBody[0].MessageType + "]").prop('checked', true);
            RULECONDITIONS.FillAlertsTable(RuleId, "tblAlert_IF_Rule_" + RuleId, arrAlerts_IF);

            var arrFormating_Else = data.RuleBody[1].RuleFormatting == undefined ? [] : data.RuleBody[1].RuleFormatting;
            var arrAlerts_Else = data.RuleBody[1].RuleAlertBody == undefined ? [] : data.RuleBody[1].RuleAlertBody;
            RULECONDITIONS.FillFormatingTable(RuleId, "tblFormating_Else_Rule_" + RuleId, arrFormating_Else);
            document.getElementById("txtGeneralMsg_RuleElseMsg_" + RuleId).value = data.RuleBody[1].GeneralMessage;
            document.getElementById("txtAlertMsg_RuleElseAlert_" + RuleId).value = data.RuleBody[1].AlertMessage;
            $("#lstRdoMessageType_RuleElse_" + RuleId + " input[type='radio'][value=" + data.RuleBody[1].MessageType + "]").prop('checked', true);
            RULECONDITIONS.FillAlertsTable(RuleId, "tblAlert_Else_Rule_" + RuleId, arrAlerts_Else);
            RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));

        }
    },
    SetRuleDetailsForPartials: function (objRule, RuleId) {
        //debugger;
        var ruleConditions = document.getElementById("sRuleIdAndConditionNo_Rules_" + RuleId);
        //var bNoCondition = document.getElementById("chkNoRuleCondition_" + RuleId).checked;
        if (!objRule.DoNotCheckCondition) {
        //if (!bNoCondition) {
            ruleConditions.dataset.conditionid1 = objRule.RuleBody[0] == undefined ? 0 : objRule.RuleBody[0].RuleConditionId;
            ruleConditions.dataset.conditionid2 = objRule.RuleBody[1] == undefined ? 0 : objRule.RuleBody[1].RuleConditionId;
            document.getElementById("chkNoRuleCondition_" + RuleId).checked = false;
            RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));

        }
        else {
            ruleConditions.dataset.conditionid1 = objRule.RuleBody[0].RuleConditionId;
            document.getElementById("chkNoRuleCondition_" + RuleId).checked = true;
            RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));

        }

        //debugger;
        var arrFormating_IF = objRule.RuleBody[0].RuleFormatting == null ? [] : objRule.RuleBody[0].RuleFormatting;
        var arrAlerts_IF = objRule.RuleBody[0].RuleAlertBody == null ? [] : objRule.RuleBody[0].RuleAlertBody;
        RULECONDITIONS.FillFormatingTable(RuleId, "tblFormating_IF_Rule_" + RuleId, arrFormating_IF);
        if (objRule.RuleBody[0].GeneralMessage != undefined && objRule.RuleBody[0].GeneralMessage != null && objRule.RuleBody[0].GeneralMessage != "") {
            document.getElementById("txtGeneralMsg_RuleIfMsg_" + RuleId).value = objRule.RuleBody[0].GeneralMessage;
        }
        if (objRule.RuleBody[0].AlertMessage != undefined && objRule.RuleBody[0].AlertMessage != null && objRule.RuleBody[0].AlertMessage != "") {
            document.getElementById("txtAlertMsg_RuleIfAlert_" + RuleId).value = objRule.RuleBody[0].AlertMessage;
        }
        $("#lstRdoMessageType_RuleIF_" + RuleId + " input[type='radio'][value=" + objRule.RuleBody[0].MessageType + "]").prop('checked', true);
        RULECONDITIONS.FillAlertsTable(RuleId, "tblAlert_IF_Rule_" + RuleId, arrAlerts_IF);

        ////debugger;
        if (objRule.RuleBody.length > 2) {
            if (objRule.DoNotCheckCondition == false) {
            //if (bNoCondition == false) {
                for (var iRulesTabCounter = 1; iRulesTabCounter < objRule.RuleBody.length - 1; iRulesTabCounter++) {
                    for (var iRulesConditionCounter = 0; iRulesConditionCounter < objRule.RuleBody[iRulesTabCounter].RuleCondition.length; iRulesConditionCounter++) {

                        //var arrConditions_ELSEIF = objRule.RuleBody[iRulesTabCounter].RuleCondition;
                        //if (objRule.DoNotCheckCondition == false) {
                        //    RULECONDITIONS.SetRuleConditionsForPartials(RuleId, arrConditions_ELSEIF);
                        //    //RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));
                        //}
                        //else {
                        //    RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));
                        //}
                        //debugger;
                        var arrFormating_ELSEIF = objRule.RuleBody[iRulesTabCounter].RuleFormatting == null ? [] : objRule.RuleBody[iRulesTabCounter].RuleFormatting;
                        var arrAlerts_ELSEIF = objRule.RuleBody[iRulesTabCounter].RuleAlertBody == null ? [] : objRule.RuleBody[iRulesTabCounter].RuleAlertBody;
                        RULECONDITIONS.FillFormatingTable(RuleId, "tblFormating_ELSEIF_Rule_" + RuleId + "_" + (iRulesTabCounter + 1), arrFormating_ELSEIF);
                        if ($("#txtGeneralMsg_RuleElseIfMsg_" + RuleId + "_" + (iRulesTabCounter + 1)).length > 0) {
                            $("#txtGeneralMsg_RuleElseIfMsg_" + RuleId + "_" + (iRulesTabCounter + 1)).val(objRule.RuleBody[iRulesTabCounter].GeneralMessage);
                        }
                        if ($("#txtAlertMsg_RuleElseIfAlert_" + RuleId + "_" + (iRulesTabCounter + 1)).length > 0) {
                            $("#txtAlertMsg_RuleElseIfAlert_" + RuleId + "_" + (iRulesTabCounter + 1)).val(objRule.RuleBody[iRulesTabCounter].AlertMessage);
                        }
                        //document.getElementById("txtGeneralMsg_RuleElseIfMsg_" + RuleId + "_" + (iRulesTabCounter + 1)).value = objRule.RuleBody[iRulesTabCounter].GeneralMessage;
                        //document.getElementById("txtAlertMsg_RuleElseIfAlert_" + RuleId + "_" + (iRulesTabCounter + 1)).value = objRule.RuleBody[iRulesTabCounter].AlertMessage;
                        $("#lstRdoMessageType_RuleElseIF_" + RuleId + "_" + (iRulesTabCounter + 1) + " input[type='radio'][value=" + objRule.RuleBody[iRulesTabCounter].MessageType + "]").prop('checked', true);
                        RULECONDITIONS.FillAlertsTable(RuleId, "tblAlert_ELSEIF_Rule_" + RuleId + "_" + (iRulesTabCounter + 1), arrAlerts_ELSEIF);
                    }
                }
            }
        }
        //debugger
        if (objRule.RuleBody[objRule.RuleBody.length - 1] != undefined) {
            var arrFormating_Else = objRule.RuleBody[objRule.RuleBody.length - 1].RuleFormatting == null ? [] : objRule.RuleBody[objRule.RuleBody.length - 1].RuleFormatting;
            var arrAlerts_Else = objRule.RuleBody[objRule.RuleBody.length - 1].RuleAlertBody == null ? [] : objRule.RuleBody[objRule.RuleBody.length - 1].RuleAlertBody;
            RULECONDITIONS.FillFormatingTable(RuleId, "tblFormating_Else_Rule_" + RuleId, arrFormating_Else);
            document.getElementById("txtGeneralMsg_RuleElseMsg_" + RuleId).value = objRule.RuleBody[objRule.RuleBody.length - 1].GeneralMessage;
            document.getElementById("txtAlertMsg_RuleElseAlert_" + RuleId).value = objRule.RuleBody[objRule.RuleBody.length - 1].AlertMessage;
            $("#lstRdoMessageType_RuleElse_" + RuleId + " input[type='radio'][value=" + objRule.RuleBody[objRule.RuleBody.length - 1].MessageType + "]").prop('checked', true);
            RULECONDITIONS.FillAlertsTable(RuleId, "tblAlert_Else_Rule_" + RuleId, arrAlerts_Else);
        }
        ////debugger;
        //var iRule = objRule.RuleId;
        //var sRule = objRule.RuleName;
        //if (iRule > 0) {
        //    OPTIONCONTROL.setControlValue("txtFormRuleName_" + RuleId, iRule);
        //}
    },

    ClearRuleDetails: function (sRuleId) {
        //  rConditions_RULES
        debugger;
        document.getElementById("chkCreatingGroup_Rule_" + sRuleId).checked = false;
        document.getElementById("chkNewRecord_Rule_" + sRuleId).checked = false;
        document.getElementById("chkEdit_Rule_" + sRuleId).checked = false;
        document.getElementById("chkLoad_Rule_" + sRuleId).checked = false;
        document.getElementById("chkOnLeave_Rule_" + sRuleId).checked = false;
        document.getElementById("chkOnEnter_Rule_" + sRuleId).checked = false;
        document.getElementById("chkBeforeSave_Rule_" + sRuleId).checked = false;
        document.getElementById("chkBeforeDelete_Rule_" + sRuleId).checked = false;
        document.getElementById("chkIsRuleActive_Rule_" + sRuleId).checked = false;
        if (sRuleId != null && sRuleId != undefined) {
            RULECONDITIONS.ClearFormRuleConditions(sRuleId);
            RULECONDITIONS.CreateNewCondition(sRuleId);
        }
        FGRIDCONTROL.clearData("tblFormating_IF_Rule_" + sRuleId, true);
        FGRIDCONTROL.clearData("tblFormating_Else_Rule_" + sRuleId, true);
        FGRIDCONTROL.clearData("tblAlert_IF_Rule_" + sRuleId, true);
        FGRIDCONTROL.clearData("tblAlert_Else_Rule_" + sRuleId, true);
        $("#txtGeneralMsg_RuleIfMsg_" + sRuleId).val("");
        $("#txtGeneralMsg_RuleElseMsg_" + sRuleId).val("");
        $("#txtAlertMsg_RuleIfAlert_" + sRuleId).val("");
        $("#txtGeneralMsg_RuleElseMsg_" + sRuleId).val("");
    },

    NewRuleDetails: function (RuleId) {
        //OPTIONCONTROL.clear("txtFormRuleName_" + RuleId, false);
        $("#Conditions-Context_Menu").find(".ELSE_IF-DynamicTab_" + RuleId).remove();
        $(".dynamic_ELSEIF_TabContainer").remove();
        RULECONDITIONS.ClearRuleDetails(RuleId);
        $('#Conditions-Context_Menu li[data-divId="Rule_IF_' + RuleId + '"]').trigger('click');
        document.getElementById("chkNoRuleCondition_" + RuleId).checked = false;
        RULECONDITIONS.SetNoConditionRule(document.getElementById("chkNoRuleCondition_" + RuleId));
        //document.getElementById("sRuleIdAndConditionNo_Rules_" + RuleId).value = "";
    },

    GetNewRule: function (sRuleId) {
       //debugger;
        RULECONDITIONS.ClearRuleDetails(sRuleId);
        $("#lnkRule_div_" + sRuleId).hide();
        $("#newRuleTab_div_" + sRuleId).show();
        RULECONDITIONS.SetRuleContentsHeight(sRuleId);
    },
    SetRuleContentsHeight: function (sRuleId) {
       //////debugger;
        var pageHeight = GLOBAL.getPageHeight();
        var rTop = document.getElementById("newRuleTab_div_" + sRuleId).getBoundingClientRect().top;
        $("#newRuleTab_div_" + sRuleId).height(pageHeight - (rTop - 40));


        //var rdefinitionheight = $("#settings_FormRules").height();
        //var headheight = $("#mspageheader").height();
        //var mTabsHeight = $("#FormTabs").height();
        //var FormatingbodyHeight = GLOBAL.getPageHeight() - ((rdefinitionheight * 5.9) + headheight + mTabsHeight);
        //if (FormatingbodyHeight > 40) {
        //    $("#tblFormating_IF_Rule_FormRules_body").height(FormatingbodyHeight);
        //}
        //else {
        //    $("#tblFormating_IF_Rule_FormRules_body").height(40);
        //}
        //var AlertBodyHeight = GLOBAL.getPageHeight() - ((rdefinitionheight * 6.4) + headheight + mTabsHeight);
        //if (AlertBodyHeight > 30) {
        //    $("#tblAlert_IF_Rule_FormRules_body").height(AlertBodyHeight);
        //}
        //else {
        //    $("#tblAlert_IF_Rule_FormRules_body").height(40);
        //}
        //$("#tblFormating_Else_Rule_FormRules_body").height(GLOBAL.getPageHeight() - ((rdefinitionheight * 4.8) + headheight + mTabsHeight));
        //$("#tblAlert_Else_Rule_FormRules_body").height(GLOBAL.getPageHeight() - ((rdefinitionheight * 5) + headheight + mTabsHeight + 20));
    },

    SetNoConditionRule: function (ele) {
        debugger;
        var ruleId = ele.dataset.ruleid;
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + ruleId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + ruleId).length : $(".tab_Conditions.active").attr("data-tabno"));
        var tblFormatBody = $("#tblFormating_IF_Rule_" + ruleId + "_body");
        var tblAlertBody = $("#tblAlert_IF_Rule_" + ruleId + "_body");
        $(tblFormatBody).height(180);
        $(tblAlertBody).height(180);

        if (ele.checked) {
            $('#Conditions-Context_Menu li').hide();
            document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + ruleId).style.display = "none";
        }
        else {
            $('#Conditions-Context_Menu li').show();
            document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + ruleId).style.display = "block";
        }
    },

    CloseRules: function (sRuleId) {
        if (document.getElementById("lnkRule_div_" + sRuleId) != null && document.getElementById("lnkRule_div_" + sRuleId) != undefined) {
            $("#lnkRule_div_" + sRuleId).show();
            $("#newRuleTab_div_" + sRuleId).hide();
        }
    },

    GetRuleIdAndConditionNo: function (sRuleId) {
        try {
            ////debugger;
            if (sRuleId != undefined && sRuleId != null) {
                var RulesProps = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
                if (RulesProps != null && RulesProps != null) {
                    RULECONDITIONS.RuleIdAndConditionNo = {
                        ConditionId1: RulesProps.dataset.conditionId1,
                        ConditionId2: RulesProps.dataset.conditionId2,
                        LinkType: RulesProps.dataset.linktype,
                        FormOrLinkTypeId: RulesProps.dataset.linktypeid,
                    }
                }
            }
        } catch (e) {
            RULECONDITIONS.RuleIdAndConditionNo = null;
        }
        return RULECONDITIONS.RuleIdAndConditionNo;
    },

    //// Methods for Rule condition - IF .....

    AddCondition: function (ele, RulesId) {
        debugger;
        var conditionNo = 1;
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + RulesId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + RulesId).length : $(".tab_Conditions.active").attr("data-tabno"));
        var ConditionTabDivID = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + RulesId).parentElement.id;
        if (document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + RulesId) != null) {
            conditionNo = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + RulesId).children.length;
        }
        //if ($(ele)[0].parentElement.parentElement.parentElement.nextElementSibling == null) {
        if (ele.selectedIndex!=0) {
            var ddlOperator = document.getElementById("ddlOperators_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
            var iOperatorId = ddlOperator.options[ddlOperator.selectedIndex].value;
            var txtField = document.getElementById("txtField_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
            if (txtField.dataset.fieldid == "" && txtField.dataset.fielddatatype == "" && iOperatorId != "8" && iOperatorId != "9") {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); //  "Please complete the rule first"
                txtField.focus();
                return false;
            }
            var txtCompareField = document.getElementById("txtCompareType_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
            var fldDataType = txtField.dataset.fielddatatype;
            if (fldDataType == 3 || fldDataType == 4 || fldDataType == 8 || fldDataType == 9) {  ////    || fldDataType == 12 || fldDataType == 14
                if (txtCompareField.dataset.fieldid == "" && txtCompareField.dataset.fieldvalue == "" && iOperatorId != "8" && iOperatorId != "9") {
                    COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                    //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Please complete the rule first"
                    txtCompareField.focus();
                    return false;
                }
            }
            else {
                if (txtCompareField.value.trim() == "" && iOperatorId != "8" && iOperatorId != "9") {
                    COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                    //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Please complete the rule first"
                    txtCompareField.focus();
                    return false;
                }
            }
            var ddlConjunction = document.getElementById("ddlConjunction_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
            if (ddlConjunction.selectedIndex == 0 && ele != "btnAddNewCondition" && iOperatorId != "8" && iOperatorId != "9") {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Condition contains only, new condition not allowed."
                ddlConjunction.focus();
                return false;
            }
            RULECONDITIONS.CreateNewCondition(RulesId);
        }
        else {
            if (ele.selectedIndex == 0 && ele != "btnAddNewCondition" && iOperatorId != "8" && iOperatorId != "9") {
                do {
                    var ddlFldContainer = document.getElementById("ddlFormFieldsContainer_Rules_" + RulesId);
                    var SelectedCondition = ele.parentElement.parentElement.parentElement;
                    var SelectedConditionDivId = SelectedCondition.id;
                    if (ddlFldContainer.children.length == 0) {
                        $(ddlFldContainer).append($("#ddlFormFields_RULES_" + RulesId));
                    }                 
                    //$($(ele)[0].parentElement.parentElement.parentElement.nextElementSibling).remove();
                    if (SelectedConditionDivId != $("#AddedCondition_" + conditionNo + "_" + ConditionTabDivID)[0].id) {
                        $("#AddedCondition_" + conditionNo + "_" + RulesId).remove();
                        conditionNo = conditionNo - 1;
                    }
                }              
                //while ($(ele)[0].parentElement.parentElement.parentElement.nextElementSibling != null);
            while (conditionNo != parseInt(ele.dataset.conditionid));
            }
        }
    },

    AddConditionValidations: function (ele, RulesId, iNewConditionNo) {
        // debugger;
        var conditionNo = 1;
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + RulesId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + RulesId).length : $(".tab_Conditions.active").attr("data-tabno"));

        if (document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + RulesId) != null) {
            conditionNo = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + RulesId).children.length;
        }
        else {
            conditionNo = 1;
        }
        var txtField = document.getElementById("txtField_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
        if (txtField.dataset.fieldid == "" && txtField.dataset.fielddatatype == "") {
            COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
            //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); //  "Please complete the rule first"
            txtField.focus();
            return false;
        }
        var txtCompareField = document.getElementById("txtCompareType_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
        var fldDataType = txtField.dataset.fielddatatype;
        if (fldDataType == 3 || fldDataType == 4 || fldDataType == 8 || fldDataType == 9) {  ////    || fldDataType == 12 || fldDataType == 14
            if (txtCompareField.dataset.fieldid == "" && txtCompareField.dataset.fieldvalue == "") {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Please complete the rule first"
                txtCompareField.focus();
                return false;
            }
        }
        else {
            if (txtCompareField.value.trim() == "") {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                //RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Please complete the rule first"
                txtCompareField.focus();
                return false;
            }
        }
        //var ddlConjunction = document.getElementById("ddlConjunction_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId);
        //if (ddlConjunction.selectedIndex == 0 && iNewConditionNo > 2) {
        //    RULECONDITIONS.ShowErrorMessage(RulesId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Condition contains only, new condition not allowed."
        //    ddlConjunction.focus();
        //    return false;
        //}
        return true;
    },

    CreateNewCondition: function (RulesId, arrMandatoryFields) {
        debugger;
        var conditionNo = 1;
        var selectedConditionTab = parseInt($('.tab_Conditions.active').attr('data-tabno') == undefined ? $('.ELSE_IF-DynamicTab_' + RulesId).length == 0 ? 1 : $('.ELSE_IF-DynamicTab').length : $('.tab_Conditions.active').attr('data-tabno'));
        if (document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RulesId) != null) {
            conditionNo = document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RulesId).children.length + 1;
            var ConditionDivID = document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RulesId).parentElement.id;
        }
        else {
            conditionNo = 1;
        }
        var newCondition = "<div class='col-xs-12 padding0' id='AddedCondition_" + conditionNo + "_" + ConditionDivID + "' style='margin-bottom:2px;margin-top:5px;'>" +
                                "<div style='width:84%;display:inline-block;' data-iconditionno='" + conditionNo + "'>" +
        "<div style='width:16%;display:inline-block;margin-bottom:-10px;'>";
        var txtFields = "<input type='text' class='form-control lstFields1_Condition' id='txtField_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "' placeholder='Select Field' data-fielddatatype='' data-linkFormid='' onclick=RULECONDITIONS.ShowFieldsList(this,'" + RulesId + "'); />";
        newCondition += txtFields + "</div>";

        if (arrMandatoryFields != undefined && arrMandatoryFields != null) {
            var extraDiv = "<div style='width:16%;display:inline-block;margin-left:2px;'>" +
                                    "<select class='custom-select' id='ddlExtraFields_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "' >";

            for (var i = 0; i < arrMandatoryFields.length; i++) {
                var opt = '<option value="' + arrMandatoryFields[i] + '">' + arrMandatoryFields[i] + '</option>';
                extraDiv += opt;
            }
            extraDiv += "</select></div>";
            if ($('#ddlExtraFields_' + conditionNo + "_" + selectedConditionTab + "_" + RulesId).length > 0) {
                $('#ddlExtraFields_' + conditionNo + "_" + selectedConditionTab + "_" + RulesId).parent().remove();
            }
            newCondition += extraDiv;
        }
        newCondition += "<div style='width:16%;display:inline-block;margin:0 2px 0 3px;'>";

        var ddlOperators = "<select class='custom-select ddlOperatorsClass' , onchange = 'RULECONDITIONS.ChangeOperatorType(this," + conditionNo + ", " + selectedConditionTab + ");' id='ddlOperators_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "'>";
        ddlOperators += "<option value='" + -1 + "'></option>";
        for (var i = 0; i < RULECONDITIONS.arrOperators.length; i++) {
            var opt = "<option value='" + RULECONDITIONS.arrOperators[i].ID + "'>" + RULECONDITIONS.arrOperators[i].Name + "</option>";
            ddlOperators += opt;
        }
        ddlOperators += '</select>';
        newCondition += ddlOperators + "</div><div style='width:16%;display:inline-block;margin:0px 1px;' class='hdnCompareWith_" + conditionNo + "_" + selectedConditionTab + "'>";

        var ddlCompareWith = "<select class='custom-select' id='ddlCompareWith_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "' onchange= 'RULECONDITIONS.ChangeCompareType(this);'>";
        ddlCompareWith += "<option value='" + -1 + "'></option>";
        for (var i = 0; i < RULECONDITIONS.arrCompareWith.length; i++) {
            var opt = "<option value='" + RULECONDITIONS.arrCompareWith[i].ID + "'>" + RULECONDITIONS.arrCompareWith[i].Name + "</option>";
            ddlCompareWith += opt;
        }
        ddlCompareWith += '</select>';
        newCondition += ddlCompareWith + "</div><div style='width:16%;display:inline-block;margin:0px 2px;margin-bottom:-10px;' class='hdnCompareType_" + conditionNo + "_" + selectedConditionTab + "'>";

        var txtVal = "<input type='text' class='form-control clsCompare_Condition' id='txtCompareType_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "' placeholder='Value' data-fieldvalue='' onfocus='RULECONDITIONS.ShowCompareType(this, " + conditionNo + ");' onblur='RULECONDITIONS.CheckForSameField(this, " + conditionNo + ");' />";
        newCondition += txtVal + "</div><div style='width:16%;display:inline-block;margin:0px 1px;'>";

        var ddlConjunction = "<select data-conditionid="+ conditionNo +" class='custom-select' id='ddlConjunction_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "'  onchange=RULECONDITIONS.AddCondition(this,'" + RulesId + "')>";
        for (var i = 0; i < RULECONDITIONS.arrConjuction.length; i++) {
            var opt = "<option value='" + RULECONDITIONS.arrConjuction[i].ID + "'>" + RULECONDITIONS.arrConjuction[i].Name + "</option>";
            ddlConjunction += opt;
        }
        ddlConjunction += '</select>';
        newCondition += ddlConjunction + "</div><div style='display:none;width:15%'>" +
                                       "<input id='txtRuleConditionId_" + conditionNo + "_" + selectedConditionTab + "_" + RulesId + "'  class='form-control' type='hidden'/>" +
                                 "</div></div>";
        //////debugger;
        newCondition += '<div style="width:15%;display:inline-block;text-align:right;padding-right:0px;">' +
                            '<i class="icon-plus icon-font7 theme_icon-color" style="margin:5px;cursor:pointer;top:3px;padding-left:5px;padding-right:5px;display:none;" onclick=RULECONDITIONS.AddCondition(this,"' + RulesId + '")></i>' +
                            '<span class="icon-close icon-font7" style="margin:5px;cursor:pointer;top:3px;color:red;" onclick=RULECONDITIONS.DeleteConditon(this,"' + RulesId + '")></span>' +
                        '</div></div>';
        ////debugger;
        $('#rConditions_RULES_' + selectedConditionTab + '_' + RulesId).append(newCondition);
    },

    DeleteConditon: function (ele, RuleId) {
        debugger;
        if (confirm(RULECONDITIONS.GetResourceMessage("ConfirmToDeleteRow"))) {
            var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $("#Conditions-Context_Menu").find(".ELSE_IF-DynamicTab_" + RuleId).length == 0 ? 1 : $("#Conditions-Context_Menu").find(".ELSE_IF-DynamicTab_" + RuleId).length : $(".tab_Conditions.active").attr("data-tabno"));
            var ruleDiv = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + RuleId);
            if (ruleDiv.children.length > 1) {
                var ddlFldContainer = document.getElementById("ddlFormFieldsContainer_Rules_" + RuleId);
                if (ddlFldContainer.children.length == 0) {
                    $(ddlFldContainer).append($("#ddlFormFields_RULES_" + RuleId));
                }
                    //ele.parentElement.parentElement.remove();           
                    var conditionNo = 1;
                    if (document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RuleId) != null) {
                        conditionNo = document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RuleId).children.length;
                    }
                    else {
                        conditionNo = 1;
                    }
                    var txtFieldValue = document.getElementById("txtField_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RuleId).value;
                    if (txtFieldValue.length > 0) {                        
                        if (($(ruleDiv.children).filter(":visible")).length == 1) {
                            RULECONDITIONS.CreateNewCondition(RuleId);
                        }                      
                        $(ele.parentElement.parentElement).remove();                       
                        //$($(ruleDiv.children).filter(":visible")[($(ruleDiv.children).filter(":visible")).length - 1].children[0].children[$(ruleDiv.children).filter(":visible")[($(ruleDiv.children).filter(":visible")).length - 1].children[0].children.length - 1].children).val("0")
                    }              
            }
            else {
                var conditionNo = 1;
                if (document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RuleId) != null) {
                    conditionNo = document.getElementById('rConditions_RULES_' + selectedConditionTab + '_' + RuleId).children.length;
                }
                else {
                    conditionNo = 1;
                }
                var txtFieldValue = document.getElementById("txtField_RC_" + conditionNo + "_" + selectedConditionTab + "_" + RuleId).value;
                if (txtFieldValue.length > 0) {
                    ele.parentElement.parentElement.remove();                   
                    if (($(ruleDiv.children).filter(":visible")).length == 0) {
                        RULECONDITIONS.CreateNewCondition(RuleId);
                    }                 
                    //$($(ruleDiv.children).filter(":visible")[($(ruleDiv.children).filter(":visible")).length - 1].children[0].children[$(ruleDiv.children).filter(":visible")[($(ruleDiv.children).filter(":visible")).length - 1].children[0].children.length - 1].children).val("0")
                }            
            }
        }
    },

    ShowFieldsList: function (ele, RuleId) {
        //debugger;
        bIsFieldDDL = true;
        var arrDetails = RULECONDITIONS.GetRuleIdAndConditionNo(RuleId);
        var iLinkType = arrDetails.LinkType;
        var ifieldId = arrDetails.FormOrLinkTypeId;
        //if ((iLinkType == 10 || iLinkType == 3) && iLinkType != null && iLinkType != undefined) {
        if ((iLinkType == 10) && iLinkType != null && iLinkType != undefined) {
            var sRuleName = OPTIONCONTROL.getControlText("txtFormRuleName_" + RuleId);
            var Caption = document.getElementById("ExtraField_FieldCaption").value.trim();
            var FieldName = document.getElementById("ExtraField_FieldName").value.trim();
            var datatype = 0;
            var isMandatory = false;
            var defaultVals = "";
            var linkMsId = 0;
            var tableName = "";
            var displayFld = "";
            var mandatoryFlds = "";

            if (iLinkType == 10) {
                datatype = document.getElementById("ddlDatatype_ExtraField").options[document.getElementById('ddlDatatype_ExtraField').selectedIndex].value.trim();
                //ifieldId = document.getElementById("ddlDatatype_ExtraField").options[document.getElementById('ddlDatatype_ExtraField').selectedIndex].value.trim();
                isMandatory = document.getElementById("FieldsDetails_IsMandatory").checked;
                if (datatype == 21) {
                    linkMsId = OPTIONCONTROL.getControlValue("ExtraField_FormToLink");
                    displayFld = document.getElementById("ExtraField_FieldName").value.trim();
                    mandatoryFlds = document.getElementById('ExtraField_MandatoryFields').value;
                }
                else if (datatype == 12) {
                    linkMsId = OPTIONCONTROL.getControlValue("ExtraField_MasterToLink");
                    displayFld = document.getElementById("ExtraField_FieldName").value.trim();
                    mandatoryFlds = document.getElementById('ExtraField_MandatoryFields').value;
                }
                else if (datatype == 14) {
                    tableName = document.getElementById("ExtraField_TableName").value.trim();
                    mandatoryFlds = document.getElementById('ExtraField_MandatoryFields').value;
                    displayFld = $("ExtraField_DisplayFields").val();
                }
            }
            else if (iLinkType == 3) {
                var ExtraFieldOtherDetails = document.getElementById("MView_ExtraFieldOtherDetails");
                datatype = ExtraFieldOtherDetails.dataset.flddatatype;
                isMandatory = ExtraFieldOtherDetails.dataset.fldismandatory;
                mandatoryFlds = ExtraFieldOtherDetails.dataset.fldmandatoryfields;

                if (datatype == 12 || datatype == 21) {
                    linkMsId = ExtraFieldOtherDetails.dataset.fldtablename;
                    displayFld = document.getElementById("ExtraField_FieldName").value.trim();
                }
                else if (datatype == 14) {
                    tableName = ExtraFieldOtherDetails.dataset.fldtablename;
                    displayFld = ExtraFieldOtherDetails.dataset.flddisplayfield;
                }
            }
            if (isMandatory)
                isMandatory = "True";
            else
                isMandatory = "False";
            defaultVals = document.getElementById("ExtraField_DefaultValue");

            if (defaultVals != null && defaultVals != undefined && defaultVals != "") {
                if (datatype == 2)
                    defaultVals = defaultVals.checked;
                else
                    defaultVals = defaultVals.value.trim();
            }
            else
                defaultVals = "";

            if (sRuleName != "") {
                var ddlNewFields = '<select class="custom-select" id="ddlNewConditionFields_RuleCondition_' + RuleId + '" onblur="RULECONDITIONS.ChangeField(this);">';
                ddlNewFields += '<option value="' + ifieldId + '" data-fieldName="' + Caption + '" data-isMandatory="' + isMandatory + '" data-fDataType="' + datatype + '" data-defValues="' + defaultVals + '" data-lnkFormid="' + linkMsId + '" data-tableName="' + tableName + '" data-displayField="' + displayFld + '" data-MandatoryFields="' + mandatoryFlds + '">' + Caption + '</option>';
                ddlNewFields += '</select>';
                if ($("#ddlNewConditionFields_RuleCondition_" + RuleId).length > 0) {
                    $("#ddlNewConditionFields_RuleCondition_" + RuleId).remove();
                }
                $(ele).parent().append(ddlNewFields);
                $("#ddlNewConditionFields_RuleCondition_" + RuleId).show();
                $("#ddlNewConditionFields_RuleCondition_" + RuleId).focus();

            }
            else {
                ////debugger;
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                //RULECONDITIONS.ShowErrorMessage(RuleId, RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                return false;
            }
            $(ele).attr("fieldid", ifieldId);
            $(ele).attr("fieldidname", FieldName);
        }
        else {
            //var selectedValue = document.getElementById(ele.id).dataset.linkid == undefined ? $(document.getElementById(ele.id)).attr("linkid")  : document.getElementById(ele.id).dataset.linkid;
            //var selectedValue = $(ele).attr("fieldid") == "" ? "0" : $(ele).attr("fieldid");
            var selectedValue = document.getElementById(ele.id).dataset.fieldid == undefined ? $(document.getElementById(ele.id)).attr("fieldid") : document.getElementById(ele.id).dataset.fieldid;
            selectedValue = selectedValue == undefined ? 0 : selectedValue;
            $("#ddlFormFields_RULES_" + RuleId).val(parseInt(selectedValue));
            document.getElementById("ddlFormFields_RULES_" + RuleId).parentElement.children[0].style.display = "block";
            ele.parentElement.appendChild(document.getElementById("ddlFormFields_RULES_" + RuleId));
            document.getElementById("ddlFormFields_RULES_" + RuleId).style.display = "block";
            document.getElementById("ddlFormFields_RULES_" + RuleId).focus();
        }
        ele.style.display = "none";
    },

    ChangeField: function (ele) {
        //debugger;
        var ddlfieldId = 0;
        var ddllinkid = 0;
        var ddlSelectedOption = ele.options[ele.selectedIndex];  // $(ele).find('option:selected');
        var ddlText = ddlSelectedOption != undefined ? ddlSelectedOption.textContent : "";
        if (bIsFieldDDL == true) {
            ddlfieldId = ddlSelectedOption != undefined ? ddlSelectedOption.value : 0;
            //ddllinkid = ddlSelectedOption != undefined ? ddlSelectedOption.linkid : 0;
            ddllinkid = ddlSelectedOption != undefined ? ddlSelectedOption.dataset.lnkformid : 0;
            
        }
        else {
            ddlfieldId = ddlSelectedOption != undefined ? ddlSelectedOption.fieldid : 0;
            ddllinkid = ddlSelectedOption != undefined ? ddlSelectedOption.value : 0;
        }
        var ddlFieldName = ddlSelectedOption != undefined ? ddlSelectedOption.dataset.fieldname : "";
        var ddlFieldidName = ddlSelectedOption != undefined ? ddlSelectedOption.dataset.fieldidname : "";
        var ddlDataType = ddlSelectedOption != undefined ? ddlSelectedOption.dataset.fdatatype : 0;
        //var ddlLnkMsId = ddlSelectedOption != undefined ? ddlSelectedOption.dataset.lnkFormid : 0;
        var ddlLnkMsId = ddlSelectedOption != undefined ? ddlSelectedOption.dataset.lnkformid : 0;
       
        var conditionNo = ele.parentElement.parentElement.dataset.iconditionno;
        var RuleId = RULECONDITIONS.GetRuleIdFromControl(ele.id.trim())
        var selectedConditionTab = parseInt($('.tab_Conditions.active').attr('data-tabno') == undefined ? $('.ELSE_IF-DynamicTab_' + RuleId).length == 0 ? 1 : $('.ELSE_IF-DynamicTab_' + RuleId).length: $('.tab_Conditions.active').attr('data-tabno'));

        if (ddlDataType == 12 || ddlDataType == 14 || ddlDataType == 21) {
            if ($(ele).prev().hasClass("lstFields1_Condition")) {
                var extraDiv = '<div style="width:16%;display:inline-block;margin-left:2px;">' +
                                    '<select class="custom-select" id="ddlExtraFields_' + conditionNo + "_" + selectedConditionTab + "_" + RuleId + '" onblur="">';
                var lstFieldNames = ddlSelectedOption.dataset.mandatoryfields.split(',');
                for (var i = 0; i < lstFieldNames.length; i++) {
                    var opt = "<option value='" + lstFieldNames[i] + "'>" + lstFieldNames[i] + "</option>";
                    extraDiv += opt;
                }
                extraDiv += '</select></div>';
                if ($("#ddlExtraFields_" + conditionNo + "_" + selectedConditionTab + "_" + RuleId).length > 0) {
                    $("#ddlExtraFields_" + conditionNo + "_" + selectedConditionTab + "_" + RuleId).parent().remove();
                }
                var divCondition = $(ele).parent().parent();
                $(divCondition).find("> div:nth-child(1)").after(extraDiv);
            }
        }
        else {
            if (!$(ele).prev().hasClass("clsCompare_Condition")) {
                if ($("#ddlExtraFields_" + conditionNo + "_" + selectedConditionTab + "_" + RuleId).length > 0) {
                    $("#ddlExtraFields_" + conditionNo + "_" + selectedConditionTab + "_" + RuleId).parent().remove();
                }
            }
        }
        var txtField = $(ele).parent().find('input');
        txtField[0].value = ddlText;
        //txtField[0].dataset.fieldid = ddlfieldId;
        txtField[0].setAttribute("fieldnamevalue", ddlfieldId);
        txtField[0].dataset.fieldid = ddlfieldId;
        txtField[0].dataset.fieldname = ddlFieldName;
        $(txtField).attr("fieldid", ddlfieldId);
        $(txtField).attr("linkid", ddllinkid);
        txtField[0].dataset.linkid = ddllinkid;
        txtField[0].dataset.fieldidname = ddlFieldidName;
        txtField[0].dataset.fielddatatype = ddlDataType;
        txtField[0].dataset.linkFormid = ddlLnkMsId;
        txtField[0].style.display = "block";
        //txtField[0].focus();
        ele.style.display = "none";

        //var optDiv = document.getElementById("fOptControlDiv_Rules_" + RuleId);
        //var txtInput = $(optDiv).parent().find('input')[0];
        //txtInput.setAttribute("fielddatatype", ddlDataType);
    },

    ChangeCompareType: function (ele) {
        $("#txtCompareType_RC_" + 1).value = "";
    },

    ChangeOperatorType: function (ele, iRulesConditionCounter, iRulesTabCounter) {
        //debugger;
        if (parseInt($(ele).val()) == 8 || parseInt($(ele).val()) == 9) {
            $(".hdnCompareWith_" + iRulesConditionCounter + "_" + iRulesTabCounter).hide();
            $(".hdnCompareType_" + iRulesConditionCounter + "_" + iRulesTabCounter).hide();
        }
        else {
            $(".hdnCompareWith_" + iRulesConditionCounter + "_" + iRulesTabCounter).show();
            $(".hdnCompareType_" + iRulesConditionCounter + "_" + iRulesTabCounter).show();
        }
    },

    ShowCompareType: function (ele, RCNo) {
        //debugger;
        bIsFieldDDL = false;
        var strFilter = "";
        //var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab").length == 0 ? 1 : $(".ELSE_IF-DynamicTab").length : $(".tab_Conditions.active").attr("data-tabno"));
        var RuleId = RULECONDITIONS.GetRuleIdFromControl(ele.id.trim());
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + RuleId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + RuleId).length : $(".tab_Conditions.active").attr("data-tabno"));
        var compareType = $("#ddlCompareWith_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).val();
        var selectedCompareType = $("#txtCompareType_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).val();
        var selectedClass = "";
        if (compareType == 1) {            //////  Compare with Value type
            //var dataType = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fielddatatype
            //var fieldId = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fieldid;
            //var linkMsId = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.linkFormid;
            var dataType = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fielddatatype == undefined ? $(document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId)).attr("fielddatatype") : document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fielddatatype;
            var fieldId = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fieldid == undefined ? $(document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId)).attr("fieldid") : document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fieldid;
            var linkMsId = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.linkFormid == undefined ? $(document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId)).attr("linkFormid") : document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.linkFormid;
            if (dataType != "") {
                if (dataType == 2) {    //////   BOOLEAN  ..........
                    var bBooleanElement = document.getElementById("bBooleanFlag_" + GlobalRuleId);
                    $(ele.parentElement).append(bBooleanElement);
                    bBooleanElement.children[0].checked = ele.value.trim() == "True" ? true : false;
                    bBooleanElement.children[1].innerHTML = ele.value.trim() == "True" ? true : "False";
                    bBooleanElement.style.display = "block";
                    ele.style.display = "none";
                }
                if (dataType == 4 || dataType == 3) {    //////   DATETIME/DATE  ..........
                    var fdatepicker = document.getElementById("fDatePickerDiv_Rules_" + GlobalRuleId);
                    DATEPICKER.setDate("fDatePicker_RulesCondition_" + GlobalRuleId, parseInt($(ele).attr("linkid") == undefined ? 0 : $(ele).attr("linkid")), true);
                    $(ele.parentElement).append(fdatepicker);
                    fdatepicker.style.display = "block";
                    ele.style.display = "none";
                }
                else if (dataType == 8) {   //////   STRINGLIST..........
                    var ddlCompareVals = $('#ddlFormFields_RULES_' + RuleId + ' option[value="' + fieldId + '"]')[0]
                    var opts = ddlCompareVals.dataset.defvalues.split(',');
                    var newSelect = "<select class='custom-select dynFilterOpt' onblur='RULECONDITIONS.Hide_ddlCompareVals(this)'>";
                    for (var i = 0; i < opts.length; i++) {
                        selectedClass = opts[i] == selectedCompareType ? "selected" : "";
                        var opt = "<option value='" + opts[i] + "' " + selectedClass + ">" + opts[i] + "</option>";
                        newSelect += opt;
                    }
                    newSelect += "</select>";
                    if ($(ele.parentElement).find('select').length > 0) {
                        $(ele.parentElement).find('.dynFilterOpt').remove();
                    }
                    $(ele.parentElement).append(newSelect);
                    $(ele.parentElement).find('select').focus();
                    ele.style.display = "none";
                }
                else if (dataType == 9) {    //////   NUMBERLIST..........
                    var ddlCompareVals = $('#ddlFormFields_RULES_' + RuleId + ' option[value="' + fieldId + '"]')[0]
                    var opts = ddlCompareVals.dataset.defvalues.split(',');
                    var newSelect = "<select class='custom-select dynFilterOpt' onblur='RULECONDITIONS.Hide_ddlCompareVals(this)'>";
                    for (var i = 0; i < opts.length; i++) {
                        var pId;
                        var pName;
                        if (i % 2 == 0) {
                            pId = opts[i];
                        }
                        if ((i + 1) % 2 != 0) {
                            pName = opts[i + 1];
                            selectedClass = pName == selectedCompareType ? "selected" : "";
                        }
                        var opt = "<option value='" + pId + "' " + selectedClass + ">" + pName + "</option>";
                        newSelect += opt;
                        i++;
                    }
                    newSelect += "</select>";
                    ////debugger;
                    if ($(ele.parentElement).find('select').length > 0) {
                        $(ele.parentElement).find('.dynFilterOpt').remove();
                    }
                    $(ele.parentElement).append(newSelect);
                    $(ele.parentElement).find('select').focus();
                    ele.style.display = "none";
                }
                else if (dataType == 21) {      ////   Form........
                    //debugger;
                    var FieldElement=document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId);
                    var sAccountTypeName = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).value;
                    if (sAccountTypeName != undefined) {
                        var strFilter = "";
                        var iFormTypeId = FORMCUSTOMIZATION.GetFormTypeId();
                        if (parseInt(iFormTypeId) == 1) {
                            if (sAccountTypeName.includes("Vendor")) {
                                strFilter = "iAccountType = 6"
                            }
                            else if (sAccountTypeName.includes("Cust")) {
                                strFilter = "iAccountType = 5"
                            }
                        }
                        OPTIONCONTROL.setFilter('optControl_RulesCondition_' + RuleId, strFilter);
                    }
                    var optControl_div = document.getElementById("fOptControlDiv_Rules_"+RuleId);
                    var optControl = document.getElementById('optControl_RulesCondition_' + RuleId);
                    //OPTIONCONTROL.setControlValue('optControl_RulesCondition_' + RuleId, linkMsId);
                    optControl.dataset.Formtypeid = linkMsId;
                    optControl.dataset.tablename = "";
                    optControl.dataset.primaryfield = "";
                    optControl.dataset.displayfield = "";
                    //@trans type group fields
                    switch (FieldElement!=null && FieldElement!=undefined && FieldElement.getAttribute('fieldid')) {
                        case '176':
                        case '177':
                        case '178':
                            optControl.dataset.grouptype = 1;
                            break;
                        default:
                            optControl.dataset.grouptype = 0;
                            break;
                    }
                    optControl.value = ele.defaultValue;
                    OPTIONCONTROL.setControlValue('optControl_RulesCondition_' + RuleId, $(ele).attr("linkid") == undefined ? 0 : $(ele).attr("linkid"));
                    $(ele.parentElement).append(optControl_div);
                    ele.style.display = "none";
                    optControl_div.style.display = "block";
                    //evt.stopPropagation();
                }
                else if (dataType == 12) {      ////   Master........
                    //debugger;
                    var FieldElement = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId);
                    var sAccountTypeName = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).value;
                    if (sAccountTypeName != undefined) {
                        var strFilter = "";
                        var iFormTypeId = FORMCUSTOMIZATION.GetFormTypeId();
                        if (parseInt(iFormTypeId) == 1) {
                            if (sAccountTypeName.includes("Vendor")) {
                                strFilter = "iAccountType = 6"
                            }
                            else if (sAccountTypeName.includes("Cust")) {
                                strFilter = "iAccountType = 5"
                            }
                        }
                        OPTIONCONTROL.setFilter('optControl_RulesCondition_' + RuleId, strFilter);
                    }
                    var optControl_div = document.getElementById("fOptControlDiv_Rules_" + RuleId);
                    var optControl = document.getElementById('optControl_RulesCondition_' + RuleId);
                    //OPTIONCONTROL.setControlValue('optControl_RulesCondition_' + RuleId, linkMsId);
                    //optControl.dataset.Formtypeid = linkMsId;
                    optControl.dataset.mastertypeid = linkMsId;
                    optControl.dataset.tablename = "";
                    optControl.dataset.primaryfield = "";
                    optControl.dataset.displayfield = "";
                    //@trans type group fields
                    switch (FieldElement != null && FieldElement != undefined && FieldElement.getAttribute('fieldid')) {
                        case '176':
                        case '177':
                        case '178':
                            optControl.dataset.grouptype = 1;
                            break;
                        default:
                            optControl.dataset.grouptype = 0;
                            break;
                    }
                    optControl.value = ele.defaultValue;
                    OPTIONCONTROL.setControlValue('optControl_RulesCondition_' + RuleId, $(ele).attr("linkid") == undefined ? 0 : $(ele).attr("linkid"));
                    $(ele.parentElement).append(optControl_div);
                    ele.style.display = "none";
                    optControl_div.style.display = "block";
                    //evt.stopPropagation();
                }
                else if (dataType == 14) {    ////   EXTERNALTABLE........

                }
                else {

                }
            }
            else {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgSelectFieldfirst"));
                //RULECONDITIONS.ShowErrorMessage(RuleId, RULECONDITIONS.GetResourceMessage("msgSelectFieldfirst")); //  "Select the Field first."
                return false;
            }
        }
        else if (compareType == 2) {          //////  Compare with Field type
            if (document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fieldid != "") {
                //var selectedValue = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.linkid == undefined ? $(document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId)).attr("linkid") : document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.linkid;
                var selectedValue = $(ele).attr("linkid") == undefined ? 0 : $(ele).attr("linkid");
                $("#ddlFormFields_RULES_" + RuleId).val(selectedValue);
                document.getElementById("ddlFormFields_RULES_" + RuleId).parentElement.children[0].style.display = "block";
                ele.parentElement.appendChild(document.getElementById("ddlFormFields_RULES_" + RuleId));
                //$("#ddlFormFields_RULES_" + RuleId + " option:first-child").prop("selected", true);
                document.getElementById("ddlFormFields_RULES_" + RuleId).style.display = "block";
                ele.style.display = "none";
            }
            else {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgSelectFieldfirst"));
                //RULECONDITIONS.ShowErrorMessage(RuleId, RULECONDITIONS.GetResourceMessage("msgSelectFieldfirst")); //  "Select the Field first."
                return false;
            }
        }
        else {           //////  Compare with Formula type

        }
    },
    CheckForSameField: function (ele, RCNo) {
        //debugger;
        var RuleId = RULECONDITIONS.GetRuleIdFromControl(ele.id.trim());
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + RuleId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + RuleId).length : $(".tab_Conditions.active").attr("data-tabno"));
        //var RuleId = RULECONDITIONS.GetRuleIdFromControl(ele.id.trim());
        var txtField = document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fieldid == undefined ? $(document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId)).attr("fieldid") : document.getElementById("txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).dataset.fieldid;
        var eleField = document.getElementById(ele.id).dataset.linkid == undefined ? $(document.getElementById(ele.id)).attr("linkid") : document.getElementById(ele.id).dataset.linkid;
        var ddlCompareWith = document.getElementById("ddlCompareWith_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId);
        var CompareTypefieldid = $("#txtCompareType_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).attr("linkid") == undefined ? 0 : $("#txtCompareType_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId).attr("linkid");
               
        if ((ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "1" || ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "3") && parseInt(CompareTypefieldid) == 0) {
            ele.setAttribute("fieldnamevalue", ele.value.trim());
        }
        //var txtField = $("#txtField_RC_" + RCNo + "_" + selectedConditionTab + "_" + RuleId);
        if ((parseInt(eleField) > 0 && parseInt(eleField) > 0) && eleField == txtField) {
            COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgSameFieldcannotcompare"));
            //RULECONDITIONS.ShowErrorMessage(RuleId, RULECONDITIONS.GetResourceMessage("msgSameFieldcannotcompare")); //  "Same Field can not be compare"
            ele.value = "";
            return false;
        }
    },

    Hide_ddlCompareVals: function (ele) {
        //debugger
        ele.parentElement.children[0].value = ele.options[ele.selectedIndex].text.trim();
        ele.parentElement.children[0].dataset.fieldvalue = ele.options[ele.selectedIndex].text.trim();
        ele.parentElement.children[0].dataset.fieldid = ele.options[ele.selectedIndex].value.trim();
        ele.parentElement.children[0].setAttribute("fieldnamevalue", ele.options[ele.selectedIndex].value.trim());

        ele.style.display = "none";
        ele.parentElement.children[0].style.display = "block";
    },
    Hide_optControl_RC: function (ele) {
        //debugger;
        var RulesId = RULECONDITIONS.GetRuleIdFromControl(ele.id);
        var isAnyModalOpen = $("#optControl_RulesCondition_" + RulesId + "_customize_popup").is(':visible');
        if (isAnyModalOpen == false) {
            var optDiv = document.getElementById("fOptControlDiv_Rules_" + RulesId);
            var txtInput = $(optDiv).parent().find('input')[0];
            txtInput.value = ele.value.trim();
            txtInput.defaultValue = OPTIONCONTROL.getControlText('optControl_RulesCondition_' + RulesId);
            //txtInput.dataset.fieldid = OPTIONCONTROL.getControlValue('optControl_RulesCondition_' + RulesId);
            txtInput.setAttribute("linkid", OPTIONCONTROL.getControlValue('optControl_RulesCondition_' + RulesId));
            txtInput.setAttribute("fieldnamevalue", OPTIONCONTROL.getControlValue('optControl_RulesCondition_' + RulesId));
            txtInput.style.display = "block";
            optDiv.style.display = "none";
        }
    },
    Hide_chkBoolean: function (ele) {
        //debugger
        ele.parentElement.parentElement.children[0].value = ele.parentElement.children[1].innerHTML.trim();
        ele.parentElement.parentElement.children[0].dataset.fieldvalue = ele.parentElement.children[1].innerHTML.trim();
        ele.parentElement.parentElement.children[0].dataset.fieldid = ele.parentElement.children[1].innerHTML.trim();
        ele.parentElement.parentElement.children[0].setAttribute("fieldnamevalue", ele.parentElement.children[1].innerHTML.trim());
        ele.parentElement.style.display = "none";
        ele.parentElement.parentElement.children[0].style.display = "block";
    },
    changeBooleanLabelText : function (ele) {
        //debugger;
        ele.parentElement.children[1].innerHTML = ele.checked == true ? "True" : "False";
    },
    ClearFormRuleConditions: function (sRuleId) {
        debugger;
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + sRuleId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + sRuleId).length : $(".tab_Conditions.active").attr("data-tabno"));
        if (document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + sRuleId) != null) {
            var allConditions = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + sRuleId).children;
            for (var i = allConditions.length - 1; i >= 0; i--) {
                if (i > -1) {
                    var ddlFldContainer = document.getElementById("ddlFormFieldsContainer_Rules_" + sRuleId);
                    if (ddlFldContainer != null) {
                        if (ddlFldContainer.children.length == 0) {
                            $(ddlFldContainer).append($("#ddlFormFields_RULES_" + sRuleId));
                        }
                    }
                    var dynamic_Ctrl = $(allConditions[i]).find("#fOptControlDiv_Rules_" + sRuleId);
                    allConditions[i].remove();
                    if ($("#fOptControlDiv_Rules_" + sRuleId).length == 0) {
                        $("#Dynamic_fOptControlDiv_Rules_" + sRuleId).append(dynamic_Ctrl);
                    }

                }
            }
        }
    },

    SetRuleConditions: function (sRuleId, arrRuleCondition) {
        RULECONDITIONS.ClearFormRuleConditions(sRuleId);
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + sRuleId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + sRuleId).length : $(".tab_Conditions.active").attr("data-tabno"));
        for (var i = 0; i < arrRuleCondition.length; i++) {
            if (arrRuleCondition[i].FieldDBName != "") {
                var optCompareVals = $('#ddlFormFields_RULES_' + sRuleId + ' option[data-fieldname="' + arrRuleCondition[i].FieldIdName + '"]')[0]
                var arrMandatoryFields = optCompareVals.dataset.mandatoryfields.split(",");
                RULECONDITIONS.CreateNewCondition(sRuleId, arrMandatoryFields);
            }
            else {
                RULECONDITIONS.CreateNewCondition(sRuleId);
            }
        }
        ////debugger;
        for (var iCount = 0; iCount < arrRuleCondition.length; iCount++) {
            ////debugger;
            var sName = arrRuleCondition[iCount].LinkIdFieldName == "" ? arrRuleCondition[iCount].LinkIdFieldName : arrRuleCondition[iCount].LinkIdFieldName;
            var ddlCompareVals = $('#ddlFormFields_RULES_' + sRuleId + ' option[data-fieldname="' + sName + '"]')[0];
            var txtField = document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            txtField.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;
            txtField.dataset.fieldid = arrRuleCondition[iCount].FieldId;
            txtField.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);

            txtField.dataset.fieldname = sName;
            txtField.dataset.fielddatatype = ddlCompareVals.dataset.fdatatype;
            txtField.dataset.linkFormid = ddlCompareVals.dataset.lnkFormid;

            var iDataType = parseInt(ddlCompareVals.dataset.fdatatype);
            if (iDataType == MasterDataType.get('Form') || iDataType == MasterDataType.get('EXTERNALTABLE')) {
                var ddlExtraMandatory = document.getElementById("ddlExtraFields_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                $(ddlExtraMandatory).val(arrRuleCondition[iCount].FieldDBName);
            }
            var ddlOperator = document.getElementById("ddlOperators_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            $(ddlOperator).val(arrRuleCondition[iCount].OperatorId);
            //var opt = $(ddlOperator).find("option:selected")[0];

            var ddlCompare = document.getElementById("ddlCompareWith_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            $(ddlCompare).val(arrRuleCondition[iCount].CompareWith);

            var txtValue = document.getElementById("txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            if (arrRuleCondition[iCount].CompareWith == 1) {
                var feildDataType = parseInt(ddlCompareVals.dataset.fdatatype);
                switch (feildDataType) {
                    //case 4:

                    //    break;
                    //case 5:

                    //    break;
                    case 8:
                        var opts = ddlCompareVals.dataset.defvalues.split(',');
                        var newSelect = "<select>";
                        for (var i = 0; i < opts.length; i++) {
                            var opt = "<option value='" + opts[i] + "'>" + opts[i] + "</option>";
                            newSelect += opt;
                        }
                        newSelect += "</select>";
                        //////debugger
                        var opt = $(newSelect).find('option[value="' + arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName + '"]');
                        txtValue.value = $(opt).text();
                        txtValue.dataset.fieldvalue = $(opt).text();
                        txtValue.dataset.fieldid = $(opt).val();
                        txtValue.setAttribute("fieldnamevalue", $(opt).val());

                        break;
                    case 9:
                        var opts = ddlCompareVals.dataset.defvalues.split(',');
                        var newSelect = "<select>";
                        for (var i = 0; i < opts.length; i++) {
                            var pId;
                            var pName;
                            if (i % 2 == 0) {
                                pId = opts[i];
                            }
                            if ((i + 1) % 2 != 0) {
                                pName = opts[i + 1];
                            }
                            var opt = "<option value='" + pId + "'>" + pName + "</option>";
                            newSelect += opt;
                            i++;
                        }
                        newSelect += "</select>";
                        //////debugger;
                        var opt = $(newSelect).find('option[value="' + arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName + '"]');
                        txtValue.value = $(opt).text();
                        txtValue.dataset.fieldvalue = $(opt).text();
                        txtValue.dataset.fieldid = $(opt).val();
                        txtValue.setAttribute("fieldnamevalue", $(opt).val());

                        break;
                    case 21:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldid = arrRuleCondition[iCount].FieldId;
                        txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
                        txtValue.dataset.fielddatatype = arrRuleCondition[iCount].DataTypeId;
                        txtValue.dataset.linkFormid = arrRuleCondition[iCount].LinkFormId;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        break;
                    case 12:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldid = arrRuleCondition[iCount].FieldId;
                        txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
                        txtValue.dataset.fielddatatype = arrRuleCondition[iCount].DataTypeId;
                        txtValue.dataset.linkFormid = arrRuleCondition[iCount].LinkFormId;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        break;
                    case 14:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        break;
                    default:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldid = arrRuleCondition[iCount].FieldId;
                        txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
                        break;
                }
            }
            else if (arrRuleCondition[iCount].CompareWith == 2) {
                txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;; // arrRuleCondition[iCount].CompareFieldName;
                txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                txtValue.dataset.fieldid = arrRuleCondition[iCount].LinkID;
                txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].LinkID);
                txtValue.dataset.linkidfieldname = arrRuleCondition[iCount].LinkIdFieldName;
            }
            var ddlConjunction = document.getElementById("ddlConjunction_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            $(ddlConjunction).val(arrRuleCondition[iCount].Conjunction);
        }
    },

    SetRuleConditionsForPartials: function (sRuleId, arrRuleCondition) {
        //RULECONDITIONS.ClearFormRuleConditions(sRuleId);
        //for (var i = 0; i < arrRuleCondition.length; i++) {
        //    if (arrRuleCondition[i].FieldDBName != "") {
        //        var optCompareVals = $('#ddlFormFields_RULES_' + sRuleId + ' option[data-fieldname="' + arrRuleCondition[i].FieldIdName + '"]')[0]
        //        var arrMandatoryFields = optCompareVals.dataset.mandatoryfields.split(",");
        //        RULECONDITIONS.CreateNewCondition(sRuleId, arrMandatoryFields);
        //    }
        //    else {
        //        RULECONDITIONS.CreateNewCondition(sRuleId);
        //    }
        //}
        ////debugger;
        var selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab_" + sRuleId).length == 0 ? 1 : $(".ELSE_IF-DynamicTab_" + sRuleId).length : $(".tab_Conditions.active").attr("data-tabno"));
        for (var iCount = 0; iCount < arrRuleCondition.length; iCount++) {
            ////debugger;
            var sName = arrRuleCondition[iCount].LinkIdFieldName == "" ? arrRuleCondition[iCount].LinkIdFieldName : arrRuleCondition[iCount].LinkIdFieldName;
            var ddlCompareVals = $('#ddlFormFields_RULES_' + sRuleId + ' option[data-fieldname="' + sName + '"]')[0];
            var txtField = document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            txtField.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
            txtField.dataset.fieldid = arrRuleCondition[iCount].FieldId;
            txtField.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
            txtField.dataset.fieldname = sName;
            txtField.dataset.fielddatatype = ddlCompareVals != undefined ? ddlCompareVals.dataset.fdatatype : "";
            txtField.dataset.linkFormid = ddlCompareVals != undefined ? ddlCompareVals.dataset.lnkFormid : "";

            var iDataType = ddlCompareVals != undefined ? parseInt(ddlCompareVals.dataset.fdatatype) : 0;
            if (iDataType == MasterDataType.get('Form') || iDataType == MasterDataType.get('EXTERNALTABLE')) {
                var ddlExtraMandatory = document.getElementById("ddlExtraFields_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                $(ddlExtraMandatory).val(arrRuleCondition[iCount].FieldDBName);
            }
            var ddlOperator = document.getElementById("ddlOperators_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            $(ddlOperator).val(arrRuleCondition[iCount].OperatorId);
            //var opt = $(ddlOperator).find("option:selected")[0];

            var ddlCompare = document.getElementById("ddlCompareWith_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            $(ddlCompare).val(arrRuleCondition[iCount].CompareWith);

            var txtValue = document.getElementById("txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            if (arrRuleCondition[iCount].CompareWith == 1) {
                var feildDataType = ddlCompareVals != undefined ? parseInt(ddlCompareVals.dataset.fdatatype) : 0;
                switch (feildDataType) {
                    //case 4:

                    //    break;
                    //case 5:

                    //    break;
                    case 8:
                        var opts = ddlCompareVals.dataset.defvalues.split(',');
                        var newSelect = "<select>";
                        for (var i = 0; i < opts.length; i++) {
                            var opt = "<option value='" + opts[i] + "'>" + opts[i] + "</option>";
                            newSelect += opt;
                        }
                        newSelect += "</select>";
                        //////debugger
                        var opt = $(newSelect).find('option[value="' + arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName + '"]');
                        txtValue.value = $(opt).text();
                        txtValue.dataset.fieldvalue = $(opt).text();
                        txtValue.dataset.fieldid = $(opt).val();
                        txtValue.setAttribute("fieldnamevalue", $(opt).val());
                        break;
                    case 9:
                        var opts = ddlCompareVals.dataset.defvalues.split(',');
                        var newSelect = "<select>";
                        for (var i = 0; i < opts.length; i++) {
                            var pId;
                            var pName;
                            if (i % 2 == 0) {
                                pId = opts[i];
                            }
                            if ((i + 1) % 2 != 0) {
                                pName = opts[i + 1];
                            }
                            var opt = "<option value='" + pId + "'>" + pName + "</option>";
                            newSelect += opt;
                            i++;
                        }
                        newSelect += "</select>";
                        //////debugger;
                        var opt = $(newSelect).find('option[value="' + arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName + '"]');
                        txtValue.value = $(opt).text();
                        txtValue.dataset.fieldvalue = $(opt).text();
                        txtValue.dataset.fieldid = $(opt).val();
                        txtValue.setAttribute("fieldnamevalue", $(opt).val());
                        break;
                    case 21:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldid = arrRuleCondition[iCount].FieldId;
                        txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
                        txtValue.dataset.fielddatatype = arrRuleCondition[iCount].DataTypeId;
                        txtValue.dataset.linkFormid = arrRuleCondition[iCount].LinkFormId;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        break;
                    case 12:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldid = arrRuleCondition[iCount].FieldId;
                        txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
                        txtValue.dataset.fielddatatype = arrRuleCondition[iCount].DataTypeId;
                        txtValue.dataset.linkFormid = arrRuleCondition[iCount].LinkFormId;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        break;
                    case 14:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        break;
                    default:
                        txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                        txtValue.dataset.fieldid = arrRuleCondition[iCount].FieldId;
                        txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].FieldId);
                        break;
                }
            }
            else if (arrRuleCondition[iCount].CompareWith == 2) {
                txtValue.value = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;; // arrRuleCondition[iCount].CompareFieldName;
                txtValue.dataset.fieldvalue = arrRuleCondition[iCount].CompareFieldName == "" ? arrRuleCondition[iCount].Value : arrRuleCondition[iCount].CompareFieldName;;
                txtValue.dataset.fieldid = arrRuleCondition[iCount].LinkID;
                txtValue.setAttribute("fieldnamevalue", arrRuleCondition[iCount].LinkID);
                txtValue.dataset.linkidfieldname = arrRuleCondition[iCount].LinkIdFieldName;
            }
            var ddlConjunction = document.getElementById("ddlConjunction_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
            $(ddlConjunction).val(arrRuleCondition[iCount].Conjunction);
        }
    },

    GetRuleConditions: function (sRuleId, selectedConditionTab) {
        //debugger;
        var arrCondition = [];
        try {
            //selectedConditionTab = parseInt($(".tab_Conditions.active").attr("data-tabno") == undefined ? $(".ELSE_IF-DynamicTab").length == 0 ? 1 : $(".ELSE_IF-DynamicTab").length : $(".tab_Conditions.active").attr("data-tabno"));
            var lstCondtions = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + sRuleId).children;
            var tabConditionDiv = document.getElementById("rConditions_RULES_" + selectedConditionTab + "_" + sRuleId).parentElement;
            var tabConditionDivID = tabConditionDiv.id;
            for (var iCount = 0; iCount <= lstCondtions.length; iCount++) {
                ////debugger
                if (FCommon.UI.isValidObject($("#AddedCondition_" + (iCount + 1) + "_" + tabConditionDivID)[0]) == true && lstCondtions.length != 0) {
                    var txtField = document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                    var ddlOperator = document.getElementById("ddlOperators_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                    var ddlCompareWith = document.getElementById("ddlCompareWith_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                    var txtCompareType = document.getElementById("txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                    var ddlConjunction = document.getElementById("ddlConjunction_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                    var iRuleConditionId = document.getElementById("txtRuleConditionId_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId) == null ? 0 : document.getElementById("txtRuleConditionId_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).value.trim();

                    var fielddatatype = ($("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fielddatatype") == undefined || parseInt($("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fielddatatype")) == 0) ? document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).dataset.fielddatatype : $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fielddatatype");
                    var fieldid = $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldid") == undefined ? document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).dataset.fieldid : $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldid");
                    var fieldname = $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldname") == undefined ? document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).dataset.fieldname : $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldname");
                    var fieldidname = $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldidname") == undefined ? document.getElementById("txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).dataset.fieldidname : $("#txtField_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldidname");
                    var CompareTypefieldid = $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("linkid") == undefined ? document.getElementById("txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).dataset.linkid : $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("linkid");
                    var CompareTypelinkidfieldname = $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("linkidfieldname") == undefined ? $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("data-fieldname") : $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("linkidfieldname");

                    var iFieldnamevalue = 0;
                    if (parseInt(CompareTypefieldid) > 0) {
                        iFieldnamevalue = parseInt(CompareTypefieldid) == undefined ? 0 : parseInt(CompareTypefieldid);
                    }
                    else {
                        if (ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2") {
                            iFieldnamevalue = txtCompareType.value.trim() == undefined ? 0 : txtCompareType.value.trim();
                        }
                        else {
                            iFieldnamevalue = $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldnamevalue") == undefined ? 0 : $("#txtCompareType_RC_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId).attr("fieldnamevalue");
                        }
                    }
                    //debugger;
                    var fldDbName = "";
                    var compareValue = ""; var LinkId = "";
                    if (fielddatatype == 0) {
                        compareValue = CompareTypefieldid;
                    }
                    else if (fielddatatype == 12 || fielddatatype == 14 || fielddatatype == 21) {
                        var ddlExtra = document.getElementById("ddlExtraFields_" + (iCount + 1) + "_" + selectedConditionTab + "_" + sRuleId);
                        fldDbName = $(ddlExtra).val() == null ? "" : $(ddlExtra).val();
                        compareValue = txtCompareType.value.trim();
                        LinkId = txtCompareType.attributes.linkid == undefined ? 0 : txtCompareType.attributes.linkid.value;
                    }
                    else if (fielddatatype == 4 || fielddatatype == 5 || fielddatatype == 8 || fielddatatype == 9) {
                        compareValue = CompareTypefieldid;
                        LinkId = txtCompareType.attributes.linkid == undefined ? 0 : txtCompareType.attributes.linkid.value;
                    }
                    else {
                        compareValue = txtCompareType.value.trim();
                        LinkId = txtCompareType.attributes.linkid == undefined ? 0 : txtCompareType.attributes.linkid.value;
                    }
                    //if (txtField.value.trim() != "" && txtCompareType.value.trim() != "") {
                    if (txtField.value.trim() != "") {
                        var compareFieldName = "";
                        if (ddlCompareWith.options[ddlCompareWith.selectedIndex].value == 1) {
                            if (parseInt(fielddatatype) == 4) {
                                compareFieldName = LinkId;
                            }
                            else {
                                compareFieldName = txtCompareType.value.trim();
                            }
                        }
                        else {
                            compareFieldName = txtCompareType.value.trim();
                        }


                        //debugger;
                        var sValue = "";
                        var iCompareType = parseInt(ddlCompareWith.options[ddlCompareWith.selectedIndex].value);
                        var iDataType = parseInt(fielddatatype);
                        if (iCompareType == 1) {      //  Compare with Value type
                            if (iDataType == 2) {                                                      //   BOOLEAN 
                                sValue = compareFieldName;
                            }
                            else if (iDataType == 3 || iDataType == 4) {                                //   DATETIME/DATE
                                sValue = iFieldnamevalue;
                            }
                            else if (iDataType == 8) {                                //   STRINGLIST
                                sValue = iFieldnamevalue;
                            }
                            else if (iDataType == 9) {                                //   NUMBERLIST
                                //sValue = iFieldnamevalue;
                                sValue = compareFieldName;
                            }
                            else if (iDataType == 12 || iDataType == 21) {                                //   Form
                                sValue = compareFieldName;
                            }
                            else {
                                sValue = compareFieldName;
                            }
                        }
                        else {                              //  Compare with Field type
                            sValue = iFieldnamevalue;
                        }


                        var rCondition = {
                            CloseBrackets: ")",
                            CompareFieldDataType: 0,
                            CompareFieldDefaultVal: null,
                            CompareFieldId: 0,
                            CompareFieldLinkFormId: 0,
                            CompareFieldName: ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2" ? compareFieldName : "",
                            CompareFieldType: false,
                            CompareWith: ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "-1" ? "0" : ddlCompareWith.options[ddlCompareWith.selectedIndex].value,
                            Conjunction: ddlConjunction.options[ddlConjunction.selectedIndex].value,
                            DataTypeId: fielddatatype,
                            FieldDBName: fldDbName,
                            FieldDefaultVal: null,
                            FieldId: fieldid,
                            FieldIdName: ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "1" ? "" : fieldidname,
                            //FieldName: txtField.value.trim(),
                            FieldName: fieldidname,
                            FieldType: "",
                            LinkField: "",
                            LinkID: (ddlCompareWith.options[ddlCompareWith.selectedIndex].value != "2" || fielddatatype == 12 || fielddatatype == 21 || fielddatatype == 9 || fielddatatype == 4 || fielddatatype == 6) ? iFieldnamevalue : LinkId,
                            //LinkID: ddlCompareWith.options[ddlCompareWith.selectedIndex].value != "2" ? 0 : (fielddatatype == 12 || fielddatatype == 4 || fielddatatype == 6) ? LinkId : ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2" ? iFieldnamevalue : LinkId,
                            //LinkID: (fielddatatype == 12 || fielddatatype == 4 || fielddatatype == 6) ? LinkId : ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2" ? iFieldnamevalue : LinkId,
                            LinkIdFieldName: ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2" ? CompareTypelinkidfieldname : "",
                            LinkFormId: "",
                            OldFieldId: "",
                            OldLinkID: "",
                            OpenBrackets: "(",
                            OperatorId: ddlOperator.options[ddlOperator.selectedIndex].value,
                            RuleCondtionId: iRuleConditionId,
                            Sequence: iCount,
                            //Value: compareValue, 
                            //Value: (ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2" || fielddatatype == 12 || fielddatatype == 9 || fielddatatype == 4 || fielddatatype == 6) ? iFieldnamevalue : compareFieldName,
                            //Value: ddlCompareWith.options[ddlCompareWith.selectedIndex].value != "2" ? compareFieldName : (fielddatatype == 12 || fielddatatype == 9 || fielddatatype == 4 || fielddatatype == 6) ? compareFieldName : ddlCompareWith.options[ddlCompareWith.selectedIndex].value == "2" ? compareFieldName : iFieldnamevalue,
                            Value: sValue,
                            VariableName: "",
                        }
                        //debugger;
                        arrCondition.push(rCondition);
                    }
                }
            //}
            }
            return arrCondition;
        } catch (e) {
            return null;
        }
    },

    //// End.

    Toggle_RuleSettings: function (ele) {
        ////debugger;
        var sSettingTab = ele.dataset.contentid;
        var icon = $(ele).find("i");
        if ($(icon).hasClass("icon-minus")) {
            $(icon).removeClass("icon-minus").addClass("icon-plus");
            //var divHeight = $("#" + sSettingTab).height();
            //$("#tblFormating_IF_Rule_body").height($("#tblFormating_IF_Rule_body").height() + (divHeight - 20));
            //$("#tblAlert_IF_Rule_body").height($("#tblAlert_IF_Rule_body").height() + (divHeight - 20));
            $("#" + sSettingTab).slideToggle("fast");
        }
        else {
            $("#" + sSettingTab).slideToggle("fast");
            $(icon).removeClass("icon-plus").addClass("icon-minus");
            //var divHeight = $("#" + sSettingTab).height();
            //$("#tblFormating_IF_Rule_body").height($("#tblFormating_IF_Rule_body").height() - (divHeight + 20));
            //$("#tblAlert_IF_Rule_body").height($("#tblAlert_IF_Rule_body").height() - (divHeight + 20));
        }
        //RULECONDITIONS.SetRuleTablesHeight();
    },

    SetRuleTablesHeight: function () {
        if ($("#iconRuleSettings").hasClass("icon-minus")) {
            $("#tblFormating_IF_Rule_body").height($("#tblFormating_IF_Rule_body").height() - RULECONDITIONS.ruleDefHeight);
        }
        else {
            $("#tblFormating_IF_Rule_body").height(RULECONDITIONS.ruleDefHeight + $("#tblFormating_IF_Rule_body").height());
        }
    },


    //// Methods for Formating table .....
    onOptionDataLoaded: function (id, data, tag) {
        ////debugger
        var iFormId = 0;
        var cell = null;
        var sName = "";
        if (COMMON.prototype.isValidObject(data) == false || data.length == 0) {
            return;
        }
        ////debugger
        for (var iRowCount = 0; iRowCount < tag.arrIds.length - 1; iRowCount++) {
            for (var iIndex = 0; iIndex < data.length; iIndex++) {
                iFormId = parseInt(data[iIndex][0].sValue);
                if (tag.arrIds[iRowCount] == iFormId) {
                    sName = data[iIndex][1].sValue;

                    cell = FGRIDCONTROL.getCellObject(tag.GridCtrlId, iRowCount + 1, tag.iColumnIndex);
                    cell.setCellData("value", iFormId);
                    cell.setCellText(sName);
                    break;
                }
            }
        }
    },

    ChangeFormatingCell: function (objCell, event) {
        //debugger;
        if (objCell.bLeave == true) {
            if (LeaveEventGrid == objCell.Grid.id) {
                return (RULECONDITIONS.onFormatingCellLeave(objCell, event));
            }
            else {
                LeaveEventGrid = objCell.Grid.id;
                RULECONDITIONS.onFormatingCellEnter(objCell, event);
            }
        }
        else {
            LeaveEventGrid = objCell.Grid.id;
            RULECONDITIONS.onFormatingCellEnter(objCell, event);
        }
    },
    onFormatingCellEnter: function (obj, event) {
        //debugger;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
        if (obj.iColumn == 1) {
            var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            if (element.style.display == "none") {
                element.style.display = "block";
            }
            obj.setControl(element, obj.getCellData("value"));
            cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);

        }
        else if (obj.iColumn == 3) {
            cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
            if (cellChangeValue.CellData.value != 2) {
                obj.processDefault(event);
                return false;
            }
            else {
                var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                if (element.style.display == "none") {
                    element.style.display = "block";
                }
                obj.setControl(element, obj.getCellData("value"));
            }
        }
        else if (obj.iColumn == 4) {
            cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
            if (cellChangeValue.CellData.value != 1) {
                if (cellChangeValue.CellData.value == 3) {
                    if ($("#txtTextField").length <= 0) {
                        var txtNew = document.createElement("input");
                        txtNew.type = "text";
                        txtNew.className = "form-control";
                        txtNew.placeholder = "value";
                        txtNew.style.width = "100%";
                        txtNew.id = "txtTextField";
                    }
                    else
                        var txtNew = document.getElementById("txtTextField");
                    obj.setControl(txtNew, obj.getCellData("value"));
                }

                else if (cellChangeValue.CellData.value == 2) {
                    var cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 3);
                    var objCellData = cellField.CellData;
                    var ddlBool = "";
                    if (objCellData.idatatype == 12) {
                        if ($("#ddlValueField").length > 0) {
                            $("#ddlValueField").empty();
                            ddlBool = document.getElementById("ddlValueField");
                        }
                        else {
                            ddlBool = document.createElement("select");
                            ddlBool.className = "custom-select";
                            ddlBool.id = "ddlValueField";
                            ddlBool.style.width = "100%";
                        }
                        var sMandatoryFields = cellField.CellData.mandatoryfields;
                        var arrMandatoryFields = sMandatoryFields.split(',');
                        if (arrMandatoryFields != undefined && arrMandatoryFields != null) {
                            if (arrMandatoryFields.length > 0) {
                                for (var i = 0; i < arrMandatoryFields.length; i++) {
                                    var option = document.createElement("option");
                                    option.value = i;
                                    option.textContent = arrMandatoryFields[i];
                                    ddlBool.appendChild(option);
                                }
                            }
                            else {
                                var option1 = document.createElement("option");
                                option1.value = 0;
                                option1.textContent = "iFormId";
                                ddlBool.appendChild(option1);
                            }
                        }
                        else {
                            var option1 = document.createElement("option");
                            option1.value = 0;
                            option1.textContent = "iFormId";
                            ddlBool.appendChild(option1);
                        }

                        var sSavedText = obj.getCellData("value");
                        var iSelectedValue = 0;
                        var sMandatoryFields = cellField.CellData.mandatoryfields;
                        var arrMandatoryFields = sMandatoryFields.split(',');
                        if (arrMandatoryFields != undefined && arrMandatoryFields != null) {
                            if (arrMandatoryFields.length > 0) {
                                for (var i = 0; i < arrMandatoryFields.length; i++) {
                                    if (sSavedText == arrMandatoryFields[i]) {
                                        iSelectedValue = i;
                                        //obj.setControl(ddlBool, iSelectedValue);
                                    }
                                }
                                obj.setControl(ddlBool, iSelectedValue);
                            }
                            else {
                                if (sSavedText == "iFormId") {
                                    iSelectedValue = 0;
                                }
                                obj.setControl(ddlBool, iSelectedValue);
                            }
                        }
                        else {
                            if (sSavedText == "iFormId") {
                                iSelectedValue = 0;
                            }
                            obj.setControl(ddlBool, iSelectedValue);
                        }
                    }
                    else {
                        obj.processDefault(event);
                        return false;
                    }
                }

                else {
                    obj.processDefault(event);
                    return false;
                }
            }
            else {
                cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                var objCellData = cellField.CellData;
                //////debugger;
                switch (FConvert.toInt(objCellData.idatatype)) {
                    case MasterDataType.get('TEXT'):
                        if ($("#txtTextField").length <= 0) {
                            var txtNew = document.createElement("input");
                            txtNew.type = "text";
                            txtNew.className = "form-control";
                            txtNew.placeholder = "value";
                            txtNew.style.width = "100%";
                            txtNew.id = "txtTextField";
                        }
                        else
                            var txtNew = document.getElementById("txtTextField");
                        obj.setControl(txtNew, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('NUMBER'):
                        if ($("#txtNumField").length <= 0) {
                            var txtNum = document.createElement("input");
                            txtNum.type = "number";
                            txtNum.className = "form-control";
                            txtNum.placeholder = "value";
                            txtNum.style.width = "100%";
                            txtNum.id = "txtNumField";
                            txtNum.setAttribute("onkeypress", "return COMMON.prototype.validateInputNumber(this, 1, event)");
                        }
                        else
                            var txtNum = document.getElementById("txtNumField");
                        obj.setControl(txtNum, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('BOOLEAN'):
                        if ($("#ddlBoolField").length <= 0) {
                            var ddlBool = document.createElement("select");
                            ddlBool.className = "custom-select";
                            ddlBool.id = "ddlBoolField";
                            ddlBool.style.width = "100%";
                            var option1 = document.createElement("option");
                            option1.value = 1;
                            option1.textContent = "True";
                            ddlBool.appendChild(option1);
                            var option2 = document.createElement("option");
                            option2.value = 0;
                            option2.textContent = "False";
                            ddlBool.appendChild(option2);
                        }
                        else
                            var ddlBool = document.getElementById("ddlBoolField");
                        obj.setControl(ddlBool, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('DATETIME'):
                        var element = document.getElementById("fDatePickerDiv_Rules_" + GlobalRuleId);
                        if (element.style.display == "none") {
                            element.style.display = "block";
                        }
                        obj.setControl(element, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('DATE'):
                        var element = document.getElementById("fDatePickerDiv_Rules_" + GlobalRuleId);
                        if (element.style.display == "none") {
                            element.style.display = "block";
                        }
                        obj.setControl(element, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('TIME'):
                        if ($("#txtTimeField").length <= 0) {
                            var txtTime = document.createElement("input");
                            txtTime.type = "text";
                            txtTime.className = "form-control";
                            txtTime.placeholder = "value";
                            txtTime.style.width = "100%";
                            txtTime.id = "txtTimeField";
                        }
                        else
                            var txtTime = document.getElementById("txtTimeField");
                        //$(txtTime).timepicker();
                        obj.setControl(txtTime, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('FRACTION'):
                        if ($("#txtTextField").length <= 0) {
                            var txtFloat = document.createElement("input");
                            //txtFloat.type = "number";
                            txtFloat.type = "text";
                            txtFloat.className = "form-control";
                            txtFloat.placeholder = "value";
                            txtFloat.style.width = "100%";
                            txtFloat.id = "txtTextField";
                            cellObject = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
                            var iChangeValue = parseInt(cellObject.getCellData("value"));
                            if (iChangeValue == 1) {
                                txtFloat.setAttribute("onkeypress", "return COMMON.prototype.validateInputNumber(this, 1, event)");
                            }
                            else {
                                txtFloat.setAttribute("onkeypress", "");
                            }
                        }
                        else
                            var txtFloat = document.getElementById("txtTextField");
                        cellObject = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
                        var iChangeValue = parseInt(cellObject.getCellData("value"));
                        if (iChangeValue == 1) {
                            txtFloat.setAttribute("onkeypress", "return COMMON.prototype.validateInputNumber(this, 1, event)");
                        }
                        else {
                            txtFloat.setAttribute("onkeypress", "");
                        }
                        obj.setControl(txtFloat, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('PICTURE'):

                        break;
                    case MasterDataType.get('STRINGLIST'):
                        cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                        var opts = cellChangeValue.CellData.sdefaultvalue.split(',');
                        var newSelect = "<select id='ddlStrListNew' class='custom-select strListNew' style='width:100%;'>";
                        for (var i = 0; i < opts.length; i++) {
                            var opt = "<option value='" + opts[i] + "'>" + opts[i] + "</option>";
                            newSelect += opt;
                        }
                        newSelect += "</select>";
                        var ddlStringList = $($.parseHTML(newSelect));
                        if ($(document).find(".ddlStrListNew").length > 0) {
                            $(document).find('.ddlStrListNew').remove();
                        }
                        obj.setControl(ddlStringList[0], obj.getCellData("value"));
                        break;
                    case MasterDataType.get('NUMBERLIST'):
                        cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                        var opts = cellChangeValue.CellData.sdefaultvalue.split(',');
                        var newSelect = "<select id='ddlNumListNew' class='custom-select numListNew' style='width:100%;'>";
                        for (var i = 0; i < opts.length; i++) {
                            var pId;
                            var pName;
                            if (i % 2 == 0) {
                                pId = opts[i];
                            }
                            if ((i + 1) % 2 != 0) {
                                pName = opts[i + 1];
                            }
                            var opt = "<option value='" + pId + "'>" + pName + "</option>";
                            newSelect += opt;
                            i++;
                        }
                        newSelect += "</select>";
                        var ddlNumberList = $($.parseHTML(newSelect));
                        if ($(document).find(".numListNew").length > 0) {
                            $(document).find('.numListNew').remove();
                        }
                        obj.setControl(ddlNumberList[0], obj.getCellData("value"));
                        break;
                    case MasterDataType.get('DOCUMENTVIEWER'):

                        break;
                    case MasterDataType.get('FORM'):
                    debugger;
                        //obj.setCellText("");
                        //var cellObj = FGRIDCONTROL.getCellObject(obj.Grid.id, obj.iRow, 1);
                        //var iSelectedFormTypeId = cellObj.CellData.ilinkformid;
                        //var iSelectedFieldId = cellObj.CellData.ifieldid;
                        //element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                        //element.dataset.Formtypeid = iSelectedFormTypeId;
                        //if (iSelectedFieldId != null && iSelectedFieldId != undefined) {
                        //    switch (iSelectedFieldId) {
                        //        case 176:
                        //        case 177:
                        //        case 178:
                        //            element.dataset.grouptype = 1;
                        //            break;
                        //        default:
                        //            element.dataset.grouptype = 0;
                        //            break;
                        //    }
                        //}

                        //OPTIONCONTROL.setParent(element, obj.cell);
                        //iValue = 0;
                        //OPTIONCONTROL.setFilter(element, strFilter);
                        //if (COMMON.prototype.isInteger(obj.CellData.value) == true) {
                        //    iValue = parseInt(obj.getCellData("value"));
                        //}
                        //if (iValue <= 0) {
                        //    OPTIONCONTROL.clear(element);
                        //}
                        //else {
                        //    OPTIONCONTROL.setControlValue(element, iValue);                           
                        //}

                        var RulesId = RULECONDITIONS.GetRuleIdFromControl(sGridCtrlId);
                        var element = document.getElementById("fOptControlDiv_Rules_" + RulesId);
                        cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                        var optControl = document.getElementById('optControl_RulesCondition_' + RulesId);
                        optControl.dataset.Formtypeid = cellChangeValue.CellData.ilinkformid;
                        optControl.dataset.tablename = cellChangeValue.CellData.stablename;
                        optControl.dataset.primaryfield = "iFormId";
                        optControl.dataset.displayfield = "iFormId";
                        optControl.value = "";
                       
                        if (element.style.display == "none") {
                            element.style.display = "block";
                        }
                        //OPTIONCONTROL.setControlText(element, obj.getCellText());
                        obj.setControl(optControl, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('MASTER'):
                        //debugger;
                        obj.setCellText("");
                        var cellObj = FGRIDCONTROL.getCellObject(obj.Grid.id, obj.iRow, 1);
                        var iSelectedFormTypeId = cellObj.CellData.ilinkformid;
                        var iSelectedFieldId = cellObj.CellData.ifieldid;
                        element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                        element.dataset.mastertypeid = iSelectedFormTypeId;
                        if (iSelectedFieldId != null && iSelectedFieldId != undefined) {
                            switch (iSelectedFieldId) {
                                case 176:
                                case 177:
                                case 178:
                                    element.dataset.grouptype = 1;
                                    break;
                                default:
                                    element.dataset.grouptype = 0;
                                    break;
                            }
                        }

                        OPTIONCONTROL.setParent(element, obj.cell);
                        iValue = 0;
                        OPTIONCONTROL.setFilter(element, strFilter);
                        if (COMMON.prototype.isInteger(obj.CellData.value) == true) {
                            iValue = parseInt(obj.getCellData("value"));
                        }
                        if (iValue <= 0) {
                            OPTIONCONTROL.clear(element);
                        }
                        else {
                            OPTIONCONTROL.setControlValue(element, iValue);
                        }

                        break;
                    case MasterDataType.get('BIGNUMBER'):
                        if ($("#txtBigNumField").length <= 0) {
                            var txtBigNum = document.createElement("input");
                            //txtBigNum.type = "number";
                            txtBigNum.type = "text";
                            txtBigNum.className = "form-control";
                            txtBigNum.placeholder = "value";
                            txtBigNum.style.width = "100%";
                            txtBigNum.id = "txtBigNumField";
                            txtBigNum.setAttribute("onkeypress", "return COMMON.prototype.validateInputNumber(this, 0, event)");
                        }
                        else
                            var txtBigNum = document.getElementById("txtBigNumField");
                        obj.setControl(txtBigNum, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('EXTERNALTABLE'):
                        var RulesId = RULECONDITIONS.GetRuleIdFromControl(sGridCtrlId);
                        var element = document.getElementById("fOptControlDiv_Rules_" + RulesId);
                        cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                        var optControl = document.getElementById('optControl_RulesCondition_' + RulesId);
                        optControl.dataset.Formtypeid = cellChangeValue.CellData.ilinkFormid;
                        optControl.dataset.tablename = cellChangeValue.CellData.stablename;
                        optControl.dataset.primaryfield = cellChangeValue.CellData.svaluemember;
                        optControl.dataset.displayfield = cellChangeValue.CellData.sdisplaymember;
                        optControl.value = "";
                        if (element.style.display == "none") {
                            element.style.display = "block";
                        }
                        obj.setControl(element, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('SMALLNUMBER'):
                        if ($("#txtSmallNumField").length <= 0) {
                            var txtSmallNum = document.createElement("input");
                            //txtSmallNum.type = "number";
                            txtSmallNum.type = "text";
                            txtSmallNum.className = "form-control";
                            txtSmallNum.placeholder = "value";
                            txtSmallNum.style.width = "100%";
                            txtSmallNum.id = "txtSmallNumField";
                            txtSmallNum.setAttribute("onkeypress", "return COMMON.prototype.validateInputNumber(this, 0, event)");
                        }
                        else
                            var txtSmallNum = document.getElementById("txtSmallNumField");
                        obj.setControl(txtSmallNum, obj.getCellData("value"));
                        break;
                    case MasterDataType.get('TINYNUMBER'):
                        if ($("#txtTinyNumField").length <= 0) {
                            var txtTinyNum = document.createElement("input");
                            //txtTinyNum.type = "number";
                            txtTinyNum.type = "text";
                            txtTinyNum.className = "form-control";
                            txtTinyNum.placeholder = "value";
                            txtTinyNum.style.width = "100%";
                            txtTinyNum.id = "txtTinyNumField";
                            txtTinyNum.setAttribute("onkeypress", "return COMMON.prototype.validateInputNumber(this, 0, event)");
                        }
                        else
                            var txtTinyNum = document.getElementById("txtTinyNumField");
                        obj.setControl(txtTinyNum, obj.getCellData("value"));
                        break;
                    default:
                        obj.processDefault(event);
                        break;
                }
            }
        }
        else {
            if (obj.iColumn == 16) {
                selectedRow = obj.iRow;
                selectedColumn = obj.iColumn;
            }
            var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            $("#" + obj.ColumnAttribute.scellcontrolid).attr("data-fontarray", obj.getCellData("data-fontarray"));
            obj.setControl(element, obj.getCellData("value"));
            if (obj.getCellData("value") == "true") {
                $(element).prop('checked', true);
            }
            else {
                $(element).prop('checked', false);
            }
        }
    },

    onFormatingCellLeave: function (obj, event) {
        debugger;
        var element = null;
        var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
        var txtNew = document.getElementById("txtTextField");
        if (txtNew != undefined && txtNew != null) {
            if (obj.iColumn != 4) {
                txtNew.value = "";
            }
        }
        //debugger;
        if (COMMON.prototype.isValidObject(obj.ColumnAttribute.scellcontrolid) == true) {
            element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            if (obj.iColumn == 1) {
                var optSelected = $(element).find("option:selected")[0];
                obj.setCellText($(element).find("option:selected").text().trim());
                //////debugger;
                if (optSelected != null) {
                    obj.setCellData("value", optSelected.value);
                    obj.setCellData("iFieldId", optSelected.value);
                    obj.setCellData("iFieldName", optSelected.dataset.fieldname);
                    obj.setCellData("iDatatype", optSelected.dataset.fdatatype);
                    obj.setCellData("sDefaultValue", optSelected.dataset.defvalues);
                    obj.setCellData("iLinkFormId", optSelected.dataset.lnkformid);
                    obj.setCellData("sTableName", optSelected.dataset.tablename);
                    obj.setCellData("sValueMember", optSelected.dataset.valuemember);
                    obj.setCellData("sDisplayMember", optSelected.dataset.displaymember);
                    obj.setCellData("mandatoryfields", optSelected.dataset.mandatoryfields);
                    var sAccountTypeName = optSelected.dataset.fieldname;
                    if (sAccountTypeName != undefined) {
                        var strFilter = "";
                        var iFormTypeId = FORMCUSTOMIZATION.GetFormTypeId();
                        if (parseInt(iFormTypeId) == 1) {
                            if (sAccountTypeName.includes("Vendor")) {
                                strFilter = "iAccountType = 6"
                            }
                            else if (sAccountTypeName.includes("Cust")) {
                                strFilter = "iAccountType = 5"
                            }
                        }
                    }
                }
            }
            else if (obj.iColumn == 2) {
                if ($(element).val() == 0) {                
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 3);
                    cellField.setCellText("");
                    cellField.setCellData("value", "");
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 4);
                    cellField.setCellText("");
                    cellField.setCellData("value", "");
                }
                else if ($(element).val() == 1) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 3);
                    cellField.setCellText("");
                    cellField.setCellData("value", "");
                }
                else if ($(element).val() == 2) {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 4);
                    cellField.setCellText("");
                    cellField.setCellData("value", "");
                }
                obj.setCellText($(element).find("option:selected").text().trim());
                obj.setCellData("value", element.value);
                obj.setCellData("ivalueorfield", element.value);
            }
            else if (obj.iColumn == 3) {
                cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
                if (cellChangeValue.CellData.value != 2) {
                    obj.setCellText("");
                    obj.setCellData("value", "");
                }
                else {
                    var optSelected = $(element).find("option:selected")[0];
                    obj.setCellText($(element).find("option:selected").text().trim());
                    if (optSelected != null) {
                        obj.setCellData("iFieldId", optSelected.value);
                        obj.setCellData("iFieldName", optSelected.dataset.fieldname);
                        obj.setCellData("iDatatype", optSelected.dataset.fdatatype);
                        obj.setCellData("iLinkFormId", optSelected.dataset.lnkFormid);
                        obj.setCellData("sDisplayMember", optSelected.dataset.displaymember);
                        obj.setCellData("mandatoryfields", optSelected.dataset.mandatoryfields)
                    }
                }
                if (cellChangeValue.CellData.value == 2) {
                    obj.setCellText($(element).find("option:selected").text().trim());
                    obj.setCellData("value", element.value);
                    obj.setCellData("ivalueorfield", element.value);
                }
            }
            else if (obj.iColumn == 4) {
                //////debugger;
                //cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                //var objCellData = cellField.CellData;
                //cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);

                var cellValueField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 3);
                var idatatype = cellValueField.CellData.idatatype;

                var cellChangeValueField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
                var ichangeValue = cellChangeValueField.CellData.value;
                if (idatatype == 12 && ichangeValue == 2) {
                    cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);
                    if (cellChangeValue.CellData.value != 2) {
                        obj.setCellText("");
                        obj.setCellData("value", "");
                    }
                    else {
                        var optSelected = $("#ddlValueField").find("option:selected")[0];
                        obj.setCellText($("#ddlValueField").find("option:selected").text().trim());
                        if (optSelected != null) {
                            obj.setCellData("iFieldId", optSelected.value);
                            obj.setCellData("iFieldName", optSelected.dataset.fieldname);
                            obj.setCellData("iDatatype", optSelected.dataset.fdatatype);
                            obj.setCellData("iLinkFormId", optSelected.dataset.lnkFormid);
                            obj.setCellData("sDisplayMember", optSelected.dataset.displaymember);
                            obj.setCellData("mandatoryfields", optSelected.dataset.mandatoryfields);
                        }
                    }
                    obj.setCellText($("#ddlValueField").find("option:selected").text().trim());
                    obj.setCellData("value", $("#ddlValueField").find("option:selected").text().trim());
                    obj.setCellData("ivalueorfield", $("#ddlValueField").val());
                }
                else if (cellChangeValue.CellData.value == 3) {
                    var txtText = document.getElementById("txtTextField");
                    obj.setCellText(txtText.value.trim());
                    obj.setCellData("value", txtText.value.trim());
                }
                else {
                    cellField = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
                    var objCellData = cellField.CellData;
                    cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 2);

                    switch (FConvert.toInt(objCellData.idatatype)) {
                        case MasterDataType.get('TEXT'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var txtText = document.getElementById("txtTextField");
                                obj.setCellText(txtText.value.trim());
                                obj.setCellData("value", txtText.value.trim());
                            }
                            break;
                        case MasterDataType.get('NUMBER'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var txtNum = document.getElementById("txtNumField");
                                obj.setCellText(txtNum.value.trim());
                                obj.setCellData("value", txtNum.value.trim());
                            }
                            break;
                        case MasterDataType.get('BOOLEAN'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var ddlBool = document.getElementById("ddlBoolField");
                                obj.setCellText($(ddlBool).find("option:selected").text().trim());
                                obj.setCellData("value", $(ddlBool).find("option:selected").val());
                            }
                            break;
                        case MasterDataType.get('DATETIME'):
                            if (cellChangeValue.CellData.value != 1) {
                                var txtNew = document.getElementById("txtTextField");
                                if (txtNew != undefined && txtNew != null) {
                                    obj.setCellText(txtNew.value);
                                    obj.setCellData("value", txtNew.value);
                                }
                            }
                            else {
                                var idateValue = DATEPICKER.getDate('fDatePicker_RulesCondition_' + GlobalRuleId);
                                var sdateText = DATEPICKER.getText('fDatePicker_RulesCondition_' + GlobalRuleId);
                                obj.setCellText(sdateText);
                                obj.setCellData("value", idateValue);
                            }
                            break;
                        case MasterDataType.get('DATE'):
                            if (cellChangeValue.CellData.value != 1) {
                                var txtNew = document.getElementById("txtTextField");
                                if (txtNew != undefined && txtNew != null) {
                                    obj.setCellText(txtNew.value);
                                    obj.setCellData("value", txtNew.value);
                                }
                            }
                            else {
                                var idateValue = DATEPICKER.getDate('fDatePicker_RulesCondition_' + GlobalRuleId);
                                var sdateText = DATEPICKER.getText('fDatePicker_RulesCondition_' + GlobalRuleId);
                                obj.setCellText(sdateText);
                                obj.setCellData("value", idateValue);
                            }
                            break;
                        case MasterDataType.get('TIME'):
                            if (cellChangeValue.CellData.value != 1) {
                                var txtNew = document.getElementById("txtTextField");
                                if (txtNew != undefined && txtNew != null) {
                                    obj.setCellText(txtNew.value);
                                    obj.setCellData("value", txtNew.value);
                                }
                            }
                            else {
                                var txtTime = document.getElementById("txtTimeField");
                                obj.setCellText(txtTime.value.trim());
                                obj.setCellData("value", txtTime.value.trim());
                            }
                            break;
                        case MasterDataType.get('FRACTION'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var txtFloat = document.getElementById("txtTextField");
                                obj.setCellText(txtFloat.value.trim());
                                obj.setCellData("value", txtFloat.value.trim());
                            }
                            break;
                        case MasterDataType.get('PICTURE'):

                            break;
                        case MasterDataType.get('STRINGLIST'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var ddlStrList = document.getElementById("ddlStrListNew");
                                obj.setCellText($(ddlStrList).find("option:selected").text().trim());
                                obj.setCellData("value", $(ddlStrList).find("option:selected").val());
                                obj.setCellData("sFieldName", $(ddlStrList).find("option:selected").text().trim());
                            }
                            break;
                        case MasterDataType.get('NUMBERLIST'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var ddlNumList = document.getElementById("ddlNumListNew");
                                obj.setCellText($(ddlNumList).find("option:selected").text().trim());
                                obj.setCellData("value", $(ddlNumList).find("option:selected").val());
                                obj.setCellData("sFieldName", $(ddlNumList).find("option:selected").text().trim());
                            }
                            break;
                        case MasterDataType.get('DOCUMENTVIEWER'):

                            break;
                        case MasterDataType.get('Form'):
                        case MasterDataType.get('MASTER'):
                            data = OPTIONCONTROL.getControlData(obj.ColumnAttribute.scellcontrolid);
                            obj.setCellData("value", parseInt(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                            obj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                            //if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                            //    obj.setCellText("");
                            //    obj.setCellData("value", "");
                            //}
                            //else {
                            //    var iValue = 0;
                            //    var RulesId = RULECONDITIONS.GetRuleIdFromControl(sGridCtrlId);
                            //    var msTypeId = OPTIONCONTROL.getControlData("optControl_RulesCondition_" + RulesId);
                            //    if (msTypeId != undefined && msTypeId != null && msTypeId.length > 0) {
                            //        iValue = msTypeId[0].iFormId;
                            //    }
                            //    var msName = OPTIONCONTROL.getControlText("optControl_RulesCondition_" + RulesId);
                            //    obj.setCellText(msName);
                            //    obj.setCellData("value", iValue);
                            //}
                            break;
                        case MasterDataType.get('BIGNUMBER'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var txtBigNum = document.getElementById("txtBigNumField");
                                obj.setCellText(txtBigNum.value.trim());
                                obj.setCellData("value", txtBigNum.value.trim());
                            }
                            break;
                        case MasterDataType.get('EXTERNALTABLE'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var RulesId = RULECONDITIONS.GetRuleIdFromControl(sGridCtrlId);
                                var msTypeId = OPTIONCONTROL.getControlValue("optControl_RulesCondition_" + RulesId);
                                var msName = OPTIONCONTROL.getControlText("optControl_RulesCondition_" + RulesId);
                                obj.setCellText(msName);
                                obj.setCellData("value", msTypeId);
                            }
                            break;
                        case MasterDataType.get('SMALLNUMBER'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var txtSmallNum = document.getElementById("txtSmallNumField");
                                obj.setCellText(txtSmallNum.value.trim());
                                obj.setCellData("value", txtSmallNum.value.trim());
                            }
                            break;
                        case MasterDataType.get('TINYNUMBER'):
                            if (cellChangeValue.CellData.value != 1 && cellChangeValue.CellData.value != 3) {
                                obj.setCellText("");
                                obj.setCellData("value", "");
                            }
                            else {
                                var txtTinyNum = document.getElementById("txtTinyNumField");
                                obj.setCellText(txtTinyNum.value.trim());
                                obj.setCellData("value", txtTinyNum.value.trim());
                            }
                        default:
                            obj.processDefault(event);
                            break;
                            break;
                    }
                }
            }
            else if (obj.iColumn == 16) {
                var currentText = obj.getCellData("value");
                if (currentText != "") {
                    obj.setCellText(currentText);
                }
            }
            else {
                if (element.tagName == "SELECT") {
                    obj.setCellText($(element).find("option:selected").text());
                    obj.setCellData("value", $(element).find("option:selected").val());
                }
                else if (element.tagName == "INPUT") {
                    if (element.type == "text") {
                        obj.setCellText(element.value);
                        obj.setCellData("value", element.value);
                    }
                    else if (element.type == "checkbox") {
                        obj.setCellText(element.checked);
                        obj.setCellData("value", element.checked);
                    }
                }
            }
        }
        return (true);
    },

    FillFormatingTable: function (sRuleId, sTableId, arrFormatingData) {
        debugger;
        for (var i = 0; i < arrFormatingData.length; i++) {
            for (var j = 1; j <= 16; j++) {
                var cell = FGRIDCONTROL.getCellObject(sTableId, (i + 1), j);
                switch (j) {
                    case 1:
                        var ddlFields = document.getElementById("ddlFieldsDiv_Rule_IF_" + sRuleId);
                        $(ddlFields).val(arrFormatingData[i].FieldId);
                        var opt = $(ddlFields).find("option:selected")[0];
                        if (opt != undefined) {
                            cell.setCellText($(opt).text());
                            cell.setCellData("value", opt.value);
                            cell.setCellData("iFieldId", opt.value);
                            cell.setCellData("iFieldName", opt.dataset.fieldname);
                            cell.setCellData("iDatatype", opt.dataset.fdatatype);
                            cell.setCellData("sDefaultValue", opt.dataset.defvalues);
                            cell.setCellData("iLinkFormId", opt.dataset.lnkFormid);
                            cell.setCellData("sTableName", opt.dataset.tablename);
                            cell.setCellData("sValueMember", opt.dataset.valuemember);
                            cell.setCellData("sDisplayMember", opt.dataset.displaymember);
                            cell.setCellData("mandatoryfields", opt.dataset.mandatoryfields);
                        }
                        break;
                    case 2:
                        var ddlChangeVal = document.getElementById("ddlChangeValueFormat_IF_" + sRuleId);
                        $(ddlChangeVal).val(arrFormatingData[i].ValueType);
                        cell.setCellText($(ddlChangeVal).find("option:selected").text());
                        cell.setCellData("value", $(ddlChangeVal).find("option:selected").val());
                        cell.setCellData("ivalueorfield", $(ddlChangeVal).find("option:selected").val());
                        break;
                    case 3:
                        if (arrFormatingData[i].ValueType == 2 && arrFormatingData[i].LinkID > 0) {
                            var ddlFields = document.getElementById("ddlFieldsDiv_Rule_IF_" + sRuleId);
                            $(ddlFields).val(arrFormatingData[i].LinkID);
                            cell.setCellText($(ddlFields).find("option:selected").text());
                             opt = $(ddlFields).find("option:selected")[0];
                            if (opt != undefined) {
                                cell.setCellData("value", opt.value);
                                cell.setCellData("iFieldId", opt.value);
                                cell.setCellData("iFieldName", opt.dataset.fieldname);
                                cell.setCellData("iDatatype", opt.dataset.fdatatype);
                                cell.setCellData("iLinkFormId", opt.dataset.lnkFormid);
                                cell.setCellData("sDisplayMember", opt.dataset.displaymember);
                                cell.setCellData("mandatoryfields", opt.dataset.mandatoryfields);
                            }
                        }
                        break;
                    case 4: //// fill cell based on datatype...
                        if (parseInt(arrFormatingData[i].ValueType) == 1) {
                            //if (arrFormatingData[i].DataTypeId == 12 || arrFormatingData[i].DataTypeId == 14 || arrFormatingData[i].DataTypeId == 21) {
                            if (arrFormatingData[i].DataTypeId == 12 || arrFormatingData[i].DataTypeId == 14) {
                            cell.setCellData("value", arrFormatingData[i].Value.split(',')[0]);
                                cell.setCellText(arrFormatingData[i].Value.split(',')[1]);
                            }
                            else if (opt != undefined) {
                                if ((parseInt(opt.dataset.fdatatype) == 12 || parseInt(opt.dataset.fdatatype) == 14)) {
                                    cell.setCellData("value", arrFormatingData[i].Value.split(',')[0]);
                                    cell.setCellText(arrFormatingData[i].Value.split(',')[1]);
                                }
                                else {
                                    cell.setCellData("value", arrFormatingData[i].Value);
                                    cell.setCellText(arrFormatingData[i].Value);
                                }
                            }
                            else {
                                cell.setCellData("value", arrFormatingData[i].Value);
                                cell.setCellText(arrFormatingData[i].Value);
                            }
                        }
                        else if (parseInt(arrFormatingData[i].ValueType) == 2) {
                            cell.setCellData("value", arrFormatingData[i].Value.split(',')[0]);
                            var sFieldValue = "";
                            if (parseInt(arrFormatingData[i].Value) == 0) {
                                cell.setCellText("iFormId");
                            }
                            else {
                                cell.setCellData("value", arrFormatingData[i].Value);
                                cell.setCellText(arrFormatingData[i].Value);
                            }
                        }
                        else {
                            cell.setCellData("value", arrFormatingData[i].Value);
                            cell.setCellText(arrFormatingData[i].Value);
                        }
                        break;
                    case 5:
                        cell.setCellText(arrFormatingData[i].Caption);
                        cell.setCellData("value", arrFormatingData[i].Caption);
                        break;
                    case 6:
                        cell.setCellText(arrFormatingData[i].RegularExpression);
                        cell.setCellData("value", arrFormatingData[i].RegularExpression);
                        break;
                    case 7:
                        cell.setCellText(arrFormatingData[i].ErrorMessage);
                        cell.setCellData("value", arrFormatingData[i].ErrorMessage);
                        break;
                    case 8:
                        cell.setCellText(arrFormatingData[i].BannerText);
                        cell.setCellData("value", arrFormatingData[i].BannerText);
                        break;
                    case 9:
                        cell.setCellText(arrFormatingData[i].ToolTip);
                        cell.setCellData("value", arrFormatingData[i].ToolTip);
                        break;
                    case 10:
                        cell.setCellText(arrFormatingData[i].Mandatory);
                        cell.setCellData("value", arrFormatingData[i].Mandatory);
                        break;
                    case 11:
                        cell.setCellText(arrFormatingData[i].Hidden);
                        cell.setCellData("value", arrFormatingData[i].Hidden);
                        break;
                    case 21:
                        cell.setCellText(arrFormatingData[i].Enabled);
                        cell.setCellData("value", arrFormatingData[i].Enabled);
                        break;
                    case 12:
                        cell.setCellText(arrFormatingData[i].Enabled);
                        cell.setCellData("value", arrFormatingData[i].Enabled);
                        break;
                    case 13:
                        cell.setCellText(arrFormatingData[i].Spellcheck);
                        cell.setCellData("value", arrFormatingData[i].Spellcheck);
                        break;
                    case 14:
                        var ddlAlignments = document.getElementById("ddlAlignmentFormat_IF_" + sRuleId);
                        $(ddlAlignments).val(arrFormatingData[i].Alignment);
                        cell.setCellText($(ddlAlignments).find("option:selected").text());
                        cell.setCellData("value", $(ddlAlignments).find("option:selected").val());
                        break;
                    case 15:
                        var ddlCharCase = document.getElementById("ddlCharCasingFormat_IF_" + sRuleId);
                        $(ddlCharCase).val(arrFormatingData[i].CharacterCasing);
                        cell.setCellText($(ddlCharCase).find("option:selected").text());
                        cell.setCellData("value", $(ddlCharCase).find("option:selected").val());
                        break;
                    case 16:
                        ////debugger;
                        if (arrFormatingData[i].Font == null || arrFormatingData[i].Font == "") {
                            cell.setCellText("None");
                            cell.setCellData("value", "None");
                        }
                        else {
                            var savedFont = "";
                            var url = GLOBAL.getContextPath("byteArrayToObject", "FormCustomization", "Forms");
                            var fnResult = NETWORK.executeServerMethod(url, true, { arrFont: arrFormatingData[i].Font }, "JSON", false);
                            ////debugger;
                            if (fnResult.lValue == 1) {
                                savedFont = fnResult.data;
                            }
                            cell.setCellText(savedFont.FontFamily == null ? "None" : savedFont.FontFamily);
                            cell.setCellData("value", savedFont.FontFamily == null ? "None" : savedFont.FontFamily);
                            cell.setCellData("data-fontarray", arrFormatingData[i].Font);
                            cell.setCellData('data-for', JSON.stringify(savedFont));
                            $($(cell)[0].cell).find('button').attr('data-for', JSON.stringify(savedFont));
                        }
                        break;
                }
            }
        }
    },
    GetFormatingDetails: function (sRuleId, bIF) {
        //debugger;
        var arrFontData_IF = [];
        var arrFontData_ELSE = [];
        var arrFormatingData = [];
        var gridId = "";
        if (bIF) {
            gridId = "tblFormating_IF_Rule_" + sRuleId;
        }
        else {
            gridId = "tblFormating_Else_Rule_" + sRuleId;
        }
        FGRIDCONTROL.update(gridId);
        var iTotalRows = FGRIDCONTROL.getTotalRows(gridId);
        //var iTotalCols = FGRIDCONTROL.getTotalColumns(gridId);
        for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
            var gridRowData = FGRIDCONTROL.getRowValue(gridId, iRowIndex);
            //if (gridRowData[0].Value != null && gridRowData[1].Value != null && gridRowData[0].Value != "" && gridRowData[1].Value != "") {
            if (gridRowData[0].Value != null && gridRowData[1].Value != null && gridRowData[0].Value != "") {
                /// NOTE: if Value gets error, use Data.value 
                ////debugger;
                if (gridRowData[15].Data.for != undefined) {
                    var objFontData = JSON.parse(gridRowData[15].Data.for);
                }
                else {
                    var objFontData = null;
                }

                if (bIF) {
                    objCustomFontClass.arrFontData_IF.push(objFontData);
                }
                else {
                    objCustomFontClass.arrFontData_ELSE.push(objFontData);
                }
                var sDataValue = gridRowData[3].Text;
                var iValue = parseInt(gridRowData[3].Value);
                var sValue= gridRowData[3].Text;
                if (gridRowData[1].Value == "1") {
                    if (gridRowData[0].Data.idatatype == 12 || gridRowData[0].Data.idatatype == 14 || gridRowData[0].Data.idatatype == 21) {
                        if (isNaN(iValue) == false && sValue.length > 0) {
                            sDataValue = gridRowData[3].Value + ',' + gridRowData[3].Text;
                        }
                    }
                    else {
                        sDataValue = gridRowData[3].Text;
                    }
                }

                var rowData = {
                    BackColor: "",
                    ChangeValue: "",
                    DataTypeId: gridRowData[0].Data.idatatype,
                    DefaultValue: "",
                    FieldId: gridRowData[0].Data.ifieldid,
                    FieldName: gridRowData[0].Data.ifieldname,
                    FieldType: "",
                    LinkFieldName: "",
                    LinkID: gridRowData[1].Value != "2" ? gridRowData[0].Data.ilinkFormid : gridRowData[2].Data.ifieldid,
                    ValueType: gridRowData[1].Value == "" ? "0" : gridRowData[1].Value,
                    Value: sDataValue,
                    Caption: gridRowData[4].Value,
                    RegularExpression: gridRowData[5].Value,
                    ErrorMessage: gridRowData[6].Value,
                    BannerText: gridRowData[7].Value,
                    ToolTip: gridRowData[8].Value,
                    Mandatory: gridRowData[9].Text,
                    Hidden: gridRowData[10].Text,
                    Enabled: gridRowData[11].Text,
                    Spellcheck: gridRowData[12].Text,
                    Alignment: gridRowData[13].Value,
                    CharacterCasing: gridRowData[14].Value,
                    Font: null,
                    OldFieldId: "",
                    OldLinkID: "",
                    RuleCondtionId: "",
                    RuleFormatingId: "",
                }
                arrFormatingData.push(rowData);
            }
        }
        ////debugger;
        return arrFormatingData;
    },

    GetFormatingDetails_ELSEIF: function (sRuleId, currentTab) {
       /////// debugger;
        var arrFontData_ELSEIF = [];
        var arrFormatingData = [];
        var gridId = "";
        gridId = "tblFormating_ELSEIF_Rule_" + sRuleId + "_" + currentTab;
        var iTotalRows = FGRIDCONTROL.getTotalRows(gridId);
        //var iTotalCols = FGRIDCONTROL.getTotalColumns(gridId);
        for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
            var gridRowData = FGRIDCONTROL.getRowValue(gridId, iRowIndex);
            if (gridRowData[0].Value != null && gridRowData[1].Value != null && gridRowData[0].Value != "" && gridRowData[1].Value != "") {
                /// NOTE: if Value gets error, use Data.value 
                ////debugger;
                if (gridRowData[15].Data.for != undefined) {
                    var objFontData = JSON.parse(gridRowData[15].Data.for);
                }
                else {
                    var objFontData = null;
                }
                objCustomFontClass.arrFontData_ELSEIF.push(objFontData);

                var sDataValue = gridRowData[3].Text;
                var iValue = parseInt(gridRowData[3].Value);
                var sValue = gridRowData[3].Text;
                if (gridRowData[1].Value == "1") {
                    if (gridRowData[0].Data.idatatype == 12 || gridRowData[0].Data.idatatype == 14 || gridRowData[0].Data.idatatype == 21) {
                        if (isNaN(iValue) == false && sValue.length > 0) {
                            sDataValue = gridRowData[3].Value + ',' + gridRowData[3].Text;
                        }
                    }
                    else {
                        sDataValue = gridRowData[3].Text;
                    }
                }

                var rowData = {
                    BackColor: "",
                    ChangeValue: "",
                    DataTypeId: gridRowData[0].Data.idatatype,
                    DefaultValue: "",
                    FieldId: gridRowData[0].Data.ifieldid,
                    FieldName: gridRowData[0].Data.ifieldname,
                    FieldType: "",
                    LinkFieldName: "",
                    LinkID: gridRowData[0].Data.ilinkFormid,
                    ValueType: gridRowData[1].Value,
                    Value: sDataValue,
                    Caption: gridRowData[4].Value,
                    RegularExpression: gridRowData[5].Value,
                    ErrorMessage: gridRowData[6].Value,
                    BannerText: gridRowData[7].Value,
                    ToolTip: gridRowData[8].Value,
                    Mandatory: gridRowData[9].Value,
                    Hidden: gridRowData[10].Value,
                    Enabled: gridRowData[11].Value,
                    Spellcheck: gridRowData[12].Value,
                    Alignment: gridRowData[13].Value,
                    CharacterCasing: gridRowData[14].Value,
                    Font: null,
                    OldFieldId: "",
                    OldLinkID: "",
                    RuleCondtionId: "",
                    RuleFormatingId: "",
                }
                arrFormatingData.push(rowData);
            }
        }
        ////debugger;
        return arrFormatingData;
    },

    //// Methods for Alert table If Block.....
    ChangeAlertCell_RIF: function (objCell, event) {
        //////debugger;
        if (objCell.bLeave == true) {
            return (RULECONDITIONS.onAlertCellLeave_IF(objCell));
        }
        else {
            RULECONDITIONS.onAlertCellEnter_IF(objCell);
        }
    },
    onAlertCellEnter_IF: function (obj) {
        ////debugger;
        if (obj.iColumn == 2) {
            var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
            var value = FGRIDCONTROL.getRowValue(sGridCtrlId, obj.iRow);
            if (parseInt(value[0].Value) >= 0) {
                id = value[0].MetaData.scellcontrolid;
                var ele = document.getElementById(id);
                ele.value = parseInt(value[0].Value);
                RULECONDITIONS.UserOrRoles(ele);
            }
            else {
                id = value[1].MetaData.scellcontrolid;
                var ele = document.getElementById(id);
                for (i = 0; i < ele.length ; i++) {
                    ele.options[i].hidden = true;
                }

            }


        }
        if (obj.iColumn == 3) {
            var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
            cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
            if (cellChangeValue.CellData.value == 1) {
                var element = document.getElementById("ddlRolesAlert_IF");
                obj.setControl(element, obj.getCellData("value"));
            }
            else {
                var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                obj.setControl(element, obj.getCellData("value"));
            }
        }
        else {
            var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            obj.setControl(element, obj.getCellData("value"));
        }
    },
    onAlertCellLeave_IF: function (obj) {
        //////debugger;
        if (obj.iColumn == 3) {
            var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
            cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
            if (cellChangeValue.CellData.value == 1) {
                var element = document.getElementById("ddlRolesAlert_IF");
                obj.setCellText($(element).find("option:selected").text());
                obj.setCellData("value", $(element).find("option:selected").val());
            }
            else {
                var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                obj.setCellText($(element).find("option:selected").text());
                obj.setCellData("value", $(element).find("option:selected").val());
            }
        }
        else {
            element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            if (element.tagName == "SELECT") {
                obj.setCellText($(element).find("option:selected").text());
                obj.setCellData("value", $(element).find("option:selected").val());
            }
            else if (element.tagName == "INPUT") {
                if (element.type == "text") {
                    obj.setCellText(element.value);
                    obj.setCellData("value", element.value);
                }
                else if (element.type == "checkbox") {
                    obj.setCellText(element.checked);
                    obj.setCellData("value", element.checked);
                }
            }
        }
    },

    FillAlertsTable: function (sRuleId, sTableId, arrAlertsData) {
        for (var i = 0; i < arrAlertsData.length; i++) {
            for (var j = 1; j <= 9; j++) {
                var cell = FGRIDCONTROL.getCellObject(sTableId, (i + 1), j);
                switch (j) {
                    case 1:
                        var ddlAlertType = document.getElementById("ddlTypeAlert_IF_" + sRuleId);
                        $(ddlAlertType).val(arrAlertsData[i].Type);
                        cell.setCellText($(ddlAlertType).find("option:selected").text());
                        cell.setCellData("value", $(ddlAlertType).find("option:selected").val());
                        break;
                    case 2:
                        var ddlRoles = document.getElementById("ddlRolesAlert_IF_" + sRuleId);
                        $(ddlRoles).val(arrAlertsData[i].TypeId);
                        cell.setCellText($(ddlRoles).find("option:selected").text());
                        cell.setCellData("value", $(ddlRoles).find("option:selected").val());
                        break;
                    case 3:
                        cell.setCellText(arrAlertsData[i].SMS);
                        cell.setCellData("value", arrAlertsData[i].SMS);
                        break;
                    case 4:
                        cell.setCellText(arrAlertsData[i].Email);
                        cell.setCellData("value", arrAlertsData[i].Email);
                        break;
                    case 5:
                        cell.setCellText(arrAlertsData[i].DashBoard);
                        cell.setCellData("value", arrAlertsData[i].DashBoard);
                        break;
                    case 6:
                        cell.setCellText(arrAlertsData[i].Popup);
                        cell.setCellData("value", arrAlertsData[i].Popup);
                        break;
                    case 7:
                        cell.setCellText(arrAlertsData[i].Gtalk);
                        cell.setCellData("value", arrAlertsData[i].Gtalk);
                        break;
                    case 8:
                        cell.setCellText(arrAlertsData[i].SendSpecificMessage);
                        cell.setCellData("value", arrAlertsData[i].SendSpecificMessage);
                        break;
                    case 9:
                        cell.setCellText(arrAlertsData[i].SpecificMessage);
                        cell.setCellData("value", arrAlertsData[i].SpecificMessage);
                        break;
                }
            }
        }
    },
    GetAlertDetails: function (sRuleId, bIF) {
        //////debugger;
        var arrAlertsData = [];
        var gridId = "";
        if (bIF) {
            gridId = "tblAlert_IF_Rule_" + sRuleId;
        }
        else {
            gridId = "tblAlert_Else_Rule_" + sRuleId;
        }
        var iTotalRows = FGRIDCONTROL.getTotalRows(gridId);
        for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
            var gridRowData = FGRIDCONTROL.getRowValue(gridId, iRowIndex);
            if (gridRowData[0].Value != null && gridRowData[1].Value != null && gridRowData[0].Value != "" && gridRowData[1].Value != "") {
                /// NOTE: if Value gets error, use Data.value 
                var rowData = {
                    Type: gridRowData[0].Value,
                    TypeId: gridRowData[1].Value,
                    SMS: gridRowData[2].Value,
                    Email: gridRowData[3].Value,
                    DashBoard: gridRowData[4].Value,
                    Popup: gridRowData[5].Value,
                    Gtalk: gridRowData[6].Value,
                    SendSpecificMessage: gridRowData[7].Value,
                    SpecificMessage: gridRowData[8].Value,
                    OldDashBoard: "",
                    OldEmail: "",
                    OldGtalk: "",
                    OldPopup: "",
                    OldSMS: "",
                    ToWhomName: "",
                }
                arrAlertsData.push(rowData);
            }
        }
        return arrAlertsData;
    },

    GetAlertDetails_ELSEIF: function (sRuleId, currentTab) {
        //////debugger;
        var arrAlertsData = [];
        var gridId = "";
        gridId = "tblAlert_ELSEIF_Rule_" + sRuleId + "_" + currentTab;
        var iTotalRows = FGRIDCONTROL.getTotalRows(gridId);
        for (var iRowIndex = 1; iRowIndex <= iTotalRows; iRowIndex++) {
            var gridRowData = FGRIDCONTROL.getRowValue(gridId, iRowIndex);
            if (gridRowData[0].Value != null && gridRowData[1].Value != null && gridRowData[0].Value != "" && gridRowData[1].Value != "") {
                /// NOTE: if Value gets error, use Data.value 
                var rowData = {
                    Type: gridRowData[0].Value,
                    TypeId: gridRowData[1].Value,
                    SMS: gridRowData[2].Value,
                    Email: gridRowData[3].Value,
                    DashBoard: gridRowData[4].Value,
                    Popup: gridRowData[5].Value,
                    Gtalk: gridRowData[6].Value,
                    SendSpecificMessage: gridRowData[7].Value,
                    SpecificMessage: gridRowData[8].Value,
                    OldDashBoard: "",
                    OldEmail: "",
                    OldGtalk: "",
                    OldPopup: "",
                    OldSMS: "",
                    ToWhomName: "",
                }
                arrAlertsData.push(rowData);
            }
        }
        return arrAlertsData;
    },

    //// Methods for Alert table Else Block.....
    //// not in used.......
    ChangeAlertCell_RElse: function (objCell, event) {
        //////debugger;
        if (objCell.bLeave == true) {
            return (RULECONDITIONS.onAlertCellLeave_RElse(objCell));
        }
        else {
            RULECONDITIONS.onAlertCellEnter_RElse(objCell);
        }
    },
    onAlertCellEnter_RElse: function (obj) {
        //////debugger;
        if (obj.iColumn == 3) {
            var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
            cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
            if (cellChangeValue.CellData.value == 1) {
                var element = document.getElementById("ddlRolesAlert_IF");
                obj.setControl(element, obj.getCellData("value"));
            }
            else {
                var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                obj.setControl(element, obj.getCellData("value"));
            }
        }
        else {
            var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            obj.setControl(element, obj.getCellData("value"));
        }
    },
    onAlertCellLeave_RElse: function (obj) {
        ////debugger;
        if (obj.iColumn == 3) {
            var sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(obj.cell);
            cellChangeValue = FGRIDCONTROL.getCellObject(sGridCtrlId, obj.iRow, 1);
            if (cellChangeValue.CellData.value == 1) {
                var element = document.getElementById("ddlRolesAlert_IF");
                obj.setCellText($(element).find("option:selected").text());
                obj.setCellData("value", $(element).find("option:selected").val());
            }
            else {
                var element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
                obj.setCellText($(element).find("option:selected").text());
                obj.setCellData("value", $(element).find("option:selected").val());
            }
        }
        else {
            element = document.getElementById(obj.ColumnAttribute.scellcontrolid);
            if (element.tagName == "SELECT") {
                obj.setCellText($(element).find("option:selected").text());
                obj.setCellData("value", $(element).find("option:selected").val());
            }
            else if (element.tagName == "INPUT") {
                if (element.type == "text") {
                    obj.setCellText(element.value);
                    obj.setCellData("value", element.value);
                }
                else if (element.type == "checkbox") {
                    obj.setCellText(element.checked);
                    obj.setCellData("value", element.checked);
                }
            }
        }
    },

    GetResourceMessage: function (sKey) {
        var value = "";
        var result = RULECONDITIONS.FindErrorMsg(sKey);

        if (result != null) {
            if (result.Value.length > 0) {
                value = result.Value;
            }
        }
        return (value);
    },
    FindErrorMsg: function (sKey) {
        var resultMsg = null;
        var obj = null;
        try {
            for (var iCounter = 0; iCounter < RULECONDITIONS.Rules_ResourceMsgs.length; iCounter++) {
                obj = RULECONDITIONS.Rules_ResourceMsgs[iCounter];
                if (obj.Key == sKey) {
                    resultMsg = {
                        Value: obj.Value
                    }
                    break;
                }
            }
        }
        catch (err) {
            resultMsg = {
                Value: err.message
            }
        }
        return (resultMsg);
    },
    ShowErrorMessage: function (ruleId, msg, color) {
        if (color != "" && color != undefined) {
            $("#lblErrorMsg_Rules_" + ruleId).css("color", color);
        }
        else {
            $("#lblErrorMsg_Rules_" + ruleId).css("color", "red");
        }
        $("#lblErrorMsg_Rules_" + ruleId).show();
        $("#lblErrorMsg_Rules_" + ruleId).html(msg).delay(2000).fadeOut('slow');;
        document.getElementById("lblErrorMsg_Rules_" + ruleId).scrollIntoView(true);
    },

    ///........ Methods for Get Rules .........
    GetRules: function (sRuleId) {
        debugger;
        var Rule = {};
        var arrRuleBody = [];
        //if (document.getElementById("newRuleTab_div_" + sRuleId).style.display == "none") {
        //    return null;
        //}
        try {
            if (!($("#chkListApplyOn_" + sRuleId + " input[type='checkbox']:checked").length > 0)) {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgatleastoneApplyOnEventshouldapply"));
                //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgatleastoneApplyOnEventshouldapply")); //  "Atleast one ApplyOn Event should apply."
                return false;
            }
            if (!($("#chkListEvaluateOn_" + sRuleId + " input[type='checkbox']:checked").length > 0)) {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgatleastoneEvaluteOnEventshouldapply"));
                //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgatleastoneEvaluteOnEventshouldapply")); //  "At least one EvaluteOn Event should apply."
                return false;
            }

            //debugger;
            var withNoCondition = document.getElementById("chkNoRuleCondition_" + sRuleId).checked;
            //IF CONDITION
            var arrConditionIF = [];
            if (!withNoCondition) {
                arrConditionIF = RULECONDITIONS.GetRuleConditions(sRuleId, 1);
            }
            else {
                arrConditionIF = [];
            }
            if (arrConditionIF != undefined && arrConditionIF.length <= 0 && !withNoCondition) {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); //  "Please complete the Rule."
                return false;
            }
            var arrFormattingIF = RULECONDITIONS.GetFormatingDetails(sRuleId, true);
            ////debugger;
            if (arrFormattingIF.length <= 0 && $("#txtGeneralMsg_RuleIfMsg_" + sRuleId).val().trim() == "") {
                COMMON.prototype.showMessage("Please Enter Message or  Format for the Rule of IF Tab", RULECONDITIONS.GetResourceMessage("lbRule"));
                //RULECONDITIONS.ShowErrorMessage(sRuleId, "Please Enter Message or  Format for the Rule ", RULECONDITIONS.GetResourceMessage("lbRule")); // "Please complete the Rule."
                return false;
            }
            var arrAlertBodyIF = RULECONDITIONS.GetAlertDetails(sRuleId, true);
            var ruleConditions = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
            var RuleConditionId = 0;
            if (!withNoCondition) {
                RuleConditionId = arrConditionIF[0] == undefined ? 0 : arrConditionIF[0].RuleCondtionId;
            }
            else {
                RuleConditionId = $("#hdnConditionId_" + sRuleId).val();
            }
            var ruleBodyIF = {
                AlertMessage: $("#txtAlertMsg_RuleIfAlert_" + sRuleId).val().trim(),
                GeneralMessage: $("#txtGeneralMsg_RuleIfMsg_" + sRuleId).val().trim(),
                MessageType: $("#lstRdoMessageType_RuleIF_" + sRuleId + " input[type='radio']:checked").val(),
                RuleConditionId: RuleConditionId,
                RuleAlertBody: arrAlertBodyIF,
                RuleCondition: arrConditionIF,
                RuleFormatting: arrFormattingIF,
            }
            arrRuleBody.push(ruleBodyIF);

            ////debugger;
            //ELSEIF CONDITION
            var DynamicConditionTabsLength = $(".ELSE_IF-DynamicTab_" + sRuleId).length;
            if (DynamicConditionTabsLength > 0) {
                for (var i = 1; i <= DynamicConditionTabsLength; i++) {
                    var arrConditionELSEIF;
                    var currentTab = i + 1;
                    if (!withNoCondition) {
                        arrConditionELSEIF = RULECONDITIONS.GetRuleConditions(sRuleId, currentTab);
                    }
                    else {
                        arrConditionELSEIF = [];
                    }
                    if (arrConditionELSEIF != undefined && arrConditionELSEIF.length <= 0 && !withNoCondition) {
                        COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")+ " ");
                        //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); //  "Please complete the Rule."
                        return false;
                    }


                    if (!withNoCondition) {
                        var arrFormattingELSEIF = RULECONDITIONS.GetFormatingDetails_ELSEIF(sRuleId, currentTab);
                        ////debugger;
                        if (arrFormattingELSEIF.length <= 0 && $("#txtGeneralMsg_RuleELSEIFMsg_" + sRuleId + "_" + currentTab).val().trim() == "") {
                            COMMON.prototype.showMessage("Please Enter Message or  Format for the Rule of ELSE IF Tab", RULECONDITIONS.GetResourceMessage("lbRule"));
                            //RULECONDITIONS.ShowErrorMessage(sRuleId, "Please Enter Message or  Format for the Rule ", RULECONDITIONS.GetResourceMessage("lbRule")); // "Please complete the Rule."
                            return false;
                        }
                        //if (arrFormattingELSEIF.length <= 0 && $("#txtGeneralMsg_RuleELSEIFMsg_" + sRuleId + "_" + currentTab).val().trim() == "") {
                        //    COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule"));
                        //    //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgPleasecompletetheRule")); // "Please complete the Rule."
                        //    return false;
                        //}
                        var arrAlertBodyELSEIF = RULECONDITIONS.GetAlertDetails_ELSEIF(sRuleId, currentTab);
                        var ruleConditions = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
                        var ruleBodyELSEIF = {
                            AlertMessage: $("#txtAlertMsg_RuleELSEIFAlert_" + sRuleId + "_" + currentTab).val().trim(),
                            GeneralMessage: $("#txtGeneralMsg_RuleELSEIFMsg_" + sRuleId + "_" + currentTab).val().trim(),
                            MessageType: $("#lstRdoMessageType_RuleELSEIF_" + sRuleId + "_" + currentTab + " input[type='radio']:checked").val(),
                            RuleConditionId: arrConditionELSEIF[0].RuleCondtionId,
                            RuleAlertBody: arrAlertBodyELSEIF,
                            RuleCondition: arrConditionELSEIF,
                            RuleFormatting: arrFormattingELSEIF,
                        }
                        arrRuleBody.push(ruleBodyELSEIF);
                    }
                }
            }


            if (!withNoCondition) {
                //ELSE CONDITION
                var arrAlertBodyElse = RULECONDITIONS.GetAlertDetails(sRuleId, false);
                var arrFormattingElse = RULECONDITIONS.GetFormatingDetails(sRuleId, false);
                if (arrFormattingElse.length <= 0 && $("#txtGeneralMsg_RuleElseMsg_" + sRuleId).val().trim() == "") {
                    COMMON.prototype.showMessage("Please Enter Message or  Format for the Rule of ELSE Tab", RULECONDITIONS.GetResourceMessage("lbRule"));
                    //RULECONDITIONS.ShowErrorMessage(sRuleId, "Please Enter Message or  Format for the Rule ", RULECONDITIONS.GetResourceMessage("lbRule")); // "Please complete the Rule."
                    return false;
                }
                var iRuleConditionId_ELSE = document.getElementById("txtRuleConditionId_Else_" + sRuleId).value.trim();
                var ruleBodyElse = {
                    AlertMessage: $("#txtAlertMsg_RuleElseAlert_" + sRuleId).val().trim(),
                    GeneralMessage: $("#txtGeneralMsg_RuleElseMsg_" + sRuleId).val().trim(),
                    MessageType: $("#lstRdoMessageType_RuleElse_" + sRuleId + " input[type='radio']:checked").val(),
                    RuleConditionId: iRuleConditionId_ELSE == undefined ? 0 : iRuleConditionId_ELSE,
                    RuleAlertBody: arrAlertBodyElse,
                    RuleFormatting: arrFormattingElse,
                }
                arrRuleBody.push(ruleBodyElse);
            }

            var ruleLinkType = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
            ruleLinkType = ruleLinkType.dataset.linktype;
            Rule = {
                RuleId: OPTIONCONTROL.getControlValue("txtFormRuleName_" + sRuleId),
                RuleName: OPTIONCONTROL.getControlText("txtFormRuleName_" + sRuleId),
                RuleFieldName: "",
                LinkType: ruleLinkType,
                DoNotCheckCondition: withNoCondition,
                CreateGroup: document.getElementById("chkCreatingGroup_Rule_" + sRuleId).checked,
                Edit: document.getElementById("chkEdit_Rule_" + sRuleId).checked,
                NewRecord: document.getElementById("chkNewRecord_Rule_" + sRuleId).checked,
                Load: document.getElementById("chkLoad_Rule_" + sRuleId).checked,
                onEnter: document.getElementById("chkOnEnter_Rule_" + sRuleId).checked,
                onLeave: document.getElementById("chkOnLeave_Rule_" + sRuleId).checked,
                BeforeSave: document.getElementById("chkBeforeSave_Rule_" + sRuleId).checked,
                BeforeDelete: document.getElementById("chkBeforeDelete_Rule_" + sRuleId).checked,
                RuleBody: arrRuleBody,
                IsRuleActive: document.getElementById("chkIsRuleActive_Rule_" + sRuleId).checked,
                DeletedRuleConditions: m_DeletedRuleConditions
            }
            return Rule;
        } catch (e) {
            return null;
        }
    },

    SaveRuleDetails: function (sRuleId, bClear) {
        debugger;
        if (OPTIONCONTROL.getControlText("txtFormRuleName_" + sRuleId) != "") {
            if (isNaN(OPTIONCONTROL.getControlText("txtFormRuleName_" + sRuleId))) {
                FGRIDCONTROL.update("tblFormating_IF_Rule_" + sRuleId);
                FGRIDCONTROL.update("tblFormating_Else_Rule_" + sRuleId);
                var conditionLength = document.querySelectorAll(".ELSE_IF-DynamicTab_" + sRuleId).length;
                for (var i = 1; i <= conditionLength; i++) {
                    var tblIdNo = i + 1;
                    FGRIDCONTROL.update("tblFormating_ELSEIF_Rule_" + sRuleId + "_" + tblIdNo);
                }
                var ruleData = RULECONDITIONS.GetRules(sRuleId);
                if (ruleData == false) {
                    return false;
                }
                else {
                    m_FldRules = ruleData;
                }
                var ruleLinkId = document.getElementById("sRuleIdAndConditionNo_Rules_" + sRuleId);
                var LinkTypeId = ruleLinkId.dataset.linktypeid;
                var urlPath = GLOBAL.getContextPath("SaveRule", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { objRule: ruleData, iLinkTypeId: LinkTypeId, objCustomFontClass: objCustomFontClass }, "JSON", true, "RULECONDITIONS.SaveRuleResult", "", "", sRuleId, bClear);
            }
            else {
                COMMON.prototype.showMessage("Rule name should not be numeric");
                return false;
            }
        }
        else {
            COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
            //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded")); //  "Enter the Rule Name, if Rule Added."
            return false;
        }
    },

    SaveRuleResult: function (bSuccess, data, sRuleId, bClear) {
        debugger;
        objCustomFontClass = {
            arrFontData_IF: [],
            arrFontData_ELSE: [],
            arrFontData_ELSEIF: []
        };
        if (bSuccess && data != "") {
            COMMON.prototype.showMessage(data);
            //RULECONDITIONS.ShowErrorMessage(sRuleId, data, "green");
            if (bClear != false) {
                //debugger;
                OPTIONCONTROL.clear("txtFormRuleName_" + sRuleId, false);
                RULECONDITIONS.NewRuleDetails(sRuleId);
                //RULECONDITIONS.ClearRuleDetails(sRuleId);
            }
            return false;
        }
        else {
            COMMON.prototype.showMessage("Error on saving Rule.");
            //RULECONDITIONS.ShowErrorMessage(sRuleId, "Error on saving Rule.");
            return false;
        }
    },
    WarnToDeleteRule: function (sRuleId) {
        if (RULECONDITIONS.GetSelectedRuleId(sRuleId) > 0) {
            $("#DeleteRule_Modal_" + sRuleId).modal('show');
        }
        else
            COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
        //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
        return false;
    },
    DeleteRule: function (sRuleId) {
        if (sRuleId != "" && sRuleId != undefined) {
            var RuleId = RULECONDITIONS.GetSelectedRuleId(sRuleId);
            if (RuleId > 0) {
                var urlPath = GLOBAL.getContextPath("DeleteRule", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iRuleId: RuleId }, "JSON", true, "RULECONDITIONS.DeletedRuleResult", "", "", sRuleId);
            }
            else {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("msgEntertheRuleNameifRuleAdded"));
                return false;
            }
        }
    },
    DeletedRuleResult: function (bSuccess, data, sRuleId) {
        debugger;
        m_FldRules = [];
        $("#DeleteRule_Modal_" + sRuleId).modal('hide');
        if (bSuccess && data != "") {
            if (parseInt(data) != NaN) {
                COMMON.prototype.showMessage(RULECONDITIONS.GetResourceMessage("lbRule") + " " + RULECONDITIONS.GetResourceMessage("msgDeleteSuccess"));
                //RULECONDITIONS.ShowErrorMessage(sRuleId, RULECONDITIONS.GetResourceMessage("lbRule") + " " + RULECONDITIONS.GetResourceMessage("msgDeleteSuccess"));
                OPTIONCONTROL.clear("txtFormRuleName_" + sRuleId); 
                RULECONDITIONS.NewRuleDetails(sRuleId)
                return false;
            }
            else
                COMMON.prototype.showMessage(data);
            //RULECONDITIONS.ShowErrorMessage(sRuleId, data);
            return false;
        }
        else
            COMMON.prototype.showMessage(data);
        //RULECONDITIONS.ShowErrorMessage(sRuleId, data);
        return false;
    },


    //// Old Rules Methods
    ShowFieldsList_Formating: function (ele) {
        ////debugger;
        var $this = $(ele);
        var tblName = ele.parentElement.parentElement.parentElement.id;
        var trCount = $("#" + tblName + " tbody tr").length;
        var currentTrIndex = $this.parent().index() + 1;
        if (trCount == currentTrIndex) {
            $("#" + tblName + " tbody:last").
                append("<tr>" +
                    "<td ondblclick='FORMCUSTOMIZATION.ShowFieldsList_Formating(this);'><input type='text' class='form-control clsShow-control' data-id='' readonly /></td>" +
                    "<td ondblclick='FORMCUSTOMIZATION.ShowChangeValues(this);'><input type='text' class='form-control clsShow-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' /><input type='text' class='form-control clsHide-control' readonly /></td>" +
                    "<td><input type='checkbox' class='' readonly /></td>" +
                    "<td><input type='checkbox' class='' /></td>" +
                    "<td><input type='checkbox' class='' /></td>" +
                    "<td><input type='checkbox' class='' /></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly />" +
                        "<select class='custom-select clsHide-control'>" +
                        "<option value='0'>None</option>" +
                        "<option value='1'>Left</option>" +
                        "<option value='2'>Right</option>" +
                        "<option value='3'>Center</option>" +
                        "</select></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly />" +
                        "<select class='custom-select clsHide-control'>" +
                        "<option value='0'>None</option>" +
                        "<option value='1'>Upper</option>" +
                        "<option value='2'>Lower</option>" +
                        "<option value='3'>Proper</option>" +
                        "<option value='4'>Sentence</option>" +
                        "</select></td>" +
                    "<td><input type='text' class='form-control clsShow-control' readonly /><input type='button' class='Fbutton clsHide-control' readonly value='Font' /></td>" +
                    "</tr>");
        }
        //////debugger;
        var txtInput = $this.find('input').attr('data-id');
        if (txtInput != "" || txtInput != undefined) {
            $("#FieldsDetails_OptionNames_RuleTab").val(txtInput)
        }
        else {
            $("#FieldsDetails_OptionNames_RuleTab").val($("#FieldsDetails_OptionNames_RuleTab option:first").val());
        }

        var ddlFields = $("#FieldsDetails_OptionNames_RuleTab");
        $this.append(ddlFields);
        $this.find('input')[0].style.display = "none";
        var ddl = $this.find('select')[0];
        ddl.style.display = "block";
        ddl.focus();
    },
    ChangeField_Formating: function (ele) {
        var ddlSelectedOption = $(ele).find('option:selected');
        var ddlText = ddlSelectedOption[0].innerHTML;
        var ddlVal = ddlSelectedOption[0].value;
        var txtField = $(ele).parent().find('input');
        txtField[0].value = ddlText;
        txtField[0].id = ddlVal
        txtField[0].style.display = "block";
        ele.style.display = "none";
    },
    ShowChangeValues: function (ele) {
        ele.children[0].style.display = "none";
        var ddlOperators = document.getElementById('ddlChangeValue_FieldsOption');
        ele.appendChild(ddlOperators);
        ddlOperators.style.display = "block";
        ddlOperators.focus();
    },
    showCompareOption: function (ele) {
        RULECONDITIONS.showField(ele);
        //ele.style.display = "none";
        //ele.nextElementSibling.style.display = "block";
        //ele.nextElementSibling.focus();
    },
    hideCompareOption: function (ele) {
        ////debugger;
        RULECONDITIONS.hideField(ele);
        //ele.previousElementSibling.innerHTML = ele.options[ele.selectedIndex].text;
        //ele.style.display = "none";
        //ele.previousElementSibling.style.display = "block";
    },
    showField: function (ele) {
        ele.style.display = "none";
        ele.nextElementSibling.style.display = "block";
        ele.nextElementSibling.focus();
    },
    hideField: function (ele) {
        ele.previousElementSibling.innerHTML = ele.options[ele.selectedIndex].text;
        ele.style.display = "none";
        ele.previousElementSibling.style.display = "block";
    },
    showInputForBracket: function (ele) {
        //////debugger;
        ele.nextElementSibling.value = ele.innerHTML;
        FORMCUSTOMIZATION.showField(ele);
    },
    hideInputOnBlur: function (ele, typeOfBracket) {
        //////debugger;
        if (ele.value.trim() != "") {
            ele.style.display = "none";
            ele.previousElementSibling.innerHTML = ele.value.trim();
            ele.previousElementSibling.style.display = "block";
        }
        else {
            if (typeOfBracket == "open") {
                alert("Opening Bracket cannot be leave empty.");
            }
            else {
                alert("Closing Bracket cannot be leave empty.");
            }
            ele.focus();
        }
    },
    showFieldsListForCondition: function (ele) {
        ele.style.display = "none";
        var ddlFieldsDetails = document.getElementById('FieldsDetails_OptionNames_RuleTab');
        ele.parentElement.appendChild(ddlFieldsDetails);
        ddlFieldsDetails.style.display = "block";
        ddlFieldsDetails.focus();
    },
    showOperatorsForCondition: function (ele) {
        ////debugger;
        ele.style.display = "none";
        var ddlOperators = document.getElementById('ddlOperatorsForRule');
        ele.parentElement.appendChild(ddlOperators);
        ddlOperators.style.display = "block";
        ddlOperators.focus();
    },
    hideOperatorOnBlur: function (ele) {
        ////debugger;
        FORMCUSTOMIZATION.hideField(ele);
        //var selectedOpt = $("#" + ele.id + " option:selected");
        //ele.previousElementSibling.innerHTML = selectedOpt[0].innerHTML;

        //ele.previousElementSibling.innerHTML = ele.options[ele.selectedIndex].text;
        //ele.style.display = "none";
        //ele.previousElementSibling.style.display = "block";
    },
    showComparingFields: function (ele) {
        ////debugger;
        FORMCUSTOMIZATION.showField(ele);
        //ele.style.display = "none";
        //ele.nextElementSibling.style.display = "block";
        //ele.nextElementSibling.focus();
    },
    hideComparingFields: function (ele) {
        ////debugger;
        if (ele.tagName == "SELECT") {
            ele.previousElementSibling.innerHTML = ele.options[ele.selectedIndex].text;
        }
        else if (ele.tagName == "INPUT") {
            if (ele.value.trim() != "") {
                ele.previousElementSibling.innerHTML = ele.value.trim();
            }
            else {
                alert("Value cannot be leave empty.");
            }
        }
        ele.style.display = "none";
        ele.previousElementSibling.style.display = "block";
    },
    showConjunction: function (ele) {
        FORMCUSTOMIZATION.showField(ele);
        //ele.style.display = "none";
        //ele.nextElementSibling.style.display = "block";
        //ele.nextElementSibling.focus();
    },
    hideConjunctionOnBlur: function (ele) {
        ////debugger;
        FORMCUSTOMIZATION.hideField(ele);
        //var selectedOpt = $("#" + ele.id + " option:selected");
        //ele.previousElementSibling.innerHTML = selectedOpt[0].innerHTML;

        //ele.previousElementSibling.innerHTML = ele.options[ele.selectedIndex].text;
        //ele.style.display = "none";
        //ele.previousElementSibling.style.display = "block";

    },
    changeByConjuntion: function (ele) {
        var conjnVal = ele.options[ele.selectedIndex].value;
        if (conjnVal != 0) {
            ele.parentElement.nextElementSibling.style.display = "inline-block";
        }
        else {
            ele.parentElement.nextElementSibling.style.display = "none";
        }
    },

    saveFontControlData_IF: function (ele) {
        ////debugger;
        var objCell = FGRIDCONTROL.getCellObject("tblFormating_IF_Rule_FormRules", selectedRow, selectedColumn);
        var fontControlData = FONTDIALOG.getFontData("ctrlFontControl_IF");
        var fontByteArray = [];
        var urlPath = GLOBAL.getContextPath("FontClassObjectToByteArray", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { objFontClass: fontControlData }, "JSON", false);
        ////debugger;
        if (fnResult.lValue == 1) {
            fontByteArray = fnResult.data;
        }
        objCell.setCellData('data-fontarray', fontByteArray);
        objCell.setCellData('data-for', JSON.stringify(fontControlData));
        $($(objCell)[0].cell).find('button').attr('data-fontarray', fontByteArray);
        $($(objCell)[0].cell).find('button').attr('data-for', JSON.stringify(fontControlData));
        objCell.setCellData('value', JSON.stringify(fontControlData.FontFamily));
        objCell.setCellData('text', JSON.stringify(fontControlData.FontFamily));
    },

    saveFontControlData_ELSE: function (ele) {
        ////debugger;
        var objCellObject = FGRIDCONTROL.getCellObject("tblFormating_Else_Rule_FormRules", selectedRow, selectedColumn);
        var fontControlData = FONTDIALOG.getFontData("ctrlFontControl_ELSE");
        var fontByteArray = [];
        var urlPath = GLOBAL.getContextPath("FontClassObjectToByteArray", "FormCustomization", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { objFontClass: fontControlData }, "JSON", false);
        ////debugger;
        if (fnResult.lValue == 1) {
            fontByteArray = fnResult.data;
        }
        objCellObject.setCellData('data-fontarray', fontByteArray);
        objCellObject.setCellData('data-for', JSON.stringify(fontControlData));
        $($(objCellObject)[0].cell).find('button').attr('data-for', JSON.stringify(fontControlData));
        objCellObject.setCellData('value', JSON.stringify(fontControlData.FontFamily));
        objCellObject.setCellData('text', JSON.stringify(fontControlData.FontFamily));
    },

    getEmailTemplate_IF: function () {
        //debugger;
        try {
            var arrFormFields = [];
            var HeaderGroup = [];
            var VoucherType = $("#id_doccustomization_selectedvouchertype").val() == undefined ? 0 : $("#id_doccustomization_selectedvouchertype").val();
            var url = GLOBAL.getContextPath("InitializeTemplateLayout", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(url, true, { arrFormFields: arrFormFields, iVoucherType : VoucherType }, "JSON", false);
            if (fnResult.lValue == 1) {
                HeaderGroup = fnResult.data;
            }
            result = NETWORK.executeServerMethod(
                                              GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                             true,
                                              { iVoucherType: 1001, HeaderGroup: HeaderGroup },
                                             "",
                                             true,
                                             "RULECONDITIONS.getEmailTemplate_IFSuccess",
                                             "GLOBAL.LoadingStart",
                                             "GLOBAL.LoadingEnd"
                         );
        } catch (e) {

        }
    },
    getEmailTemplate_IFSuccess: function (bSuccess, html) {
        ////debugger;
        if (bSuccess == true) {
            RULECONDITIONS.opencloseEmailTemplate("EMailTemplateModal_IF");
            $("#dvEMailTemplateModal_IF").html(html);
            $("#EMailTemplateModal_IF").modal('show');
            $("#EMailTemplateModal_IF").css({ 'display': 'block' });
            //$("#EMailTemplateModal_IF").modal({ backdrop: 'static' }, "show");
            document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "RULECONDITIONS.closeEmailTemplate_IF('EMailTemplateModal_IF')");
        }
    },
    closeEmailTemplate_IF: function (id) {
        ////debugger;
        $('#' + id).modal('hide');
        $('#' + id).css({ 'display': 'none' });
    },

    getEmailTemplate_ELSEIF: function (ele) {
        ////debugger;
        try {
            var CondationData = {
                sRuleId: ele.dataset.sruleid,
                iConditionNo: ele.dataset.inewconditionno
            }
            var arrFormFields = [];
            var HeaderGroup = [];
            var VoucherType = $("#id_doccustomization_selectedvouchertype").val() == undefined ? 0 : $("#id_doccustomization_selectedvouchertype").val();
            var url = GLOBAL.getContextPath("InitializeTemplateLayout", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(url, true, { arrFormFields: arrFormFields, iVoucherType: VoucherType }, "JSON", false);
            if (fnResult.lValue == 1) {
                HeaderGroup = fnResult.data;
            }
            result = NETWORK.executeServerMethod(
                                              GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                             true,
                                              { iVoucherType: 1001, HeaderGroup: HeaderGroup },
                                             "",
                                             true,
                                             "RULECONDITIONS.getEmailTemplate_ELSEIFSuccess",
                                             "GLOBAL.LoadingStart",
                                             "GLOBAL.LoadingEnd", CondationData
                         );
        } catch (e) {

        }
    },
    getEmailTemplate_ELSEIFSuccess: function (bSuccess, html, CondationData) {
        ////debugger;
        if (bSuccess == true) {
            RULECONDITIONS.opencloseEmailTemplate("EMailTemplateModal_ELSEIF_" + CondationData.sRuleId + "_" + CondationData.iConditionNo + "");
            $("#dvEMailTemplateModal_ELSEIF_" + CondationData.sRuleId + "_" + CondationData.iConditionNo + "").html(html);
            //$("#EMailTemplateModal_ELSEIF_" + CondationData.sRuleId + "_" + CondationData.iConditionNo + "").modal({ backdrop: 'static' }, "show");
            $("#EMailTemplateModal_ELSEIF_" + CondationData.sRuleId + "_" + CondationData.iConditionNo + "").modal('show');
            $("#EMailTemplateModal_ELSEIF_" + CondationData.sRuleId + "_" + CondationData.iConditionNo + "").css({ 'display': 'block' });
            document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "RULECONDITIONS.closeEmailTemplate_ELSEIF('EMailTemplateModal_ELSEIF_" + CondationData.sRuleId + "_" + CondationData.iConditionNo + "')");
        }
    },
    closeEmailTemplate_ELSEIF: function (id) {
        ////debugger;
        $('#' + id).modal('hide');
        $('#' + id).css({ 'display': 'none' });
    },

    getEmailTemplate_ELSE: function () {
        ////debugger;
        try {
            var arrFormFields = [];
            var HeaderGroup = [];
            var VoucherType = $("#id_doccustomization_selectedvouchertype").val() == undefined ? 0 : $("#id_doccustomization_selectedvouchertype").val();
            var url = GLOBAL.getContextPath("InitializeTemplateLayout", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(url, true, { arrFormFields: arrFormFields, iVoucherType: VoucherType }, "JSON", false);
            if (fnResult.lValue == 1) {
                HeaderGroup = fnResult.data;
            }
            result = NETWORK.executeServerMethod(
                                              GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                             true,
                                              { iVoucherType: 1001, HeaderGroup: HeaderGroup },
                                             "",
                                             true,
                                             "RULECONDITIONS.getEmailTemplate_ELSESuccess",
                                             "GLOBAL.LoadingStart",
                                             "GLOBAL.LoadingEnd"
                         );
        } catch (e) {

        }
    },
    getEmailTemplate_ELSESuccess: function (bSuccess, html) {
        ////debugger;
        if (bSuccess == true) {
            RULECONDITIONS.opencloseEmailTemplate("EMailTemplateModal_ELSE");
            $("#dvEMailTemplateModal_ELSE").html(html);
            //$("#EMailTemplateModal_ELSE").modal({ backdrop: 'static' }, "show");
            $("#EMailTemplateModal_ELSE").modal('show');
            $("#EMailTemplateModal_ELSE").css({ 'display': 'block' });
            document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "RULECONDITIONS.closeEmailTemplate_ELSE('EMailTemplateModal_ELSE')");
        }
    },
    closeEmailTemplate_ELSE: function (id) {
        ////debugger;
        $('#' + id).modal('hide');
        $('#' + id).css({ 'display': 'none' });
    },
    opencloseEmailTemplate: function (id) {
        ////debugger;
        var count = 0;
        //Open & Close the modal when open more than one modal
        $("#" + id + "")
        $('#' + id).on('show.bs.modal shown.bs.modal hide.bs.modal hidden.bs.modal', function (e) {
            if (e.type == "hide") {
                count++;
                return count != 1 ? false : true;
            }
            if (e.type == "shown") {
                document.getElementById("InvoiceDesignMainDiv").style.height = "450px";
                document.getElementById("InvoiceDesignFields").style.height = "465px";
                document.getElementById("InvoiceDesignFieldProperties").style.height = "465px";
                document.getElementById("id_PrintPreview").style.height = "465px";
            }
            count = 0;
        });
    },

    /***************************SMS TEMPLATE LOADING*********************************/
    getSMSTemplate: function (ele) {
        debugger
        var formTypeId = FORMCUSTOMIZATION.GetFormTypeId();
        var arrTemp = [];
        arrTemp.push(formTypeId, '');
        SMSTEMPLATE.CreateControl('Addreminder_SMSTemplate', 'divSMSCustomization', ScreenId, arrTemp)
    },
    /*************************************************************************/

    //************Rule IF, ELSE_IF,ELSE tab FormatingGrid ContextMenu****************// 

    toggleFormatingGrid_EntryMore: function (ele, evt) {
        //debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {toggleFormatingGrid_EntryMore} " + err.message, "red");
        }
    },

    onFormatingGrid_RightClick: function (obj, evt) {
        debugger;

        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;
        var GridID = obj.Grid.id;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "FormRuleMenu_" + GridID);

            eleMenu = document.getElementById("FormRuleMenu_" + GridID);

            document.getElementById("FormRuleMenu_" + GridID).style.display = "block";

            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "RULECONDITIONS.FormatingGrid_onInsertRow(" + obj.iRow + ", event, " + obj.Grid.id + ");");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(RULECONDITIONS.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            //for SelectRow
            bSelect = false;
            if (RULECONDITIONS.FormatingGrid_isRowSelected(obj.iRow, obj.Grid.id) == false) {
                bSelect = true;
            }

            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "RULECONDITIONS.FormatingGrid_onSelectRow(" + obj.iRow + ", " + bSelect + ", event, " + obj.Grid.id + ");");//#          
            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";

            if (bSelect == true) {
                $(eleLabel).text(RULECONDITIONS.GetResourceMessage("lblSelectRow"));
            }
            else {
                $(eleLabel).text(RULECONDITIONS.GetResourceMessage("lblUnselectRow"));
            }

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "RULECONDITIONS.FormatingGrid_onDeleteRow(" + obj.iRow + ", event, " + obj.Grid.id + ");");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(RULECONDITIONS.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            RULECONDITIONS.toggleFormatingGrid_EntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();
            if (FCommon.UI.isValidObject($("#FormCustomizingTabList")[0]) == true) {
                var isOpendFromForm = $("#FormCustomizingTabList")[0].dataset.showclosebutton;
            }

            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                 if (isOpendFromForm == "True") {
                    eleMenu.style.left = (rectContainer.left - 506) + "px";
                } else {
                    eleMenu.style.left = (rectContainer.left - 73) + "px";
                }
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            if (isOpendFromForm == "True") {
                eleMenu.style.top = (rectContainer.top - 100) + "px";
            } else {
                eleMenu.style.top = (rectContainer.top - 200) + "px";
            }

        }
        catch (err) {
            COMMON.prototype.showAlert("{RULECONDITIONS.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    FormatingGrid_isRowSelected: function (iRow, sGridId) {
        //debugger;
        var bSelected = false;
        var eleRow = null;
        eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
        if (FCommon.UI.isValidObject(eleRow) == true) {
            if ($(eleRow).hasClass("FormSelectedRowColor") == true) {
                bSelected = true;
            }
        }
        return (bSelected);
    },

    FormatingGrid_onDeleteRow: function (iRow, event, sGridId) {
        ////debugger;
        if (confirm(RULECONDITIONS.GetResourceMessage("ConfirmToDeleteRow"))) {
            FCommon.UI.stopKeyProcess(event);
            if (RULECONDITIONS.FormatingGrid_getTotalRows(sGridId.id) == 1) {
                COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");
                return;
            }
            FGRIDCONTROL.update(sGridId.id);
            FGRIDCONTROL.deleteRows(sGridId.id, iRow, 1);
            RULECONDITIONS.resizeGridColumnsWidth();
        }
    },

    FormatingGrid_onSelectRow: function (iRow, bSelect, event, sGridId) {
        ////debugger;
        var eleRow = null;
        try {
            FCommon.UI.stopKeyProcess(event);
            eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
            if (bSelect == true) {
                $(eleRow).addClass("FormSelectedRowColor");
            }
            else {
                $(eleRow).removeClass("FormSelectedRowColor");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    FormatingGrid_onInsertRow: function (iRow, event, sGridId) {
        ////debugger;
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update(sGridId);
            FGRIDCONTROL.insertRows(sGridId, iRow, 1);
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    FormatingGrid_getTotalRows: function (sGridId) {
        ////debugger;
        return document.getElementById('' + sGridId + '_body').rows.length;
    },

    //************End Rule FormatingGrid ContextMenu****************//



    onSerialNoHover: function (obj, event) {
        var sControl = "";
        var sContent = "";
        var bSelect = true;
        if (obj.bEnter == true) {
            FCommon.UI.setText(obj.Cell, "");
            obj.Cell.style.paddingLeft = "";
            sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
            sControl += obj.iRow;
            sControl += "</div>";
            $(obj.Cell).html(sControl);
            sContent = "<table>";
            sContent += "<tbody class='grid_row_menu'>";
            bSelect = false;
            if (RULECONDITIONS.isRowSelected(obj.iRow, obj.Grid.id) == false) {
                bSelect = true;
            }
            sContent += "<tr class='highlightPopUpItems' onclick='RULECONDITIONS.onSelectRow(" + obj.iRow + ", " + bSelect + ", event, " + obj.Grid.id + ");' style='cursor: pointer;'>";
            if (bSelect == true) {
                sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
                sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + RULECONDITIONS.GetResourceMessage("lblSelectRow") + "</div></td>";
            }
            else {
                sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
                sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + RULECONDITIONS.GetResourceMessage("lblUnselectRow") + "</div></td>";
            }
            sContent += "</tr>";
            sContent += "<tr class='highlightPopUpItems' onclick='RULECONDITIONS.onDeleteRow(" + obj.iRow + ", event, " + obj.Grid.id + ");' data-toggle='tooltip' title='Delete Current Row' style='cursor: pointer;'>";
            sContent += "<td><span class='icon-delete icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + RULECONDITIONS.GetResourceMessage("lblDeleteRow") + "</div></td>";
            sContent += "</tr>";
            sContent += "<tr class='highlightPopUpItems' onclick='RULECONDITIONS.onInsertRow(" + obj.iRow + ", event, " + obj.Grid.id + ");' data-toggle='tooltip' title='Add Row Above' style='cursor: pointer;'>";
            sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;" + RULECONDITIONS.GetResourceMessage("lblInsertRow") + "</div></td>";
            sContent += "</tr>";
            sContent += "</tbody>";
            sContent += "</table>";
            $("#id_row_popup").popover({
                type: "tooltip",
                trigger: "manual",
                placement: $("#hdnLanguageId").val() == "0" ? "right" : "left",
                html: true,
                content: sContent
            });
            $("#id_row_popup").popover('show');
        }
        else {
            $("#id_row_popup").popover('destroy');

            FCommon.UI.removeChildren(obj.Cell);
            FCommon.UI.setText(obj.Cell, obj.iRow);
            obj.Cell.style.paddingLeft = "3px;";
        }
    },

    isRowSelected: function (iRow, sGridId) {
        var bSelected = false;
        var eleRow = null;
        eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
        if (FCommon.UI.isValidObject(eleRow) == true) {
            if (FCommon.String.isNullOrEmpty(eleRow.style.backgroundColor, true) == false) {
                bSelected = true;
            }
        }
        return (bSelected);
    },

    onDeleteRow: function (iRow, event, sGridId) {
        ////debugger;
        if (confirm(RULECONDITIONS.GetResourceMessage("ConfirmToDeleteRow"))) {
            FCommon.UI.stopKeyProcess(event);
            if (RULECONDITIONS.getTotalRows(sGridId.id) == 1) {
                COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");
                return;
            }
            FGRIDCONTROL.update(sGridId.id);
            FGRIDCONTROL.deleteRows(sGridId.id, iRow, 1);
            RULECONDITIONS.resizeGridColumnsWidth();
        }
    },

    onSelectRow: function (iRow, bSelect, event, sGridId) {
        ////debugger;
        var eleRow = null;
        try {
            FCommon.UI.stopKeyProcess(event);
            eleRow = FGRIDCONTROL.getRowElement(sGridId, iRow);
            if (bSelect == true) {
                eleRow.style.backgroundColor = "rgb(222, 245, 253)";
            }
            else {
                eleRow.style.backgroundColor = "";
            }
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    onInsertRow: function (iRow, event, sGridId) {
        ////debugger;
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update(sGridId);
            FGRIDCONTROL.insertRows(sGridId, iRow, 1);
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    getTotalRows: function (sGridId) {
        ////debugger;
        return document.getElementById('' + sGridId + '_body').rows.length;
    },

    resizeGridColumnsWidth: function () {
        for (var counter = 1; counter < 5; counter++) {
            var cellobject = FGRIDCONTROL.getCellObject(sGridId, 1, counter);
            $($('#' + sGridId).find('th')[counter]).css('width', '25%');
            $($($('#' + sGridId + '_body').find('tr')[0]).find('td')[counter]).css({ "max-width": "", "width": "25%" });
            if (counter < 4) {
                if ($("#hdnLanguageId").val() == "0") {
                    $($('#' + sGridId).find('th')[counter - 1]).css({ 'border-right-color': 'red' });
                }
                else {
                    $($('#' + sGridId).find('th')[counter - 1]).css({ 'border-left-color': 'red' });
                }
            }
        }
    }
}

;
/* ExternalModule.js
 * Implementation:- 22-06-2016
 *
 * By:- Tarun Kumar Dewangan
 * License:- Focussoftnet pvt. ltd. 
 */

var ExternalModule_ResourceMsgs;
var rowNo = -1;
var arrexternalmodule;
var m_MasterViewData;
var m_sMappingGridId = "";
var m_arrFormsExMapping = [];
var isedit = false;
var hdnModuleId =-1;
var SuffixName;
var Form_ExternalModule = {
    cellChange: function (cellobj, event) {
        //////debugger
        if (cellobj.bLeave == true) {
            return (Form_ExternalModule.onLeave(cellobj, event));
        }
        else {
            Form_ExternalModule.onEnter(cellobj, event);
        }
    },
    onEnter: function (cellobj, event) {
        //debugger
        var element = null;
        var iValue = 0;
        var data = null;
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
        var MasterName = OPTIONCONTROL.getControlValue("id_MasterName");
        var formName = OPTIONCONTROL.getControlValue("id_FormName");
        var DocName = OPTIONCONTROL.getControlValue("Id_DocumentName");
        if ((MasterName > 0 && MasterName != null) || (formName > 0 && formName != null)||(DocName!=null &&DocName>0)) {
            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                case MasterDataType.get("MASTER"):
                    if (cellobj.iColumn == 1) {
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        if (COMMON.prototype.isValidObject(element) == true) {
                            if (cellobj.getCellData("value") != null) {
                                cellobj.setControl(element, cellobj.getCellData("value"));
                            }
                        }
                        else {
                            cellobj.processDefault(event);
                        }
                    }
                    else {
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                        if ((rowvalue[1].Value == "0" && rowvalue[1].Value != null && rowvalue[1].Value != "")||(rowvalue[1].Value == "1" && rowvalue[1].Value != null && rowvalue[1].Value != "")) {
                            if (COMMON.prototype.isValidObject(element) == true) {
                                if (cellobj.getCellData("value") != null) {
                                    cellobj.setControl(element, cellobj.getCellData("value"));
                                }
                            }
                            else {
                                cellobj.processDefault(event);
                            }
                        }
                        else {
                            cellobj.processDefault(event);
                        }
                    }
                    break;
                case MasterDataType.get("NUMBERLIST"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (COMMON.prototype.isValidObject(element) == true) {
                        if (cellobj.getCellData("value") == null) {
                        }
                        else {
                            cellobj.setControl(element, cellobj.getCellData("value"));
                        }
                    }
                    else {
                        cellobj.processDefault(event);
                    }
                    break;
                case MasterDataType.get("FRACTION"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                    if ((rowvalue[1].Value == 2 && rowvalue[1].Value != null && rowvalue[1].Value != "") || (rowvalue[1].Value == 3 && rowvalue[1].Value != null && rowvalue[1].Value != "")) {
                        cellobj.setControl(element, cellobj.getCellData("value"));
                    }
                    else {
                        cellobj.processDefault(event);
                    }
                    break;
                default:
                    break;
            }
        }
    },
    onLeave: function (cellobj, event) {
        debugger
        var element = null;
        var data = null;
        var MasterName = OPTIONCONTROL.getControlValue("id_MasterName");
        var formName = OPTIONCONTROL.getControlValue("id_FormName");
        var DocName = OPTIONCONTROL.getControlValue("Id_DocumentName");
        if ((MasterName > 0 && MasterName != null) || (formName > 0 && formName != null)||(DocName!=null &&DocName>0)) {
            if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
                switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                    case MasterDataType.get("MASTER"):
                        if (cellobj.iColumn == 1) {
                            data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);

                            var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                            if ((rowvalue[2].Value.trim() != "" && rowvalue[2].Text.trim() != "")) {
                                if (COMMON.prototype.getObjectFirstPropertyValue(data[0]).trim() != "" && COMMON.prototype.getObjectFirstPropertyValue(data[1]).trim() != "") {
                                    OPTIONCONTROL.setControlValue(rowvalue[2].MetaData.ctrlid, parseInt(rowvalue[2].Value));
                                    //var v = OPTIONCONTROL.getControlDataObject(rowvalue[2].MetaData.ctrlid);
                                    var FieldData = OPTIONCONTROL.getControlData(rowvalue[2].MetaData.ctrlid);
                                    if (FieldData.length != 0 && data.length != 0) {
                                        var i = data.findIndex(x=>x.iDataTypeId);
                                        var k = FieldData.findIndex(x=>x.iDataTypeId);

                                        if (data[i].iDataTypeId != FieldData[k].iDataTypeId) {
                                            alert("DataType Mismatch");
                                            return false;
                                        }
                                    }
                                }
                            }

                            cellobj.setCellData("value", parseFloat(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                            cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                            break;
                        }
                        else {
                            data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                            var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);                            

                            if ((rowvalue[1].Value != "" && rowvalue[1].Value == 0) || (rowvalue[1].Value != "" && rowvalue[1].Value == 1)) {

                                if ((rowvalue[0].Value.trim() != "") & !isNaN(rowvalue[0].Value.trim())) {
                                    if (COMMON.prototype.getObjectFirstPropertyValue(data[0]).trim() != "" && COMMON.prototype.getObjectFirstPropertyValue(data[1]).trim() != "") {
                                        OPTIONCONTROL.setControlValue(rowvalue[0].MetaData.ctrlid, parseInt(rowvalue[0].Value))
                                        //var v = OPTIONCONTROL.getControlDataObject(rowvalue[0].MetaData.ctrlid);
                                        var FieldData = OPTIONCONTROL.getControlData(rowvalue[0].MetaData.ctrlid);

                                        if (FieldData.length != 0 && data.length != 0) {
                                            var i = data.findIndex(x=>x.iDataTypeId);
                                            var k = FieldData.findIndex(x=>x.iDataTypeId);
                                            if (data[i].iDataTypeId != FieldData[k].iDataTypeId) {
                                                alert("DataType Mismatch");
                                                return false;
                                            }
                                        }
                                    }
                                }

                                cellobj.setCellData("value", parseFloat(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                                cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                            }
                        }
                        break;
                    case MasterDataType.get("NUMBERLIST"):
                        if (cellobj.iColumn == 1) {
                            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                            cellobj.setCellData("value", element.value);
                            cellobj.setCellText($(element).find("option:selected").text());
                        }
                        else {
                            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                            if (COMMON.prototype.isValidObject(element) == true) {

                                if (element.selectedOptions[0] != undefined) {
                                    cellobj.setCellText(element.selectedOptions[0].text, element.selectedOptions[0].value);
                                }
                                else {
                                    cellobj.setCellText(element.value, element.value);
                                }
                                var MapField = parseInt(cellobj.getCellData("value"));
                                switch (MapField) {
                                    //case 0: {
                                    //    //Field

                                    //    var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                    //    if (MyFields != null && MyFields != undefined) {
                                    //        var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                    //        objMyFields.setControl("value", "0");
                                    //        objMyFields.setCellData("value", "0");
                                    //        objMyFields.setCellText("");
                                    //        var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                    //        ObjValue.setCellData("value", "");
                                    //        ObjValue.setCellText("");
                                    //    }
                                    //    break;
                                    //}
                                    //case 1:
                                    //    {   //variable
                                    //        var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                    //        if (MyFields != null && MyFields != undefined) {
                                    //            var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                    //            objMyFields.setControl("value", "0");
                                    //            objMyFields.setCellData("value", "0");
                                    //            objMyFields.setCellText("");
                                    //            var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                    //            ObjValue.setCellData("value", "");
                                    //            ObjValue.setCellText("");
                                    //        }
                                    //        break;
                                    //    }
                                    case 2://value
                                        {
                                            var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                            if (MyFields != null && MyFields != undefined) {
                                                var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                                objMyFields.setControl("value", "0");
                                                objMyFields.setCellData("value", "0");
                                                objMyFields.setCellText("");
                                                var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                                ObjValue.setCellData("value", "");
                                                ObjValue.setCellText("");
                                            }
                                            //if (cellobj.iColumn == 2) {
                                            //    FGRIDCONTROL.gotoCell(sGridCtrlId, cellobj.iRow, 4, event);
                                            //}
                                            break;
                                        }
                                    case 3:
                                        {//Formulae
                                            var MyFields = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                            if (MyFields != null && MyFields != undefined) {
                                                var objMyFields = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 3);
                                                objMyFields.setControl("value", "0");
                                                objMyFields.setCellData("value", "0");
                                                objMyFields.setCellText("");
                                                var ObjValue = FGRIDCONTROL.getCellObject(sGridCtrlId, cellobj.iRow, 4);
                                                ObjValue.setCellData("value", "");
                                                ObjValue.setCellText("");
                                            }
                                            //if (cellobj.iColumn == 2) {
                                            //    FGRIDCONTROL.gotoCell(sGridCtrlId, cellobj.iRow, 4, event);
                                            //}
                                            break;
                                        }
                                    default:
                                        break;
                                }
                            }
                            var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                            if (parseInt(FGRIDCONTROL.getTotalRows(sGridCtrlId)) == parseInt(cellobj.iRow)) {
                                if (rowvalue[1].Value != "" && rowvalue[1].Value >= 0) {
                                    var row = FGRIDCONTROL.getTotalRows(sGridCtrlId)
                                    FGRIDCONTROL.insertRows(sGridCtrlId, row + 1, 1);
                                }
                            }
                        }

                        break;
                    case MasterDataType.get("FRACTION"):
                        var rowvalue = FGRIDCONTROL.getRowValue(sGridCtrlId, cellobj.iRow);
                        if (rowvalue[1].Value != "" && rowvalue[1].Value >= 2) {
                            cellobj.setCellText($("#" + cellobj.ColumnAttribute.ctrlid).val());
                            cellobj.setCellData("value", $("#" + cellobj.ColumnAttribute.ctrlid).val());
                        }
                        break;
                }
            }
        }
        return (true);
    },
    OnEventOption_Change: function (ele) {
        //debugger;
        var isForm = ele.dataset.from;
        var suffixId = ele.dataset.extruserid;
        $($("#tblExternalModules_" + suffixId + " tbody").find(".FormSelectedRowColor")[0]).removeClass("FormSelectedRowColor");
        if (isForm == "True") {
            if ($(ele).val() == 7 || $(ele).val() == 8) {
                //////debugger
                if ($(ele).val() == 7) {
                    document.getElementById('lblshowhidelableTabCaption').style.display = "none";
                    document.getElementById('lblshowhidelableButtonCaption').style.display = "block";
                    $("#ddlAvailability_" + suffixId).prop('disabled', false);
                    document.getElementById("txtbuttonCaption_" + suffixId).disabled = false;
                    document.getElementById("txtbuttonCaption_" + suffixId).value = "";
                }
                else {
                    document.getElementById('lblshowhidelableTabCaption').style.display = "block";
                    document.getElementById('lblshowhidelableButtonCaption').style.display = "none";
                    $("#ddlAvailability_" + suffixId).prop('disabled', true);
                    document.getElementById("txtbuttonCaption_" + suffixId).disabled = false;
                    document.getElementById("txtbuttonCaption_" + suffixId).value = "";
                }

            }
            else {
                document.getElementById('lblshowhidelableTabCaption').style.display = "none";
                document.getElementById('lblshowhidelableButtonCaption').style.display = "block";
                $("#ddlAvailability_" + suffixId).prop('disabled', true);
                document.getElementById("txtbuttonCaption_" + suffixId).disabled = true;
                document.getElementById("txtbuttonCaption_" + suffixId).value = "";
            }

            if ($(ele).val() == 4 || $(ele).val() == 3) {
                document.getElementById('divExecuteOnServer').style.display = "block";
            }
            else {
                document.getElementById('divExecuteOnServer').style.display = "none";
            }
        }
    },

    onModuleType_Change: function (ele) {
       //debugger;
       var suffixId = ele.dataset.extruserid;
        $("#ddlClassNames_" + suffixId).empty().append("<option></option>").prop('disabled', false);
        $("#txtUrlFunctionName_" + suffixId).empty().append("<option></option>");
        if ($(ele).val() == 3) {
            m_sMappingGridId = "";          
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
            //document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = false;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("ddlClassNames_" + suffixId).disabled = true;
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;          
            document.getElementById("Querydiv").style.display = "none";           
            //document.getElementById("Map").style.display = "none";
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "block";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "none";
        }
        else if ($(ele).val() == 4) {
            m_sMappingGridId = "";          
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtServiceUrl_" + suffixId).value = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
            //document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
            document.getElementById("ddlClassNames_" + suffixId).disabled = true;            
            document.getElementById("Querydiv").style.display = "none";           
            //document.getElementbyId("Map").style.display = "none";
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
        }
        else if ($(ele).val() == 5) {
            m_sMappingGridId = "";          
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtServiceUrl_" + suffixId).value = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
            //document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
            document.getElementById("ddlClassNames_" + suffixId).disabled = true;           
            document.getElementById("Querydiv").style.display = "none";         
            //document.getElementById("Map").style.display="none";
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
        }
        else if ($(ele).val() == 6) {
            m_sMappingGridId = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
            //document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = false;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("ddlClassNames_" + suffixId).disabled = true;
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
            document.getElementById("Querydiv").style.display = "none";
            //document.getElementById("Map").style.display = "none";
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "block";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "none";
        }
        else if ($(ele).val() == 7) {
            m_sMappingGridId = "";         
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtServiceUrl_" + suffixId).value = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
           // document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
            document.getElementById("ddlClassNames_" + suffixId).disabled = true;         
            document.getElementById("Querydiv").style.display = "none";        
            //document.getElementById("Map").style.display="none"
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
        }
      
        else if ($(ele).val() == 8) {
            m_sMappingGridId = "";         
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtServiceUrl_" + suffixId).value = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
            //document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
            document.getElementById("ddlClassNames_" + suffixId).disabled = false;       
            document.getElementById("Querydiv").style.display = "none";      
            // document.getElementById("Map").style.display="none";
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
        }
        else if($(ele).val()==10)
        {
            m_sMappingGridId = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtServiceUrl_" + suffixId).value = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Module Name";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "block";
            $("#ddlAllDllFiles_" + suffixId).find("option:first-child").prop("selected", true);
            //document.getElementById("ddlAllDllFiles_" + suffixId).disabled = false;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "none";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
      
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
            document.getElementById("ddlClassNames_" + suffixId).disabled = false;
            document.getElementById("Querydiv").style.display = "none";

            document.getElementById("divExecuteOnServer").style.display = "block";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
        }
      
        else {
            m_sMappingGridId = "";         
            document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtServiceUrl_" + suffixId).value = "";
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
           // document.getElementById("ddlAllDllFiles_" + suffixId).disabled = true;
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
            //code Added by Sagar
            document.getElementById("Webdiv").style.display = "block";
            document.getElementById("txtUrlFunctionName_" + suffixId).disabled = true;
            document.getElementById("ddlClassNames_" + suffixId).disabled = false;      
            document.getElementById("Querydiv").style.display = "block";         
            // document.getElementById("Map").style.display = "none";
            document.getElementById("divExecuteOnServer").style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
            document.getElementById("UrlFunctionName_" + suffixId).value = "";
            document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
        }
    },

    onAllDllFiles_Change: function (ele) {
        ////////debugger;
        var suffixId = ele.dataset.extruserid;
        var dllName = ele.value.trim();
        $("#ddlClassNames_" + suffixId).html("<option></option>");
        //$("#ddlClassMethods_" + suffixId).html("<option></option>");
        if (dllName != "") {
            var urlPath = GLOBAL.getContextPath("GetAllClasses", "FormCustomization", "Forms");
        var result=    NETWORK.executeServerMethod(urlPath, true, { sFileName : dllName}, "JSON", false, "", "", "");

        if (result.data.length > 0) {
            for (var idataLength = 0; idataLength < result.data.length; idataLength++) {
                $("#ddlClassNames_" + suffixId).append("<option value='" + result.data[idataLength] + "'>" + result.data[idataLength] + "</option>");
            }
        }
        }
    },

    onClassNames_Change: function (ele) {
        ////////debugger;
        var suffixId = ele.dataset.extruserid;
        var dllName = document.getElementById("ddlAllDllFiles_" + suffixId).value.trim();
        var className = ele.value.trim();
        var moduleType = document.getElementById("ddlModuleType_" + suffixId).value.trim();
        $("#txtUrlFunctionName_" + suffixId).empty().append("<option></option>");
        if (dllName != "") {
            var urlPath = GLOBAL.getContextPath("GetAllMethodsForClass", "FormCustomization", "Forms");
            var Result = NETWORK.executeServerMethod(urlPath, true, { sClassName: className, sFileName: dllName, iModuleType:moduleType }, "JSON", false, "", "", "");
            if (Result.data.length > 0) {
                for (var idataLength = 0; idataLength < Result.data.length; idataLength++) {
                    $("#txtUrlFunctionName_" + suffixId).append("<option value='" + Result.data[idataLength] + "'>" + Result.data[idataLength] + "</option>");

                }
            }
        }
    },

    InsertExternalModule: function (ele) {
        debugger;
        var isForm = ele.dataset.from;
        var suffixId = ele.dataset.extruserid;
        var onEventVal = $("#ddlOnEvent_" + suffixId).val();

        $($("#tblExternalModules_" + suffixId + " tbody").find(".FormSelectedRowColor")[0]).removeClass("FormSelectedRowColor");

        var onEventTxt = $("#ddlOnEvent_" + suffixId + " option:selected").text();
        var btnCaption = $("#txtbuttonCaption_" + suffixId).val().trim();
        var moduleTypeVal = $("#ddlModuleType_" + suffixId).val();
        var moduleTypeTxt = $("#ddlModuleType_" + suffixId + " option:selected").text();
        var moduleNameVal = $("#txtServiceUrl_" + suffixId).val().trim();
        var FunctionName = $("#txtUrlFunctionName_" + suffixId + " option:selected").val().trim();
        var Query = $("#txtQuery_" + suffixId).val().trim();
        var className = "";
        var moduleNameTxt = "";
        var allExtrModules = document.getElementById("tblExternalModules_" + suffixId).tBodies[0].rows;

        


        if (allExtrModules.length == 0) {
            isedit = false;
            rowNo = -1;
}
        //is edit is true 
        if (isedit == true) {
            var arrExternalModule = [];
            for (var i = 0; i < allExtrModules.length; i++) {
                var extrModule = {
                    CallingOrder: (i + 1),
                    OnEvent: allExtrModules[i].children[1].dataset.onevent,
                    ModuleType: allExtrModules[i].children[2].dataset.moduletype,
                    ModuleName: allExtrModules[i].children[3].textContent.trim(),
                    ClassName: allExtrModules[i].children[4].textContent.trim(),
                    FunctionName: allExtrModules[i].children[5].textContent.trim(),
                    ButtonCaption: allExtrModules[i].children[6].textContent.trim(),
                    AvailableIn: allExtrModules[i].children[7].dataset.availablein,
                    Query: allExtrModules[i].children[8].textContent.trim(),
                    ExecuteOnServer: document.getElementById("chkExecuteOnServer_FormExternalModule").checked,
                }
                arrExternalModule.push(extrModule);
            }
            document.getElementById("tblExternalModules_" + suffixId).deleteRow(arrExternalModule[rowNo].CallingOrder);
            arrexternalmodule.splice(rowNo, 1)
            isedit = false;
        }

        if (moduleTypeVal == 3) {
            var  moduleNameTxt = $("#txtServiceUrl_" + suffixId).val().trim();
            var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
        }
        else if (moduleTypeVal ==4 ) {          
            var functionVal = $("#txtUrlFunctionName_" + suffixId + " option:selected").text();
            //var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
        }
        else if (moduleTypeVal == 5) {
            var functionVal = $("#txtUrlFunctionName_" + suffixId + " option:selected").text();
            //var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
        }
        else if (moduleTypeVal == 6) {
            var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
        }
        else if (moduleTypeVal == 7) {
            var functionVal = $("#txtUrlFunctionName_" + suffixId + " option:selected").text();
            //var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
        }
        //else if (moduleTypeVal == 8) {
        //    //////debugger
        //    var MasterNameVal =OPTIONCONTROL.getControlValue("id_MasterName");
        //    var MasterNameTxt = $("#id_MasterName").val();
        //}
        //else if (moduleTypeVal == 9) {
        //    var FormNameVal = OPTIONCONTROL.getControlValue("id_FormName");
        //    var FormNameTxt = $("#id_FormName").val();
        //}
        else if (moduleTypeVal == 8) {
            var functionVal = $("#txtUrlFunctionName_" + suffixId + " option:selected").text();
            //var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
            var className = $("#ddlClassNames_" + suffixId).val().trim();

        }
        //else if (moduleTypeVal == 11) {
        //    var DocumentNameVal = OPTIONCONTROL.getControlValue("Id_DocumentName");
        //    var DocumentNameText = $("#Id_DocumentName").val();
        //}
        else if (moduleTypeVal == 10)
        {
            //moduleNameVal = $("#ddlAllDllFiles_" + suffixId).val().trim();
            moduleNameTxt = $("#ddlAllDllFiles_" + suffixId + " option:selected").text();
            var className = $("#ddlClassNames_" + suffixId).val().trim();
            var functionVal = $("#txtUrlFunctionName_" + suffixId + " option:selected").text();
            //var FunctionName = $("#UrlFunctionName_" + suffixId).val().trim();
        }
        var availOnVal = "";
        var availOnTxt = "";
        if (isForm == "True") {
            if (onEventVal == 7) {
                availOnVal = $("#ddlAvailability_" + suffixId + " option:selected").val();
                availOnTxt = $("#ddlAvailability_" + suffixId + " option:selected").text().trim();
            }
        }
        else
            availOnVal = 0;
        var tbodyIndex = $("#tblExternalModules_" + suffixId + " tbody tr").length;
        if (onEventVal == undefined || onEventVal == null || onEventVal == "") {
            COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("msgSelecttheEvent"));// "Select the Event."          
            return false;
        }
        if ((onEventVal == 7 || onEventVal == 8) && isForm == "True") {
            if (btnCaption == "" || btnCaption == null) {
                COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("msgEnterButtonCaption"));// "Enter Button Caption."            
                document.getElementById("txtbuttonCaption_" + suffixId).focus();
                return false;
            }
        }
        if (moduleTypeVal == undefined || moduleTypeVal == null || moduleTypeVal == "") {
            COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("msgSelectMaduleType"));// "Select the Module Type."          
            return false;
        }
        if (moduleTypeVal == 10 && (moduleNameTxt == null || moduleNameTxt == undefined || moduleNameTxt == "")) {
            COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("EnterModuleName"));// "Enter Module Name."        
            return false;
        }
        else if ((moduleTypeVal == 3 || moduleTypeVal == 6) && moduleNameTxt == "") {
            COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("msgEnterURL"));// "Enter Url."         
            return false;
        }
        if (moduleTypeVal == 10 && (className == null || className == undefined || className == "")) {
            COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("msgSelecttheClassName"));// "Select the Class Name."         
            return false;
        }
        if ((moduleTypeVal == 3 || moduleTypeVal == 6) && (FunctionName == null || FunctionName == undefined || FunctionName == "")) {
            COMMON.prototype.showMessage("Enter Function Name");// "Enter the Function Name."          
            return false;
        }
        else if (moduleTypeVal == 10 && (functionVal == null || functionVal == undefined || functionVal == "")) {
            COMMON.prototype.showMessage(Form_ExternalModule.GetResourceMessage("msgSelecttheFunctionName"));// "Select the Function Name."           
            return false;
        }


        //////debugger;
        $("#tblExternalModules_" + suffixId + " tbody")
            .append('<tr data-irowid=' + (tbodyIndex) + ' data-mappingdetails="" onclick="Form_ExternalModule.SelectExternalModuleTr(this);">' +
                    '<td>' + (tbodyIndex + 1) + '</td>' +
                    '<td data-onevent="' + onEventVal + '">' + onEventTxt + '</td>' +
                    '<td data-moduletype="' + moduleTypeVal + '">' + moduleTypeTxt + '</td>' +
                    '<td>' + moduleNameTxt + '</td>' +
                    '<td>' + className + '</td>' +
                    '<td>' + FunctionName + '</td>' +
                    '<td>' + btnCaption + '</td>' +
                    '<td data-availablein="' + availOnVal + '">' + availOnTxt + '</td>' +
                    '<td >' + Query + '</td>' +
                    '</tr>');

        $("#ExternalModulesDiv_" + suffixId + " select").find("option:first-child").prop("selected", true);
        $("#txtbuttonCaption_" + suffixId).val('').prop('disabled', true);
        $("#ddlClassNames_" + suffixId).empty().append("<option></option>");
        $("#ddlAvailability_" + suffixId).prop('disabled', true);
        $("#txtQuery_" + suffixId).val("");
        $("#txtServiceUrl_" + suffixId).val("");
        document.getElementById("divExecuteOnServer").style.display = "none";
     
        m_sMappingGridId = "";
        if (onEventVal == 7 || onEventVal == 8) {
            document.getElementById('divExecuteOnServer').style.display = "none";
        }
        $("#txtUrlFunctionName_" + suffixId).val("");
        $("#UrlFunctionName_" + suffixId).val("");
        //if (moduleTypeVal == 8) {
        //    document.getElementById("ExternalhiddenTableDiv").style.display = "none"
        //    document.getElementById("MasterName").style.display = "none";
        //}
        //else if (moduleTypeVal == 9) {
        //    document.getElementById("ExternalFormhiddenTableDiv").style.display = "none"
        //    document.getElementById("FormName").style.display = "none";
        //}    
        //else {
        //    document.getElementById("ExternalDocumenthiddenTableDiv").style.display = "none"
        //    document.getElementById("DocumentName").style.display = "none";
        //}
        //FGRIDCONTROL.clearData(sGridCtrlId)
         if(moduleTypeVal==10)
        {
            document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
            document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
            document.getElementById("txtServiceUrl_" + suffixId).disabled=true;
            document.getElementById("lblModuleType_" + suffixId).textContent = "Url";         
            $("#txtUrlFunctionName_" + suffixId).empty().append("<option></option>");
        }
        if (document.getElementById("lblErrorMsg_ExtraField") != null && document.getElementById("lblErrorMsg_ExtraField") != undefined) {
            document.getElementById("lblErrorMsg_ExtraField").innerHTML = "";
        }
    },
    EditExternalModule: function (ele) {
        debugger
        isedit = true;
        var isForm = ele.dataset.from;
        var suffixId = ele.dataset.extruserid;
        var arrExternalModule = [];
        var tr = $("#tblExternalModules_" + suffixId + " tbody").find(".FormSelectedRowColor");
        //var allextTr = document.getElementById("tblExternalModules_" + suffixId).tBodies[0].children;
        var allExtrModules = document.getElementById("tblExternalModules_" + suffixId).tBodies[0].rows;

        if (allExtrModules.length == 0) {
            COMMON.prototype.showMessage("No Record in Table to Edit.");
        } else {
            if (tr.length > 0) {
                for (var i = 0; i < allExtrModules.length; i++) {
                    var extrModule = {

                        ModuleId: allExtrModules[i].children[0].dataset.moduleid,
                        CallingOrder: (i + 1),
                        OnEvent: allExtrModules[i].children[1].dataset.onevent,
                        ModuleType: allExtrModules[i].children[2].dataset.moduletype,
                        ModuleName: allExtrModules[i].children[3].textContent.trim(),
                        ClassName: allExtrModules[i].children[4].textContent.trim(),
                        FunctionName: allExtrModules[i].children[5].textContent.trim(),
                        ButtonCaption: allExtrModules[i].children[6].textContent.trim(),
                        AvailableIn: allExtrModules[i].children[7].dataset.availablein,
                        Query: allExtrModules[i].children[8].textContent.trim(),
                        ExecuteOnServer: document.getElementById("chkExecuteOnServer_FormExternalModule").checked,
                    }
                    arrExternalModule.push(extrModule);
                }
                hdnModuleId = arrExternalModule[rowNo].ModuleId;
                document.getElementById("ddlOnEvent_" + suffixId).value = arrExternalModule[rowNo].OnEvent;
                document.getElementById("ddlModuleType_" + suffixId).value = arrExternalModule[rowNo].ModuleType;
                document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "none";
                document.getElementById("divExecuteOnServer").style.display = "none";
                document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
                //document.getElementById("ddlAllDllFiles_" + suffixId).innerHTML = arrExternalModule[rowNo].ModuleName;
                if (document.getElementById("ddlModuleType_" + suffixId).value == 3) {
                    document.getElementById("txtServiceUrl_" + suffixId).disabled = false;
                    document.getElementById("UrlFunctionName_" + suffixId).value = arrExternalModule[rowNo].FunctionName;
                    document.getElementById("UrlFunctionName_" + suffixId).style.display = "block";
                    document.getElementById("ddlClassNames_" + suffixId).value = "";
                    document.getElementById("txtServiceUrl_" + suffixId).value = arrExternalModule[rowNo].ModuleName;
                    document.getElementById("txtQuery_" + suffixId).value = "";
                    document.getElementById("ddlClassNames_" + suffixId).disabled = true;
                    document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "none";
                    document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
                    document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
                }
                else if (document.getElementById("ddlModuleType_" + suffixId).value == 4 ||
                     document.getElementById("ddlModuleType_" + suffixId).value == 5 ||
                     document.getElementById("ddlModuleType_" + suffixId).value == 6 ||
                     document.getElementById("ddlModuleType_" + suffixId).value == 7) {
                    document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
                    document.getElementById("txtServiceUrl_" + suffixId).value = "";
                    document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
                    document.getElementById("ddlClassNames_" + suffixId).value = "";
                    document.getElementById("txtUrlFunctionName_" + suffixId).value = arrExternalModule[rowNo].FunctionName;
                    document.getElementById("txtQuery_" + suffixId).value = "";
                    document.getElementById("ddlClassNames_" + suffixId).disabled = true;
                    document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
                    document.getElementById("UrlFunctionName_" + suffixId).value = "";
                    document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
                    //document.getElementById("txtServiceUrl_" + suffixId).style.display = "none";

                }
                else if (document.getElementById("ddlModuleType_" + suffixId).value == 8) {
                    document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
                    document.getElementById("txtServiceUrl_" + suffixId).value = "";
                    document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
                    document.getElementById("ddlClassNames_" + suffixId).value = arrExternalModule[rowNo].ClassName;
                    document.getElementById("ddlClassNames_" + suffixId).disabled = false;
                    document.getElementById("txtUrlFunctionName_" + suffixId).value = arrExternalModule[rowNo].FunctionName;
                    document.getElementById("txtQuery_" + suffixId).value = "";
                    document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
                    document.getElementById("UrlFunctionName_" + suffixId).value = "";
                    document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
                    //document.getElementById("txtServiceUrl_" + suffixId).style.display = "none";
                }

                else if (document.getElementById("ddlModuleType_" + suffixId).value == 9) {
                    document.getElementById("txtUrlFunctionName_" + suffixId).value = "";
                    document.getElementById("txtUrlFunctionName_" + suffixId).disabled = true;
                    document.getElementById("Querydiv").style.display = "block";
                    document.getElementById("txtServiceUrl_" + suffixId).value = "";
                    document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
                    document.getElementById("ddlClassNames_" + suffixId).value = "";
                    document.getElementById("txtQuery_" + suffixId).value = arrExternalModule[rowNo].Query;
                    document.getElementById("ddlClassNames_" + suffixId).disabled = true;
                    document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
                    document.getElementById("UrlFunctionName_" + suffixId).value = "";
                    document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
                    //document.getElementById("txtServiceUrl_" + suffixId).style.display = "none";
                }
                else if (document.getElementById("ddlModuleType_" + suffixId).value == 10) {
                    document.getElementById("txtServiceUrl_" + suffixId).style.display = "none";
                    document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
                    document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "block";
                    //document.getElementById("ddlAllDllFiles_" + suffixId).value = arrExternalModule[rowNo].ModuleName;
                    $('#ddlAllDllFiles_' + suffixId + ' option').each(function () {
                        if ($(this).text() == arrExternalModule[rowNo].ModuleName) {
                            document.getElementById("ddlAllDllFiles_" + suffixId).value = $(this).val();
                        }
                    })
                    Form_ExternalModule.onAllDllFiles_Change(document.getElementById("ddlAllDllFiles_" + suffixId));
                    document.getElementById("ddlClassNames_" + suffixId).value = arrExternalModule[rowNo].ClassName;
                    Form_ExternalModule.onClassNames_Change(document.getElementById("ddlClassNames_" + suffixId));
                    document.getElementById("txtUrlFunctionName_" + suffixId).value = arrExternalModule[rowNo].FunctionName;
                    document.getElementById("txtUrlFunctionName_" + suffixId).disabled = false;
                    document.getElementById("txtQuery_" + suffixId).value = "";
                    document.getElementById("ddlClassNames_" + suffixId).disabled = false;
                    document.getElementById("divExecuteOnServer").style.display = "block";
                    document.getElementById("lblModuleType_" + suffixId).textContent = "Module Name";
                    document.getElementById("UrlFunctionName_" + suffixId).style.display = "none";
                    document.getElementById("UrlFunctionName_" + suffixId).value = "";
                    document.getElementById("txtUrlFunctionName_" + suffixId).style.display = "block";
                    //document.getElementById("txtServiceUrl_" + suffixId).style.display = "none";
                }

                else {

                }
                if (document.getElementById("ddlOnEvent_" + suffixId).value == 7 || document.getElementById("ddlOnEvent_" + suffixId).value == 8) {
                    document.getElementById("txtbuttonCaption_" + suffixId).value = arrExternalModule[rowNo].ButtonCaption;
                    document.getElementById("txtbuttonCaption_" + suffixId).disabled = false;
                }
                else {
                    document.getElementById("txtbuttonCaption_" + suffixId).value = "";
                    document.getElementById("txtbuttonCaption_" + suffixId).disabled = true;
                }
                if (document.getElementById("ddlOnEvent_" + suffixId).value == 7) {
                    document.getElementById("ddlAvailability_" + suffixId + " option:selected").value = arrExternalModule[rowNo].AvailableIn;
                    document.getElementById("ddlAvailability_" + suffixId).disabled = false;

                }
                else {
                    document.getElementById("ddlAvailability_" + suffixId).disabled = true;
                }
                // document.getElementById("tblExternalModules_" + suffixId).deleteRow(arrExternalModule[rowNo].CallingOrder);

                var allTr = document.getElementById("tblExternalModules_" + suffixId).tBodies[0].children;
                for (var i = 0; i < allTr.length; i++) {
                    allTr[i].children[0].textContent = (i + 1);
                }
                //arrexternalmodule.splice(rowNo, 1)
                return arrexternalmodule;
            }
            else {
                COMMON.prototype.showMessage("Select the Row to Edit.");
            }
        }

    },
    GetMappingFieldValue: function (value) {
        if (value >= 0) {
            switch (value) {
                case 0: return "Fields"; break;
                case 1: return "variable"; break;
                case 2: return "Value"; break;
                case 3: return "Formulaee"; break;

                default: break;
            }
        }
    },
    SelectExternalModuleTr: function (ele) {
        debugger
        $(ele).parent().children().removeClass("FormSelectedRowColor");
        $(ele).addClass("FormSelectedRowColor");
        rowNo = ele.getAttribute('data-irowid');

    },

    DeleteExternalModule: function (ele) {
        //debugger;
        var suffixId = ele.dataset.extruserid;
        var tr = $("#tblExternalModules_" + suffixId + " tbody").find(".FormSelectedRowColor");
        var allTr = document.getElementById("tblExternalModules_" + suffixId).tBodies[0].children;
        if (allTr.length == 0) {
            COMMON.prototype.showMessage("No Record in Table to Delete.");
        }else{
            if (tr.length > 0) {
                $("#tblExternalModules_" + suffixId + " tbody").find(".FormSelectedRowColor").remove();

                $("#ExternalModulesDiv_" + suffixId + " select").find("option:first-child").prop("selected", true);
                $("#txtbuttonCaption_" + suffixId).val('').prop('disabled', true);
                $("#ddlClassNames_" + suffixId).empty().append("<option></option>");
                $("#ddlAvailability_" + suffixId).prop('disabled', true);
                $("#txtQuery_" + suffixId).val("");
                document.getElementById("lblModuleType_" + suffixId).textContent = "Url";
                document.getElementById("txtServiceUrl_" + suffixId).disabled = true;
                document.getElementById("txtServiceUrl_" + suffixId).style.display = "block";
                //document.getElementById("ddlAllDllFiles_" + suffixId).style.display = "block";
                document.getElementById("divExecuteOnServer").style.display = "none";
                $("#txtServiceUrl_" + suffixId).val("");                             
                $("#txtUrlFunctionName_" + suffixId).val("");
                $("#UrlFunctionName_" + suffixId).val("");
                document.getElementById("Querydiv").style.display = "none";
                
                if (document.getElementById("lblErrorMsg_ExtraField") != null && document.getElementById("lblErrorMsg_ExtraField") != undefined) {
                    document.getElementById("lblErrorMsg_ExtraField").textContent = "";
                }
                //var allTr = document.getElementById("tblExternalModules_" + suffixId).tBodies[0].children;
                for (var i = 0; i < allTr.length; i++) {
                    allTr[i].children[0].textContent = (i + 1);
                }
            }
            else {
                COMMON.prototype.showMessage("Select the Row to delete.");
            }
        }
    },
    GetType: function (Grid) {
        ////debugger
        if (Grid == "MasterTable") {
            Type = 2;
            return Type;
        }
        else if (Grid == "FormTable") {
            Type = 3;
            return Type;

        }
        else {
            Type = 4;
            return Type;
        }
    },


    GetExternalModules: function (moduleId) {
        debugger;
        var arrExternalModule = [];
        var allExtrModules = document.getElementById("tblExternalModules_" + moduleId).tBodies[0].rows;
        for (var i = 0; i < allExtrModules.length; i++) {
            extrModule = {
                CallingOrder: (i + 1),
                OnEvent: allExtrModules[i].children[1].dataset.onevent,
                ModuleType: allExtrModules[i].children[2].dataset.moduletype,
                ModuleName: allExtrModules[i].children[3].textContent.trim(),
                ClassName: allExtrModules[i].children[4].textContent.trim(),
                FunctionName: allExtrModules[i].children[5].textContent.trim(),
                ButtonCaption: allExtrModules[i].children[6].textContent.trim(),
                AvailableIn: allExtrModules[i].children[7].dataset.availablein,
                Query: allExtrModules[i].children[8].textContent.trim(),
                ExecuteOnServer: document.getElementById("chkExecuteOnServer_FormExternalModule").checked,
                // FormsExMapping: allExtrModules[i].children[2].dataset.moduletype == 6 ? MasterMappingType : allExtrModules[i].children[2].dataset.moduletype == 7 ? FormMappingType : DocMappingType
                //FormsExMapping: allExtrModules[i].children[2].dataset.moduletype == 6 ? Form_ExternalModule.insertMappingFields("MasterTable") : allExtrModules[i].children[2].dataset.moduletype == 7 ? Form_ExternalModule.insertMappingFields("FormTable") : allExtrModules[i].children[2].dataset.moduletype == 9 ? Form_ExternalModule.insertMappingFields("DocumentTable") : null, 
                //FormsExMapping: JSON.parse(allExtrModules[i].dataset.mappingdetails)
            }
            arrExternalModule.push(extrModule);
        }
        return arrExternalModule;
    },

    SetResourceMessage: function (arrResourceMsg) {
        if (arrResourceMsg != null && arrResourceMsg != undefined) {
            ExternalModule_ResourceMsgs = arrResourceMsg;
        }
    },
    GetResourceMessage: function (sKey) {
        var value = "";
        var result = Form_ExternalModule.FindErrorMsg(sKey);

        if (result != null) {
            if (result.Value.length > 0) {
                value = result.Value;
            }
        }
        return (value);
    },
    FindErrorMsg: function (sKey) {
        var resultMsg = null;
        var obj = null;
        try {
            for (var iCounter = 0; iCounter < ExternalModule_ResourceMsgs.length; iCounter++) {
                obj = ExternalModule_ResourceMsgs[iCounter];
                if (obj.Key == sKey) {
                    resultMsg = {
                        Value: obj.Value
                    }
                    break;
                }
            }
        }
        catch (err) {
            resultMsg = {
                Value: err.message
            }
        }
        return (resultMsg);
    },
    ShowAlertMessage: function (sExternalId, msgText, color) {
        ////////debugger;
        $("#lblErrorMessage_ExternalModule_" + sExternalId).fadeIn('fast');
        if (color == null && color == undefined) {
            $("#lblErrorMessage_ExternalModule_" + sExternalId).css("color", "red");
            $("#lblErrorMessage_ExternalModule_" + sExternalId).html('').html("<i class='fa fa-warning' style='color:red;'></i>&nbsp; " + msgText).delay(2000).fadeOut('slow');
        }
        else {
            $("#lblErrorMessage_ExternalModule_" + sExternalId).css("color", color);
            $("#lblErrorMessage_ExternalModule_" + sExternalId).html('').html("<i class='fa fa-warning' style='color:" + color + ";'></i>&nbsp; " + msgText).delay(2000).fadeOut('slow');
        }
        //document.getElementById("lblErrorMessage_ExternalModule_" + sExternalId).scrollIntoView(true);
    },
    SetMasterDetails: function () {
        //debugger
        FGRIDCONTROL.clearData("MasterTable");
        var iMasterTypeId = parseInt(OPTIONCONTROL.getControlValue("id_MasterName"));
        if (iMasterTypeId > 0) {
            var sFilter = "iMasterId=" + iMasterTypeId;
            OPTIONCONTROL.setFilter("MasterTable_MasterName", sFilter);
            FGRIDCONTROL.gotoCell("MasterTable", 1, 1, event);
        }
    },
    setFormDetails: function () {
        //debugger
        FGRIDCONTROL.clearData("FormTable");

        var iFormTypeId = parseInt(OPTIONCONTROL.getControlValue("id_FormName"));
        if (iFormTypeId > 0) {
            var sFilter = "iFormId=" + iFormTypeId;
            OPTIONCONTROL.setFilter("FormTable_FormName", sFilter);
            FGRIDCONTROL.gotoCell("FormTable", 1, 1, event);
        }
    },
    getVoucherTypeFields: function () {
        ////debugger;
        var iVoucherType = parseInt(OPTIONCONTROL.getControlValue("Id_DocumentName"));
        if (iVoucherType > 0) {
            var urlPath = GLOBAL.getContextPath("getVoucherTypeFields", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iVoucherType: iVoucherType }, "JSON", true, "Form_ExternalModule.getVoucherTypeFields_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },

    getVoucherTypeFields_Success: function (flag, data) {
        ////debugger;
        $('#DocumentTable_DocumentName').empty();
        var lstDocFields = '';
        for (var j = 0; j < data.length; j++) {
            if (data[j].Name != "DocNo" && data[j].Name != "Date") {
                lstDocFields += '<option id="' + j + '" value="' + data[j].ID + '">' + data[j].Name + '</option>'
            }
        }
        lstDocFields += '<option id="' + data.length + '" value="0">Reference No</option>'
        lstDocFields += '<option id="' + (data.length+1) + '" value="1">RMA No</option>'
        $('#DocumentTable_DocumentName').append(lstDocFields);
        FGRIDCONTROL.gotoCell("DocumentTable", 1, 1, event);
    },
    GetTypeId: function (sGridCtrlId) {
        //debugger
        if (sGridCtrlId == "MasterTable") {
            var iTypeId = parseInt(OPTIONCONTROL.getControlValue("id_MasterName"));
            //OPTIONCONTROL.clear("id_MasterName");
            return iTypeId;
        }
        else if (sGridCtrlId == "FormTable") {
            var iTypeId = parseInt(OPTIONCONTROL.getControlValue("id_FormName"));
            //OPTIONCONTROL.clear("id_FormName");
            return iTypeId;
        }
        else {
            var iTypeId = parseInt(OPTIONCONTROL.getControlValue("Id_DocumentName"));
            // OPTIONCONTROL.clear("Id_DocumentName");
            return iTypeId;
        }

    },
    GetModuleId: function () {
        var iModule = 0;

        return iModule;
    },

    insertMappingFields: function (sGridCtrlId) {
        //debugger
        var MappingType = [];
        for (var i = 1; i < FGRIDCONTROL.getTotalRows(sGridCtrlId) ; i++) {
            var abc = document.getElementById(sGridCtrlId);
            FGRIDCONTROL.update(abc);
            var obj_RowData = FGRIDCONTROL.getRowValue(sGridCtrlId, i);
            if (obj_RowData[1].Value == 0 && obj_RowData[1].Value != "") {
                ////debugger
                var FormsExMapping = {
                    FieldId: obj_RowData[0].Value,
                    MapFieldId: obj_RowData[2].Value,
                    MappingType: obj_RowData[1].Value,
                    ModuleId: Form_ExternalModule.GetModuleId(),
                    Type: Form_ExternalModule.GetType(sGridCtrlId),
                    Value: obj_RowData[3].Value,
                    TypeId: Form_ExternalModule.GetTypeId(sGridCtrlId),
                }
            }
            else if (obj_RowData[1].Value == 1 && obj_RowData[1].Value != "") {
                var FormsExMapping = {
                    FieldId: obj_RowData[0].Value,
                    MapFieldId: obj_RowData[2].Value,
                    MappingType: obj_RowData[1].Value,
                    ModuleId: Form_ExternalModule.GetModuleId(),
                    Type: Form_ExternalModule.GetType(sGridCtrlId),
                    Value: obj_RowData[3].Value,
                    TypeId: Form_ExternalModule.GetTypeId(sGridCtrlId),

                }
            }
            else if (obj_RowData[1].Value > 1 && obj_RowData[1].Value != "") {
                var FormsExMapping = {
                    FieldId: obj_RowData[0].Value,
                    MapFieldId: obj_RowData[2].Value,
                    MappingType: obj_RowData[1].Value,
                    ModuleId: Form_ExternalModule.GetModuleId(),
                    Type: Form_ExternalModule.GetType(sGridCtrlId),
                    Value: obj_RowData[3].Value,
                    TypeId: Form_ExternalModule.GetTypeId(sGridCtrlId),

                }
            }
            MappingType.push(FormsExMapping);
        }
        FGRIDCONTROL.clearData(sGridCtrlId);
        return MappingType;

    },

    //******Context Meanu for TriggerMapField MasterTable ,FormTable and DocumentTable************//

    OnTriggersGridRightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "id_TriggersGrid_body_menu");

            eleMenu = document.getElementById("id_TriggersGrid_body_menu");
            document.getElementById("id_TriggersGrid_body_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "Form_ExternalModule.TriggersGrid_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "Form_ExternalModule.TriggersGrid_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            Form_ExternalModule.TriggersGrid_toggleMapEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();         

            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                eleMenu.style.left = (rectContainer.left - 368) + "px";
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            eleMenu.style.top = (rectContainer.top - 80) + "px";
        }
        catch (err) {
            COMMON.prototype.showAlert("{Form_ExternalModule.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    TriggersGrid_toggleMapEntryMore: function (ele, evt) {
        //debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {TriggersGrid_toggleMapEntryMore} " + err.message, "red");
        }
    },

    TriggersGrid_InsertRow: function (iRow, event) {
        //debugger
        try {
            FCommon.UI.stopKeyProcess(event);
            if (m_sMappingGridId == "MasterTable") {
                FGRIDCONTROL.update("MasterTable");
                FGRIDCONTROL.insertRows("MasterTable", iRow, 1);
            }
            else if (m_sMappingGridId == "FormTable") {
                FGRIDCONTROL.update("FormTable");
                FGRIDCONTROL.insertRows("FormTable", iRow, 1);
            }
            else if (m_sMappingGridId == "DocumentTable") {
                FGRIDCONTROL.update("DocumentTable");
                FGRIDCONTROL.insertRows("DocumentTable", iRow, 1);
            }
            
        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    TriggersGrid_DeleteRow: function (iRow, event) {
        //debugger
        if (confirm(FORMCUSTOMIZATION.GetResourceMessage("ConfirmToDeleteRow"))) {
            FCommon.UI.stopKeyProcess(event);
            if (Form_ExternalModule.TriggersGrid_getTotalRows() == 1) {
                COMMON.prototype.showMessage(FORMCUSTOMIZATION.GetResourceMessage("msgCannotDeleteRow"));

                return;
            }
            

            if (m_sMappingGridId == "MasterTable") {
                FGRIDCONTROL.update("MasterTable");
                FGRIDCONTROL.deleteRows("MasterTable", iRow, 1);
            }
            else if (m_sMappingGridId == "FormTable") {
                FGRIDCONTROL.update("FormTable");
                FGRIDCONTROL.deleteRows("FormTable", iRow, 1);
            }
            else if (m_sMappingGridId == "DocumentTable") {
                FGRIDCONTROL.update("DocumentTable");
                FGRIDCONTROL.deleteRows("DocumentTable", iRow, 1);
            }
        }
    },

    TriggersGrid_getTotalRows: function () {
        //debugger;
        if (m_sMappingGridId == "MasterTable") {
            return document.getElementById('MasterTable_body').rows.length;
        }
        else if (m_sMappingGridId == "FormTable") {
            return document.getElementById('FormTable_body').rows.length;
        }
        else if (m_sMappingGridId == "DocumentTable") {
            return document.getElementById('DocumentTable_body').rows.length;
        }
       
    },

    //******End Context Meanu for TriggerMapField MasterTable************//

    TriggerMapFieldModal_Popup: function () {
        //debugger;       
            $("#MapExternalModule_Modal").modal('show');
            $("#MapExternalModule_Modal").css('display', 'block');       
    },
    closeTriggerMapFieldModal_Popup: function () {
        //debugger;
        $("#MapExternalModule_Modal").modal('hide');
        $("#MapExternalModule_Modal").css('display', 'none');
    },

    FillMappingDetails: function (IsTrigger) {
        debugger
        if (IsTrigger != true) {
            m_arrFormsExMapping = [];
            FGRIDCONTROL.update(m_sMappingGridId);
            for (var i = 1; i <= FGRIDCONTROL.getTotalRows(m_sMappingGridId) ; i++) {
                var obj_RowData = FGRIDCONTROL.getRowValue(m_sMappingGridId, i);
                if (!isNaN(obj_RowData[0].Value) & obj_RowData[0].Value != "") {
                    var FormsExMapping = {
                        FieldId: obj_RowData[0].Value,
                        MapFieldId: obj_RowData[2].Value,
                        MappingType: obj_RowData[1].Value,
                        ModuleId: FORMCUSTOMIZATION.GetFormTypeId(),
                        Type: Form_ExternalModule.GetType(m_sMappingGridId),
                        Value: obj_RowData[3].Value,
                        TypeId: Form_ExternalModule.GetTypeId(m_sMappingGridId),
                        FormFieldId: 0
                    }

                    m_arrFormsExMapping.push(FormsExMapping);
                }
            }

            if (m_arrFormsExMapping.length > 0) {
                FORMCUSTOMIZATION.InsertTrigger();
            }
        }

        FGRIDCONTROL.clearData(m_sMappingGridId, true);
        OPTIONCONTROL.clear("id_MasterName");
        OPTIONCONTROL.clear("id_FormName");
        OPTIONCONTROL.clear("Id_DocumentName");
    },
    GetFormMapping:function(){      
            return m_arrFormsExMapping;        
    },
    OpenformMappingPopup: function (ele) {
        debugger;
        var hdnFiledID;
        SuffixName = ele.dataset.extruserid;

         if (SuffixName == "mExtraFieldExternalModule") {
            hdnFiledID = $("#hiddenFieldID").val();
        }
        else {
            hdnFiledID = 0;
        }

        // for hdnmoduleId
        if (hdnModuleId == undefined) {
            hdnModuleId = 0;
        }
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetDataFromMappingFields", "FormCustomization", "Forms"), true,
                          { iModuleId: hdnModuleId, iFieldId: hdnFiledID }, "JSON", true, "Form_ExternalModule.openfromMappingpopup_success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

    },


    openfromMappingpopup_success: function (flag, data) {
        debugger
        var DocumentFieldName;
        if (flag) {
            $("#MapExternalModule_Modal").modal('show');           
            if (data != null && data.length > 0) {
                if (document.getElementById("ddlModuleType_" + SuffixName).value == 8) {
                    OPTIONCONTROL.setControlText("id_MasterName", "");
                    OPTIONCONTROL.setControlValue("id_MasterName", 0);
                    FGRIDCONTROL.clearData("MasterTable", true);
                    var TotalRows = FGRIDCONTROL.getTotalRows("MasterTable");
                    FGRIDCONTROL.deleteRows("MasterTable", 1, TotalRows + 1);
                    for (var i = 0; i < data.length; i++) {
                        OPTIONCONTROL.setControlText(OPTIONCONTROL.getControlText("id_MasterName", data[i].iTypeId));
                        OPTIONCONTROL.setControlValue("id_MasterName", data[i].TypeId);
                        FGRIDCONTROL.insertRows("MasterTable", i + 1, 1);
                        for (var col = 1; col <= 6; col++) {

                            var cellobj = FGRIDCONTROL.getCellObject("MasterTable", i + 1, col);
                            if (cellobj != null) {
                                switch (col) {
                                    case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, data[i].FieldId);
                                        cellobj.setCellData(data[i].FieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, data[i].FieldId)); break;

                                        break;

                                    case 2: var chargetype = Form_ExternalModule.GetMappingFieldValue(data[i].MappingType);
                                        cellobj.setCellData(data[i].MappingType);
                                        cellobj.setCellText(chargetype);
                                        break;

                                    case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, data[i].MapFieldId);
                                        cellobj.setCellData(data[i].MapFieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, data[i].MapFieldId)); break;
                                        break;

                                    case 4: cellobj.setCellText(data[i].Value);
                                        cellobj.setCellData(data[i].Value); break;

                                    default: break;
                                }
                            }
                        }
                    }
                }
                else if (document.getElementById("ddlModuleType_" + SuffixName).value == 9) {
                    OPTIONCONTROL.setControlText("id_FormName", "");
                    OPTIONCONTROL.setControlValue("id_FormName", 0);
                    FGRIDCONTROL.clearData("FormTable", true);
                    var TotalRows = FGRIDCONTROL.getTotalRows("FormTable");
                    FGRIDCONTROL.deleteRows("FormTable", 1, TotalRows + 1);
                    for (var i = 0; i < data.length; i++) {
                        OPTIONCONTROL.setControlText(OPTIONCONTROL.getControlText("id_FormName", data[i].iTypeId));
                        OPTIONCONTROL.setControlValue("id_FormName", data[i].TypeId);
                        FGRIDCONTROL.insertRows("FormTable", i + 1, 1);
                        for (var col = 1; col <= 4; col++) {
                            var cellobj = FGRIDCONTROL.getCellObject("FormTable", i + 1, col);
                            if (cellobj != null) {
                                switch (col) {
                                    case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, data[i].FieldId);
                                        cellobj.setCellData(data[i].FieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, data[i].FieldId)); break;

                                        break;

                                    case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(data[i].MappingType);
                                        cellobj.setCellData(data[i].MappingType);
                                        cellobj.setCellText(MappingType);
                                        break;

                                    case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, data[i].MapFieldId);
                                        cellobj.setCellData(data[i].MapFieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, data[i].MapFieldId)); break;
                                        break;

                                    case 4: cellobj.setCellText(data[i].Value);
                                        cellobj.setCellData(data[i].Value); break;

                                    default: break;
                                }
                            }
                        }
                    }
                }

                else {
                    OPTIONCONTROL.setControlText("Id_DocumentName", "");
                    OPTIONCONTROL.setControlValue("Id_DocumentName", 0);
                    FGRIDCONTROL.clearData("DocumentTable", true);
                    var TotalRows = FGRIDCONTROL.getTotalRows("DocumentTable");
                    FGRIDCONTROL.deleteRows("DocumentTable", 1, TotalRows + 1);
                    for (var i = 0; i < data.length; i++) {
                        OPTIONCONTROL.setControlText(OPTIONCONTROL.getControlText("Id_DocumentName", data[i].iTypeId));
                        OPTIONCONTROL.setControlValue("Id_DocumentName", data[i].TypeId);
                        FGRIDCONTROL.insertRows("DocumentTable", i + 1, 1);
                        for (var col = 1; col <= 4; col++) {
                            var cellobj = FGRIDCONTROL.getCellObject("DocumentTable", i + 1, col);
                            if (cellobj != null) {
                                switch (col) {
                                    case 1:
                                        var element = GetDocumentName(data[i].FieldId);
                                        cellobj.setCellData("value", data[i].FieldId);
                                        cellobj.setCellText(element);
                                      
                                        //var element = $('#' + cellobj.ColumnAttribute.ctrlid);
                                        //    cellobj.setCellData("value", data[i].FieldId);
                                        //    $(element).val(data[i].FieldId);
                                        //if ($(element).find("option:selected").length > 0) {
                                        //    cellobj.setCellText($(element).find("option:selected").text());
                                        //}
                                       break;

                                    case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(data[i].MappingType);
                                        cellobj.setCellData(data[i].MappingType);
                                        cellobj.setCellText(MappingType);
                                        break;

                                    case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, data[i].MapFieldId);
                                        cellobj.setCellData(data[i].MapFieldId);
                                        cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, data[i].MapFieldId));
                                        break;

                                    case 4: cellobj.setCellText(data[i].Value);
                                        cellobj.setCellData(data[i].Value); break;

                                    default: break;
                                }
                            }
                        }
                    }
                }

            }
            else
            {
                if (m_arrFormsExMapping != null && m_arrFormsExMapping.length > 0 && data.length == 0) {

                    if (document.getElementById("ddlModuleType_" + SuffixName).value == 8) {
                        OPTIONCONTROL.setControlText("id_MasterName", "");
                        OPTIONCONTROL.setControlValue("id_MasterName", 0);
                        FGRIDCONTROL.clearData("MasterTable", true);
                        var TotalRows = FGRIDCONTROL.getTotalRows("MasterTable");
                        FGRIDCONTROL.deleteRows("MasterTable", 1, TotalRows + 1);
                        for (var i = 0; i < m_arrFormsExMapping.length; i++) {
                            OPTIONCONTROL.setControlText(OPTIONCONTROL.getControlText("id_MasterName", m_arrFormsExMapping[i].iTypeId));
                            OPTIONCONTROL.setControlValue("id_MasterName", m_arrFormsExMapping[i].TypeId);
                            FGRIDCONTROL.insertRows("MasterTable", i + 1, 1);
                            for (var col = 1; col <= 6; col++) {

                                var cellobj = FGRIDCONTROL.getCellObject("MasterTable", i + 1, col);
                                if (cellobj != null) {
                                    switch (col) {
                                        case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].FieldId);
                                            cellobj.setCellData(m_arrFormsExMapping[i].FieldId);
                                            cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].FieldId)); break;

                                            break;

                                        case 2: var chargetype = Form_ExternalModule.GetMappingFieldValue(m_arrFormsExMapping[i].MappingType);
                                            cellobj.setCellData(m_arrFormsExMapping[i].MappingType);
                                            cellobj.setCellText(chargetype);
                                            break;

                                        case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].MapFieldId);
                                            cellobj.setCellData(m_arrFormsExMapping[i].MapFieldId);
                                            cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].MapFieldId)); break;
                                            break;

                                        case 4: cellobj.setCellText(m_arrFormsExMapping[i].Value);
                                            cellobj.setCellData(m_arrFormsExMapping[i].Value); break;

                                        default: break;
                                    }
                                }
                            }
                        }
                    }
                    else if (document.getElementById("ddlModuleType_" + SuffixName).value == 9) {
                        OPTIONCONTROL.setControlText("id_FormName", "");
                        OPTIONCONTROL.setControlValue("id_FormName", 0);
                        FGRIDCONTROL.clearData("FormTable", true);
                        var TotalRows = FGRIDCONTROL.getTotalRows("FormTable");
                        FGRIDCONTROL.deleteRows("FormTable", 1, TotalRows + 1);
                        for (var i = 0; i < m_arrFormsExMapping.length; i++) {
                            OPTIONCONTROL.setControlText(OPTIONCONTROL.getControlText("id_FormName", m_arrFormsExMapping[i].iTypeId));
                            OPTIONCONTROL.setControlValue("id_FormName", m_arrFormsExMapping[i].TypeId);
                            FGRIDCONTROL.insertRows("FormTable", i + 1, 1);
                            for (var col = 1; col <= 4; col++) {
                                var cellobj = FGRIDCONTROL.getCellObject("FormTable", i + 1, col);
                                if (cellobj != null) {
                                    switch (col) {
                                        case 1: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].FieldId);
                                            cellobj.setCellData(m_arrFormsExMapping[i].FieldId);
                                            cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].FieldId)); break;

                                            break;

                                        case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(parseInt(m_arrFormsExMapping[i].MappingType));
                                            cellobj.setCellData(m_arrFormsExMapping[i].MappingType);
                                            cellobj.setCellText(MappingType);
                                            break;

                                        case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].MapFieldId);
                                            cellobj.setCellData(m_arrFormsExMapping[i].MapFieldId);
                                            cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].MapFieldId)); break;
                                            break;

                                        case 4: cellobj.setCellText(m_arrFormsExMapping[i].Value);
                                            cellobj.setCellData(m_arrFormsExMapping[i].Value); break;

                                        default: break;
                                    }
                                }
                            }
                        }
                    }

                    else {
                        OPTIONCONTROL.setControlText("Id_DocumentName", "");
                        OPTIONCONTROL.setControlValue("Id_DocumentName", 0);
                        FGRIDCONTROL.clearData("DocumentTable", true);
                        var TotalRows = FGRIDCONTROL.getTotalRows("DocumentTable");
                        FGRIDCONTROL.deleteRows("DocumentTable", 1, TotalRows + 1);
                        for (var i = 0; i < m_arrFormsExMapping.length; i++) {
                            OPTIONCONTROL.setControlText(OPTIONCONTROL.getControlText("Id_DocumentName", m_arrFormsExMapping[i].iTypeId));
                            OPTIONCONTROL.setControlValue("Id_DocumentName", m_arrFormsExMapping[i].TypeId);
                            FGRIDCONTROL.insertRows("DocumentTable", i + 1, 1);
                            for (var col = 1; col <= 4; col++) {
                                var cellobj = FGRIDCONTROL.getCellObject("DocumentTable", i + 1, col);
                                if (cellobj != null) {
                                    switch (col) {
                                        case 1:
                                            var element = GetDocumentName(m_arrFormsExMapping[i].FieldId);
                                            cellobj.setCellData("value", m_arrFormsExMapping[i].FieldId);
                                            cellobj.setCellText(element);

                                          
                                            break;

                                        case 2: var MappingType = Form_ExternalModule.GetMappingFieldValue(m_arrFormsExMapping[i].MappingType);
                                            cellobj.setCellData(m_arrFormsExMapping[i].MappingType);
                                            cellobj.setCellText(MappingType);
                                            break;

                                        case 3: OPTIONCONTROL.setControlValue(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].MapFieldId);
                                            cellobj.setCellData(m_arrFormsExMapping[i].MapFieldId);
                                            cellobj.setCellText(OPTIONCONTROL.getControlText(cellobj.ColumnAttribute.ctrlid, m_arrFormsExMapping[i].MapFieldId));
                                            break;

                                        case 4: cellobj.setCellText(m_arrFormsExMapping[i].Value);
                                            cellobj.setCellData(m_arrFormsExMapping[i].Value); break;

                                        default: break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },


}
function GetDocumentName(iFieldId) {
    debugger
    var iVoucherType = parseInt(OPTIONCONTROL.getControlValue("Id_DocumentName"));
    var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetDocumentName", "FormCustomization", "Forms"), true, { iVoucherType: iVoucherType,iFieldId:iFieldId}, "JSON", false);
    if (data != undefined && data != null && data.data.length >0) {
        // debugger
        var objData = data.data[0].Name;
        return objData;
      

    }
    else {
        COMMON.prototype.showMessage("Error in getting  table data");
    }
}







;
/* RegExValidation.js
 * Implementation:- 23-06-2016
 *
 * By:- Tarun Kumar Dewangan
 * License:- Focussoftnet pvt. ltd. 
 */

var RegEx_ResouceMsgs;
var mREG_EX = {

    clearREFields : function (ele) {
        //debugger;
        $(".clearRExp").val('');
    },

    SetRegExResourceMessages: function (arrResourceMsgs) {
        if (arrResourceMsgs != null && arrResourceMsgs != undefined) {
            RegEx_ResouceMsgs = arrResourceMsgs;
        }
    },

    /// Character and Repetitions tab validation......

    AddCharacterClass: function (ele, char) {
        //debugger;
        var chkMatchIfAbsent = document.getElementById("chkMatchIfAbsent_Regex");
        if (char == "sChar") {
            document.getElementById("txtSpecificChar").disabled = false;
            if (chkMatchIfAbsent.checked) {
                document.getElementById("txtCharsAndRepetitions").value = "[" + document.getElementById("txtSpecificChar").value.trim() + "]";
            }
            else {
                document.getElementById("txtCharsAndRepetitions").value = document.getElementById("txtSpecificChar").value.trim();
            }
        }
        else {
            document.getElementById("txtSpecificChar").disabled = true;
        }
        if (char == "class") {
            document.getElementById("ddlNamedClass").disabled = false;
            if (chkMatchIfAbsent.checked) {
                var regexCls = document.getElementById("ddlNamedClass").options[document.getElementById("ddlNamedClass").selectedIndex].value.trim();
                document.getElementById("txtCharsAndRepetitions").value = regexCls.substr(0, 1) + regexCls[1].toUpperCase() + regexCls.substr(1 + 1);
            }
            else {
                document.getElementById("txtCharsAndRepetitions").value = document.getElementById("ddlNamedClass").options[document.getElementById("ddlNamedClass").selectedIndex].value.trim();
            }
        }
        else {
            document.getElementById("ddlNamedClass").disabled = true;
        }

        if (char == "charSet") {
            document.getElementById("ddlSpecifiedSet").disabled = false;
            document.getElementById("txtCharsAndRepetitions").value = document.getElementById("ddlSpecifiedSet").options[document.getElementById("ddlSpecifiedSet").selectedIndex].value.trim();
        }
        else {
            document.getElementById("ddlSpecifiedSet").disabled = true;
        }
        if (char == undefined || char == null || char == "" && (char != "sChar" || char != "class" || char != "charSet")) {
            if (chkMatchIfAbsent.checked) {
                var regexCls = ele.value.trim();
                document.getElementById("txtCharsAndRepetitions").value = regexCls.substr(0, 1) + regexCls[1].toUpperCase() + regexCls.substr(1 + 1);
            }
            else {
                document.getElementById("txtCharsAndRepetitions").value = ele.value.trim();
            }
        }

    },
    CheckSpecificChar: function (ele) {
        //debugger;
        if (ele.value.length > 1) {
            ele.value = ele.value.substring(0, ele.value.length - 1);
        }
        else {
            return;
        }
    },
    SetRegExText: function (ele) {
        //debugger;
        var chkMatchIfAbsent = document.getElementById("chkMatchIfAbsent_Regex");
        if (chkMatchIfAbsent.checked) {
            var regexCls = ele.options[ele.selectedIndex].value.trim();
            document.getElementById("txtCharsAndRepetitions").value = regexCls.substr(0, 1) + regexCls[1].toUpperCase() + regexCls.substr(1 + 1);
        }
        else {
            document.getElementById("txtCharsAndRepetitions").value = ele.options[ele.selectedIndex].value.trim();
        }
    },
    SetAsFewPossible: function (ele) {
        if (!ele.checked) {
            var regVal = document.getElementById("txtCharsAndRepetitions").value.trim();
            document.getElementById("txtCharsAndRepetitions").value = regVal.substring(0, regVal.length - 1);
        }
        else {
            document.getElementById("txtCharsAndRepetitions").value += ele.value.trim();
        }
    },
    AddRepetitions: function () {
        //debugger;
        //$("#expRepetitions_Extra").find("input[type='radio']").prop("checked", false);
        mREG_EX.SetRegExCharClass();
        ele = $("#expRepetitions").find("input[type='radio']:checked")[0];
        if (ele != undefined) {
            document.getElementById("txtCharsAndRepetitions").value += ele.value.trim();
        }
        var chkRepetition_RegEx = document.getElementById("chkRepetition_RegEx");
        if (chkRepetition_RegEx.checked) {
            document.getElementById("txtCharsAndRepetitions").value += chkRepetition_RegEx.value.trim();
        }
    },
    SetRegExCharClass: function () {
        document.getElementById("txtCharsAndRepetitions").value = "";
        var rdoChecked = $("#expCharacterClass").find('input[type="radio"]:checked')[0];
        var rdoCharClass = rdoChecked.dataset.cls;
        if (rdoCharClass != "") {
            mREG_EX.AddCharacterClass(rdoChecked, rdoCharClass);
        }
        else
            mREG_EX.AddCharacterClass(rdoChecked, "");
    },
    setExtraRepetitionRegEx: function (ele) {
        //debugger;
        //$("#expRepetitions").find("input[type='radio']").prop("checked", false);
        mREG_EX.SetRegExCharClass();
        if (ele.value == 1) {
            document.getElementById("txtCharsAndRepetitions").value += "{" + document.getElementById("txtExactlyN_RegEx").value.trim() + "}$";
        }
        else if (ele.value == 2) {
            document.getElementById("txtCharsAndRepetitions").value += "{" + document.getElementById("txtAtLeastN_RegEx").value.trim() + ",}S";
        }
        else {
            document.getElementById("txtCharsAndRepetitions").value += "{" + document.getElementById("txtExactlyN_RegEx").value.trim() + "," + document.getElementById("txtAtLeastN_RegEx").value.trim() + "}S";
        }
    },
    setExtraRepetitionNum: function () {
        var rdo = $("#expRepetitions_Extra").find("input[type='radio']:checked")[0];
        mREG_EX.setExtraRepetitionRegEx(rdo);
    },

    InsertRegEx: function (eleId) {
        if (eleId != "" && eleId != undefined) {
            document.getElementById("txtRExpression_RExp").value += document.getElementById(eleId).value.trim();
        }
    },


    /// Group and Options tab validation.......

    setMatchGroup: function (ele) {
        document.getElementById("txtGroupsAndOptions").value = ele.value.trim();
    },
    setMatchGroupText: function (eleId) {
        //debugger;
        if (eleId != "" && eleId != null) {
            if (eleId == "txtMatchGroupName1") { // (?<Nams>)
                document.getElementById("chkMatchGroupName1").checked = true;
                document.getElementById("txtGroupsAndOptions").value = "(?<" + document.getElementById(eleId).value.trim() + ">)";
            }
            else if (eleId == "txtMatchGroupName2") { // (?<Name-Name2>)
                document.getElementById("chkMatchGroupName2").checked = true;
                document.getElementById("txtGroupsAndOptions").value = "(?<" + document.getElementById("txtMatchGroupName1").value.trim() + "-" + document.getElementById(eleId).value.trim() + ">)";
            }
            else { // (?#A Comment)
                document.getElementById("chkMatchGroupComment").checked = true;
                document.getElementById("txtGroupsAndOptions").value = "(?#" + document.getElementById(eleId).value.trim() + ")";
            }
        }
    },
    AddNonCapturingOREnclosingGroup: function (ele) {
        if (ele.id == "chkNonCapturingGroup") {
            document.getElementById("chkEnclosingGroup").checked = false;
        }
        else {
            document.getElementById("chkNonCapturingGroup").checked = false;
        }
        if (ele.checked) {
            mREG_EX.DisableMatchGroupInputs(true);
            document.getElementById("txtGroupsAndOptions").value = ele.value.trim();
        }
        else {
            mREG_EX.DisableMatchGroupInputs(false);
            document.getElementById("txtGroupsAndOptions").value = "";
        }
        mREG_EX.AddOptionForGroup();
    },
    AddOptionForGroup: function () {
        //debugger;
        var allOptions = document.getElementById("ChangeOpt_Field2").getElementsByTagName('input');
        var chkSelected = "";
        var chkUnSelected = ""; // (?imn-sx)  (?imn-sx:)
        for (var i = 0; i < allOptions.length; i++) {
            if (allOptions[i].type == "checkbox" && allOptions[i].checked) {
                chkSelected += allOptions[i].value.trim();
            }
            else {
                chkUnSelected += allOptions[i].value.trim();
            }
        }
        if (document.getElementById("chkNonCapturingGroup").checked) {
            document.getElementById("txtGroupsAndOptions").value = "(?" + chkSelected + "-" + chkUnSelected + ":)";
        }
        else {
            document.getElementById("txtGroupsAndOptions").value = "(?" + chkSelected + "-" + chkUnSelected + ")";
        }
    },
    DisableMatchGroupInputs: function (bSet) {
        if (bSet) {
            $("#expDefineMatchGroup").find("input").prop('disabled', true);
            $("#ChangeOpt_Field2").find("input").prop('disabled', false);
        }
        else {
            $("#expDefineMatchGroup").find("input").prop('disabled', false);
            $("#ChangeOpt_Field2").find("input").prop('disabled', true);
        }
    },


    /// Special Characters And Help tabs validation.......

    AddSpecialCharRegEx: function (ele) {
        document.getElementById("txtSpecialChars").value = ele.value.trim();
    },

    showHelp_RegEx: function (ele) {
        //debugger;
        var helpDivId = ele.id.trim();
        $("#Help_Containerdiv > div").hide();
        var allDiv = $("#Help_Containerdiv > div");
        for (var i = 0; i < allDiv.length; i++) {
            if (allDiv[i].dataset.id.trim() == helpDivId) {
                allDiv[i].style.display = "block";
            }
        }
    },

    AddRegularExpression: function () {
        document.getElementById("ExtraField_RegularExpression").value = document.getElementById("txtRExpression_RExp").value.trim();
    },

    TestRegExp: function myfunction(ele) {
        //debugger;
        //var sRegExpression = document.getElementById("txtRExpression_RExp").value;
        //if (sRegExpression.length > 0) {
        //    var isValid = true;
        //    try {
        //        new RegExp(sRegExpression);
        //    } catch (e) {
        //        isValid = false;
        //    }
        //    if (!isValid) {
        //        alert("Invalid regular expression");
        //    }
        //    else {
        //        alert("Regular expression is valid");
        //    }
        //}
        //else {
        //    alert("Provide regular expression to Test.");
        //}
    }
};
var arrFormId = [];
var SearchByFieldNames = [];
var selectedFilter=-1;
var ResourceMessages;
var arrFormsToDelete = [];
var sClickedElement;
var sPreviousClickedElement;
var sPreviousClickedElement_ForPaste;
var iCopiedFormId = 0;
var bDeleteAllForms = false;
var IsBulkExport = false;
var OptonControlValue;
var FieldId;
var Element;
var GridIdRowValues = [];
var ExternalModuleForFields;
var sClickedElement_ForCopy;
var today;
var iRevisionDate = "";
var bCreateNewRevision = false;
var unshALelement;
var FormTypeId_Optioncontrol;
var FormId_OpTionControl;
var FormName_OptionControl;
var arrFormualFields = [];
var arrBodyFormulaColumn = [];
var sClass = "";
var  clickedElement ;
var formEntryGridId;
var lstFilterCriteria;
var objExternalModuleForForms;

var FORM = {

    validateInputNumber: function (eleInput, iType, evt) {
        // 0 For Signed Integer
        // 1 For Unsigned Integer
        // 2 For Signed Decimal
        // 3 For Unsingned Decimal
        debugger;
        var charCode = null;

        try {
            bResult = false;

            if (evt.which == 0 || evt.which == 8) {
                return (true);
            }

            charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode == 45) { // -
                if ((iType == 0 || iType == 2)
                    && eleInput.value.length == 0) { // Signed Integer, Signed Decimal
                    return (true);
                }
            }
            else if (charCode == 46) { // .
                var splitedValue = parseInt(eleInput.value.split('.')[0]);
                if ((iType == 2 || iType == 3)
                    && (eleInput.value.indexOf(".") == -1 || splitedValue == 0)) { // Signed Decimal, Unsingned Decimal
                    return (true);
                }
            }
            else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                return (true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{Form.validateInputNumber} " + err.message, "Exception");
        }

        return (false);
    },
    setPrecisionValue: function (element, maxSize) {
        if (maxSize != null) {
            element.value = element.value == '' ? '' : parseFloat(element.value).toFixed(maxSize);
        }
    },

    getResourceValue: function (sKey, GetResourceMessages) {
        var value = "";
        var result = null;

        result = findKeyValue(sKey, GetResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },
    findKeyValue: function (sKey, arrKeyValue) {
        var iCounter = 0;
        var result = null;
        var obj = null;
        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }
        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }
        return (result);
    },

    autoAdjustColumnsWidth: function () {
        debugger;
        var sGridId = "grd_Form";

        //SETTING 'th'  Width
        var eleHeadingRow = FGRIDCONTROL.getHeadingRow(sGridId);
        FORM.AdjustColumnsWidth(eleHeadingRow);

        //SETTING 'td'  Width
        var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
        for (iRow = 1; iRow <= iTotalRows; iRow++) {
            var eleRowElement = FGRIDCONTROL.getRowElement(sGridId, iRow);
            FORM.AdjustColumnsWidth(eleRowElement);
        }
    },

    AdjustColumnsWidth: function (eleRowElement) {
        debugger;
        var iTotalColumn = eleRowElement.children.length;
        var iColumnWidth = 1000 / iTotalColumn;
        for (iColumn = 0; iColumn < iTotalColumn; iColumn++) {
            eleColumn = eleRowElement.children[iColumn];
            eleColumn.style.minWidth = iColumnWidth + "px";
            eleColumn.style.maxWidth = iColumnWidth + "px";
        }
    },

    resizeColumnsWidth: function (sGridId)
   {
        debugger;
        for (var counter = 2; counter < 4; counter++) {
            $($('#' + sGridId).find('th')[counter]).css({ "width": "3%", "min-width": "3%", "max-width": "3%" });
            $($($('#' + sGridId + '_body').find('tr')[0]).find('td')[counter]).css({ "width": "3%", "min-width": "3%", "max-width": "3%" });
        } 
    },
    AuthInfoClick : function()
    {
      //  debugger;
        $("#Authoinfo").show();
    },
    closeAuthDef: function (ele) {
        //debugger;
        $('#Authoinfo').hide();
    },
    setHeight: function () {
        //debugger;
        //var sClickedElement = $("#hdnClickedElement_" + sClickElement + "").val();
        var sCtrlId = document.getElementById("divFormGrid");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 210 + "px";
        }

        //var sCtrlId = document.getElementsByClassName("FormTabContent");
        //$(sCtrlId).each(function () {
        //    if (this != null && this != undefined) {
        //        this.style.height = $(window).height() - 210 + "px";
        //    }
        //});
        var sCtrlId = document.getElementById("grd_Form");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 260 + "px";
        }

        var sCtrlId = document.getElementById("grd_Form_body");
        if (sCtrlId != null && sCtrlId != undefined) {
            sCtrlId.style.height = $(window).height() - 310 + "px";
        }

        //var sCtrlId = document.getElementById("Properties_Modal_Body");
        //if (sCtrlId != null && sCtrlId != undefined) {
        //    sCtrlId.style.height = $(window).height() - 190 + "px";
        //}

        //var sCtrlId = document.getElementById("ulSearchOn");
        //if (sCtrlId != null && sCtrlId != undefined) {
        //    sCtrlId.style.height = $(window).height() - 190 + "px";
        //}

        //var sCtrlId = document.getElementsByClassName("FooterDiv");
        //$(sCtrlId).each(function () {
        //    if (this != null && this != undefined) {
        //        this.style.top = $(window).height() - 415 + "px";
        //    }
        //});

    },

    setFormCustomizationHeight: function () {
        debugger;
        var sCtrlId = document.getElementsByClassName("bodyGridContainer");
        $(sCtrlId).each(function () {
            if (this != null && this != undefined) {
                this.style.height = $(window).height() - 120 + "px";
            }
        });

        var sCtrlId = document.getElementsByClassName("FormTabPannel");
        $(sCtrlId).each(function () {
            if (this != null && this != undefined) {
                this.style.height = $(window).height() - 120 + "px";
            }
        });

        var sCtrlId = document.getElementsByClassName("AllRulesDiv_Container");
        $(sCtrlId).each(function () {
            if (this != null && this != undefined) {
                this.style.height = $(window).height() - 280 + "px";
            }
        });
    },

    cellChange: function (cellobj, event) {
        //debugger;
        if (cellobj.bLeave == true) {
            return (FORM.onLeave(cellobj, event));
        }
        else {
            FORM.onEnter(cellobj, event);
        }
    },

    onLeave: function (cellobj, event) {
        //debugger
        var element = null;
        var data = null;
        var tag = {};

        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                case MasterDataType.get("MASTER"):
                case MasterDataType.get("EXTERNALTABLE"):
                case MasterDataType.get("FORM"):
                    data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", parseInt(COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                    cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                    break;
                case MasterDataType.get('DATE'):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    data = DATEPICKER.getDate(element);
                    cellobj.setCellData("value", data);
                    cellobj.setCellText(DATEPICKER.getText(element));
                    break;
                case MasterDataType.get("NUMBERLIST"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (element.selectedIndex != -1) {
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText(element.options[element.selectedIndex].text);
                    }
                    break;
                case MasterDataType.get("FRACTION"):
                case MasterDataType.get("NUMBER"):
                    var iTotal = 0;
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText(element.value);
                    var sFormula = cellobj.ColumnAttribute.sformula.trim();
                    if (sFormula.length > 0) {
                        FORM.GoToBodyFormula(cellobj, element.value);
                    }
                    break;
                case MasterDataType.get("TEXT"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText(element.value);
                    break;
                case MasterDataType.get("DOCUMENTVIEWER"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    //cellobj.setCellData("value", element.value);
                    cellobj.setCellText(element.value);
                    break;
                case MasterDataType.get("BOOLEAN"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (element.checked == true) {
                        element.value = true;
                    } else {
                        element.value = false;
                    }
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText(element.value);
                    break;
                case MasterDataType.get("STRINGLIST"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if (element.selectedIndex != -1) {
                        cellobj.setCellData("value", element.options[element.selectedIndex].text);
                        cellobj.setCellText(element.options[element.selectedIndex].text);
                    }
                    break;
                default:
                    break;
            }
            return (true);
        }
    },

    onEnter: function (cellobj, event) {
        debugger;
        var sFilter = "";
        var element = null;
        var sGridCtrlId = "";
        var iValue = 0;
        var data = null;
        var iTotalRow = $("#" + cellobj.Grid.id + "_body")[0].children.length;
        var iCurrentRow = cellobj.iRow;
        if (iTotalRow == iCurrentRow) {
            FGRIDCONTROL.insertRows(cellobj.Grid.id, 0, 1);
        }
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
        if (cellobj.bHidden == true) {
            cellobj.processDefault(event);
            return;
        }
        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("MASTER"):
            case MasterDataType.get("EXTERNALTABLE"):
            case MasterDataType.get("FORM"):
                cellobj.setCellText("");
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                OPTIONCONTROL.setParent(element, cellobj.cell);
                iValue = 0;
                if (COMMON.prototype.isInteger(cellobj.CellData.value) == true) {
                    iValue = parseInt(cellobj.getCellData("value"));
                }
                if (iValue <= 0) {
                    OPTIONCONTROL.clear(element);
                }
                else {
                    OPTIONCONTROL.setControlValue(element, iValue);
                }
                break;
            case MasterDataType.get('DATE'):
                cellobj.setCellText("");
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                DATEPICKER.setParent(element, cellobj.cell);
                iValue = parseInt(cellobj.getCellData("value"));
                if (iValue > 0) {
                    DATEPICKER.setDate(element, iValue, true);
                }
                break;
            case MasterDataType.get("NUMBERLIST"):

            case MasterDataType.get("STRINGLIST"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (cellobj.getCellData("value") == null) {
                    cellobj.setControl(element, "0");
                }
                else {
                    oldSelectedValue = cellobj.getCellData("value");
                    cellobj.setControl(element, cellobj.getCellData("value"));
                }
                $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                break;
            case MasterDataType.get("FRACTION"):
            case MasterDataType.get("NUMBER"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (element != null) {
                    cellobj.setControl(element, cellobj.getCellData("value"));
                    $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                    var sFormula = cellobj.ColumnAttribute.sformula.trim();
                    if (sFormula.length > 0) {
                        FORM.GoToBodyFormula(cellobj, element.value);
                        //objFormula = new FFormula();
                        ////objFormula.m_CalType = transEntryInfo.CalendarType;
                        //objFormula.setRowIndex(0);
                        //objFormula.fnValueNeeded = "FORM.GetFooterFomulaValue";
                        //sClass = ".HFrac";
                        //var Fval = objFormula.Result(sFormula, true);
                        //sClass = ".Frac";
                        //var Fval = objFormula.Result(sFormula, true);
                        //cellobj.setCellData(Fval);
                    }
                }
                break;
            case MasterDataType.get("TEXT"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (element != null) {
                    cellobj.setControl(element, cellobj.getCellData("value"));
                    $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                }
                break;
            case MasterDataType.get("DOCUMENTVIEWER"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (element != null) {
                    //var sClickedElement = $("#hdnClickedElement_" + sClickElement + "").val();
                    $('#custom-file-control_' + sClickedElement + '').html(cellobj.getCellText());
                    $('#custom-file-control_' + sClickedElement + '').val(cellobj.getCellText());
                    element.value = cellobj.getCellText();
                    cellobj.setControl(element, cellobj.getCellText());
                }
                break;
            case MasterDataType.get("BOOLEAN"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                ele = document.getElementById(cellobj.cell.id);
                if (element != null) {
                    if (ele != null) {
                        if (ele.dataset.value == 'True') {
                            element.value = true;
                            element.setAttribute('checked', 'checked');
                        } else {
                            element.value = false;
                            element.removeAttribute('checked');
                        }
                    } else {
                        element.value = false;
                        element.removeAttribute('checked');                       
                    }
                        cellobj.setControl(element, cellobj.getCellData("value"));
                        $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                    
                }
                return;
            default:
                cellobj.processDefault(event);
                break;
        }
    },

    onkeyup: function (element) {
        //var casingIndex = $(element).attr("data-charactercasing");
        //if (casingIndex != undefined && casingIndex != "0") {
        //    var previewTxt = element.value;
        //    if (casingIndex == 1) {
        //        element.value = previewTxt.toUpperCase();
        //    }
        //    else if (casingIndex == 2) {
        //        element.value = previewTxt.toLowerCase();
        //    }
        //    else if (casingIndex == 3) {
        //        element.value = previewTxt.replace(/\w\S*/g, function (txt) {
        //            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        //        });
        //    }
        //    else {
        //        var str = previewTxt.substring(0, 1);
        //        element.value = str.toUpperCase() + previewTxt.substring(1, previewTxt.length).toLowerCase();
        //    }
        //}
    },

    GoToBodyFormula: function (cellobj, sValue) {
        if (arrFormualFields.length == 0) {
            FORM.GetBodysFormulaColumn(cellobj.Grid.id);
        }

        var FormualFields = {};
        FormualFields.iColumn = cellobj.iColumn;
        FormualFields.iRow = cellobj.iRow;
        FormualFields.sFormualField = cellobj.ColumnAttribute.svariable.trim();
        FormualFields.sFormulaValue = cellobj.ColumnAttribute.sformula;
        FormualFields.Value = sValue;
        var FV = -1;
        //if (sValue != cellobj.getCellData()) {
        var sBodyFormula = "";
        if (arrFormualFields.length > 0) {
            sBodyFormula = arrFormualFields[0].sFormulaValue;
            for (var ip = 0; ip < arrFormualFields.length  ; ip++) {

                if (arrFormualFields[ip].sFormualField == cellobj.ColumnAttribute.svariable && arrFormualFields[ip].iRow == FormualFields.iRow) {
                    arrFormualFields[ip].Value = FormualFields.Value;
                    FV = ip;
                    break;
                }

            }
            if (FV == -1) {
                arrFormualFields.push(FormualFields);
            }
        }
        else {
            arrFormualFields.push(FormualFields);
        }

        var fval = 0;
        objFormula = new FFormula();
        //objFormula.m_CalType = transEntryInfo.CalendarType;
        objFormula.setRowIndex(cellobj.iRow);
        objFormula.fnValueNeeded = "FORM.GetBodyFormulaValue";
        if (cellobj.ColumnAttribute.sformula.trim().length != 0) {
            fval = objFormula.Result(cellobj.ColumnAttribute.sformula, true);
            if (isNaN(fval))
                fval = 0;
            cellobj.setCellData("value", fval);
            cellobj.setCellText(FConvert.toInt(fval));
        }
        else {
            fval = objFormula.Result(sBodyFormula, true);
            if (isNaN(fval))
                fval = 0;
            cellobj = FGRIDCONTROL.getCellObject(cellobj.Grid.id, cellobj.iRow, arrFormualFields[0].iColumn);
            cellobj.setCellData("value", fval);
            cellobj.setCellText(FConvert.toInt(fval));
        }
        if (arrFormualFields.length > 0) {

            for (var ip = 0; ip < arrFormualFields.length  ; ip++) {

                if (arrFormualFields[ip].sFormualField == cellobj.ColumnAttribute.svariable && arrFormualFields[ip].iRow == cellobj.iRow) {
                    arrFormualFields[ip].Value = fval;
                    break;
                }
            }
        }

        //FormualFields.Value = FConvert.toInt(fval);        
    },
    GetBodysFormulaColumn: function (sGridId) {
        for (var iCol = 1; iCol <= FGRIDCONTROL.getTotalColumns(sGridId) ; iCol++) {
            var objcell = FGRIDCONTROL.getCellObject(sGridId, 1, iCol);
            if (objcell.ColumnAttribute.datatypeid == 6 && objcell.ColumnAttribute.sformula.trim().length > 0) {
                var FormualFields = {};
                FormualFields.iColumn = objcell.iColumn;
                FormualFields.iRow = objcell.iRow;
                FormualFields.sFormualField = objcell.ColumnAttribute.svariable.trim();
                FormualFields.sFormulaValue = objcell.ColumnAttribute.sformula.trim();
                FormualFields.Value = 0;
                arrFormualFields.push(FormualFields);
            }
        }
    },
    GetBodyFormulaValue: function (FFormula, sFormula, iRow, objTag) {
        if (sFormula.Var.length == 0)
            return 0;
        else {
            if (arrFormualFields.length > 0) {
                for (var loop = 0; loop < arrFormualFields.length ; loop++) {
                    if (arrFormualFields[loop].iRow == iRow && arrFormualFields[loop].sFormualField == sFormula.Var) {
                        return FConvert.toInt(arrFormualFields[loop].Value);
                    }
                }
            }
            //return 0;
            var previousClass = sClass;
            sClass = ".HFrac";
            var FVal = FORM.GetFooterFomulaValue(FFormula, sFormula, iRow);
            sClass = previousClass;
            return FVal;
        }
    },
    GOToFooterFormula: function (IsFooter) {
        //debugger
        sClass = IsFooter == false ? ".HFrac" : ".Frac";
        var FractionElements = document.querySelectorAll(sClass);
        for (var iEle = 0; iEle < FractionElements.length; iEle++) {
            var sFormula = FractionElements[iEle].getAttribute("sFormula");
            if (sFormula.trim().length > 0) {
                objFormula = new FFormula();
                //objFormula.m_CalType = transEntryInfo.CalendarType;
                objFormula.setRowIndex(0);
                objFormula.fnValueNeeded = "FORM.GetFooterFomulaValue";
                var Fval = objFormula.Result(sFormula, true);
                FractionElements[iEle].value = Fval;
            }
        }
    },
    GetFooterFomulaValue: function (FFormula, sFormula, iRow) {
        //debugger
        var FractionElements = document.querySelectorAll(sClass);
        for (var iEle = 0; iEle < FractionElements.length; iEle++) {
            var sVariable = FractionElements[iEle].getAttribute("sVariable");
            if (sVariable.trim() == sFormula.Var) {
                return parseInt(FractionElements[iEle].value);
            }
        }
        if (sClass != ".HFrac")
            return FORM.GetBodyFormulaValue(FFormula, sFormula, 1);
        else
            return 0;
    },

    rowChange: function (cellobj, event) {
        //debugger;
        var iRow = event.target.parentElement.rowIndex - 2;
        var isChecked = $("#chkSelect" + iRow).is(":checked");
        if (!isChecked) {
            $("input.chkSelect:checkbox:not(:checked)").each(function () {
                $(this.parentElement.parentElement.parentElement).removeClass("FRowColor");
            })
            $("#grd_Form_body tr").removeClass("FRowColor");
            $(event.target.parentElement).addClass("FRowColor");
        }
        else {
            $("#grd_Form_body tr").removeClass("FRowColor");
            $(event.target.parentElement).addClass("FRowColor");

        }

        //var iRow = event.target.parentElement.rowIndex - 2;
        //$(event.target.parentElement.parentElement.children).each(function () {
        //        $(this).removeClass("FRowColor");
        //    })
        //$(event.target.parentElement).addClass("FRowColor");
    },

    cellDblClick: function (cellobj, event) {
        //debugger;
        FORM.GetForm($("#btnEdit")[0]);
    },

    onSelectAll: function (ele) {
        if (ele.checked) {
            $(".chkSelect").prop("checked", true);
            $("#grd_Form_body tr").addClass("FRowColor");
        }
        else {
            $(".chkSelect").prop("checked", false);
            $("#grd_Form_body tr").removeClass("FRowColor");
        }
    },

    onSelectRow: function (ele) {
        debugger
        if (ele.checked) {
            $("#grd_Form_body tr").removeClass("FRowColor");
            $(ele.parentElement.parentElement).addClass("FRowColor");
        }
        else {
            $(ele.parentElement.parentElement).removeClass("FRowColor");
        }

        if ($(".chkSelect").length == $("input.chkSelect:checked").length) {
            $("#chkSelectAll").prop("checked", true);
        }
        else {
            $("#chkSelectAll").prop("checked", false);
        }
    },

    setBookMark: function (ele) {
        debugger;
        if ($(ele).hasClass("FormBookmark")) {
            $(ele).removeClass("FormBookmark");
            //$(ele).addClass("icon-bookmark");
            $(ele).css('color', 'red');
        }
        else {
            $(ele).addClass("FormBookmark");
            //$(ele).removeClass("icon-bookmark");
            $(ele).css('color', 'black');
        }
    },

    ToggleTabs: function (ele) {
        debugger;
        $(".nav-Item").removeClass("active");
        $(ele.children).addClass("active");
    },

    GetForm: function (ele) {
        debugger;
        try {
            var FormId = 0;
            var ClickedElement = ele.id;
            sPreviousClickedElement = ClickedElement;
            sPreviousClickedElement_ForPaste = ClickedElement;
            var FormTypeId = parseInt($("#hdnFormTypeId").val());

            //var ExtModCustomData = {};
            //ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.BeforeLoad;
            //FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.BeforeLoad,
            //                                                                0,
            //                                                                'FExternalModuleForms.continueProcess',
            //                                                                ExtModCustomData);
            if (ClickedElement == "btnNew") {
                if (FormTypeId > 0) {
                    var urlPath = GLOBAL.getContextPath("FormEntry", "Form", "Forms");
                    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: FormId, sClickedElement: ClickedElement }, "HTML", true, "FORM.GetForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ClickedElement);
                }
            }
            else {
                if ($("#grd_Form_body tr.FRowColor").length == 0) {
                    COMMON.prototype.showMessage("Select At least One Row in Grid to Edit.");
                    return false;
                }
                else {
                    if ($("#grd_Form_body tr.FRowColor").length > 1) {
                        COMMON.prototype.showMessage("Multiple Row(s) cannot be edited. Select Only One Row in Grid to Edit.");
                        return false;
                    }
                    else {
                        if (FormTypeId > 0) {
                            if ($("#grd_Form_body tr.FRowColor").length > 0) {
                                var iSelectedRow = $("#grd_Form_body tr.FRowColor")[0].rowIndex - 2;
                                var cellObject = FGRIDCONTROL.getCellObject("grd_Form", iSelectedRow, 4);
                                FormId = cellObject.getCellData("value");
                            }
                            var urlPath = GLOBAL.getContextPath("FormEntry", "Form", "Forms");
                            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: FormId, sClickedElement: ClickedElement }, "HTML", true, "FORM.GetForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ClickedElement);
                        }
                    }
                }
            }
        } catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetForm " + ex.message);
            return false;
        }
    },

    GetForm_Success: function (flag, data, ClickedElement) {
        //debugger;
        if (flag) {
            $("#FormEntry_ModalContent").html("");
            $("#FormEntry_ModalContent").html(data);
            $("#FormEntry_Modal").modal("show");
            FORM.setHeight();
            if (ClickedElement == "btnNew" || ClickedElement == "btnEdit" || ClickedElement == "btnClone") {
                if (document.getElementById('iRevisionDate_' + ClickedElement) != null) {
                    iRevisionDate = DATEPICKER.getDate('iRevisionDate_' + ClickedElement);
                }
                if (parseInt($('#txtRevision_' + ClickedElement).val()) < parseInt($('#hdnFCurrentRevisionId_' + ClickedElement).val())) {
                    $('#btnSaveRevision_' + ClickedElement).css('pointer-events', "none");
                    $('#btnDeleteRevision_' + ClickedElement).css('pointer-events', "none");
                    //$('#btnDeleteRevision_' + ClickedElement).addClass('grey');
                    $('#btnDeleteRevision_' + ClickedElement).css('opacity', '0.5');
                    $('#btnSave_' + ClickedElement).css('pointer-events', "none");
                    $('#btnSave_' + ClickedElement).css('opacity', '0.5');
                    $('#btnSaveRevision_' + ClickedElement).css('opacity', '0.5');
                }
                else {
                    $('#btnSaveRevision_' + ClickedElement).css('pointer-events', "auto");
                    $('#btnDeleteRevision_' + ClickedElement).css('pointer-events', "auto");
                    $('#btnDeleteRevision_' + ClickedElement).css('opacity', '1');
                    //$('#btnDeleteRevision_' + ClickedElement).removeClass('grey');
                    $('#btnSave_' + ClickedElement).css('pointer-events', "auto");
                    $('#btnSave_' + ClickedElement).css('opacity', '1');
                    $('#btnSaveRevision_' + ClickedElement).css('opacity', '1');

                }
                if (parseInt($('#hdnFCurrentRevisionId_' + ClickedElement).val()) == 0) {
                    $('#btnDeleteRevision_' + ClickedElement).css('pointer-events', "none");
                    $('#btnDeleteRevision_' + ClickedElement).css('opacity', '0.5');
                    //$('#btnMasterRevisionDeleteClick').addClass('grey');
                }

                    if ($('.HasFilter').length > 0) {
                    $(document).on('focus', ".HasFilter", function (eventt) {
                        debugger
                        FORM.ApplyFilterForField($(this));
                        $(this).off('click');
                        eventt.stopImmediatePropagation();
                        });
                     }

                FORM.setRules();
                if ($('.IncrementalBehaviour').length > 0) {
                    $('.IncrementalBehaviour').each(function () {
                        FORM.SetIncremental(this);
                    })
                }
                
                //debugger;
                var ExtModCustomData = {};
                ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.AfterLoad;
                FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.AfterLoad,
                                                                                0,
                                                                                'FExternalModuleForms.continueProcess',
                                                                                ExtModCustomData);
            }

        }
    },

    GetForm_OptionControl: function (ele) {
        debugger;
        try {
            var ClickedElement = ele.id;
            sPreviousClickedElement_ForPaste = ClickedElement;
            var FormTypeId = ele.getAttribute('value');
            var DataType = ele.getAttribute('datatype');
            if (FormTypeId > 0 && DataType == 21) {
                var urlPath = GLOBAL.getContextPath("FormEntry_OptionControl", "Form", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, sClickedElement: ClickedElement }, "HTML", true, "FORM.GetForm_OptionControl_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else {
                getNewMasterForOC(ele, true);
            }

        } catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetForm_OptionControl " + ex.message);
            return false;
        }
    },

    GetForm_OptionControl_Success: function (flag, data) {
        debugger;
        if (flag) {
            //var sClickedElement = $("#hdnClickedElement_" + sClickElement + "").val();
            $("#FormEntry_OptionControl_ModalContent").html("");
            $("#FormEntry_OptionControl_ModalContent").html(data);
            $("#FormEntry_OptionControl_Modal").modal("show");
            FORM.setHeight();
        }
    },

    GetForm_Voucher: function (ele, objData) {
        //debugger;
        try {
            var ClickedElement = ele.id;
            var urlPath = GLOBAL.getContextPath("ExternalModuleForm", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: objData.FormId, iModuleType: objData.iModuleType, sClickedElement: ClickedElement }, "HTML", true, "FORM.GetForm_Voucher_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ClickedElement);


        } catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetForm_Voucher " + ex.message);
            return false;
        }
    },

    GetForm_Voucher_Success: function (flag, data, ClickedElement) {
        //debugger;
        if (flag) {
            $("#" + ClickedElement).html("");
            $("#" + ClickedElement).html(data);
            $("#ExternalModule_Form_Modal").modal("show");
            var ExtModCustomData = {};
            ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.AfterLoad;
            FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.AfterLoad,
                                                                            0,
                                                                            'FExternalModuleForms.continueProcess',
                                                                            ExtModCustomData);
        }
    },

    SaveFormInExternalModule: function (sClickedElement, iModuleType) {
    // debugger
        try {
            var bAllowRevision = false;
            var bApplyChangesToAttributedProducts = false;
            var bCreateDiffAssetsForEachQty = false;

            var bDoNotRestrict = false;
            var bIdSuppliedForForms = false;
            var bImporting = false;
            var IsAttribute = false;
            var IsGroup = false;
            var iRevisionId = -1;

            var sCreatedBy = $("#lblCreatedBy_" + sClickedElement + "").length > 0 ? $("#lblCreatedBy_" + sClickedElement + "").val() : "";
            var sCreatedDate = $("#lblCreatedDate_" + sClickedElement + "").length > 0 ? $("#lblCreatedDate_" + sClickedElement + "").val() : "";
            var iFormId = $("#hdnFormId_" + sClickedElement + "").val();
            var sFormName = $("#hdnFormName_" + sClickedElement + "").val();
            var iFormTypeId = parseInt($("#hdnFormEntryTypeId").val());
            var sModifiedBy = $("#lblModifiedBy_" + sClickedElement + "").length > 0 ? $("#lblModifiedBy_" + sClickedElement + "").val() : "";
            var sModifiedDate = $("#lblModifiedDate_" + sClickedElement + "").length > 0 ? $("#lblModifiedDate_" + sClickedElement + "").val() : "";
            var sModule = $("#hdnModule").val();
            var iModifiedUserId = $("#hdnModifiedUserId_" + sClickedElement + "").val();
            var iNoOfDecimals = $("#hdnNoOfDecimal").val();
            var sStatus = $("#hdnStatus_" + sClickedElement + "").val();

            var arrHeaderFields = [];
            var bDisplayMsg = false;
            $(".HeaderField_" + sClickedElement + "").each(function (index, element) {
                var IsMandatory = false;
                if ($(element).attr('isDefault') == 'False') {
                    IsMandatory = (document.getElementById(element.id).classList.contains('Ftxtbox-M')) ? true : false;
                }
                //debugger
                if ($(element).hasClass("OptionControl")) {
                    var iLinkType = parseInt($(element).attr('ilinktype'));
                    if (iLinkType == 0) {
                        var Field = {
                            ID: $(element).attr('fieldid'),
                            Name: $(element).attr('sfieldname'),
                            Tag: {
                                MasterId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: $(element).attr('formdatatype')
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrHeaderFields.push(Field);
                            }
                        }
                    }
                    else {
                        var Field = {
                            ID: $(element).attr('fieldid'),
                            Name: $(element).attr('sfieldname'),
                            Tag: {
                                FormId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: $(element).attr('formdatatype')
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrHeaderFields.push(Field);
                            }
                        }
                    }
                }
                else if ($(element).hasClass("DatePicker")) {
                    var Field = {
                        ID: $("#hdn" + element.id).attr('data-fieldid'),
                        Name: $("#hdn" + element.id).attr('data-sfieldname'),
                        Tag: DATEPICKER.getDate(element.id)
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("clsFormdatetime")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: parseInt($(element).attr('value'))
                    }
                    if (Field.Tag != undefined) {
                        arrHeaderFields.push(Field);
                    }
                }
                else if ($(element).hasClass("TimePicker")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('sfieldname'),
                        Tag: 0// DATETIMEPICKER.getDate(element)
                    }
                    if (Field.Tag != undefined) {
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("DropDown")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("CheckBox")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).is(":checked")
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
            })
            if (bDisplayMsg)
                return false;
            var objHeader_MAPIDataRow = {
                Fields: arrHeaderFields
            }
            var objHeaderData = {
                MAPIDataRow: objHeader_MAPIDataRow
            }

            var arrBodyTables = [];
            $($("#tabContent_" + sClickedElement + "").find(".fgrid")).each(function (index, element) {
                var IsMandatory = false;
                //debugger;
                var sTabName = "";
                var arrMAPIDataRow = [];
                var sGridId = element.id;
                FGRIDCONTROL.update(sGridId);
                var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
                for (iRow = 1; iRow <= iTotalRows; iRow++) {
                    var arrBodyFields = [];
                    var RowData = FGRIDCONTROL.getRowValue(sGridId, iRow);
                    if (RowData != null && RowData != undefined) {
                        if (RowData.length > 2) {
                            if (RowData[2].Text != "") {
                                var iTotalColumns = RowData.length;
                                for (iColumn = 0; iColumn < iTotalColumns; iColumn++) {
                                    if (RowData[iColumn].MetaData.isdefault == false) {
                                        IsMandatory = RowData[iColumn].MetaData.ismandatory;
                                    }
                                    else {
                                        IsMandatory = false;
                                    }
                                    sTabName = RowData[iColumn].MetaData.tabname;
                                    if (RowData[iColumn].MetaData.datatypeid == 12 || RowData[iColumn].MetaData.datatypeid == 14 || RowData[iColumn].MetaData.datatypeid == 21) {
                                        // debugger
                                        var iLinkType = parseInt(RowData[iColumn].MetaData.ilinktype);
                                        if (iLinkType == 0) {
                                            var Field = {
                                                ID: RowData[iColumn].MetaData.fieldid,
                                                Name: RowData[iColumn].MetaData.fieldname,
                                                Tag: {
                                                    MasterId: RowData[iColumn].Value,
                                                    Name: RowData[iColumn].Text
                                                },
                                                ExtraInfo: RowData[iColumn].MetaData.datatypeid
                                            }
                                            if (IsMandatory && Field.Tag.Name.trim() == "") {
                                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                                GLOBAL.LoadingEnd();
                                                bDisplayMsg = true;
                                                return false;
                                            }
                                            if (Field.Name == "iFormId" || Field.Name == "iRowIndex") {
                                                arrBodyFields.push(Field);
                                            }
                                            else {
                                                if (Field.Tag.Name.trim() != "" && Field.Tag.Name.trim() != "0") {
                                                    arrBodyFields.push(Field);
                                                }

                                            }
                                        }
                                        else {
                                            var Field = {
                                                ID: RowData[iColumn].MetaData.fieldid,
                                                Name: RowData[iColumn].MetaData.fieldname,
                                                Tag: {
                                                    FormId: RowData[iColumn].Value,
                                                    Name: RowData[iColumn].Text
                                                },
                                                ExtraInfo: RowData[iColumn].MetaData.datatypeid
                                            }
                                            if (IsMandatory && Field.Tag.Name.trim() == "") {
                                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                                GLOBAL.LoadingEnd();
                                                bDisplayMsg = true;
                                                return false;
                                            }
                                            if (Field.Name == "iFormId" || Field.Name == "iRowIndex") {
                                                arrBodyFields.push(Field);
                                            }
                                            else {
                                                if (Field.Tag.Name.trim() != "" && Field.Tag.Name.trim() != "0") {
                                                    arrBodyFields.push(Field);
                                                }
                                            }
                                        }

                                    }
                                    else {
                                        var TagValue = RowData[iColumn].MetaData.fieldname == "biDocumentName" ? RowData[iColumn - 1].Text : RowData[iColumn].Value;
                                        var Field = {
                                            ID: RowData[iColumn].MetaData.fieldid,
                                            Name: RowData[iColumn].MetaData.fieldname,
                                            Tag: TagValue
                                        }
                                        if (IsMandatory && Field.Tag == "") {
                                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                            GLOBAL.LoadingEnd();
                                            bDisplayMsg = true;
                                            return false;
                                        }
                                        if (Field.Name == "iFormId" || Field.Name == "iRowIndex") {
                                            arrBodyFields.push(Field);
                                        }
                                        else {
                                            if (Field.Tag != "" && Field.Tag != "0") {
                                                arrBodyFields.push(Field);
                                            }
                                        }
                                    }
                                }

                                var MAPIDataRow = {
                                    Fields: arrBodyFields
                                }
                                if (MAPIDataRow.Fields.length > 0) {
                                    arrMAPIDataRow.push(MAPIDataRow);
                                }
                            }
                        }
                    }
                }

                if (bDisplayMsg)
                    return;

                if (arrMAPIDataRow.length > 0) {
                    var BodyTable = {
                        MAPIDataRow: arrMAPIDataRow,
                        TabName: sTabName
                    }
                    arrBodyTables.push(BodyTable)
                }
            })

            var objBodyData = {
                BodyTables: arrBodyTables
            }

            var arrFooterFields = [];
            $(".FooterField_" + sClickedElement + "").each(function (index, element) {
                var IsMandatory = false;
                if ($(element).attr('isDefault') == 'False') {
                    IsMandatory = (document.getElementById(element.id).classList.contains('Ftxtbox-M')) ? true : false;
                }
                if ($(element).hasClass("OptionControl")) {
                    var iLinkType = parseInt($(element).data('ilinktype'));
                    if (iLinkType == 0) {
                        var Field = {
                            ID: $(element).data('fieldid'),
                            Name: $(element).data('sfieldname'),
                            Tag: {
                                MasterId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: $(element).data('formdatatype')
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrFooterFields.push(Field);
                            }
                        }
                    }
                    else {
                        var Field = {
                            ID: $(element).data('fieldid'),
                            Name: $(element).data('sfieldname'),
                            Tag: {
                                FormId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: $(element).data('formdatatype')
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrFooterFields.push(Field);
                            }
                        }
                    }
                }
                else if ($(element).hasClass("DatePicker")) {
                    var Field = {
                        ID: $("#hdn" + element.id).data('fieldid'),
                        Name: $("#hdn" + element.id).data('sfieldname'),
                        Tag: DATEPICKER.getDate(element.id)
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("clsFormdatetime")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: parseInt($(element).attr('value'))
                    }
                    if (Field.Tag != undefined) {
                        arrHeaderFields.push(Field);
                    }
                }
                else if ($(element).hasClass("TimePicker")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('sfieldname'),
                        Tag: 0 //DATETIMEPICKER.getDate(element)
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("DropDown")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("CheckBox")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).is(":checked")
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
                else {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
            })
            if (bDisplayMsg) {
                return false;
            }
            var objFooter_MAPIDataRow = {
                Fields: arrFooterFields
            }
            var objFooterData = {
                MAPIDataRow: objFooter_MAPIDataRow
            }

            //debugger;
            if (arrHeaderFields.length == 1 && arrBodyTables.length == 0 && arrFooterFields.length == 1) {
                COMMON.prototype.showMessage("Add fields to save Form");
                return false;
            }

            var FormApi = {
                BodyData: objBodyData,
                CreatedBy: sCreatedBy,
                CreatedDate: sCreatedDate,
                DoNotRestrict: bDoNotRestrict,
                HeaderData: objHeaderData,
                FooterData: objFooterData,
                IdSuppliedForForms: bIdSuppliedForForms,
                Importing: bImporting,
                FormId: iFormId,
                FormName: sFormName,
                FormTypeId: iFormTypeId,
                ModifiedBy: sModifiedBy,
                ModifiedDate: sModifiedDate,
                ModifiedUserId: iModifiedUserId,
                ModuleName: sModule,
                NoOfDecimals: iNoOfDecimals,
                Status: sStatus,
            }

            if ($('.clsBeforeSave').length > 0) {
                $('.clsBeforeSave').each(function () {
                    //
                    FormEntryRules.getControlRules($(this), 'BeforeSave');
                });
            }

            var ExtModCustomData = {};
            ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.BeforeSave;
            FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.BeforeSave,
                                                                            0,
                                                                            '',
                                                                            ExtModCustomData);


            var urlPath = GLOBAL.getContextPath("SaveForm", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { strFormAPI: JSON.stringify(FormApi) }, "JSON", true, "FORM.SaveFormInExternalModule_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", iModuleType);

        }
        catch (ex) {
            alert("Exception - FORM.SaveForm " + ex.message);
        }
    },

    SaveFormInExternalModule_Success: function (flag, data, iModuleType) {
        //debugger;
        if (flag) {
            //var ExtModCustomData = { };
            //ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.AfterSave;
            //FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.AfterSave,
            //                                                                0,
            //                                                                'FExternalModuleForms.continueProcess',
            //                                                                ExtModCustomData);

            $('#ExternalModule_Form_Modal').modal('hide');
            FWrapper.continueForm(iModuleType, 1, "SaveFormInExternalModule")
        }
    },

    CloseFormInExternalModule: function (iModuleType) {
        //debugger;
        var ExtModCustomData = {};
        ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.BeforeClose;
        $('#ExternalModule_Form_Modal').modal('hide');
        FWrapper.continueForm(iModuleType, 0, "CloseFormInExternalModule")

    },

    GetFormGrid: function (ele, iRowToHighlight) {
        //debugger;
        try {
            var ShowUnAuthorizedRecord = false;
            var ShowClosedRecord = false;
            var FormTypeId = FormTypeId_Optioncontrol == undefined ? parseInt($("#hdnFormTypeId").val()) : FormTypeId_Optioncontrol;
            var SelectedPageNo = isNaN(parseInt($(".selectedPage").text())) ? 1 : parseInt($(".selectedPage").text());
            if ($(ele).hasClass("NextPage")) {
                SelectedPageNo = SelectedPageNo + 1;
            }
            else if ($(ele).hasClass("PreviousPage")) {
                SelectedPageNo = SelectedPageNo - 1;
            }
            else if ($(ele).hasClass("ShowAllUnauthorisedRecords")) {
                unshALelement = "";
                unshALelement = ele;
                ShowUnAuthorizedRecord = true;
                $('#id_showAllUnAuth').addClass('EnableAuthBtns');
                $(".liFormAuthorize").show();
            }
            else if ($(ele).hasClass("ShowAllClosedRecords")) {
                ShowClosedRecord = true;
                $(".liFormAuthorize").hide();
                $('#id_showAllUnAuth').removeClass('EnableAuthBtns');
            }
            else {
                $(".liFormAuthorize").hide();
                $('#id_showAllUnAuth').removeClass('EnableAuthBtns');

            }
            var arrRetainSelection = FORM.RetainSelection();
            if (FormTypeId > 0) {
                var urlPath = GLOBAL.getContextPath("FormGrid", "Form", "Forms");
                if (ele == "btnDelete") {
                    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iSelectedPage: SelectedPageNo, bShowUnAuthorizedRecord: ShowUnAuthorizedRecord, bShowClosedRecord: ShowClosedRecord, arrRetainSelection: arrRetainSelection }, "HTML", false, "FORM.GetFormGrid_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", iRowToHighlight);
                }
                else {
                    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iSelectedPage: SelectedPageNo, bShowUnAuthorizedRecord: ShowUnAuthorizedRecord, bShowClosedRecord: ShowClosedRecord, arrRetainSelection: arrRetainSelection }, "HTML", true, "FORM.GetFormGrid_Success", "", "", iRowToHighlight);
                }
            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetFormGrid " + ex.message);
            return false;
        }
    },
    GetFormGrid_Success: function (flag, data, iRowToHighlight) {
        //debugger;
        if (flag) {
            $("#divFormGrid").html("");
            $("#divFormGrid").html(data);
            FORM.setHeight();
            FORM.resizeColumnsWidth("grd_Form");
            $("#grd_Form_row_" + iRowToHighlight).addClass("FRowColor");
        }
    },

    RetainSelection: function () {
        //debugger;
        if ($("#chkRetainSelection").is(":checked")) {
            $(".chkSelect").each(function () {
                //debugger;
                var iFormId = parseInt(this.attributes["Formid"].value);
                if ($(this).is(":checked")) {
                    if (arrFormId.length > 0) {
                        var bExist = arrFormId.includes(iFormId);
                        if (!bExist) {
                            arrFormId.push(iFormId);
                        }
                    }
                    else {
                        arrFormId.push(iFormId);
                    }
                }
                else {
                    if (arrFormId.length > 0) {
                        var bExist = arrFormId.includes(iFormId);
                        if (bExist) {
                            arrFormId.splice(arrFormId.indexOf(iFormId), 1);
                        }
                    }
                }
            });
        }
        else {
            arrFormId = [];
        }
        return arrFormId;
    },

    GetSearchOn: function () {
        //debugger;
        try {
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            if (FormTypeId > 0) {
                var urlPath = GLOBAL.getContextPath("GetSearchOn", "Form", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, arrSearchByFieldNames: SearchByFieldNames }, "HTML", true, "FORM.GetSearchOn_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetSearchOn " + ex.message);
            return false;
        }
    },

    GetSearchOn_Success: function (flag, data) {
        //debugger;
        if (flag) {
            $("#SearchOn_Modal").modal("show");
            $("#SearchOn_Modal_Body").html("");
            $("#SearchOn_Modal_Body").html(data);
            FORM.setHeight();
        }
    },

    GetAdvanceSearch: function () {
        //debugger;
        try {
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            var FormName = $("#hdnFormName").val();
            var Module = $("#hdnModule").val();
            if (FormTypeId > 0) {
                var fnResult = NETWORK.executeServerMethod(
                               GLOBAL.getContextPath("getAdvanceSearch", "Form", "Forms"), true, { FormTypeId: FormTypeId, sModule: Module, sFormName: FormName }, "HTML", true, "FORM.GetAdvanceSearch_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetAdvanceSearch " + ex.message);
            return false;
        }
    },

    GetAdvanceSearch_Success: function (flag, data) {
        //debugger;
        if (flag) {
            $("#AdvanceSearch_Modal").modal("show");
            $("#AdvanceSearch_Modal_Body").html("");
            $("#AdvanceSearch_Modal_Body").html(data);
            FORM.setHeight();
        }
    },

    SearchForm: function (ele, e) {
        //debugger;
        try {
            var FormId = 0;
            var IsAdvanceSearch = false;
            var SearchByText = false;
            var SearchText = "";
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            var Retainselectionchecked = document.getElementById("chkRetainSelection").checked;
            var arrRetainSelection = FORM.RetainSelection();
            var searchLeave = false;
            if (FormTypeId > 0) {
                if (SearchByFieldNames.length == 0) {

                }
                if (ele.id == "txtSearchForm") {
                    if (e.keyCode == 13) {
                        OPTIONCONTROL.clear("optSearchForm");
                        SearchText = $("#txtSearchForm").val();
                        if (SearchText.trim().length > 0) {
                            SearchByText = true;
                        }
                        searchLeave = false;
                        var urlPath = GLOBAL.getContextPath("SearchForm", "Form", "Forms");
                        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: FormId, bSearchByText: SearchByText, sSearchText: SearchText, arrSearchByFieldNames: SearchByFieldNames, IsAdvanceSearch: IsAdvanceSearch, SelectdFilterId: selectedFilter, arrRetain: arrRetainSelection, IsRetainselectionchecked: Retainselectionchecked, IssearchLeave: searchLeave }, "HTML", true, "FORM.SearchForm_Success", "", "");

                    }
                }
                else {
                    $("#txtSearchForm").val("");
                    searchLeave = true;
                    FormId = OPTIONCONTROL.getControlValue("optSearchForm");
                    var urlPath = GLOBAL.getContextPath("SearchForm", "Form", "Forms");
                    if (FormId > 0 & !isNaN(FormId)) {
                        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: FormId, bSearchByText: SearchByText, sSearchText: SearchText, arrSearchByFieldNames: SearchByFieldNames, IsAdvanceSearch: IsAdvanceSearch, SelectdFilterId: selectedFilter, arrRetain: arrRetainSelection, IsRetainselectionchecked: Retainselectionchecked, IssearchLeave: searchLeave }, "HTML", true, "FORM.SearchForm_Success", "", "");
                    }
                }
            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetFilteredGrid " + ex.message);
            return false;
        }
    },

    SetAdvanceSearch: function () {
        //debugger;
        try {
            SearchByFieldNames = [];
            var FormId = 0;
            var SearchByText = true;
            var IsAdvanceSearch = true;
            var SearchText = $("#AdvanceFilterQuery").text().trim();
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            var retainSelectionChecked = document.getElementById("chkRetainSelection").checked;
            var arrRetainSelection = FORM.RetainSelection();
            if (FormTypeId > 0) {
                $("#txtSearchForm").val("");
                OPTIONCONTROL.clear("optSearchForm");
                if (SearchText != "") {
                    var fnResult = NETWORK.executeServerMethod(
                                                  GLOBAL.getContextPath("SearchForm", "Form", "Forms"), true, { iFormTypeId: FormTypeId, iFormId: FormId, bSearchByText: SearchByText, sSearchText: SearchText, arrSearchByFieldNames: SearchByFieldNames, IsAdvanceSearch: IsAdvanceSearch, SelectdFilterId: selectedFilter, arrRetain: arrRetainSelection, IsRetainselectionchecked: retainSelectionChecked }, "HTML", true, "FORM.SearchForm_Success", "", "");
                }

            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetFilteredGrid " + ex.message);
            return false;
        }
    },

    SearchForm_Success: function (flag, data) {
        debugger;
        try {
            if (flag) {
                $("#divFormGrid").html("");
                $("#divFormGrid").html(data);
                FORM.setHeight();
                FORM.resizeColumnsWidth("grd_Form");
                var iCheckedCheckboxCount = $("input.chkSelect:checked").length;
                if (iCheckedCheckboxCount == 0) {
                    $("#grd_Form_row_1").addClass("FRowColor");
                }
                else {
                    $($("input.chkSelect:checked")[0].parentElement.parentElement.parentElement).addClass("FRowColor");
                }

                if (document.getElementById("chkRetainSelection").checked == true) {

                }
            }
        }
        catch (ex) {
            alert("Exception - SearchForm_Success " + ex.message);
        }
    },

    SetSearchOn: function () {
        //debugger;
        SearchByFieldNames = [];
        selectedFilter = $('#ddlSelectFilter').val();
        $(".chkSearchOn").each(function () {
            if ($(this).is(":checked")) {
                var sFieldName = $(this).attr("value");
                SearchByFieldNames.push(sFieldName);
            }
        })
    },

    GenerateAdvanceQuery: function () {
        debugger;
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        var iMenuId = $("#hdnMenuId").val();
        var FormName = $("#hdnFormName").val();
        var Module = $("#hdnModule").val();
        var arrFilter = FILTER.getFilterValue(iMenuId, 1);
        if (arrFilter == "" || arrFilter.length == 0) {
            $('#advanceSearchOk').css({ "pointer-events": "none" });
            COMMON.prototype.showMessage(FORM.getResourceValue("msgValuecannotbeleaveempty", ResourceMessages));

            return false;
        }
        else if (arrFilter[0].CompareValue == "" && (arrFilter[0].Operator != 6 && arrFilter[0].Operator != 7)) {
            $('#advanceSearchOk').css({ "pointer-events": "none" });
            COMMON.prototype.showMessage(FORM.getResourceValue("msgFilterConditionisNotValid", ResourceMessages));
            return false;
        }
        else {
            $('#advanceSearchOk').css({ "pointer-events": "auto" });
            var urlPath = GLOBAL.getContextPath("GenerateAdvanceQuery", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { arrFilter: arrFilter, iFormTypeId: FormTypeId, sModule: Module, sFormName: FormName, bMassUpdate: false }, "JSON", false);
            debugger
            if (fnResult.data.length > 0) {
                $("#AdvanceFilterQuery").text('(' + fnResult.data + ')');
            }
        }
    },

    ConfirmDeleteForm: function (DeleteAll) {
        debugger;
        bDeleteAllForms = DeleteAll;
        if (DeleteAll) {
            $("#DeleteForm_Modal").modal("show");
            $("#lblDeleteAllForms_Header").css("display", "block");
            $("#lblDeleteAllForms_ok").css("display", "block");
            $("#lblDeleteSelectedForms_Header").css("display", "none");
            $("#lblDeleteSelectedForms_ok").css("display", "none");
        }
        else {
            $("#lblDeleteAllForms_Header").css("display", "none");
            $("#lblDeleteAllForms_ok").css("display", "none");
            $("#lblDeleteSelectedForms_Header").css("display", "block");
            $("#lblDeleteSelectedForms_ok").css("display", "block");
            arrFormsToDelete = [];
            $(".chkSelect").each(function () {
                var iFormId = parseInt(this.attributes["Formid"].value);
                if ($(this).is(":checked")) {
                    if (arrFormsToDelete.length > 0) {
                        var bExist = arrFormsToDelete.includes(iFormId);
                        if (!bExist) {
                            arrFormsToDelete.push(iFormId);
                        }
                    }
                    else {
                        arrFormsToDelete.push(iFormId);
                    }
                }
            });
            if (arrFormsToDelete.length > 0) {
                $("#DeleteForm_Modal").modal("show");
            }
            else {
                COMMON.prototype.showMessage(FORM.getResourceValue("msgPleaseselecttheRecordtodelete", ResourceMessages));
                return false;
            }
        }
    },

    DeleteForm: function () {
        debugger;
        try {
            var FormTypeId = parseInt($("#hdnFormTypeId").val());

            //var ExtModCustomData = {};
            //ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.BeforeDelete;
            //FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.BeforeDelete,
            //                                                                0,
            //                                                                'FExternalModuleForms.continueProcess',
            //                                                                ExtModCustomData);

            if (FormTypeId > 0) {
                var urlPath = GLOBAL.getContextPath("DeleteForm", "Form", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, arrFormId: arrFormsToDelete, bDeleteAll: bDeleteAllForms }, "JSON", true, "FORM.DeleteForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.DeleteForm " + ex.message);
            return false;
        }
    },

    DeleteForm_Success: function (flag, data) {
        debugger;
        if (flag) {
            if (data.trim() == "") {
                FORM.GetFormGrid("btnDelete", 1);
                COMMON.prototype.showMessage("form deleted successfully");
            }
            else {
                COMMON.prototype.showMessage(data);
                return false;
            }
        }
    },

    MoveBookMarks: function (ele) {
        debugger;
        var iTotalRows = parseInt($("#grd_Form_body tr").length);
        var iSelectedRowIndex = $("#grd_Form_body tr.FRowColor")[0].rowIndex - 3;
        if (ele.id == "MoveToNextBookMark") {
            var iNextRowIndex = iSelectedRowIndex + 1;
            for (var i = iNextRowIndex; i < iTotalRows; i++) {
                //var IsBookMarked = $($("#grd_Form_body tr")[i].cells[2]).find('i').hasClass('icon-bookmark');
                //if (IsBookMarked) {
                //    $("#grd_Form_body tr").removeClass("FRowColor");
                //    $($("#grd_Form_body tr")[i]).addClass('FRowColor');
                //    break;
                //}
                if ($($("#grd_Form_body tr")[i].cells[2]).find('i').css('color') == "rgb(255, 0, 0)") {
                    $("#grd_Form_body tr").removeClass("FRowColor");
                    $($("#grd_Form_body tr")[i]).addClass('FRowColor');
                    break;
                }
            }
        }
        else {
            var iPreviousRowIndex = iSelectedRowIndex - 1;
            for (var i = iPreviousRowIndex; i < iTotalRows; i--) {
                //var IsBookMarked = $($("#grd_Form_body tr")[i].cells[2]).find('i').hasClass('icon-bookmark');
                //if (IsBookMarked) {
                //    $("#grd_Form_body tr").removeClass("FRowColor");
                //    $($("#grd_Form_body tr")[i]).addClass('FRowColor');
                //    break;
                //}
                if ($($("#grd_Form_body tr")[i].cells[2]).find('i').css('color') == "rgb(255, 0, 0)") {
                    $("#grd_Form_body tr").removeClass("FRowColor");
                    $($("#grd_Form_body tr")[i]).addClass('FRowColor');
                    break;
                }
            }
        }
    },

    GetProperties: function () {
        debugger;
        try {
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            var iSelectedRow = $("#grd_Form_body tr.FRowColor")[0].rowIndex - 2;
            if (iSelectedRow > 0) {
                var cellObject = FGRIDCONTROL.getCellObject("grd_Form", iSelectedRow, 4);
                var FormId = cellObject.getCellData("value");
                var urlPath = GLOBAL.getContextPath("GetProperties", "Form", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: FormId }, "HTML", true, "FORM.GetProperties_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else {
                COMMON.prototype.showMessage(FORM.getResourceValue("SelectRow", ResourceMessages));
            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetProperties " + ex.message);
            return false;
        }
    },

    GetProperties_Success: function (flag, data) {
        debugger;
        if (flag) {
            $("#Properties_Modal_Body").html("");
            $("#Properties_Modal_Body").html(data);
            $("#Properties_Modal").modal("show");
            FORM.setHeight();
        }
    },

    SetProperties: function () {
        debugger;
        try {
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            var FormId = $('#hdnFormid').val();
            var Module = $("#hdnModule").val();
            var iProductAccountType = parseInt($("#hdnProductAccountType").val());
            if (FormTypeId == 1) {
                var SelectedRows = []
                var arrayData = {
                    IsGroup: false,
                    FormId: FormId
                }
                SelectedRows.push(arrayData);
                var DisplayCreditTotalValue;
                var ConsolidationoftransactionsVal;
                if ($('#rdoDisplayCreditTotal').is(':checked')) {
                    DisplayCreditTotalValue = '0'
                }
                else if ($('#rdoDisplayDebitcreditTotalsForEachMonth').is(':checked')) {
                    DisplayCreditTotalValue = '1';
                }
                else if ($('#rdoDisplaydebitcreditTotalsforEachday').is(':checked')) {
                    DisplayCreditTotalValue = '2';
                }
                else if ($('#rdoShowAccountSummary').is(':checked')) {
                    DisplayCreditTotalValue = '3';
                }
                if ($('#rdoConsolidationoftransactions').is(':checked')) {
                    ConsolidationoftransactionsVal = '0'
                }
                else if ($('#rdoConsolidateWhenBothAccountsAreSame').is(':checked')) {
                    ConsolidationoftransactionsVal = '1';
                }
                else if ($('#rdoConsolidateAlways').is(':checked')) {
                    ConsolidationoftransactionsVal = '2';
                }
                var FormSetTypeProperty = {
                    ActOrProdType: iProductAccountType,
                    AllowOtherCompaniesToViewRecord: $('#chkAllowOtherCompaniesToViewRecord').is(":checked") ? '1' : '0',
                    ClubTranOfAcctsWithSameName: '0',
                    ClubTranOfAllAcctsUnderGrpWhenDispInLedger: '0',
                    DisplayCreditTotal: DisplayCreditTotalValue,
                    Consolidationoftransactions: ConsolidationoftransactionsVal,
                    DisplayUnRealizeGainLossInLedger: $('#chkDisplayUnRealizeGainLossInLedger').is(":checked") ? '1' : '0',
                    DisposalDate: DATEPICKER.getDate(id_DatePicker),
                    DoNotInputBin: '0',
                    DonotPrintBill: '0',
                    DoNotRestrictSelectionEvenIfRightsNotAllotted: $('#chkDoNotRestrictSelectionEvenIfRightsNotAllotted').is(":checked") ? '1' : '0',
                    DoNotShowInDepreciation: '0',
                    DonotUpdateStock: '0',
                    DontinputBin: '0',
                    DontMaintainStockbyBatch: '0',
                    DontMaintainStocksByRMA: '0',
                    ErrorMessege: "",
                    GenerateLedgerByCurrency: $('#chkGenerateLedgerByCurrency').is(":checked") ? '1' : '0',
                    HideItemsUnderGrpFromDispInFinalRpts: '0',
                    IgnoreExpiryforthisItem: '0',
                    InputBreakupofQuantitiesForEachCategories: '0',
                    FormName: $('#hdnFormName').val(),
                    FormTypeId: FormTypeId,
                    NotAllowedforHomeDelivery: '0',
                    ReservationType: '0',
                    ReserveByBatch: '0',
                    ReserveByBin: '0',
                    ReserveByRMA: '0',
                    SaveType: '0',
                    SelectedRows: SelectedRows,
                    SendSmsEmailWhereverAcDebitedCredited: $('#chkSendSmsEmailWhereverAcDebitedCredited').is(":checked") ? '1' : '0',
                    ShowAcctSummary: '0',
                    StarProduct: '0',
                    Status: $('#ddlStatus').val(),
                    SuspendCreditLimit: $('#chkSuspendCreditLimit').is(":checked") ? '1' : '0',
                    TreeId: '0',
                    ValuationMethod: '0'
                }

                var urlPath = GLOBAL.getContextPath("SetProperties", "Form", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { sModule: Module, objFormSetTypeProperty: FormSetTypeProperty }, "JSON", true, "FORM.SetProperties_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else if (FormTypeId == 2) {
                debugger
                if ($('#chkDontMaintainStockbyBatch').is(':checked') && $('#chkBatch').is(':checked')) {
                    COMMON.prototype.showMessage("Cannot select reserve by batch with Donot Maintain Stock By Batch")
                }
                else if ($('#chkDontinputBin').is(':checked') && $('#chkBin').is(':checked')) {
                    COMMON.prototype.showMessage("Cannot select reserve by Bin with Donot input Bin")
                }
                else if ($('#chkDontMaintainTheStocksbyRMA').is(':checked') && $('#chkRMA').is(':checked')) {
                    COMMON.prototype.showMessage("Cannot select reserve by RMA with Dont Maintain Stock By RMA")
                }
                else {
                    var ReservationType;
                    var SelectedRows = []
                    var arrayData = {
                        IsGroup: false,
                        FormId: FormId
                    }
                    SelectedRows.push(arrayData);
                    if ($('#rdoDefaultfromPreferences').is(':checked')) {
                        ReservationType = '0'
                    }
                    else if ($('#rdoNone').is(':checked')) {
                        ReservationType = '1';
                    }
                    else if ($('#rdoQuantities').is(':checked')) {
                        ReservationType = '2';
                    }
                    else if ($('#rdoReserveBy').is(':checked')) {
                        ReservationType = '3';
                    }
                    var FormSetTypeProperty = {
                        ActOrProdType: iProductAccountType,
                        AllowOtherCompaniesToViewRecord: $('#chkAllowOtherCompaniesToViewRecord').is(":checked") ? '1' : '0',
                        ReserveByBatch: $('#chkBatch').is(":checked") ? '1' : '0',
                        ReserveByBin: $('#chkBin').is(":checked") ? '1' : '0',
                        ClubTranOfAcctsWithSameName: '0',
                        ClubTranOfAllAcctsUnderGrpWhenDispInLedger: '0',
                        ConsolidateMultipleEntriesInTranWhenDispInLedger: '0',
                        DisplayCreditTotal: '0',
                        DisplayUnRealizeGainLossInLedger: '0',
                        DisposalDate: DATEPICKER.getDate(id_DatePicker),
                        DoNotInputBin: $('#chkDontinputBin').is(":checked") ? '1' : '0',
                        DonotPrintBill: $('#chkDonotPrintBill').is(":checked") ? '1' : '0',
                        DoNotRestrictSelectionEvenIfRightsNotAllotted: $('#chkDoNotRestrictSelectionEvenIfRightsNotAllotted').is(":checked") ? '1' : '0',
                        DoNotShowInDepreciation: '0',
                        DonotUpdateStock: $("#chkDonotUpdateStock").is(":checked") ? '1' : '0',
                        DontMaintainStockbyBatch: $('#chkDontMaintainStockbyBatch').is(":checked") ? '1' : '0',
                        DontMaintainStocksByRMA: $('#chkDontMaintainTheStocksbyRMA').is(":checked") ? '1' : '0',
                        ErrorMessege: "",
                        GenerateLedgerByCurrency: '0',
                        HideItemsUnderGrpFromDispInFinalRpts: '0',
                        InventoryAllocation: $("#ddlInventoryAllocation").val(),
                        IgnoreExpiryforthisItem: $('#chkIgnoreExpiryforthisItem').is(":checked") ? '1' : '0',
                        IgnoreMfgDateforthisItem: $('#chkIgnoreMfgDateforthisItem').is(":checked") ? '1' : '0',
                        IgnoreFractionInQty: $('#chkIgnoreFractionInQty').is(":checked") ? '1' : '0',
                        InputBreakupofQuantitiesForEachCategories: $('#chkInputBreakupofQuantitiesForEachCategories').is(":checked") ? '1' : '0',
                        FormName: $('#hdnFormName').val(),
                        FormTypeId: FormTypeId,
                        NotAllowedforHomeDelivery: $('#chkNotAllowedforHomeDelivery').is(":checked") ? '1' : '0',
                        ReservationType: ReservationType,
                        NegativeTolerance: document.getElementById('NegativeTolerance').value,
                        PostiveTolerance: document.getElementById('PositiveTolerance').value,
                        ToleranceType: document.getElementById('cmbToleranceType').value,
                        ReserveByRMA: $('#chkRMA').is(":checked") ? '1' : '0',
                        SaveType: '0',
                        SelectedRows: SelectedRows,
                        SendSmsEmailWhereverAcDebitedCredited: '0',
                        ShowAcctSummary: '0',
                        StarProduct: $('#chkStarProduct').is(":checked") ? '1' : '0',
                        Status: $('#ddlStatus').val(),
                        SuspendCreditLimit: '0',
                        TreeId: '0',
                        ValuationMethod: '0'
                    }

                    var urlPath = GLOBAL.getContextPath("SetProperties", "Form", "Forms");
                    var fnResult = NETWORK.executeServerMethod(urlPath, true, { sModule: Module, objFormSetTypeProperty: FormSetTypeProperty }, "JSON", true, "FORM.SetProperties_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
                }
            }
            else {
                var SelectedRows = []
                var arrayData = {
                    IsGroup: false,
                    FormId: FormId
                }
                SelectedRows.push(arrayData);
                var objFormSetTypeProperty = {
                    ActOrProdType: '0',
                    AllowOtherCompaniesToViewRecord: $('#chkAllowOtherCompaniesToViewRecord').is(":checked") ? '1' : '0',
                    ReserveByBatch: '0',
                    ReserveByBin: '0',
                    ClubTranOfAcctsWithSameName: '0',
                    ClubTranOfAllAcctsUnderGrpWhenDispInLedger: '0',
                    ConsolidateMultipleEntriesInTranWhenDispInLedger: '0',
                    DisplayCreditTotal: '0',
                    DisplayUnRealizeGainLossInLedger: '0',
                    DisposalDate: DATEPICKER.getDate(id_DatePicker),
                    DoNotInputBin: '0',
                    DonotPrintBill: '0',
                    DoNotRestrictSelectionEvenIfRightsNotAllotted: $('#chkDoNotRestrictSelectionEvenIfRightsNotAllotted').is(":checked") ? '1' : '0',
                    DoNotShowInDepreciation: FormTypeId == 601 ? ($('#chkDoNotShowInDepreciation').is(":checked") ? '1' : '0') : '0',
                    DonotUpdateStock: '0',
                    DontinputBin: '0',
                    DontMaintainStockbyBatch: '0',
                    DontMaintainStocksByRMA: '0',
                    ErrorMessege: "",
                    GenerateLedgerByCurrency: '0',
                    HideItemsUnderGrpFromDispInFinalRpts: '0',
                    IgnoreExpiryforthisItem: '0',
                    InputBreakupofQuantitiesForEachCategories: '0',
                    FormName: $('#hdnFormName').val(),
                    FormTypeId: FormTypeId,
                    NotAllowedforHomeDelivery: '0',
                    ReservationType: null,
                    ReserveByRMA: '0',
                    SaveType: '0',
                    SelectedRows: SelectedRows,
                    SendSmsEmailWhereverAcDebitedCredited: '0',
                    ShowAcctSummary: '0',
                    StarProduct: '0',
                    Status: $('#ddlStatus').val(),
                    SuspendCreditLimit: '0',
                    TreeId: '0',
                    ValuationMethod: '0'
                }

                var urlPath = GLOBAL.getContextPath("SetProperties", "Form", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { sModule: Module, objFormSetTypeProperty: FormSetTypeProperty }, "JSON", true, "FORM.SetProperties_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.SetProperties " + ex.message);
            return false;
        }
    },

    SetProperties_Success: function (flag, data) {
        debugger;
        if (flag) {
            COMMON.prototype.showMessage(data.ErrorMessege);
            return false;
        }
    },

    SelectDocument: function (ele) {
        debugger;
        //var sClickedElement = $("#hdnClickedElement_" + sClickElement + "").val();
        var file = $('#inputDocument_' + sClickedElement + '')[0].files[0];
        if (file) {
            $('#custom-file-control_' + sClickedElement + '').html(file.name);
            $('#custom-file-control_' + sClickedElement + '').val(file.name);
            $(ele.parentElement).val(file.name);

            var cellObject = FGRIDCONTROL.getCellObject(ele.parentElement.parentElement.offsetParent.id, (ele.parentElement.parentElement.parentElement.rowIndex - 2), 8);
            cellObject.setCellData("value", FORM.bytesToSize(file.size, true));
            cellObject.setCellText(FORM.bytesToSize(file.size, true));

            var cellObjectDoc = FGRIDCONTROL.getCellObject(ele.parentElement.parentElement.offsetParent.id, (ele.parentElement.parentElement.parentElement.rowIndex - 2), 4);
            file.convertToBase64(function (base64) {
                var sBase64WithoutType = base64.split(',')[1];
                cellObjectDoc.setCellData("value", sBase64WithoutType);
            }, file);
        }
    },

    ClearDocument: function (ele) {
        debugger;
        //var sClickedElement = $("#hdnClickedElement_" + sClickElement + "").val();
        $('#custom-file-control_' + sClickedElement + '').html("");
        $('#custom-file-control_' + sClickedElement + '').val("");
        $(ele.parentElement.parentElement.parentElement).val("");
        var cellObject = FGRIDCONTROL.getCellObject(ele.parentElement.parentElement.parentElement.parentElement.offsetParent.id, (ele.parentElement.parentElement.parentElement.parentElement.parentElement.rowIndex - 2), 8);
        cellObject.setCellData("value", 0);
        cellObject.setCellText("");

        var cellObjectDoc = FGRIDCONTROL.getCellObject(ele.parentElement.parentElement.parentElement.parentElement.offsetParent.id, (ele.parentElement.parentElement.parentElement.parentElement.parentElement.rowIndex - 2), 4);
        cellObjectDoc.setCellData("value", "");
        cellObjectDoc.setCellText("");

    },

    bytesToSize: function (bytes, bDocumentView) {
        debugger
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes == 0) return '0';
        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
        if (bDocumentView)
            return (bytes / Math.pow(1024, i)).toFixed(2);
        return Math.round(bytes / Math.pow(1024, i), 2);
    },

    base64ToByteArray: function (sBase64String) {
        //debugger;
        var binary_string = window.atob(sBase64String);
        var len = binary_string.length;
        var bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
    },

    DownloadDocument: function (ele) {
        debugger;
        var sFileName = ele.parentElement.parentElement.parentElement.innerText.trim();
        if (sFileName != undefined) {
            if (sFileName != "") {
                var sFileExtension = sFileName.substr(sFileName.lastIndexOf('.') + 1);
                var cellObjectDoc = FGRIDCONTROL.getCellObject(ele.parentElement.parentElement.parentElement.parentElement.offsetParent.id, (ele.parentElement.parentElement.parentElement.parentElement.parentElement.rowIndex - 2), 4);;
                var sBase64String = cellObjectDoc.getCellData("value");
                var urlPath = GLOBAL.getContextPath("PostBase64String", "Form", "Forms");
                NETWORK.executeServerMethod(urlPath, true, { sFileName: sFileName, sFileExtension: sFileExtension, sBase64String: sBase64String }, "JSON", true, "FORM.DownloadDocument_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else {
                COMMON.prototype.showMessage("Save the file to download");
                return false;
            }
        }
        else {
            COMMON.prototype.showMessage("Save the file to download");
            return false;
        }
    },

    DownloadDocument_Success: function (flag, data) {
        debugger;
        if (flag) {
            var urlPath = GLOBAL.getContextPath("DownloadDocument", "Form", "Forms");
            window.location = urlPath;
        }
    },

    SaveForm: function (sClickedElement) {
        //debugger
        try {
            var bAllowRevision = false;
            var bApplyChangesToAttributedProducts = false;
            var bCreateDiffAssetsForEachQty = false;

            var bDoNotRestrict = false;
            var bIdSuppliedForForms = false;
            var bImporting = false;
            var IsAttribute = false;
            var IsGroup = false;
            var iRevisionId = -1;
            var iAccountType = $("#iAccountType_" + sClickedElement + "").length > 0 ? $("#iAccountType_" + sClickedElement + "").val() : -1;
            var sAlias = $("#sAlias_" + sClickedElement + "").length > 0 ? $("#sAlias_" + sClickedElement + "").val() : "0";
            var iBinCapacity = $("#iBinCapacity_" + sClickedElement + "").length > 0 ? $("#iBinCapacity_" + sClickedElement + "").val() : 0;
            var sCode = $("#sCode_" + sClickedElement + "").length > 0 ? $("#sCode_" + sClickedElement + "").val() : "";
            var sCreatedBy = $("#lblCreatedBy_" + sClickedElement + "").length > 0 ? $("#lblCreatedBy_" + sClickedElement + "").val() : "";
            var sCreatedDate = $("#lblCreatedDate_" + sClickedElement + "").length > 0 ? $("#lblCreatedDate_" + sClickedElement + "").val() : "";
            var iCreditDays = $("#iCreditDays_" + sClickedElement + "").length > 0 ? $("#iCreditDays_" + sClickedElement + "").val() : $('#hdnCreditDays').val();
            var fCreditLimit = $("#fCreditLimit_" + sClickedElement + "").length > 0 ? $("#fCreditLimit_" + sClickedElement + "").val() : $('#hdnCreditLimit').val();
            var iCurrentRevisionId = $("#hdnCurrentRevisionId_" + sClickedElement + "").val();
            var iQuantity = $("#iQuantity_" + sClickedElement + "").length > 0 ? $("#iQuantity_" + sClickedElement + "").val() : 0;
            if (sClickedElement == "OptionControl") {
                var iFormId = $("#hdnFormId_" + sClickedElement + "").val();
                var sFormName = $("#hdnFormName_" + sClickedElement + "").val();
                var iFormTypeId = FormTypeId_Optioncontrol;
            }
            else {
                var iFormId = $("#hdnFormId_" + sClickedElement + "").val();
                var sFormName = $("#hdnFormName_" + sClickedElement + "").val();
                var iFormTypeId = parseInt($("#hdnFormTypeId").val());
            }
            var sModifiedBy = $("#lblModifiedBy_" + sClickedElement + "").length > 0 ? $("#lblModifiedBy_" + sClickedElement + "").val() : "";
            var sModifiedDate = $("#lblModifiedDate_" + sClickedElement + "").length > 0 ? $("#lblModifiedDate_" + sClickedElement + "").val() : "";
            var sModule = $("#hdnModule").val();
            var iModifiedUserId = $("#hdnModifiedUserId_" + sClickedElement + "").val();
            var sName = $("#sName_" + sClickedElement + "").length > 0 ? $("#sName_" + sClickedElement + "").val() : "";
            var iNoOfDecimals = $("#hdnNoOfDecimal").val();
            var iProductMake = $("#iProductMake_" + sClickedElement + "").length > 0 ? $("#iProductMake_" + sClickedElement + "").val() : 0;
            var iProductType = $("#iProductType_" + sClickedElement + "").length > 0 ? $("#iProductType_" + sClickedElement + "").val() : 0;
            var fReorderLevel = $("#fReorderLevel_" + sClickedElement + "").length > 0 ? $("#fReorderLevel_" + sClickedElement + "").val() : 0;
            var iRevisionDate = $("#iRevisionDate_" + sClickedElement + "").length > 0 ? DATEPICKER.getDate('iRevisionDate_' + sClickedElement) : 0;
            var iRoundingType = $("#iRoundingType_" + sClickedElement + "").length > 0 ? $("#iRoundingType_" + sClickedElement + "").val() : 0;
            var sStatus = $("#hdnStatus_" + sClickedElement + "").val();
            var iValuationMethod = $("#iValuationMethod_" + sClickedElement + "").length > 0 ? $("#iValuationMethod_" + sClickedElement + "").val() : 0;

            var arrHeaderFields = [];
            var bDisplayMsg = false;
            $(".HeaderField_" + sClickedElement + "").each(function (index, element) {
                var IsMandatory = (document.getElementById(element.id).classList.contains('Ftxtbox-M')) ? true : false;
                if ($(element).attr('isDefault') == 'True') {
                    IsMandatory = false;
                }
               // debugger
                if ($(element).hasClass("OptionControl")) {
                    var iLinkType = parseInt(element.dataset.ilinktype);
                    if (iLinkType == 0) {
                        var Field = {
                            ID: element.dataset.fieldid,
                            Name: element.dataset.sfieldname,
                            Tag: {
                                MasterId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: element.dataset.formdatatype
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrHeaderFields.push(Field);
                            }
                        }
                    }
                    else {
                        var Field = {
                            ID: element.dataset.fieldid,
                            Name: element.dataset.sfieldname,
                            Tag: {
                                FormId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: element.dataset.formdatatype
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrHeaderFields.push(Field);
                            }
                        }
                    }
                }
                else if ($(element).hasClass("DatePicker")) {
                    var Field = {
                        ID: $("#hdn" + element.id).attr('data-fieldid'),
                        Name: $("#hdn" + element.id).attr('data-sfieldname'),
                        Tag: DATEPICKER.getDate(element.id)
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("clsFormdatetime")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: parseInt($(element).attr('value'))
                    }
                    if (Field.Tag != undefined) {
                        arrHeaderFields.push(Field);
                    }
                }
                else if ($(element).hasClass("TimePicker")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('sfieldname'),
                        Tag: 0// DATETIMEPICKER.getDate(element)
                    }
                    if (Field.Tag != undefined) {
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("DropDown")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("CheckBox")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).is(":checked")
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else {
                    if ($(element)[0].name == 'uploadFile' || $(element)[0].name == 'Image') {
                        // imageDataType
                        var ctrlId = '';
                        if ($(element)[0].name == 'Image') {
                            ctrlId = $($(element).next().next().next()).find('input')[0].id;
                        }
                        else {

                            ctrlId = $($(element).next().next()).find('input')[0].id;
                        }
                        if ($('#' + ctrlId)[0].files.length > 0) {
                            var tag = $('#' + ctrlId)[0].dataset.img;

                            //var tag = base64Data[Counter];
                            //Counter++;
                        }
                        else {
                            var tag = $('#' + ctrlId)[0].dataset.img.trim();
                            //  var tag = JSON.stringify(x);
                        }
                        $('#' + ctrlId).addClass('hdnfieldNameForImgDoc');
                    }
                    else {
                        if ($(element).hasClass("clsMasterdatetime")) {
                            var tag = $(element).is(":visible") ? $(element).attr("data-value") : $(element).text().trim();
                        } else {
                            var tag = $(element).val();
                        }
                    }
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: tag
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                    if ($('#' + ctrlId).hasClass('hdnfieldNameForImgDoc') && Field.Tag != "") {
                        debugger;
                        var Field = {
                            ID: $(element).next()[0].dataset.fieldid, //$(this).attr('data-fieldid') == undefined ? id.toString() : $(this).attr('data-fieldid'),
                            Name: $(element).next()[0].id,
                            Tag: $(element).next().val()
                        }
                        arrHeaderFields.push(Field);
                    }
                }
            }) 
            if (bDisplayMsg)
                return false;
            var objHeader_MAPIDataRow = {
                Fields: arrHeaderFields
            }
            var objHeaderData = {
                MAPIDataRow: objHeader_MAPIDataRow
            }

            var arrBodyTables = [];
            $($("#tabContent_" + sClickedElement + "").find(".fgrid")).each(function (index, element) {
                var IsMandatory = false;
                //debugger;
                var sTabName = "";
                var arrMAPIDataRow = [];
                var sGridId = element.id;
                FGRIDCONTROL.update(sGridId);
                var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
                for (iRow = 1; iRow <= iTotalRows; iRow++) {
                    var arrBodyFields = [];
                    var RowData = FGRIDCONTROL.getRowValue(sGridId, iRow);
                    if (RowData != null && RowData != undefined) {
                        if (RowData.length > 2) {
                            if (RowData[2].Text != "") {
                                var iTotalColumns = RowData.length;
                                for (iColumn = 0; iColumn < iTotalColumns; iColumn++) {
                                    if (RowData[iColumn].MetaData.isdefault == false) {
                                        IsMandatory = RowData[iColumn].MetaData.ismandatory;
                                    }
                                    else {
                                        IsMandatory = false;
                                    }
                                    sTabName = RowData[iColumn].MetaData.tabname;
                                    if (RowData[iColumn].MetaData.datatypeid == 12 || RowData[iColumn].MetaData.datatypeid == 14 || RowData[iColumn].MetaData.datatypeid == 21) {
                                        // debugger
                                        var iLinkType = parseInt(RowData[iColumn].MetaData.ilinktype);
                                        if (iLinkType == 0) {
                                            var Field = {
                                                ID: RowData[iColumn].MetaData.fieldid,
                                                Name: RowData[iColumn].MetaData.fieldname,
                                                Tag: {
                                                    MasterId: RowData[iColumn].Value,
                                                    Name: RowData[iColumn].Text
                                                },
                                                ExtraInfo: RowData[iColumn].MetaData.datatypeid
                                            }
                                            if (IsMandatory && Field.Tag.Name.trim() == "") {
                                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                                GLOBAL.LoadingEnd();
                                                bDisplayMsg = true;
                                                return false;
                                            }
                                            if (Field.Name == "iFormId" || Field.Name == "iRowIndex") {
                                                arrBodyFields.push(Field);
                                            }
                                            else {
                                                if (Field.Tag.Name.trim() != "" && Field.Tag.Name.trim() != "0") {
                                                    arrBodyFields.push(Field);
                                                }

                                            }
                                        }
                                        else {
                                            var Field = {
                                                ID: RowData[iColumn].MetaData.fieldid,
                                                Name: RowData[iColumn].MetaData.fieldname,
                                                Tag: {
                                                    FormId: RowData[iColumn].Value,
                                                    Name: RowData[iColumn].Text
                                                },
                                                ExtraInfo: RowData[iColumn].MetaData.datatypeid
                                            }
                                            if (IsMandatory && Field.Tag.Name.trim() == "") {
                                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                                GLOBAL.LoadingEnd();
                                                bDisplayMsg = true;
                                                return false;
                                            }
                                            if (Field.Name == "iFormId" || Field.Name == "iRowIndex") {
                                                arrBodyFields.push(Field);
                                            }
                                            else {
                                                if (Field.Tag.Name.trim() != "" && Field.Tag.Name.trim() != "0") {
                                                    arrBodyFields.push(Field);
                                                }
                                            }
                                        }

                                    }
                                    else {
                                        var TagValue = RowData[iColumn].MetaData.fieldname == "biDocumentName" ? RowData[iColumn - 1].Text : RowData[iColumn].Value;
                                        var Field = {
                                            ID: RowData[iColumn].MetaData.fieldid,
                                            Name: RowData[iColumn].MetaData.fieldname,
                                            Tag: TagValue
                                        }
                                        if (IsMandatory && Field.Tag == "") {
                                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                            GLOBAL.LoadingEnd();
                                            bDisplayMsg = true;
                                            return false;
                                        }
                                        if (Field.Name == "iFormId" || Field.Name == "iRowIndex") {
                                            arrBodyFields.push(Field);
                                        }
                                        else {
                                            if (Field.Tag != "" && Field.Tag != "0") {
                                                arrBodyFields.push(Field);
                                            }
                                        }
                                    }
                                }

                                var MAPIDataRow = {
                                    Fields: arrBodyFields
                                }
                                if (MAPIDataRow.Fields.length > 0) {
                                    arrMAPIDataRow.push(MAPIDataRow);
                                }
                            }
                        }
                    }
                }

                if (bDisplayMsg)
                    return;

                if (arrMAPIDataRow.length > 0) {
                    var BodyTable = {
                        MAPIDataRow: arrMAPIDataRow,
                        TabName: sTabName
                    }
                    arrBodyTables.push(BodyTable)
                }
            })

            var objBodyData = {
                BodyTables: arrBodyTables
            }

            var arrFooterFields = [];
            $(".FooterField_" + sClickedElement + "").each(function (index, element) {
                var IsMandatory = false;
                if ($(element).attr('isDefault') == 'False') {
                    IsMandatory = (document.getElementById(element.id).classList.contains('Ftxtbox-M')) ? true : false;
                }
                if ($(element).hasClass("OptionControl")) {
                    var iLinkType = parseInt($(element).data('ilinktype'));
                    if (iLinkType == 0) {
                        var Field = {
                            ID: $(element).data('fieldid'),
                            Name: $(element).data('sfieldname'),
                            Tag: {
                                MasterId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: $(element).data('formdatatype')
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrFooterFields.push(Field);
                            }
                        }
                    }
                    else {
                        var Field = {
                            ID: $(element).data('fieldid'),
                            Name: $(element).data('sfieldname'),
                            Tag: {
                                FormId: OPTIONCONTROL.getControlValue(element),
                                Name: OPTIONCONTROL.getControlText(element)
                            },
                            ExtraInfo: $(element).data('formdatatype')
                        }
                        if (Field.Tag.Name != undefined) {
                            if (IsMandatory && Field.Tag.Name == "") {
                                COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                                GLOBAL.LoadingEnd();
                                bDisplayMsg = true;
                                return false;
                            }
                            if (Field.Tag.Name != "") {
                                arrFooterFields.push(Field);
                            }
                        }
                    }
                }
                else if ($(element).hasClass("DatePicker")) {
                    var Field = {
                        ID: $("#hdn" + element.id).data('fieldid'),
                        Name: $("#hdn" + element.id).data('sfieldname'),
                        Tag: DATEPICKER.getDate(element.id)
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrHeaderFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("clsFormdatetime")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: parseInt($(element).attr('value'))
                    }
                    if (Field.Tag != undefined) {
                        arrHeaderFields.push(Field);
                    }
                }
                else if ($(element).hasClass("TimePicker")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('sfieldname'),
                        Tag: 0 //DATETIMEPICKER.getDate(element)
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("DropDown")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
                else if ($(element).hasClass("CheckBox")) {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).is(":checked")
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
                else {
                    var Field = {
                        ID: $(element).attr('fieldid'),
                        Name: $(element).attr('name'),
                        Tag: $(element).val()
                    }
                    if (Field.Tag != undefined) {
                        if (IsMandatory && Field.Tag == "") {
                            COMMON.prototype.showMessage(Field.Name + " Is Mandatory");
                            GLOBAL.LoadingEnd();
                            bDisplayMsg = true;
                            return false;
                        }
                        if (Field.Tag != "") {
                            arrFooterFields.push(Field);
                        }
                    }
                }
            })
            if (bDisplayMsg) {
                return false;
            }
            var objFooter_MAPIDataRow = {
                Fields: arrFooterFields
            }
            var objFooterData = {
                MAPIDataRow: objFooter_MAPIDataRow
            }

            //debugger;
            if (arrHeaderFields.length == 1 && arrBodyTables.length == 0 && arrFooterFields.length == 1) {
                COMMON.prototype.showMessage("Add fields to save Form");
                return false;
            }

            var FormApi = {
                AccountType: iAccountType,
                Alias: sAlias,
                AllowRevision: bAllowRevision,
                bApplyChangesToAttributedProducts: bApplyChangesToAttributedProducts,
                BinCapacity: iBinCapacity,
                BodyData: objBodyData,
                Code: sCode,
                CreatedBy: sCreatedBy,
                CreatedDate: sCreatedDate,
                CreateDiffAssetsForEachQty: bCreateDiffAssetsForEachQty,
                CreateNewRevision: bCreateNewRevision,
                CreditDays: iCreditDays,
                CreditLimit: fCreditLimit,
                CurrentRevisionId: iCurrentRevisionId,
                DoNotRestrict: bDoNotRestrict,
                HeaderData: objHeaderData,
                FooterData: objFooterData,
                IdSuppliedForForms: bIdSuppliedForForms,
                Importing: bImporting,
                iNoOfAssets: iQuantity,
                IsAttribute: IsAttribute,
                IsGroup: IsGroup,
                FormId: iFormId,
                FormName: sFormName,
                FormTypeId: iFormTypeId,
                ModifiedBy: sModifiedBy,
                ModifiedDate: sModifiedDate,
                ModifiedUserId: iModifiedUserId,
                ModuleName: sModule,
                Name: sName,
                NoOfDecimals: iNoOfDecimals,
                ProductMake: iProductMake,
                ProductType: iProductType,
                ReorderLevel: fReorderLevel,
                RevisionDate: iRevisionDate,
                RevisionId: iRevisionId,
                RoundingType: iRoundingType,
                Status: sStatus,
                ValuationMethod: iValuationMethod
            }

            if ($('.clsBeforeSave').length > 0) {
                $('.clsBeforeSave').each(function () {
                    //
                    FormEntryRules.getControlRules($(this), 'BeforeSave');
                });
            }

            debugger;
            var ExtModCustomData = {};
            ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.BeforeSave;
            FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.BeforeSave,
                                                                            0,
                                                                            'FExternalModuleForms.continueProcess',
                                                                            ExtModCustomData);


            var urlPath = GLOBAL.getContextPath("SaveForm", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { strFormAPI: JSON.stringify(FormApi) }, "JSON", true, "FORM.SaveForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        }
        catch (ex) {
            alert("Exception - FORM.SaveForm " + ex.message);
        }
    },

    SaveForm_Success: function (flag, data) {
        debugger;
        if (flag) {

            var ExtModCustomData = {};
            ExtModCustomData.ExtModEvent = eVoucherExternalModuleEvents.AfterSave;
            FormsExternalModule.callExternalModule(eVoucherExternalModuleEvents.AfterSave,
                                                                            0,
                                                                            'FExternalModuleForms.continueProcess',
                                                                            ExtModCustomData);

            sClickedElement = sPreviousClickedElement;
            if (sClickedElement == 'OptionControl') {
                $("#FormEntry_OptionControl_Modal").modal("hide");
            }
            else {
                $('#FormEntry_Modal').modal('hide');
            }
            FORM.GetFormGrid("btnSave", 1);
            if (data.trim() == "") {
                COMMON.prototype.showMessage("Form Saved Sucessfully.");
                return false;
            }
            else {
                COMMON.prototype.showMessage(data);
                return false;
            }
        }
    },

    CloseModalPopUp: function (ele) {
        debugger;
        sClickedElement = sPreviousClickedElement;
        arrFormualFields = [];
    },

    CopyForm: function (sClickedElement) {
        debugger;
        try {
            iCopiedFormId = parseInt($("#hdnFormId_" + sClickedElement + "").val());
            sClickedElement_ForCopy = sClickedElement;
            var FormTypeId = parseInt($("#hdnFormEntryTypeId").val());
            var form = $("#AllFormEntryControls").serializeArray();
            var NewArrayForForm = FormEntryRules.getNewFormArray(form);
            var arrFormData = [];
            var MastertypeFields = document.querySelectorAll("[data-formdatatype='12']");
            for (var i = 0; i < MastertypeFields.length; i++) {
                var FormData = { name: '', value: '', datatype: '' };
                FormData.name = MastertypeFields[i].id;
                FormData.datatype = 12;
                if (document.getElementById(MastertypeFields[i].id + '_data') != null) {
                    FormData.value = document.getElementById(MastertypeFields[i].id + '_data').value;
                }
                arrFormData.push(FormData);
            }
            var ExtTabletypeFields = document.querySelectorAll("[data-formdatatype='14']");
            for (var i = 0; i < ExtTabletypeFields.length; i++) {
                var FormData = { name: '', value: '', datatype: '' };
                FormData.name = ExtTabletypeFields[i].id;
                FormData.datatype = 14;
                if (document.getElementById(ExtTabletypeFields[i].id + '_data') != null) {
                    FormData.value = document.getElementById(ExtTabletypeFields[i].id + '_data').value;
                }
                arrFormData.push(FormData);
            }
            var FormTabletypeFields = document.querySelectorAll("[data-formdatatype='21']");
            for (var i = 0; i < FormTabletypeFields.length; i++) {
                var FormData = { name: '', value: '', datatype: '' };
                FormData.name = FormTabletypeFields[i].id;
                FormData.datatype = 14;
                if (document.getElementById(FormTabletypeFields[i].id + '_data') != null) {
                    FormData.value = document.getElementById(FormTabletypeFields[i].id + '_data').value;
                }
                arrFormData.push(FormData);
            }
            var TxtTypeFields = document.querySelectorAll("[formdatatype='0']");
            for (var i = 0; i < TxtTypeFields.length; i++) {
                if (TxtTypeFields[i].id == 'iFormId_' + sClickedElement || TxtTypeFields[i].id == 'iRowIndex_' + sClickedElement) {
                    continue;
                }
                var FormData = { name: '', value: '', datatype: '' };
                FormData.name = TxtTypeFields[i].id;
                FormData.datatype = 0;
                if (document.getElementById(TxtTypeFields[i].id) != null) {
                    FormData.value = document.getElementById(TxtTypeFields[i].id).value;
                }
                arrFormData.push(FormData);
            }
            var numLstTypeFields = document.querySelectorAll("[formdatatype='9']");
            for (var i = 0; i < numLstTypeFields.length; i++) {
                if (numLstTypeFields[i].id == 'iFormId_' + sClickedElement || numLstTypeFields[i].id == 'iRowIndex_' + sClickedElement) {
                    continue;
                }
                var FormData = { name: '', value: '', datatype: '' };
                FormData.name = numLstTypeFields[i].id;
                FormData.datatype = 9;
                if (document.getElementById(numLstTypeFields[i].id) != null) {
                    FormData.value = document.getElementById(numLstTypeFields[i].id).value;
                }
                arrFormData.push(FormData);
            }
            var stringlsttypefields = document.querySelectorAll("[formdatatype='8']");
            for (var i = 0; i < stringlsttypefields.length; i++) {
                if (stringlsttypefields[i].id == 'iFormId_' + sClickedElement || stringlsttypefields[i].id == 'iRowIndex_' + sClickedElement) {
                    continue;
                }
                var FormData = { name: '', value: '', datatype: '' };
                FormData.name = stringlsttypefields[i].id;
                FormData.datatype = 8;
                if (document.getElementById(stringlsttypefields[i].id) != null) {
                    FormData.value = document.getElementById(stringlsttypefields[i].id).value;
                }
                arrFormData.push(FormData);
            }


            var NumberTypeFields = [];
            NumberTypeFields.push(document.querySelectorAll("[formdatatype='1']"));
            NumberTypeFields.push(document.querySelectorAll("[formdatatype='6']"))
            NumberTypeFields.push(document.querySelectorAll("[formdatatype='15']"))
            NumberTypeFields.push(document.querySelectorAll("[formdatatype='16']"))
            for (var i = 0; i < NumberTypeFields.length; i++) {
                for (var x = 0; x < NumberTypeFields[i].length; x++) {
                    if (NumberTypeFields[i][x].id == 'iFormId_' + sClickedElement || NumberTypeFields[i][x].id == 'iRowIndex_' + sClickedElement) {
                        continue;
                    }
                    var FormData = { name: '', value: '', datatype: '' };
                    FormData.name = NumberTypeFields[i][x].id;
                    FormData.datatype = 1;
                    if (document.getElementById(NumberTypeFields[i][x].id) != null) {
                        FormData.value = document.getElementById(NumberTypeFields[i][x].id).value;
                    }
                    arrFormData.push(FormData);
                }


            }
            var BoolTypeFields = [];
            BoolTypeFields.push(document.querySelectorAll("[formdatatype='2']"));
            for (var i = 0; i < BoolTypeFields.length; i++) {
                for (var x = 0; x < BoolTypeFields[i].length; x++) {
                    if (BoolTypeFields[i][x].id == 'iFormId_' + sClickedElement || BoolTypeFields[i][x].id == 'iRowIndex_' + sClickedElement) {
                        continue;
                    }
                    var FormData = { name: '', value: '', datatype: '' };
                    FormData.name = BoolTypeFields[i][x].id;
                    FormData.datatype = 2;
                    if (document.getElementById(BoolTypeFields[i][x].id) != null) {
                        FormData.value = document.getElementById(BoolTypeFields[i][x].id).checked;
                    }
                    arrFormData.push(FormData);
                }


            }

            //Body Fields
            var arrBodyTables = [];
            $($("#tabContent_" + sClickedElement + "").find(".fgrid")).each(function (index, element) {
                var IsMandatory = false;
                //debugger;
                var sTabName = "";
                var sGridId = element.id;
                var arrMAPIDataRow = [];
                FGRIDCONTROL.update(sGridId);
                var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
                for (iRow = 1; iRow <= iTotalRows; iRow++) {
                    var arrBodyFields = [];
                    var RowData = FGRIDCONTROL.getRowValue(sGridId, iRow);
                    if (RowData != null && RowData != undefined) {
                        if (RowData.length > 2) {
                            if (RowData[2].Text != "") {
                                var iTotalColumns = RowData.length;
                                for (iColumn = 0; iColumn < iTotalColumns; iColumn++) {
                                    sTabName = RowData[iColumn].MetaData.tabname;
                                    if (RowData[iColumn].MetaData.datatypeid == 12 || RowData[iColumn].MetaData.datatypeid == 14 || RowData[iColumn].MetaData.datatypeid == 21) {
                                        // debugger
                                        var iLinkType = parseInt(RowData[iColumn].MetaData.ilinktype);
                                        if (iLinkType == 0) {
                                            var Field = {
                                                ID: RowData[iColumn].MetaData.fieldid,
                                                Name: RowData[iColumn].MetaData.fieldname,
                                                Tag: {
                                                    MasterId: RowData[iColumn].Value,
                                                    Name: RowData[iColumn].Text
                                                },
                                                ExtraInfo: RowData[iColumn].MetaData.datatypeid
                                            }
                                          if (Field.Tag.Name.trim() != "" && Field.Tag.Name.trim() != "0") {
                                               arrBodyFields.push(Field);
                                          }
                                        }
                                        else {
                                            var Field = {
                                                ID: RowData[iColumn].MetaData.fieldid,
                                                Name: RowData[iColumn].MetaData.fieldname,
                                                Tag: {
                                                    FormId: RowData[iColumn].Value,
                                                    Name: RowData[iColumn].Text
                                                },
                                                ExtraInfo: RowData[iColumn].MetaData.datatypeid
                                            }
                                            if (Field.Tag.Name.trim() != "" && Field.Tag.Name.trim() != "0") {
                                                arrBodyFields.push(Field);
                                            }
                                        }
                                    }
                                    else {
                                        var TagValue = RowData[iColumn].MetaData.fieldname == "biDocumentName" ? RowData[iColumn - 1].Text : RowData[iColumn].Value;
                                        var Field = {
                                            ID: RowData[iColumn].MetaData.fieldid,
                                            Name: RowData[iColumn].MetaData.fieldname,
                                            Tag: TagValue
                                        }
                                        if (Field.Tag != "" && Field.Tag != "0") {
                                            arrBodyFields.push(Field);
                                        }
                                    }
                                }
                            }
                            var MAPIDataRow = {
                                Fields: arrBodyFields
                            }
                            if (MAPIDataRow.Fields.length > 0) {
                                arrMAPIDataRow.push(MAPIDataRow);
                            }
                        }
                    }
                }
                if (arrMAPIDataRow.length > 0) {
                    var BodyTable = {
                        MAPIDataRow: arrMAPIDataRow,
                        TabName: 'grd_FormEntry_btnNew_' + sTabName
                    }
                    arrBodyTables.push(BodyTable)
                }
            })

            var FormData = { name: '', value: '', datatype: '' };
            FormData.name = "";
            FormData.datatype = -1;
            FormData.value = arrBodyTables;
            arrFormData.push(FormData);

            //MasterDataCopyEle.setAttribute('data-value', JSON.stringify(arrFormData));
            //MasterDataCopyEle.setAttribute('data-IsDataCopied', "True");
            localStorage.setItem('FormCopiedData', JSON.stringify(arrFormData));
            localStorage.setItem('IsDataCopied', 'True');
        }

        catch (error) {
            COMMON.prototype.showMessage("Exception--CopyFormData" + error.message);
        }
    },

    PasteForm: function (sClickedElement, sOldClickedElement) {
        debugger;
        //var FormId = iCopiedFormId;
        //var FormTypeId = parseInt($("#hdnFormTypeId").val());
        //if (FormTypeId > 0 && FormId > 0) {
        //    var urlPath = GLOBAL.getContextPath("PasteForm", "Form", "Forms");
        //    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: FormId, sClickedElement: sClickedElement }, "HTML", true, "FORM.PasteForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", sOldClickedElement);
        //}
        try {
            var FormCopiedData = JSON.parse(localStorage.getItem("FormCopiedData"));
            //localStorage.setItem("FormCopiedData", "");
            //localStorage.setItem("IsDataCopied", "False");
            if (FormCopiedData != null && FormCopiedData != undefined && FormCopiedData.length > 0) {
                for (var i = 0; i < FormCopiedData.length; i++) {
                    FormCopiedData[i].name = FormCopiedData[i].name.replace(sClickedElement_ForCopy, sOldClickedElement);
                    if (FormCopiedData[i].datatype == -1) {
                        //Body data
                        var arrBodyTables = FormCopiedData[i].value;
                        if (arrBodyTables != null) {
                            if (arrBodyTables.length > 0) {
                                for (var j = 0; j < arrBodyTables.length; j++) {
                                    if(arrBodyTables[j].MAPIDataRow.length > 0)
                                    {
                                        var sGridId = arrBodyTables[j].TabName;
                                        FGRIDCONTROL.update(sGridId);
                                        var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
                                        if (arrBodyTables[j].MAPIDataRow.length > iTotalRows) {
                                            FGRIDCONTROL.insertRows(sGridId, 1, arrBodyTables[j].MAPIDataRow.length-1);
                                            iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
                                        }
                                        for (var l = 0; l < arrBodyTables[j].MAPIDataRow.length ; l++) {
                                            for (iRow = 1; iRow <= iTotalRows; iRow++) {
                                                var RowData = FGRIDCONTROL.getRowValue(sGridId, iRow);
                                                if (RowData != null && RowData != undefined) {
                                                    if (RowData.length > 2) {
                                                        var iTotalColumns = RowData.length;
                                                        for (iColumn = 2; iColumn < iTotalColumns; iColumn++) {
                                                            if ((iRow - 1) == l) {
                                                                for (var k = 0; k < arrBodyTables[j].MAPIDataRow[l].Fields.length ; k++) {
                                                                    if (RowData[iColumn].MetaData.fieldid == arrBodyTables[j].MAPIDataRow[l].Fields[k].ID) {
                                                                        cellobj = FGRIDCONTROL.getCellObject(sGridId, iRow, iColumn + 1);
                                                                        if (arrBodyTables[j].MAPIDataRow[l].Fields[k].ExtraInfo != null) {
                                                                            value = arrBodyTables[j].MAPIDataRow[l].Fields[k].ExtraInfo;
                                                                            cellobj.setCellData("value", value);
                                                                            cellobj.setCellText(arrBodyTables[j].MAPIDataRow[l].Fields[k].Tag.Name);
                                                                        }
                                                                        else {
                                                                            value = arrBodyTables[j].MAPIDataRow[l].Fields[k].Tag;
                                                                            cellobj.setCellData("value", value);
                                                                            cellobj.setCellText(value);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        switch (FormCopiedData[i].datatype) {
                            case 0:
                            case 1:
                            case 15:
                            case 16:
                            case 6:
                            case 8:
                            case 9:
                                {
                                    if (document.getElementById(FormCopiedData[i].name) != null) {
                                        document.getElementById(FormCopiedData[i].name).value = FormCopiedData[i].value;
                                    }
                                    break;
                                }
                            case 12:
                            case 14:
                            case 21:
                                {
                                    if (FormCopiedData[i].value != '')
                                        OPTIONCONTROL.setControlValue(FormCopiedData[i].name, FormCopiedData[i].value);
                                    //OPTIONCONTROL.setControlText(FormCopiedData[i].name, Currentvalue);
                                }
                                break;
                            case 2:
                                {
                                    if (FormCopiedData[i].value == true && document.getElementById(FormCopiedData[i].name) != null) {
                                        document.getElementById(FormCopiedData[i].name).checked = true;
                                    }
                                }
                                break;
                            default:
                                if (document.getElementById(FormCopiedData[i].name) != null) {
                                    document.getElementById(FormCopiedData[i].name).value = FormCopiedData[i].value;
                                }
                                break;
                        }
                    }
                }
            }
        } catch (error) {
            COMMON.prototype.showMessage("Exception--PasteMasterData" + error.message);
        }
    },

    PasteForm_Success: function (flag, data, sOldClickedElement) {
        debugger;
        if (flag) {
            iCopiedFormId = 0;
            $("#FormEntry_Paste_ModalContent").html("");
            $("#FormEntry_Paste_ModalContent").html(data);
            $("#FormEntry_Paste_Modal").modal("show");
            if (sOldClickedElement == "btnNew") {
                $("#FormEntry_Modal").modal("hide");
                $("#FormEntry_Paste_Modal").find('#modalContents').css('min-width', '75%')
            }
            else if (sOldClickedElement == "OptionControl") {
                $("#FormEntry_OptionControl_Modal").modal("hide");
            }
            FORM.setHeight();
        }
    },

    AdvImportExport: function () {
        debugger;
        var sFormName = $('#hdnFormName').val();
        if (sFormName != "") {
            var urlPath = GLOBAL.getContextPath("AdvImportExport", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { sFormName: sFormName }, "HTML", true, "FORM.AdvImportExport_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },

    AdvImportExport_Success: function (flag, data) {
        debugger;
        if (flag) {
            $("#AdvImportExport_ModalBody").html("");
            $("#AdvImportExport_ModalBody").html(data);
            $("#AdvImportExport_Modal").modal("show");

            var sCtrlId = document.getElementsByClassName("clsAdvImportFieldset");
            $(sCtrlId).each(function () {
                if (this != null && this != undefined) {
                    this.style.height = $(window).height() - 420 + "px";
                }
            });
        }
    },

    getAdvExport: function (bBulkExport) {
        debugger;
        IsBulkExport = bBulkExport;
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAdvExport", "Form", "Forms"), true,
        { iFormTypeId: FormTypeId, bBulkExport: bBulkExport }, "HTML", true, "FORM.GetAdvExport_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },

    GetAdvExport_Success: function (bs, data) {
        debugger;
        if (bs && data != "") {
            $('#AdvExport_ModalBody').html('');
            $('#AdvExport_ModalBody').html(data);
            $("#AdvExport_Modal").modal('show');
            $($("#ulFormExportTab").find('li')[0]).trigger('click');

            var sCtrlId = document.getElementsByClassName("clsAdvExportFieldset");
            $(sCtrlId).each(function () {
                if (this != null && this != undefined) {
                    this.style.height = $(window).height() - 150 + "px";
                }
            });
        }
        else {
            COMMON.prototype.showMessage("Error from advance export partial success");
        }
    },

    SelectTabFields: function (ele) {
        debugger;
        var bodyId = $(ele).attr('href');
        $("#btnSelectAllFields").prop('checked', false);
        if ($(bodyId).length == "0") {
            $($("#AllContentsDiv").find('div')).addClass('hidden');
        }
        else {
            $($("#AllContentsDiv").find('div' + bodyId)).removeClass('hidden');
            var tabid = $($("#AllContentsDiv").find('div' + bodyId)).attr('data-tabid');
            if ($($("#AllContentsDiv").find('div' + bodyId)).find('input[type=checkbox]').length == $($("#AllContentsDiv").find('div' + bodyId)).find('.clsChk' + tabid + ":checked").length) {
                $("#btnSelectAllFields").prop('checked', true);
            }
            setTimeout(function () {
                $($("#ulFormTabs")[0].children).removeClass('current active');
                $(ele).addClass('current active');
            }, 100);
        }
    },

    GetAdvExportTabs: function (element) {
        debugger;
        $($("#ulFormExportTab").find('.FRowColor')).removeClass('FRowColor');
        $(element).addClass('FRowColor');
        var tabid = $(element).attr('id');
        $($("#ulFormTabs").find('li')).addClass('hidden').removeClass('current active');
        $($("#AllContentsDiv").find('div')).addClass('hidden').removeClass('current active');
        $($("#ulFormTabs").find('li.cls' + tabid)[0]).addClass('current active');
        $($("#AllContentsDiv").find('div.cls' + tabid)[0]).addClass('current active');
        $($("#ulFormTabs").find('li.cls' + tabid)).removeClass('hidden');
        $($("#AllContentsDiv").find('div.cls' + tabid)).removeClass('hidden');
        var ele = $("#ulFormTabs").find('li.cls' + tabid)[0];
        FORM.SelectTabFields(ele);
    },

    SelectAllFields: function (ele) {
        debugger;
        if (!$($("#AllContentsDiv").find("div.active")).hasClass("hidden")) {
            var activeDiv = !$($("#AllContentsDiv").find("div.active")).hasClass("hidden");
            $("#AllContentsDiv").find("div.active").each(function () {
                //
                if (!$(this).hasClass("hidden")) {
                    var TabId = $(this).attr("data-tabid");
                    if ($("#btnSelectAllFields").is(":checked")) {
                        $($(this).find(".clsChk" + TabId)).prop("checked", true);
                    }
                    else {
                        $($(this).find(".clsChk" + TabId)).prop("checked", false);
                    }
                }
            });
        }
    },

    AdvExportForm: function () {
        debugger;
        var lbHeaderFieldsArray = [];
        var lbBodyFieldsArray = [];
        var lbFooterFieldsArray = [];
        var ExportType = $('#ddlFormAdvanceExportType').val();
        var ExportExtensionType = $('#ddlExportExtensionType').val();

        $('.lbHeaderFields:checked').each(function () {
            var AdvanceFormExportCheckedFields = {
                TabId: $(this).attr('data-tabid'),
                FieldId: $(this).attr('data-fieldid'),
                TabCaption: $(this).attr('data-tabcaption'),
                FieldName: $(this).attr('data-fieldname')
            }
            lbHeaderFieldsArray.push(AdvanceFormExportCheckedFields);
        });

        $('.lbBodyFields:checked').each(function () {
            var AdvanceFormExportCheckedFields = {
                TabId: $(this).attr('data-tabid'),
                FieldId: $(this).attr('data-fieldid'),
                TabCaption: $(this).attr('data-tabcaption'),
                FieldName: $(this).attr('data-fieldname')
            }
            lbBodyFieldsArray.push(AdvanceFormExportCheckedFields);
        });

        $('.lbFooterFields:checked').each(function () {
            var AdvanceFormExportCheckedFields = {
                TabId: $(this).attr('data-tabid'),
                FieldId: $(this).attr('data-fieldid'),
                TabCaption: $(this).attr('data-tabcaption'),
                FieldName: $(this).attr('data-fieldname')
            }
            lbFooterFieldsArray.push(AdvanceFormExportCheckedFields);
        });
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        $("#lblExporting").text("File Exporting in progress...");
        $("#btnFormAdvanceExport").css({ "pointer-events": "none" });
        if (FormTypeId > 0) {
            var urlPath = GLOBAL.getContextPath("AdvExportForm", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, {
                lbHeaderFields: lbHeaderFieldsArray, lbBodyFields: lbBodyFieldsArray,
                lbFooterFields: lbFooterFieldsArray, iExportType: ExportType,
                iExportExtensionType: ExportExtensionType, iFormTypeId: FormTypeId, bIsBulkExport: IsBulkExport
            }, "JSON", true, "FORM.AdvExportForm_Sucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },
    AdvExportForm_Sucess: function (bs, data) {
        debugger;
        $("#lblExporting").text("");
        $("#btnFormAdvanceExport").css({ "pointer-events": "auto" });
        //data = JSON.parse(data);
        if (bs == true && data.strPath != "") {
            var FormName = $("#hdnFormName").val();
            $("#AdvExport_Modal").modal('hide');
            var url = GLOBAL.getContextPath("AdvanceFormDownload", "Form", "Forms").trim();
            window.location = url + '?m_strPath=' + data.strPath + '&FormName=' + FormName;
        }
        else {
            COMMON.prototype.showMessage(data.strError);
        }
    },

    GetFormCustomization: function () {
        debugger;
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        if (FormTypeId > 0) {
            var urlPath = GLOBAL.getContextPath("FormCustomization", "FormCustomization", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, IsForm: true }, "HTML", true, "FORM.GetFormCustomization_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },

    GetFormCustomization_Success: function (flag, data) {
        debugger;
        if (flag == true && data != null) {
            $("#Form_Customization").html("");
            $("#Form_Customization").html(data);
            $("#FormCustomization_Modal").modal("show");
            var ele = document.getElementById("FormFields_list").children[0];
            FORMSETTINGS.selectTab(ele);
            FORMSETTINGS.showTabContent(ele);
            if (document.getElementById("FormFields_list") != null && document.getElementById("FormFields_list") != undefined) {
                FORMCUSTOMIZATION.ShowFieldsForTab(document.getElementById("FormFields_list").children[0], true);
            }
            if (document.getElementById("ddlConstraintTabList") != null && document.getElementById("ddlConstraintTabList") != undefined) {
                FORMCUSTOMIZATION.SelectTab_ForConstraint($("#ddlConstraintTabList option:selected"));
            }
            debugger;
            FORM.setFormCustomizationHeight();
        }
    },


    Sort: function () {
        debugger;
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        if (FormTypeId > 0) {
            var urlPath = GLOBAL.getContextPath("Sort", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, {}, "HTML", true, "FORM.Sort_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },

    Sort_Success: function (bSuccess, data) {
        debugger;
        if (bSuccess) {
            $("#Sort_Body").html("");
            $("#Sort_Body").html(data);
            $("#Sort_Modal").modal("show");
        }
        else {
            alert("Error while sorting Form");
        }
    },

    MoveRow: function (bMoveUp, ele) {
        debugger;
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        var sFormName = $('#hdnFormName').val();
        var sModule = $("#hdnModule").val();
        var iPreFormId = 0;
        var iNextFormId = 0;
        var iRowToHighlight = 0;
        if ($("#grd_Form_body tr.FRowColor").length > 0) {
            var iSelectedRow = $("#grd_Form_body tr.FRowColor")[0].rowIndex - 2;
            if (iSelectedRow >= 1) {
                var cellObject = FGRIDCONTROL.getCellObject("grd_Form", iSelectedRow, 4);
                iPreFormId = cellObject.getCellData("value");
                if (bMoveUp) {
                    var cellObject = FGRIDCONTROL.getCellObject("grd_Form", iSelectedRow - 1, 4);
                    iNextFormId = cellObject.getCellData("value");
                    if (iNextFormId > 0) {
                        iRowToHighlight = iSelectedRow - 1;
                    }
                }
                else {
                    var cellObject = FGRIDCONTROL.getCellObject("grd_Form", iSelectedRow + 1, 4);
                    iNextFormId = cellObject.getCellData("value");
                    if (iNextFormId > 0) {
                        iRowToHighlight = iSelectedRow + 1;
                    }
                }
            }
        }
        if (iRowToHighlight > 0) {
            var urlPath = GLOBAL.getContextPath("MoveRow", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { bMoveUp: bMoveUp, sFormName: sFormName, sModule: sModule, iPreFormId: iPreFormId, iNextFormId: iNextFormId }, "JSON", true, "FORM.MoveRow_Success", "", "", iRowToHighlight);
        }
    },

    MoveRow_Success: function (bSuccess, data, iRowToHighlight) {
        debugger;
        if (bSuccess) {
            FORM.GetFormGrid("MoveRow", iRowToHighlight);
        }
        else {
            alert("Error while sorting Form");
        }
    },


    ExportXML: function (ele) {
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        var FormName = $("#hdnFormName").val();
        NETWORK.executeServerMethod(GLOBAL.getContextPath("ExportFormXML", "Form", "Forms"), true, { iFormTypeId: FormTypeId, sFormName: FormName }, "", true, "FORM.ExportXML_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },

    ExportXML_Success: function (bs, data) {
        debugger;
        if (data != null && bs == true) {
            var url = GLOBAL.getContextPath("XMLDownload", "Form", "Forms");
            window.location = url + '?file=' + data;
        }
        else {
            COMMON.prototype.showMessage("Error from XMLExport");
        }
    },
    ImportXML: function (ele) {
        debugger
        var fileName = ele.files[0].name;
        if ((ele.files && ele.files[0])) {
            var fileType = ele.files[0].type;
            if (fileType == "application/xml" || fileType == "text/xml") {
                //
                //var ele = document.getElementById('')
                var fd = new FormData();
                fd.append("file", $(ele)[0].files[0]);
                var obj = {};
                obj.url = GLOBAL.getContextPath("ImportFormXML", "Form", "Forms");
                obj.Excel_FileName = fileName;

                NETWORK.uploadFile(obj, true, ele.files[0], "JSON", true, "FORM.ImportSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
            else {
                COMMON.prototype.showMessage(FORM.getResourceValue("InvalidFormat", ResourceMessages) + ", " + FORM.getResourceValue("btnImportFormatFromXML", ResourceMessages));
                return false;
            }
        }

    },
    DocumentUploadChange: function (ele) {
        debugger;
        if (ele.files.length <= 0) {
            return false;
        }
        var fileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[0].id;
        var hdnFileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[1].id;
        var fileName = ele.files[0].name;
        var imgId = "";
        if ((ele.files && ele.files[0])) {
            var fileType = ele.files[0].type;
            var rowIndex = "";
            if ($(ele).closest('table').length > 0) {
                if ($(ele).closest('table')[0].dataset.tabtype == '1') {
                    $($($($(ele).closest('tr')).find("td:last")).find("input")).val(FORM.bytesToSize(ele.files[0].size, true));
                    rowIndex = ele.closest('tr').rowIndex;

                }
            }
            if (fileType == "image/png" || fileType == "image/gif" || fileType == "image/jpg" || fileType == "image/jpeg" || fileType == "text/plain" || fileType == "application/pdf" || fileType == "application/doc" || fileType == "application/x-zip-compressed" || fileType == "application/x-rar-compressed" || fileType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || fileType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || fileType == "application/vnd.ms-excel" || fileType == "application/msword" || fileName.indexOf(".log") >= 0) {
                var selectedFile = ele.files[0];
                var ele = $(ele)

                selectedFile.convertToBase64(function (base64) {
                    //
                    ele.attr('data-img', '')
                    ele.attr('data-img', base64)
                    //if (base64Data.indexOf(base64) == -1) {
                    //    //
                    //    base64Data.push(base64);
                    //}
                }, imgId, selectedFile);
                //

                $('#' + fileNameInputId).val(fileName);
                $('#' + hdnFileNameInputId).val(fileName);
                if (rowIndex != "") {
                    $('#' + hdnFileNameInputId + rowIndex).val(fileName);
                }
                $(ele).addClass('image');
            }

            else {
                COMMON.prototype.showMessage("Document must be txt,doc,docx,pdf,xls,xlsx format type only!");
                $('#' + fileNameInputId).removeClass('image')
                var numberPattern = /\d+/g;
                var FilesizeNumber = fileNameInputId.match(numberPattern);
                if (FilesizeNumber != null) {
                    $("#iFileSize" + FilesizeNumber).val("");
                }
                return false;
            }
        }
        else {
            $('#' + fileNameInputId).val("");
            $('#' + hdnFileNameInputId).val("");
        }
    },
    OpenImage: function (imagesrc) {
        debugger
        var y = window.top.outerHeight / 2 + window.top.screenY - (500 / 2);
        var x = window.top.outerWidth / 2 + window.top.screenX - (500 / 2);
        var newWindow = window.open("", "pictureViewer",
            "location=no, directories=no, fullscreen=no, " +
            "menubar=no, status=no, toolbar=no, width=" +
            500 + ", height=" + 500 + ",top=" + y + ",left=" + x + ", scrollbars=no");
        newWindow.document.writeln("<html>");
        newWindow.document.writeln("<body style='margin: 0 0 0 0;'>");
        //newWindow.document.writeln("<a href='javascript:window.close();'>");
        newWindow.document.writeln("<img src='" + imagesrc +
           "' alt='Click to close' id='bigImage'/>");
        newWindow.document.writeln("</a>");
        newWindow.document.writeln("</body></html>");
        newWindow.document.close();

    },
    FileUploadChange: function (ele, evt) {
        debugger
        if (ele.files.length <= 0) {
            return false;
        }
        var fileName = ele.files[0].name;
        if ((ele.files && ele.files[0])) {
            var fileType = ele.files[0].type;
            if (fileType == "image/png" || fileType == "image/gif" || fileType == "image/jpg" || fileType == "image/jpeg") {
                //
                if ($(ele).attr('data-maxsize') == "0" || $(ele).attr('data-maxsize') == "")
                    $(ele).attr('data-maxsize', '40');
                if (FORM.bytesToSize(ele.files[0].size, false) < $(ele).attr('data-maxsize')) {
                    var selectedFile = ele.files[0];
                    var ele = $(ele)
                    var imgId = $($($(ele).parent('div')).parent('div').prev()[0]).find('img')[0].id

                    selectedFile.convertToBase64(function (base64) {
                        //
                        ele.attr('data-img', '')
                        ele.attr('data-img', base64)
                        $('#view' + imgId).attr('src', base64);
                        if ($($(ele).parent().next()).find('a').length > 0) {
                            $($(ele).parent().next()).find('a')[0].href = base64;
                            $($(ele).parent().next()).find('a')[0].download = fileName;
                        }
                    }, imgId, selectedFile);

                    //
                    $(".img-logo").css({ "padding-top": "0" });
                    $('#' + imgId).addClass('image')

                    var fileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[0].id;
                    var hdnFileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[1].id;

                    $('#' + fileNameInputId).val(fileName)
                    $('#' + hdnFileNameInputId).val(fileName)

                }
                else {
                    COMMON.prototype.showMessage("Image size must be less than " + $(ele).attr('data-maxsize') + " KB!");
                    $('#imageDataType').attr('src', "").css({ "width": "70px", "height": "60px" });
                    $(".img-logo").css({ "padding-top": "30px" });
                    $('#imageDataType').removeClass('image')
                    return;
                }
            }
            else {
                COMMON.prototype.showMessage("Picture must be an image type only!");
                $('#imageDataType').attr('src', "").css({ "width": "70px", "height": "60px" });
                $(".img-logo").css({ "padding-top": "30px" });
                $('#imageDataType').removeClass('image')

                return;
            }
        }
        else {
            $('#imageDataType').attr('src', "").css({ "width": "70px", "height": "60px" });
            $(".img-logo").css({ "padding-top": "30px" });
            $('#pImage').val("");
            $('#pImage').val("")
            $('#imageDataType').removeClass('image')
        }
    },

    GetCustomizeTree: function () {
        debugger;
        try {
            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            if (FormTypeId > 0) {
                var urlPath = GLOBAL.getContextPath("GridCustomization", "FormCustomization", "Forms");
                var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, bFromLandingScreen: true }, "HTML", true, "FORM.GetCustomizeTree_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        } catch (ex) {
            COMMON.prototype.showMessage("Exception - FORM.GetCustomizeTree " + ex.message);
            return false;
        }
    },

    GetCustomizeTree_Success: function (flag, data) {
        debugger;
        if (flag) {
            $("#CustomizeTree_Body").html("");
            $("#CustomizeTree_Body").html(data);
            $("#CustomizeTree_Modal").modal("show");
        }
    },
    FormsAdvImportClick: function () {
        debugger

        if ($("#txtFormImportFileName").val().trim() == "") {
            COMMON.prototype.showMessage("Please load excel sheet");
            return false;
        }

        try {
            var HeaderFieldsArray = [];
            var BodyFieldsArray = [];
            var FooterFieldsArray = [];
            $(".divHeaderFields").each(function () {
                //
                debugger
                var IENamePair = [];
                var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Grid" + HeaderFieldsArray.length;
                var RowCount = $("#" + GridId + "_body").find('tr').length;
                for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                    var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                    var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                    var objIENamePair = {
                        FieldId: cellObject_Col2.getCellData("value"),
                        MapField: cellObject_Col3.getCellText(),
                    }
                    IENamePair.push(objIENamePair);
                }
                if (IENamePair.length > 0) {
                    var AdvImportHeaderBodyFields = {
                        IENamePairArr: IENamePair
                    }
                    HeaderFieldsArray.push(AdvImportHeaderBodyFields);
                }
            });

            $(".divBodyFields").each(function () {
                //
                debugger
                var IENamePair = [];
                var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Body" + BodyFieldsArray.length;
                var RowCount = $("#" + GridId + "_body").find('tr').length;
                for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                    var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                    var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                    var objIENamePair = {
                        FieldId: cellObject_Col2.getCellData("value"),
                        MapField: cellObject_Col3.getCellText(),
                    }
                    IENamePair.push(objIENamePair);
                }
                if (IENamePair.length > 0) {
                    var AdvImportHeaderBodyFields = {
                        IENamePairArr: IENamePair
                    }
                    BodyFieldsArray.push(AdvImportHeaderBodyFields);
                }
            });

            $(".divFooterFields").each(function () {
                //
                debugger
                var IENamePair = [];
                var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Footer" + FooterFieldsArray.length;
                var RowCount = $("#" + GridId + "_body").find('tr').length;
                for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                    var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                    var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                    var objIENamePair = {
                        FieldId: cellObject_Col2.getCellData("value"),
                        MapField: cellObject_Col3.getCellText(),
                    }
                    IENamePair.push(objIENamePair);
                }
                if (IENamePair.length > 0) {
                    var AdvImportHeaderBodyFields = {
                        IENamePairArr: IENamePair
                    }
                    FooterFieldsArray.push(AdvImportHeaderBodyFields);
                }
            });
            var bAppend = false; var bUpdateonly = false; var bOverWrite = false; var bIgnore = false; var bHeaderUpdate = false;
            if ($("#ddlImportAction").val() == "0") {
                bAppend = true;
            }
            else if ($("#ddlImportAction").val() == "1") {
                bUpdateonly = true;
            }
            else if ($("#ddlImportAction").val() == "2") {
                bOverWrite = true;
            }
            if ($("#ddlHeaderFieldAction").val() == "0") {
                bIgnore = true;
            }
            else if ($("#ddlHeaderFieldAction").val() == "1") {
                bHeaderUpdate = true;
            }
            if (HeaderFieldsArray.length > 0 || BodyFieldsArray.length > 0) {
                var m_MasterTypeId = document.getElementById('hdnFormTypeId').value;
                NETWORK.executeServerMethod(GLOBAL.getContextPath("FormAdvImportClick", "Form", "Forms"), true,
                    { HeaderFieldsArray: HeaderFieldsArray, BodyFieldsArray: BodyFieldsArray, FooterFieldsArray: FooterFieldsArray, bAppend: bAppend, bUpdateonly: bUpdateonly, bOverride: bOverWrite, bIgnore: bIgnore, bHeaderUpdate: bHeaderUpdate, MasterTypeId: m_MasterTypeId },
                    "JSON", true, "FORM.FormAdvImportClickSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }

        } catch (ex) {
            alert("Exception-> MastersAdvImportClick : " + ex.message);
            return false;
        }
    },

    ImportFormsBulkData: function () {
        debugger
        try {
            if ($("#txtFormImportFileName").val().trim() == "") {
                COMMON.prototype.showMessage("Please load excel sheet");
                return false;
            }

            var m_FormTypeId = document.getElementById('hdnFormTypeId').value;
            var bAppend = false; var bUpdateonly = false; var bOverWrite = false;
            if ($("#ddlImportAction").val() == "0") {
                bAppend = true;
            }
            else if ($("#ddlImportAction").val() == "1") {
                bUpdateonly = true;
            }
            else if ($("#ddlImportAction").val() == "2") {
                bOverWrite = true;
            }
            NETWORK.executeServerMethod(GLOBAL.getContextPath("btnSQLBulk_Click", "Form", "Forms"), true,
                { FormTypeId: m_FormTypeId, bAppend: bAppend, bUpdateonly: bUpdateonly, bOverride: bOverWrite },
                "JSON", true, "FORM.FormAdvImportClickSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }

        catch (ex) {
            alert("Exception-> ImportMastersBulkData : " + ex.message);
            return false;
        }
    },
    advImportSaveMapping: function () {
        debugger
        //var HeaderFieldsArray = [];
        //var BodyFieldsArray = [];
        //var FooterFieldsArray = [];
        var h = 0; b = 0; f = 0;
        var AdvMasterImportArray = [];
        $(".divHeaderFields").each(function () {
            //
            var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Grid" + h;
            var RowCount = $("#" + GridId + "_body").find('tr').length;
            for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                var AdvMasterImport = {
                    FormTypeId: $("#hdnFormTypeId").val(),
                    TableType: 0,
                    FieldId: cellObject_Col2.getCellData("value"),
                    FieldName: cellObject_Col3.getCellText(),
                    TabId: $(this).attr('data-tabid')
                }
                AdvMasterImportArray.push(AdvMasterImport);

            }
            h++;
        });

        $(".divBodyFields").each(function () {
            //
            var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Body" + b;
            var RowCount = $("#" + GridId + "_body").find('tr').length;
            for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                var AdvMasterImport = {
                    FormTypeId: $("#hdnFormTypeId").val(),
                    TableType: 1,
                    FieldId: cellObject_Col2.getCellData("value"),
                    FieldName: cellObject_Col3.getCellText(),
                    TabId: $(this).attr('data-tabid')
                }
                AdvMasterImportArray.push(AdvMasterImport);

            }
            b++;
        });
        $(".divFooterFields").each(function () {
            //
            debugger
            var IENamePair = [];
            var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Footer" + f;
            var RowCount = $("#" + GridId + "_body").find('tr').length;
            for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                var AdvMasterImport = {
                    FormTypeId: $("#hdnFormTypeId").val(),
                    TableType: 2,
                    FieldId: cellObject_Col2.getCellData("value"),
                    FieldName: cellObject_Col3.getCellText(),
                    TabId: $(this).attr('data-tabid')
                }
                AdvMasterImportArray.push(AdvMasterImport);

            }
            f++;
        });

        if (AdvMasterImportArray.length == 0) {
            COMMON.prototype.showMessage(FORM.getResourceValue("msgNoFields", GetMasterResourceMessages));
            return false;
        }
        var IdNamePair = {
            ID: OPTIONCONTROL.getControlValue("id_FormExportTemplate"),
            Name: OPTIONCONTROL.getControlText("id_FormExportTemplate")
        }
        if (IdNamePair.Name == "") {
            COMMON.prototype.showMessage(FORM.getResourceValue("msgenternameoftheTemplate", ResourceMessages));
            return false;
        }
        var advImportSaveMappingResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveAdvMasterMapping", "Form", "Forms"), true, {
            advFieldList: AdvMasterImportArray, objTemplate: IdNamePair
        }, "JSON", false, "FORM.advImportSaveMappingResultSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },
    FormExportTemplateLeave: function () {
        debugger
        var FormExportTemplateId = OPTIONCONTROL.getControlValue("id_FormExportTemplate");
        var FormTypeId = document.getElementById('hdnFormTypeId').value;
        if (FormExportTemplateId != "0" && FormExportTemplateId != "") {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAdvMasterMapping", "Form", "Forms"), true,
                { FormTypeId: FormTypeId, FormExportTemplateId: FormExportTemplateId }, "HTML", true, "FORM.loadFormImportSheetDataSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    },
    SortOnClick: function () {
        debugger
        var FormTypeId = document.getElementById('hdnFormTypeId').value;
        var url = GLOBAL.getContextPath("FormSortingClick", "Form", "Forms");
        //var newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
        var tableId = document.getElementById('tblSort_body');
        FGRIDCONTROL.update("tblSort");
        var SortingFields = []
        for (var i = 0; i < tableId.rows.length; i++) {
            //var ind = document.getElementById('ddlSorting' + (index + 1) + '').selectedIndex;
            var FirstCellObj = FGRIDCONTROL.getCellObject("tblSort", (i + 1), 1);
            var SecondCellObj = FGRIDCONTROL.getCellObject("tblSort", (i + 1), 2);
            tb = document.getElementById("tblSort_body");
            //var HasSelectInFirstTd = $($($('#tblSort tbody').find('tr')[i]).find('td')[1]).find('select').length > 0 ? true : false;
            //var HasSelectInSecondTd = $($($('#tblSort tbody').find('tr')[i]).find('td')[2]).find('select').length > 0 ? true : false;
            var objSortingFields = {
                //FieldId: HasSelectInFirstTd == true ? $("#tblSort_SelectField").val() : FirstCellObj.getCellData("value"),
                //FieldName: HasSelectInFirstTd == true ? $($("#tblSort_SelectField").find("option:selected")).attr("data-fieldname") : FirstCellObj.getCellData("fieldname"),
                //SortingOrder: HasSelectInSecondTd == true ? $("#tblSort_SortingOrder").val() : SecondCellObj.getCellData("value")
                FieldId: FirstCellObj.getCellData("value"),
                FieldName: FirstCellObj.getCellText(),
                SortingOrder: SecondCellObj.getCellData("value")
            }
            if (objSortingFields.FieldId != '' && objSortingFields.FieldId != '0' && objSortingFields.SortingOrder != "") {
                SortingFields.push(objSortingFields);
            }
        }

        var objSortingMaster = {
            //IsSortSubGroups: $('#chkSubGroupSorting').is(':checked') ? '1' : '0',
            MasterIds: 0,
            MasterTypeId: FormTypeId,
            SortingFields: SortingFields,
            //TreeId: iTreeId
        }
        if (SortingFields.length > 0) {
            NETWORK.executeServerMethod(GLOBAL.getContextPath("FormSortingClick", "Form", "Forms"), true,
                { objSortingMaster: objSortingMaster }, "JSON", true, "FORM.sorting_success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            COMMON.prototype.showMessage(FORM.getResourceValue("msgPleaseselecttheconditiononwhichyouwishtosort", ResourceMessages));
            return false;
        }
    },
    SendAlertEnable: function (ele) {
        var chkId = ele.id;
        if (ele.checked) {
            document.getElementById("ExtraField_DaysText").disabled = false;
            document.getElementById("ExtraField_Days").disabled = false;
            document.getElementById("ExtraField_AlertType").disabled = false;
            document.getElementById("ExtraField_Template").disabled = false;
            document.getElementById("ExtraField_AlertTemplate").disabled = false;
        }
        else {
            document.getElementById("ExtraField_DaysText").disabled = true;
            document.getElementById("ExtraField_Days").disabled = true;
            document.getElementById("ExtraField_AlertType").disabled = true;
            document.getElementById("ExtraField_Template").disabled = true;
            document.getElementById("ExtraField_AlertTemplate").disabled = true;
        }
    },
    SetAlertTemplate(ele) {
        var AlertType = $(ele).val();
        if (AlertType == 2) {
            document.getElementById("ExtraField_Template").style.display = "block";
            document.getElementById("ExtraField_AlertTemplate").style.display = "none";
        }
        else {
            document.getElementById("ExtraField_Template").style.display = "none";
            document.getElementById("ExtraField_AlertTemplate").style.display = "block";
        }
    },
    getIncrementalValue: function (element, ControlWithIncrementalBehaviour) {
        debugger
        //var group = document.getElementById("hdnIsgroup").value;
        var ControlNameWithIncrementalBehaviour = '';
        //var ParentId = document.getElementById("hdnParentId").value;
        //if ((group == "True" || group == true) && ParentId == 0)
        //    return false;
        if (typeof sClickedElement == "undefined" || sClickedElement == "" || sClickedElement == null) {
            sClickedElement = "btnNew";
        }
        var clickedEle = sClickedElement;//$("#hdnClickedElement").val();(becoz whileopening 2 popup.hdn variable not updating)
        var eleId = $(element)[0].id;
        var FieldId = $(element)[0].dataset.ilinktype != undefined ? $(element)[0].dataset.fieldid : $(element).attr("fieldid");
        var FieldName = eleId;// $(element)[0].dataset.fieldname;
        var MandatoryFields = "";
        var sMandatory = '';
        var optionControlPrimaryValue = $(element)[0].dataset.ilinktype != undefined ? OPTIONCONTROL.getControlValue(eleId) : "";
        var optionControlDisplayValue = $(element)[0].dataset.ilinktype != undefined ? OPTIONCONTROL.getControlText(eleId) : ""
        var ControlType = $(element)[0].dataset.ilinktype == undefined ? $(element)[0].type : "OptionControl";
        if (ControlType == 'OptionControl') {

            MandatoryFields = OPTIONCONTROL.getMandatoryFields(eleId).split(",");
            if (MandatoryFields.length > 0) {
                var arrMandatory = {};
                for (var i = 0; i < MandatoryFields.length; i++) {
                    arrMandatory[MandatoryFields[i]] = OPTIONCONTROL.getControlValue(eleId, MandatoryFields[i]);
                }
                sMandatory = JSON.stringify(arrMandatory);
            }
            ControlNameWithIncrementalBehaviour = ControlWithIncrementalBehaviour;
            ControlWithIncrementalBehaviour = document.getElementById(ControlNameWithIncrementalBehaviour);
        }
        else {
            ControlNameWithIncrementalBehaviour = $(ControlWithIncrementalBehaviour)[0].id.replace("_" + clickedEle, "");
        }

        //@ here if copyfromdata is set for any txtttype field and increment is defined on the field then always take copyfrom parent value not the userinput- starts
        if (eleId.length > 0 && document.getElementById(eleId) != null && document.getElementById(eleId).getAttribute('iscopyfromparent') == "True" &&
            document.getElementById(eleId).getAttribute('fdatatype') == "0") {

            var CopyData = localStorage.getItem("CopyFromParentValues");
            if (CopyData != null && CopyData.length > 0) {
                var CopyfieldsndData = JSON.parse(CopyData);
                if (CopyfieldsndData != null && CopyfieldsndData.length > 0) {
                    if (CopyfieldsndData.filter(x=>x.Name == eleId).length > 0) {
                        document.getElementById(eleId).value = CopyfieldsndData.filter(x=>x.Name == eleId)[0].Tag;
                    }
                }
            }

        }

        var form = $("#AllFormEntryControls").serialize() + '&FieldId=' + FieldId + '&FieldName=' + FieldName.replace("_" + clickedEle, "") + '&MandatoryFields=' + MandatoryFields +
            '&optionControlPrimaryValue=' + optionControlPrimaryValue + '&ControlType=' + ControlType + '&ControlNameWithIncrementalBehaviour='
            + ControlNameWithIncrementalBehaviour + '&optionControlDisplayValue=' + optionControlDisplayValue +
            '&hdnFormEntryTypeId=' + $("#hdnFormEntryTypeId").val() + '&hdnModule=' + $("#hdnModule").val() + '&hdnFormName=' + $("#hdnFormName_" + clickedEle).val();


        var Finalform = $("#AllFormEntryControls").serializeArray();
        Finalform.push({ name: "FieldId", value: FieldId });
        Finalform.push({ name: "FieldName", value: FieldName.replace("_" + clickedEle, "") });
        Finalform.push({ name: "MandatoryFields", value: MandatoryFields });
        Finalform.push({ name: "optionControlPrimaryValue", value: optionControlPrimaryValue });
        Finalform.push({ name: "ControlType", value: ControlType });
        Finalform.push({ name: "ControlNameWithIncrementalBehaviour", value: ControlNameWithIncrementalBehaviour });
        Finalform.push({ name: "optionControlDisplayValue", value: optionControlDisplayValue });
        Finalform.push({ name: "hdnFormEntryTypeId", value: $("#hdnFormEntryTypeId").val() });
        Finalform.push({ name: "hdnModule", value: $("#hdnModule").val() });
        Finalform.push({ name: "hdnFormName", value: $("#hdnFormName_" + clickedEle).val() });
        //Finalform.push({ name: "hdnButtonClickName", value: $("#hdnButtonClickName").val() });
        if (Finalform.filter(x=>x.name == "hdnClickedElement") != null && Finalform.filter(x=>x.name == "hdnClickedElement").length == 0) {
            Finalform.push({ name: "hdnClickedElement", value: clickedEle });
        }
        if (Finalform.filter(x=>x.name == "hdnFormId") != null && Finalform.filter(x=>x.name == "hdnFormId").length == 0) {
            Finalform.push({ name: "hdnFormId", value: $("#hdnFormId_" + clickedEle).val() });
        }
        if (Finalform.filter(x=>x.name == "hdnFormEntryTypeId") != null && Finalform.filter(x=>x.name == "hdnFormEntryTypeId").length == 0) {
            Finalform.push({ name: "hdnFormEntryTypeId", value: $("#hdnFormEntryTypeId").val() });
        }
        if (ControlType == "OptionControl") {
            for (var i = 0; i < MandatoryFields.length; i++) {

                Finalform.push({ name: eleId + '-' + MandatoryFields[i], value: arrMandatory[MandatoryFields[i]] });
            }
        }
        var allControls = document.querySelectorAll("[data-controlwithincrement]");
        if (allControls != null && allControls.length > 0) {
            for (var i = 0; i < allControls.length; i++) {
                if (allControls[i].id != eleId && ($('#' + allControls[i].id).attr("formdatatype") == 12) || $('#' + allControls[i].id).attr("formdatatype") == 14)//data-masterdatatype="12"
                {
                    MandatoryFields = OPTIONCONTROL.getMandatoryFields(allControls[i].id).split(",");
                    if (MandatoryFields.length > 0) {
                        var arrMandatory = {};
                        for (var j = 0; j < MandatoryFields.length; j++) {
                            arrMandatory[MandatoryFields[j]] = OPTIONCONTROL.getControlValue(allControls[i].id, MandatoryFields[j]);
                        }
                        for (var k = 0; k < MandatoryFields.length; k++) {

                            Finalform.push({ name: allControls[i].id + '-' + MandatoryFields[k], value: arrMandatory[MandatoryFields[k]] });
                        }

                    }

                }
            }
        }

        var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("getIncrementalValues", "Form", "Forms"), true, Finalform, "JSON", true, "FORM.IncrementalValueSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ControlWithIncrementalBehaviour);
    },
    IncrementalValueSuccess: function (bs, data, ControlWithIncrementalBehaviour) {
        //debugger
        if (bs == true) {
            $(ControlWithIncrementalBehaviour).val(data);
            return false;
        }
        {
            COMMON.prototype.showMessage('Error');
        }
    },
    SetIncremental: function (element, IsFromTrans) {
        //debugger
        //var IsPickCode = document.getElementById('hdnIsPickCode').value;
        var FieldForPickCode = [];
        //if (IsPickCode == "True") {
        //    var FieldNames = document.getElementById("sCode").getAttribute('data-incrementfieldname');
        //    if (FieldNames != null && FieldNames != undefined && FieldNames.length > 0) {
        //        FieldForPickCode = FieldNames.split(',');
        //    }
        //}
        var ControlWithIncrementalBehaviour = $(element);
        var ControlWithIncrementalBehaviourid = '';
        if (ControlWithIncrementalBehaviour != null && ControlWithIncrementalBehaviour.length > 0)
            ControlWithIncrementalBehaviourid = ControlWithIncrementalBehaviour[0].id;
        var IncrementalBehaviourId = ControlWithIncrementalBehaviour.attr('incrementfieldname');
        var IsOnLoadIncrement = ControlWithIncrementalBehaviour.attr('isonloadincrement');
        if (IncrementalBehaviourId != '') {
            IncrementalBehaviourId = IncrementalBehaviourId.split(',');
            IncrementalBehaviourId = IncrementalBehaviourId.filter(function (n) { return n != "" });
            if (FORM.CheckAllElementsIdenticalInArray(IncrementalBehaviourId)) {
                if (IsFromTrans != undefined && IsFromTrans) {
                    FORM.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                    return;
                }

                if (IsOnLoadIncrement == "True" && $("#hdnFormId_" + clickedElement).val() <= 0) {//only attach events if there is no pickcode enabled,or any other field except scode in case of pickcode
                    FORM.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                }
                else {
                    if (IncrementalBehaviourId.length >= 1) {

                        FORM.AddIncrementEvents(element, IncrementalBehaviourId, false, FieldForPickCode, ControlWithIncrementalBehaviour, ControlWithIncrementalBehaviourid);
                    }
                    else {
                        //if (ControlWithIncrementalBehaviourid != 'sCode' || IsPickCode !== 'True') {
                        $(document).on('blur', '#' + IncrementalBehaviourId[0], function () {
                            FORM.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                        })

                    }
                };
            } else {
                for (var i = 0; i < IncrementalBehaviourId.length; i++) {
                    //
                    if (IncrementalBehaviourId[i] != "") {
                        var ele = document.getElementById(IncrementalBehaviourId[i]);
                        if (ele != null && ele != undefined) {
                            ele.classList.add("");//@making all the fields which are used for any increment mandatory
                            if (ele.classList.contains('OptionControl')) {
                                ele.setAttribute('IsOcIncrement', 'True');
                                ele.setAttribute('data-ControlWithIncrement', ControlWithIncrementalBehaviourid);
                            }
                        }
                        //if ((ele.id == "sCode" || FieldForPickCode.includes(ele.id)) && IsPickCode == "True") {
                        //    continue;//@do not bind the below function in case it is pickcode
                        //}
                        $(document).on('blur', '#' + IncrementalBehaviourId[i], function () {
                            FORM.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                        });
                    }
                }
            }


        }

    },
    AddIncrementEvents: function (element, IncrementalBehaviourId, IsPickCode, FieldForPickCode, ControlWithIncrementalBehaviour, ControlWithIncrementalBehaviourid) {
        for (var i = 0; i < IncrementalBehaviourId.length; i++) {
            //
            if (IncrementalBehaviourId[i] != "") {
                var ele = document.getElementById(IncrementalBehaviourId[i]);
                if (ele != null && ele != undefined) {
                    //ele.classList.add("");//@making all the fields which are used for any increment mandatory
                    if (ele.classList.contains('OptionControl')) {
                        ele.setAttribute('data-IsOcIncrement', 'True');
                        ele.setAttribute('data-ControlWithIncrement', ControlWithIncrementalBehaviourid);
                    }
                }
                if ((ele.id == "sCode" || FieldForPickCode.includes(ele.id)) && IsPickCode == "True") {
                    continue;//@do not bind the below function in case it is pickcode
                }
                $(document).on('blur', '#' + IncrementalBehaviourId[i], function () {
                    FORM.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                });
            }
        }

    },
    CheckAllElementsIdenticalInArray: function (array) {
        for (var i = 0; i < array.length - 1; i++) {
            if (array[i] !== array[i + 1]) {
                return false;
            }
        }
        return true;
    },
    gotoIncrement: function (element) {
        debugger;
        if (element != null && element != undefined) {
            var attrValue = element.getAttribute('data-IsOcIncrement');
            if (attrValue != null && attrValue != undefined && attrValue == 'True') {
                var ControlWithIncrementalBehaviour = element.getAttribute('data-ControlWithIncrement');
                //var IsPickCode = document.getElementById('hdnIsPickCode').value;

                if (ControlWithIncrementalBehaviour != 'sCode') {
                    FORM.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                }
            }
        }
    },
    onRevisionBlur: function (ClickedEle) {
        debugger
        var RevisionId = $('#txtRevision_' + ClickedEle).val();
        if (RevisionId == '') {
            RevisionId = parseInt(-1);
        }
        else if (parseInt($('#txtRevision_' + ClickedEle).val()) > parseInt($('#hdnCurrentRevisionId_' + ClickedEle).val())) {
            $('#txtRevision').val($('#hdnCurrentRevisionId_' + ClickedEle).val());
            return false;
        }
        var IsDisable = (parseInt($('#txtRevision_' + ClickedEle)) < parseInt($('#hdnCurrentRevisionId_' + ClickedEle).val())) ? true : false;

        var iFormId = $("#hdnFormId_" + sClickedElement + "").val();
        var FormTypeId = parseInt($("#hdnFormTypeId").val());
        //var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("getRevisedDataOnRevisionId", "Form", "Forms"),
        //    true, { iRevisionId: RevisionId }, "HTML", true, ".Blur_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", IsDisable);
        var urlPath = GLOBAL.getContextPath("FormEntry", "Form", "Forms");
        var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: iFormId, sClickedElement: ClickedEle, iRevisionId: RevisionId }, "HTML", true, "FORM.GetForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ClickedEle);
    },

    loadAdvanceImportSheetData: function (ele) {
        var fileName = ele.files[0].name;
        if ((ele.files && ele.files[0])) {
            var fileType = ele.files[0].type;
            if (fileType == "application/xml" || fileType == "text/xml" || fileType == "application/vnd.ms-excel" || fileType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
                //
                //var ele = document.getElementById('')
                //$("#txtAdvImportFileName").val(fileName);
                $("#txtFormImportFileName").val(fileName);
                //$("#txtFileUpload").val(fileName);
                var fd = new FormData();
                fd.append("file", $(ele)[0].files[0]);
                var obj = {};
                obj.url = GLOBAL.getContextPath("loadAdvanceImportSheetData", "Form", "Forms");
                obj.Excel_FileName = fileName;
                obj.Excel_MasterTypeId = document.getElementById('hdnFormTypeId').value;
                obj.IsBulk = $("#ddlBulkImport").val() == "2" ? true : false;
                NETWORK.uploadFile(obj, true, ele.files[0], "html", true, "FORM.loadFormImportSheetDataSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        else {
            COMMON.prototype.showMessage(FORM.getResourceValue("msgImportSheetFormat", ResourceMessages));
        }
    },

    sorting_success: function (flag, data) {
        debugger;
        if (flag == true) {
            if (data.length > 0) {
                COMMON.prototype.showMessage(data);
            }
            else {
                $('#Sort_Modal').modal('hide');
                FORM.HomeScreen();
                COMMON.prototype.showMessage("Success");
            }
        }

    },

    loadFormImportSheetDataSucess: function (bSuccess, data) {
        debugger
        if (bSuccess == true && data.length > 100) {
            $("#divHeaderBodyPartial").html("").append(data);
        }
        else {
            $("#txtFormImportFileName,#txtFileUpload").val('');
            COMMON.prototype.showMessage("Error in importing master Excel data " + data);
        }
    },

    FormAdvImportClickSuccess: function (bs, data) {
        debugger
        if (bs == true && !isNaN(parseInt(data))) {
            data = data == "0" ? "" : data;
            COMMON.prototype.showMessage(data + " Records " + FORM.getResourceValue("msgImportedSuccessfully", ResourceMessages));
            var m_MasterTypeId = document.getElementById('hdnFormTypeId').value;

        }
        else {
            COMMON.prototype.showMessage("Error in processing import sheet " + data);
        }
    },

    advImportSaveMappingResultSuccess: function (bs, data) {
        if (bs == true && data == "") {
            COMMON.prototype.showMessage(FORM.getResourceValue("msgMappingSuccesfull", ResourceMessages));
        }
        else {
            COMMON.prototype.showMessage(data);
        }
    },

    HomeScreen: function () {
        debugger
        var FormTypeid = document.getElementById("hdnFormTypeId").value;
        var MenuId = document.getElementById("hdnMenuId").value;
        var PathLoc = GLOBAL.getContextPath("Form", "Form", "Forms");

        var result = NETWORK.executeServerMethod(PathLoc, true, { iTypeId: FormTypeid, iMenuId: MenuId }, "HTML", false, "", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", "");
        if (result.data != null) {
            $("#page_Content").html('');
            $("#page_Content").html(result.data);
            $('#page_Content').removeClass('overflowNone');
        }

    },

    ImportSucess: function (bs, data) {
        debugger;
        if (bs == true && data != null) {
            if (data.ErrorMessege != "") {
                COMMON.prototype.showMessage(data.ErrorMessege);
            }
            else {
                COMMON.prototype.showMessage(FORM.getResourceValue("msgDataImportedSucessfully", ResourceMessages));
            }
        }
        else {
            COMMON.prototype.showMessage("Please import an XML file.")
            return false;
        }

    },

    btnFormSideBarClick: function (element) {
        debugger
        if ($("#div_Properties").attr("data-viewinfopanel") == "False") {
            COMMON.prototype.showMessage(getResourceValue("msgUserdoesnothavepermission", GetMasterResourceMessages))
            return false;
        }

        COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
        if ($('#hdnsideBar').val() == 0) {
            $('#hdnsideBar').val("1");
            $('#Main').css({ 'width': '100%' });
            $('#mainFormDiv').removeClass('col-lg-12 col-md-12 col-sm-12 col-xs-12');
            $('#mainFormDiv').addClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
            $('#mainFormDiv').css('width', '');
            $('#infoPanelSidebarDiv').addClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
            $('#infoPanelSidebarDiv').show();
            $('#divInfoPanel, #sidebar_paging_div').show();
            $('#divInfoBtns,#btnsideBar').hide();
            $('.divPanelData').hide();
            $(element).removeClass('hidePanel');
            InfoPanelPermissions();
        }
        else {
            $('#hdnsideBar').val("0");
            $('#Main').css({ 'width': '101%' });
            $('#mainFormDiv').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
            $('#mainFormDiv').addClass('col-lg-12 col-md-12 col-sm-12 col-xs-12');
            $('#mainFormDiv').css('width', '101%');
            $('#infoPanelSidebarDiv').removeClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
            $('#infoPanelSidebarDiv').hide();
            $('#divInfoPanel, #sidebar_paging_div').hide();
            $('#divInfoBtns,#btnsideBar').show();
            $(element).addClass('hidePanel');

        }
    },

    GetUniqueFieldData: function (ele) {
        debugger
        try {

            var FormTypeId = parseInt($("#hdnFormTypeId").val());
            var urlPath = GLOBAL.getContextPath("FormEntry", "Form", "Forms");
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iFormTypeId: FormTypeId, iFormId: 0, sClickedElement: "btnEdit", sUniQueFieldname: ele.name, ouniqueFieldvalue: ele.value }, "HTML", true, "FORM.GetForm_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        }
        catch (err) {
            COMMON.prototype.showMessage("{Form.GetUniqueFieldData} " + err.message, "Exception");
        }
    },

    getMappingFieldsData: function (Element) {
        debugger
        try {

            var MappingfieldValue = OPTIONCONTROL.getControlValue(Element.id);
            var iFormFieldId = Element.getAttribute("data-fieldid");
            var sTableName = OPTIONCONTROL.getTableName(Element.id);
            var sMappingField = OPTIONCONTROL.getPrimaryField(Element.id);
            NETWORK.executeServerMethod(GLOBAL.getContextPath("getMappingFieldData", "Form", "Forms"), true,
                   { iFormFieldId: iFormFieldId, stableName: sTableName, Mapfieldvalue: MappingfieldValue, sMappingField: sMappingField }, "JSON", true, "FORM.FormLeaveSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }

        catch (err) {
            COMMON.prototype.showMessage("{Form.getMappingFieldsData} " + err.message, "Exception");
        }
    },

    FormLeaveSuccess: function (flag, data) {
        if (flag == true && data != null) {
            for (var i = 0; i < data.length; i++) {
                $(".HeaderField_" + sClickedElement + "").each(function (index, element) {
                    if ($(element).hasClass("DatePicker")) {
                        if ($("#hdn" + element.id).data('fieldid') == data[i].ID) {
                            DATEPICKER.setDate(element.id, today);
                            DATEPICKER.setDate(element.id, data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("clsFormdatetime")) {
                        if ($("#hdn" + element.id).data('fieldid') == data[i].ID) {
                            DATEPICKER.setDate(element.id, today);
                            DATEPICKER.setDate(element.id, data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("TimePicker")) {
                        if ($("#hdn" + element.id).data('fieldid') == data[i].ID) {
                            DATEPICKER.setDate(element.id, today);
                            DATEPICKER.setDate(element.id, data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("DropDown")) {
                        if ($(element).attr('fieldid') == data[i].ID) {
                            $("#" + element.id).val("");
                            $("#" + element.id).val(data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("CheckBox")) {
                        if ($(element).attr('fieldid') == data[i].ID) {
                            $("#" + element.id).attr("checked", false);
                            var a = data[i].Tag;
                            $("#" + element.id).attr("checked", a);

                        }
                    }
                    else if ($(element).hasClass("OptionControl")) {
                        var iLinkType = parseInt($(element).data('ilinktype'));
                        if (iLinkType == 0) {
                            if ($(element).attr('data-fieldid') == data[i].ID && data[i].ExtraInfo != null) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlValue(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].ExtraInfo);
                                OPTIONCONTROL.setControlValue(element.id, data[i].Tag);

                            }
                            else if ($(element).attr('data-fieldid') == data[i].ID) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].Tag);

                            }

                        }
                        else {
                            if ($(element).attr('data-fieldid') == data[i].ID && data[i].ExtraInfo != null) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].ExtraInfo);
                            }
                            else if ($(element).attr('data-fieldid') == data[i].ID) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].Tag);
                            }
                        }
                    }

                    else {
                        if ($(element).attr('fieldid') == data[i].ID) {
                            $("#" + element.id).val("");      
                            $("#" + element.id).val(data[i].Tag);
                        }
                    }
                });
                
                $($("#tabContent_" + sClickedElement + "").find(".fgrid")).each(function (index, element) {
                   // debugger;
                    var sGridId = element.id;
                    FGRIDCONTROL.update(sGridId);
                    var iTotalRows = FGRIDCONTROL.getTotalRows(sGridId);
                    for (iRow = 1; iRow <= iTotalRows; iRow++) {
                      //  debugger;
                        var RowData = FGRIDCONTROL.getRowValue(sGridId, iRow);
                        if (RowData != null && RowData != undefined) {
                            if (RowData.length > 2) {
                                    var iTotalColumns = RowData.length;
                                    for (iColumn = 2; iColumn < iTotalColumns; iColumn++) {              
                                        if (RowData[iColumn].MetaData.fieldid == data[i].ID) {                                                                                                                              
                                            cellobj = FGRIDCONTROL.getCellObject(sGridId, iRow, iColumn + 1);
                                            if (data[i].ExtraInfo != null)
                                            {
                                                value = data[i].ExtraInfo;
                                                cellobj.setCellData("value", data[i].Tag);
                                                cellobj.setCellText(value);
                                            }
                                            else
                                            {
                                                value = data[i].Tag;
                                                cellobj.setCellData("value",value );
                                                cellobj.setCellText(value);
                                            }   
                                                                                 
                                        }
                                    }
                            }
                        }
                    }
                });
                $(".FooterField_" + sClickedElement + "").each(function (index, element) {             
                    if ($(element).hasClass("DatePicker")) {
                        if ($("#hdn" + element.id).data('fieldid') == data[i].ID) {
                            DATEPICKER.setDate(element.id, today);
                            DATEPICKER.setDate(element.id, data[i].Tag);
                        }
                    }

                    else if ($(element).hasClass("clsFormdatetime")) {
                        if ($("#hdn" + element.id).data('fieldid') == data[i].ID) {
                            DATEPICKER.setDate(element.id, today);
                            DATEPICKER.setDate(element.id, data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("TimePicker")) {
                        if ($("#hdn" + element.id).data('fieldid') == data[i].ID) {
                            DATEPICKER.setDate(element.id, today);
                            DATEPICKER.setDate(element.id, data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("DropDown")) {
                        if ($(element).attr('fieldid') == data[i].ID) {
                            $("#" + element.id).val("");
                            $("#" + element.id).val(data[i].Tag);
                        }
                    }
                    else if ($(element).hasClass("CheckBox")) {
                        if ($(element).attr('fieldid') == data[i].ID) {
                            $("#" + element.id).attr("checked", false);
                            var a = data[i].Tag;
                            $("#" + element.id).attr("checked", a);

                        }
                    }
                    else if ($(element).hasClass("FOptionControl")) {
                        var iLinkType = parseInt($(element).data('ilinktype'));
                        if (iLinkType == 0) {
                            if ($(element).attr('data-fieldid') == data[i].ID && data[i].ExtraInfo != null) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlValue(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].ExtraInfo);
                                OPTIONCONTROL.setControlValue(element.id, data[i].Tag);

                            }
                            else if ($(element).attr('data-fieldid') == data[i].ID) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].Tag);
                                //OPTIONCONTROL.setControlValue(element.id, data[i].Tag);
                            }

                        }
                        else {
                            if ($(element).attr('data-fieldid') == data[i].ID && data[i].ExtraInfo != null) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].ExtraInfo);
                            }
                            else if ($(element).attr('data-fieldid') == data[i].ID) {
                                OPTIONCONTROL.setControlText(element.id, "");
                                OPTIONCONTROL.setControlText(element.id, data[i].Tag);
                            }
                        }
                    }

                    else {
                        if ($(element).attr('fieldid') == data[i].ID) {
                            $("#" + element.id).val("");
                            $("#" + element.id).val(data[i].Tag);
                        }
                    }
                });


            }
        }

    },

    onFormAuthorizeClsClick: function (ele) {
        debugger
        var AuthStatusEle = document.getElementById('hdnAuthStaus');
        GridIdRowValues = [];
        if (AuthStatusEle != null) {
            if (AuthStatusEle.value == "1") {
                COMMON.prototype.showMessage("This record is already authorized");
                return;
            }
            else if (AuthStatusEle.value == "2") {
                COMMON.prototype.showMessage("This record is already authorized");
                return;
            }

        }

        $(".chkSelect").each(function () {
            if ($(this).is(":checked")) {
                var iRow = $(this).parents("tr:first")[0].rowIndex - 2;
                var rowValue = FGRIDCONTROL.getRowValue("grd_Form", iRow);
                GridIdRowValues.push(rowValue[3].Value);
            }
        });

        document.getElementById("txt_authMessage").value = '';
        document.getElementById("hdnAuthValue").value = '';

        var authValue = $(ele).data().content;
        var authName = $(ele).data().name;
        var formTypeId = $('#hdnFormTypeId').val();
        if ($(ele)[0].dataset.masterid != undefined) {
            GridIdRowValues.push($(ele)[0].dataset.masterid);
            if (authName == "Authorization") {
                document.getElementById("lblAuthMsg").textContent = "Reason For Approval";
            }
            else if (authName == "Rejection") {
                document.getElementById("lblAuthMsg").textContent = "Reason For Rejection";
            }
            document.getElementById("hdnAuthValue").value = authValue.toString();
            $('#FormAuthorizationModal').modal('show');
        }
        else if ($('#id_showAllUnAuth').hasClass("EnableAuthBtns")) {
            if (GridIdRowValues != '') {
                if (authName == "Authorization") {
                    document.getElementById("lblAuthMsg").textContent = "Reason For Approval";
                }
                else if (authName == "Rejection") {
                    document.getElementById("lblAuthMsg").textContent = "Reason For Rejection";
                }
                document.getElementById("hdnAuthValue").value = authValue.toString();
                $('#FormAuthorizationModal').modal('show');
            }
            else {
                COMMON.prototype.showMessage("Please select a row");
            }
        }
    },

    closePrintersModal: function (element) {
        if (element == undefined) {
            $("#divPrinterModal").modal("hide");
        }
        else {
            var modalid = $(element).attr('data-content');
            $("#" + modalid).modal("hide");
        }
    },

    SaveFormAuthorizationClick: function (ele) {
        //debugger
        var url = GLOBAL.getContextPath("saveFormAuthorization", "Form", "Forms");
        var authMesg = $('#txt_authMessage').val();
        var FormTypeId = $('#hdnFormTypeId').val();
        var status = $('#hdnAuthValue').val();
        //Element = "";
        //Element = ele;
        NETWORK.executeServerMethod(url, true, { FormTypeId: FormTypeId, strAuthorizationReason: authMesg, iStatus: status, checkedRows: GridIdRowValues }, "JSON", true, "FORM.AuthorizationSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", status);
    },

    AuthorizationSuccess: function (flag, data, status)
    {
        if (flag) {
            //debugger;
            if (data != "") {
                GridIdRowValues = [];
                FORM.GetFormGrid(unshALelement, 1);
                $('#FormAuthorizationModal').modal('hide');
                if (status == 1) {
                    COMMON.prototype.showMessage("Authorized Successfully", "Focus10");
                }
                else {
                    COMMON.prototype.showMessage("Rejected Successfully", "Focus10");
                }
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
        else
        {
            COMMON.prototype.showMessage("server error")
        }
    },

    setRules: function () {
        //debugger
        var FormRuleCall = null;
        //
        if ($('#hdnFormEntryTypeId').val() != undefined) {
            //debugger
            console.log('getMasterRules Server Starts: ', new Date().toLocaleString());
            FormRuleCall = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFormRules", "Form", "Forms"), true, { FormTypeId: $('#hdnFormEntryTypeId').val() }, "JSON", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            // 
            clickedElement = $('#hdnClickedElement').val();
            console.log('getMasterRules Server ends and rendering starts: ', new Date().toLocaleString());
            if (FormRuleCall.data != null) {
                for (var i = 0; i < FormRuleCall.data.length; i++) {
                    //

                    var MasterEvaluateOn = "";


                    var contrlID = FormRuleCall.data[i].FieldName + "_" + clickedElement;
                    //  if (!$('#' + contrlID).hasClass('clsHasRules')) {
                    if ((FormRuleCall.data[i].Group == true) || (FormRuleCall.data[i].NewRecord == true && clickedElement == 'btnNew') ||
                        (FormRuleCall.data[i].Edit == true && clickedElement == 'btnEdit')) {

                        $('#' + contrlID).addClass('clsHasRules');
                        var ruleid = $('#' + contrlID).attr('ruleid');
                        var evalON = $('#' + contrlID).attr('data-evaluateon');
                        if (ruleid != undefined && ruleid != '/') {
                            $('#' + contrlID).attr('ruleid', ruleid + ',' + FormRuleCall.data[i].RuleId);
                        }
                        else {
                            $('#' + contrlID).attr('ruleid', FormRuleCall.data[i].RuleId);
                        }
                        if (FormRuleCall.data[i].BeforeDelete == true) {
                            MasterEvaluateOn += "BeforeDelete";
                        }
                        if (FormRuleCall.data[i].BeforeSave == true) {
                            MasterEvaluateOn += ",BeforeSave";
                            $('#' + contrlID).addClass('clsBeforeSave');
                        }
                        if (FormRuleCall.data[i].Load == true) {
                            MasterEvaluateOn += ",Load";
                        }
                        if (FormRuleCall.data[i].OnEnter == true) {
                            MasterEvaluateOn += ",OnEnter";
                        }
                        if (FormRuleCall.data[i].OnLeave == true) {
                            MasterEvaluateOn += ",OnLeave";
                        }
                        if (evalON != undefined && evalON != '/') {
                            $('#' + contrlID).attr('data-evaluateon', evalON + ',' + MasterEvaluateOn);
                        }
                        else {
                            $('#' + contrlID).attr('data-evaluateon', MasterEvaluateOn);
                        }

                        //@ added this block to set all the rules on masterlevel for option control,class 'clsHiddenHasRules' and 'data-evaluateon' is used to get rule formatting for the rule
                        // this class and attribute are added while rendering on server if rules are applied on fieldlevel,in cases on masterlevel these were not added while rendering ,hence adding this through ajax result got from above call.
                        if ($('#' + contrlID).hasClass('OptionControl')) {
                            var eleInputHdn = document.getElementById('hdn' + contrlID);
                            if (eleInputHdn != null && eleInputHdn != undefined) {
                                if (eleInputHdn.classList.contains("clsHiddenHasRules") == false) {
                                    eleInputHdn.classList.add("clsHiddenHasRules");
                                    eleInputHdn.setAttribute('data-evaluateon', MasterEvaluateOn);
                                }
                            }
                            //var dataEvaluateOn = $($(this).closest('table').parent().find('input.clsHiddenHasRules')).attr('data-evaluateon');
                        }

                    }

                    //  }

                }
                console.log('getFormRules rendering ends: ', new Date().toLocaleString());
            }
            else {
                COMMON.prototype.showMessage('Error in Form Rule');
            }
        }

        if ($('.clsHasRules').length > 0) {
            console.log('clsHasRules rendering ends: ', new Date().toLocaleString());
            $('.clsHasRules').each(function (e) {
                //debugger;
                if ($(this).hasClass('OptionControl')) {
                    var dataEvaluateOn = $($(this).closest('table').parent().find('input.clsHiddenHasRules')).attr('data-evaluateon');
                }
                else if ($(this).hasClass('BOptionControl')) {
                    var dataEvaluateOn = $(this).attr('data-evaluateon');
                }
                else {
                    var dataEvaluateOn = $(this).attr('data-evaluateon');
                }
                FormEntryRules.setRulesForControls($(this), dataEvaluateOn, e);
            });
            console.log('clsHasRules rendering ends: ', new Date().toLocaleString());
        }
        if (FormRuleCall != null && FormRuleCall.data != null) {
            //debugger
            var rulesForLoad = FormRuleCall.data.filter(x=>x.Load == true);
            {
                for (var i = 0; i < rulesForLoad.length; i++) {
                    //var elemnt = $($this).hasClass('BOptionControl') ? $('#' + octrlid) : $($this);
                    FormEntryRules.getControlRules(document.getElementById(rulesForLoad[i].FieldName), 'Load', null);
                }
            }
        }
    },

    closeForm: function (element) {
        debugger
        var url = GLOBAL.getContextPath("CloseAndOpenForm", "Form", "Forms");
        var dataContent = element.dataset.content;;
        var FormTypeName = $("#hdnFormName").val();
        FORM.CloseFormPopUp(url, dataContent, FormTypeName);
    },

    CloseFormPopUp: function (url, dataContent, FormTypeName) {
        debugger
        var SelectedRowNo = $("#grd_Form_body tr.FRowColor")[0].rowIndex - 2;
        var sFormName = "";
        if (SelectedRowNo == "") {
            COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
            return false;
        }
        if (SelectedRowNo > 0) {
            var cellObject = FGRIDCONTROL.getRowValue("grd_Form", SelectedRowNo);
            sFormName = cellObject[4].Text;

        }

        $.ajax({
            url: url,
            type: "GET",
            contentType: 'application/json; charset=utf-8',
            datatype: "JSON",
            data: { dataContent: dataContent, sFormName: sFormName, FormTypeName: FormTypeName },
            success: function (data) {
                //
                if (data != "") {
                    $('#closeAndOpenFormModal').html(data)
                    $("#closeAndOpenForm_Modal").modal('show');
                }
                else {
                    COMMON.prototype.showMessage("error")
                }
            }
        });
    },

    OpenCloseForm: function (element) {
        debugger
        var url = GLOBAL.getContextPath("closeAndOpenFormOKClick", "Form", "Forms");
        var btnClickValue = element.dataset.content;
        retainEditedMasterIds = [];
        var iFormTypeId = document.getElementById("hdnFormTypeId").value;
        var SelectedRowNo = $("#grd_Form_body tr.FRowColor")[0].rowIndex - 2;
        var cellObject = FGRIDCONTROL.getCellObject("grd_Form", SelectedRowNo, 4);
        var FormId = cellObject.getCellData("value");
        FormId = FORM.getEnglishDigits(FormId);
        var status = $('#hdnAuthValue').val();
        $("#btnCloseAccount").attr("OpencloseAccountClick", btnClickValue);
        NETWORK.executeServerMethod(url, true,
                   { iFormTypeId: iFormTypeId, FormId: FormId, btnClickValue: btnClickValue }, "JSON", true, "FORM.closeAndOpenFormOKClick",
                                                    "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", btnClickValue);
        //FORM.closeAndOpenFormOKClick(url, btnClickValue)
    },

    closeAndOpenFormOKClick: function (flag, data) {
        debugger;
        if (flag == true) {
            if (data != "") {
                COMMON.prototype.showMessage(data);
                $('#closeAndOpenForm_Modal').modal('hide');
            }
            else {
                COMMON.prototype.showMessage("error");
            }
        }
        else {
            COMMON.prototype.showMessage("Server Error");
        }
    },

    getEnglishDigits: function (str) {
        if (parseInt($("#hdnLanguageId").val()) == 1) {
            return Number(str.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function (d) {
                return d.charCodeAt(0) - 1632;
            }).replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function (d) { return d.charCodeAt(0) - 1776; }));
        }
        else {
            return str;
        }
    },

    SaveRevision: function (sClickedElement) {
        //debugger
        bCreateNewRevision = true;

        if (confirm(FORM.getResourceValue("msgAreyousureyouwanttosavethisrecordasNewRevision", ResourceMessages))) {
            var RevisionDate = DATEPICKER.getDate('iRevisionDate_' + sClickedElement);
            if (RevisionDate != iRevisionDate) {
                FORM.SaveForm(sClickedElement);
            } else {
                COMMON.prototype.showMessage(FORM.getResourceValue("msgPleasechangetherevisiondatebeforesavingasanewrevision", ResourceMessages));
            }

            //$(this).off('click');
        }
        //e.stopImmediatePropagation();
    },

    DeleteFormRevision: function (sClickedElement) {
        debugger
        var FormTypeId = $('#hdnFormTypeId').val();
        var FormId = $('#hdnFormId_' + sClickedElement).val();
        if (confirm(FORM.getResourceValue("msgAreyousureyouwanttoDeletethisRevision", ResourceMessages))) {
            //var result =
            NETWORK.executeServerMethod(GLOBAL.getContextPath("FormRevisionDeleteClick", "Form", "Forms"), true, { iFormTypeId: FormTypeId, iFormId: FormId }, "JSON", true, "FORM.DeleteRevision_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

        }
        //e.stopImmediatePropagation();
        //$(this).off('click');
    },

    DeleteRevision_Success: function (bs, data) {
        debugger
        if (bs == true && data != null) {
            if (data.ErrorMessege.trim() == "") {
                $('#FormEntry_Modal').modal("hide");
                FORM.GetFormGrid();
            }
            else {
                COMMON.prototype.showMessage(data.ErrorMessege);
            }
        }
    },



    //******Context Meanu for Sorting ************//
    OnSortingGridRightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "id_ShortingGrid_body_menu");

            eleMenu = document.getElementById("id_ShortingGrid_body_menu");
            document.getElementById("id_ShortingGrid_body_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORM.SortingGrid_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            //$(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblInsertRow"));
            $(eleLabel).text("InsertRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORM.SortingGrid_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            //$(eleLabel).text(FORMCUSTOMIZATION.GetResourceMessage("lblDeleteRow"));
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORM.SortingGrid_toggleMapEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();

            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                eleMenu.style.left = (rectContainer.left - 505) + "px";
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            eleMenu.style.top = (rectContainer.top - 80) + "px";
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORM.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    SortingGrid_toggleMapEntryMore: function (ele, evt) {
        //debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {SortingGrid_toggleMapEntryMore} " + err.message, "red");
        }
    },

    SortingGrid_InsertRow: function (iRow, event) {
        //debugger
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update("tblSort");
            FGRIDCONTROL.insertRows("tblSort", iRow, 1);

        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    SortingGrid_DeleteRow: function (iRow, event) {
        //debugger
        if (confirm("Confirm To Delete Row")) {
            FCommon.UI.stopKeyProcess(event);
            if (FORM.SortingGrid_getTotalRows() == 1) {
                COMMON.prototype.showMessage("Cannot Delete Row");
                return;
            }
            FGRIDCONTROL.update("tblSort");
            FGRIDCONTROL.deleteRows("tblSort", iRow, 1);

        }
    },

    SortingGrid_getTotalRows: function () {
        //debugger;  
        return document.getElementById('tblSort_body').rows.length;
    },
    //******End Context Meanu for Sorting************//



    //******Context Meanu for FormEntry Screen Grid ************//
    OnFormEntryGrid_RightClick: function (obj, evt) {
        debugger
        //let sContent = "";
        let bRtl = false;
        //let objSetRowInfo = null;
        let rectContainer = null;
        let rectMenu = null;
        let eleA = null;
        let eleLabel = null;
        let eleMenu = null;
        let eleSpan = null;
        let bSelect = true;
        formEntryGridId = obj.Grid.id;


        try {
            FCommon.UI.stopKeyProcess(evt);

            obj.Cell.setAttribute("data-bs-target", "grd_FormEntry_menu");

            eleMenu = document.getElementById("grd_FormEntry_menu");
            document.getElementById("grd_FormEntry_menu").style.display = "block";
            FUIElement.removeChild(eleMenu);

            if (FCommon.UI.getElementStyleValue(obj.Cell, "direction").toLowerCase() == "rtl") {
                bRtl = true;
            }

            eleSpan = document.createElement("span");
            eleSpan.style.position = "absolute";
            eleSpan.style.color = "#ccc";

            if (bRtl == true) {
                eleSpan.className = "icon-left-arrow";
                eleSpan.style.right = "-5px";
            }
            else {
                eleSpan.className = "icon-right-arrow";
                eleSpan.style.left = "-5px";
            }

            eleMenu.appendChild(eleSpan);

            //for InsertRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORM.FormEntryGrid_InsertRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Add Row Above");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text("InsertRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);


            //for DeleteRow
            eleA = document.createElement("a");
            eleA.className = "dropdown-item py-0";
            eleA.href = "#";
            eleA.setAttribute("onclick", "FORM.FormEntryGrid_DeleteRow(" + obj.iRow + ", event);");
            eleA.setAttribute("data-toggle", "tooltip");
            eleA.setAttribute("title", "Delete Current Row");

            eleLabel = document.createElement("label");
            eleLabel.className = "labeltext";
            eleLabel.style.margin = "0px !important";
            $(eleLabel).text("DeleteRow");

            eleA.appendChild(eleLabel);
            eleMenu.appendChild(eleA);

            FORM.FormEntryGrid_toggleMapEntryMore(obj.Cell, evt);

            debugger;
            rectContainer = obj.Cell.getBoundingClientRect();
            rectMenu = eleMenu.getBoundingClientRect();

            if (bRtl == true) {
                eleMenu.style.left = (rectContainer.left - rectMenu.width) + "px";
            }
            else {
                eleMenu.style.left = (rectContainer.left - 505) + "px";
            }

            eleSpan.style.top = ((rectMenu.height / 2) - 3) + "px";

            eleMenu.style.top = (rectContainer.top - 80) + "px";
        }
        catch (err) {
            COMMON.prototype.showAlert("{FORM.onSerialNo_Click}" + err.message, "Exception");
        }
    },

    FormEntryGrid_toggleMapEntryMore: function (ele, evt) {
        //debugger;
        let eleMenu = null;

        try {
            FCommon.UI.stopKeyProcess(evt);

            eleMenu = document.getElementById(ele.getAttribute("data-bs-target"));
            if (FCommon.UI.isValidObject(eleMenu) == false) {
                return;
            }

            if ($(eleMenu).hasClass("transentry-body-dropdown") == true && eleMenu.getBoundingClientRect().height > 0) {
                $(eleMenu).toggle(); // hide first
            }

            $(eleMenu).toggle();
        }
        catch (err) {
            WriteConsoleLog("Exception: {FormEntryGrid_toggleMapEntryMore} " + err.message, "red");
        }
    },

    FormEntryGrid_InsertRow: function (iRow, event) {
        //debugger
        try {
            FCommon.UI.stopKeyProcess(event);
            FGRIDCONTROL.update(formEntryGridId);
            FGRIDCONTROL.insertRows(formEntryGridId, iRow, 1);

        }
        catch (err) {
            COMMON.prototype.showMessage(err.message, "Exception")
        }
    },

    FormEntryGrid_DeleteRow: function (iRow, event) {
        //debugger
        if (confirm("Confirm To Delete Row")) {
            FCommon.UI.stopKeyProcess(event);
            if (FORM.FormEntryGrid_getTotalRows() == 1) {
                COMMON.prototype.showMessage("Cannot Delete Row");
                return;
            }
            FGRIDCONTROL.update(formEntryGridId);
            FGRIDCONTROL.deleteRows(formEntryGridId, iRow, 1);

        }
    },

    FormEntryGrid_getTotalRows: function () {
        //debugger;  
        return document.getElementById(formEntryGridId + '_body').rows.length;
    },
    //******End Context Meanu for FormEntry Screen Grid************//

    ApplyFilterForField: function (element) {
        debugger;
        var Currentvalue;
        var tagArray = []; var bGridControl = false;
        var feildId = $(element).attr('data-fieldid');
        if (feildId == undefined) {
            var cid = $(element).attr('id') + "1";
            bGridControl = true;
            feildId = $("#" + cid).attr("data-fieldid");
            if (feildId == undefined) {
                var eleid = $(element).attr('id');
                feildId = document.getElementById(eleid).getAttribute('data-fieldid');

            }
        }
        tagArray.push($(element).attr('id'));
        tagArray.push(feildId);
        var masterid = $('#hdnMasterId').val();
        var Filter = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFilterDataForControl", "Form", "Forms"), true,
            { FieldId: feildId, bGridControl: bGridControl, lstFilterFromSession: lstFilterCriteria }, "JSON", false);
        if ($(element).hasClass("clsOptionControl")) {
            Currentvalue = OPTIONCONTROL.getControlValue($(element).attr('id'));

            //@ doing this for body field option controls--in order to get correct value of control based on row index of grid --from input hidden fields maintained for option control.
            var TableRows = $(element).closest('.tableRow');
            if (TableRows != null && TableRows.length > 0) {
                var RowIndex = TableRows[0].rowIndex;
                if (document.getElementById($(element).attr('id') + RowIndex) != null) {
                    Currentvalue = document.getElementById($(element).attr('id') + RowIndex).getAttribute('data-value');
                }
                else {
                    Currentvalue = OPTIONCONTROL.getControlValue($(element).attr('id'));
                }
            }
            else {
                Currentvalue = OPTIONCONTROL.getControlValue($(element).attr('id'));
            }
            //@ ends
        }
        var data = Filter.data;
        var ctrolID = tagArray[0];
        if (Filter.lValue == 1 && data != null) {
            if (data != null && data[0].FilterOnColumn == undefined) {
                var strFiltermessage = ($("#" + ctrolID).attr('data-tablename') == undefined || $("#" + ctrolID).attr('data-tablename') == "") ? " and (iStatus=0)" : "";
                OPTIONCONTROL.setFilter(ctrolID, "(" + data + ") " + strFiltermessage);
                if (Currentvalue != undefined) {
                    if (Currentvalue != "") {
                        OPTIONCONTROL.setControlValue(ctrolID, Currentvalue);
                    }
                }
            }
            else if (data[0].FilterOnColumn != undefined) {
                var ocMandatoryValue = null; var optCtrol = false;
                var controlid = data[0].FilterOnColumn;
                if ($('#' + controlid).hasClass('FOptionControl')) {
                    var ocdata = OPTIONCONTROL.getControlData(controlid);
                    var controlValue = 0;//OPTIONCONTROL.getControlValue(controlid);
                    if (controlValue == '0') {
                        //@ doing this for body field option controls--in order to get correct value of control based on row index of grid --from input hidden fields maintained for option control.
                        var TableRows = $(element).closest('.tableRow');
                        if (TableRows != null && TableRows.length > 0) {
                            var RowIndex = TableRows[0].rowIndex;
                            if (document.getElementById(controlid + RowIndex) != null) {
                                controlValue = document.getElementById(controlid + RowIndex).getAttribute('data-value');
                            }
                            else {
                                controlValue = OPTIONCONTROL.getControlValue(controlid);
                            }
                        }
                        else {
                            controlValue = OPTIONCONTROL.getControlValue(controlid);
                        }
                        //@ends
                    }
                    optCtrol = true;
                    if (ocdata.length > 2) {
                        //var getPropertyValueArray=COMMON.prototype.getObjectPropertyValueArray(ocdata, true);
                        ocMandatoryValue = ocdata.map(function (a) { return a[data[0].LinkField.toLowerCase()]; })[0]; //ocdata[];//  getPropertyValueArray.value[0];
                    }
                }
                else {
                    var controlValue = $('#' + controlid).val();
                }
                var FilterContent = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFilterDataBasedOnField", "GenerateMaster", "Masters"), true,
                    {
                        FieldId: tagArray[1], masterId: $('#hdnMasterId').val(), ocMandatoryValue: ocMandatoryValue,
                        ControlValue: controlValue, IsOptionControl: optCtrol, bGridControl: bGridControl, lstFilterFromSession: lstFilterCriteria
                    }, "JSON", false);

                if (FilterContent.lValue == 1 && FilterContent.data != null) {
                    var strFiltermessage = ($("#" + ctrolID).attr('data-tablename') == undefined || $("#" + ctrolID).attr('data-tablename') == "") ? " and (iStatus=0)" : "";
                    if (FilterContent != null && FilterContent.data != null && FilterContent.data.length > 0) {
                        OPTIONCONTROL.setFilter(ctrolID, "(" + FilterContent.data + ")" + strFiltermessage);// .data + " and (iStatus=0 and bGroup=0)");
                        //console.log('Filter -' + OPTIONCONTROL.getFilter(ctrolID));
                    }

                    if (Currentvalue != undefined) {
                        if (Currentvalue != "") {
                            OPTIONCONTROL.setControlValue(ctrolID, Currentvalue);
                        }
                    }
                }
                else {
                    COMMON.prototype.showMessage("Error from FilterContentSuccess");
                }
            }
        }
        else {
            COMMON.prototype.showMessage("Error from filterSuccess");
        }
    }
}


File.prototype.convertToBase64 = function (callback, imgId,ele) {
    debugger
    if (typeof (window.FileReader) != "undefined") {
        var FR = new FileReader();
        FR.onload = function (e) {
            callback(e.target.result)
            if (imgId != "") {
                $('#' + imgId).attr('src', e.target.result);
            }
        };
        FR.readAsDataURL(ele);
    }
}

var FormEntryRules = {
    checkIfPropertyExistInSerializedForm: function (name, form) {
        var item, i = 0;
        while (item = form[i++])
            if (item.name == name) return --i
        return -1
    },
    getNewFormArray: function (form) {
        var unique = {};
        var distinct = [];
        var expr = 'date';
        form.forEach(function (x) {
            if ($("#" + x.name).hasClass("CheckBox")) {
                x.value = $("#" + x.name).is(":checked")
            }
            if ($("#" + x.name).hasClass("OptionControl")) {
                x.value = OPTIONCONTROL.getControlValue(x.name) + ',' + OPTIONCONTROL.getControlText(x.name);
            }
            //clsOptionControl
            if (!unique[x.name]) {
                if (x.name.toLowerCase().indexOf(expr) > -1) {
                    if ($("#" + x.name).hasClass("DatePicker")) {
                        x.value = DATEPICKER.getDate(x.name, true);
                    }
                }
                distinct.push(x);
                unique[x.name] = true;
            }
        });
        return distinct;
    },
    GetValueFromDropDownBasedOnText: function (ElementId, InputValue) {
        var select = document.getElementById(ElementId);
        var DrpDownValue = "";
        if (select != null && select != undefined) {
            //@ looping through all option values based on text and retrieving value to set selected value
            for (var x = 0; x < select.length; x++) {
                var option = select.options[x];
                if (option.text == InputValue) {
                    DrpDownValue = option.value;
                }
            }
        }
        if (DrpDownValue.length == 0) {
            DrpDownValue = InputValue;
        }
        return DrpDownValue;

    },
    setRulesForControls: function ($this, dataEvaluateOn, e) {
        //debugger
        if (dataEvaluateOn != '' && dataEvaluateOn != undefined) {
            dataEvaluateOn = dataEvaluateOn.split(',')
            var uniqueNames = [];
            $.each(dataEvaluateOn, function (i, el) {
                if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
            });
            dataEvaluateOn = uniqueNames;
            for (var i = 0; i < dataEvaluateOn.length; i++) {
                //
                if ($($this).hasClass('BOptionControl')) {
                    var octrlid = $($this)[0].id;
                    octrlid = (octrlid.match(/[a-z A-Z]+/g)).toString();
                    // tableRuleid = $(this).attr('data-ruleid');
                }
                var elemntid = $($this).hasClass('BOptionControl') ? '#' + octrlid : "#" + $($this)[0].id;
                if (dataEvaluateOn[i] != "") {
                    if (dataEvaluateOn[i] == "OnLeave") {
                        if ($($this).hasClass("DropDown") || $($this).hasClass("CheckBox")) {
                            $(document).on('change', elemntid, function (e) {
                                //
                                FormEntryRules.getControlRules($this, 'OnLeave', e);
                                e.stopImmediatePropagation();
                            });
                        }
                        else {
                            $(document).on('blur', elemntid, function (e) {
                                FormEntryRules.getControlRules($this, 'OnLeave', e);
                                e.stopImmediatePropagation();
                            });
                        }
                    }
                    if (dataEvaluateOn[i] == "OnEnter") {
                        $(document).on('focus', elemntid, function (e) {
                            //
                            FormEntryRules.getControlRules($this, 'OnEnter', e);
                            e.stopImmediatePropagation();
                        });
                    }
                    if (dataEvaluateOn[i] == "Load") {
                        var elemnt = $($this).hasClass('BOptionControl') ? $('#' + octrlid) : $($this);
                        //FormEntryRules.getControlRules(elemnt, 'Load', e);
                    }
                    if (dataEvaluateOn[i] == "BeforeSave") {
                        $(document).on('click', '#btnSave_' + clickedElement, function () {
                        });
                    }
                }
            }

        }
    },
    getControlRules: function (ele, typeofevent, e) {
        debugger
        console.log('getControlRules Starts: ', new Date().toLocaleString());
        var tagObject = {}; var urlObject = {};
        tagObject.typeofevent = typeofevent;
        tagObject.currentevent = e;
        tagObject.currentControlId = $(ele)[0].id;
        urlObject.InUseControldId = $(ele)[0].id;
        urlObject.RuleEvent = typeofevent;
        if ($(ele).hasClass('OptionControl')) {
            if (!$(ele).closest('table').prev().find('input').hasClass('BOptionControl')) {
                var dataruleid = $($(ele).closest('table').parent().find('input.clsHiddenHasRules')).attr('ruleid');
                if (dataruleid == '') {
                    dataruleid = $(ele).attr('ruleid');
                }
            }
            else {
                var dataruleid = $(ele).closest('table').prev().find('input').attr('ruleid');
                if (dataruleid == '') {
                    dataruleid = $(ele).attr('ruleid');
                }
            }

            var ruleId = dataruleid != undefined ? dataruleid : "0";
            var OCtext = OPTIONCONTROL.getControlText($(ele)[0].id) == null ? '' : OPTIONCONTROL.getControlText($(ele)[0].id);
            var OCvalue = OPTIONCONTROL.getControlValue($(ele)[0].id) == null ? 0 : OPTIONCONTROL.getControlValue($(ele)[0].id);
            var sMandatory = "";
            var mandatoryFields = OPTIONCONTROL.getMandatoryFields($(ele)[0].id).split(",");
            if (mandatoryFields.length > 0) {
                var arrMandatory = {};
                for (var i = 0; i < mandatoryFields.length; i++) {
                    arrMandatory[mandatoryFields[i]] = OPTIONCONTROL.getControlValue(ele, mandatoryFields[i]);
                }
                sMandatory = JSON.stringify(arrMandatory);
            }
            var form = $("#AllFormEntryControls").serializeArray();
            //form = [...new Set(form.map(item => item.name))];
            NewArrayForForm = this.getNewFormArray(form);
            form = NewArrayForForm;
            form.push({ name: 'RuleId', value: ruleId });
            tagObject.RuleId = ruleId;
            var foundIndex = this.checkIfPropertyExistInSerializedForm($(ele)[0].id, form);
            if (foundIndex != -1) {
                form.splice(foundIndex, 1);
            }
            form.push({ name: 'FormTypeId', value: $('#hdnFormEntryTypeId').val() });
            form.push({ name: $(ele)[0].id, value: OCvalue + "," + OCtext });
            form.push({ name: $(ele)[0].id + "Mandatory", value: sMandatory });
            //   var form = $("#AllFormEntryControls").serialize() + '&RuleId=' + ruleId + '&' + $(ele)[0].id + '=' + OCtext + '&MasterTypeId=' + $('#hdnFormEntryTypeId').val();

        }
        else if ($(ele).hasClass('DatePicker')) {
            if (!$(ele).closest('table').prev().find('input').hasClass('txtDatePicker')) {
                var dataruleid = $($(ele).closest('table').parent().find('input.clsHiddenHasRules')).attr('data-ruleid');
            }
            else {
                var dataruleid = $(ele).closest('table').prev().find('input').attr('ruleid');
            }
            var ruleId = dataruleid != undefined ? dataruleid : "0";
            var DatepickerValue = DATEPICKER.getDate($(ele)[0].id);
            var form = $("#AllFormEntryControls").serializeArray();
            //  form = [...new Set(form.map(item => item.name))];
            NewArrayForForm = this.getNewFormArray(form);
            form = NewArrayForForm;
            form.push({ name: 'RuleId', value: ruleId });
            tagObject.RuleId = ruleId;
            var foundIndex = this.checkIfPropertyExistInSerializedForm($(ele)[0].id, form);
            if (foundIndex != -1) {
                form.splice(foundIndex, 1);
            }
            form.push({ name: 'FormTypeId', value: $('#hdnFormEntryTypeId').val() });
            form.push({ name: $(ele)[0].id, value: DatepickerValue });


            //var form = $("#AllFormEntryControls").serialize() + '&RuleId=' + ruleId + '&' + $(ele)[0].id + '=' + DatepickerValue + '&MasterTypeId=' + $('#hdnFormEntryTypeId').val();
        }

        else {
            var ruleId = $(ele).attr('ruleid') != undefined ? $(ele).attr('ruleid') : "0";
            if ($(ele).closest('table').length > 0 && $(ele).closest('table').hasClass('tabsTable')) {
                var controlid = $(ele)[0].id;
                controlid = (controlid.match(/[a-z A-Z]+/g)).toString();
                $('#' + controlid).val($(ele).val());
                var form = $("#AllFormEntryControls").serializeArray();

                var NewArrayForForm = [];
                NewArrayForForm = this.getNewFormArray(form);
                form = NewArrayForForm;
                //                form = [...new Set(form.map(item => item.name))];
                form.push({ name: 'RuleId', value: ruleId });
                tagObject.RuleId = ruleId;
                var foundIndex = this.checkIfPropertyExistInSerializedForm(controlid, form);
                if (foundIndex != -1) {
                    form.splice(foundIndex, 1);
                }
                form.push({ name: 'FormTypeId', value: $('#hdnFormEntryTypeId').val() });
                form.push({ name: controlid, value: $(ele).val() });



                //   var form = $("#AllFormEntryControls").serialize() + '&RuleId=' + ruleId + '&MasterTypeId=' + $('#hdnFormEntryTypeId').val() + '&' + controlid + '=' + $(ele).val();

            }
            else {
                var alldisabledElements = $("#AllFormEntryControls").find("input,select:disabled");
                var form = $("#AllFormEntryControls").serializeArray();
                form = this.getNewFormArray(form);
                form.push({ name: 'RuleId', value: ruleId });
                tagObject.RuleId = ruleId;
                form.push({ name: 'FormTypeId', value: $('#hdnFormEntryTypeId').val() });

                //var form = $("#AllFormEntryControls").serialize() + '&RuleId=' + ruleId + '&MasterTypeId=' + $('#hdnFormEntryTypeId').val();
                for (var i = 0; i < alldisabledElements.length; i++) {

                    var found = form.some(function (el) {
                        return el.name === alldisabledElements[i].id;
                    });
                    if (!found) {
                        var contrlid = alldisabledElements[i].id.split('_')[0];
                        form.push({
                            name: contrlid, value: $("#" + contrlid).hasClass("CheckBox") ? $("#" + contrlid).is(":checked") : alldisabledElements[i].value
                        });
                    }
                    //if (alldisabledElements[i].id != "" && form.indexOf(alldisabledElements[i].id) == "-1" && alldisabledElements[i].id!=undefined) {
                    //    form = form + "&" + alldisabledElements[i].id + "=" + alldisabledElements[i].value;
                    //}
                }

            }
        }
        urlObject.url = GLOBAL.getContextPath("getRules", "Form", "Forms");
        urlObject.ButtonClicked = $('#hdnClickedElement').val();
        var ajaxCall = NETWORK.executeServerMethod(urlObject, true, form, "JSON", false, "FormEntryRules.RuleAjaxCallSuccess", "", "", tagObject);
        console.log('getControlRules ends: ', new Date().toLocaleString());
    },
    RuleAjaxCallSuccess: function (bs, data, tagObject) {
        console.log('RuleAjaxCallSuccess rendering Starts: ', new Date().toLocaleString());
        try {
            debugger
            var typeofevent = tagObject.typeofevent;
            var currentevent = tagObject.currentevent; var strCurrentControlId = tagObject.currentControlId;
            var IsWarnStopRule = false;
            var currentRuleId = "";
            if (tagObject.RuleId.split(",").length > 0)
                currentRuleId = tagObject.RuleId.split(",")[0];// document.getElementById(strCurrentControlId).getAttribute("data-ruleid");
            else
                currentRuleId = tagObject.RuleId;
            if ((currentRuleId == undefined || currentRuleId == 0) && tagObject.RuleId.length > 0) {
                currentRuleId = tagObject.RuleId.replace(',', '').trim();
            }
            var FormtypeId = $('#hdnFormEntryTypeId').val();
            if (bs == true && data.result != null && data.Error == "") {
                var data = data.result;
                for (var i = 0; i < data.length; i++) {
                    if ((data[i].GeneralMessage != undefined || data[i].AlertMessage != undefined) && data[i].OldRuleConditionId == currentRuleId) {
                        if (data[i].GeneralMessage != undefined && data[i].GeneralMessage != '') {
                            COMMON.prototype.showMessage(data[i].GeneralMessage);
                            if (data[i].MessageType == '2') {
                                $('#btnSave' + clickedElement).prop('disabled', true);
                                //$('#btnMasterClone').css('pointer-events', "none");
                                $('#btnSave' + clickedElement).addClass('grey');
                                var EvaluatingRuleId = data[i].OldRuleConditionId;
                                lastComparefieldForRulesCondition = EvaluatingRuleId;
                                IsWarnStopRule = true;
                                //for (var iDepCtrl = 0; iDepCtrl < data[i].RuleCondition.length; iDepCtrl++) {

                                //    var depId = data[i].RuleCondition[iDepCtrl].CompareFieldName;
                                //    if (depId == "")
                                //        continue;

                                //    //$("#" + depId).addClass("clsHasRules");
                                //    var EvalOn = $("#" + depId).attr("data-evaluateon");
                                //    var RuleIdPrevious = $("#" + depId).attr("data-ruleid");
                                //    EvalOn = (EvalOn != undefined) ? EvalOn + "," + typeofevent : typeofevent;
                                //    //var rulid = $("#" + depId).attr("data-ruleid");
                                //    //rulid = (rulid != undefined) ? rulid + "," + data[i].OldRuleConditionId : data[i].OldRuleConditionId;
                                //    //lastComparefieldForRulesCondition = depId;
                                //    //lastComparefieldForRulesCondition = RuleIdPrevious;
                                //    //  $("#" + depId).attr({ "data-evaluateon": EvalOn });
                                //    // FormEntryRules.setRulesForControls($("#" + depId), EvalOn, typeofevent);
                                //}
                            }
                        }

                        else {
                            if (data[i].AlertMessage != undefined && data[i].AlertMessage != '') {
                                COMMON.prototype.showMessage(data[i].AlertMessage);
                            }
                        }
                        //   return false;
                    }
                    if (data[i].FieldName != undefined) {
                        var controlID = data[i].FieldName + "_" + clickedElement;
                        if ($("#" + controlID).length == 0) {
                            continue;
                        }
                        //  var ControlCaption = $('#fCreditLimit').parent('div').parent('div').prev().find('label').text().trim();
                        if (data[i].DataTypeId == '12' || data[i].DataTypeId == '14' || data[i].DataTypeId == '3' || data[i].DataTypeId == '4') {
                            var optioncontrolvaules = data[i].Value.split(',');
                            var optioncontrolid = optioncontrolvaules[0];
                            var optioncontroldisplayval = optioncontrolvaules[1];
                            if (data[i].DataTypeId == '3' || data[i].DataTypeId == '4') {
                                DATEPICKER.setDate(controlID, optioncontrolid);
                            }
                            else {
                                var optioncontrolValueBeforeSetFilter = OPTIONCONTROL.getControlValue(controlID);
                                if ($('#' + controlID).attr('data-tablename') == "mCore_Account") {
                                    OPTIONCONTROL.setFilter(controlID, "iStatus=0");
                                } else {
                                    var tableName = $('#' + controlID).attr('data-tablename');
                                    if (tableName != '' && (controlID == 'iPaymentTerms' || controlID == 'iReminderTerms' || controlID == 'iFinanceChargeTerms'))
                                        OPTIONCONTROL.setFilter(controlID, tableName == "mCore_FinanceTerms" ? "bMarkDelete=0" : "bMarkDeleted=0");
                                }
                                if (optioncontrolid != "") { // setfilter is removing any value which is already set in option control hence writing this code here
                                    OPTIONCONTROL.setControlValue(controlID, optioncontrolid);
                                } else {
                                    if (optioncontrolValueBeforeSetFilter != null && optioncontrolValueBeforeSetFilter != '')
                                        OPTIONCONTROL.setControlValue(controlID, optioncontrolValueBeforeSetFilter);
                                }
                            }
                            if (data[i].Caption != '') {
                                if (data[i].FieldType == true) {
                                    $('#' + controlID).closest('table').closest('th').find('label').html('');
                                    $('#' + controlID).closest('table').closest('th').find('label').html(data[i].Caption);
                                }
                                else {
                                    $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html('');
                                    $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html(data[i].Caption);
                                }
                            }
                            if (data[i].BannerText != '') {
                                $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                            }
                        }
                        else {
                            if (data[i].DataTypeId == '2') {

                                (data[i].Value == "true") ? $('#' + controlID).prop('checked', true) : $('#' + controlID).prop('checked', false);

                            }
                            else {
                                if ((data[i].DataTypeId == '8' || data[i].DataTypeId == '9') && isNaN(data[i].Value)) {
                                    // $("#" + controlID).find("option[text=" + data[i].Value + "]").attr("selected", true);
                                    var DrpDownValue = FormEntryRules.GetValueFromDropDownBasedOnText(controlID, data[i].Value);
                                    $("#" + controlID).find("option[value=" + DrpDownValue + "]").attr("selected", 'selected');

                                }
                                else {
                                    $('#' + controlID).val(data[i].Value);
                                }
                                //$('#' + controlID).val(data[i].Value);
                            }
                            if (data[i].Caption != '') {
                                if (data[i].FieldType == true) {
                                    $('#hidden' + controlID).parent().find('label').html('');
                                    $('#hidden' + controlID).parent().find('label').html(data[i].Caption);
                                }
                                else {
                                    $('#' + controlID).closest('div.divheaderControl').prev().find('label').html('');
                                    $('#' + controlID).closest('div.divheaderControl').prev().find('label').html(data[i].Caption);
                                }
                            }
                            if (data[i].BannerText != '') {
                                $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                            }
                        }
                    }
                    else {
                        for (var j = 0; j < data[i].RuleFormatting.length; j++) {
                            var controlID = data[i].RuleFormatting[j].FieldName + "_" + clickedElement;
                            if ($("#" + controlID).length == 0) {
                                continue;
                            }
                            //  var ControlCaption = $('#fCreditLimit').parent('div').parent('div').prev().find('label').text().trim();
                            if (data[i].RuleFormatting[j].DataTypeId == '12' || data[i].RuleFormatting[j].DataTypeId == '14' || data[i].RuleFormatting[j].DataTypeId == '3' || data[i].RuleFormatting[j].DataTypeId == '4') {
                                var optioncontrolvaules = data[i].RuleFormatting[j].Value.split(',');
                                var optioncontrolid = optioncontrolvaules[0];
                                var optioncontroldisplayval = optioncontrolvaules[1];

                                //@ added this snippet to get the formatting values for option controls ,in case they are linked with other optioncontrol fields
                                //doing it here on client side because data is not available on server when the formatting is retrieved for all the linked fields 
                                if (data[i].RuleFormatting[j].ValueType == 2 && data[i].RuleFormatting[j].LinkID > 0 && data[i].RuleFormatting[j].LinkFieldName.length > 0) {
                                    var Fields = OPTIONCONTROL.getMandatoryFields(data[i].RuleFormatting[j].LinkFieldName);
                                    if (Fields != null && Fields.length > 0) {
                                        var mandatoryFields = Fields.split(",");
                                        var sMandatoryValue = '';
                                        if (mandatoryFields != null && mandatoryFields.length > 0) {
                                            for (var k = 0; k < mandatoryFields.length; k++) {
                                                if (mandatoryFields[k] == data[i].RuleFormatting[j].Value) {
                                                    optioncontrolid = sMandatoryValue = OPTIONCONTROL.getControlValue(data[i].RuleFormatting[j].LinkFieldName, mandatoryFields[k]);
                                                }
                                            }
                                        }

                                    }

                                }

                                if (data[i].RuleFormatting[j].DataTypeId == '3' || data[i].RuleFormatting[j].DataTypeId == '4') {
                                    DATEPICKER.setDate(controlID, optioncontrolid);
                                }
                                else {
                                    if (data[i].RuleFormatting[j].Mandatory == false) {
                                        //$('#' + controlID).removeClass("Ftxtbox-M").addClass("Ftxtbox");

                                    } else {
                                        //$('#' + controlID).addClass("Ftxtbox-M");
                                    }

                                    var optioncontrolValueBeforeSetFilter = OPTIONCONTROL.getControlValue(controlID);
                                    if ($('#' + controlID).attr('data-tablename') == "mCore_Account") {
                                        OPTIONCONTROL.setFilter(controlID, "iStatus=0");
                                    }
                                    if (optioncontrolid != "") {
                                        OPTIONCONTROL.setControlValue(controlID, optioncontrolid);
                                    } else {
                                        if (optioncontrolValueBeforeSetFilter != null && optioncontrolValueBeforeSetFilter.length > 0)
                                            OPTIONCONTROL.setControlValue(controlID, optioncontrolValueBeforeSetFilter);
                                    }
                                    if (data[i].RuleFormatting[j].Hidden) {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "none");
                                    }
                                    else {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "block");
                                    }
                                    if (!data[i].RuleFormatting[j].Enabled) {
                                        $('#' + controlID).attr('disabled', true).addClass('grey');
                                    }
                                    else {
                                        $('#' + controlID).attr('disabled', false).removeClass('grey');
                                        $('#' + controlID).removeClass('backGroundColorGray');
                                    }

                                }
                                if (data[i].RuleFormatting[j].Caption != '') {
                                    if (data[i].RuleFormatting[j].FieldType == true) {
                                        $('#' + controlID).closest('table').closest('th').find('label').html('');
                                        $('#' + controlID).closest('table').closest('th').find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                    else {
                                        $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html('');
                                        $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                }
                                if (data[i].RuleFormatting[j].BannerText != '') {
                                    $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                                }
                                if (data[i].RuleFormatting[j].ToolTip != '') {
                                    $('#' + controlID).attr("title", data[i].RuleFormatting[j].ToolTip);
                                }
                            }
                            else {
                                if (data[i].RuleFormatting[j].DataTypeId == '2') {
                                    if (FormtypeId == "601" && $("#" + controlID).attr('checked')) {
                                        $('#' + controlID).prop('checked', true);
                                    }
                                    else {
                                        (data[i].RuleFormatting[j].Value == "true") ? $('#' + controlID).prop('checked', true) : $('#' + controlID).prop('checked', false);
                                    }

                                    if (data[i].RuleFormatting[j].Hidden) {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "none");
                                    }
                                    else {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "block");
                                    }
                                }
                                else {
                                    if (FormtypeId == "601") {

                                        var currentTargetCondition = false;
                                        if (currentevent != null && currentevent != undefined) {
                                            currentTargetCondition = currentevent.target == undefined ? false : (currentevent.target.id == "iDepreciationInYears" || currentevent.target.id == "fRateOfDepreciation")
                                        }

                                        if ((($('#' + controlID).val() == "" || $('#' + controlID).val() == "0") && $('#' + controlID).attr('data-type') != "nmbrDDl" && $('#' + controlID).attr('data-type') != "number-text")) {
                                            $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                        }
                                        else {
                                            if (data[i].RuleFormatting[j].Value != "" && data[i].RuleFormatting[j].Value.length > 0) {
                                                $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                            }
                                        }
                                        //   $('#fRateOfDepreciation').attr('disabled', true).addClass('grey');


                                    } else {
                                        if ((data[i].RuleFormatting[j].DataTypeId == '8' || data[i].RuleFormatting[j].DataTypeId == '9') && isNaN(data[i].RuleFormatting[j].Value)) {
                                            //$("#"+controlID+" option").filter(function() {
                                            //    return this.text == data[i].RuleFormatting[j].Value; 
                                            //}).attr('selected', true);​

                                            //$("#" + controlID).find("option[text=" + data[i].RuleFormatting[j].Value + "]").attr("selected", true);
                                            var DrpDownValue = FormEntryRules.GetValueFromDropDownBasedOnText(controlID, data[i].RuleFormatting[j].Value);
                                            $("#" + controlID).find("option[value=" + DrpDownValue + "]").attr("selected", 'selected');


                                        }
                                        else {
                                            if (data[i].RuleFormatting[j].Mandatory == false) {
                                                if ((data[i].RuleFormatting[j].DataTypeId == '8' || data[i].RuleFormatting[j].DataTypeId == '9')) {
                                                    //$('#' + controlID).removeClass("DropDown-M").addClass("DropDown");
                                                }
                                                else {
                                                    //$('#' + controlID).removeClass("Ftxtbox-M").addClass("Ftxtbox");
                                                }

                                            } else {
                                                if ((data[i].RuleFormatting[j].DataTypeId == '8' || data[i].RuleFormatting[j].DataTypeId == '9')) {
                                                    //$('#' + controlID).addClass("DropDown-M");
                                                }
                                                else {
                                                    //$('#' + controlID).addClass("Ftxtbox-M");
                                                }
                                            }
                                            if (data[i].RuleFormatting[j].Value != "" || data[i].RuleFormatting[j].ValueType == 2) {
                                                if (data[i].RuleFormatting[j].ValueType == 2) {
                                                    var linkfieldname = data[i].RuleFormatting[j].LinkFieldName;
                                                    var isOptionControl = $("#" + linkfieldname).hasClass('OptionControl');
                                                    var isDatePicker = $("#" + linkfieldname).hasClass('DatePicker');
                                                    if (isOptionControl)
                                                        $('#' + controlID).val(OPTIONCONTROL.getControlValue(linkfieldname, data[i].RuleFormatting[j].Value));
                                                    else if (isDatePicker)
                                                        $('#' + controlID).val(OPTIONCONTROL.getControlText(linkfieldname, data[i].RuleFormatting[j].Value));
                                                    else {
                                                        if (linkfieldname.length > 0) {
                                                            var fieldvalue = document.getElementById(linkfieldname).value;
                                                            $('#' + controlID).val(fieldvalue);
                                                        }
                                                        else {
                                                            $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                                        }
                                                    }
                                                }
                                                else
                                                    $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                            }
                                        }
                                        //  $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                    }
                                    if (data[i].RuleFormatting[j].Hidden) {
                                        //$($('#' + controlID).closest('div.ruleHidden')).css("display", "none");
                                    }
                                    else {
                                        //$($('#' + controlID).closest('div.ruleHidden')).css("display", "block");
                                    }
                                }
                                if (data[i].RuleFormatting[j].Caption != '') {
                                    if (data[i].RuleFormatting[j].FieldType == true) {
                                        //$('#hidden' + controlID).parent().find('label').html('');
                                        //$('#hidden' + controlID).parent().find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                    else {
                                        $('#' + controlID).closest('div.divheaderControl').prev().find('label').html('');
                                        $('#' + controlID).closest('div.divheaderControl').prev().find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                }
                                if (data[i].RuleFormatting[j].BannerText != '') {
                                    $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                                }
                                if (data[i].RuleFormatting[j].ToolTip != '') {
                                    $('#' + controlID).attr("title", data[i].RuleFormatting[j].ToolTip);
                                }
                                if (!data[i].RuleFormatting[j].Enabled) {
                                    $('#' + controlID).attr('disabled', true).addClass('grey');
                                }
                                else {
                                    $('#' + controlID).attr('disabled', false).removeClass('grey');
                                    $('#' + controlID).removeClass('backGroundColorGray');
                                }
                            }

                        }
                    }
                }
                if ($('#btnSave_' + clickedElement).prop('disabled') == true && IsWarnStopRule == false && lastComparefieldForRulesCondition != "" && currentRuleId == lastComparefieldForRulesCondition) {
                    $('#btnSave_' + clickedElement).prop('disabled', false);
                    //$('#btnMasterClone').css('pointer-events', "auto");
                    $('#btnSave_' + clickedElement).removeClass('grey');
                }
                //if ($('#hdnFormEntryTypeId').val() == "601") {
                //    ////debugger
                //    FormEntryRules.ApplyFixedAssetPreference();
                //}
            }
            else {
                COMMON.prototype.showMessage(data.Error);
            }
        } catch (ex) {
            alert("Exception => FormEntryRules.RuleAjaxCallSuccess " + ex.message);
        }
        console.log('RuleAjaxCallSuccess rendering Ends: ', new Date().toLocaleString());
    }
}


;
var sClickedElement;
var FormsExGlobal = {
    EntryModel: null,

};

var FormsExternalCall = {

    getEventCount: function (iOnEvent) {
        var arrData = null;

        if (FCommon.Array.getLength(FormEntryExternalModule.Settings.ArrExternalModules) == 0) {
            return (0);
        }

        arrData = FormsExternalCall.filterModulesOnEvent(FormEntryExternalModule.Settings.ArrExternalModules, iOnEvent);

        return (arrData.length);
    },

    filterModulesOnEvent: function (arrExternalModules, iOnEvent) {
        var arrData = [];

        try {
            if (FCommon.Array.getLength(arrExternalModules) == 0) {
                return (arrData);
            }

            arrData = DataType.arrayFilterData(arrExternalModules, ["OnEvent", "ModuleType"], [iOnEvent, 3], "==");
        }
        catch (err) {
            FixedAssetExGlobal.showAlert("{FormsExternalCall.filterModulesOnEvent} " + err.message, "Exception");
        }

        return (arrData);
    },

    FormExternalModule: function (ExternalModuleForFields, ls, i) {
        if (ExternalModuleForFields[ls].ExternalModule[i].ModuleType == EXTERNALMODULE_TYPE_ENUM.URL) {
            if ((ExternalModuleForFields[ls].ExternalModule[i].ModuleName).endsWith(".js")) {
                try {
                    FWrapper.loadExternalJS(ExternalModuleForFields[ls].ExternalModule[i].ModuleName, ExternalModuleForFields[ls].ExternalModule[i].FunctionName);
                    return;
                }
                catch (err) {
                    alert("Exception :FormEntry.FormExternalModule " + err.message);
                    return false;
                }

            }
            return ExternalModuleForFields[ls].ExternalModule[i].ModuleName;
        }
    },

    CheckIfExternalModuleEnableForFields: function (EventToBeChecked, controlid) {
        //  //debugger
        if (ExternalModuleForFields != undefined) {
            if (ExternalModuleForFields.length > 0) {
                var bFoundEvent = false;
                for (var ls = 0; ls < ExternalModuleForFields.length; ls++) {
                    if (ExternalModuleForFields[ls].FieldName == controlid) {
                        for (var i = 0; i < ExternalModuleForFields[ls].ExternalModule.length; i++) {
                            if (ExternalModuleForFields[ls].ExternalModule[i].OnEvent == EventToBeChecked) {
                                bFoundEvent = true;
                                break;
                            }
                        }
                        break;
                    }
                }
                if (bFoundEvent) {
                    switch (EventToBeChecked) {
                        case EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER://1
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE://2
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F1"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F2"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F3"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F4"):
                            {
                                return false;// FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                // break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F5"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F6"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F7"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F8"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F9"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F10"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F11"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F12"):
                            {
                                return FormsExternalCall.FormExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        default:
                            return false;
                            break;
                    }
                }
                else {
                    return false;
                }
            }
        }
    },
};

if (FormEntryExternalModule == undefined || FormEntryExternalModule == null) {

    var FormEntryExternalModule = new function () {
        Object.defineProperties(this, {
            "Settings": {
                get: function () {
                    return (FormsExGlobal.EntryModel);
                }
            }

        });
    };
}

var Focus_Common_DataStructs_MasterExternalModuleEvents = (function () {
    var private = {
        "ALT_F1": 3,
        "ALT_F2": 4,
        "ALT_F3": 5,
        //  "ALT_F4": 6,
        "ALT_F5": 7,
        "ALT_F6": 8,
        "ALT_F7": 9,
        "ALT_F8": 10,
        "ALT_F9": 11,
        "ALT_F10": 12,
        "ALT_F11": 13,
        "ALT_F12": 14
    }
    return {
        get: function (name) { return private[name.toUpperCase()]; }
    };
})();

var FormsEntryExternalModule = new FExternalModule("FormsExternalModule.ExecuteFormsExtModule");
var m_ModuleFunctionName = "";
var FormsExternalModule = {
    callExternalModule: function (iEvent, iCount, sCallBack, tag) {
        //debugger;
        var arrExtModData = null;
        arrExtModData = FormsExternalModule.GetExternalModuleBasedOnEvent(objExternalModuleForForms, iEvent, 3);
        switch (iEvent) {
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                m_ModuleFunctionName = arrExtModData[0].FunctionName;
                //debugger;
                FormsEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                FormsEntryExternalModule.startProcess();
                return (arrExtModData.length);
            case EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                FormsEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                FormsEntryExternalModule.startProcess();
                return (arrExtModData.length);
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                FormsEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                FormsEntryExternalModule.startProcess();
                return (arrExtModData.length);
            case EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                m_ModuleFunctionName = arrExtModData[0].FunctionName;
                //debugger;
                FormsEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                FormsEntryExternalModule.startProcess();
                return (arrExtModData.length);
            default:
                break;
        }



    },
    IsExternanlModuleFound: function (arrExternalModule, iEvent) {
        if (objExternalModuleForForms != null && objExternalModuleForForms != undefined) {
            if (objExternalModuleForForms.filter(x=>x.OnEvent == iEvent).length > 0) {
                return true;
            }
        }
    },
    GetExternalModuleBasedOnEvent: function (arrExternalModule, iEvent, iModuleType) {
        var arrdata = [];
        for (var i = 0; i < arrExternalModule.length; i++) {
            if (arrExternalModule[i].ModuleType == iModuleType && arrExternalModule[i].OnEvent == iEvent) {
                arrdata.push(arrExternalModule[i]);
            }
        }
        return arrdata;
    },
    GetExternalModuleBasedOnField: function (controlid, iEvent) {
        var arrdata = [];//ExternalModuleForFields global object
        if (ExternalModuleForFields != undefined) {
            if (ExternalModuleForFields.length > 0) {
                var bFoundEvent = false;
                for (var ls = 0; ls < ExternalModuleForFields.length; ls++) {
                    if (ExternalModuleForFields[ls].FieldName == controlid) {
                        for (var i = 0; i < ExternalModuleForFields[ls].ExternalModule.length; i++) {
                            if (ExternalModuleForFields[ls].ExternalModule[i].OnEvent == iEvent) {
                                arrdata.push(ExternalModuleForFields[ls].ExternalModule[i]);
                            }
                        }

                    }
                }
            }
        }
        return arrdata;
    },
    execute: function (sURL, sFunctionName, iRow) {
        try {
            console.log("ExternalModule.execute::" + FConvert.toString(sURL) + "::" + FConvert.toString(sFunctionName));

            if (FCommon.String.endsWith(sURL, ".js") == true) {
                FWrapper.loadExternalJS(sURL, sFunctionName, null, iRow);
            }
            else {
                GLOBAL.LoadingStart();
                FWrapper.openPopup(sURL,
                                    null,
                                    "FormsExternalModule.onLoadCallback",
                                    "FormsExternalModule.onLoadCallback");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{FormsExternalModule.execute} " + err.message, "Exception");
        }
    },
    ExecuteFormsExtModule: function (objInput) {
        try {
            //debugger;
            var objCallBack = '';
            console.log("FormsExternalModule.ExecuteFormsExtModule::" + FConvert.toString(objInput.ModuleName) + "::" + FConvert.toString(objInput.FunctionName));
            if ((objInput.ModuleName).endsWith(".js")) {
            try {
                    FWrapper.loadExternalJS(objInput.ModuleName, objInput.FunctionName, objCallBack);
                    return;
                }
                catch (err) {
                    alert("Exception -> Forms_ExternalModule.Common: " + err.message);
                    return false;
                }
            }
            else {

                var sUrl = FConvert.toString(objInput.ModuleName) + '/' + FConvert.toString(objInput.FunctionName);
                var fnResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("CallGoogleFunction", "Form", "Forms"), true, { sUrl: sUrl }, "json", true, "FormsExternalModule.GoogleFunctionSuccess");
                //FWrapper.openPopup(objInput.ModuleName, objCallBack);
            }
        } catch (err) {
            COMMON.prototype.showMessage("{FormsExternalModule.ExecuteFormsExtModule} " + err.message, "Exception");
        }

    },
    GoogleFunctionSuccess: function(flag,data)
    {
        //debugger;
        if(flag)
        {
            alert(data);
        }
    }
};

var FormsEntry_ExternalModule = {
    
    startProcess: function () {
        var result = null;

        this.m_arrResult = [];
        result = this.execute();

        return (result);
    },

    continueProcess: function (result, evt) {
        var obj = null;

        try {
            if (this.getEventCount() > 0) {
                obj = this.getEventObject(0);
                this.removeEvent(0);

                this.m_arrResult.push(result);
            }

            if (this.execute() == false) {
                if (FCommon.UI.isValidObject(obj) == true) {
                    switch (obj.OnEvent) {
                        case eVoucherExternalModuleEvents.BeforeLoad:
                            if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                                eval(obj.CustomData.Callback)(this.getResult(), obj.CustomData, evt);
                            }
                            break;
                        case eVoucherExternalModuleEvents.AfterLoad:
                            if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                                eval(obj.CustomData.Callback)(this.getResult(), obj.CustomData, evt);
                            }
                            break;
                        case eVoucherExternalModuleEvents.BeforeSave:
                            if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                                eval(obj.CustomData.Callback)(this.getResult(), obj.CustomData.Data, evt);
                            }
                            break;
                        case eVoucherExternalModuleEvents.AfterSave:
                            if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                                eval(obj.CustomData.Callback)(this.getResult(), obj.CustomData.Data, evt);
                            }
                            break;
                        case eVoucherExternalModuleEvents.BeforeDelete:
                            if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                                eval(obj.CustomData.Callback)(this.getResult(), obj.CustomData, evt);
                            }
                            break;
                        case eVoucherExternalModuleEvents.BeforeClose:
                            if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                                eval(obj.CustomData.Callback)(this.getResult(), obj.CustomData, evt);
                            }
                            break;
                    }
                }
            }
        }
        catch (err) {
            alert("Exception: {FExternalModule.continueProcess} " + err.message);
        }
    },

    addEvent: function (iOnEvent, objExternalModules, tag) {
        var iCounter = 0;
        var temp = null;

        try {
            this.m_arrEventQueue = [];

            if (DataType.isArray(objExternalModules) == true) {
                for (iCounter = 0; iCounter < objExternalModules.length; iCounter++) {
                    temp = {};
                    temp.OnEvent = iOnEvent;
                    temp.ExternalModule = objExternalModules[iCounter];
                    temp.CustomData = tag;
                    this.m_arrEventQueue.push(temp);
                }
            }
            else {
                temp = {};
                temp.OnEvent = iOnEvent;
                temp.ExternalModule = objExternalModules;
                temp.CustomData = tag;
                this.m_arrEventQueue.push(temp);
            }
        }
        catch (err) {
            alert("Exception: {FExternalModule.addEvent} " + err.message);
        }
    },

    getResult: function () {
        return (this.m_arrResult);
    },

    execute: function () {
        var obj = null;
        var objInput = null;

        try {
            if (this.getEventCount() > 0) {
                obj = this.getEventObject(0);

                if (FCommon.String.isNullOrEmpty(m_ModuleFunctionName, true) == false) {
                    objInput = {};
                    objInput.ModuleName = obj.ExternalModule.ModuleName;
                    objInput.FunctionName = m_ModuleFunctionName;//obj.ExternalModule.FunctionName;
                    objInput.Row = 0;
                    objInput.Column = 0;

                    if (FCommon.UI.isValidObject(obj.CustomData) == true
                        && obj.CustomData.OnEvent === eVoucherExternalModuleEvents.AfterSave
                        && FCommon.UI.isValidObject(obj.CustomData.Data) == true) {
                        objInput.Data = FCommon.createDuplicateObject(obj.CustomData.Data);
                    }

                    eval(m_ModuleFunctionName)(objInput);
                }

                return (true);
            }
        }
        catch (err) {
            alert("Exception: {FExternalModule.execute} " + err.message);
        }

        return (false);
    },

    getEventCount: function () {
        return (this.m_arrEventQueue.length);
    },

    getEventObject: function (iIndex) {
        var obj = null;

        if (iIndex >= 0 && iIndex < this.getEventCount()) {
            obj = this.m_arrEventQueue[iIndex];
        }

        return (obj);
    },

    removeEvent: function (iIndex) {
        if (iIndex >= 0 && iIndex < this.getEventCount()) {
            this.m_arrEventQueue.splice(iIndex, 1);
        }
    },
};

var FOCUSFORM = {
    FORM: {
        UI: {
            getFieldValueByName: function (WrapperObj) {
                //debugger
                var obje = COMMON.prototype.getEmptyResultObject();
                obje.lValue = 0;
                obje.sValue = "";
                obje.data = {};
                try {
                    var FieldName = WrapperObj;
                    var StandardFieldRequest = FOCUSFORM.FORM.UI.isStandardInternalFieldRequest(FieldName);
                    if (StandardFieldRequest) {
                        obje.data.FieldValue = StandardFieldRequest.objValue;
                        obje.data.sFieldName = FieldName;
                        obje.lValue = 1;
                        return obje;
                    }
                    var obj = FOCUSFORM.FORM.UI.getFieldObject(FieldName);
                    if (typeof obj == "undefined" || obj == null) {
                        return null;
                    }
                    else {
                        var MasterDataType = $(obj).attr('formdatatype');
                        if (MasterDataType == undefined || MasterDataType == "8" || MasterDataType == "9" || MasterDataType == "2") {
                            if ($(obj).hasClass("clsFormOptionControl")) {
                                obje.data.FieldValue = OPTIONCONTROL.getControlValue(obj.id);
                                obje.data.FieldText = OPTIONCONTROL.getControlText(obj.id);
                                obje.data.sFieldName = FieldName;
                            }
                            else if ($(obj).hasClass("clsDatePicker")) {
                                obje.data.FieldValue = DATEPICKER.getDate(obj.id);
                                obje.data.FieldText = obj.value;
                                obje.data.sFieldName = FieldName;
                            }
                            else if ($(obj).hasClass("clsTimePicker")) {
                                obje.data.FieldValue = FTIMECONTROL.getTime(obj.id);
                                obje.data.FieldText = obj.value;
                                obje.data.sFieldName = FieldName;
                            }
                            else if (MasterDataType == "8" || MasterDataType == "9") {
                                obje.data.FieldValue = obj.value;
                                obje.data.FieldText = $("#" + obj.id + " :selected").text();
                                obje.data.sFieldName = FieldName;
                            }
                            else if (MasterDataType == "2") {
                                obje.data.FieldValue = $("#" + obj.id).is(":checked");
                                obje.data.sFieldName = FieldName;
                            }
                        }
                        else {
                            if (MasterDataType == "7" || MasterDataType == "10") {
                                obje.data.FieldValue = "";
                                obje.data.FieldText = "";
                                obje.data.sFieldName = FieldName;
                                obje.sValue = MasterDataType == "7" ? "Cannot get Value for Image Type" : "Cannot get Value for DocumentViewer Type";
                                return obje;
                            }
                            else if (MasterDataType == "12" || MasterDataType == "14") {
                                var SelectedId = OPTIONCONTROL.getControlValue(obj.id);
                                if (SelectedId == null || SelectedId == '') {
                                    var ele = document.getElementById(obj.id);
                                    if (ele != null) {
                                        SelectedId = ele.getAttribute('data-value');
                                    }
                                }
                                obje.data.FieldValue = SelectedId == null ? 0 : SelectedId;
                                obje.data.FieldText = OPTIONCONTROL.getControlText(obj.id);
                                obje.data.sFieldName = FieldName;
                                return obje;
                            }
                            else {
                                if ($(obj).attr('data-value') != undefined) {
                                    obje.data.FieldText = $(obj).attr('data-text');
                                    obje.data.FieldValue = $(obj).attr('data-value');
                                    obje.data.sFieldName = FieldName;
                                } else {
                                    obje.data.FieldValue = obj.value;
                                    obje.data.sFieldName = FieldName;
                                }
                            }
                        }
                    }
                    obje.lValue = 1;
                    return (obje);
                }
                catch (Ex) {
                    //alert("Exception: MASTER: getFieldValueByName " + Ex.message);
                    obje.data = null;
                    return obje.sValue = Ex.message;
                }
            },
            setFieldValueByName: function (WrapperObj, iRowIndex, value) {
                //debugger
                var FieldName = WrapperObj;
                var obje = COMMON.prototype.getEmptyResultObject();
                obje.lValue = 0;
                obje.sValue = "";
                obje.data = {};
                try {
                    var obj = FOCUSFORM.FORM.UI.getFieldObject(FieldName);
                    if (typeof obj == "undefined" || obj == null) {
                        obje.sValue = "Field not found";
                        obje.data = obj;
                        return obje;
                    }
                    else {
                        var MasterDataType = $(obj).attr('formdatatype');
                        if (MasterDataType == undefined || MasterDataType == "2") {
                            if ($(obj).hasClass("clsFormOptionControl")) {
                                OPTIONCONTROL.setControlValue(obj.id, value);
                            }
                            else if ($(obj).hasClass("clsDatePicker")) {
                                DATEPICKER.setDate(obj.id, value, true);
                            }
                            else if ($(obj).hasClass("clsTimePicker")) {
                                FTIMECONTROL.setTime(obj.id, value, true);
                            }
                            else if (MasterDataType == "2") {
                                obj.checked = JSON.parse(value);
                            }
                        }
                        else {
                            if (MasterDataType == '12' || MasterDataType == '14') {
                                var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                OPTIONCONTROL.setControlValue(ctrlid, value, true);
                                $(obj).attr({ "data-value": value, "data-text": OPTIONCONTROL.getControlText(ctrlid) });
                                obj.value = OPTIONCONTROL.getControlText(ctrlid);
                            }
                            else if (MasterDataType == "7" || MasterDataType == "10") {
                                obje.data = null;
                                obje.sValue = MasterDataType == "7" ? "Cannot set Value for Image Type" : "Cannot set Value for DocumentViewer Type";
                                return obje;
                            } else {
                                if (iRowIndex > 0) {
                                    if (MasterDataType == '12' || MasterDataType == '14') {
                                        var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                        OPTIONCONTROL.setControlValue(ctrlid, value, true);
                                        $(obj).attr({ "data-value": value, "data-text": OPTIONCONTROL.getControlText(ctrlid) });
                                        obj.value = OPTIONCONTROL.getControlText(ctrlid);
                                    }
                                    else if (MasterDataType == '4' || MasterDataType == '17' || MasterDataType == '18' || MasterDataType == '19') {
                                        var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                        DATEPICKER.setDate(ctrlid, value, true);
                                        $(obj).attr({ "data-value": value, "data-text": value });
                                        obj.value = OPTIONCONTROL.getControlText(ctrlid);
                                    }
                                    else if (MasterDataType == '5') {
                                        var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                        FTIMECONTROL.setTime(ctrlid, value, true);
                                        $(obj).attr({ "data-value": value, "data-text": value });
                                        obj.value = $("#" + ctrlid).val();
                                    }
                                    else {
                                        obj.value = value;
                                    }
                                }
                                else {
                                    obj.value = value;
                                }
                            }
                        }
                        obje.lValue = 1;
                        obje.Error = "";
                        return obje;
                    }
                }
                catch (Ex) {
                    alert("Exception: Forms : setFieldValueByName " + Ex.message);
                }
            },
            getFieldObject: function (FieldName) {
                //debugger
                try {
                    var arr = [];
                    var re = RegExp(FieldName, "i");
                    $('*[id]').filter(function () {
                        return re.test(this.id);
                    }).each(function () { arr.push(this) });
                    if (arr.length > 0) {
                        arr.forEach(function (ele) {
                            if (ele.id.toLowerCase() == FieldName.toLowerCase()) {
                                FieldName = ele.id;
                                return;
                            }
                        });
                    }
                    var obj = document.getElementById(FieldName + "_" + sClickedElement);
                    return obj;
                }
                catch (Ex) {
                    alert("Exception: Forms: getFieldObject " + Ex.message);
                }
            },
            getSetFieldValueById: function (arrWrapper, bGetValue, isFieldId, iRowIndex, setValue) {
                try {
                    var FieldId = arrWrapper;
                    var arr = [];
                    var re = RegExp(FieldId);
                    $('*[data-fieldid]').filter(function () {
                        if (re.test(this.dataset.fieldid)) {
                            FieldId = this.id;
                        }
                        return FieldId;
                    });
                    if (isFieldId && ($("#" + FieldId).hasClass("clsHiddenOC") || $("#" + FieldId).hasClass("clsHiddenTC") || $("#" + FieldId).hasClass("clsHiddenDC"))) {
                        FieldId = $("#" + FieldId).attr('name');
                    } else {
                        if (isFieldId && iRowIndex > 0) {
                            var ctrlid = (FieldId.match(/[a-z A-Z]+/g)).toString();
                            FieldId = ctrlid + iRowIndex;
                        }
                    }
                    arrWrapper = FieldId;
                    return bGetValue == true ? FOCUSFORM.FORM.UI.getFieldValueByName(arrWrapper) : FOCUSFORM.FORM.UI.setFieldValueByName(arrWrapper, iRowIndex, setValue);

                } catch (Ex) {
                    alert("Exception: Forms: getFieldValueById " + Ex.message);
                }
            },
            getValue: function (arrWrapper, isFieldId, iRowIndex) {
                //debugger
                var iCounter = 0;
                var arrField = null;
                var objResult = null;
                var result = null;

                try {

                    if (DataType.isArray(arrWrapper.fieldid) == true) {
                        arrField = arrWrapper.fieldid;
                    }
                    else {
                        arrField = [];
                        arrField.push(arrWrapper.fieldid);
                    }
                    objResult = {};
                    objResult.lValue = [];
                    objResult.sValue = [];
                    objResult.data = [];

                    iRowIndex = FConvert.toInt(iRowIndex);
                    for (iCounter = 0; iCounter < arrField.length; iCounter++) {
                        if (!isFieldId) {
                            if (iRowIndex > 0) {                                                           //header
                                arrField[iCounter].fieldid = arrField[iCounter].fieldid + iRowIndex;
                            }
                            result = FOCUSFORM.FORM.UI.getFieldValueByName(arrField[iCounter]); //body
                        }
                        else {
                            result = FOCUSFORM.FORM.UI.getSetFieldValueById(arrField[iCounter], true, isFieldId, iRowIndex, ""); //body
                        }
                        if (result != null) {
                            objResult.lValue.push(result.lValue);
                            objResult.sValue.push(result.sValue);
                            objResult.data.push(result.data);
                        }
                        //if (!isFieldId) {
                        //    if (iRowIndex > 0) {
                        //        arrWrapper.fieldid = arrWrapper.fieldid + iRowIndex;
                        //    }
                        //    return FOCUSFORM.FORM.UI.getFieldValueByName(arrWrapper);
                        //} else {
                        //    return FOCUSFORM.FORM.UI.getSetFieldValueById(arrWrapper, true, isFieldId, iRowIndex);
                        //}
                    }
                }
                catch (Ex) {
                    alert("Exception => Forms.getValue " + Ex.message);
                    return false;
                }
                return (objResult);
            },
            setValue: function (arrWrapper, isFieldId, iRowIndex) {
                //debugger
                var iCounter = 0;
                var arrField = null;
                var arrValue = null;
                var objResult = null;
                var result = null;

                try {
                    if (DataType.isArray(arrWrapper.fieldid) == true) {
                        arrField = arrWrapper.fieldid;
                        arrValue = arrWrapper.value;
                    }
                    else {
                        arrField = [];
                        arrField.push(arrWrapper.fieldid);

                        arrValue = [];
                        arrValue.push(arrWrapper.value);
                    }

                    objResult = {};
                    objResult.lValue = [];
                    objResult.sValue = [];
                    objResult.data = [];

                    iRowIndex = FConvert.toInt(iRowIndex);
                    for (iCounter = 0; iCounter < arrField.length; iCounter++) {
                        if (!isFieldId) {
                            if (iRowIndex > 0) {
                                arrField[iCounter].fieldid = arrField[iCounter].fieldid + iRowIndex;
                            }
                            result = FOCUSFORM.FORM.UI.setFieldValueByName(arrField[iCounter], iRowIndex, arrValue[iCounter]);
                        }
                        else {
                            result = FOCUSFORM.FORM.UI.getSetFieldValueById(arrField[iCounter], false, isFieldId, iRowIndex, arrValue[iCounter]);
                        }
                        objResult.lValue.push(result.lValue);
                        objResult.sValue.push(result.sValue);
                        objResult.data.push(result.data);
                    }

                } catch (ex) {
                    alert("Exception -> Forms.setValue: " + ex.message);
                    return (false);
                }
                return (objResult);
            },
            isStandardInternalFieldRequest: function (strFieldName) {
                //debugger
                var Tag = {};
                try {
                    var formid = 0;
                    switch (strFieldName.toLowerCase()) {
                        case "formid":
                            formid = document.getElementById("hdnFormId_" + sClickedElement).value;
                            Tag.objValue = formid;
                            return Tag;
                            break;
                        case "status":
                            Tag.objValue = document.getElementById("hdnStatus_" + sClickedElement).value;
                            return Tag;
                            break;
                        case "formtypeid":
                            Tag.objValue = document.getElementById("hdnFormEntryTypeId").value;
                            return Tag;
                            break;
                        case "createdby":
                            formid = document.getElementById("hdnFormId_" + sClickedElement).value;
                            if (parseInt(formid) > 0) {
                                Tag.objValue = $("#lblCreatedBy").text();
                            } else {
                                Tag.objValue = document.getElementById("hdnUserId_" + sClickedElement).value;
                            }
                            return Tag;
                            break;
                        case "createddate":
                            formid = document.getElementById("hdnFormId_" + sClickedElement).value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblCreatedDate").text();
                            } else {
                                var d = new Date();
                                Tag.objValue = d.toLocaleDateString();
                            }
                            return Tag;
                            break;
                        case "modifiedby":
                            formid = document.getElementById("hdnFormId_" + sClickedElement).value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblModifiedBy").text();
                            } else {
                                Tag.objValue = document.getElementById("hdnModifiedUserId_" + sClickedElement).value;
                            }
                            return Tag;
                            break;
                        case "modifieddate":
                            formid = document.getElementById("hdnFormId_" + sClickedElement).value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblModifiedDate").text();
                            } else {
                                var d = new Date();
                                Tag.objValue = d.toLocaleDateString();
                            }
                            return Tag;
                            break;
                        case "selectedformids":
                            if (GridrowidValues != undefined)
                                Tag.objValue = GridrowidValues;
                            return Tag;
                            break;
                        default:
                            return false;
                            break;
                    }
                }
                catch (Ex) {
                    alert("Exception => Forms: isStandardInternalFieldRequest " + Ex.message);
                    return false;
                }
            },
            getMandatoryFields: function (FormTypeId) {
                var objResult = {};
                objResult.lValue = [];
                objResult.sValue = [];
                objResult.data = [];

                try {
                    var arrFieldsEle = document.getElementsByClassName('clsIsMandatory');
                    if (arrFieldsEle != null && arrFieldsEle.length > 0) {
                        for (var i = 0; i < arrFieldsEle.length; i++) {
                            objResult.data.push(arrFieldsEle[i].id.toString());
                        }
                    }
                }
                catch (error) {
                    alert("Exception => Forms.getMandatoryFields " + error.message);
                    return false;
                }
                return (objResult);
            }
        }
    }
}
;
