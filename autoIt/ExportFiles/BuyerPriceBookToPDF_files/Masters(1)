/* Minification failed. Returning unminified contents.
(1009,69-70): run-time error JS1195: Expected expression: >
(1009,91-92): run-time error JS1004: Expected ';': )
(1023,84-85): run-time error JS1195: Expected expression: >
(1025,98-99): run-time error JS1195: Expected expression: >
(1413,43-44): run-time error JS1195: Expected expression: >
(1413,75-76): run-time error JS1195: Expected expression: .
(1414,55-56): run-time error JS1195: Expected expression: >
(1414,86-87): run-time error JS1004: Expected ';': )
(1431,43-44): run-time error JS1195: Expected expression: >
(1431,75-76): run-time error JS1195: Expected expression: .
(1432,55-56): run-time error JS1195: Expected expression: >
(1432,86-87): run-time error JS1004: Expected ';': )
(1449,43-44): run-time error JS1195: Expected expression: >
(1449,75-76): run-time error JS1195: Expected expression: .
(1450,55-56): run-time error JS1195: Expected expression: >
(1450,86-87): run-time error JS1004: Expected ';': )
(1450,88-89): run-time error JS1197: Too many errors. The file might not be a JavaScript file: 0
(1445,1-36): run-time error JS1301: End of file encountered before function is properly closed: function PushDashletMasterID(value)
(1450,89-90): run-time error JS1195: Expected expression: ]
(1450,90-91): run-time error JS1197: Too many errors. The file might not be a JavaScript file: ;
 */
console.log('JsLanding script Starts: ', new Date().toLocaleString());
var MultipulMasterIds = [];
var IsMasterIdGroup = [];
var MultipulAccorProdIds = [];
var emptyString = '';
var treeViewIdSelectedValue = "";
var getAllMasterIdsAllPages = [];
var GridrowidValues = []; var GridrowidValuesForMovingRecords = []; var AccountProductTypeIdsForMovingRecords = [];
var UncheckedGridrowidValuesForReport = [];
var ledgerSearchedValue;
var GetMasterResourceMessages; var ExternalModuleForMastersObject;
var bReportCheckAll = false;
var checkbufferForMultipleTreeTbs = [];
//var MultipulParentIds = [];
var gridSelectedRow;
var divLandingGridSuccessHTML;
var showAllEnumValue = '1';
var BalanceSheet = ["Cash", "Bank", "Customer", "Vendor", "Customer/Vendor", "Assets", "Liabilities", "Petty cash expenses", "Taxes payable", "General & Administration", "Control", "Treasury stock", "Short term investments", "Sinking fund payable", "Property plant & Equipment", "Preferred dividends", "Prospect", "Inventory", "Fixed Assets", "Cash/Petty Cash Account", "Employee", "Assets / Liabilities", "Trust Receipt Account"];
var ProfitLoss = ["Sales", "Purchases", "Income", "Expenses", "Travel & Entertainment expenses", "Selling expenses", "Manufacturing expenses", "TDS", "Depreciation & Amortization", "Other expenses", "Cost", "Revenues not producing working capital", "Sales returns & discounts", "Project operation expense", "Trading Account", "Income / Expense"]
var MasterPopUps = [];
var m_arrTreeTabsIds = [];
var IsTreeTabExists = '';
var lstTreeData = [];//@hold master tree data
var IsFromDashlet = false;
var LandingReportDashletId = '';//used for client js code to identify active dashlet
var DashletMasterIds = [];
var IsFromMaster = false;
var ExternalModuleForMastersObject;
//for budget screen option controls
var BUDGET = {
    optionCtrlLoaded: function (id, data, tag) {

        if (data != null) {
            if (data[0].sValue != 0) {
                $('#' + tag.CustomData).val(data[1].sValue);
                $('#' + tag.CustomData).attr("data-value", data[0].sValue)
                $('#' + tag.CustomData).attr("data-text", data[1].sValue)
            }
        }
    }
}
var LandingWrapper = {

    GetLanding: function (m_iMasterTypeId, IsReportView, editMasterClick, AccountProductTypeIds, bClearSessionAndCache) {
        try {
            var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("Landing", "Landing", "Landing"), true,
                           {
                               m_iMasterTypeId: m_iMasterTypeId
                           },
                       "html",
                       true,
                       "GetLanding_Success",
                       "GLOBAL.LoadingStart",
                       " GLOBAL.LoadingEnd"
               );
        } catch (error) {
            COMMON.prototype.showMessage(error);
        }


    },
    GetLanding_Success: function (bs, data) {
        try {
            if (bs == true && data != null) {
                return data;
            }
        } catch (error) {
            COMMON.prototype.showMessage(error);
        }
    },
    onBarcodeDataLoaded: function (id, data) {
        var sUserData = "";
        var iRow = 0;
        var iColumn = 0;
        var value = null;
        var cell = null;
        debugger // Zohair
        try {

            OPTIONCONTROL.setControlValue("cmbUserTypeMaster", data.ItemId);
            //sUserData = OPTIONCONTROL.getUserData(id);
            //value = sUserData.split(",");
            //if (FCommon.Array.getLength(value) != 2) {
            //    return;
            //}
            //iRow = FConvert.toInt(value[0]);
            //iColumn = FConvert.toInt(value[1]);

            //iDefaultBaseUnit = FConvert.toInt(OPTIONCONTROL.getControlValue(id, "idefaultbaseunit"));

            //if (transEntryGlobal.FieldHelper.Column.Unit > -1) {
            //    TRANSACTION_ENTRY.BODY.loadUnitData(data.UnitId,
            //                                        iDefaultBaseUnit,
            //                                        data.ItemId,
            //                                        iRow - 1,
            //                                        transEntryGlobal.FieldHelper.Column.Unit,
            //                                        transEntryGlobal.getBodyMetaDataObject(transEntryGlobal.FieldHelper.MetaData.Unit).iFieldId,
            //                                        0);
            //}

            //if (transEntryQuantity.isColumnExist() == true && data.Quantity != null) {
            //    transEntryGrid.setCellNumber(iRow, transEntryQuantity.getColumnIndex(), data.Quantity, transEntryQuantity.getDecimals(iRow));
            //    TRANSACTION_ENTRY.BODY.processChangeQuantity(0, data.Quantity, iRow);

            //}

            //if ((typeof data.Batch).toLowerCase() == "object") {
            //    transEntryBatch.setBatchInfo(iRow, data.Batch);
            //}
        }
        catch (err) {
            //  transEntryGlobal.showAlert("{TRANSACTION_ENTRY.BODY.onBarcodeDataLoaded}" + err.message, "Exception");
        }
    },


    getBarcodeInput: function (id) {
        var obj = null;
        debugger // Zohair
        try {
            obj = {};
            obj.iInvTagId = 0;//transEntryInvTag.getValue(transEntryGrid.getCurrentRow());
            obj.iVoucherDate = 0; //transEntryDate.getDate();
            obj.iVoucherType = 0;// transEntryInfo.VoucherType;
            obj.sVoucherNo = "";

            //if (transEntryInfo.isEditing == true) {
            //    obj.sVoucherNo = transEntryDocumentNo.getText();
            //}
        }
        catch (err) {
            //     transEntryGlobal.showAlert("{TRANSACTION_ENTRY.BODY.getBarcodeInput}" + err.message, "Exception");
        }

        return (obj);
    }
}

var EXTERNALMODULE_EVENT_ENUM = {
    BEFORE_LOAD: 1,
    AFTER_LOAD: 2,
    BEFORE_SAVE: 3,
    AFTER_SAVE: 4,
    BEFORE_DELETE: 5,
    BEFORE_CLOSE: 6,
    ON_BUTTON: 7,
    ON_ADD_TAB: 8,
    AFTER_DELETE: 9
}
var EXTERNALMODULE_TYPE_ENUM = {
    DLL: 1,
    WEB_SERVICE: 2,
    URL: 3
}

var m_EmAddedEvent = '';
$.fn.extend({
    treed: function (o) {
        var openedClass = 'gminus icon-collepse';
        var closedClass = 'gplus icon-expand';
        var openedClassArrow = 'glyphicon-chevron-right';
        var closedClassArrow = 'glyphicon-chevron-down';
        //
        if (typeof o != 'undefined') {
            if (typeof o.openedClass != 'undefined') {
                openedClass = o.openedClass;
            }
            if (typeof o.closedClass != 'undefined') {
                closedClass = o.closedClass;
            }
        };

        //initialize each of the top levels
        var tree = $(this);
        tree.addClass("tree");
        tree.find('li').each(function () {
            //   //
            var branch = $(this); //li with children ul
            if ($(branch).find('li').length > 0) {
                branch.prepend("<a onclick='CloseOpenIconClick(this)' style='cursor:pointer;' class='indicator " + closedClass + "'></a>");

            } else {
                branch.prepend("<a class='indicator glyphicon glyphicon-one-fine-dot'></a>");
            }
            branch.addClass('branch');
            $(this).find(".active").removeClass("active");
            branch.children().children().toggle();
        });

        //fire event from the dynamically added icon
        tree.find('.branch .indicator').each(function () {
            $(this).on('click', function () {
                $(this).closest('li').click();
            });
        });

        //fire event to open branch if the li contains an anchor instead of text
        tree.find('.branch>a').each(function () {
            $(this).on('click', function (e) {
                $(this).closest('li').click();
                e.preventDefault();
            });
        });
        //fire event to open branch if the li contains a button instead of text
        tree.find('.branch>button').each(function () {
            $(this).on('click', function (e) {
                $(this).closest('li').click();
                e.preventDefault();
            });
        });
    }
});
function retainselectionClicked(ele) {
    retainselectionValue = ele.checked;
}
function CloseOpenIconClick(ele) {
    //
    var openedClass = 'icon-collepse';// 'gminus icon-collepse';
    var closedClass = 'icon-new';// 'gplus icon-expand';
    if ($(ele).hasClass('indicator')) {
        var icon = $(ele).toggleClass(openedClass + " " + closedClass);
    }
    else {
        $($(ele).prev()).toggleClass(openedClass + " " + closedClass);
    }
    $($(ele).parent()).children().children().toggle();
}
//Scripts Out Of main View Start

function GetGridIdValesAndCheck(Ids) {
    Ids = [101, 385, 618, 619]
    var id = document.getElementById('landgridData');
    var row = $(id).find('tbody').find('tr');
    for (var i = 0; i < row.length; i++) {

        var value = row[i].cells[8].innerHTML.trim();
        value = getEnglishDigits(value);
        if ($.inArray(parseInt(value), Ids) > -1) {
            var p = row[i].cells[7];
            //Selecting checkbox
            $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).attr("checked", true);
            $(row[i]).addClass('textRedColor');
            var name = $(row[i]).find('td.tdName');
            $(name).addClass('textBlackColor');
            var ProdctorAccont = row[i].cells[9].innerHTML.trim();
            SaveRowIdValues(parseInt(value), ProdctorAccont);
        }
    }
}

function GetNextRow(bool, url) {
    //debugger
    var sModule = $("#ObjMasterScreenStructure_Module").val();
    var sMasterName = $('#hdnMasterName').val();
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    if (SelectedRowNo == '') {
        SelectedRowNo = gridSelectedRow;
    }
    if (SelectedRowNo != "") {
        var id = document.getElementById('landgridData');
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var iMasterId = $(Row).find('td')[8].innerHTML.trim();
        iMasterId = getEnglishDigits(iMasterId);
        var NextiMasterId = 0;
        var NextSelectedRowNo = 0;
        var iParentId = $('#hndTreeMaster').val();
        var iTreeId = document.getElementById('iTreeId').value;
        var bResize = false;
        if ($('#chkResizeGrid').is(":checked")) {
            bResize = true;
        }
        var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        var CurrentPageNo = document.getElementById('hndCurrentPageNo').value;

        if (bool) {
            if (SelectedRowNo == 0) {
                SelectedRowNo = 0;
                return false;
            }
            else
                NextSelectedRowNo = parseInt(SelectedRowNo) - 1;
            if (NextSelectedRowNo == -1)
                return false;
            Row = $($(id).find('tbody')).find('tr')[parseInt(NextSelectedRowNo)];
            //var iddddd = $(Row).find('.ClsMaster')[0].innerHTML.trim()//ClsMaster
            NextiMAsterId = $(Row).find('td')[8].innerHTML.trim();//$(Row).find('.ClsMaster')[0].innerHTML.trim()//
            NextiMAsterId = getEnglishDigits(NextiMAsterId);
        } else {
            var rowNo = $($(id).find('tbody')).find('tr').length;
            if (SelectedRowNo == rowNo - 1)
                return false;
            else
                NextSelectedRowNo = parseInt(SelectedRowNo) + 1;
            Row = $($(id).find('tbody')).find('tr')[parseInt(NextSelectedRowNo)];
            //var idddd = $(Row).find('.ClsMaster')[0].innerHTML.trim()//ClsMaster
            NextiMAsterId = $(Row).find('td')[8].innerHTML.trim();//$(Row).find('.ClsMaster')[0].innerHTML.trim()//
            NextiMAsterId = getEnglishDigits(NextiMAsterId);
        }
        $.ajax({
            url: url,
            type: 'POST',
            data: JSON.stringify({ bnext: bool, sMastername: sMasterName, sModule: sModule, PreMaster: iMasterId, nextMaster: NextiMAsterId, ParentId: iParentId, iTreeId: iTreeId }),
            contentType: "application/json; charset=utf-8",
            cache: false,
            async: false,
            datatype: "json",
            success: function (data) {
                //;
                if (data != false) {
                    url = GLOBAL.getContextPath("GridPartial", "Landing", "Landing");// '/Focus8W/Landing/Landing/GridPartial';
                    GotoSelectedPage(CurrentPageNo, MasterTypeId, url, true);
                    id = document.getElementById('landgridData');
                    //;
                    Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
                    $(Row).removeClass('FRowColor');
                    if (bool) {
                        if (SelectedRowNo == 0)
                            SelectedRowNo = 0;
                        else
                            SelectedRowNo--;
                        Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
                        $(Row).addClass('FRowColor');
                        document.getElementById('hndSelectedRowNo').value = SelectedRowNo;
                    } else {
                        var rowNo = $($(id).find('tbody')).find('tr').length;
                        if (SelectedRowNo == rowNo)
                            SelectedRowNo = rowNo;
                        else
                            SelectedRowNo++;
                        Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
                        $(Row).addClass('FRowColor');
                        document.getElementById('hndSelectedRowNo').value = SelectedRowNo;
                    }
                    if (GLOBAL.GlobalCacheArrayForMasters.length > 0) {
                        for (var i = GLOBAL.GlobalCacheArrayForMasters.length - 1; i >= 0 ; i--) {
                            if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) {
                                GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);
                                //  break;
                            }
                        }
                    }
                    getGlobalCacheForMasters(true);
                }
            },
            error: function (data) {
                //  //;
                COMMON.prototype.showMessage("Error,GetNextRow");
            }
        });
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
    }
}


function CheckAllCheckboxinGrid(eve, url, iDashletId) {
    debugger
    if (iDashletId != '' && iDashletId != undefined && iDashletId != null) {
        LandingReportDashletId = iDashletId;
    }
    else {
        if (IsFromDashlet) {
            LandingReportDashletId = GetActiveDashletId();
        }
    }
    var Ele = GetLandingControlForDashlet(LandingReportDashletId);

    var bCheckedAll = false;
    var elements = IsFromDashlet ? $(Ele).find(".chkRowCheck") : document.getElementsByName("chkRowCheck");

    if (LandingReportDashletId.length > 0 && IsFromDashlet) {


        if ($(eve).prop('checked') == true) {
            $('#liSelectAllMasters' + LandingReportDashletId).prop('checked', true);
            bCheckedAll = true
            UncheckedGridrowidValuesForReport = [];
            // bReportCheckAll = true;
            if ($("#selectAllMasters_" + LandingReportDashletId).length == "0") {
                GridrowidValues = [];
            }
        }
        else {
            $('#liSelectAllMasters' + LandingReportDashletId + ',#selectAllMasters_' + LandingReportDashletId).prop('checked', false);
            if ($("#selectAllMasters_" + LandingReportDashletId).length > 0 && $(eve).attr('id') != "selectAllMasters_" + LandingReportDashletId) {
            }
            bCheckedAll = false;
            $(Ele).find(".chkRowCheck").attr("checked", false);
        }
        for (var i = 0; i < elements.length; i++) {
            elements[i].checked = bCheckedAll;
            GetRowDataOfGridOnNonCheck(i, bCheckedAll, 7)
        }
        if ($(eve).prop('checked') == false) {
            getAllMasterIdsAllPages = [];
            GridrowidValues = [];
        }
        retainEditedMasterIds = GridrowidValues;
        //////debugger
        var selectAllMasters_ = false; var idSuccess;
        var IsFromGridHeader = false;
        if ($("#selectAllMasters_" + LandingReportDashletId).length > 0) {
            if ($("#selectAllMasters_" + LandingReportDashletId).is(":checked") == true || $(Ele).find("#liSelectAllMasters" + LandingReportDashletId).is(":checked")) {//@added this liSelectAllMasters id condition to do the same if fires from master records grid header selectall
                selectAllMasters_ = true;
                getAllMasterIdsAllPages = GridrowidValues;// data.Data;
                
            }
            if (eve != null && eve.id != null && eve.id != undefined && eve.id == 'liSelectAllMasters' + LandingReportDashletId) {
                IsFromGridHeader = true;
                debugger
                getAllMasterChildrenPageWise(true, GridrowidValues);
            }
            idSuccess = SelectedMasters(true, "", selectAllMasters_, null, null, null, IsFromGridHeader);
            Master_array = idSuccess; //Added by Niranjan on 27th July 2019.
            if (bCheckedAll) {
                var getIds = idSuccess.map(function (a) { return a.ID; });
                GridrowidValues = getIds;
                if (IsFromDashlet) {
                    PushDashletMasterID(getIds);
                }

            }
            else {
                //while (--length){
                for (var i = 0; i < idSuccess.length; i++) {
                    if ($.inArray(idSuccess[i].ID, GridrowidValues) == -1) {
                        SaveRowIdValues(idSuccess[i].ID, "", $(eve).prop('checked'));
                    }
                }
                if (IsFromDashlet) {
                    PopDashletMasterID(GridrowidValues);
                }
                UncheckedGridrowidValuesForReport = [];
            }
        }




    }

    else {
        //if (eve.checked == undefined) {
        //    var id = $('#liSelectAllMasters');
        //    if ($($(id).find('a')[0]).hasClass('hidden')) {
        //        bCheckedAll = false;
        //        $($(id).find('a')[1]).addClass('hidden');
        //        $($(id).find('a')[0]).removeClass('hidden');
        //    } else {
        //        bCheckedAll = true;
        //        $($(id).find('a')[0]).addClass('hidden');
        //        $($(id).find('a')[1]).removeClass('hidden');
        //    }
        //} else {
        //    bCheckedAll = eve.checked;
        //}
        if ($(eve).prop('checked') == true) {
            $('#liSelectAllMasters').prop('checked', true);
            bCheckedAll = true
            UncheckedGridrowidValuesForReport = [];
            // bReportCheckAll = true;
            if ($("#selectAllMasters_").length == "0") {
                GridrowidValues = [];
            }
            //else {
            //    if ($(eve).attr('id') != "selectAllMasters_") {
            //        var ele = document.getElementById("selectAllMasters_");
            //        var text = ele.nextElementSibling.textContent
            //        ele.nextElementSibling.textContent = ele.dataset.text;
            //        ele.dataset.text = text;
            //        $(ele).prop("checked", true);
            //    }
            //}
            //  AccountProductTypeIds = [];
            //do something
        }
        else {
            $('#liSelectAllMasters,#selectAllMasters_').prop('checked', false);
            if ($("#selectAllMasters_").length > 0 && $(eve).attr('id') != "selectAllMasters_") {

                //commentted this to not to set the text -'unselect all'
                //var eleselectAllMasters_ = document.getElementById("selectAllMasters_");
                //var text = eleselectAllMasters_.nextElementSibling.textContent;
                //eleselectAllMasters_.nextElementSibling.textContent = eleselectAllMasters_.dataset.text;
                //eleselectAllMasters_.dataset.text = text;
            }
            bCheckedAll = false;
            $(".chkRowCheck").attr("checked", false);
            //AccountProductTypeIds = [];
        }
        for (var i = 0; i < elements.length; i++) {
            elements[i].checked = bCheckedAll;
            GetRowDataOfGridOnNonCheck(i, bCheckedAll, 7)
        }
        if ($(eve).prop('checked') == false) {
            getAllMasterIdsAllPages = [];
            GridrowidValues = [];
        }
        retainEditedMasterIds = GridrowidValues;
        //////debugger
        var selectAllMasters_ = false; var idSuccess;
        var IsFromGridHeader = false;
        if ($("#selectAllMasters_").length > 0) {
            if ($("#selectAllMasters_").is(":checked") == true || $("#liSelectAllMasters").is(":checked")) {//@added this liSelectAllMasters id condition to do the same if fires from master records grid header selectall
                selectAllMasters_ = true;
                getAllMasterIdsAllPages = GridrowidValues;// data.Data;

            }
            if (eve != null && eve.id != null && eve.id != undefined && eve.id == 'liSelectAllMasters') {
                IsFromGridHeader = true;
                GridrowidValues = getAllMasterChildrenPageWise(true, GridrowidValues);
            }
            idSuccess = SelectedMasters(true, "", selectAllMasters_, null, null, null, IsFromGridHeader);
            Master_array = idSuccess; //Added by Niranjan on 27th July 2019.
            if (bCheckedAll) {
                var getIds = idSuccess.map(function (a) { return a.ID; });
                GridrowidValues = getIds;

            }
            else {
                //while (--length){
                for (var i = 0; i < idSuccess.length; i++) {
                    if ($.inArray(idSuccess[i].ID, GridrowidValues) == -1) {
                        SaveRowIdValues(idSuccess[i].ID, "", $(eve).prop('checked'));
                    }
                }
                UncheckedGridrowidValuesForReport = [];
            }
        }
        else if ($('#liSelectAllMasters').prop('checked') == true && $("#selectAllMasters_").length == 0) {
            var AuthAllBtnELe = document.getElementById('id_showAllUnAuth');
            if (AuthAllBtnELe != null && AuthAllBtnELe.classList.contains('EnableAuthBtns')) {
                return;//no action further as total selection is not required in auth record page view.
            }

            var multipleTreeCounter = "";
            if ($("#divEntryScreenTree").length > 0) {
                var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
                var secondSubDiv = $(tabId).find('.clsdivSecondsub').attr("id");
                multipleTreeCounter = $("#" + secondSubDiv)[0].id;
                multipleTreeCounter = multipleTreeCounter.match(numberPattern);
                if (multipleTreeCounter == null)
                    multipleTreeCounter = '';
                else
                    multipleTreeCounter = multipleTreeCounter.toString();

            }

            var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId + multipleTreeCounter).value;
            var iTreeId = document.getElementById('iTreeId' + LandingReportDashletId + multipleTreeCounter).value;
            if (iTreeId == "") {
                iTreeId = "0";
            }
            var selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAllIDs", "Landing", "Landing"), true, {
                m_iMasterTypeId: iMasterTypeId, iTreeId: iTreeId, m_arrAccountProductTypeIds: AccountProductTypeIds,
                m_lstSelectedRowsCheckedBuffer: (GridrowidValues.length > 0 ? Array.from(new Set(GridrowidValues)) : Array.from(new Set(getAllMasterIdsAllPages)))
            }, "JSON", false);
            if (selectMastersResult != null && selectMastersResult.data != null && selectMastersResult.data.length > 0) {
                GridrowidValues = selectMastersResult.data;
            }

        }
    }


}
//Scripts Out Of main View End
function SetSelectedMastersForDashBoard(IdNameCombo, DashletId) {
    ////debugger
    if (IdNameCombo != null && IdNameCombo.length > 0) {
        IdNameCombo = IdNameCombo.map(function (a) { return a.ID; });
        //IdNameCombo = [{ ID: 10990 }, { ID: 10989 }];
        for (var i = 0; i < IdNameCombo.length; i++) {
            if ($.inArray(IdNameCombo[i], GridrowidValues) == -1) {
                SaveRowIdValues(IdNameCombo[i], "", true);
            }
        }
        GetSelectedDataOfGrid();
        if ($("#selectAllMasters_" + DashletId).length > 0) {
            if ($("#selectAllMasters_" + DashletId).is(":checked")) {
                $('#liSelectAllMasters').attr('checked', true);
            }
        }
        if (parseInt($("#totalEntries").attr('data-rowcount')) == $(".chkRowCheck:checked").length) {
            $('#liSelectAllMasters').prop('checked', true);
        }
    }
}
//@IsFromGridHeader--to identify from where event has triggered.by default is false
function SelectedMasters(isReport, ReportMasterSessionKey, bCheckedAll, ReportId, ReportModule, IsPartialView, IsFromGridHeader) {
    debugger
    GLOBAL.LoadingStart();

    var ActiveDashletId = '';
    if (IsFromDashlet) {
        ActiveDashletId = GetActiveDashletId();
    }

    //@ added this to set these varaibles to get the data if gridheader is selected ,so that we can get masterarray as we get on OK click
    if (IsFromGridHeader == true) {
        ReportModule = document.getElementById("ReportModule_" + ActiveDashletId).value;
        ReportId = document.getElementById("getReportId_" + ActiveDashletId).value;
        // ReportMasterSessionKey = NETWORK.getCurrentTabId().toString() + GLOBAL.getCompanyId().toString() + GLOBAL.getLoginId().toString() + document.getElementById("getReportId_" + DashletId).value + DashletId;
    }

    IsPartialView = (IsPartialView == undefined || IsPartialView == null) ? false : IsPartialView;
    ReportMasterSessionKey = ReportMasterSessionKey == undefined ? "" : ReportMasterSessionKey;
    bCheckedAll = bCheckedAll == undefined ? false : bCheckedAll; var numberPattern = /\d+/g;
    var multipleTreeCounter = "";
    if ($("#divEntryScreenTree").length > 0) {
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var secondSubDiv = $(tabId).find('.clsdivSecondsub').attr("id");
        multipleTreeCounter = $("#" + secondSubDiv)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();

    }
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + ActiveDashletId + multipleTreeCounter).value;
    var iTreeId = document.getElementById('iTreeId' + ActiveDashletId + multipleTreeCounter).value;
    if (iTreeId == "") {
        iTreeId = "0";
    }
    var url = GLOBAL.getContextPath("SelectedMasters", "Landing", "Landing");// '/Focus8W/Landing/Landing/SelectedMasters';
    var Sucessdata = "";
    var selectMastersResult = null;
    if (IsFromGridHeader) {

        selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("SelectedMasters", "Landing", "Landing"), true, {
            m_iMasterTypeId: iMasterTypeId, iTreeId: iTreeId, m_arrAccountProductTypeIds: AccountProductTypeIds,
            m_lstSelectedRowsCheckedBuffer: (GridrowidValues.length > 0 ? Array.from(new Set(GridrowidValues)) : Array.from(new Set(getAllMasterIdsAllPages))),
            m_bIsReportView: isReport, ReportMasterSessionKey: ReportMasterSessionKey, bCheckedAll: false,
            UncheckedGridrowidValuesForReport: UncheckedGridrowidValuesForReport, bReportOk: true, ReportId: ReportId,
            ReportModule: ReportModule, IsPartialView: IsPartialView

        }, "JSON", false);
    }
    else {
        selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("SelectedMasters", "Landing", "Landing"), true, {
            m_iMasterTypeId: iMasterTypeId, iTreeId: iTreeId, m_arrAccountProductTypeIds: AccountProductTypeIds,
            m_lstSelectedRowsCheckedBuffer: (GridrowidValues.length > 0 ? Array.from(new Set(GridrowidValues)) : Array.from(new Set(getAllMasterIdsAllPages))),
            m_bIsReportView: isReport, ReportMasterSessionKey: ReportMasterSessionKey, bCheckedAll: bCheckedAll,
            UncheckedGridrowidValuesForReport: UncheckedGridrowidValuesForReport, bReportOk: ReportMasterSessionKey != "", ReportId: ReportId,
            ReportModule: ReportModule, IsPartialView: IsPartialView

        }, "JSON", false);
    }
    ////
    if (selectMastersResult.data.length > 0) {
        if ((ReportMasterSessionKey == "" || $("#ulCommonlyUsedRibbon").length == "1") || IsFromDashlet) {
            Sucessdata = selectMastersResult.data;
        }
        else {
            Sucessdata = true;
        }
    }
    else {
        if (IsPartialView) {
            Sucessdata = null;
        }
        else {
            Sucessdata = false;
        }
        // alert("Error");
    }
    GLOBAL.LoadingEnd();
    return Sucessdata;
}

function SelectedMastersPartialView(isCheckedAll) {
    return SelectedMasters(false, '', isCheckedAll, 0, '');
}


function getAllMasterChildren(isReport, selectedValue) {
    debugger
    var m_lstSelectedRowsCheckedBuffer = [];
    m_lstSelectedRowsCheckedBuffer.push(selectedValue);
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId).value;
    var iTreeId = document.getElementById('iTreeId' + DashletId).value;
    var selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("getAllMasterChildren", "Landing", "Landing"), true, {
        m_lstSelectedRowsCheckedBuffer: m_lstSelectedRowsCheckedBuffer, m_iMasterTypeId: iMasterTypeId,
        m_arrAccountProductTypeIds: AccountProductTypeIds, m_bIsReportView: isReport, iTreeId: iTreeId,
    }, "JSON", false);
    return selectMastersResult.data;
}

function getAllMasterChildrenPageWise(isReport, selectedValue) {
    debugger
    var m_lstSelectedRowsCheckedBuffer = [];
    m_lstSelectedRowsCheckedBuffer = selectedValue;// .push(selectedValue);
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId).value;
    var iTreeId = document.getElementById('iTreeId' + DashletId).value;
    var selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("getAllMasterChildren", "Landing", "Landing"), true, {
        m_lstSelectedRowsCheckedBuffer: m_lstSelectedRowsCheckedBuffer, m_iMasterTypeId: iMasterTypeId,
        m_arrAccountProductTypeIds: AccountProductTypeIds, m_bIsReportView: isReport, iTreeId: iTreeId,
    }, "JSON", false);
    return selectMastersResult.data;
}

function getAllMasterChildrenForTreeTab(isReport, selectedValue) {
    //debugger
    var m_lstSelectedRowsCheckedBuffer = [];
    m_lstSelectedRowsCheckedBuffer.push(selectedValue);
    var iMasterTypeId = GetActiveTreeTabMasterTypeId();
    var iTreeId = document.getElementById('iTreeId').value;
    var selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("getAllMasterChildren", "Landing", "Landing"), true, {
        m_lstSelectedRowsCheckedBuffer: m_lstSelectedRowsCheckedBuffer, m_iMasterTypeId: iMasterTypeId,
        m_arrAccountProductTypeIds: AccountProductTypeIds, m_bIsReportView: isReport, iTreeId: iTreeId,
    }, "JSON", false);
    return selectMastersResult.data;
}


function GetMasterCount(isReport) {
    //;
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var iTreeId = document.getElementById('iTreeId').value;
    var url = GLOBAL.getContextPath("GetMasterCount", "Landing", "Landing");// '/Focus8W/Landing/Landing/GetMasterCount';
    var Sucessdata = "";
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            m_iMasterTypeId: iMasterTypeId, iTreeId: iTreeId, m_arrAccountProductTypeIds: AccountProductTypeIds, m_lstSelectedRowsCheckedBuffer: GridrowidValues, m_bIsReportView: isReport
        }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //;
            Sucessdata = data;
        },
        error: function (data) {
            //;
            Sucessdata = null;
            COMMON.prototype.showMessage("Error,GetMasterCount");
        }
    });
    return Sucessdata;
}

//Grid related Script Start 
function GetParentTreeSelected(irow, bool, element, bContextMenu, isClone) {
    //  bContextMenu = bContextMenu == undefined ? true : bContextMenu;
    debugger
    MultipulAccorProdIds = [];
    isClone = isClone == undefined ? false : isClone;
    var gridid = $(element).closest('table')[0];
    var Row = $($(gridid).find('tbody')).find('tr')[irow];

    if ($(Row).find('td')[0].innerHTML.trim() == "False") {
        if ($('#MasterRetrieval_IsReport').val() == "False" && (bContextMenu == true || bContextMenu == undefined)) {
            var editElement = $('#btnMasterEdit');
            if (editElement.length > 0 && $("#GenerateNewMasterModel").length == "0") {
                GenerateNewMaster(editElement);
            } else {
                return false;
            }
        }
        else if (isClone) {
            var editElement = $('#btnClone');
            if (editElement.length > 0) {
                GenerateNewMaster(editElement);
            } else {
                return false;
            }
        }
        return false;
    }
    else {
        if (bContextMenu == true) {
            var editElement = isClone == true ? $('#btnClone') : $('#btnMasterEdit');
            GenerateNewMaster(editElement);
            return false;
        }
        else if (isClone) {
            GenerateNewMaster($('#btnClone'));
            return false;
        }
    }
    var iMasterId = $(Row).find('td')[8].innerHTML.trim();
    iMasterId = getEnglishDigits(iMasterId);
    var nodeName = $(Row).find('td')[10].innerHTML.trim();
    var iParentId = $(Row).find('td')[3].innerHTML.trim();

    var numberPattern = /\d+/g;
    var multipleTreeCounter = $(element).closest('.clsdivSecondsub')[0].id;
    multipleTreeCounter = multipleTreeCounter.match(numberPattern);
    if (multipleTreeCounter == null)
        multipleTreeCounter = '';
    else
        multipleTreeCounter = multipleTreeCounter.toString();


    var id = document.getElementById('tree2' + multipleTreeCounter + '');
    if ($(Row).find('td')[0].innerHTML.trim() == "True")
        iParentId = iMasterId;
    var iLastMasterTreeId = $('#hndTreeMaster' + multipleTreeCounter + '').val();
    var length = $(id).find('ul').length;
    var liTag = $(id).find('ul');
    var tagli = $(id).find('li');
    var icon = $(tagli[0]).find('.indicator');

    //Strat Header Toggle
    //$(icon[0]).children().ch
    //$(icon[0])[0].cl('glyphicon-folder-close')
    if ($(icon[0]).hasClass('gplus icon-expand')) {
        $(icon[0]).addClass('gminus icon-collepse');
        $(icon[0]).removeClass('gplus icon-expand');
        //$(tagli[0]).children().children().toggleClass('glyphicon-minus-sign' + " " + 'glyphicon-plus-sign');

        //toggling not required already it is being handled ,this code creating issues by hiding childs
        // $(tagli[0]).children().children().toggle();
    }
    //End Header Toggle

    if (parseInt(iLastMasterTreeId) == parseInt(iMasterId)) {
        return false;
    }
    //start Remove Last Color if Exist
    if (parseInt(iLastMasterTreeId) > 0) {
        for (var i = 0; i < length; i++) {
            if (parseInt(liTag[i].id) == parseInt(iLastMasterTreeId)) {
                //;
                tagli = $(liTag[i]).find('li');
                var taga = $(tagli[0]).find('a');
                $(taga[0]).removeClass('theme_color-inverse');
                //$('#hndTreeMaster').val(iMasterId);
                break;
            }
        }
    }
    //End Last Color

    //Start Change Color
    if (bool == 1) {
        for (var i = 0; i < length; i++) {
            if (parseInt(liTag[i].id) == parseInt(iParentId)) {
                //;
                // tagli = $(liTag[i]).find('li');
                var taga = $(liTag[i]).find('a');
                if ($('#tree2' + multipleTreeCounter + ' ul li').find('a').hasClass('theme_color-inverse') || $('#tree2' + multipleTreeCounter + ' li#0').find('a').hasClass('theme_color-inverse')) {
                    $('#tree2' + multipleTreeCounter + ' ul li').find('a.theme_color-inverse').removeClass('theme_color-inverse')
                    $('#tree2' + multipleTreeCounter + ' li#0').find('a.theme_color-inverse').removeClass('theme_color-inverse')
                }
                // $('$tree2 ul').find('li a').hasClass('theme_color-inverse')
                taga.length == '4' ? $(taga[1]).addClass('theme_color-inverse') : $(taga[0]).addClass('theme_color-inverse');
                $('#bIsFromRemoveMark' + multipleTreeCounter + '').val(true);
                $('#hndTreeMaster' + multipleTreeCounter + '').val(iMasterId);
                icon = $(tagli[i]).find('.indicator');

                if ($(icon[0]).hasClass('gplus icon-expand')) {
                    $(icon[0]).removeClass('gplus icon-expand');
                    $(icon[0]).addClass('gminus icon-collepse');
                    $(tagli[i]).children().children().toggle();
                }
                else {
                    $(icon[0]).removeClass('gminus icon-collepse');
                    $(icon[0]).addClass('gplus icon-expand');
                }
                //icon[0].toggleClass(openedClass + " " + closedClass);
                break;
            }
        }
    }
    else {
        tagli = $(liTag[i]).find('li');
        var taga = $(tagli[0]).find('a');
        $(taga[0]).addClass('theme_color-inverse');
        $('#bIsFromRemoveMark' + multipleTreeCounter + '').val(true);
        $('#hndTreeMaster' + multipleTreeCounter + '').val(iLastMasterTreeId);
    }

    //End Change Color

    //Grid Filter
    GetGridDataOnClick(iMasterId, true, nodeName, $('#tree2' + multipleTreeCounter + ' li#' + iMasterId + '').find('a')[0],undefined,undefined,undefined,false);
    //   $('#ihndtoggle' + multipleTreeCounter + '').val(1);
    //   CheckAccorderanClick(multipleTreeCounter);
    // $("#CheckAccorderanClick").trigger("click");
    //

}

function CheckIsItTreeTab(element, multipleTreeCounter) {
    var EntryScreenEle = document.getElementById('GenerateNewMasterModel');
    if (EntryScreenEle == null || EntryScreenEle == undefined) {
        return false;
    }
    var ulTabs = document.getElementsByClassName('ulForTabs');//get base element
    var bgReport = (($('#MasterRetrieval_IsReport').val() == "False" || $('#MasterRetrieval_IsReport').val() == undefined) && IsPartialView == 'False') ? false : true;
    if (ulTabs != null && ulTabs != undefined && bgReport == false && EntryScreenEle != null && EntryScreenEle != undefined) {

        //$($(ulTabs).find('.active')[1]).attr('data-content')
        var datacontent = '';
        var anchorTagName = '';
        var masterTypeid = '';
        var LiElements = $(ulTabs).find('.active');
        if (LiElements != null && LiElements != undefined && LiElements.length > 0) {
            for (var i = 0; i < LiElements.length; i++) {
                datacontent = $(LiElements[i]).attr('data-content');
                if (datacontent != null && datacontent != undefined && datacontent.toLowerCase() == "haslandinggrid") {
                    anchorTagName = $($(LiElements[i]).children()[0]).attr('href');
                    masterTypeid = $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
                    if (masterTypeid > 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }

            }
        }
        //var datacontent = $(ulTabs).find('.active').attr('data-content');//get the active tree tab
        //var anchorTagName = $(($(ulTabs).find('.active')).children()[0]).attr('href');//get the tagname to get current div and related ids
        //var masterTypeid = $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
        //var counter = 0;
        //if (anchorTagName.length > 0) {
        //    counter = anchorTagName.substring(anchorTagName.length - 1, anchorTagName.length);
        //}
        //if (datacontent.toLowerCase() == "haslandinggrid" && masterTypeid > 0) {

        //    return true;

        //}
    }
    return false;
}

function GetActiveTreeTab(element, multipleTreeCounter) {
    var EntryScreenEle = document.getElementById('GenerateNewMasterModel');
    if (EntryScreenEle == null || EntryScreenEle == undefined) {
        return '';
    }
    var ulTabs = document.getElementsByClassName('ulForTabs');//get base element
    var bgReport = (($('#MasterRetrieval_IsReport').val() == "False" || $('#MasterRetrieval_IsReport').val() == undefined) && IsPartialView == 'False') ? false : true;
    if (ulTabs != null && ulTabs != undefined && bgReport == false && EntryScreenEle != null && EntryScreenEle != undefined) {

        //$($(ulTabs).find('.active')[1]).attr('data-content')
        var datacontent = '';
        var anchorTagName = '';
        var masterTypeid = '';
        var LiElements = $(ulTabs).find('.active');
        if (LiElements != null && LiElements != undefined && LiElements.length > 0) {
            for (var i = 0; i < LiElements.length; i++) {
                datacontent = $(LiElements[i]).attr('data-content');
                if (datacontent != null && datacontent != undefined && datacontent.toLowerCase() == "haslandinggrid") {
                    anchorTagName = $($(LiElements[i]).children()[0]).attr('href');
                    return anchorTagName;
                }

            }
        }
    }
    return '';
}

function GetActiveTreeTabMasterTypeId() {
    var EntryScreenEle = document.getElementById('GenerateNewMasterModel');
    if (EntryScreenEle == null || EntryScreenEle == undefined) {
        return '';
    }
    var ulTabs = document.getElementsByClassName('ulForTabs');//get base element
    var bgReport = (($('#MasterRetrieval_IsReport').val() == "False" || $('#MasterRetrieval_IsReport').val() == undefined) && IsPartialView == 'False') ? false : true;
    if (ulTabs != null && ulTabs != undefined && bgReport == false && EntryScreenEle != null && EntryScreenEle != undefined) {

        //$($(ulTabs).find('.active')[1]).attr('data-content')
        var datacontent = '';
        var anchorTagName = '';
        var masterTypeid = '';
        var LiElements = $(ulTabs).find('.active');
        if (LiElements != null && LiElements != undefined && LiElements.length > 0) {
            for (var i = 0; i < LiElements.length; i++) {
                datacontent = $(LiElements[i]).attr('data-content');
                if (datacontent != null && datacontent != undefined && datacontent.toLowerCase() == "haslandinggrid") {
                    anchorTagName = $($(LiElements[i]).children()[0]).attr('href');
                    return $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
                }

            }
        }
    }
    return '';
}

function InsertUpdateCheckedIdsTreeTab(iMasterId, IsPush) {
    var ulTabs = document.getElementsByClassName('ulForTabs');//get base element
    var TreeSavedMasterIds = [];
    if (ulTabs != null && ulTabs != undefined) {


        var datacontent = '';
        var anchorTagName = '';
        var masterTypeid = '';
        var LiElements = $(ulTabs).find('.active');
        if (LiElements != null && LiElements != undefined && LiElements.length > 0) {
            for (var i = 0; i < LiElements.length; i++) {
                datacontent = $(LiElements[i]).attr('data-content');
                if (datacontent != null && datacontent != undefined && datacontent.toLowerCase() == "haslandinggrid") {
                    anchorTagName = $($(LiElements[i]).children()[0]).attr('href');
                    masterTypeid = $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
                    if (masterTypeid > 0) {

                        var TreeTabData = m_arrTreeTabsIds.filter(x=>x.ID == anchorTagName);
                        if (TreeTabData.length == 0) {
                            var TreeTab = { ID: '', Name: '', Tag: [] };
                            var pushedids = [];
                            TreeTab.ID = anchorTagName;
                            if (IsPush) {
                                pushedids.push(iMasterId);
                                TreeTab.Tag = pushedids;
                                m_arrTreeTabsIds.push(TreeTab);
                            }
                        }
                        else {
                            for (var k = 0; k < m_arrTreeTabsIds.length; k++) {
                                if (m_arrTreeTabsIds[k].ID == anchorTagName) {
                                    if (IsPush && m_arrTreeTabsIds[k].Tag.filter(x=>x == iMasterId).length == 0)
                                        m_arrTreeTabsIds[k].Tag.push(iMasterId);
                                    else if (IsPush == false && m_arrTreeTabsIds[k].Tag.filter(x=>x == iMasterId).length > 0)
                                        m_arrTreeTabsIds[k].Tag.splice(m_arrTreeTabsIds[k].Tag.indexOf(iMasterId), 1);
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        }
        //var datacontent = $(ulTabs).find('.active').attr('data-content');//get the active tree tab
        //var anchorTagName = $(($(ulTabs).find('.active')).children()[0]).attr('href');//get the tagname to get current div and related ids
        //var masterTypeid = $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
        //var counter = 0;
        //if (anchorTagName.length > 0) {
        //    counter = anchorTagName.substring(anchorTagName.length - 1, anchorTagName.length);
        //}
        //if (datacontent.toLowerCase() == "haslandinggrid" && masterTypeid > 0) {
        //    for (var i = 0; i < m_arrTreeTabsIds.length; i++) {
        //        if (m_arrTreeTabsIds[i].ID == anchorTagName) {
        //            if (IsPush)
        //                m_arrTreeTabsIds[i].Tag.push(iMasterId);
        //            else
        //                m_arrTreeTabsIds[i].Tag.pop(iMasterId);
        //            break;
        //        }
        //    }
        //}
    }
}

function GetTreeTabCheckedMasterIds(treeTabName, masterTypeid) {
    var SavedMasterIDs = $('#hdncheckArray_' + masterTypeid).val().split(',');
    for (var i = 0; i < m_arrTreeTabsIds.length; i++) {
        if (m_arrTreeTabsIds[i].ID == treeTabName) {
            return Array.from(new Set(m_arrTreeTabsIds[i].Tag));
        }
    }
}

function RemoveMark() {
    var id = document.getElementById('tree2' + LandingReportDashletId);
    var iLastMasterTreeId = $('#hndTreeMaster' + LandingReportDashletId).val();
    var length = $(id).find('ul').length;
    var liTag = $(id).find('ul');
    for (var i = 0; i < length; i++) {
        if (parseInt(liTag[i].id) == parseInt(iLastMasterTreeId)) {
            //;
            tagli = $(liTag[i]).find('li');
            var taga = $(tagli[0]).find('a');
            // $(taga[0]).removeClass('theme_color-inverse');
            break;
        }
    }
}

function GetRowDataOfGrid(RowNo, eve, col, IsFromSearch) {
    debugger
    // IsFromSearch only used to differentiate method call,this indicate it is from searchdropdown
    if (IsFromSearch == undefined && eve != null) {
        RowNo = $(eve).closest('tr')[0].rowIndex - 1;
    }
    var id = null;
    if (IsTreeTabExists == "True" && $(eve) != null) {
        id = $(eve).closest('table');
    }
    else {
        if (IsFromDashlet) {
            LandingReportDashletId = GetActiveDashletId();
        }
        id = document.getElementById('landgridData' + LandingReportDashletId);
    }
    if (id == null) {
        return;
    }

    //var id = document.getElementById('landgridData');
    var p = $(id).find('tbody').find('tr')[RowNo].cells[col];
    var name = $($(id).find('tbody').find('tr')[RowNo]).find('td.tdName');
    if ($(id).attr('data-IsTreeTab') == "0") {
        gridSelectedRow = RowNo;
    }
    col++;

    if ($(id).find('tbody').find('tr').length == $(".chkRowCheck:checked").length) {
        $('#liSelectAllMasters' + LandingReportDashletId).prop('checked', true);
    }
    else {
        $('#liSelectAllMasters' + LandingReportDashletId + ',#selectAllMasters_').prop('checked', false);
    }
    var value = $(id).find('tbody').find('tr')[RowNo].cells[8].innerHTML.trim(); //$($(id).find('tbody').find('tr')[RowNo]).find('.ClsMaster')[0].innerHTML.trim();
    value = getEnglishDigits(value);
    var ProdctorAccont = $(id).find('tbody').find('tr')[RowNo].cells[9].innerHTML.trim();
    if (eve.checked) {
        $($(id).find('tbody').find('tr')[RowNo]).addClass('textRedColor');
        $(name).addClass('textBlackColor');

    } else {
        $($(id).find('tbody').find('tr')[RowNo]).removeClass('textRedColor');
        $(name).removeClass('textBlackColor');
        //if ($(id).find('tbody').find('tr')[RowNo].cells[0].innerHTML.trim() == "False") {
        //    SaveRowIdValues(parseInt(value), ProdctorAccont);
        //}
    }
    SaveRowIdValues(parseInt(value), ProdctorAccont, eve.checked);

    //@ added this to uncheck the select all checkbox if any of the checked row is unchecked
    if ($('#hndReportView' + DashletId).val() == "True" && eve.checked == false) {
        //debugger
        var iDashletId = DashletId;
        var sValue = '';
        if (iDashletId != null && iDashletId != undefined) {
            var chkboxEle = document.getElementById('selectAllMasters_' + iDashletId);
            if (chkboxEle != null && chkboxEle != undefined) {
                document.getElementById('selectAllMasters_' + iDashletId).checked = false;
                var sSelectAllText = '';
                sSelectAllText = chkboxEle.getAttribute('data-SelectAllText');
                var sReportType = chkboxEle.getAttribute('data-FocusReport');
                if (sReportType == 'MasterReport') {
                    var RITCombobox = document.getElementsByName("RITCombobox_" + DashletId)[0];
                    if (FCommon.UI.isValidObject(RITCombobox)) {
                        sValue = RITCombobox.options[RITCombobox.selectedIndex].innerHTML;
                    }
                }
                else {
                    sValue = sReportType;
                }
                if (document.getElementById("selectAllMasters_" + DashletId).nextElementSibling != null) {
                    document.getElementById("selectAllMasters_" + DashletId).nextElementSibling.nextElementSibling.textContent = sSelectAllText + " " + sValue;
                }
            }
        }
    }
    //ends

    // oncheck of checkbox highlighting the row

    $($($(id).find('tbody')).find('tr')).removeClass('FRowColor');
    MultipulMasterIds = [];
    IsMasterIdGroup = [];
    //$(event.target.parentElement).addClass('FRowColor');
    $($($($(id).find('tbody')).find('tr'))[RowNo]).addClass('FRowColor');

    if ($(id).attr('data-IsTreeTab') == "0") {
        document.getElementById('hndSelectedRowNo' + LandingReportDashletId).value = RowNo;

        var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId).value;
        var masterId = $($(id).find('tbody').find('tr')[RowNo]).find('td')[8].innerHTML.trim();
        masterId = getEnglishDigits(masterId);
        var IsGroup = $($(id).find('tbody').find('tr')[RowNo]).find('td')[0].innerHTML.trim();
        var isProdorAcc = $($(id).find('tbody').find('tr')[RowNo]).find('td')[9].innerHTML.trim();
        var iParentId = $($(id).find('tbody').find('tr')[RowNo]).find('td')[2].innerHTML.trim();
        if ($('#hndReportView' + LandingReportDashletId).val() == "False" && IsPartialView == 'False') {
            getDataForInfoPanel(masterTypeId, masterId);
        }
        SaveMultipuleMasterIds(masterId, IsGroup, isProdorAcc);
    }

    //// for selecting children in reports
    if (($(id).find('tbody').find('tr')[RowNo].cells[0].innerHTML.trim() == "True" && ($('#selectAllMasters_' + LandingReportDashletId).length > 0 || IsPartialView == "True")) || IsTreeTabExists == "True" || (DashletId != undefined && DashletId.length > 0)) {
        var idSuccess = null;
        if (IsTreeTabExists == "True" && $(id).find('tbody').find('tr')[RowNo].cells[0].innerHTML.trim() == "True") {
            idSuccess = getAllMasterChildrenForTreeTab(true, value); //list of master ids
        }
        else if ($(id).find('tbody').find('tr')[RowNo].cells[0].innerHTML.trim() == "True" && (($('#selectAllMasters_' + LandingReportDashletId).length > 0 || IsPartialView == "True") || (DashletId != undefined && DashletId.length > 0 && $('#selectAllMasters_' + DashletId).length > 0))) {
            idSuccess = getAllMasterChildren(true, value); //list of master ids
        }
        ////  
        // GridrowidValues.splice($.inArray(parseInt(value), GridrowidValues), 1);


        //for (var i = 0; i < idSuccess.length; i++) {
        //    if (parseInt(idSuccess[i]) != parseInt(value)) {
        //        SaveRowIdValues(parseInt(idSuccess[i]), "", eve.checked);
        //    }
        //}

        if (IsTreeTabExists == "True" && idSuccess != null) {
            if (eve.checked) {
                for (var ids = 0; ids < idSuccess.length; ids++) {
                    InsertUpdateCheckedIdsTreeTab(idSuccess[ids], true);
                }
            }
            else {
                for (var ids = 0; ids < idSuccess.length; ids++) {
                    InsertUpdateCheckedIdsTreeTab(idSuccess[ids], false);
                }

            }
        }
        else {
            //added this block replacing for-loop for speed optimizing ,in showing all the UI checkboxes checked based on masterids
            if ($('#hndReportView' + DashletId).val() == "True" || IsPartialView == 'True') {
                if (eve.checked) {
                    GridrowidValues = GridrowidValues.concat(idSuccess);
                    $("#GridSelectedIdValues").val(JSON.stringify(GridrowidValues));
                    if (IsFromDashlet) {
                        PushDashletMasterID(idSuccess);
                    }

                } else {

                    GridrowidValues = GridrowidValues.filter(function (x) {
                        return idSuccess.indexOf(x) < 0;
                    });
                    $("#GridSelectedIdValues").val(JSON.stringify(GridrowidValues));
                    if (IsFromDashlet && DashletMasterIds != null && DashletMasterIds.length > 0) {
                        PopDashletMasterID(idSuccess);
                    }

                }
            }
            else if (idSuccess != null) {
                for (var i = 0; i < idSuccess.length; i++) {
                    if (parseInt(idSuccess[i]) != parseInt(value)) {
                        SaveRowIdValues(parseInt(idSuccess[i]), "", eve.checked);
                    }
                }
            }
        }
    }
    if (IsTreeTabExists == "False" || IsTreeTabExists == "") {
        retainEditedMasterIds = GridrowidValues;
    }


}

function GetRowDataOfGridOnNonCheck(RowNo, eve, col) {

    var ActiveDashletId = '';
    if (IsFromDashlet) {
        ActiveDashletId = GetActiveDashletId();
    }
    var id = document.getElementById('landgridData' + ActiveDashletId);
    var p = $(id).find('tbody').find('tr')[RowNo].cells[col];
    var name = $($(id).find('tbody').find('tr')[RowNo]).find('td.tdName');
    col++;
    ////;
    if (eve) {
        $($(id).find('tbody').find('tr')[RowNo]).addClass('textRedColor');
        $(name).addClass('textBlackColor');
    } else {
        $($(id).find('tbody').find('tr')[RowNo]).removeClass('textRedColor');
        $(name).removeClass('textBlackColor');
    }
    var value = $(id).find('tbody').find('tr')[RowNo].cells[8].innerHTML.trim();
    value = getEnglishDigits(value);
    var ProdctorAccont = $(id).find('tbody').find('tr')[RowNo].cells[9].innerHTML.trim();

    SaveRowIdValues(parseInt(value), ProdctorAccont, eve);

    //commentted on 20/01/2020 ,as this is not required and every hit for childern retrieval is making it slow to show UI checkmarks
    //added this block to get children of selected group ,in case of reports ,this fires on gridherder select all--starts 
    //if ($('#hndReportView').val() == "True" || IsPartialView == 'True') {
    //    if ($('#selectAllMasters_').length > 0 && $("#selectAllMasters_").is(":checked") == false && $(id).find('tbody').find('tr')[RowNo].cells[0].innerHTML.trim() == "True") {
    //        var idSuccess = getAllMasterChildren(true, value); //list of master ids
    //        if (eve) {
    //            GridrowidValues = GridrowidValues.concat(idSuccess);
    //            $("#GridSelectedIdValues").val(JSON.stringify(GridrowidValues));
    //        } else {
    //            GridrowidValues = GridrowidValues.filter(function (x) {
    //                return idSuccess.indexOf(x) < 0;
    //            });
    //            $("#GridSelectedIdValues").val(JSON.stringify(GridrowidValues));

    //        }
    //        //ends
    //    }
    //    else {
    //        SaveRowIdValues(parseInt(value), ProdctorAccont, eve);
    //    }
    //}
    //else {
    //    SaveRowIdValues(parseInt(value), ProdctorAccont, eve);
    //}
}

function SaveBookMarkIdValues(value) {
    if ($.inArray(value, GridBookMarkedValues) < 0) {
        GridBookMarkedValues.push(value);
        $("#GridBookMarkedValues").val(JSON.stringify(GridBookMarkedValues));
    }
    else {
        GridBookMarkedValues.splice($.inArray(value, GridBookMarkedValues), 1);
        $("#GridBookMarkedValues").val(JSON.stringify(GridBookMarkedValues));
    };
}

function SaveRowIdValues(value, ProdctorAccont, bChecked) {
     debugger
    if (IsTreeTabExists == "True") {
        if (CheckIsItTreeTab()) {
            SaveIdsinTreeTab(bChecked, value);
        }
    }
    if ($.inArray(value, GridrowidValues) < 0) {
        if (bChecked) {
            GridrowidValues.push(value);
            if ($.inArray(value, UncheckedGridrowidValuesForReport) != -1)
                UncheckedGridrowidValuesForReport.splice($.inArray(value, UncheckedGridrowidValuesForReport), 1);
            AccountProductTypeIds.push(ProdctorAccont);
            if ($.inArray(value, GridrowidValuesForMovingRecords) < 0) {
                GridrowidValuesForMovingRecords.push(value);
                if (ProdctorAccont != undefined && ProdctorAccont != null && ProdctorAccont != '') {
                    AccountProductTypeIdsForMovingRecords.push(ProdctorAccont);
                }
            }
            if (IsFromDashlet) {
                PushDashletMasterID(parseInt(value));
            }
            //var bResult = CheckIsItTreeTab();
            //if (IsTreeTabExists == "True") {
            //    InsertUpdateCheckedIdsTreeTab(value, true);
            //}
        } else {
            if (ProdctorAccont != "")
                //if (IsTreeTabExists == "True") {
                //    InsertUpdateCheckedIdsTreeTab(value, false);
                //}
                UncheckedGridrowidValuesForReport.push(parseInt(value));
        }
        $("#GridSelectedIdValues").val(JSON.stringify(GridrowidValues));
        $("#AccountProductTypeIds").val(JSON.stringify(AccountProductTypeIds));
    }
    else {
        var index = GridrowidValues.indexOf(value);
        //var parentId = $($("#landgridData").find('tbody').find('tr')[0]).find("td")[2].innerHTML.trim();
        //var HasParentIndex = GridrowidValues.indexOf(parseInt(parentId));
        //if (HasParentIndex > -1) {
        //    GridrowidValues.splice($.inArray(parseInt(parentId), GridrowidValues), 1);
        //}
        if (!bChecked) {
            GridrowidValues.splice($.inArray(value, GridrowidValues), 1);
            GridrowidValuesForMovingRecords.splice($.inArray(value, GridrowidValuesForMovingRecords), 1);
            AccountProductTypeIds.splice($.inArray(index, AccountProductTypeIds), 1);
            AccountProductTypeIdsForMovingRecords.splice($.inArray(index, AccountProductTypeIds), 1);
            if (ProdctorAccont != "")
                UncheckedGridrowidValuesForReport.push(parseInt(value));
            if (IsFromDashlet) {
                PopDashletMasterID(value);
            }
            //var bResult = CheckIsItTreeTab();
            //if (IsTreeTabExists == "True") {
            //    InsertUpdateCheckedIdsTreeTab(value, false);
            //}


        }
        $("#GridSelectedIdValues").val(JSON.stringify(GridrowidValues));
        $("#AccountProductTypeIds").val(JSON.stringify(AccountProductTypeIds));
    };

    if (getAllMasterIdsAllPages.length > 0) {
        if ($.inArray(parseInt(value), getAllMasterIdsAllPages) < 0) {
            if (bChecked) {
                getAllMasterIdsAllPages.push(parseInt(value));
                //  UncheckedGridrowidValuesForReport.splice($.inArray(parseInt(value), UncheckedGridrowidValuesForReport), 1);
                $("#GridSelectedIdValues").val(JSON.stringify(getAllMasterIdsAllPages));
                AccountProductTypeIds.push(ProdctorAccont);
                $("#AccountProductTypeIds").val(JSON.stringify(getAllMasterIdsAllPages));
            }
        }
        else {
            var index = getAllMasterIdsAllPages.indexOf(parseInt(value));
            //var parentId = $($("#landgridData").find('tbody').find('tr')[0]).find("td")[2].innerHTML.trim();
            //var HasParentIndex = getAllMasterIdsAllPages.indexOf(parseInt(parentId));
            //if (HasParentIndex > -1) {
            //    getAllMasterIdsAllPages.splice($.inArray(parseInt(parentId), getAllMasterIdsAllPages), 1);
            //}
            if (!bChecked) {
                getAllMasterIdsAllPages.splice($.inArray(parseInt(value), getAllMasterIdsAllPages), 1);
                //     UncheckedGridrowidValuesForReport.push(parseInt(value));
            }
            $("#GridSelectedIdValues").val(JSON.stringify(getAllMasterIdsAllPages));
            if (!bChecked) {
                AccountProductTypeIds.splice($.inArray(index, AccountProductTypeIds), 1);
            }
            $("#AccountProductTypeIds").val(JSON.stringify(AccountProductTypeIds));
        };
    }
}

function PopDashletMasterID(value) {
    debugger
    if (typeof (value) == 'object') {
        if (IsFromDashlet && DashletMasterIds != null && DashletMasterIds.length > 0) {
            if (DashletMasterIds.filter(x=>x.ID == LandingReportDashletId).length > 0) {
                var Idtag = DashletMasterIds.filter(x=>x.ID == LandingReportDashletId)[0];
                if (Idtag != null && Idtag.Tag != null && Idtag.Tag.length > 0) {
                    if (value.length == 0) {
                        Idtag.Tag = [];
                    }
                    else {
                        Idtag.Tag = Idtag.Tag.filter(function (x) {
                            return value.indexOf(x) < 0;
                        });
                    }
                }
            }
        }

    }
    else {
        if (IsFromDashlet && DashletMasterIds != null && DashletMasterIds.length > 0) {
            if (DashletMasterIds.filter(x=>x.ID == LandingReportDashletId).length > 0) {
                var Idtag = DashletMasterIds.filter(x=>x.ID == LandingReportDashletId)[0];
                if (Idtag != null && Idtag.Tag != null && Idtag.Tag.length > 0) {
                    if (Idtag.Tag.indexOf(parseInt(value)) > 0) {
                        Idtag.Tag.splice(parseInt(value), 1);
                    }
                }
            }
        }
    }

}


function PushDashletMasterID(value) {
    debugger
    if (typeof (value) == 'object') {
        if (IsFromDashlet && DashletMasterIds != null && DashletMasterIds.length > 0) {
            if (DashletMasterIds.filter(x=>x.ID == LandingReportDashletId).length > 0) {
                var Idtag = DashletMasterIds.filter(x=>x.ID == LandingReportDashletId)[0];
                if (Idtag != null && Idtag.Tag != null) {
                    Idtag.Tag = Idtag.Tag.concat(value);
                }
            }
        }

    }
    else {
        if (IsFromDashlet && DashletMasterIds != null && DashletMasterIds.length > 0) {
            if (DashletMasterIds.filter(x=>x.ID == LandingReportDashletId).length > 0) {
                var Idtag = DashletMasterIds.filter(x=>x.ID == LandingReportDashletId)[0];
                if (Idtag != null && Idtag.Tag != null) {
                    if (Idtag.Tag.indexOf(parseInt(value)) < 0) {
                        Idtag.Tag.push(parseInt(value));
                    }
                }
            }
        }
    }

}


function SaveIdsinTreeTab(bChecked, value) {
    if (IsTreeTabExists == "True") {
        if (bChecked)
            InsertUpdateCheckedIdsTreeTab(value, true);
        else
            InsertUpdateCheckedIdsTreeTab(value, false);
    }
}

function SaveAccountProductTypeIds(value) {
    if ($.inArray(value, AccountProductTypeIds) < 0) {
        AccountProductTypeIds.push(value);
        $("#AccountProductTypeIds").val(JSON.stringify(AccountProductTypeIds));
    }
    else {
        AccountProductTypeIds.splice($.inArray(ProdctorAccont, AccountProductTypeIds), 1);
        $("#AccountProductTypeIds").val(JSON.stringify(AccountProductTypeIds));
    };
}
//Grid related Script End


//General Grid Scripts Start
function GetColorChangeForHeaderOnMoseOverEvent(col) {
    var id = document.getElementById('landgridData');
    var p = $(id).find('tr').find('th')[0].cells[col];
}

function GetBookmark(row, cell, img) {
    var id = document.getElementById('landgridData');
    var rows = $(id).find('tbody').find('tr');
    var p = rows[row].cells[cell];
    var preselectedrow = document.getElementById('hndSelectedRowNo').value;
    $(rows[preselectedrow]).removeClass('FRowColor');
    //;
    var tag = $(p).find('a');
    var value = 0;
    bBookMarkedOrder = false;
    if (img == 'star') {
        var d = GridBookMarkedValues;
        $($(tag)[0]).addClass('hidden');
        $($(tag)[1]).removeClass('hidden');
        value = $(rows[row]).find('td')[8].innerHTML.trim();
        value = getEnglishDigits(value);
        SaveBookMarkIdValues(row + ";" + value);
    } else {
        $($(tag)[1]).addClass('hidden')
        $($(tag)[0]).removeClass('hidden')
        value = $(rows[row]).find('td')[8].innerHTML.trim();
        value = getEnglishDigits(value);
        SaveBookMarkIdValues(row + ";" + value);
    }
    document.getElementById('hndSelectedRowNo').value = row;
    $(rows[row]).addClass('FRowColor');
}

function OnFromRightclick() {
    try {
        $('table tr th').bind("contextmenu", function (e) {
            $('#custom-menu').show(100);
            $("#custom-menu").offset({ left: e.pageX, top: e.pageY });
            e.preventDefault();
        });
        $(document).mouseup(function (e) {
            var container = $("#custom-menu");
            if (container.has(e.target).length == 0) {
                container.hide();
            }
        });
    }
    catch (err) {
        COMMON.prototype.showMessage(err);
    }
}

function GetKeyPress(key, that) {
    ////  
    var originallySelectedRow;
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    originallySelectedRow = SelectedRowNo;
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    SelectedRowNo++;
    var name = $(Row).find('td.tdName');
    var p = $(Row).find('td')[7];
    var nextRow = $(Row).closest('tr').next();
    if ((name == undefined || Row == undefined) || (p == undefined || nextRow == undefined))
        return false;
    //$($(p).find('input')).attr('checked', 'checked') 
    if ($(p).find('input').is(":checked")) {
        $(p).find('input').prop('checked', false)
        $(Row).removeClass('textRedColor');
        $(name).removeClass('textBlackColor');
    }
    else {
        $(p).find('input').prop('checked', true)
        $(Row).addClass('textRedColor');
        $(name).addClass('textBlackColor');
    }
    if ($(id).find('tbody').find('tr').length == $(".chkRowCheck:checked").length) {
        $('#liSelectAllMasters').prop('checked', true);
    }
    else {
        $('#liSelectAllMasters,#selectAllMasters_').prop('checked', false);
    }
    nextRow.focus();
    var value = $(Row).find('td')[8].innerHTML.trim();
    value = getEnglishDigits(value);
    var ProdctorAccont = $(Row).find('td')[9].innerHTML.trim();
    SaveRowIdValues(parseInt(value), ProdctorAccont, $(p).find('input').is(":checked"));
    if ($($(id).find('tbody')).find('tr').length != SelectedRowNo) {
        $(Row).removeClass('FRowColor');
    }
    else {
        SelectedRowNo--;
    }
    document.getElementById('hndSelectedRowNo').value = SelectedRowNo;
    Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    $(Row).addClass('FRowColor');
    gridSelectedRow = SelectedRowNo;
    if (GridrowidValues.length > 0) {
        retainEditedMasterIds = GridrowidValues;
    }
    if ($(id).find('tbody').find('tr')[originallySelectedRow].cells[0].innerHTML.trim() == "True" && $("#selectAllMasters_").length > 0) {
        var idSuccess = getAllMasterChildren(true, value);
        //
        // GridrowidValues.splice($.inArray(parseInt(value), GridrowidValues), 1);
        for (var i = 0; i < idSuccess.length; i++) {
            if (parseInt(idSuccess[i]) != parseInt(value)) {
                SaveRowIdValues(parseInt(idSuccess[i]), "", $(p).find('input').is(":checked"));
            }
        }
    }
    scrollIntoView($(Row), "#divgridpartial");
}

function gotoNext() {
    var $tbody = $("#LandingGridBody");
    var $next = $tbody.find('.FRowColor').next();
    GridRowhighlight($next);
}

function gotoPrevious() {
    var $tbody = $("#LandingGridBody");
    var $prev = $tbody.find('.FRowColor').prev();
    GridRowhighlight($prev);
}
function GridRowhighlight($row) {
    var $tbody = $("#LandingGridBody" + DashletId);
    if ($row.length) {
        $tbody.children().removeClass("FRowColor");
        $row.addClass('FRowColor');
        $("#hndSelectedRowNo" + DashletId).val($row[0].rowIndex);
        scrollIntoView($row, "#divgridpartial" + DashletId);
    }
}

function scrollIntoView(element, container, bcomboBlur) {
    //
    if (bcomboBlur == undefined)
        bcomboBlur = false;
    var containerTop = $(container).scrollTop();
    var containerBottom = containerTop + $(container).height();
    var elemTop = element[0].offsetTop;
    var elemBottom = elemTop + $(element).height();
    if (elemTop < containerTop) {
        $(container).scrollTop(elemTop);
    } else if (elemBottom > containerBottom) {
        if (!bcomboBlur) {
            $(container).scrollTop(elemBottom - $(container).height());
        }
        else {
            $(container).scrollTop(elemBottom - $(container).height() + 50);
        }
    }
}

function HighLightUpDownKey(key, element) {
    //
    var rowNo = document.getElementById('hndSelectedRowNo' + DashletId).value;
    var landingid = "#LandingGridBody" + DashletId;

    if (key == 38 && rowNo != "0") {
        gotoPrevious()
    }
    else if (key == 40) {
        gotoNext()
    }
}

function SaveMultipuleMasterIds(value, IsGroup, isProdorAcc) {
      ////
    if ($.inArray(value, MultipulMasterIds) < 0) {
        MultipulMasterIds.push(value);
        $("#MultipulMasterIds").val(JSON.stringify(MultipulMasterIds));

        IsMasterIdGroup.push(IsGroup);
        $("#IsMasterIdGroup").val(JSON.stringify(IsMasterIdGroup));

        MultipulAccorProdIds.push(isProdorAcc);
        $("#MultipulAccorProdIds").val(JSON.stringify(MultipulAccorProdIds));
    }
    else {
        MultipulMasterIds.splice($.inArray(value, MultipulMasterIds), 1);
        $("#MultipulMasterIds").val(JSON.stringify(MultipulMasterIds));

        IsMasterIdGroup.splice($.inArray(IsGroup, IsMasterIdGroup), 1);
        $("#IsMasterIdGroup").val(JSON.stringify(IsMasterIdGroup));

        MultipulAccorProdIds.splice($.inArray(isProdorAcc, MultipulAccorProdIds), 1);
        $("#MultipulAccorProdIds").val(JSON.stringify(MultipulAccorProdIds));
    };
}

function getDataForInfoPanel(masterTypeId, masterId, bLandingGridBodyClickFn) {
        // ////debugger
    if (!bLandingGridBodyClickFn) {
        COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
    }
    var childCount = $("#divInfoPanel").children().length;
    if (childCount > 0) {

        var InfoPanelResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetInfoPanelSidebarData", "InfoPanel", "Masters"), true, { iMasterTypeId: masterTypeId, iMasterId: masterId }, "HTML", false);
        if (InfoPanelResult.lValue == 1) {
            $("#infoPanelSidebarDiv").html('');
            $("#infoPanelSidebarDiv").html(InfoPanelResult.data);
            AuthInfoPagination.SetLabelBasedOnAuthInfoPanelStatus();
            COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
        }
        else {
            COMMON.prototype.showMessage(InfoPanelResult.data);
        }
        //$.ajax({
        //    url: GLOBAL.getContextPath("", "", ""),// "/Focus8w/Masters/InfoPanel/GetInfoPanelSidebarData",
        //    type: "GET",
        //    data: { iMasterTypeId: masterTypeId, iMasterId: masterId },
        //    datatype: "json",
        //    async:false,
        //    success: function (data) {

        //    },
        //    error: function () {
        //        alert("Error cought!");
        //    }
        //});
    }
}

// For comboBox blur, changed GridrowidValues.length value from 1 to 0
function GetSelectedDataOfGrid() {
    if (IsTreeTabExists == "True") {
        var ActiveTreeTab = GetActiveTreeTab();
        if (ActiveTreeTab != null && ActiveTreeTab != undefined && ActiveTreeTab.length > 0 && m_arrTreeTabsIds != null && m_arrTreeTabsIds.length > 0) {

            var TreeTabData = m_arrTreeTabsIds.filter(x=>x.ID == ActiveTreeTab);
            //var id = $(document.getElementById(ActiveTreeTab)).find('#landgridData');
            if (TreeTabData != null && TreeTabData != undefined && TreeTabData.length > 0) {
                SetTreeTabData(ActiveTreeTab.replace('#newMasterDiv', ''), TreeTabData[0].Tag);
            }
            else {
                SetGridRowSelection();
            }
        }
        else {
            SetGridRowSelection();
        }
    }
    else {
        SetGridRowSelection();
    }
}
function SetGridRowSelection() {
    debugger
    if (IsFromDashlet) {
        if (LandingReportDashletId == '') {
            LandingReportDashletId = GetActiveDashletId();
        }
        //LandingReportDashletId = GetActiveDashletId();
        $($("#landgridData" + LandingReportDashletId).closest(".chkRowCheck")).prop("checked", false);
    }
    else {
        $(".chkRowCheck").prop("checked", false);
    }
    var id = document.getElementById('landgridData' + LandingReportDashletId);
    var row = $(id).find('tbody').find('tr');
    if (IsFromDashlet && DashletMasterIds != null && DashletMasterIds.length > 0) {
        if (DashletMasterIds.filter(x=>x.ID == LandingReportDashletId).length > 0) {
            var Idtag = DashletMasterIds.filter(x=>x.ID == LandingReportDashletId)[0];
            if (Idtag.Tag.length > 0 && row[0].cells.length > 1) {
                for (var i = 0; i < row.length; i++) {
                    var masterid = row[i].cells[8].innerHTML.trim();
                    if (Idtag.Tag.indexOf(parseInt(masterid)) > -1) {
                        var p = row[i].cells[7];
                        $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).prop("checked", true);
                        $(row[i]).addClass('textRedColor');
                        var name = $(row[i]).find('td.tdName');
                        $(name).addClass('textBlackColor');
                    }
                }
            }
            //  DashletMasterIds = [];
        }
    }
    else {

        if (GridrowidValues.length > 0 && row[0].cells.length > 1) {
            for (var i = 0; i < row.length; i++) {
                var masterid = row[i].cells[8].innerHTML.trim();
                if (GridrowidValues.indexOf(parseInt(masterid)) > -1) {
                    var p = row[i].cells[7];
                    $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).prop("checked", true);
                    $(row[i]).addClass('textRedColor');
                    var name = $(row[i]).find('td.tdName');
                    $(name).addClass('textBlackColor');
                }
            }
        }
    }

}
//General Grid Scripts End
//this sets/show checkmark the saved ids of treetab control of masterentry
//tble indicates which tree tab ,it is based on html rendering index
function SetTreeTabData(tble, TreeSavedMasterIds) {
    try {
        var counter = tble;
        var rows = $('#newMasterDiv' + counter).find("#LandingGridBody tr");
        if (rows != null && rows.length > 0 && TreeSavedMasterIds.length > 0) {
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (TreeSavedMasterIds.length > 0 && row.cells.length > 1) {
                    var masterid = row.cells[8].innerHTML.trim();
                    if (TreeSavedMasterIds.indexOf(parseInt(masterid)) > -1) {
                        var p = row.cells[7];
                        $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).prop("checked", true);
                        $(row).addClass('textRedColor');
                        var name = $(row).find('td.tdName');
                        $(name).addClass('textBlackColor');
                    }

                }

            }
        }
    } catch (ex) {
        COMMON.prototype.showMessage(ex.message);
    }
}

function CheckGridRows(masterids) {
    try {
        debugger
        var CurrentDashletId = GetActiveDashletId();
        var gridPartial = document.getElementById('landgridData' + CurrentDashletId);
        if (GridrowidValues != null && gridPartial != null && gridPartial != undefined && masterids != null && masterids != undefined && masterids.length > 0) {
            GridrowidValues = masterids;
            if (IsFromDashlet) {
                var Idtag = { ID: CurrentDashletId, Tag: masterids };
                if (DashletMasterIds != null && DashletMasterIds.length > 0) {
                    if (DashletMasterIds.filter(x=>x.ID == CurrentDashletId).length > 0) {


                        var Index = DashletMasterIds.findIndex(x=>x.ID == CurrentDashletId);
                        DashletMasterIds.splice(Index, 1);
                    }
                }
                DashletMasterIds.push(Idtag);
            }
            GetSelectedDataOfGrid();
        }

    } catch (error) {
        COMMON.prototype.showMessage(error.message);
    }
}

//Main View Other Funcinalitys Start
function GetSplittedGridBookMarkedValues() {
    var arrRow = [];
    var arrMasterGridId = [];
    var strValue = "";
    for (i = 0; i < GridBookMarkedValues.length; i++) {
        strValue = GridBookMarkedValues[i];
        arrRow.push(strValue.split(';')[0]);
        arrMasterGridId.push(strValue.split(';')[1]);
    }
    return { arrRow: arrRow, arrMasterGridId: arrMasterGridId };
}
function GetGridBookMarkedValuesDataInOrder() {
    ////;
    var values = GetSplittedGridBookMarkedValues();
    var arryaordered = [];
    var arrlength = values.arrRow.length;
    for (var i = 0; i < arrlength; i++) {
        var MinNo = Math.min.apply(Math, values.arrRow);
        var index = values.arrRow.indexOf(MinNo.toString());
        arryaordered.push(values.arrRow[index] + ';' + values.arrMasterGridId[index])
        values.arrRow.splice(index.toString(), 1);
        values.arrMasterGridId.splice(index.toString(), 1);
    }
    bBookMarkedOrder = true;
    GridBookMarkedValues = arryaordered;
}
function GetNextBookmark(snext) {
    if (bBookMarkedOrder == false)
        GetGridBookMarkedValuesDataInOrder();
    var SelectedRowNo = document.getElementById('hndSelectedRowNo' + DashletId).value;
    //var row = SelectedRowNo;
    var id = document.getElementById('landgridData');
    var tag = "";
    if (SelectedRowNo != "" && SelectedRowNo != -1) {
        if (SelectedRowNo != 49) {
            tag = $($(id).find('tbody')).find('tr')[SelectedRowNo];
            $(tag).removeClass('FRowColor');
            //row = SelectedRowNo + 1;
        } else {
            tag = $($(id).find('tbody')).find('tr')[SelectedRowNo];
            $(tag).removeClass('FRowColor');
        }
    }
    var arrRow = [];
    var arrMasterGridId = [];
    var values = GetSplittedGridBookMarkedValues();
    arrRow = values.arrRow;
    arrMasterGridId = values.arrMasterGridId;
    var index = -1;
    tag = $($(id).find('tbody')).find('tr')
    var nextrow = -1;
    if (snext) {
        nextrow = nextrow = parseInt(SelectedRowNo) + 1
        for (var i = nextrow; i < parseInt(tag.length) + 1; i++) {
            index = arrRow.indexOf(i.toString());
            if (index > -1) {
                break;
            }
        }
    } else {
        nextrow = nextrow = parseInt(SelectedRowNo) - 1
        for (var i = nextrow; i >= 0; i--) {
            index = arrRow.indexOf(i.toString());
            if (index > -1) {
                break;
            }
        }
    }
    var RowIndexofGrid = -1;
    if (index == -1) {
        RowIndexofGrid = parseInt(SelectedRowNo);
    } else {
        RowIndexofGrid = arrRow[index];
    }

    tag = $($(id).find('tbody')).find('tr')[RowIndexofGrid];
    $(tag).addClass('FRowColor');
    document.getElementById('hndSelectedRowNo' + DashletId).value = RowIndexofGrid;

}
function GetIndecofarray(indexvalue, array) {
    return index = array.indexOf(indexvalue.toString());
}
function GetPreviesBookmark() {
    var SelectedRowNo = document.getElementById('hndSelectedRowNo' + DashletId).value;
    var index = GridBookMarkedValues.indexOf(value);
}
function OnLoadOpenMenuTreeDefalt() {
    var id = document.getElementById('tree2');
    var tagli = $($(id).find('ul')[0]).find('li');
    var icon = $(tagli[0]).find('img');

    if ($(icon[0]).find('.gminus icon-collepse')) {
        $(icon[0]).removeClass('gminus icon-collepse');
        $(icon[0]).addClass('gplus icon-expand');
    } else {
        $(icon[0]).removeClass('gplus icon-expand');
        $(icon[0]).addClass('gminus icon-collepse');
    }
    $('#hndTreeMaster').val(0);
    $(tagli[0]).children().children().toggle();
}
//Main View Other Funcinalitys End


/* Paging related Script Start */
function Paging(bool, pageno, report) {
    //;
    $.ajax({
        url: GLOBAL.getContextPath("Pagination", "Landing", "Landing"),// '/Focus8W/Landing/Landing/Pagination',
        type: 'POST',
        data: JSON.stringify({ Resize: bool, GridCurrentPageNo: pageno, Report: report }),
        contentType: "application/json; charset=utf-8",
        async: false,
        success: function (data) {
            //;
            if (IsTreeTabExists == "True") {
                var ActiveTreeTab = GetActiveTreeTab();
                if (ActiveTreeTab != undefined && ActiveTreeTab != null && ActiveTreeTab.length > 0) {
                    ActiveTreeTab = ActiveTreeTab.replace('#', '');
                    var id = $(document.getElementById(ActiveTreeTab)).find('#divPagination');
                    var pageContainer = id;
                    pageContainer.html(data);
                }
                else {
                    var pageContainer = $('#divPagination' + LandingReportDashletId);
                    pageContainer.html(data);
                    $("#hndSelectedRowNo").attr('id', "hndSelectedRowNo" + LandingReportDashletId);
                    $("#hndCurrentPageNo").attr('id', "hndCurrentPageNo" + LandingReportDashletId);
                    $("#hdnTotalNumberOfPages").attr('id', "hdnTotalNumberOfPages" + LandingReportDashletId);
                }
            }
            else {
                var pageContainer = $('#divPagination' + LandingReportDashletId);
                pageContainer.html(data);
                $("#hndSelectedRowNo").attr('id', "hndSelectedRowNo" + LandingReportDashletId);
                $("#hndCurrentPageNo").attr('id', "hndCurrentPageNo" + LandingReportDashletId);
                $("#hdnTotalNumberOfPages").attr('id', "hdnTotalNumberOfPages" + LandingReportDashletId);
            }
        }
    });
}

function GotoSelectedPage(pageno, menuid, url, rptView, bChangeSequence, bCMBUserTypeMasterBlur, IsLoad) {
debugger
    var activeDashlet = '';
    if (IsFromDashlet) {
        activeDashlet = GetActiveDashletId();
    }
    IsLoad = (IsLoad == undefined) ? true : IsLoad;
    //;
    bChangeSequence == undefined ? false : bChangeSequence;
    bCMBUserTypeMasterBlur == undefined ? false : bCMBUserTypeMasterBlur;
    var multipleTreeCounter = "";
    if ($("#divEntryScreenTree").length > 0) {
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var secondSubDiv = $(tabId).find('.clsdivSecondsub').attr("id");
        var numberPattern = /\d+/g;
        multipleTreeCounter = $("#" + secondSubDiv)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();

    }

    if (rptView == undefined)
        rptView = $('#hndReportView').val();
    var isReport = (rptView == "True" || IsPartialView == 'True') ? true : false;
    var bool = false;
    if ((url == null || url == "") || url == undefined)
        if ($('#chkResizeGrid' + activeDashlet).is(":checked")) {
            bool = true;
        }

    if (menuid == 0)
        menuid = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + activeDashlet).value;
    //var url = '@Url.Action("GridPartial", "Landing")';
    var iMasterId = 0;
    if (multipleTreeCounter != null && multipleTreeCounter != '') {
        iMasterId = $('#hndTreeMaster' + activeDashlet + multipleTreeCounter).val();
    }
    else {
        iMasterId = $('#hndTreeMaster' + activeDashlet).val();
    }

    var iTreeId = document.getElementById('iTreeId' + activeDashlet).value;
    if (iTreeId == "") {
        iTreeId = "0";
    }
    var Searcharry = document.getElementById('hndSearchOn' + activeDashlet).value.trim();
    if (Searcharry == "" || Searcharry == null) {
        Searcharry = "sName,sCode";
    }
    var SearchText = bCMBUserTypeMasterBlur == true ? "" : document.getElementById('txtsrch-term' + activeDashlet + multipleTreeCounter + '').value;
    GLOBAL.LoadingStart();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            GridCurrentPageNo: pageno, GridRecordSize: 50, m_iMasterTypeId: menuid, Resize: bool, iMasterid: iMasterId, TreeId: iTreeId,
            IsReport: isReport, bChangeSequence: bChangeSequence, Searcharry: Searcharry, SearchText: SearchText, IsLoad: IsLoad
        }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            // debugger
            var tableContainer = $('#divgridpartial' + activeDashlet + multipleTreeCounter);
            var SelectAllChecked = $('#selectAllMasters_' + activeDashlet).length > 0 ? $('#selectAllMasters_' + activeDashlet).is(":checked") ? true : false : false;
            tableContainer.html("");
            tableContainer.html(data);
            //if (SelectAllChecked == true && $('#chkRetainSelection').is(":checked")) {
            //    var $this = $('#liSelectAllMasters'); $('#liSelectAllMasters').attr('checked', true);
            //    var url = GLOBAL.getContextPath("SelectAllMasters", "Landing", "Landing");
            //    CheckAllCheckboxinGrid($this, url);
            //}
            if (CheckIsItTreeTab() == false || isReport == false)
                document.getElementById('hndSelectedRowNo' + activeDashlet).value = -1;
            //$.material.init();
            if ($('#chkRetainSelection' + activeDashlet).is(":checked") || IsTreeTabExists == "True") {
                GetSelectedDataOfGrid();
            }
            else {
                GridrowidValues = [];
            }
            if ($('#chkCheckAll' + activeDashlet) != null) {
                if ($('#chkCheckAll' + activeDashlet).is(":checked")) {
                    var id = document.getElementById('landgridData' + activeDashlet);
                    var p = $(id).find('tbody').find('tr');
                    //;
                    for (var i = 0; i <= p.length - 2; i++) {
                        var variable = $($(id).find('tbody').find('tr')[i].cells[7]).find('input').attr('checked');
                        var name = $($(id).find('tbody').find('tr')[i]).find('td.tdName');
                        if (variable.trim() == 'checked'.trim()) {
                            $($(id).find('tbody').find('tr')[i]).addClass('textRedColor');
                            $(name).addClass('textBlackColor');
                        } else {
                            $($(id).find('tbody').find('tr')[i]).removeClass('textRedColor');
                            $(name).removeClass('textBlackColor');
                        }
                    }
                }
            }
            GLOBAL.LoadingEnd();
            Paging(bool, pageno, isReport);
        },
        error: function (data) {
            GLOBAL.LoadingEnd();
            COMMON.prototype.showMessage("Error,GotoSelectedPage");
        }
    });
}

function GotoSelectedPageOnTextblur(eve, Menuid, url) {
    GotoSelectedPage(eve.value, Menuid, url, undefined, undefined, undefined, false);
}

function GotoPreviousPage(iPageNo, Menuid, url) {

    if ($("#divEntryScreenTree").length > 0) {
        getCheckedRowsinMultipleTreetbs();
    }
    iPageNo = new Number(iPageNo) - 1;
    GotoSelectedPage(iPageNo, Menuid, url, undefined, undefined, undefined, false);
}

function GotoFirstPage(PageNo, Menuid, url) {
    GotoSelectedPage(PageNo, Menuid, url, undefined, undefined, undefined, false);
}

function GotoEndpage(PageCount, Menuid, url) {
    GotoSelectedPage(PageCount, Menuid, url, undefined, undefined, undefined, false);
}

function GotoNextPage(PageNo, Menuid, url) {
    if ($("#divEntryScreenTree").length > 0) {
        getCheckedRowsinMultipleTreetbs();
    }
    PageNo = new Number(PageNo) + 1;
    GotoSelectedPage(PageNo, Menuid, url, undefined, undefined, undefined, false);
}
//Paging related Script End

//Tree related Script End
var onTreeLiClickElement; var currentULId = "";
function GetGridDataOnClick(iMasterId, bForRemove, nodeName, element, bCMBUserTypeMasterBlur, IsFromLoad, pageno, IsLoad) {
    debugger
    console.log('GetGridDataOnClick starts: ', new Date().toLocaleString());
    GLOBAL.LoadingStart();
    IsLoad = (IsLoad == undefined ? true : IsLoad)
    gMasterId = iMasterId;
    gParentName = nodeName;
    gElement = element;
    var numberPattern = /\d+/g;
    var multipleTreeCounter = '';
    if (IsFromDashlet == false) {
        var multipleTreeCounter = ($(element).closest('div')[0] == undefined) ? "divTreeMenu" : $(element).closest('div')[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();
    }
    else if (IsFromDashlet) {
        LandingReportDashletId = GetActiveDashletId();
    }

    if (bCMBUserTypeMasterBlur == undefined) {
        bCMBUserTypeMasterBlur = false;
        $("#txtsrch-term" + LandingReportDashletId + multipleTreeCounter).val("");
    }
    onTreeLiClickElement = $('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + iMasterId + '').find('a.clsMasterName' + multipleTreeCounter)[0];
    if (onTreeLiClickElement == undefined) {
        return false;
    }

    $($('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li').find('.theme_color-inverse')).removeClass('theme_color-inverse');
    $($('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + iMasterId + '').find('a.clsMasterName' + multipleTreeCounter)[0]).addClass('theme_color-inverse');
    var newMasterId = iMasterId;

    while (parseInt(newMasterId) != 0 && (newMasterId != "tree2" + multipleTreeCounter)) {
        newMasterId = $('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + newMasterId + '').closest('ul')[0].id;
        $($('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + newMasterId + '').find('a.clsMasterName' + multipleTreeCounter)[0]).addClass('theme_color-inverse');
        newMasterId = newMasterId;//$('#tree2' + multipleTreeCounter + ' li#' + newMasterId + '').closest('ul')[0].id;
    }

    $('#id_showAllUnAuth').removeClass('EnableAuthBtns');
    $('.liAuthorize').hide();

    // var url = '@Url.Action("GetGridDataOnClick", "Landing")';
    var url = GLOBAL.getContextPath("GetGridDataOnClick", "Landing", "Landing");// '/Focus8W/Landing/Landing/GetGridDataOnClick';
    $('#bIsFromRemoveMark' + LandingReportDashletId).val(false);
    var CurrentPageNo = 0;
    if (document.getElementById('hndCurrentPageNo' + LandingReportDashletId) != null)
        CurrentPageNo = document.getElementById('hndCurrentPageNo' + LandingReportDashletId).value;
    else
        CurrentPageNo = 1;
    if (pageno != null) {
        CurrentPageNo = pageno;
    }
    //only if iMasterId is not equal to 0  setting CurrentPageNo=1 and IsLoad = false for loading grid data click on tree menu
    if (element != null && element.length != 0 && iMasterId != 0) {
        if (element.tagName.toLowerCase() == 'a' && element.classList.contains('clsMasterName') && bCMBUserTypeMasterBlur!=true)//from tree
        {
            CurrentPageNo = 1;
            IsLoad = false;
        }
    }
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId + multipleTreeCounter) == null ? document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId).value : document.getElementById('ObjMasterScreenStructure_MasterTypeId' + LandingReportDashletId + multipleTreeCounter).value;
    var isReport = $('#MasterRetrieval_IsReport' + LandingReportDashletId + multipleTreeCounter).val() == undefined ? $('#MasterRetrieval_IsReport' + LandingReportDashletId).val() : $('#MasterRetrieval_IsReport' + LandingReportDashletId + multipleTreeCounter).val();
    var iTreeId = document.getElementById('iTreeId' + LandingReportDashletId + multipleTreeCounter).value;
    if (iTreeId == "") {
        iTreeId = "0";
    }
    var iTreeViewId = $("#iTreeViewId" + LandingReportDashletId + multipleTreeCounter).val();
    if (iTreeViewId == "" || iTreeViewId == null) {
        iTreeViewId = "0";
    }
    var bool = false;
    //if ($('#chkResizeGrid').attr('checked'))
    if (document.getElementById('chkResizeGrid' + LandingReportDashletId + multipleTreeCounter + '').checked)
        bool = true;
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({ GridCurrentPageNo: CurrentPageNo, GridRecordSize: 50, m_iMasterTypeId: iMasterTypeId, Resize: bool, iMasterid: iMasterId, TreeId: iTreeId, ReportView: isReport, iTreeViewId: iTreeViewId, IsClosedRecords: $('#id_ShowAllClosed').hasClass('EnableOpenMasterBtn') ? true : false, IsPartialView: IsPartialView , IsLoad: IsLoad }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //debugger
            console.log('GetGridDataOnClick success fn starts: ', new Date().toLocaleString());

            //debugger
            $('#divgridpartial' + LandingReportDashletId + multipleTreeCounter + '').html("");
            $('#divgridpartial' + LandingReportDashletId + multipleTreeCounter + '').html(data);
            //$.material.init();
            if (!bForRemove) {
                RemoveMark();
            }

            if ($("#chkRetainSelection" + LandingReportDashletId).prop('checked') == true || IsTreeTabExists == "True") {
                bCheckedAll = true
                //do something
            }
            else {
                bCheckedAll = false;
                GridrowidValues = [];
                AccountProductTypeIds = [];
            }

            GetSelectedDataOfGrid();
            $('#hndTreeMaster' + LandingReportDashletId + multipleTreeCounter + '').val(iMasterId);
            Paging(bool, parseInt(CurrentPageNo), isReport);
            //
            if (!bCMBUserTypeMasterBlur) {
                if (IsTreeTabExists == "True") {
                    //var activeTab = GetActiveTreeTab();
                    //$($(activeTab).find('#LandingGridBody')).trigger('click');
                    //var bodyele=$(activeTab).closest('#LandingGridBody');
                }
                else {
                    $('#LandingGridBody' + LandingReportDashletId).trigger('click');
                    if (gridSelectedRow != undefined && IsFromLoad==undefined) {
                        var id = document.getElementById('landgridData');
                        if ($($($($('#landgridData').find('tbody')).find('tr'))[gridSelectedRow]).hasClass('FRowColor') == false) {
                            if ($($($($('#landgridData').find('tbody')).find('tr'))[gridSelectedRow]).hasClass('MasterGrid') == true) {
                                $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
                        }
                        }
                    }
                }
            }
            if (IsTreeTabExists != "True" && CheckIsItTreeTab() == false) {
                if ($("#iTreeId" + LandingReportDashletId).val() == "" || $("#iTreeId" + LandingReportDashletId).val() == null) {
                    GetAllRecords("", GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), $('#MasterRetrieval_IsReport' + LandingReportDashletId).val());
                }
            }
            //  
            // if (onTreeLiClickElement != undefined)
            MasterLandingScreeBreadcrumb(multipleTreeCounter, onTreeLiClickElement, iMasterId);
            if (multipleTreeCounter != null && multipleTreeCounter != undefined && multipleTreeCounter != '' && multipleTreeCounter >= 0) {
                SetTreeTabMasterIds(multipleTreeCounter, $('#hdnMasterId' + LandingReportDashletId).val());
            }
            console.log('GetGridDataOnClick ends: ', new Date().toLocaleString());
            GLOBAL.LoadingEnd();
        },
        error: function (data) {
            COMMON.prototype.showMessage("Error,GetGridDataOnClick");
        }
    });
}

function SetTreeTabMasterIds(multipleTreeCounter, iMasterId) {
 debugger
    var IsTreeTab = CheckIsItTreeTab();
    if (IsTreeTab) {
        if (multipleTreeCounter != null && multipleTreeCounter >= 0 && iMasterId > 0)//tree tab is there ,and master record is in editmode
        {
            var ulTabs = document.getElementsByClassName('ulForTabs');//get base element
            if (ulTabs != null && ulTabs != undefined) {
                var datacontent = $(ulTabs).find('.active').attr('data-content');//get the active tree tab
                var anchorTagName = $(($(ulTabs).find('.active')).children()[0]).attr('href');//get the tagname to get current div and related ids
                var masterTypeid = $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
                var counter = 0;
                if (anchorTagName.length > 0) {
                    counter = anchorTagName.substring(anchorTagName.length - 1, anchorTagName.length);
                }
                if (datacontent.toLowerCase() == "haslandinggrid" && masterTypeid > 0) {
                    var TreeSavedMasterIds = [];
                    if ($('#hdncheckArray_' + masterTypeid).val() != null && $('#hdncheckArray_' + masterTypeid).val() != '') {
                        var checkArray = $('#hdncheckArray_' + masterTypeid).val().split(',');
                        var TreeTabData = m_arrTreeTabsIds.filter(x=>x.ID == anchorTagName);
                        if (TreeTabData != null && TreeTabData.length > 0) {
                            for (var i = 0; i < checkArray.length; i++) {
                                if (checkArray[i] != 0 && TreeTabData[0].Tag.filter(x=>x == checkArray[i]).length > 0) {
                                    TreeSavedMasterIds.push(parseInt(checkArray[i]));
                                }
                            }
                        }
                        if (TreeSavedMasterIds != null && TreeSavedMasterIds.length > 0) {
                            SetTreeTabData(counter, TreeSavedMasterIds);
                        }
                    }

                }
            }
        }
        else if (multipleTreeCounter != null && multipleTreeCounter >= 0 && iMasterId == 0) {
            var ulTabs = document.getElementsByClassName('ulForTabs');//get base element

            var datacontent = $(ulTabs).find('.active').attr('data-content');//get the active tree tab
            var anchorTagName = $(($(ulTabs).find('.active')).children()[0]).attr('href');//get the tagname to get current div and related ids
            var masterTypeid = $(anchorTagName).find(".clsdivSecondsub").attr('data-mastertypeid');
            var counter = 0;
            if (anchorTagName.length > 0) {
                counter = anchorTagName.substring(anchorTagName.length - 1, anchorTagName.length);
            }


            for (var i = 0; i < m_arrTreeTabsIds.length; i++) {
                if (m_arrTreeTabsIds[i].ID == anchorTagName) {
                    SetTreeTabData(counter, m_arrTreeTabsIds[i].Tag);
                    break;
                }
            }

        }

    }
}

function CheckIdExistInTree(iMasterId) {
    //debugger 
    var activeDashlet = '';
    if (IsFromDashlet) {
        activeDashlet = GetActiveDashletId();
    }
    var eleTree = document.getElementById("tree2" + activeDashlet);
    var IsExists = false;
    if (eleTree != null && eleTree != undefined) {
        var eleLiLst = eleTree.getElementsByTagName("li");
        var arr = Array.from(eleLiLst);
        if (arr != null && arr.filter(arr=>arr.id == iMasterId).length > 0) {
            IsExists = true; 
        }
        //for (var i = 0; i < eleLiLst.length; i++) {
        //    if (eleLiLst[i].id == iMasterId) {
        //        IsExists = true;
        //        break;
        //    }
        //}
    }
    return IsExists;

}
function MasterLandingScreeBreadcrumb(multipleTreeCounter, onTreeLiClickElement, iMasterId) {
    debugger
    try {
        var bgReport = ($('#MasterRetrieval_IsReport' + LandingReportDashletId).val() == "False" && IsPartialView == 'False') ? false : true;
        var olText = bgReport == true ? '<ol id="ol_treeNavigation" class="breadcrumb" style="background-color:#ECECEC;margin-left: -15px;padding:0px;"></ol>' : '<ol id="ol_treeNavigation" class="breadcrumb" style="background-color:white;margin-left: -15px;padding:0px;"></ol>';
        $('#treeNavigation' + LandingReportDashletId + multipleTreeCounter + '').html('');
        $('#treeNavigation' + LandingReportDashletId + multipleTreeCounter + '').append(olText);
        var elementNameArray = [];
        var MasterIdsArray = []; var CompleteElementArrayForThis = [];

        if ($(onTreeLiClickElement).closest('ul')[0].id == ('tree2' + LandingReportDashletId + multipleTreeCounter + '').trim()) {
            if (onTreeLiClickElement.innerHTML.trim() != null && onTreeLiClickElement.innerHTML.trim().length > 0)
            {
                var IsDivInner = onTreeLiClickElement.innerHTML.includes('<div');
                if (IsDivInner) {
                    var indexofDiv = onTreeLiClickElement.innerHTML.indexOf('<');
                    onTreeLiClickElement.innerHTML = onTreeLiClickElement.innerHTML.substring(0, indexofDiv);
                }

            }
            $('#treeNavigation' + LandingReportDashletId + multipleTreeCounter + ' ol').append('<li style="" class="theme_color-inverse"> <span class="theme_icon-color" style="color:black;"> ' + onTreeLiClickElement.innerHTML.trim() + '</span> </li>')
        }
        else {
            currentULId = $(onTreeLiClickElement).closest('ul')[0].id;
            while (currentULId != 'tree2' + LandingReportDashletId + multipleTreeCounter + '') {
                //
                var currentText = onTreeLiClickElement.innerHTML.trim();
                if (currentText == '') {
                    currentText = $(onTreeLiClickElement).next()[0].innerHTML;
                }
                var CurrentEleULId = parseInt(currentULId)//($(currentULId).closest('ul')[0].id);
                var parentText = $('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + CurrentEleULId + '').find('a.clsMasterName' + multipleTreeCounter)[0].innerHTML.trim(); //$('li#' + 0).find('a')[0].text// $('li#' + CurrentEleULId).find('a:first')[0].innerHTML.trim();
                                                                                                                   
                if(parentText!=null && parentText.length>0)         
                {                                                                                              
                    var IsDiv = parentText.includes('<div');
                    if(IsDiv)
                    {
                        var indexof = parentText.indexOf('<');
                        parentText = parentText.substring(0, indexof);
                    }
                }


                var parentCompleteElement = $('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + CurrentEleULId + '').find('a')[1];
                currentULId = $('#tree2' + LandingReportDashletId + multipleTreeCounter + ' li#' + CurrentEleULId + '').closest('ul')[0].id;
                //
                if (elementNameArray.indexOf(currentText) == -1 && MasterIdsArray.indexOf(iMasterId) == -1) {
                    elementNameArray.push(currentText);
                    MasterIdsArray.push(iMasterId);
                    CompleteElementArrayForThis.push(onTreeLiClickElement);

                }
                // if (elementNameArray.indexOf(parentText) == -1 && elementNameArray.indexOf(CurrentEleULId) == -1) {
                if (MasterIdsArray.indexOf(CurrentEleULId) == -1) {
                    elementNameArray.push(parentText);
                    MasterIdsArray.push(CurrentEleULId);
                    CompleteElementArrayForThis.push(parentCompleteElement);
                }
            }
            elementNameArray.reverse();
            CompleteElementArrayForThis.reverse();
            MasterIdsArray.reverse();
            for (var i = 0; i < elementNameArray.length; i++) {
                var onclick = "return GetGridDataOnClick(" + parseInt(MasterIdsArray[i]) + ",false,'" + elementNameArray[i].trim() + "',this,undefined,undefined,undefined,false)";
                $('#treeNavigation' + LandingReportDashletId + multipleTreeCounter + ' ol').append('<li class="breadcrumb-item" onclick="' + onclick + '" style="cursor:pointer;"> <span class="theme_icon-color"> ' + elementNameArray[i] + '</span> </li>')
            }
            $('#treeNavigation' + LandingReportDashletId + multipleTreeCounter + ' ol li:last').addClass("theme_color-inverse").css({ 'font-weight': 'bold' });
            $('#treeNavigation' + LandingReportDashletId).css('pointer-events', 'auto');
            if (bgReport == true)
                $('#ol_treeNavigation' + LandingReportDashletId).css('background-color', '#ECECEC');
            else
                $('#ol_treeNavigation' + LandingReportDashletId).css('background-color', 'white');
        }
    } catch (ex) {
        alert("Exception => Landing.MasterLandingScreeBreadcrumb " + ex.message);
        return false;
    }
}
function GetSearchOnBlur(event, url, bDropDownChange) {
    debugger
    var activeDashlet = '';
    if (IsFromDashlet) {
        activeDashlet = GetActiveDashletId();
    }


    var multipleTreeCounter = "";
    if (IsFromDashlet == false) {
        var numberPattern = /\d+/g;
        if ($(event)[0].id == "btnOk" && $(event).hasClass("advSearch"))
            multipleTreeCounter = $("#div_getMasterAdvanceSearch").attr("data-seconddiv");
        else
            multipleTreeCounter = (bDropDownChange == false) ? $(event).closest('.clsdivSecondsub')[0].id : $(event)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();
    }
    if (multipleTreeCounter.trim() == "") {
        $("#hdnledgerSearchedValue").val($("#txtsrch-term" + activeDashlet).val());
    }
    var bAdvanceSearch = false; var SearchText = "";
    if (bDropDownChange == null || bDropDownChange == undefined) {
        bDropDownChange = false;
        if ($(event).attr("data-content") != undefined && $(event).hasClass("advSearch")) {
            bAdvanceSearch = true;
        }
    }
    if (bAdvanceSearch) {
        SearchText = (bDropDownChange == false) ? $($("#divStrQuery").find("label")).text() : "";//hndSearchOn
    }
    else {
        SearchText = (bDropDownChange == false) ? document.getElementById('txtsrch-term' + activeDashlet + multipleTreeCounter + '').value : "";//hndSearchOn
    }

    var isReport = $('#MasterRetrieval_IsReport' + activeDashlet + multipleTreeCounter + '').val();

    //if (SearchText.trim() == "" && bDropDownChange == false) {
    //    return false;
    //}
    var bResize = false;
    if ($('#chkResizeGrid' + activeDashlet + multipleTreeCounter + '').is(":checked")) {
        bResize = true;
    }
    var iTreeViewId = $("#iTreeViewId" + LandingReportDashletId + multipleTreeCounter).val();
    if (iTreeViewId == "" || iTreeViewId == null) {
        iTreeViewId = "0";
    }
    var Searcharry = (bDropDownChange == false) ? document.getElementById('hndSearchOn' + activeDashlet).value.trim() : "";//hndSearchOnfinal
    var TreeId = document.getElementById('iTreeId' + activeDashlet + multipleTreeCounter).value;
    if (TreeId == "") {
        TreeId = "0";
    }
    var CurrentPageNo = 1;//bDropDownChange == true ? "1" : document.getElementById('hndCurrentPageNo').value;
    var ddlSelected = $("#ddlSelectFilter" + activeDashlet).val();
    if (Searcharry == "" || Searcharry == null) {
        Searcharry = "sName,sCode";
    }
    if (CurrentPageNo == 0)
        CurrentPageNo = 1;
    if (bDropDownChange == true) {
        $('#hndTreeMaster' + activeDashlet).val(0);
    }
    var MastertypeId = $("#ObjMasterScreenStructure_MasterTypeId" + activeDashlet + multipleTreeCounter).val();
    GLOBAL.LoadingStart();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            strArraySearch: Searcharry, strSearchText: SearchText.trim(), iTreeViewId: iTreeViewId, iTreeId: TreeId, PageNo: CurrentPageNo,
            iParentId: $('#hndTreeMaster' + activeDashlet).val(), IsAuthorization: showAllEnumValue == "2" ? true : false, IsClosedRecords: showAllEnumValue == "3" ? true : false, Resize: bResize, ddlSelectedId: ddlSelected, isReport: isReport, IsAdvanceSearch: bAdvanceSearch, MastertypeId: MastertypeId, IsLoad: false
        }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //  
            GLOBAL.LoadingEnd();
            var tableContainer = $('#divgridpartial' + activeDashlet + multipleTreeCounter + '');
            tableContainer.html(data);
            if ($('#chkRetainSelection' + activeDashlet).is(":checked")) {
                GetSelectedDataOfGrid();
            } else {
                GridrowidValues = [];
            }
            document.getElementById('hdnIsServerTreeDataAvlbl' + activeDashlet).value = 'True';
            Paging(bResize, CurrentPageNo, isReport);
            $("#getMasterAdvancedSearch").modal("hide");
            $('#LandingGridBody' + activeDashlet).trigger('click');
            $('#treeNavigation' + activeDashlet).css('pointer-events', 'none');
            $('#ol_treeNavigation' + activeDashlet).addClass("grey");
            $('#treeNavigation' + activeDashlet + multipleTreeCounter + ' ol li:last').css({ 'color': 'grey' })


            //$.material.init();
        },
        error: function (data) {
            GLOBAL.LoadingEnd();
            COMMON.prototype.showMessage("Error,GetSearchOnBlur");
        }
    });
}

function OnDropdownBlurevent(event, url) {
    debugger
    GridrowidValues = [];
    var multipleTreeCounter = "";
    var numberPattern = /\d+/g;
    if (IsFromDashlet == false) {
        multipleTreeCounter = $(event)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();
    }
    var DashletId = '';
    if (IsFromDashlet) {
        DashletId = GetActiveDashletId();
    }
    var SearchText = document.getElementById('txtsrch-term' + DashletId + multipleTreeCounter).value;//hndSearchOn
    var isReport = $('#MasterRetrieval_IsReport' + DashletId).val();

    var bResize = false;
    if ($('#chkResizeGrid' + DashletId).is(":checked")) {
        bResize = true;
    }
    var iTreeViewId = document.getElementById('iTreeViewId' + DashletId + multipleTreeCounter).value;
    treeViewIdSelectedValue = iTreeViewId;
    var Searcharry = document.getElementById('hndSearchOn' + DashletId).value.trim();//hndSearchOnfinal
    var TreeId = document.getElementById('iTreeId' + DashletId + multipleTreeCounter).value;
    if (TreeId == "") {
        TreeId = "0";
    }
    var CurrentPageNo = document.getElementById('hndCurrentPageNo' + DashletId).value;
    var ddlSelected = $("#ddlSelectFilter" + DashletId).val();
    if (Searcharry == "" || Searcharry == null) {
        Searcharry = "sName,sCode";
    }
    if (CurrentPageNo == 0)
        CurrentPageNo = 1;
    var MastertypeId = $("#ObjMasterScreenStructure_MasterTypeId" + DashletId + multipleTreeCounter).val();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            strArraySearch: Searcharry, strSearchText: SearchText, iTreeViewId: iTreeViewId, iTreeId: TreeId, PageNo: CurrentPageNo, iParentId: $('#hndTreeMaster' + DashletId).val(),
            IsAuthorization: showAllEnumValue == "2" ? true : false, IsClosedRecords: showAllEnumValue == "3" ? true : false, Resize: bResize, ddlSelectedId: ddlSelected, isReport: isReport, IsAdvanceSearch: false, MastertypeId: MastertypeId
        }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        //async: false,
        success: function (data) {
            //
            var tableContainer = $('#divgridpartial' + DashletId + multipleTreeCounter);
            tableContainer.html(data);
            Paging(bResize, CurrentPageNo, isReport);
            $('#LandingGridBody').trigger('click');
            //$.material.init();
        },
        error: function (data) {
            COMMON.prototype.showMessage("Error,OnDropdownBlurevent");
        }
    });

}
var divCountr = "";

function GetTreeMenus(rl, GenerateValue, bFromTreeChange, bIsLoad) {
    debugger
    var currentDashletid = '';
    if (IsFromDashlet) {
        currentDashletid = GetActiveDashletId();
    }
    console.log('GetTreeMenus started: ', new Date().toLocaleString());
    var treeCountr = $('#hdnCounterForMultipleTrees').val();

    var multipletree;
    if ($("#hdnCounterForMultipleTrees").length == "0") {
        var MastertypeId = $("#ObjMasterScreenStructure_MasterTypeId" + currentDashletid).val();
        multipletree = false;
    }
    else {

        var masterTypeIds = $("#hdnStrMasterTypeIds").val().split(',');
        masterTypeIds = masterTypeIds.filter(Boolean);
        divCountr = $('#hdnCountMultipleTrees').val();
        if (parseInt($('#hdnCountMultipleTrees').val()) < parseInt(treeCountr)) {
            $('#hdnCountMultipleTrees').val(parseInt($('#hdnCountMultipleTrees').val()) + 1);
            var MastertypeId = masterTypeIds[divCountr];
        }
        if (MastertypeId == undefined || MastertypeId == "undefined")
            return false;
        multipletree = true;
    }

    var isReport = $('#MasterRetrieval_IsReport' + currentDashletid).val();
    if (isReport == undefined) {
        isReport = "False";
    }
    var IsServerTreeDataAvlbl = document.getElementById('hdnIsServerTreeDataAvlbl' + currentDashletid).value;
    if (IsFromDashlet) {
        IsServerTreeDataAvlbl = "false";
        isReport = "True";
    }
    var iTreeId = 0;
    if (document.getElementById('iTreeId' + currentDashletid + divCountr) != null) {
        iTreeId = document.getElementById('iTreeId' + currentDashletid + divCountr).value;
    }
    //client tree rendering implementation
    //if (bIsLoad && lstTreeData != null && lstTreeData.length > 0) {
    //    $("#divTreeMenu").html("");
    //    CreateTree(lstTreeData);
    //    if (isReport != "True" && IsPartialView != 'True') {
    //        setTimeout(getTreeSort, 30);
    //    }
    //    if (isReport == "True" || IsPartialView == 'True') {
    //        Landing.ApplyTreeContextMenu();
    //        //IsReportLoad(emptyString);
    //        ReportOrPartialTreeDesignFix(emptyString);
    //    }
    //}
    //else {
    //}
    $.ajax({
        url: rl,
        type: 'POST',
        data: JSON.stringify({ MasterTypeId: MastertypeId, IsReport: isReport, isMultipleTree: multipletree, bHasGlobalCache: (IsServerTreeDataAvlbl == "True" || GLOBAL.GlobalCacheArrayForMasters.length > 0) ? true : (bFromTreeChange == true ? false : bFromTreeChange), TreeId: iTreeId }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: (isReport == "True" || IsPartialView == "True") ? true : false,
        beforeSend: function () {
            if (document.getElementById("imgAjax") != null) {
                document.getElementById("imgAjax").style.visibility = "visible";
            }
            //Global.LoadingStart();
        },
        //complete: function () {
        //    debugger

        //    //alert("hi");


        //    //Global.LoadingEnd();
        //},
        success: function (data) {
           //debugger
            console.log('GetTreeMenus server ends and design starts: ', new Date().toLocaleString());
            if (GenerateValue == "") {
               //debugger
                if (IsFromDashlet) {
                    //var ParentEle = GetLandingControlForDashlet(DashletId);
                    //$($(ParentEle).find("#divTreeMenu")).html('');
                    //$($(ParentEle).find("#divTreeMenu")).html(data);
                    $("#divTreeMenu" + currentDashletid).html("");
                    $("#divTreeMenu" + currentDashletid).html(data);
                    $("#tree2").attr('id', "tree2" + DashletId);
                }
                else {
                    $("#divTreeMenu").html("");
                    $("#divTreeMenu").html(data);
                }
                // $('#tree2').treed({ openedClass: 'gminus icon-collepse', closedClass: 'gplus icon-expand' });
                //getTreeSort();
                // setTimeout(InitializeTreeSort(),30);
                if (isReport != "True" && IsPartialView != 'True') {
                    setTimeout(getTreeSort, 30);
                }
                if (isReport == "True" || IsPartialView == 'True') {
                    Landing.ApplyTreeContextMenu();
                    //IsReportLoad(emptyString);
                    ReportOrPartialTreeDesignFix(emptyString);
                }
                //Global.LoadingEnd();
                console.log('GetTreeMenus design for one tree ends: ', new Date().toLocaleString());
            }
            else {
                //alert("hello tree");
                //var el = document.createElement("Div");
                //el.id = "divInnerTreeMenu"+divCountr;
                //el.innerHTML = data;
                //   if (masterpopupData == undefined || masterpopupData.length == 0) {
                if ($("#ulCommonlyUsedRibbon").length == "0" || (masterpopupData != undefined)) {
                    $($('#divEntryScreenTree #divfirstsub')[0]).find('*').each(function () {
                        ////
                        var elID = $(this).attr('id');
                        if (elID != undefined && elID != '') {
                            $(this).attr('id', elID + divCountr);
                        }
                    });
                    $($('#divEntryScreenTree #divfirstsub')[0]).attr('id', 'divfirstsub' + divCountr);
                    $($('#divEntryScreenTree #divLanding')[0]).attr('id', 'divLanding' + divCountr);
                    $($('#divEntryScreenTree #divSecondsub')[0]).attr('id', 'divSecondsub' + divCountr);
                }
                else {
                    $($('#divSecondsub #divfirstsub')[0]).find('*').each(function () {
                        ////
                        var elID = $(this).attr('id');
                        if (elID != undefined && elID != '') {
                            $(this).attr('id', elID + divCountr);
                        }
                    });
                    $($('#divSecondsub #divfirstsub')[0]).attr('id', 'divfirstsub' + divCountr);
                    $($('#divSecondsub #divLanding')[0]).attr('id', 'divLanding' + divCountr);
                    $($('#divSecondsub #divSecondsub')[0]).attr('id', 'divSecondsub' + divCountr);
                }
                $('#divfirstsub' + currentDashletid + divCountr).css('pointer-events', 'auto');
                //
                $('#divTreeMenu' + currentDashletid + divCountr).html("");
                $('#divTreeMenu' + currentDashletid + divCountr).append(data);
                $($('#divTreeMenu' + currentDashletid + divCountr).find('#tree2')).attr('id', 'tree2' + divCountr);
                $('#tree2' + currentDashletid + divCountr).find('.clsMasterName').removeClass('clsMasterName').addClass('clsMasterName' + divCountr);

                $($('#divSecondsub' + currentDashletid + divCountr + '').find('#divgridpartial')).attr('id', 'divgridpartial' + divCountr);
                $($('#divSecondsub' + currentDashletid + divCountr + '').find('#txtsrch-term')).attr('id', 'txtsrch-term' + divCountr);
                $($('#divSecondsub' + currentDashletid + divCountr + '').find('#chkResizeGrid')).attr('id', 'chkResizeGrid' + divCountr);
                $($('#divSecondsub' + currentDashletid + divCountr + '').find('#treeNavigation')).attr('id', 'treeNavigation' + divCountr);
                //    $('#tree2' + divCountr + '').treed({ openedClass: 'gminus icon-collepse', closedClass: 'gplus icon-expand' });
                IsReportLoad(divCountr);
                //   divCountr++;
                //  }
            }
            ////OnLoadOpenMenuTreeDefalt();
            if (parseInt($("#hdnLanguageId").val()) == 1) {
                var arabic = /[\u0600-\u06FF]/;
                $('.indicator').each(function () {
                    //  
                    var strMasterName = $(this).next().html().trim();
                    if (!arabic.test(strMasterName)) {
                        if (!$(this).hasClass("glyphicon-one-fine-dot")) {
                            var MsterName = $(this).next();
                            MsterName.insertBefore($(this))
                            $(this).css({ "margin-right": "-10px", "padding-left": "5px" });
                        }
                        else {
                            if ($(this).closest("li").hasClass("divider")) {
                                $(this).css({ "margin-right": "-10px", "padding-left": "5px" });
                            }
                        }
                        $("#tree2" + currentDashletid).css({ "padding-right": "10px" });
                    }
                });
            }
            console.log('GetTreeMenus design ends: ', new Date().toLocaleString());
        },
        error: function (data) {
            COMMON.prototype.showMessage("Error,GetTreeMenus");
        }
    });



}

function GetLandingControlForDashlet(dashletid) {
    var LandingControl = $('[id="LandingControl"]');
    if (LandingControl != null) {
        for (var i = 0; i < LandingControl.length; i++) {

            if (LandingControl[i].getAttribute("data-LandingDashletId") == dashletid) {
                return LandingControl[i];
            }
        }

    }
}
function GetReportViewControlForDashlet(dashletid) {
    debugger
    var LandingControl = $('[id="reportView"]');
    if (LandingControl != null) {
        for (var i = 0; i < LandingControl.length; i++) {

            if (LandingControl[i].getAttribute("data-LandingDashletId") == dashletid) {
                return LandingControl[i];
            }
        }
    }
}

function GetActiveDashletId(element) {
    var id = ''

    if (element != null && element != undefined) {
        if ($(element).find('.HeaderLanding').length > 0) {
            id = $($(element).find('.HeaderLanding')[0]).attr('data-LandingDashletId');
        }
        else if ($(element).closest('.HeaderLanding').length > 0) {
            id = $($(element).closest('.HeaderLanding')[0]).attr('data-LandingDashletId');
        }
    }
    else {
        if (event != undefined && $(event).length > 0) {
            if ($($($(event)[0].srcElement)[0]).closest('.HeaderLanding').length > 0) {
                id = $($($($(event)[0].srcElement)[0]).closest('.HeaderLanding')[0]).attr('data-LandingDashletId');
            }
            else {
                id = $($($(event)[0].srcElement).closest('#LandingControl')[0]).attr('data-LandingDashletId');
            }
        }
    }


    //if ($($($(event)[0].currentTarget).parent()).length > 0) {
    //    var eleid = $($($(event)[0].currentTarget).parent())[0].id;
    //    var EventElement = document.getElementById(eleid);
    //    if (EventElement == null) {
    //        id = LandingReportDashletId;
    //    }
    //    else {
    //        id = $($($(event)[0].currentTarget).closest('#LandingControl')[0]).attr('data-LandingDashletId');
    //    }

    //}
    //else {
    //    id = $($($(event)[0].currentTarget).closest('#LandingControl')[0]).attr('data-LandingDashletId');

    //}
    if (id == undefined || id == null || id == '') {
        return DashletId;
    }
    else {
        return id;
    }


    // var LandingDashletId = $($(this).find('#LandingControl')).attr('data-LandingDashletId');
    // return LandingDashletId;
}

///client side tree implementation


function CreateTree(data) {
    console.log('CreateTree client creation starts: ', new Date().toLocaleString());
    var MasterTreeData = data;

    var rootEle = document.createElement('ul');
    rootEle.id = 'tree2';
    rootEle.classList.add('unstyled');
    rootEle.classList.add('Sortability');
    rootEle.classList.add('clsTreeStyle');


    var li = document.createElement('li');
    li.id = '0';
    li.classList.add('sortable');
    li.classList.add('branch');
    li.setAttribute('AccountOrProductType', '0');

    var a = document.createElement('a');
    a.style = 'cursor:pointer';
    a.classList.add('clsMasterName');
    a.classList.add('theme_color-inverse');
    var name = 'Account';
    var caption = 'Account';
    var iMasterId = 0;
    $(a).attr("onClick", 'GetGridDataOnClick(' + iMasterId + ',false,"' + name + '",this)');
    //a.addEventListener('click', GetGridDataOnClick.bind(iMasterId = iMasterId, bForRemove = false, nodeName = name, element = a, bCMBUserTypeMasterBlur = false));
    a.text = caption

    li.appendChild(a);
    rootEle.appendChild(li);
    var Root = document.getElementById('divTreeMenu');
    //Root.appendChild(root);

    for (var i = 0; i < MasterTreeData.length; i++) {

        if (MasterTreeData[i].ParentId == 0) {
            var grpClass = '';
            var IsMinus = false;
            var iParentId = MasterTreeData[i].MasterId;
            if (MasterTreeData.filter(x=>x.ParentId == iParentId).length > 0) {
                grpClass = 'indicator gminus icon-collepse';
                IsMinus = true;
            }
            else {
                grpClass = 'indicator glyphicon glyphicon-one-fine-dot';
            }
            var ulEle = document.createElement('ul');
            ulEle.id = MasterTreeData[i].ParentId;
            ulEle.classList.add('Sortability');
            ulEle.classList.add('ui-sortable');
            ulEle.classList.add('tree2ulMarginLeft');

            var liEle = document.createElement('li');
            liEle.setAttribute('role', 'separator');
            liEle.classList.add('divider');
            liEle.classList.add('sortable');
            liEle.classList.add('branch');
            liEle.classList.add('ui-sortable-handle');
            liEle.setAttribute('AccountOrProductType', MasterTreeData[i].AccountOrProductType);
            liEle.setAttribute('isattribute', MasterTreeData[i].IsAttribute);
            liEle.id = MasterTreeData[i].MasterId;



            var aEle = document.createElement('a');
            if (IsMinus) {
                aEle.classList.add('indicator');
                aEle.classList.add('gminus');
                aEle.classList.add('icon-collepse');
            }
            else {
                aEle.classList.add('indicator');
                aEle.classList.add('glyphicon');
                aEle.classList.add('glyphicon-one-fine-dot');
            }
            //aEle.addEventListener('click', CloseOpenIconClick.bind(aEle));
            aEle.setAttribute('onClick', 'CloseOpenIconClick(this)');
            aEle.style = 'cursor: pointer';
            liEle.appendChild(aEle);



            var aInnerEle = document.createElement('a');
            //if (IsMinus) {
            //    aInnerEle.classList.add('indicator');
            //    aInnerEle.classList.add('gminus');
            //    aInnerEle.classList.add('icon-collepse');
            //}
            //else {
            //    aInnerEle.classList.add('indicator');
            //    aInnerEle.classList.add('glyphicon');
            //    aInnerEle.classList.add('glyphicon-one-fine-dot');
            //}
            var objData = MasterTreeData[i];
            aInnerEle.classList.add('clsMasterName');
            $(aInnerEle).attr("onClick", 'GetGridDataOnClick(' + objData.MasterId + ',false,"' + objData.Name + '",this)');
            //aInnerEle.addEventListener('click',GetGridDataOnClick.bind(iMasterId = objData.MasterId, bForRemove = false, nodeName = objData.Name, element = aInnerEle, bCMBUserTypeMasterBlur = false));
            aInnerEle.text = MasterTreeData[i].Name;
            aInnerEle.style = 'cursor: pointer';
            liEle.appendChild(aInnerEle);
            ulEle.appendChild(liEle);
            var node = null;
            if (MasterTreeData.length > 0 && MasterTreeData.filter(x=>x.ParentId == iParentId).length > 0) {
                node = GetNode(MasterTreeData, iParentId, MasterTreeData[i].Code, MasterTreeData[i].AccountOrProductType, MasterTreeData[i].IsAttribute);
                if (node != null) {
                    liEle.appendChild(node);
                }
            }

            rootEle.appendChild(ulEle);
        }
    }
    Root.appendChild(rootEle);
    console.log('CreateTree client creation ends: ', new Date().toLocaleString());
}


function GetNode(MasterTreeData, iParentIdNode, Code, AccountOrProductType, IsAttribute) {

    //var Root = document.getElementById('root');
    var ulEleMain = document.createElement('ul');

    for (var i = 0; i < MasterTreeData.length; i++) {

        if (iParentIdNode == MasterTreeData[i].ParentId) {

            var grpClass = '';
            var IsMinus = false;
            var iParentId = MasterTreeData[i].MasterId;
            if (MasterTreeData.filter(x=>x.ParentId == iParentId).length > 0) {
                grpClass = 'indicator gminus icon-collepse';
                IsMinus = true;
            }
            else {
                grpClass = 'indicator glyphicon glyphicon-one-fine-dot';
            }
            var ulEle = document.createElement('ul');
            ulEle.id = MasterTreeData[i].ParentId;
            ulEle.classList.add('Sortability');
            ulEle.classList.add('ui-sortable');
            ulEle.classList.add('tree2ulMarginLeft');


            var liEle = document.createElement('li');
            liEle.setAttribute('role', 'separator');
            liEle.classList.add('divider');
            liEle.classList.add('sortable');
            liEle.classList.add('branch');
            liEle.classList.add('ui-sortable-handle');
            liEle.setAttribute('AccountOrProductType', MasterTreeData[i].AccountOrProductType);
            liEle.setAttribute('isattribute', MasterTreeData[i].IsAttribute);
            liEle.id = MasterTreeData[i].MasterId;



            var aEle = document.createElement('a');
            //aEle.addEventListener('click', CloseOpenIconClick.bind(aEle));
            if (IsMinus) {
                aEle.classList.add('indicator');
                aEle.classList.add('gminus');
                aEle.classList.add('icon-collepse');
            }
            else {
                aEle.classList.add('indicator');
                aEle.classList.add('glyphicon');
                aEle.classList.add('glyphicon-one-fine-dot');
            }
            aEle.setAttribute('onClick', 'CloseOpenIconClick(this)');
            aEle.style = 'cursor: pointer';
            liEle.appendChild(aEle);



            var aInnerEle = document.createElement('a');
            //if (IsMinus) {
            //    aInnerEle.classList.add('indicator');
            //    aInnerEle.classList.add('gminus');
            //    aInnerEle.classList.add('icon-collepse');
            //}
            //else {
            //    aInnerEle.classList.add('indicator');
            //    aInnerEle.classList.add('glyphicon');
            //    aInnerEle.classList.add('glyphicon-one-fine-dot');
            //}
            var treedata = MasterTreeData[i];
            aInnerEle.classList.add('clsMasterName');
            $(aInnerEle).attr("onClick", 'GetGridDataOnClick(' + treedata.MasterId + ',false,"' + treedata.Name + '",this)');
            //aInnerEle.addEventListener('click', GetGridDataOnClick.bind(iMasterId = treedata.MasterId, bForRemove = false, nodeName = treedata.Name, element = aInnerEle, bCMBUserTypeMasterBlur = false));
            aInnerEle.text = MasterTreeData[i].Name;
            aInnerEle.style = 'cursor: pointer';
            liEle.appendChild(aInnerEle);

            ulEle.appendChild(liEle);

            var node = null;
            if (MasterTreeData.length > 0 && MasterTreeData.filter(x=>x.ParentId == iParentId).length > 0) {
                node = GetNode(MasterTreeData, iParentId, MasterTreeData[i].Code, MasterTreeData[i].AccountOrProductType, MasterTreeData[i].IsAttribute);
                if (node != null) {
                    liEle.appendChild(node);
                    //ulEle = node  
                }

            }
            else {
                //  ulEleMain = ulEle;
            }
            ulEleMain.classList.add('r');
            ulEleMain.appendChild(ulEle);
            //ulEle.appendChild(liEle);
            // ulElMain.appendChild(ulEle);
            //ulEle.appendChild(liEle);

        }
    }
    return ulEleMain == null ? null : ulEleMain;

}








function GetTreeMenus1(rl, GenerateValue, bFromTreeChange) {
    debugger
    var url = GLOBAL.getContextPath("TreePartialView", "Landing", "Landing");
    var treeCountr = $('#hdnCounterForMultipleTrees').val();

    var multipletree;
    if ($("#hdnCounterForMultipleTrees").length == "0") {
        var MastertypeId = $("#ObjMasterScreenStructure_MasterTypeId").val();
        multipletree = false;
    }
    else {

        var masterTypeIds = $("#hdnStrMasterTypeIds").val().split(',');
        masterTypeIds = masterTypeIds.filter(Boolean);
        divCountr = $('#hdnCountMultipleTrees').val();
        if (parseInt($('#hdnCountMultipleTrees').val()) < parseInt(treeCountr)) {
            $('#hdnCountMultipleTrees').val(parseInt($('#hdnCountMultipleTrees').val()) + 1);
            var MastertypeId = masterTypeIds[divCountr];
        }
        if (MastertypeId == undefined || MastertypeId == "undefined")
            return false;
        multipletree = true;
    }
    var isReport = $('#MasterRetrieval_IsReport').val();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({ MasterTypeId: MastertypeId, IsReport: isReport, isMultipleTree: multipletree, bHasGlobalCache: bFromTreeChange == true ? false : GLOBAL.GlobalCacheArrayForMasters.length > 0 ? true : false }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //debugger
            console.log('GetTreeMenus server ends and design starts: ', new Date().toLocaleString());
            if (GenerateValue == "") {
                //debugger
                $("#divTreeMenu").html("");
                $("#divTreeMenu").html(data);
                // $('#tree2').treed({ openedClass: 'gminus icon-collepse', closedClass: 'gplus icon-expand' });
                //getTreeSort();
                // setTimeout(InitializeTreeSort(),30);
                setTimeout(getTreeSort, 30);
                console.log('GetTreeMenus design for one tree ends: ', new Date().toLocaleString());
            }
        },
        error: function (data) {
            COMMON.prototype.showMessage("Error,GetTreeMenus");
        }
    });
}

//Tree related Script End

//Landing Top Script Start
function GetAllClosedRecords(event, url, reportView) {
    //;
    var multipleTreeCounter = "";
    showAllEnumValue = "3";
    if ($("#divEntryScreenTree").length > 0) {
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var secondSubDiv = $(tabId).find('.clsdivSecondsub').attr("id");
        var numberPattern = /\d+/g;
        multipleTreeCounter = $("#" + secondSubDiv)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();

    }

    $('#id_showAllUnAuth').removeClass('EnableAuthBtns');
    $('#id_ShowAllClosed').addClass('EnableOpenMasterBtn');
    $('.liAuthorize').hide();

    var SearchText = document.getElementById('txtsrch-term' + multipleTreeCounter).value;//hndSearchOn
    var bResize = false;
    if ($('#chkResizeGrid').is(":checked")) {
        bResize = true;
    }
    var iTreeViewId = document.getElementById('iTreeViewId' + multipleTreeCounter).value;
    var Searcharry = document.getElementById('hndSearchOn').value.trim();//hndSearchOnfinal
    if (Searcharry == "" || Searcharry == null) {
        Searcharry = "sName,sCode";
    }
    var TreeId = document.getElementById('iTreeId').value;
    if (TreeId == "") {
        TreeId = "0";
    }
    var CurrentPageNo = document.getElementById('hndCurrentPageNo').value;
    var ddlSelected = $("#ddlSelectFilter").val();
    if (CurrentPageNo == 0)
        CurrentPageNo = 1;
    $('#divfirstsub').css({ 'pointer-events': 'none' });
    $('#divaccorderan').css({ 'pointer-events': 'auto' });
    $($('#divfirstsub').find("a,select")).each(function () {
        $(this).addClass('grey');
    });
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + multipleTreeCounter + '').value;
    GLOBAL.LoadingStart();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            strArraySearch: Searcharry, strSearchText: SearchText, iTreeViewId: iTreeViewId, iTreeId: TreeId, PageNo: CurrentPageNo,
            iParentId: $('#hndTreeMaster').val(), IsAuthorization: showAllEnumValue == "2" ? true : false, IsClosedRecords: showAllEnumValue == "3" ? true : false, Resize: bResize, ddlSelectedId: ddlSelected, bGroupClicked: false, reportView: reportView,
            iMasterTypeId: iMasterTypeId
        }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        //async: false,
        success: function (data) {
            //;
            GLOBAL.LoadingEnd();
            GridrowidValues = [];
            var tableContainer = $('#divgridpartial' + multipleTreeCounter);
            tableContainer.html(data);
            Paging(bResize, CurrentPageNo, reportView);
            $('#LandingGridBody').trigger('click');
            //$.material.init();
        },
        error: function (data) {
            GLOBAL.LoadingEnd();
            COMMON.prototype.showMessage("Error,GetAllClosedRecords");
        }
    });

}
function GetAllUnauthorizedRecords(event, url, reportView) {
    //;
    var multipleTreeCounter = "";
    showAllEnumValue = "2";
    if ($("#divEntryScreenTree").length > 0) {
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var secondSubDiv = $(tabId).find('.clsdivSecondsub').attr("id");
        var numberPattern = /\d+/g;
        multipleTreeCounter = $("#" + secondSubDiv)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();

    }
    $('#id_showAllUnAuth').addClass('EnableAuthBtns');
    $('#id_ShowAllClosed').removeClass('EnableOpenMasterBtn');

    $('.liAuthorize').show()
    var SearchText = document.getElementById('txtsrch-term' + multipleTreeCounter).value;//hndSearchOn
    var bResize = false;
    if ($('#chkResizeGrid').is(":checked")) {
        bResize = true;
    }
    var iTreeViewId = document.getElementById('iTreeViewId').value;
    var Searcharry = document.getElementById('hndSearchOn').value.trim();//hndSearchOnfinal
    var TreeId = document.getElementById('iTreeId').value;
    if (TreeId == "") {
        TreeId = "0";
    }
    if (Searcharry == "" || Searcharry == null) {
        Searcharry = "sName,sCode";
    }
    var CurrentPageNo = document.getElementById('hndCurrentPageNo').value;
    if (CurrentPageNo == 0)
        CurrentPageNo = 1;
    var ddlSelected = $("#ddlSelectFilter").val();


    $('#divfirstsub').css({ 'pointer-events': 'none' });
    $('#divaccorderan').css({ 'pointer-events': 'auto' });
    $($('#divfirstsub').find("a,select")).each(function () {
        $(this).addClass('grey');
    });
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + multipleTreeCounter + '').value;
    GLOBAL.LoadingStart();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            strArraySearch: Searcharry, strSearchText: SearchText, iTreeViewId: iTreeViewId, iTreeId: TreeId, PageNo: CurrentPageNo,
            iParentId: $('#hndTreeMaster').val(), IsAuthorization: showAllEnumValue == "2" ? true : false,
            IsClosedRecords: showAllEnumValue == "3" ? true : false, Resize: bResize, ddlSelectedId: ddlSelected, bGroupClicked: false, reportView: reportView,
            iMasterTypeId: iMasterTypeId
        }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        //async: false,
        success: function (data) {
            //;
            GLOBAL.LoadingEnd();
            GridrowidValues = [];
            var tableContainer = $('#divgridpartial' + multipleTreeCounter);
            tableContainer.html(data);
            Paging(bResize, CurrentPageNo, reportView);
            $('#LandingGridBody').trigger('click');
            $("#divSecondsub").css({ "display": "block" });
            //$.material.init();
        },
        error: function (data) {
            GLOBAL.LoadingEnd();
            COMMON.prototype.showMessage("Error,GetAllUnauthorizedRecords");
        }
    });

}
function GetAllRecords(event, url, reportView) {
    //;
    var multipleTreeCounter = "";
    showAllEnumValue = "1";
    if ($("#divEntryScreenTree").length > 0) {
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var secondSubDiv = $(tabId).find('.clsdivSecondsub').attr("id");
        var numberPattern = /\d+/g;
        multipleTreeCounter = $("#" + secondSubDiv)[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();

    }
    $('#id_showAllUnAuth').removeClass('EnableAuthBtns');
    $('#id_ShowAllClosed').removeClass('EnableOpenMasterBtn');
    $("#btnCloseAccount").removeAttr("OpencloseAccountClick");
    $('.liAuthorize').hide();
    var SearchText = document.getElementById('txtsrch-term' + DashletId + multipleTreeCounter).value;//hndSearchOn
    var bResize = false;
    if ($('#chkResizeGrid' + DashletId).is(":checked")) {
        bResize = true;
    }
    var iTreeViewId = document.getElementById('iTreeViewId' + DashletId + multipleTreeCounter).value;
    var Searcharry = document.getElementById('hndSearchOn' + DashletId).value.trim();//hndSearchOnfinal
    var TreeId = document.getElementById('iTreeId' + DashletId).value;
    if (TreeId == "") {
        TreeId = "0";
    }
    var CurrentPageNo = document.getElementById('hndCurrentPageNo' + DashletId).value;
    var ddlSelected = $("#ddlSelectFilter" + DashletId).val();
    if (Searcharry == "" || Searcharry == null) {
        Searcharry = "sName,sCode";
    }

    if (CurrentPageNo == 0)
        CurrentPageNo = 1;
    $('#divfirstsub' + DashletId).css({ 'pointer-events': 'auto' });
    $($('#divfirstsub' + DashletId).find("a,select")).each(function () {
        $(this).removeClass('grey');
    });
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + DashletId + multipleTreeCounter + '').value;
    GLOBAL.LoadingStart();
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            strArraySearch: Searcharry, strSearchText: SearchText, iTreeViewId: iTreeViewId, iTreeId: TreeId, PageNo: 0,
            iParentId: $('#hndTreeMaster' + DashletId).val(), IsAuthorization: showAllEnumValue == "2" ? true : false, IsClosedRecords: showAllEnumValue == "3" ? true : false, Resize: bResize, ddlSelectedId: ddlSelected, bGroupClicked: false, reportView: reportView,
            iMasterTypeId: iMasterTypeId
        }),
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //;
            GLOBAL.LoadingEnd();
            var tableContainer = $('#divgridpartial' + DashletId + multipleTreeCounter);
            tableContainer.html(data);
            Paging(bResize, CurrentPageNo, reportView);
            $('#LandingGridBody' + DashletId).trigger('click');
            //$.material.init();
        },
        error: function (data) {
            GLOBAL.LoadingEnd();
            COMMON.prototype.showMessage("Error,GetAllRecords");
        }
    });

}
//Landing Top Script End

//Search Related Data Start
function GetCustomMenuData(id, url) {
    $.ajax({
        url: url,
        type: 'POST',
        data: {},
        dataType: "html",
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            $("#divTreeMenu").html("");
            $("#divTreeMenu").html(data);
            $('#tree2').treed({ openedClass: 'gminus icon-collepse', closedClass: 'gplus icon-expand' });
            //$('#tree2').treed({ openedClass: 'glyphicon-folder-open', closedClass: 'glyphicon-folder-close' });
            //OnLoadOpenMenuTreeDefalt();
        },
        error: function (data) {
            COMMON.prototype.showMessage("Error,GetCustomMenuData");
        }
    });
}
function GetSelectedSearchOn(text, event) {
    //;
    if (event.checked) {
        var Search = document.getElementById('hndSearchOn').value;
        $('#hndSearchOn').val(Search + ',' + text)
    } else {
        var Search = document.getElementById('hndSearchOn').value.split(',');
        Search.splice($.inArray(text, Search), 1);
        var value = "";
        $("#chkSearchSelectAll").attr('checked', false);
        for (var i = 0; i < Search.length; i++) {
            value = value + ',' + Search[i];
        }
        $('#hndSearchOn').val(value.trim());
        //$('#chkSearchSelectAll').checked = false;
    }

}
function chkSearchSelectAllClcik(event) {
    //;
    if (event.checked) {
        $(".chkSearchSelect").prop('checked', true);
        var id = document.getElementById('olSearch');
        var list = $(id).find('li');
        var length = list.length;
        var value = "";
        for (var i = 0; i < length; i++) {
            value = value + ',' + $(list[i]).find('input')[0].value;
        }
        $('#hndSearchOn').val(value);
    }
    else {
        $(".chkSearchSelect").prop('checked', false);
        $("#hndSearchOn").val('');
    }
}
//Search Related Data End

function MinimiseTree() {
    $('#ihndtoggle').val(0)
    $('#inneraccordingdiv').removeClass('hidden')
    var dd = $('#dropDowns')[0].innerHTML;
    document.getElementById('spnhiererchy').innerHTML = dd;
    $('#divfirstsub').removeClass('col-lg-1 col-md-1 col-sm-12 col-xs-12  padding0 myspan');
    $('#divfirstsub').addClass('col-lg-2 col-md-2 col-sm-12 col-xs-12  padding0');
    $('#divSecondsub').addClass('col-lg-10 col-md-10 col-sm-12 col-xs-12 padding0');
    $('#divSecondsub').removeClass('col-lg-11 col-md-11 col-sm-12 col-xs-12 padding0 ');
    $('#divpanaltitle').addClass('panel-default');
    $('#oncheckaccorderan').addClass('glyphicon-backward');
    $('#oncheckaccorderan').removeClass('glyphicon-forward');
    $('#divColor').removeClass('divColorHeight');
    $('#divColor').removeClass('FRowColor');
}

function SearchOnOKclcik() {
    var activeDashletID = '';
    if (IsFromDashlet) {
        activeDashletID = GetActiveDashletId();
    }
    $('#divSearchMenu' + activeDashletID).toggle();
    var Searcharry = document.getElementById('hndSearchOn' + activeDashletID).value.trim();
    document.getElementById('hndSearchOnfinal' + activeDashletID).value = Searcharry;
}

function getSerachData(url, id) {
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({ iSearchId: id }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        success: function (data) {
            var divContainer = $('#divSearchMenu');
            divContainer.innerHTML(data);
        },
        error: function (data) {
            //;
            COMMON.prototype.showMessage("Error,getSerachData");
        }
    });
}
function setLandGridDataWidth(AutoWidths, CurrentDashletId) {
    $("#landgridData" + CurrentDashletId).css({ "width": "100px" });
    $($("#landgridData" + CurrentDashletId).find("th")).each(function (index) {
        $(this).css("width", AutoWidths[index]);
    });
}
function OnCheckResizeClick(td, url) {

    var CurrentDashletId = '';
    if (IsFromDashlet) {
        CurrentDashletId = GetActiveDashletId();
    }

    var bReport = $('#MasterRetrieval_IsReport' + CurrentDashletId).val() == "True" ? true : false;
    $("#landgridData" + CurrentDashletId).css({ "width": "auto" });
    var AutoWidths = [];
    $($("#landgridData" + CurrentDashletId).find("th")).each(function (index) {

        if (index == 0 || index == 1 || index == 2)
            $(this).css("width", index == 0 && bReport == false ? "40px" : "70px");
        else
            $(this).css("width", "auto");
        AutoWidths.push($(this).width() + 20);
    });
    setTimeout(setLandGridDataWidth(AutoWidths, CurrentDashletId), 3000);

    //$("#landgridData").colResizable({ liveDrag: false });
    //$(".JCLRgrip").each(function (i) {
    //    $(this).css("left",leftPosition[i])
    //});
}

function CMBUserTypeMasterBlur() {
    debugger
    var activeDashlet = '';
    if (IsFromDashlet) {
        activeDashlet = GetActiveDashletId();
    }
    var element = document.getElementById("cmbUserTypeMaster" + activeDashlet);
    var url = GLOBAL.getContextPath("GetRowOnSearchLeave", "Landing", "Landing");
    var numberPattern = /\d+/g;
    var multipleTreeCounter = '';
    if (IsFromDashlet == false) {
        var multipleTreeCounter = $(element).closest('.clsdivSecondsub')[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();
    }
    var iSelectId = OPTIONCONTROL.getControlValue('cmbUserTypeMaster' + activeDashlet);
    if (iSelectId == "" || iSelectId <= 0) {
        return false;
    }
    //var url = 'Url.Action("GetRowOnSearchLeave", "Landing")';
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + activeDashlet + multipleTreeCounter + '').value;
    var iTreeId = document.getElementById('iTreeId' + activeDashlet).value;
    //  var getParentIdByName = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetParentIdOfMaster", "Landing", "Landing"), true, { strNameCode: OPTIONCONTROL.getControlText('cmbUserTypeMaster'), bSearchBy: false, iMasterTypeId: iMasterTypeId }, "JSON", false, "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    //
    var ocDataValue = OPTIONCONTROL.getControlData('cmbUserTypeMaster' + activeDashlet);
    var iparentlen = ocDataValue.length - 1;

    var i_ParentId = ocDataValue[iparentlen].iParentId == undefined ? ocDataValue[iparentlen].iparentid : ocDataValue[iparentlen].iParentId;
    if (i_ParentId == "" || parseInt(iTreeId) > 0) {
        i_ParentId = "0";
    }
    if (iTreeId == "") {
        iTreeId = "0";
    }
    //if (getParentIdByName.data.Data != null) {
    //    var i_ParentId = ocDataValue[2];//$('#hndTreeMaster' + multipleTreeCounter + '').val();
    //}
    //else {
    //    var i_ParentId = $('#hndTreeMaster' + multipleTreeCounter + '').val();
    //}

    // added this block to set the record with a checkmark if in case any restriction is applied and searchedrecord is not in the grid.--starts
    //var IdExistinTree = true;
    //if (i_ParentId != "0") {
    //    IdExistinTree = CheckIdExistInTree(i_ParentId);
    //}
    //if (IdExistinTree) {
    //    GetGridDataOnClick(i_ParentId, false, $('#tree2' + activeDashlet + multipleTreeCounter + ' li#' + i_ParentId + '').find('a.clsMasterName').text(), $('#tree2' + multipleTreeCounter + ' li#' + i_ParentId + '').find('a')[0], true);
    //}
    //else {
    //    document.getElementById('hndTreeMaster' + activeDashlet).value = i_ParentId;
    //}
    // added this block to set the record with a checkmark if in case any restriction is applied and searchedrecord is not in the grid.--ends
    ////
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({ SelectedID: iSelectId, iParentId: i_ParentId, m_iMasterTypeId: iMasterTypeId, i_TreeId: iTreeId, m_arrAccountProductTypeIds: null }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            debugger
            if (data != "" && data != null && data.length > 0) {
                url = GLOBAL.getContextPath("GridPartial", "Landing", "Landing");// '/Focus8W/Landing/Landing/GridPartial';
                //GotoSelectedPage(data[0], iMasterTypeId, url, false, false, true);
                //
                var IdExistinTree = true;
                if (i_ParentId != "0") {
                    IdExistinTree = CheckIdExistInTree(i_ParentId);
                }
                if (IdExistinTree) {
                    GetGridDataOnClick(i_ParentId, false, $('#tree2' + activeDashlet + multipleTreeCounter + ' li#' + i_ParentId + '').find('a.clsMasterName').text(), $('#tree2' + multipleTreeCounter + ' li#' + i_ParentId + '').find('a')[0], true,undefined, data[0], false);
                }
                else {
                    document.getElementById('hndTreeMaster' + activeDashlet).value = i_ParentId;
                }
                var id = $('#divgridpartial' + activeDashlet + multipleTreeCounter + '').find('.clslandgridData')[0]// document.getElementById('landgridData' + multipleTreeCounter + '');
                var row = $(id).find('tbody').find('tr');
                if (row[data[1]] == undefined)
                    return false;
                var p = row[data[1]].cells[7];
                if (p == undefined)
                    return;
                $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).prop("checked", true);
                $(row[data[1]]).addClass('textRedColor');
                var name = $(row[data[1]]).find('td.tdName');
                $(name).addClass('textBlackColor');
                document.getElementById('hndSelectedRowNo' + activeDashlet).value = data[1];
                $(row[data[1]]).addClass('FRowColor');
                var eve = {};
                eve.checked = true;
                var RowNo = document.getElementById('hndSelectedRowNo' + activeDashlet).value;
                GetRowDataOfGrid(RowNo, eve, 7, true);
                scrollIntoView($('.FRowColor').closest('tr'), "#divgridpartial", true);
                //var value = row[data[1]].cells[8].innerHTML.trim();
                //var ProdctorAccont = row[data[1]].cells[9].innerHTML.trim();
                //SaveRowIdValues(parseInt(value), ProdctorAccont);
                if ($("#iTreeId" + activeDashlet).val() == "" || $("#iTreeId" + activeDashlet).val() == null) {
                    //
                    GetAllRecords("", GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), $('#MasterRetrieval_IsReport').val());
                    GridrowidValues = [];
                    GridrowidValues.push(parseInt(OPTIONCONTROL.getControlValue(cmbUserTypeMaster)));
                    GetSelectedDataOfGrid();
                }
                //   OPTIONCONTROL.setControlValue("cmbUserTypeMaster", "0");
            } else {
                if (data.length == "0") {
                    //  COMMON.prototype.showMessage("Master Not found");
                }
            }
        },
        error: function (data) {
            //   //;
            COMMON.prototype.showMessage("Error,CMBUserTypeMasterBlur");
        }
    });

}

function CheckAccorderanClick(ele) {
    debugger
    console.log('CheckAccorderanClick started: ', new Date().toLocaleString());
    var numberPattern = /\d+/g;
    var NumId = '';
    var CurrentDashletId = ''
    if (IsFromDashlet == false) {
        NumId = (ele === '' || ele == undefined) ? '' : ($(ele)[0] == undefined ? ele : ($(ele)[0].id.match(numberPattern) == null ? "" : $(ele)[0].id.match(numberPattern)));
    }
    else if (IsFromDashlet) {
        CurrentDashletId = GetActiveDashletId();
    }
    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
    var sMasterName = $("#divLanding" + CurrentDashletId).attr('data-mastertypename');
    if ($('#treeNavigation' + CurrentDashletId + ' ol').find('li').length == 0) {
        $('#treeNavigation' + CurrentDashletId).html('');
        var bgReport = ($('#MasterRetrieval_IsReport' + CurrentDashletId).val() == "False" && IsPartialView == 'False') ? false : true;
        if (bgReport == true) {
            $('#treeNavigation' + CurrentDashletId).append('<ol id="ol_treeNavigation" class="breadcrumb" style="background-color:#ECECEC;margin-left: -15px;padding:7px;"></ol>');
        } else {
            $('#treeNavigation' + CurrentDashletId).append('<ol id="ol_treeNavigation" class="breadcrumb" style="background-color:white;margin-left: -15px;padding:7px;"></ol>');
        }
        $('#treeNavigation' + CurrentDashletId + 'ol').append('<li class="theme_color-inverse" style="font-weight:bold;"> <span class="theme_icon-color"> ' + sMasterName + '</span> </li>')
    }
    if ($('#ihndtoggle' + CurrentDashletId + NumId).val() == 0) {
        $('#tree2' + CurrentDashletId + NumId).addClass('hidden')
        $('#ihndtoggle' + CurrentDashletId + NumId).val(1);

        $('#treeCombo' + CurrentDashletId + NumId).addClass('hidden');
        $('#treeView' + CurrentDashletId + NumId).addClass('hidden');
        //$('#dropDowns' + CurrentDashletId + NumId).addClass('hidden');
        document.getElementById('spnhiererchy' + CurrentDashletId + NumId).innerHTML = "";
        if ($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True' || ($(window).width() < 1026 && $(window).width() > 1020)) {
            $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-4 col-md-4 col-sm-12 col-xs-12 padding0');
            $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
            $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0');
            $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-11 col-md-11 col-sm-12 col-xs-12  padding0 ');
        }
        //else {
            //commentted as it is not required for first landing ,innerlanding is handling by isreportload function.
            //if ($('#hdnsideBar').val() == '1') {
            //    $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-4 col-md-4 col-sm-12 col-xs-12 padding0');
            //    $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-5 col-md-5 col-sm-12 col-xs-12  padding0');
            //    $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
            //    $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0 ');
            //}
            else {
                $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-3 col-md-3 col-sm-12 col-xs-12 padding0');
                $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
                $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0');
                $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-10 col-md-10 col-sm-12 col-xs-12  padding0 ');
            }
            //if (NumId == null || NumId == '' || NumId == undefined) {
            //    if ($('#hdnsideBar').val() == '1') {
            //        $('#divfirstsub' + CurrentDashletId).removeClass('col-lg-4 col-md-4 col-sm-12 col-xs-12 padding0');
            //        $('#divSecondsub' + CurrentDashletId).removeClass('col-lg-5 col-md-5 col-sm-12 col-xs-12  padding0');
            //        $('#divfirstsub' + CurrentDashletId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
            //        $('#divSecondsub' + CurrentDashletId).addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0 ');
            //    }
            //    else {
            //        $('#divfirstsub' + CurrentDashletId).removeClass('col-lg-3 col-md-3 col-sm-12 col-xs-12 padding0');
            //        $('#divfirstsub' + CurrentDashletId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
            //        $('#divSecondsub' + CurrentDashletId).removeClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0');
            //        $('#divSecondsub' + CurrentDashletId).addClass('col-lg-10 col-md-10 col-sm-12 col-xs-12  padding0 ');
            //    }
            //}
        
        document.getElementById('oncheckaccorderan' + CurrentDashletId + NumId).classList.remove('icon-collapse');
        document.getElementById('oncheckaccorderan' + CurrentDashletId + NumId).classList.add('icon-expand');
        $('#divpanaltitle' + CurrentDashletId + NumId).removeClass('panel-default');
        $('#divColor' + CurrentDashletId + NumId).addClass('divColorHeight');
        $('#divClor' + CurrentDashletId + NumId).css({ 'padding-top': '5px;' })
        $('#divClor' + CurrentDashletId + NumId).css({ 'background-color': '#222D32' })
        if ($("#hdnLanguageId").val() == "1") {
          // ($('#hndReportView' + CurrentDashletId + NumId).val() != "" || IsPartialView == 'True') ? $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '20px', 'padding-top': '0px', 'margin-right': '' }) : $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-right': '20px', 'padding-top': '0px', 'margin-left': '' })
        }
        else {
            ($('#hndReportView' + CurrentDashletId + NumId).val() != "" || IsPartialView == 'True') ? $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '-5px', 'padding-top': '0px' }) : $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '5px', 'padding-top': '0px' })
        }
        $('#divpanaltitle' + CurrentDashletId + NumId).css({ 'padding-top': '14px' });
        ($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True') ? $('#divLanding' + CurrentDashletId + NumId).css('width', '101%') : ($('#hdnsideBar' + CurrentDashletId + NumId).val() == '0' ? $('#divLanding' + CurrentDashletId + NumId).css('width', '101%') : $('#divLanding' + CurrentDashletId + NumId).css('width', ''))
        if (($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True') && $("#hdnLanguageId").val() == "1") {
            $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-right': '-15px', 'padding-top': '0px' })
        }
        if ($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True' || ($(window).width() < 1026 && $(window).width() > 1020)) {
           // $('#divSecondsub' + CurrentDashletId + NumId).css('width', '97%')
            $('#divfirstsub' + CurrentDashletId + NumId).css('width', '6%')
        }
        else
        {
            $('#divSecondsub' + CurrentDashletId + NumId).css('width', '92%')
           $('#divfirstsub' + CurrentDashletId + NumId).css('width', '4%')

        }
        if ($(window).width() <= 480) {
            $('#divSecondsub' + CurrentDashletId + NumId).css('width', '91%')
            $('#divfirstsub' + CurrentDashletId + NumId).css('width', '9%')
        }
        if ($(window).width() < 1024) {
            COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
        }
        $('#tree2' + CurrentDashletId + NumId).css('display', 'none');


    } else {
        $('#ihndtoggle' + CurrentDashletId + NumId).val(0)
        $('#tree2' + CurrentDashletId + NumId).removeClass('hidden')


        $('#treeCombo' + CurrentDashletId + NumId).removeClass('hidden');
        $('#treeView' + CurrentDashletId + NumId).removeClass('hidden');
  
        //$('#dropDowns' + CurrentDashletId + NumId).removeClass('hidden');
        var dd = $('#dropDowns' + CurrentDashletId + NumId)[0].innerHTML;
        //document.getElementById('spnhiererchy' + CurrentDashletId + NumId).innerHTML = dd;
        if (($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True') || ($(window).width() < 1026 && $(window).width() > 1020)) {
            $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-1 col-md-1 col-lg-3 col-md-3 col-sm-12 col-xs-12 hidden padding0 myspan');
            $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-11 col-md-11 col-lg-9 col-md-9 col-sm-12 col-xs-12  padding0');
            $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-4 col-md-4 col-sm-12 col-xs-12 padding0');
            $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0');
        }
        else {
            //if ($('#hdnsideBar').val() == '0') {
                $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-1 col-md-1 col-lg-2 col-md-2 col-lg-4 col-md-4 col-sm-12 col-xs-12 hidden padding0 myspan');
                $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-8 col-md-8 col-lg-10 col-md-10  col-sm-12 col-xs-12  padding0');
                $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-3 col-md-3 col-sm-12 col-xs-12 padding0');
                $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0');
            //}
        }
        document.getElementById('oncheckaccorderan').classList.remove('icon-expand');
        document.getElementById('oncheckaccorderan').classList.add('icon-collapse');
        $('#divpanaltitle' + CurrentDashletId + NumId).addClass('panel-default');
        $('#divColor' + CurrentDashletId + NumId).removeClass('divColorHeight');
        $('#divClor' + CurrentDashletId + NumId).css({ 'padding-top': '5px;' });
        $('#divClor' + CurrentDashletId + NumId).css({ 'background-color': '#222D32', 'height': '50px' });
        if ($("#hdnLanguageId").val() == "1") {
            $('#divpanaltitle' + CurrentDashletId + NumId).css({ 'padding-right': '15px', 'padding-left': '5px' });
        }
        else {
            if ($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True')
                $('#divpanaltitle' + CurrentDashletId + NumId).css({ 'padding': '14px 0px' });
        }
        $('#divpanaltitle' + CurrentDashletId + NumId).css({ 'padding-top': '14px'});
        ($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True') ? $('#divLanding' + CurrentDashletId + NumId).css('width', '101%') : ($('#hdnsideBar' + CurrentDashletId + NumId).val() == '0' ? $('#divLanding' + CurrentDashletId + NumId).css('width', '101%') : $('#divLanding' + CurrentDashletId + NumId).css('width', ''))
        //        $('#divLanding').css('width', '101%')

        if(!($('#hndReportView' + CurrentDashletId + NumId).val() == "True" || IsPartialView == 'True'))
        {
            if ($('#hdnsideBar').val() == '1') {
                $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0 myspan');
                $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-8 col-md-8 col-sm-12 col-xs-12  padding0');
                $('#divfirstsub' + CurrentDashletId + NumId).addClass('padding0 col-lg-4 col-md-4 col-sm-12 col-xs-12');
                $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-5 col-md-5 col-sm-12 col-xs-12  padding0');
                $('#divSecondsub' + CurrentDashletId + NumId).css('width', '65%');
            }
            else {
                $('#divSecondsub' + CurrentDashletId + NumId).css('width', '71%');
            }
            
        }
        else
        {
            $('#InfoPaneldv').removeClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
            $('#InfoPaneldv').hide();
        }
        
        $('#divfirstsub' + CurrentDashletId + NumId).css('width', '')
        $('#tree2' + CurrentDashletId + NumId).css('display', 'block');
        //if ($("#hdnLanguageId").val() == "1") {
        //    $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-right': '20px', 'padding-top': '0px', 'margin-left': '' })
        //} else {
        //    $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '20px', 'padding-top': '0px' })
        //}
        $('#divSecondsub' + CurrentDashletId).css({ "height": 'auto' });
    }
    if ($.isFunction(MASTERENTRYSCREEN.autocollapse)) {
        MASTERENTRYSCREEN.autocollapse();
    }
    console.log('CheckAccorderanClick ended: ', new Date().toLocaleString());
}

function IsReportLoad(NumId) {
    debugger
    var CurrentDashletId = '';
    if (IsFromDashlet) {
        CurrentDashletId = GetActiveDashletId();
    }
    $('#ihndtoggle' + CurrentDashletId + NumId).val(1)
    document.getElementById('spnhiererchy' + CurrentDashletId + NumId).innerHTML = "";
    if (NumId != '' && NumId != undefined && NumId != null)
    {
        $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-2 col-md-2 col-sm-12 col-xs-12 padding0 hidden');
        $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-10 col-md-10 col-sm-12 col-xs-12 padding0');
        $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
        $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-11 col-md-11 col-sm-12 col-xs-12  padding0');
    }
    //$('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-2 col-md-2 col-sm-12 col-xs-12 padding0 hidden');
    //$('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
    //$('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-10 col-md-10 col-sm-12 col-xs-12 padding0');
    //$('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-11 col-md-11 col-sm-12 col-xs-12  padding0 ');
    $('#divpanaltitle' + CurrentDashletId + NumId).removeClass('panel-default');
    $('#divColor' + CurrentDashletId + NumId).addClass('divColorHeight');
    //   $('#oncheckaccorderan').css({ 'color': 'black' })
    $('#divClor' + CurrentDashletId + NumId).css({ 'padding-top': '5px;' })
    $('#divClor' + CurrentDashletId + NumId).css({ 'background-color': '#222D32' })
    //$('#hndReportView' + NumId).val() == "True" ? $('#divaccorderan' + NumId).css({ 'margin-left': '-5px', 'padding-top': '0px' }) : $('#divaccorderan' + NumId).css({ 'margin-left': '5px', 'padding-top': '0px' })
    if ($("#hdnLanguageId").val() == "1") {
       // $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '20px', 'padding-top': '0px', 'margin-right': '' })
    }
    else {
        $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '-5px', 'padding-top': '0px' })
    }
    $('#divpanaltitle' + CurrentDashletId + NumId).css({ 'padding-top': '14px' });
    $('#divLanding' + CurrentDashletId + NumId).css('width', '101%')
    //$('#divSecondsub' + CurrentDashletId + NumId).css('width', '97%')
    //$('#divfirstsub' + CurrentDashletId + NumId).css('width', '3%')
    $('#tree2' + CurrentDashletId + NumId).css('display', 'none');

    //if ($('#hndReportView').val() == "True") {
    NumId == '' ? $('#ihndtoggle' + CurrentDashletId + NumId).val(1) : $('#ihndtoggle' + CurrentDashletId + NumId).val(0);

    CheckAccorderanClick(NumId);
    // $("#CheckAccorderanClick").trigger("click");
    //
    var icon = $('#tree2' + CurrentDashletId + NumId + ' ul li').find('.indicator')
    var accountIcon = $('#tree2' + CurrentDashletId + NumId + ' li').find('.indicator')
    if ($(icon).hasClass('gplus icon-expand') || $(accountIcon).hasClass('gplus icon-expand')) {
        $(icon).addClass('gminus icon-collepse');
        $(icon).removeClass('gplus icon-expand');
        //$(tagli[0]).children().children().toggleClass('glyphicon-minus-sign' + " " + 'glyphicon-plus-sign');
        //  $(tagli).children().children().toggle();
        $('#tree2' + CurrentDashletId + NumId + ' ul li').toggle();
    }
    $('#tree2' + CurrentDashletId + NumId + ' li#0').find('.indicator').removeClass('gplus icon-expand');
    $('#tree2' + CurrentDashletId + NumId + ' li#0').find('.indicator').addClass('gminus icon-collepse');
    //$('#tree2 ul li')[0].find('a').addClass('theme_color-inverse')
    $($($('#tree2' + CurrentDashletId + NumId + ' li')[0]).find('a.clsMasterName')[0]).addClass('theme_color-inverse')
    //   $('#li_SearchAccnt').css('width', '180px')

    //}
    if (gridSelectedRow == undefined) {
        $('#LandingGridBody' + CurrentDashletId).trigger('click');
    }
    $('#divpanaltitle').css({'padding-bottom': '0px !important'});
}



function IsReportLoadForPartials(NumId) {
    debugger
    var CurrentDashletId = '';
    if (IsFromDashlet) {
        CurrentDashletId = GetActiveDashletId();
    }
    $('#ihndtoggle' + CurrentDashletId + NumId).val(1)
    document.getElementById('spnhiererchy' + NumId).innerHTML = "";
    $('#divfirstsub' + CurrentDashletId + NumId).removeClass('col-lg-2 col-md-2 col-sm-12 col-xs-12 padding0 hidden');
    $('#divfirstsub' + CurrentDashletId + NumId).addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0  myspan');
    $('#divSecondsub' + CurrentDashletId + NumId).removeClass('col-lg-10 col-md-10 col-sm-12 col-xs-12 padding0');
    $('#divSecondsub' + CurrentDashletId + NumId).addClass('col-lg-11 col-md-11 col-sm-12 col-xs-12  padding0 ');
    $('#divpanaltitle' + CurrentDashletId + NumId).removeClass('panel-default');
    $('#divColor' + CurrentDashletId + NumId).addClass('divColorHeight');
    $('#divClor' + CurrentDashletId + NumId).css({ 'padding-top': '5px;' })
    //$('#divClor' + CurrentDashletId + NumId).css({ 'background-color': '#222D32' })
    if ($("#hdnLanguageId").val() == "1") {
      //  $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '20px', 'padding-top': '0px', 'margin-right': '' })
    }
    else {
        $('#divaccorderan' + CurrentDashletId + NumId).css({ 'margin-left': '-5px', 'padding-top': '0px' })
    }
    $('#divpanaltitle' + CurrentDashletId + NumId).css({ 'padding-top': '14px' });
    $('#divLanding' + CurrentDashletId + NumId).css('width', '101%')
    //$('#divSecondsub' + CurrentDashletId + NumId).css('width', '97%')
    //$('#divfirstsub' + CurrentDashletId + NumId).css('width', '3%')
    NumId == '' ? $('#ihndtoggle' + CurrentDashletId + NumId).val(1) : $('#ihndtoggle' + CurrentDashletId + NumId).val(0);
    CheckAccorderanClick(NumId);

    if (gridSelectedRow == undefined) {
        $('#LandingGridBody' + CurrentDashletId).trigger('click');
    }
    $('#divpanaltitle').css({'padding-bottom':'0px'});
}


function ReportOrPartialTreeDesignFix(NumId) {
    //$('#tree2' + NumId).css('display', 'none');

    //NumId == '' ? $('#ihndtoggle' + NumId).val(1) : $('#ihndtoggle' + NumId).val(0);
    //CheckAccorderanClick(NumId);
    var CurrentDashletId = ''
    if (IsFromDashlet) {
        var ParentEle = GetLandingControlForDashlet(DashletId);
        CurrentDashletId = GetActiveDashletId();


    }
    else {
        var icon = $('#tree2' + CurrentDashletId + NumId + ' ul li').find('.indicator')
        var accountIcon = $('#tree2' + CurrentDashletId + NumId + ' li').find('.indicator')
        if ($(icon).hasClass('gplus icon-expand') || $(accountIcon).hasClass('gplus icon-expand')) {
            $(icon).addClass('gminus icon-collepse');
            $(icon).removeClass('gplus icon-expand');
            $('#tree2' + CurrentDashletId + NumId + ' ul li').toggle();
        }
        $('#tree2' + CurrentDashletId + NumId + ' li#0').find('.indicator').removeClass('gplus icon-expand');
        $('#tree2' + CurrentDashletId + NumId + ' li#0').find('.indicator').addClass('gminus icon-collepse');

        $($($('#tree2' + CurrentDashletId + NumId + ' li')[0]).find('a.clsMasterName')[0]).addClass('theme_color-inverse')

        //document.getElementById('treebottomborder').style.bottom = '166%';
    }

}

function IsReportLoadAsync(NumId) {
    $('#ihndtoggle' + NumId).val(1)
    document.getElementById('spnhiererchy' + NumId).innerHTML = "";
    $('#tree2' + NumId).css('display', 'none');
    NumId == '' ? $('#ihndtoggle' + NumId).val(1) : $('#ihndtoggle' + NumId).val(0);
    CheckAccorderanClick(NumId);
    var icon = $('#tree2' + NumId + ' ul li').find('.indicator')
    var accountIcon = $('#tree2' + NumId + ' li').find('.indicator')
    if ($(icon).hasClass('gplus icon-expand') || $(accountIcon).hasClass('gplus icon-expand')) {
        $(icon).addClass('gminus icon-collepse');
        $(icon).removeClass('gplus icon-expand');
        $('#tree2' + NumId + ' ul li').toggle();
    }
    $('#tree2' + NumId + ' li#0').find('.indicator').removeClass('gplus icon-expand');
    $('#tree2' + NumId + ' li#0').find('.indicator').addClass('gminus icon-collepse');
    $($($('#tree2' + NumId + ' li')[0]).find('a.clsMasterName')[0]).addClass('theme_color-inverse')
}

//Master Landing Screen script

function OnloadAndResizeMasterLanding() {
    if ($(window).width() < 1024) {
        //   //;
        $('#ihndtoggle').val(0);
        $("#oncheckaccorderan").trigger("click");
        $('#masterFirstDiv').css('width', '100%');
        $('#masterSecondDiv').css('width', '');

    }
}
function Ontoggle_ribbonClickMasterLanding(element) {
    //debugger
    //loads slider for first time only    
    if (element.getAttribute('data-IsFirstToggle') == 'false' && element.getAttribute('data-content') == '0') {
        InvokeSlider();
    }
    $('#Main').toggleClass('hidden');

    //  $("#ulRibbonControl").css("width", "");
    if ($('#toggle_ribbon').attr('data-content') == '1') {
        $('#toggle_ribbon').attr('data-content', '0');
        $('#toggle_ribbon').removeClass('glyphicon-menu-up')
        $('#toggle_ribbon').addClass('glyphicon-menu-down')
        $('#toggle_ribbon').attr('data-IsFirstToggle', 'true');
    }
    else {
        $('#toggle_ribbon').attr('data-content', '1');
        $('#toggle_ribbon').addClass('glyphicon-menu-up')
        $('#toggle_ribbon').removeClass('glyphicon-menu-down')
        $('#toggle_ribbon').attr('data-IsFirstToggle', 'true');
    }
    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");

}
function InvokeSlider() {
    var LangugageId = parseInt($("#hdnLanguageId").val());
    $('#ulRibbonControl').lightSlider({
        autoWidth: true,
        loop: false,
        keyPress: true,
        adaptiveHeight: true,
        rtl: (LangugageId == 1 || LangugageId == 2) ? true : false,//@for arabic and parsian
        onSliderLoad: function () {
            //debugger
            $('#ulRibbonControl').removeClass('cS-hidden');
            if (LangugageId == 1 || LangugageId == 2) {
                $($('#ulRibbonControl').find("li.lslide")).toggleClass("lslide rslide");
            }
        }
    });
    if (LangugageId == 1 || LangugageId == 2) {
        $(".lSPrev").addClass("myPrev");
        $(".lSNext").addClass("myNext");
    }
    $('.liAuthorize,.lSPager').hide();
}
function onBtnpropertiesClick(ele) {

    var url = GLOBAL.getContextPath("getProductSetTypeProperties", "Landing", "Landing");//
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    document.getElementById('hndSelectedRowNo').value = "0";
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    if (Row == undefined) {
        SelectedRowNo = "0";
        Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        $(Row).addClass('FRowColor');
    }
    if (SelectedRowNo != '') {
        var isGroup = $($(Row)).find('td')[0].innerHTML.trim() == 'True' ? true : false;
        btnProductPropertiesOrSetType(url, '1', isGroup)
    }
    else if ($('#tree2 li a').hasClass('theme_color-inverse')) {
        if ($('#tree2 li').find('.theme_color-inverse:last').closest('li')[0].id != "0") {
            btnProductPropertiesOrSetType(url, '1', true)
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
    }
}
function btnProductPropertiesOrSetType(url, prodOrSetType, isGroup) {
    divLandingGridSuccessHTML = $('#divSecondsub').html();
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var SelectedRowNo = $("#landgridData").find("tr").length > 0 ? $("#landgridData").find("tr.FRowColor").attr("data-rowindex") : document.getElementById('hndSelectedRowNo').value;
    if (SelectedRowNo != '') {
        var id = document.getElementById('landgridData');
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var iMasterId = $(Row).find('td')[8].innerHTML.trim();
        iMasterId = getEnglishDigits(iMasterId);
        if (iMasterTypeId == '1' || iMasterTypeId == '50' || iMasterTypeId == '2') {
            var ProdOrAcntType = $(Row).find('td')[9].innerHTML.trim();
            var ValuationType = (iMasterTypeId == '1' || iMasterTypeId == '50') ? "0" : $(Row).find('td')[10].innerHTML.trim();
        }
        else {
            var ProdOrAcntType = "0";
            var ValuationType = "0";
        }
    }
    else {
        var iMasterId = $('#tree2 li').find('.theme_color-inverse').last().closest('li')[0].id;
        var ProdOrAcntType = $('#tree2 li').find('.theme_color-inverse').last().closest('li').attr('accountorproducttype');
        var ValuationType = "0";
    }
    var masterName = $("#hdnMasterTypeName").val();
    $("#divSecondsub").removeClass('overflowNone');
    if (iMasterId != '0') {
        NETWORK.executeServerMethod(GLOBAL.getContextPath("getProductSetTypeProperties", "Landing", "Landing"), true, { iMasterId: iMasterId, iMasterTypeId: iMasterTypeId, masterName: masterName, prodOrSetType: prodOrSetType, isGroup: isGroup, ProdOrAcntType: ProdOrAcntType, ValuationType: ValuationType }, "HTML", true, "PropertiesSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", "div_Properties");
    }
}
function PropertiesSuccess(bs, data,tag) {
    debugger  
    var bRefresh = $('#divSecondsub').attr("bRefresh") == undefined ? false : $('#divSecondsub').attr("bRefresh");
    if (bs == true && data != null) {
        if (bFromBackTrackFirstCall == true && bRefresh == false)
            divLandingGridSuccessHTML = $('#divSecondsub').html();
        if (tag == "EntryScreen") {
         $('#divSecondsub').html('');
         $('#divSecondsub').html(data);
        }
        if (tag != undefined && tag != null && tag.length > 0)
        {
            if(tag=='div_Properties')
            {
                $('.divcontents').html('');
                $('#divMasterProperties').html('');
                $('#div_PropertiesContent').html(data);
                $('#div_CommonModal').modal('show');
            }
            if (tag == 'configuremaster')
            {
                $('.divcontents').html('');
                $('#div_CustomizeMaster_modalContents').html('');
                $('#div_CustomizeMaster').html(data);
                $('#div_CustomizeMasterModal').modal('show');

            }
            if(tag=='div_MasterSorting')
            {
                $('.divcontents').html('');
                $('#masterSortingModel').html('');
                $('#div_MasterSorting').html(data);
                $('#div_CommonModal').modal('show');

            }
            if (tag == 'div_BackTrack') {
                $('.divcontents').html('');
                // $('#backTrackModal').html('');
                $('#div_BackTrack').html(data);
                $('#div_CommonModal').modal('show');

            }
            if (tag == 'div_MonthBacktrack') {
                $('.divcontents').html('');
               // $('#monthBackTrackModal').html('');
                $('#div_MonthBacktrack').html(data);
                $('#div_CommonModal').modal('show');

            }
            if (tag == 'div_Transfer') {
                $('.divcontents').html('');
                $('#transferModal').html('');
                $('#div_Transfer').html(data);
                $('#div_CommonModal').modal('show');

            }
            if(tag=='div_AlternateOrRelatedProduct')
            {
                $('.divcontents').html('');
                $('#AlternateOrRelatedProductModal').html('');
                $('#div_AlternateOrRelatedProduct').html(data);
                $('#div_CommonModal').modal('show');

            }
            if(tag=='div_MassUpdate')
            {
                $('.divcontents').html('');
                $('#massUpdateModal').html('');
                $('#div_MassUpdate').html(data);
                $('#div_CommonModal').modal('show');

            }
            if(tag=='div_UnitConversion')
            {
                //$('.divcontents').html('');
                //$('#div_UnitConversion').html(data);
                //$('#div_CommonModal').modal('show');

                $('.divcontents').html('');
                //$('#div_CustomizeMaster_modalContents').html('');
                $('#div_UnitConversion').html(data);
                $('#div_UnitConversionModal').modal('show');

            }
            if(tag=='div_AuthorizeInfo')
            {
                $('.divcontents').html('');
                $('#authInfoModal').html('');
                $('#div_AuthorizeInfo').html(data);
                $('#div_CommonModal').modal('show');
            }
            if (tag == 'div_AdvImportForMaster') {
                $('.divcontents').html('');
                $('#div_AdvImportForMaster').html(data);
                $('#div_CommonModal').modal('show');
            }
            if (tag == 'div_ManageCredit')
            {
                $('.divcontents').html('');
                $('#div_ManageCredit').html(data);
                $('#manageCreditModal').modal('show');
            }
            if (tag == 'div_DepartmentAppropriation') {
                $('.divcontents').html('');
                $('#div_DepartmentAppropriation').html(data);
                $('#div_CommonModal').modal('show');
            }
        }
       
        
        $('#Main').addClass('hidden');
        $('#divfirstsub,#ulCommonlyUsedRibbon').css({ 'pointer-events': 'none' });
        $('#divaccorderan').css({ 'pointer-events': 'auto' });
        $("#ulCommonlyUsedRibbon").addClass('grey');
        $($('#divfirstsub').find("a,select")).each(function () {
            $(this).addClass('grey');
        });
        // $('#divaccorderan').prop('disabled', false);
        //  $("#GenerateNewMasterModel").modal('show');
        if ($('.modal-backdrop').length > 0) {
            $('.modal-backdrop').removeClass('modal-backdrop');
        }
        if (backtrackSelectedyear != "" && $('#ddlBackrTrackFilter').length > 0) {
            $('#ddlBackrTrackFilter').val(backtrackSelectedyear);
        }
        if ($('#btnMasterCancel').length > 0) {
            $('#btnMasterCancel').css('display', 'block');
            $('#ucCancel').hide();
        }
        COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
    }
    else {
        COMMON.prototype.showMessage('Error.')
    }
}
function onSetTypeClick(ele) {

    var url = GLOBAL.getContextPath("getProductSetTypeProperties", "Landing", "Landing");
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    if (Row == undefined) {
        SelectedRowNo = "0";
        document.getElementById('hndSelectedRowNo').value = "0";
        Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        $(Row).addClass('FRowColor');
    }
    if (SelectedRowNo != '') {
        var isGroup = $($(Row)).find('td')[0].innerHTML.trim() == 'True' ? true : false;
        btnProductPropertiesOrSetType(url, '2', isGroup)
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
    }
}
function onModifierClick() {
    var url = GLOBAL.getContextPath("getProductModifier", "Landing", "Landing");
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    SelectedRowNo = SelectedRowNo == "" ? "0" : SelectedRowNo;
    if (SelectedRowNo != "") {
        var id = document.getElementById('landgridData');
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var iProductTypeId = $(Row).find('td')[9].innerHTML.trim();
        if (iProductTypeId != 6) {
            var iProductName = $(Row).find('td')[11].innerHTML.trim();
            var iMasterId = $(Row).find('td')[8].innerHTML.trim();
            iMasterId = getEnglishDigits(iMasterId);
            $.ajax({
                url: url,
                type: "GET",
                contentType: 'application/json; charset=utf-8',
                datatype: "JSON",
                data: { iMasterId: iMasterId, iProductName: iProductName, mastertypeId: iMasterTypeId },
                traditional: true,
                success: function (data) {
                    //
                    if (data != "") {
                        divLandingGridSuccessHTML = $('#divSecondsub').html();
                        PropertiesSuccess(true, data);
                    }
                    else {
                        COMMON.prototype.showMessage("error")
                    }

                }

            });

        }
        else {
            COMMON.prototype.showMessage(getResourceValue("msgcannotassignmodifiertoproductProductTypeModifier", GetMasterResourceMessages));
        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
    }
}

function btnSideBarClick(element) {
    debugger
    if ($("#div_Properties").attr("data-viewinfopanel") == "False") {
        COMMON.prototype.showMessage(getResourceValue("msgUserdoesnothavepermission", GetMasterResourceMessages))
        return false;
    }

    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
    if ($('#hdnsideBar').val() == 0) {
        $('#hdnsideBar').val("1");
        $('#Main').css({ 'width': '100%' });
        $('#divLanding').removeClass('col-lg-12 col-md-12 col-sm-12 col-xs-12');
        $('#divLanding').addClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
        $('#divLanding').css('width', '');
        //  $('#infoPanelSidebarDiv').removeClass('col-lg-1 col-md-1 col-sm-12 col-xs-12');
        $('#infoPanelSidebarDiv').addClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
        $('#infoPanelSidebarDiv').show();
        //  $(element).find('i').toggleClass('fa fa-caret-left fa fa-caret-right');
        $('#divInfoPanel, #sidebar_paging_div').show();
        //$('#infoPanelBtnsAddRemoveDiv').show();
        
        if ($('#ihndtoggle').val() == '0') {
            $('#divfirstsub').removeClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
            $('#divfirstsub').addClass('col-lg-4 col-md-4 col-sm-12 col-xs-12');

            $('#divSecondsub').removeClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');
            $('#divSecondsub').addClass('col-lg-5 col-md-5 col-sm-12 col-xs-12');
            $('#divSecondsub').css({ 'width': '65%' });
        }
        


            //$('#divSecondsub').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
            //$('#divSecondsub').addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');

        $('#InfoPaneldv').addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
            //$('#InfoPaneldv').show();
        $('#InfoPaneldv').hide();

        $('#divInfoBtns,#btnsideBar').hide();
        $('.divPanelData').hide();
        $(element).removeClass('hidePanel');
        InfoPanelPermissions();
        }
        else {
        $('#hdnsideBar').val("0");
        $('#Main').css({ 'width': '101%' });
        $('#divLanding').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
        $('#divLanding').addClass('col-lg-12 col-md-12 col-sm-12 col-xs-12');
        $('#divLanding').css('width', '101%');
        $('#infoPanelSidebarDiv').removeClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
        $('#infoPanelSidebarDiv').hide();

        $('#divSecondsub').removeClass('col-lg-5 col-md-5 col-sm-12 col-xs-12');
        $('#InfoPaneldv').removeClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
        $('#divSecondsub').addClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
        $('#divSecondsub').css('width', '75%')
        $('#divfirstsub').removeClass('col-lg-4 col-md-4 col-sm-12 col-xs-12');
        $('#divfirstsub').addClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
        $('#InfoPaneldv').hide();
            //  $(element).find('i').toggleClass('fa fa-caret-left fa fa-caret-right');
        $('#divInfoPanel, #sidebar_paging_div').hide();
            //$('#infoPanelBtnsAddRemoveDiv').hide();
        $('#divInfoBtns,#btnsideBar').show();
        $(element).addClass('hidePanel');

    }
}

function DisplayInfoPanelBlock(element)
{
    debugger
    if ($('#hdnsideBar').val() == 1)
    {
        $('#hdnsideBar').val("0");
        $('#Main').css({ 'width': '101%' });
        $('#divLanding').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
        $('#divLanding').addClass('col-lg-12 col-md-12 col-sm-12 col-xs-12');
        $('#divLanding').css('width', '101%');
        $('#infoPanelSidebarDiv').removeClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
        $('#infoPanelSidebarDiv').hide();
        
        if ($('#ihndtoggle').val() == '0')
        {
            $('#divSecondsub').removeClass('col-lg-5 col-md-5 col-sm-12 col-xs-12');
            $('#InfoPaneldv').removeClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
            $('#divSecondsub').addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');
            $('#divSecondsub').css('width', '75%');
            $('#divfirstsub').removeClass('col-lg-4 col-md-4 col-sm-12 col-xs-12');
            $('#divfirstsub').addClass('col-lg-3 col-md-3 col-sm-12 col-xs-12');
            document.getElementById('divSecondsub').style.width = '71%';
        }
        else
        {
            $('#divSecondsub').removeClass('col-lg-5 col-md-5 col-sm-12 col-xs-12');
            $('#divSecondsub').removeClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');
            $('#divSecondsub').addClass('col-lg-10 col-md-10 col-sm-12 col-xs-12');
            $('#divSecondsub').css('width', '92%');
        }
        $('#InfoPaneldv').hide();
        //  $(element).find('i').toggleClass('fa fa-caret-left fa fa-caret-right');
        $('#divInfoPanel, #sidebar_paging_div').hide();
        //$('#infoPanelBtnsAddRemoveDiv').hide();
        $('#divInfoBtns,#btnsideBar').show();
        $(element).addClass('hidePanel');


        document.getElementById('InfoPaneldv').style.display = 'block';

        //$('#divSecondsub').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
        //$('#divSecondsub').addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');
        $('#InfoPaneldv').addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
        
    }
}

function onAuthorizeClsClick(ele) {
    //
    debugger
    var AuthStatusEle = document.getElementById('hdnAuthStaus');
    if (AuthStatusEle != null) {
        if (AuthStatusEle.value == "1" || AuthStatusEle.value == "4") {
            COMMON.prototype.showMessage("This record is already authorized");
            return;
        }
        else if (AuthStatusEle.value == "2" || AuthStatusEle.value == "4") {
            COMMON.prototype.showMessage("This record is already rejected");
            return;
        }

    }
    var url = GLOBAL.getContextPath("getMasterAuthorization", "Landing", "Landing");
    var authValue = $(ele).data().content;
    var authName = $(ele).data().name;
    var masterTypeId = $(ele).data().mastertypeid;
    if ($(ele)[0].dataset.masterid != undefined) {
        GridrowidValues.push($(ele)[0].dataset.masterid);
        //AuthorizationClick(authName, authValue, url, GridrowidValues, masterTypeId);
        CheckAuthRemarksValidation(authName, authValue, url, GridrowidValues, masterTypeId);
    }
    else if ($('#id_showAllUnAuth').hasClass("EnableAuthBtns")) {
        if (GridrowidValues != '') {
            //AuthorizationClick(authName, authValue, url, GridrowidValues, masterTypeId)
            CheckAuthRemarksValidation(authName, authValue, url, GridrowidValues, masterTypeId);
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        }
    }
}

function AuthorizationClick(authName, authValue, url, checkedRows, masterTypeId) {
    $.ajax({
        url: url,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { AuthValue: authValue, AuthName: authName, CheckedRows: checkedRows, MasterTypeId: masterTypeId },
        traditional: true,
        success: function (data) {
            //
            if (data != "") {
                $('.divcontents').html('');
                $('#div_Authorize').html(data)
                $('#div_CommonModal').modal('show');
               // $("#authorizationModal").modal('show');
                //if ($('.modal-backdrop').length > 0) {
                //    $('.modal-backdrop').removeClass('modal-backdrop');
                //}
                // PropertiesSuccess(true, data);
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}

function SaveAuth(url, authValue, authmsg, masterTypeId) {
    var mastertypeid = masterTypeId;// document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ mastertypeId: mastertypeid, strAuthorizationReason: authmsg, iStatus: authValue, checkedRows: GridrowidValues }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //    debugger
            if (data != "") {
                // $('#authorizationModal').modal('hide');
                GridrowidValues = [];
                if (getResourceValue("msgAuthorizatoinSaveSuccessfully", GetMasterResourceMessages) == "") {
                    COMMON.prototype.showMessage(getResourceValue("msgAuthorizatoinSaveSuccessfully", GetMasterEntryResourceMessages));
                } else {
                    COMMON.prototype.showMessage(getResourceValue("msgAuthorizatoinSaveSuccessfully", GetMasterResourceMessages));
                }

                if ($("#divSecondsub").length > 0) {
                    if ($("#GenerateNewMasterModel").length > 0) {
                        var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                        divLandingGrid(m_MasterTypeId);
                    }
                    GetAllUnauthorizedRecords(true, GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), 'False');
                }
                else {
                    GLOBAL.gotoHomePage();
                }

            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });


}


function saveAuthorization(url, authMesg) {
    //  debugger
    var mastertypeid = $('#hdnMasterTypeId').val();
    var status = $('#hdnAuthValue').val();
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ mastertypeId: mastertypeid, strAuthorizationReason: authMesg, iStatus: status, checkedRows: GridrowidValues }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //    debugger
            if (data != "") {
                // $('#authorizationModal').modal('hide');
                GridrowidValues = [];
                if (getResourceValue("msgAuthorizatoinSaveSuccessfully", GetMasterResourceMessages) == "") {
                    COMMON.prototype.showMessage(getResourceValue("msgAuthorizatoinSaveSuccessfully", GetMasterEntryResourceMessages));
                } else {
                    COMMON.prototype.showMessage(getResourceValue("msgAuthorizatoinSaveSuccessfully", GetMasterResourceMessages));
                }
                if ($("#hdnAlertFound").val() == "True") {
                    LAYOUT.UpdateAlerts();
                }
                $("#authorizationModal").modal('hide');
                if ($('.modal-backdrop').length > 0) {
                    $('.modal-backdrop').removeClass('modal-backdrop');
                }
                HidePopUps();
                if ($("#divSecondsub").length > 0) {
                    if ($("#GenerateNewMasterModel").length > 0) {
                        var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                        divLandingGrid(m_MasterTypeId);
                    }
                    GetAllUnauthorizedRecords(true, GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), 'False');
                }
                else {
                    // REPORTVIEW.getDashBoard();
                    //  GLOBAL.pageRefresh();
                    GLOBAL.gotoHomePage();
                }
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });

}

function CheckAuthRemarksValidation(authName, authValue, url, checkedRows, masterTypeId) {
    var urlRemarks = GLOBAL.getContextPath("AuthorizationRemarksValidation", "Landing", "Landing");
    var authurl = url;
    $.ajax({
        url: urlRemarks,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { AuthValue: authValue, AuthName: authName, CheckedRows: checkedRows, MasterTypeId: masterTypeId },
        traditional: true,
        success: function (data) {
            //
            if (data != null && data.length > 0) {
                var IsAskRemarksOnApproval = data[0];
                var IsAskRemarksOnRejection = data[1];
                var IsApprRemarksMandatory = data[2];
                var IsRejectRemarksMandatory = data[3];
                if (authValue == 1 && IsAskRemarksOnApproval) {
                    AuthorizationClick(authName, authValue, authurl, GridrowidValues, masterTypeId, IsApprRemarksMandatory);
                }
                else if (authValue == 2 && IsAskRemarksOnRejection) {
                    AuthorizationClick(authName, authValue, authurl, GridrowidValues, masterTypeId, IsRejectRemarksMandatory);
                }
                else {
                    var saveurl = GLOBAL.getContextPath("saveMasterAuthorization", "Landing", "Landing");
                    SaveAuth(saveurl, authValue, "", masterTypeId);
                }
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}

function AuthInfoClick() {
    var url = GLOBAL.getContextPath("getAuthInfo", "Landing", "Landing");
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    if ((gridSelectedRow == '' || gridSelectedRow == undefined) && gridSelectedRow != 0) {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
    else {
        if (SelectedRowNo == '' || SelectedRowNo == undefined) {
            SelectedRowNo = gridSelectedRow;
        }
    }
    if (SelectedRowNo != "") {
        var id = document.getElementById('landgridData');
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var iMasterId = $(Row).find('td')[8].innerHTML.trim();
        iMasterId = getEnglishDigits(iMasterId);
        var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        $.ajax({
            url: url,
            type: "GET",
            contentType: 'application/json; charset=utf-8',
            datatype: "JSON",
            data: { iMasterTypeId: iMasterTypeId, iMasterId: iMasterId },
            success: function (data) {
                //
                if (data != "") {
                    //$('#div_AuthorizeInfo').html(data)
                    //$("#authInfoModal").modal('show');
                    divLandingGridSuccessHTML = $('#divSecondsub').html();
                    PropertiesSuccess(true, data,'div_AuthorizeInfo');
                }
                else {
                    COMMON.prototype.showMessage("error")
                }
            }
        });
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
    }
}

function TransferClick() {
    //debugger
    var url = GLOBAL.getContextPath("transferPartial", "Landing", "Landing");
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    var id = document.getElementById('landgridData');
    if ((gridSelectedRow == '' || gridSelectedRow == undefined) && gridSelectedRow != 0) {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
    else {
        if (SelectedRowNo == '' || SelectedRowNo == undefined) {
            SelectedRowNo = gridSelectedRow;
        }
    }
    if (SelectedRowNo != "") {
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var MasterId = $(Row).find('td')[8].innerHTML.trim();
        MasterId = getEnglishDigits(MasterId);
        var FromAccountType = $(Row).find('td')[9].innerHTML.trim();
        var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;

        if (iMasterTypeId == '1') {
            var masterTypeName = 'Account'
            var masterName = $(Row).find('td')[10].innerHTML.trim();

        }
        else {
            var masterTypeName = 'Product'
            var masterName = $(Row).find('td')[11].innerHTML.trim();

        }
        if (!$(Row).hasClass('InActiveTR')) {
            debugger
            var bTransferAllowed = NETWORK.executeServerMethod(GLOBAL.getContextPath("ValidateTransferAccountProduct", "Landing", "Landing"), true,
                { MasterId: MasterId, IsAccountTransfer: iMasterTypeId == '1' ? true : false }, "JSON", false);
            if (bTransferAllowed.data != null && bTransferAllowed.lValue == 1) {
                if (bTransferAllowed.data.bTransfer) {
                    $.ajax({
                        url: url,
                        type: "GET",
                        contentType: 'application/json; charset=utf-8',
                        datatype: "JSON",
                        data: { masterTypeName: masterTypeName, masterName: masterName, iMasterId: MasterId, iFromAccountType: FromAccountType },
                        success: function (data) {
                            if (data != "") {
                                divLandingGridSuccessHTML = $('#divSecondsub').html();
                                PropertiesSuccess(true, data,'div_Transfer');
                            }
                            else {
                                COMMON.prototype.showMessage("error");
                            }
                        }
                    });
                }
                else {
                    COMMON.prototype.showMessage(bTransferAllowed.data.Error);
                    return false;
                }
            } else {
                COMMON.prototype.showMessage("error"); return false;
            }

        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
}

function MassUpdateClick(url, MassupdateType, bFromContextMenu) {
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    if (bFromContextMenu == undefined) {
        url = GLOBAL.getContextPath("massUpdatePartial", "Landing", "Landing");
        var MassupdateType = 0;
        if ($('.textRedColor').length > 0) {
            for (var z = 0, y = 0; z < GridrowidValues.length; z++) {
                if (GridrowidValues[z] != 0) {
                    var isGroup = $($('.textRedColor')[y]).find('td')[0].innerHTML.trim();
                    if (isGroup == 'True') {
                        MassupdateType = 2;
                        break;
                    }
                    else {
                        MassupdateType = 3
                        break;
                    }
                    y++;
                }
            }
        }
        bFromContextMenu = false;
    }
    if (GridrowidValues.length > 0) {
        retainEditedMasterIds = GridrowidValues;
    }
    NETWORK.executeServerMethod(url, true, { MassupdateType: MassupdateType, bFromContextMenu: bFromContextMenu, MasterTypeId: iMasterTypeId }, "HTML", true, "MassupdateSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

}
function MassupdateSuccess(bs, data) {
    //
    if (bs == true && data != "") {
        divLandingGridSuccessHTML = $('#divSecondsub').html();
        PropertiesSuccess(true, data,'div_MassUpdate');
    }
    else {
        COMMON.prototype.showMessage("Error");
    }
}
function MasterDeletionClick(url, DeleteSelectedOrDeleteAll, bContextMenu) {
    //debugger
    if (bContextMenu == undefined) {
        url = GLOBAL.getContextPath("masterDeletion", "Landing", "Landing");
    }
    if (GridrowidValues != '') {
        $.ajax({
            url: url,
            type: "GET",
            contentType: 'application/json; charset=utf-8',
            datatype: "JSON",
            data: { DeleteSelectedOrDeleteAll: DeleteSelectedOrDeleteAll },
            success: function (data) {
                //
                if (data != "") {
                    $('#div_DeleteMaster').html(data)
                    $("#deleteMasterModal").modal('show');
                }
                else {
                    COMMON.prototype.showMessage("error")
                }
            }
        });
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("msgPleaseselecttheRecordtodelete", GetMasterResourceMessages));
    }

}
function AdvImportForMasterClick() {
    var url = GLOBAL.getContextPath("AdvanceMasterImportExport", "Landing", "Landing");
    var masterTypeName = $("#hdnMasterTypeName").val();
    $.ajax({
        url: url,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { masterTypeName: masterTypeName },
        success: function (data) {
            //
            if (data != "") {
                //$('#div_AdvImportForMaster').html(data)
                //$("#advanceMasterImportExportModal").modal('show');
                divLandingGridSuccessHTML = $('#divSecondsub').html();
                PropertiesSuccess(true, data,'div_AdvImportForMaster');
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}

function loadAdvanceImportSheetData(ele) {

       var fileName = ele.files[0].name;
    if ((ele.files && ele.files[0])) {
        var fileType = ele.files[0].type;
        if (fileType == "application/xml" || fileType == "text/xml" || fileType == "application/vnd.ms-excel" || fileType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
            //
            //var ele = document.getElementById('')
            $("#txtAdvImportFileName").val(fileName);
            var fd = new FormData();
            fd.append("file", $(ele)[0].files[0]);
            var obj = {};
            obj.url = GLOBAL.getContextPath("loadAdvanceImportSheetData", "Landing", "Landing");
            obj.Excel_FileName = fileName;
            obj.Excel_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
            obj.IsBulk = $("#ddlBulkImport").val() == "2" ? true : false;
            NETWORK.uploadFile(obj, true, ele.files[0], "html", true, "loadAdvanceImportSheetDataSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("msgImportSheetFormat", GetMasterResourceMessages));
    }
}
function loadAdvanceImportSheetDataSucess(bSuccess, data) {

    if (bSuccess == true && data.length > 100) {
        $("#divHeaderBodyPartial").html("").append(data);
    }
    else {
        $("#txtAdvImportFileName,#txtFileUpload").val('');
        COMMON.prototype.showMessage("Error in importing master Excel data " + data);
    }
}

function closeAndOpenAccountOKClick(url, btnClickValue) {
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var iMasterId = $(Row).find('td')[8].innerHTML.trim();
    iMasterId = getEnglishDigits(iMasterId);
    var status = $('#hdnAuthValue').val();
    $("#btnCloseAccount").attr("OpencloseAccountClick", btnClickValue);
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ iMasterTypeId: iMasterTypeId, iMasterId: iMasterId, btnClickValue: btnClickValue }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //
            if (data != "") {
                if (btnClickValue == "1")// closed account handler
                {
                    COMMON.prototype.showMessage(getResourceValue('lblClosedSuccessfully', GetMasterResourceMessages));
                }
                $('#closeAndOpenAccountModal').modal('hide')
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                divLandingGrid(m_MasterTypeId, false, true);

            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });

}

function CloseAndOpenAccountPopUp(url, dataContent, masterTypeName) {
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    if (SelectedRowNo == "") {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    if (iMasterTypeId == '1') {
        var sMasterName = $(Row).find('td')[10].innerHTML.trim();
    }
    else if (iMasterTypeId == '2') {
        var sMasterName = $(Row).find('td')[11].innerHTML.trim();
    }
    else {
        var sMasterName = $(Row).find('td')[9].innerHTML.trim();

    }
    $.ajax({
        url: url,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { dataContent: dataContent, sMasterName: sMasterName, masterTypeName: masterTypeName },
        success: function (data) {
            //
            if (data != "") {
               // $('#div_CloseAndOpenAccount').html(data)
               // $("#closeAndOpenAccountModal").modal('show');

                $('.divcontents').html('');
                $('#closeAndOpenAccountModal').html('');
                $('#div_CloseAndOpenAccount').html(data);
                $('#div_CommonModal').modal('show');
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}


function OpenClose(ele)
{
    debugger
    var url = GLOBAL.getContextPath("CloseAndOpenAccount", "Landing", "Landing");
    var dataContent = $(ele).data().content;
    var masterTypeName = $("#hdnMasterTypeName").val();
    if ($('#id_ShowAllClosed').hasClass('EnableOpenMasterBtn') || $(ele).attr("id") == "btnCloseAccount") {
        CloseAndOpenAccountPopUp(url, dataContent, masterTypeName);
    }
    else {
        return false;
    }
}

function TransferMastersOk(url, fromAccountType, AcctOrProdType) {
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var iFromAccountType = fromAccountType;
    var ocData = OPTIONCONTROL.getControlData("id_Transfer");
    if (ocData == null || ocData.length == 0)
    {
        COMMON.prototype.showMessage("No record found to transfer,kindly select the record to transfer.");
        return;
    }
    var iAccountTypeValueFromOC = ocData[2].iAccountType;
    if (iMasterTypeId == '1') {
        var objAccountTransfer = {
            FromAccount: iFromAccountType,
            IsAccountTransfer: true,
            ToAccountId: OPTIONCONTROL.getControlValue("id_Transfer")
        }
        var bToAccountType = false;
        var bFromAccountType = false;

        if (iAccountTypeValueFromOC == '7'
                               || iAccountTypeValueFromOC == '5'
            || iAccountTypeValueFromOC == '6') {
            bToAccountType = true;
        }
        if (AcctOrProdType == '7'
                       || (AcctOrProdType == '5')
                         || AcctOrProdType == '6') {
            bFromAccountType = true;
        }

        if (bFromAccountType != bToAccountType) {
            if (confirm(getResourceValue("msgBillWiseInfowillbelostDoyouWanttoProceed", GetMasterResourceMessages))) {
                transferMasterConfirm(url, objAccountTransfer);
            }
            else {
                return false;
            }
        }
        else {
            transferMasterConfirm(url, objAccountTransfer);
        }
    }
    else {
        var objAccountTransferr = {
            FromAccount: iFromAccountType,
            IsAccountTransfer: false,
            ToAccountId: OPTIONCONTROL.getControlValue("id_Transfer")
        }
        transferMasterConfirm(url, objAccountTransferr);
    }

}
function transferMasterConfirm(url, objAccountTransfer) {
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ objAccountTransfer: objAccountTransfer }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //
            if (data.Saved == true) {
                COMMON.prototype.showMessage(getResourceValue("msgTransferedSuccessfully", GetMasterResourceMessages));
                //$('#closeAndOpenAccountModal').modal('hide')
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                divLandingGrid(m_MasterTypeId);
            }
            else {
                if (data.ErrorMessege.length > 0) {
                    COMMON.prototype.showMessage(data.ErrorMessege);
                }
                else {
                    COMMON.prototype.showMessage("Error found while transferring");
                }
            }
        }
    });
}
function AlternateOrRelatedProductPopUp(url, dataContent) {
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;

    if ((gridSelectedRow == '' || gridSelectedRow == undefined) && gridSelectedRow != 0) {
        if (SelectedRowNo == '' || gridSelectedRow == undefined) {
            COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
            return false;
        }
    }
    else {
        if (SelectedRowNo == '' || SelectedRowNo == undefined) {
            SelectedRowNo = gridSelectedRow;
        }
    }
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var iMasterId = $(Row).find('td')[8].innerHTML.trim();
    iMasterId = getEnglishDigits(iMasterId);
    if (dataContent == 'Alternate') {
        var IsAlternate = true;
    }
    else {
        IsAlternate = false;
    }
    $.ajax({
        url: url,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { alternateOrRelated: dataContent, iMasterId: iMasterId, IsAlternate: IsAlternate, MainProductId: iMasterId },
        success: function (data) {
            //
            if (data != "") {
                //$('#div_AlternateOrRelatedProduct').html(data)
                //$("#AlternateOrRelatedProductModal").modal('show');
                divLandingGridSuccessHTML = $('#divSecondsub').html();
                PropertiesSuccess(true, data,'div_AlternateOrRelatedProduct');
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}
function AlternateOrRelatedProductOkClick(url, objAlternateRelatedProduct) {
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ objAlternateRelatedProduct: objAlternateRelatedProduct }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //
            if (data != "") {
                COMMON.prototype.showMessage(getResourceValue("msgSavesuccessfull", GetMasterResourceMessages));
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                divLandingGrid(m_MasterTypeId);
                //$('#AlternateOrRelatedProductModal').modal('hide')
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}
function MassUpdateBtnClick(url, objMassUpdate) {
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ objMassUpdate: objMassUpdate }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //
            if (data == "") {
                //alert('Success')
                //$('#massUpdateModal').modal('hide')
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                divLandingGrid(m_MasterTypeId);
            }
            else {
                COMMON.prototype.showMessage("error in Mass updating")
            }
        }
    });
}

function MasterSorting(url, bGidContextMenu) {
    ////debugger
    if (bGidContextMenu == undefined) {
        bGidContextMenu = false;
    }
    var RowNo = document.getElementById('hndSelectedRowNo').value;
    RowNo = RowNo.trim() == "" ? "0" : RowNo;
    var masterId = $($('#LandingGridBody').find('tr')[RowNo]).find('td.ClsMaster')[0].innerHTML.trim();
    masterId = getEnglishDigits(masterId);
    $.ajax({
        url: url,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { bGidContextMenu: bGidContextMenu, RowNo: RowNo, MasterId: masterId },
        cache: false,
        //traditional: true,
        success: function (data) {
            //
            if (data != "") {
                //$('#div_MasterSorting').html(data)
                //$("#masterSortingModel").modal('show');
                divLandingGridSuccessHTML = $('#divSecondsub').html();
                PropertiesSuccess(true, data,'div_MasterSorting');
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}
function MasterSortingOkClick(url, newUrl, objSortingMaster) {
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ objSortingMaster: objSortingMaster }),
        cache: false,
        //traditional: true,
        success: function (data) {
            //
            if (data == "") {
                COMMON.prototype.showMessage('success');
                //$('#masterSortingModel').modal('hide')
                //MasterLandingScreenLoad(newUrl)
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                divLandingGrid(m_MasterTypeId);
            }
            else {
                COMMON.prototype.showMessage("error:" + data);
            }
        }
    });
}

function DepartmentAppropriation(url, masterName, masterId) {

    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    if (SelectedRowNo == "") {
        COMMON.prototype.showMessage(getResourceValue("msgDepartmentAppropriationcanbedoneonlyfortheIncomeandExpensestypeofAccounts", GetMasterResourceMessages));
        return false;
    }
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var url = GLOBAL.getContextPath("DepartmentAppropriation", "Landing", "Landing");
    var masterId = $(Row).find('td')[8].innerHTML.trim();
    masterId = getEnglishDigits(masterId);
    var iFromAccountType = $(Row).find('td')[9].innerHTML.trim();
    var masterName = $(Row).find('td')[10].innerText.trim();

    if (iFromAccountType == '38' || iFromAccountType == '10' || iFromAccountType == '11') {
        var DeptSuccess = NETWORK.executeServerMethod(url, true, { iAccountId: masterId, masterName: masterName }, "HTML", false, "", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        if (DeptSuccess.data != "" && DeptSuccess.lValue == 1) {
            divLandingGridSuccessHTML = $('#divSecondsub').html();
            PropertiesSuccess(true, DeptSuccess.data,'div_DepartmentAppropriation');
        }
        else {
            COMMON.prototype.showMessage("error")
        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("msgDepartmentAppropriationcanbedoneonlyfortheIncomeandExpensestypeofAccounts", GetMasterResourceMessages));
    }

}

function DepartmentAppropriationSaveClick(url, arrDeptApp, iAcctId) {
    $.ajax({
        url: url,
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: JSON.stringify({ arrDeptApp: arrDeptApp, iAcctId: iAcctId }),
        cache: false,
        //traditional: true,
        success: function (data) {
            if (data != "") {
                COMMON.prototype.showMessage(getResourceValue("msgSavedSuccessfully", GetMasterResourceMessages));
                //$('#DepartmentAppropriationModel').modal('hide')
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                divLandingGrid(m_MasterTypeId);
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}
function Budgets(element) {

    var id = document.getElementById('landgridData');
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var bActType = iMasterTypeId == "1" ? true : false;
    if ((gridSelectedRow == '' || gridSelectedRow == undefined) && gridSelectedRow != 0) {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
    else {
        if (SelectedRowNo == '' || SelectedRowNo == undefined) {
            SelectedRowNo = gridSelectedRow;
        }
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var MasterId = $(Row).find('td')[8].innerHTML.trim();
        MasterId = getEnglishDigits(MasterId);
        //    var SelectedMaster = $(Row).find('td')[11].innerHTML.trim();
        var masterName = $('#spnHeaderText').text();
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetBudgets", "Landing", "Landing"), true, { iMasterId: MasterId, mastername: masterName, bActType: bActType }, "", true, "BudgetsSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
}
function BudgetsSuccess(bs, data) {

    if (data != null && bs == true) {
        divLandingGridSuccessHTML = $('#divSecondsub').html();
        PropertiesSuccess(true, data);
    }
    else {
        COMMON.prototype.showMessage("error from Budgets");
    }
}

function XMLExport(ele) {
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var masterName = $('#spnHeaderText').text();
    NETWORK.executeServerMethod(GLOBAL.getContextPath("ExportXML", "Landing", "Landing"), true, { m_iMasterTypeId: iMasterTypeId, MasterTypeName: masterName }, "", true, "XMLExportSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}
function XMLExportSuccess(bs, data) {
    //
    if (data != null && bs == true) {
        var url = GLOBAL.getContextPath("XMLDownload", "Landing", "Landing");
        window.location = url + '?file=' + data;
    }
    else {
        COMMON.prototype.showMessage("Error from XMLExport");
    }
}

function XMLImport(ele) {
    ////debugger
    var fileName = ele.files[0].name;
    if ((ele.files && ele.files[0])) {
        var fileType = ele.files[0].type;
        if (fileType == "application/xml" || fileType == "text/xml") {
            //
            //var ele = document.getElementById('')
            var fd = new FormData();
            fd.append("file", $(ele)[0].files[0]);
            var obj = {};
            obj.url = GLOBAL.getContextPath("ImportXML", "Landing", "Landing");
            obj.Excel_FileName = fileName;

            NETWORK.uploadFile(obj, true, ele.files[0], "json", true, "fnCallbackXMLImportSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("InvalidFormat", GetMasterResourceMessages) + ", " + getResourceValue("btnImportFormatFromXML", GetMasterResourceMessages));
            return false;
        }
    }
}
function fnCallbackXMLImportSucess(bs, data) {
    if (bs == true && data != null) {
        if (data.ErrorMessege != "") {
            COMMON.prototype.showMessage(data.ErrorMessege);
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("msgDataImportedSucessfully", GetMasterResourceMessages));
        }
    }
    else {
        COMMON.prototype.showMessage("Please import an XML file.")
        return false;
    }
}
var backtrackSelectedyear = ""; bFromBackTrackFirstCall = false;
function getBackTrack(ele) {
    debugger;
    var bFromBacktrackDropdownChange = false;
    var Ischecked = document.getElementById("chkIgnorStockTransfer");
    if (Ischecked == null || Ischecked == undefined) {
        Ischecked = false;
    } else {
        Ischecked = Ischecked.checked;
    }
    var id = document.getElementById('landgridData');
    var SelectedRowNo = (document.getElementById('hndSelectedRowNo').value).trim();
    if ((gridSelectedRow == '' || gridSelectedRow == undefined) && gridSelectedRow != 0) {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
    else {
        if (SelectedRowNo == '' || SelectedRowNo == undefined) {
            SelectedRowNo = gridSelectedRow;
        }
    }
    var backTrackSelectRowNo = SelectedRowNo;
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    if (SelectedRowNo == "" && $(ele).hasClass('clsbackTrack')) {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages));
        return false;
    }
    else {
        if (SelectedRowNo == "" || SelectedRowNo == undefined || !$(ele).hasClass('clsbackTrack')) {
            var MasterId = $(ele).attr('data-masterid');
            var SelectedMaster = $(ele).attr('data-mastername');
            bFromBacktrackDropdownChange = true;
            bFromBackTrackFirstCall = false;
        }
        else {
            var Row = $($(id).find('tbody')).find('tr')[backTrackSelectRowNo];
            var MasterId = $(Row).find('td')[8].innerHTML.trim();
            MasterId = getEnglishDigits(MasterId);
            bFromBackTrackFirstCall = true;
            var SelectedMaster = (iMasterTypeId == "2") ? $(Row).find('td.tdName')[0].innerHTML.trim() : $(Row).find('td')[10].innerHTML.trim();
        }
        var masterName = $('#spnHeaderText').text();
        var selectedyear = "";
        if ($(ele).hasClass('clsbackTrack') || $(ele).hasClass('clsBackTrackCancel')) {
            if ($(ele).hasClass('clsBackTrackCancel')) {
                selectedyear = $(ele).attr('data-selectedyear');
            } else {
                var dateObj = new Date();
                selectedyear = dateObj.getFullYear();
            }
            if (iMasterTypeId == 1) {
                backtrackSelectedyear = selectedyear;
            } else {
                var acctingDate = GLOBAL.getAccountingDate();
                var sAccountingDate = DATEPICKER.convertDateIntoString("FromDate", acctingDate).split('/');
                if ($(ele).hasClass('clsBackTrackCancel'))
                    selectedyear = $(ele).attr('data-selectedyear');
                else
                    backtrackSelectedyear = sAccountingDate[2];
            }
        }
        else {
            selectedyear = $(ele).val();
            backtrackSelectedyear = selectedyear;
        }

        var objBackTrackSaving = {
            IsAccount: true,// (iMasterTypeId == "1") ? true : false,
            IsMonth: true,
            SelectedMonth: "0",
            SelectedRowId: MasterId,
            SelectedYear: backtrackSelectedyear,// selectedyear,
            StartDate: "0",
            IsIgnoreStockTransfer: Ischecked
        }
        NETWORK.executeServerMethod(GLOBAL.getContextPath("BackTrack", "Landing", "Landing"), true, { objBackTrackSaving: objBackTrackSaving, m_iMasterTypeId: iMasterTypeId, MasterTypeName: masterName, SelectedRowMasterName: SelectedMaster, bFromBacktrackDropdownChange: bFromBacktrackDropdownChange }, "", true, "BackTrackSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
}
function BackTrackSuccess(bs, data) {
    //debugger
    if (bs == true && data != null) {
        PropertiesSuccess(true, data,'div_BackTrack');
    }
    else {
        COMMON.prototype.showMessage("Error from GetBackTrack");
    }
}
function AllTheSameMasterids(array, iMasterTypeId) {
    ////debugger
    if (iMasterTypeId == "2") {
        var first = array[0];
        return array.every(function (element) {
            return element === first;
        });
    } else {
        var balancesheet = array.every(function (elem) {
            return BalanceSheet.indexOf(elem) > -1;
        });
        var profitloss = array.every(function (elem) {
            return ProfitLoss.indexOf(elem) > -1;
        });
        return (balancesheet || profitloss) ? true : false;
    }
}

function onBtnGroupClick(ele) {
    ////debugger
    var checkedRows = GridrowidValues
    if (checkedRows.length == '0') {
        COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages) + " " + getResourceValue("To", GetMasterResourceMessages) + " " + getResourceValue("Group", GetMasterResourceMessages));
        return false;
    }
    else {
        var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        if (iMasterTypeId != "2" && iMasterTypeId != "1") {
            GenerateNewMaster(ele);
        }
        else {
            var AcctOrProdArray = [];
            for (var iCounter = 0; iCounter < checkedRows.length; iCounter++) {
                var LandingTableLength = $("#LandingGridBody").find('tr').length;
                for (var i = 0; i < LandingTableLength; i++) {
                    var masterId = $($("#LandingGridBody").find('tr')[i]).find('td.ClsMaster')[0].innerHTML.trim();
                    if (parseInt(getEnglishDigits(masterId)) == checkedRows[iCounter]) {
                        if (iMasterTypeId == "2") {
                            AcctOrProdArray.push($($('#LandingGridBody').find('tr')[i]).find('td')[9].innerHTML.trim());
                        } else {
                            AcctOrProdArray.push($($('#LandingGridBody').find('tr')[i]).find('td.clsActProdType')[0].innerHTML.trim());
                        }
                    }
                }
            }
            if (AllTheSameMasterids(AcctOrProdArray, iMasterTypeId)) {
                GenerateNewMaster(ele);
            }
            else {
                if (iMasterTypeId == "2") {
                    COMMON.prototype.showMessage(getResourceValue("msgCannotgroupdifferentProducttypeintoonegroup", GetMasterResourceMessages));
                } else {
                    COMMON.prototype.showMessage(getResourceValue("msgCannotgroupdifferentoneAccounttypeintoonegroup", GetMasterResourceMessages));
                }
                return false;
            }
        }
    }
}
var gMasterId, gParentName, gElement;


function MasterBeforeLoad_EM() {
    debugger
    try {

        var customTagObject = JSON.parse(localStorage.getItem("customTagObject"));
        var ele = document.getElementById(localStorage.getItem("masterElement"));

        if (ele == null) {
            var spanControl = document.createElement("span");
            spanControl.id = "btnNew";
            ele = spanControl;
        }

        var newMasterForOC = customTagObject.newMasterForOC;
        var clsHiddenOCMastertypeId = customTagObject.clsHiddenOCMastertypeId;
        var bPreview = customTagObject.bPreview;
        var iAccountTypeOrProdType = customTagObject.iAccountTypeOrProdType;
        var lstIdNamePair = customTagObject.lstIdNamePair;
        var fnCallBack = customTagObject.fnCallBack;
        var sCustomData = customTagObject.sCustomData;
        var sNameTrans = customTagObject.sNameTrans;
        var iMasterIdTrans = customTagObject.iMasterIdTrans;

        var iValuationType = '1';
        if (newMasterForOC == undefined || newMasterForOC == false) {
            if ($("#div_Properties").attr("data-viewinfopanel") == "True") {
                $('#hdnsideBar').val("1");
                var ButtonEle = $('#btnsideBar');
                btnSideBarClick(ButtonEle);
            }
            var IsAttribute = ''; var iMasterTypeId = '';
            if (!$(ele).hasClass('btn-link')) {
                iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                var SelectedRowNo = (document.getElementById('hndSelectedRowNo').value == "" || document.getElementById('hndSelectedRowNo').value == undefined) ? $(".FRowColor").length == "0" ? "" : $(".FRowColor").attr("data-rowindex") : document.getElementById('hndSelectedRowNo').value;
                if (isNaN(SelectedRowNo) || parseInt(SelectedRowNo) >= $("#LandingGridBody").find('tr').length) {
                    if ($(Row).find('td').length == 0)
                        SelectedRowNo = '';
                    else
                        SelectedRowNo = '0';
                }
                if (!$('#landgridData tr').hasClass('FRowColor') && ($(ele)[0].id == 'btnMasterEdit' || $(ele)[0].id == 'btnClone')) {
                    COMMON.prototype.showMessage(getResourceValue("SelectRow", GetMasterResourceMessages))
                    return false;
                }
                else {
                    var id = document.getElementById('landgridData');
                    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
                    var iMasterId = (SelectedRowNo == '') ? "0" : getEnglishDigits($(Row).find('td')[8].innerHTML.trim());
                    if (iMasterId != null && iMasterId != undefined && iMasterId > 0 && iMasterTypeId == 2) {
                        var ProductMake = CheckProductMake(iMasterId);
                        if (ProductMake != undefined && ProductMake != null && ProductMake == 1)//1 for set
                        {
                            getProductSetScreen(null, undefined, iMasterId);
                            return false;
                        }
                    }
                    var colorLen = $('#tree2 li').find('a.theme_color-inverse').length - 1;
                    iAccountTypeOrProdType = (SelectedRowNo == '') ? $('#tree2 li').find('.theme_color-inverse').last().closest('li').attr('accountorproducttype').trim() : $(Row).find('td')[9].innerHTML.trim();
                    iValuationType = (SelectedRowNo == '' && $(".FRowColor").length == "0") ? iValuationType : $(Row).find('td').length == 0 ? iValuationType : $(".FRowColor").find('td')[10].innerHTML.trim();
                    var iTreeId = (SelectedRowNo == '') ? "" : $(Row).find('td')[4].innerHTML.trim();
                    var ParentId = (SelectedRowNo == '') ? "" : $(Row).find('td')[2].innerHTML.trim();
                    var SequenceId = (SelectedRowNo == '') ? "" : $(Row).find('td')[3].innerHTML.trim();
                    //IsAttribute = iMasterTypeId == '2' ? ((SelectedRowNo == '') ? false : $(Row).find('td.clsHasAttribute')[0].innerHTML.trim()) : false;
                    //if (iMasterTypeId == '2' && $($($('#tree2 li').find('.theme_color-inverse').last().closest('li')).find('li')).length > 0)
                    //{
                    //    IsAttribute = $($($('#tree2 li').find('.theme_color-inverse').last().closest('li')).find('li')[0]).attr('isattribute');
                    //}
                    //else
                    //{
                    //    IsAttribute = false;
                    //}
                    IsAttribute = iMasterTypeId == '2' ? $($('#tree2 li').find('.theme_color-inverse').last().closest('li')).attr('isattribute') : false;
                    if (IsAttribute == 'True' || IsAttribute == true) {
                        IsAttribute = true;
                    }
                    else {
                        IsAttribute = false;
                    }

                    var bGroup;
                    if ($('#tree2').find('.theme_color-inverse').length == 1 && $(ele)[0].id == 'btnMasterEdit' && $($('#tree2').find('.theme_color-inverse')[0]).closest('li')[0].id == 0) {
                        //added this block to skip the overriding of parentid in case of edit of record when in searh mode.
                    }
                    else {
                        if ($('#tree2 li a').hasClass('theme_color-inverse') || $(ele)[0].id == 'btnAddGroup' || $(ele)[0].id == 'btnGroup') {
                            bGroup = true
                            if ($('#tree2 li a').hasClass('theme_color-inverse')) {
                                if ($('#tree2 li').find('a.theme_color-inverse').closest('li')[0].id != undefined) {
                                    $(ele)[0].id == 'btnGroup' ? bGroup = true : bGroup = false;
                                    var colorLen = $('#tree2 li').find('a.theme_color-inverse').length - 1;
                                    ParentId = $('#tree2 li').find('.theme_color-inverse').last().closest('li')[0].id;// $($('#tree2 li').find('a.theme_color-inverse')[colorLen]).closest('li')[0].id;
                                    gMasterId = ParentId; gParentName = $($('#tree2 li').find('.theme_color-inverse').last())[0].innerHTML.trim(); gElement = $('#tree2 li').find('a.theme_color-inverse')[colorLen];
                                }
                            }
                        }
                    }
                    if ($('#landgridData tr').hasClass('FRowColor') && ($(ele)[0].id == 'btnMasterEdit' || $(ele)[0].id == 'btnClone')) {

                        if ($($('.FRowColor')).find('td')[0].innerHTML.trim() == 'True') {
                            bGroup = true;
                        }
                        else {
                            bGroup = false;
                        }
                    }

                    else {

                        bGroup = false;

                        if ($(ele)[0].id == 'btnAddGroup' || $(ele)[0].id == 'btnGroup') {
                            bGroup = true;
                        }
                        else {
                            bGroup = false;
                        }

                    }

                }
            }
        } else {
            if (iMasterIdTrans != undefined && parseInt(iMasterIdTrans) != 0)
                iMasterId = iMasterIdTrans;

        }
        var ProdAttributeReturn = {
            IsAttribute: IsAttribute == undefined ? false : IsAttribute,
            IsGroup: bGroup == undefined ? false : bGroup,
            MasterTypeId: iMasterTypeId == undefined ? clsHiddenOCMastertypeId : iMasterTypeId
        }
        if (IsAttribute == true && $(ele)[0].id != "btnMasterEdit" && iMasterTypeId == '2') {
            //$('#Main').removeClass('hidden');
            COMMON.prototype.showMessage("Can not create item in attribute group");
            return false;
        }
        if (bPreview == undefined) {
            bPreview = false;
        }

        //   var viewId=getCustomizeViewIdForEntryScreen();
        //
        var i_mastertypeid = iMasterTypeId == undefined ? clsHiddenOCMastertypeId : iMasterTypeId;
        var AddEditNewMaster = {
            iMasterTypeId: i_mastertypeid,
            iViewId: $("#iTreeViewId").val(),
            IMasterId: iMasterId == undefined ? "0" : iMasterId,
            bGroup: bGroup == undefined ? false : bGroup,
            sText: sNameTrans == undefined ? "" : sNameTrans,
            arrSelectedRow: GridrowidValues == undefined || $(ele)[0].id == 'btnAddGroup' ? ['0'] : GridrowidValues,
            iParentId: ParentId == undefined ? "0" : ParentId,
            iSequenceId: SequenceId == undefined ? "0" : SequenceId,
            iTreeId: iTreeId == undefined ? "0" : iTreeId,
            iLanguageId: "0",
            bFromAlertWindow: newMasterForOC == undefined ? false : newMasterForOC,
            bPreview: bPreview == undefined ? false : bPreview,
            objAccountType: (parseInt(i_mastertypeid) == 1 || parseInt(i_mastertypeid) == 2 || parseInt(i_mastertypeid) == 50) ? iAccountTypeOrProdType == undefined ? "0" : iAccountTypeOrProdType : "0",
            iValuationMethod: iValuationType,
            bNotFromMenu: true

        }
        var IsAuthorize = false;
        if ($('#id_showAllUnAuth').hasClass('EnableAuthBtns')) {
            IsAuthorize = true;
        }
        if (AddEditNewMaster.objAccountType == "0") {
            var acctOrProductType = ($('#tree2').length == "0" || $('#tree2 li').find('.theme_color-inverse').length == "0") ? "0" : $('#tree2 li').find('.theme_color-inverse').last().closest('li').attr('accountorproducttype').trim();
        } else {
            acctOrProductType = AddEditNewMaster.objAccountType;
        }
        ledgerSearchedValue = $("#txtsrch-term").val();
        $("#hdnledgerSearchedValue").val(ledgerSearchedValue);
        retainEditedMasterIds = GridrowidValues;
        ////
        var tagArray = [];
        tagArray.push(newMasterForOC == undefined ? "" : newMasterForOC);
        tagArray.push(fnCallBack == undefined ? "" : fnCallBack);
        tagArray.push(sCustomData == undefined ? "" : sCustomData);
        tagArray.push(bPreview == undefined || bPreview == false ? "" : "True");
        var TagObject = null;
        if ($(ele).hasClass('btn-link')) {
            TagObject = { typeId: parseInt($(ele).attr('data-content')) }
        }
        else {
            TagObject = { objAddEditNewMaster: AddEditNewMaster, objProdAttributeReturn: ProdAttributeReturn, btnClicked: FConvert.toInt(iMasterIdTrans) > 0 ? "btnMasterEdit" : $(ele)[0].id, IsAuthorize: IsAuthorize, acctOrProductType: acctOrProductType }
        }
        if ($(ele)[0].id == 'btnNew') {
            if (IsAttribute == false || bGroup == true || newMasterForOC == true) {
                getCustomizeViewPopup(true, TagObject, tagArray);
            }
        }
        else {
            getCustomizeViewPopup(true, TagObject, tagArray);
        }

    } catch (ex) {
        alert("Exception - MasterBeforeLoad_EM " + ex.message);
    }
}

function CheckProductMake(iMasterId) {

    var result = NETWORK.executeServerMethod(
              GLOBAL.getContextPath("CheckProductMake", "Landing", "Landing"),
              true,
              { iMasterId: iMasterId },
              "",
              false,
              "", "", "");
    if (result != null && result.data != null) {
        return result.data;
    }
    else {
        return 0;
    }

}

function GenerateNewMaster(ele, newMasterForOC, clsHiddenOCMastertypeId, bPreview, iAccountTypeOrProdType, lstIdNamePair, fnCallBack, sCustomData, sNameTrans, iMasterIdTrans) {

    try {
        if ((ele != null && ele.id == "btnMasterEdit") || (ele != null && ele.length > 0)) {
            if ((ele.length != undefined && ele.length > 0 && ele[0].id == "btnMasterEdit") || ele.id == "btnMasterEdit") {
                if (document.getElementById('hndCurrentPageNo') != null) {
                    let pageno = document.getElementById('hndCurrentPageNo').value;
                    document.getElementById('btnMasterEdit').setAttribute('data-EditPage', parseInt(pageno));
                }
            }
        }
        var customTagObject = {};
        customTagObject.newMasterForOC = newMasterForOC;
        customTagObject.clsHiddenOCMastertypeId = clsHiddenOCMastertypeId;
        customTagObject.bPreview = bPreview;
        customTagObject.iAccountTypeOrProdType = iAccountTypeOrProdType;
        customTagObject.lstIdNamePair = lstIdNamePair;
        customTagObject.fnCallBack = fnCallBack;
        customTagObject.sCustomData = sCustomData;
        customTagObject.sNameTrans = sNameTrans;
        customTagObject.iMasterIdTrans = iMasterIdTrans;
        localStorage.setItem("customTagObject", JSON.stringify(customTagObject));
        localStorage.setItem("masterElement", $(ele).attr('id'));
        m_arrTreeTabsIds = [];
        //@old code for external module call commentted on 9th june 2020
        //var bModuleEnabled = CheckIfExternalModuleEnable(EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD);
        ////  newMasterForOC = newMasterForOC == undefined ? "undefined" : newMasterForOC;
        //if (bModuleEnabled) {
        //    //  FExternalModule.CallWrapperJsForExternalModule(bModuleEnabled, "MasterBeforeLoad_EM");
        //    FWrapper.openPopup(bModuleEnabled, "MasterBeforeLoad_EM");
        //}
        //else {
        //    MasterBeforeLoad_EM();
        //}
        //@ends
        var ExtModCustomData = {};
        ExtModCustomData.ExtModEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD;
        var iCount = MastersExternalModule.callExternalModule(EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
        if (iCount == 0)//did not find any external module.
        {
            MasterBeforeLoad_EM();
        }

    } catch (ex) {
        alert("Exception - GenerateNewMaster " + ex.message);
    }
}

function GenerateMaster_onSuccess(bs, data, tagArray) {
    try {
        debugger
        var newMasterForOC = tagArray[0];
        var fnCallBack = tagArray[1];
        var sCustomData = tagArray[2];
        var IsPreview = tagArray[3];
        if (data != null && bs == true && newMasterForOC != true) {
            $('#Main').addClass('hidden');
            divLandingGridSuccessHTML = $('#divSecondsub').html();
            $('#divSecondsub').html('');
            var tempDataViewId = "";
            if (treeViewIdSelectedValue != "" && treeViewIdSelectedValue != undefined) {
                tempDataViewId = treeViewIdSelectedValue;
            }
            $('#divSecondsub').html(data);
            if (tempDataViewId != "") {
                treeViewIdSelectedValue = tempDataViewId;
            }
            $('#divfirstsub,#ulCommonlyUsedRibbon').css({ 'pointer-events': 'none' });
            $('#divaccorderan').css({ 'pointer-events': 'auto' });
            $("#ulCommonlyUsedRibbon").addClass('grey');
            $($('#divfirstsub').find("a,select")).each(function () {
                $(this).addClass('grey');
            });
            $($("#tree2").find('a.theme_color-inverse')).removeClass('theme_color-inverse');
            // $('#divaccorderan').prop('disabled', false);
            //  $("#GenerateNewMasterModel").modal('show');
            if ($('.modal-backdrop').length > 0) {
                $('.modal-backdrop').removeClass('modal-backdrop');
            }
            if ($("#iTreeId").val() == "" || $("#iTreeId").val() == null) {
                GetAllRecords("", GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), $('#MasterRetrieval_IsReport').val());
            }
        }
        else if (newMasterForOC == true) {
            var input = $('input[type=text]'),
             checkbox = $('input[type=checkbox]'),
             text = $('textarea'),
             select = $('select');
            if (parseInt(divCountr) >= 0) {
                $('#hdnCountMultipleTrees').val(parseInt($('#hdnCountMultipleTrees').val()) - 1);
            }

            if (MasterPopUps.length == 0) {
                //for (var i = 0; i < input.length; i++) {
                //    $('#' + input[i].id).attr('value', $('#' + input[i].id).val());
                //}
                //for (var chkbox = 0; chkbox < checkbox.length; chkbox++) {
                //    $('#' + checkbox[chkbox].id).attr('checked', $('#' + checkbox[chkbox].id).prop('checked'));
                //}
                //for (var txtarea = 0; txtarea < text.length; txtarea++) {
                //    $('#' + text[txtarea].id).html($('#' + text[txtarea].id).val());
                //}
                //for (var ddl = 0; ddl < select.length; ddl++) {
                //    $('#' + select[ddl].id).find(':selected').attr('selected', 'selected');
                //}
            }
            //
            //masterpopupData = document.getElementById('GenerateNewMasterModel').innerHTML;
            masterpopupData = $('#GenerateNewMasterModel').clone();

            if (MasterPopUps.length == 0) {//inserting the first rendered entry screen--which is parent.
                var masterpop = {};
                masterpop.ID = 1;// $(masterpopupData).length == 0 ? "1" : "0";//1 for parent ,0 for childs
                masterpop.Data = $('#GenerateNewMasterModel').clone();
                MasterPopUps.push(masterpop);
            }

            if (MasterPopUps.length == 1) {//this condition checks if it is first child pop up --clearing parent and inserting first child.not for sub childs as we need input data of field as well .
                $('#GenerateNewMasterModel').html('');
                $('#divNewMasterForOCModalBody').html('').html(data);
            }
            //insert childpop up html
            if (MasterPopUps.length >= 1) { //maintaing html in data prop --for child pop ups,data will have new form/entry screen html
                var masterpop = {};
                masterpop.ID = "0";//1 for parent ,0 for childs
                masterpop.Data = MasterPopUps.length == 1 ? $('#divNewMasterForOCModalBody').clone() : data;
                MasterPopUps.push(masterpop);
            }
            if (MasterPopUps.length > 2) {//here updating the inserted child with its form data which is in #divNewMasterForOCModalBody
                MasterPopUps[MasterPopUps.length - 2].Data = $('#divNewMasterForOCModalBody').clone();
                $('#divNewMasterForOCModalBody').html('').html(data);
            }




            //$('#divTabContentGenerateMaster').css({'height':'auto'})
            $('#div_newMasterForOC').removeClass('hidden');
            if (fnCallBack != "" && fnCallBack != undefined) {
                $("#div_newMasterForOC").attr("data-callbackfunction", fnCallBack);
                $("#div_newMasterForOC").attr("data-customdata", sCustomData);
            }
            $('#newMasterForOCModal').modal({
                backdrop: 'static',
                keyboard: false,
            });
            $('#newMasterForOCModal').addClass("in").css({ "display": "block" });
            $('.lblGetnewMasterOCDisable').css({ 'font-weight': '500', 'text-decoration': 'none', 'cursor': 'auto' });
            $('.clsMasterPopupSaveClose').show();
            $('.clsMasterSaveClose').hide();
            $('#newMasterForOCModal').modal('show');
            $("#sName").focus();
            if (IsPreview == "True") {
                var elements = document.getElementsByClassName('clsMasterPopupSaveClose');
                if (elements != null) {
                    for (var i = 0; i < elements.length; i++) {
                        if (elements[i].id == "btnMasterSaveClick") {
                            elements[i].style.display = 'none';
                        }
                    }
                }
            }
            // 
            MASTERENTRYSCREEN.autocollapse();
            var sCallBackPos = localStorage.getItem('PosCallbackFunc');
            if (sCallBackPos != null && sCallBackPos != undefined && sCallBackPos.length > 0) {
                eval(sCallBackPos)();
                localStorage.removeItem('PosCallbackFunc');
            }
        }
        else {
            COMMON.prototype.showMessage("error");
            return false;
        }
    } catch (ex) {
        alert("Exception - GenerateMaster_onSuccess " + ex.message);
    }

}

//testing
function RenderFileUpload() {
    debugger
    var url = GLOBAL.getContextPath("RenderFileUpload", "GenerateMaster", "Masters");
    $.ajax({
        url: url,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "html",
        cache: false,
        success: function (data) {
            $('#divSecondsub').html('');
            $('#divSecondsub').html(data);
        },
        error: function (data) {
        }
    })
}
//testing
function getMasterpopupData(element) {
    try {
        debugger
        var IsCloseClick = false;
        if (element != undefined && element != null) {

            IsCloseClick = $(element).hasClass('clsMasterPopupSaveClose');
        }
        //IsTreeTabExists = '';
        var MasterTypeId = $('#hdnMasterTypeId').val();

        //@old code for ext module call,commentted on 9th june 2020
        //var bModuleEnabled = CheckIfExternalModuleEnable(EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE);
        //if (bModuleEnabled) {
        //    FWrapper.openPopup(bModuleEnabled, "MasterBeforeCloseForPopData_EM");
        //    return false;
        //}
        //MasterBeforeCloseForPopData_EM();
        //@ends

        var ExtModCustomData = {};
        ExtModCustomData.ExtModEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE;
        var iCount = MastersExternalModule.callExternalModule(EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
        if (iCount == 0)//did not find any external module.
        {
            MasterBeforeCloseForPopData_EM();
        }
        else {
            return false;//ext module found
        }
        //@call back from trans screen when user closes the master pop up without saving

        if (IsCloseClick) {
            var fnCallBackResult = $("#div_newMasterForOC").attr("data-callbackfunction");
            var sCustomData = $("#div_newMasterForOC").attr("data-customdata");
            if (fnCallBackResult != undefined && (MasterPopUps != null && MasterPopUps.filter(x=>x.ID == 0).length == 0) && fnCallBackResult.length > 0) {
                sCustomData = sCustomData == undefined ? "" : sCustomData;
                eval(fnCallBackResult)([], sCustomData);
            }
        }
        //@call back from trans screen when user closes the master pop up without saving

    } catch (ex) {
        alert("Exception - getMasterpopupData " + ex.message);
    }
}
function MasterBeforeCloseForPopData_EM() {
    debugger
    try {
        if ($(masterpopupData).length > 0) {

            //$('#GenerateNewMasterModel').html('').html($(masterpopupData)[0].innerHTML);
            //$('.clsMasterPopupSaveClose').hide();
            MASTERENTRYSCREEN.getTabsHoverFunctionality();
            var LastPopIndex = MasterPopUps.length;
            if (MasterPopUps.length == 1) {
                //$('#GenerateNewMasterModel').html('').html(MasterPopUps[0].Data);
                $('#divNewMasterForOCModalBody').html('').html(MasterPopUps[0].Data);
                $('.clsMasterPopupSaveClose').hide();
                MASTERENTRYSCREEN.getTabsHoverFunctionality();
                $('.clsMasterPopupSaveClose').show();
                return;
            }
            if (LastPopIndex != 1) {
                MasterPopUps.pop();
                if (MasterPopUps.length > 1) {
                    // $('#GenerateNewMasterModel').html('').html(MasterPopUps[MasterPopUps.length - 1].Data);
                    $('#divNewMasterForOCModalBody').html('').html(MasterPopUps[MasterPopUps.length - 1].Data);
                    $('.clsMasterSaveClose').hide();
                    $('.clsMasterPopupSaveClose').show();
                    return;
                }
                else if (MasterPopUps.length == 1) {
                    $('#GenerateNewMasterModel').html('').html(MasterPopUps[0].Data);
                    $('.clsMasterPopupSaveClose').hide();
                    MASTERENTRYSCREEN.getTabsHoverFunctionality();
                    $('.clsMasterSaveClose').show();
                    //return;
                }
                //if ($('#GenerateNewMasterModel').length == 1) {
                //    $('.clsMasterPopupSaveClose').show();
                //    return;
                //}
            }
        }
        $('.clsMasterSaveClose').show();
        $('#divNewMasterForOCModalBody').html('');
        $('#newMasterForOCModal').modal('hide');
        $('#newMasterForOCModal').modal().hide();
        $('#div_newMasterForOC').addClass('hidden');
        if ($('.modal-backdrop').length > 0) {
            $('.modal-backdrop').removeClass('modal-backdrop');
        }
        if (MasterPopUps.length > 0) {
            MasterPopUps.pop();
        }
    } catch (ex) {
        alert("Exception - MasterBeforeCloseForPopData_EM " + ex.message);
    }
}
//Master Landing Screen script ends here

//Start Drage Drop
function ChangeTreeParent(url, newUrl, AccorPrdIs, MasterIds) {
    try {
        var sMasterName = $('#hdnMasterName').val();
        var sModule = $('#ObjMasterScreenStructure_Module').val();
        var iTreeId = document.getElementById('iTreeId').value;
        var sucess = "";
        var returnData = { success: false, ErrorMsg: '' };
        $.ajax({
            url: url,
            type: 'POST',
            data: JSON.stringify({ MasterName: sMasterName, Module: sModule, iParentId: AccorPrdIs, arrSelectedRows: MasterIds, cmbSelectedValue: iTreeId }),
            contentType: "application/json; charset=utf-8",
            cache: false,
            async: false,
            success: function (data) {
                //
                if (data.Flag == false && data.ErrorMessege == "") {
                    sucess = true;
                    //added this to not refresh or load the entire home screen  on tree or records movement from one to another
                    var eleTreeCmb = document.getElementById('iTreeId');
                    if (eleTreeCmb != null) {
                        onTreeChange(eleTreeCmb);
                    }
                    else {
                        MasterLandingScreenLoad(newUrl);
                    }

                    MultipulAccorProdIds = [];
                    // event.preventDefault();
                    return false;
                } else {
                    returnData.success = false;
                    returnData.ErrorMsg = data.ErrorMessege;
                    sucess = false;
                }
            }
        });
        return returnData;
    } catch (ex) {
        alert("Exception - ChangeTreeParent " + ex.message);
    }
}

function ChangeSelectedRowSequence(url, newUrl, DMasterId, DParentId, MasterIds) {
    var sMasterName = $('#hdnMasterTypeName').val();
    var sModule = $('#ObjMasterScreenStructure_Module').val();
    var iTreeId = document.getElementById('iTreeId').value;
    var sucess = "";
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({ strMasterName: sMasterName, strModule: sModule, iTreeId: iTreeId, arrMasterId: MasterIds, iDropId: DMasterId, iParentId: DParentId }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //
            if (data.Flag == false && data.ErrorMessege.trim() == "") {
                sucess = true;
                MasterLandingScreenLoad(newUrl);
                MultipulAccorProdIds = [];
                GLOBAL.LoadingEnd();
            } else {
                sucess = false;
            }
        }
    })
    return sucess;
}

function ValidateChangeTreeParent(index, url, isGroup) {
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    if (parseInt(MasterTypeId) > 2) {
        return true;
    }
    var ParentId = 0;
    var id = document.getElementById('landgridData');
    var Row = $($(id).find('tbody')).find('tr')[index];
    //var 
    ParentId = $(Row).find('td')[9].innerHTML.trim();
    var draggedAcctPrdType = [];
    draggedAcctPrdType.push(document.getElementById('hdnGridDragDropAcctPrdTypes').value);
    var sucess = "";
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            iParentId: ParentId, arrSelectedRows: draggedAcctPrdType, iMasterTypeId: MasterTypeId, isGroup: isGroup
        }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //;
            sucess = data;
        },
        error: function (data) {
            sucess = false;
        }

    });
    return sucess;
}

function ValidateTreeSort(url, accountOrProdcutType, isGroup) {
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    ////;
    var draggedAcctPrdType = [];
    draggedAcctPrdType.push(document.getElementById('hdnGridDragDropAcctPrdTypes').value);
    var sucess = "";
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify({
            iParentId: accountOrProdcutType, arrSelectedRows: draggedAcctPrdType, iMasterTypeId: MasterTypeId, isGroup: isGroup
        }),
        contentType: "application/json; charset=utf-8",
        cache: false,
        async: false,
        success: function (data) {
            //;
            sucess = data;
        },
        error: function (data) {
            sucess = false;
        }

    });
    return sucess;
}

function MasterLandingScreenLoad(newUrl) {
    //

    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    if (GLOBAL.GlobalCacheArrayForMasters.length > 0) {
        for (var i = 0; i < GLOBAL.GlobalCacheArrayForMasters.length; i++) {
            if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) {
                GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);
                break;
            }
        }
    }
    var tempObjForGlobalVariables = {};
    tempObjForGlobalVariables.masterid = gMasterId;
    tempObjForGlobalVariables.bremove = false;
    tempObjForGlobalVariables.parentname = gParentName;
    tempObjForGlobalVariables.element = gElement;

    if (tempObjForGlobalVariables.masterid == undefined)
        tempObjForGlobalVariables.masterid = $('#tree2 li').find('.theme_color-inverse').last().closest('li').attr('id');
    //NETWORK.executeServerMethod(
    //      newUrl,
    //      true,
    //      { typeId: MasterTypeId, iTypeId: null, iMenuId: $("#hdnMenuId").val(), bClearSessionAndCache: true },
    //      "",
    //      false,
    //      "AfterLoadSuccess", "", "", "");


    $.ajax({
        url: newUrl,
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        datatype: "JSON",
        data: { typeId: MasterTypeId, iTypeId: null, iMenuId: $("#hdnMenuId").val(), bClearSessionAndCache: true },
        cache: false,
        async:false,
        //traditional: true,
        success: function (data) {
            //  
            if (data != "") {
                $('#page_Content').html('').html(data);
                //$('#ihndtoggle').val(1);
                //CheckAccorderanClick(emptyString);
                //var icon = $('#tree2 ul li').find('img')
                //var accountIcon = $('#tree2 li').find('img')
                //if ($(icon).hasClass('gplus icon-expand') || $(accountIcon).hasClass('gplus icon-expand')) {
                //    $(icon).addClass('gminus icon-collepse');
                //    $(icon).removeClass('gplus icon-expand');
                //    $('#tree2 ul li').toggle();
                //}
                //$('#tree2 li#0').find('img').removeClass('gplus icon-expand');
                //$('#tree2 li#0').find('img').addClass('gminus icon-collepse');

                if (tempObjForGlobalVariables != undefined && tempObjForGlobalVariables != null) {
                    GetGridDataOnClick(tempObjForGlobalVariables.masterid, false, tempObjForGlobalVariables.parentname, tempObjForGlobalVariables.element);
                }
            }
            else {
                COMMON.prototype.showMessage("error")
            }
        }
    });
}
function AfterLoadSuccess(bs, data, tag) {
    if (bs != null && bs == true) {
        if (data != "") {
            $('#page_Content').html('').html(data);
            //$('#ihndtoggle').val(1);
            //CheckAccorderanClick(emptyString);
            //var icon = $('#tree2 ul li').find('img')
            //var accountIcon = $('#tree2 li').find('img')
            //if ($(icon).hasClass('gplus icon-expand') || $(accountIcon).hasClass('gplus icon-expand')) {
            //    $(icon).addClass('gminus icon-collepse');
            //    $(icon).removeClass('gplus icon-expand');
            //    $('#tree2 ul li').toggle();
            //}
            //$('#tree2 li#0').find('img').removeClass('gplus icon-expand');
            //$('#tree2 li#0').find('img').addClass('gminus icon-collepse');

            if (tempObjForGlobalVariables != undefined && tempObjForGlobalVariables != null) {
                GetGridDataOnClick(tempObjForGlobalVariables.masterid, false, tempObjForGlobalVariables.parentname, tempObjForGlobalVariables.element);
            }
        }
        else {
            COMMON.prototype.showMessage("error")
        }
    }
}
function MasterBeforeClose_EM() {

    var objBeforeCloseEm = JSON.parse(localStorage.getItem("BeforeCloseEm"));
    var reopen = objBeforeCloseEm.reopen;
    var bFromDeleteIPSidebar = objBeforeCloseEm.bFromDeleteIPSidebar;
    var bFromOpenCloseAccount = objBeforeCloseEm.bFromOpenCloseAccount;
    var MasterTypeId = objBeforeCloseEm.mastertypeid;
    var clearSessionCache = objBeforeCloseEm.clearSessionCache;

    var tag = { ReOpen: reopen, bFromDeleteIPSidebar: bFromDeleteIPSidebar, bFromOpenCloseAccount: bFromOpenCloseAccount }
    NETWORK.executeServerMethod(
           GLOBAL.getContextPath("Landing", "Landing", "Landing"),
           true,
           { m_iMasterTypeId: MasterTypeId, IsReportView: false, editMasterClick: null, AccountProductTypeIds: null, bClearSessionAndCache: clearSessionCache },
           "",
           true,
           "divLandingGridSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", tag);
}
function getCloseDataFromCache() {

    $('#divSecondsub').html("").html(divLandingGridSuccessHTML);
    var masterName = $("#hdnMasterTypeName").val();
    $('#spnHeaderText').text(masterName);
    //$('#Main').removeClass('hidden');
    OPTIONCONTROL.clear('cmbUserTypeMaster');
    $('#ulCommonlyUsedRibbon,#divfirstsub').css({ 'pointer-events': 'auto' });
    $("#divfirstsub,#tree2 > li > a,#ulCommonlyUsedRibbon").removeClass('grey');
    // $($($("#tree2").find("li#0")).find('a.clsMasterName')[0]).addClass("theme_color-inverse")
    LoadSelectedMasterGroupInTree();
    $($('#divfirstsub').find("a,select")).each(function () {
        $(this).removeClass('grey');
    });
    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
    if (GLOBAL.GlobalCacheArrayForMasters.length > 0) {
        for (var i = GLOBAL.GlobalCacheArrayForMasters.length - 1; i >= 0 ; i--) {
            if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())
                    && GLOBAL.GlobalCacheArrayForMasters[i].bReport == false) {
                GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);

                // break;
            }
        }
    }
    getGlobalCacheForMasters(true);
    GridrowidValues = retainEditedMasterIds;
    GetSelectedDataOfGrid();
    if ($("#div_Properties").attr("data-viewinfopanel") == "True") {
        $('#btnsideBar').show();
    }
}
function divLandingGrid(element, bFromDeleteIPSidebar, bFromOpenCloseAccount) {
    debugger
    var clearSessionCache = true;
    m_EmAddedEvent = "";
    IsTreeTabExists = "";
    bFromDeleteIPSidebar = bFromDeleteIPSidebar == undefined ? false : bFromDeleteIPSidebar;
    if (bFromOpenCloseAccount == undefined) {
        bFromOpenCloseAccount = false;
    }
    if (bFromOpenCloseAccount) {
        clearSessionCache = false;
    }
    var MasterTypeId; var reopen; var AttrSaved;
    if (!isNaN(element)) {
        MasterTypeId = element;
    }
    else {
        MasterTypeId = $(element)[0].dataset.content;
        reopen = $(element)[0].dataset.reopen;
        AttrSaved = $(element)[0].dataset.attrsaved;
        var objForBeforeCloseEm = {};
        objForBeforeCloseEm.mastertypeid = MasterTypeId;
        objForBeforeCloseEm.reopen = reopen;
        objForBeforeCloseEm.bFromDeleteIPSidebar = bFromDeleteIPSidebar;
        objForBeforeCloseEm.bFromOpenCloseAccount = bFromOpenCloseAccount;
        objForBeforeCloseEm.clearSessionCache = clearSessionCache;

        localStorage.setItem("BeforeCloseEm", JSON.stringify(objForBeforeCloseEm));

        //@old code for ext module call commentted on 9th june 2020
        //var bModuleEnabled = CheckIfExternalModuleEnable(EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE);

        //if (bModuleEnabled) {
        //    FWrapper.openPopup(bModuleEnabled, "MasterBeforeClose_EM");
        //    return false;
        //}
        //@ends

        var ExtModCustomData = {};
        ExtModCustomData.ExtModEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE;
        var iCount = MastersExternalModule.callExternalModule(EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
        if (iCount > 0) {
            return false;
        }
    }
    if (reopen != "btnNew" && reopen != "btnAddGroup" && reopen != "btnGroup" && reopen != "btnMasterEdit" && reopen != "btnClone") {
        if ($(element).hasClass("closeMasterPartial") && divLandingGridSuccessHTML != "") {
            
            if ($(element).hasClass("clsMasterSaveClose")) {
                document.getElementById('InfoPaneldv').style.display = 'block';

                $('#divSecondsub').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
                $('#divSecondsub').addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');
                $('#InfoPaneldv').addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
                document.getElementById('divSecondsub').style.width = '71%';
            }
            //$('#manageCreditModal').modal('hide');
            //$('#div_CustomizeMasterModal').modal('hide');
            //$('#div_UnitConversionModal').modal('hide');
            //$('#div_CommonModal').modal('hide');
            HidePopUps();
            getCloseDataFromCache();
            return false;
        }
    }
    if (GLOBAL.GlobalCacheArrayForMasters.length > 0 && $('#MasterRetrieval_IsReport').val() == "True") {
        for (var i = GLOBAL.GlobalCacheArrayForMasters.length - 1; i >= 0 ; i--) {
            if (GLOBAL.GlobalCacheArrayForMasters[i].bReport == true && GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) {
                GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);
            }
        }
    }
    var tag = { ReOpen: reopen, bFromDeleteIPSidebar: bFromDeleteIPSidebar, bFromOpenCloseAccount: bFromOpenCloseAccount, AttrSaved: AttrSaved, MasterTypeId: MasterTypeId }
    NETWORK.executeServerMethod(
           GLOBAL.getContextPath("Landing", "Landing", "Landing"),
           true,
           { m_iMasterTypeId: MasterTypeId, IsReportView: $('#MasterRetrieval_IsReport').val(), editMasterClick: null, bClearSessionAndCache: clearSessionCache, iTreeId: $("#iTreeId").val() },
           "",
           true,
           "divLandingGridSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", tag);
}
function divLandingGridSuccess(bSuccess, data, tag) {
    debugger
    var reopen = tag.ReOpen; var bFromDeleteIPSidebar = tag.bFromDeleteIPSidebar; var bFromOpenCloseAccount = tag.bFromOpenCloseAccount;
    var attrsaved = tag.AttrSaved;
    var MasterTypeId = tag.MasterTypeId;
    m_arrTreeTabsIds = [];
    IsTreeTabExists = "False";
    if (bSuccess == true) {

        HidePopUps();
        if ($("#btnCloseAccount").attr("OpencloseAccountClick") == "2" && bFromOpenCloseAccount == true) {
            $("#divSecondsub").css("display", "none");
        }
        else {
            // $('#divSecondsub').html($(data).find('#divLanding')[0].innerHTML);
            divLandingGridSuccessHTML = $('#divSecondsub').html();
            $('#divSecondsub').html($(data).find('#divSecondsub')[0].innerHTML);
            if ($('#hndReportView').val() == "False") {
                document.getElementById('InfoPaneldv').style.display = 'block';
                if ($('#hdnsideBar').val() == '0') {
                    document.getElementById('btnsideBar').style.display = 'block';
                }

                $('#divSecondsub').removeClass('col-lg-9 col-md-9 col-sm-12 col-xs-12');
                $('#divSecondsub').addClass('col-lg-8 col-md-8 col-sm-12 col-xs-12');
                $('#InfoPaneldv').addClass('col-lg-1 col-md-1 col-sm-12 col-xs-12 padding0');
                document.getElementById('divSecondsub').style.width = '71%';
            }
            //  $('#ulheader').addClass("hidden");

        }

        var GetTreeMenusurl = GLOBAL.getContextPath("GetTreeMenu", "Landing", "Landing");
        var GetSearchOnBlurUrl = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");

        //if ($("#iTreeId").val() != 0)
        //{
        //    GetSearchOnBlur($("#iTreeId")[0], GetSearchOnBlurUrl, true);
        //    GetTreeMenus(GetTreeMenusurl, "", true);
        //}


        ledgerSearchedValue = $("#hdnledgerSearchedValue").val();
        if (reopen != "btnNew" || (attrsaved == "true" && MasterTypeId == 2)) {//&& reopen != 'btnAddGroup'
            GetSearchOnBlur($("#iTreeId")[0], GetSearchOnBlurUrl, true);
            GetTreeMenus(GetTreeMenusurl, "", true);
            IsReportLoad(emptyString);

            // 
            if (treeViewIdSelectedValue != "") {
                $("#iTreeViewId").val(treeViewIdSelectedValue);
            }


            var masterName = $("#hdnMasterTypeName").val();
            $('#spnHeaderText').text(masterName);

            //not required after deletion ,it will display as it is (toggling menu)
            //$('#Main').removeClass('hidden');

            $('#ulCommonlyUsedRibbon,#divfirstsub').css({ 'pointer-events': 'auto' });
            $("#divfirstsub,#tree2 > li > a,#ulCommonlyUsedRibbon").removeClass('grey');
            $($('#divfirstsub').find("a,select")).each(function () {
                $(this).removeClass('grey');
            });
        }
        COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");

        if (GLOBAL.GlobalCacheArrayForMasters.length > 0 && !bFromOpenCloseAccount && $('#MasterRetrieval_IsReport').val() == "False") {
            for (var i = GLOBAL.GlobalCacheArrayForMasters.length - 1; i >= 0 ; i--) {
                if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) {
                    GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);

                    // break;
                }
            }
        } else {
            if ($('#MasterRetrieval_IsReport').val() == "True") {
                ReportsCacheContent();
                return;
            }
        }
        // var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        //var masterId = $($('#landgridData').find('tbody').find('tr')[RowNo]).find('td')[8].innerHTML.trim();
        //masterId = getEnglishDigits(masterId);
        //getDataForInfoPanel(masterTypeId, 0);
        $("#chkRetainSelection").prop('checked', retainselectionValue);
        if ($("#div_Properties").attr("data-viewinfopanel") == "True") {
            //$('#hdnsideBar').val("1");
            //var ButtonEle = $('#btnsideBar');
            //btnSideBarClick(ButtonEle);
        }
        if (!bFromOpenCloseAccount) {
            //$('#ulheader').removeClass("hidden");
            getGlobalCacheForMasters(true);
            //  $('#ulheader').addClass("hidden");
        }
        if (gMasterId != undefined && gMasterId != "0" || $("#hdnledgerSearchedValue").val().trim() != "" || ledgerSearchedValue.trim() != "") {
            var url = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
            ledgerSearchedValue = ledgerSearchedValue == "" ? $("#hdnledgerSearchedValue").val() : ledgerSearchedValue;
            $("#txtsrch-term").val(ledgerSearchedValue)
            GetSearchOnBlur($("#txtsrch-term")[0], url, false);
            SaveRowIdValues(GridrowidValues[0], "", true);
        }
        else {
            GridrowidValues = [];
        }

        if (gMasterId != undefined && $("#txtsrch-term").val().trim() == "" && (reopen != "btnNew" && reopen != 'btnAddGroup')) {
            let pageno = null;
            if (document.getElementById('hndCurrentPageNo') != null && reopen == "btnMasterEdit") {
                pageno = document.getElementById('btnMasterEdit').getAttribute('data-EditPage');
            }
            GetGridDataOnClick(gMasterId, false, gParentName, gElement,undefined, pageno);
            GridrowidValues = retainEditedMasterIds;
            GetSelectedDataOfGrid();
        }
        else if (retainEditedMasterIds.length > 0) {
            GridrowidValues = retainEditedMasterIds;
            GetSelectedDataOfGrid();
            if (gridSelectedRow != undefined) {
                var id = document.getElementById('landgridData');
                $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
            }
        }
        else if (gridSelectedRow != undefined) {
            var id = document.getElementById('landgridData');
            $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
        }
        if (gridSelectedRow != undefined) {
            var id = document.getElementById('landgridData');
            $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
        }

        //   Ontoggle_ribbonClickMasterLanding(null);

        if (reopen != undefined && reopen != '') {
            var elemnt = $('#' + reopen);
            if (reopen != "btnMasterEdit" && reopen != "btnClone" && reopen != "btnGroup") {
                $($('#LandingGridBody').find('tr')).removeClass("FRowColor");
                gridSelectedRow = (gridSelectedRow == undefined) || parseInt(gridSelectedRow) - 1 < 0 ? 0 : gridSelectedRow;
                var highlightedRow = $($('#LandingGridBody').find('tr')[gridSelectedRow]).addClass("FRowColor");
                document.getElementById('hndSelectedRowNo').value = $(highlightedRow).attr('data-rowindex');
                $("#divCustomizeView").attr("data-reopen", "True");
                if (gMasterId == 0)
                    LoadSelectedGroupAndBreadCrumb();
                else
                    GetGridDataOnClick(gMasterId, false, gParentName, gElement);
                GenerateNewMaster(elemnt, false);
                $("#divCustomizeView").attr("data-reopen", "False");
            } else {
                if (reopen == "btnGroup") {
                    var url = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
                    $("#txtsrch-term").val("");
                    GetSearchOnBlur($("#txtsrch-term"), url, false);
                }
            }
        }
        if ($("#iTreeId").val() == "" || $("#iTreeId").val() == null) {
            GetAllRecords("", GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), $('#MasterRetrieval_IsReport').val());
        }
        if ($("#btnCloseAccount").attr("OpencloseAccountClick") == "2") {
            GetAllClosedRecords(true, GLOBAL.getContextPath('GetSearchOnLandingClick', 'Landing', 'Landing'), $('#MasterRetrieval_IsReport').val());
            $("#divSecondsub").css("display", "block");
        }
        if (bFromDeleteIPSidebar) {
            if ($("#div_Properties").attr("data-viewinfopanel") == "True") {
                $('#hdnsideBar').val(0);
                btnSideBarClick($('#btnsideBar'));
                showInfoPanelForEdit();
            }
        }
    }
    else {
        COMMON.prototype.showMessage('error');
    }
    //  $('#ulheader').removeClass("hidden");
}

function HidePopUps()
{
    $('#manageCreditModal').modal('hide');
    $('#div_CustomizeMasterModal').modal('hide');
    $('#div_UnitConversionModal').modal('hide');
    $('#div_CommonModal').modal('hide');
    $('#div_CommonModal').hide();
    $('#manageCreditModal').hide();
    $('#div_UnitConversionModal').hide();
    $('#div_CustomizeMasterModal').hide();
    $('#div_CustomizeMaster').html('');
    $('#div_UnitConversion').html('');
    $('#div_ManageCredit').html('');
    $('.divcontents').html('');
}

function LoadSelectedMasterGroupInTree() {
    $($('#tree2 li').find('.theme_color-inverse')).removeClass('theme_color-inverse');
    $($('#tree2 li#' + gMasterId + '').find('a.clsMasterName')[0]).addClass('theme_color-inverse');
    var newMasterId = gMasterId;

    while (parseInt(newMasterId) != 0 && (newMasterId != "tree2")) {
        newMasterId = $('#tree2 li#' + newMasterId + '').closest('ul')[0].id;
        $($('#tree2 li#' + newMasterId + '').find('a.clsMasterName')[0]).addClass('theme_color-inverse');
        newMasterId = newMasterId;//$('#tree2 li#' + newMasterId + '').closest('ul')[0].id;
    }
}
function LoadSelectedGroupAndBreadCrumb() {
    LoadSelectedMasterGroupInTree();
    if (onTreeLiClickElement == undefined || onTreeLiClickElement == "")
        onTreeLiClickElement = $('#tree2 li#' + gMasterId + '').find('a.clsMasterName')[0];
    MasterLandingScreeBreadcrumb("", onTreeLiClickElement, gMasterId);
}
function getManageCredit(ele) {

    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    SelectedRowNo == "" ? "0" : SelectedRowNo;
    if (SelectedRowNo != '') {
        var id = document.getElementById('landgridData');
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var AccountType = $(Row).find('td')[9].innerHTML.trim();
        var masterId = $(Row).find('td.ClsMaster')[0].innerHTML.trim();
        masterId = getEnglishDigits(masterId);
        if (AccountType == '5' || AccountType == '6' || AccountType == '7') {
            onManageCreditClick(masterId);
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("msgPleaseselectCustomerVendorTypeofaccount", GetMasterResourceMessages));
        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("msgPleaseselectCustomerVendorTypeofaccount", GetMasterResourceMessages));
    }

}

function onManageCreditClick(masterId) {
    debugger
    var ManageCreditData = NETWORK.executeServerMethod(
          GLOBAL.getContextPath("DeliquencyManagement", "CreditManagement", "CreditManagement"), true, { iMenuId: 0, bMasters: true }, "", false);
    //$("#manageCreditModal").html(ManageCreditData.data);
    //var data = document.getElementById('div_ManageCredit').innerHTML;
    divLandingGridSuccessHTML = $('#divSecondsub').html();
    PropertiesSuccess(true, ManageCreditData.data, 'div_ManageCredit');
    OPTIONCONTROL.setControlValue("customer", masterId);
    $('#customer').blur();
    $("#customer").attr("readonly", true);
    $("#customer").addClass('grey');
    //$('#manageCreditModal').css({ 'opacity': '1', 'overflow': 'auto', 'padding-top': '15%' });
    $('.btnDeliquencyClose,#DelqMgmtHeader').css("display", "none");
    $('#btn-close').css('display', 'none');
    $('#btnModalDismiss1').css("display", "block");
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;

    if (!$("#btnModalDismiss1").hasClass("closeMasterPartial")) {
        $("#btnModalDismiss1").addClass("closeMasterPartial").attr("data-content", MasterTypeId);
    }
    $("#btnModalDismiss1").attr("onclick", "divLandingGrid(this)");
}

function onUnitConversionClick() {

    var baseunit = "";
    var id = document.getElementById('landgridData');
    var SelectedRowNo = document.getElementById('hndSelectedRowNo').value;
    if (SelectedRowNo == "")
        SelectedRowNo = "0";
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var isGroup = $(Row).find('td')[0].innerHTML.trim();
    if ($(Row).find('td.clsDefaultUnit').length > 0) {
        //   UnitValue = $(Row).find('td.clsDefaultUnit')[0].innerHTML.trim();
        baseunit = $($(Row).find('td.clsDefaultUnit')).attr('data-ucmasterid');
    }
    else {
        var masterid = $(Row).find('td.ClsMaster')[0].innerHTML.trim();
        masterid = getEnglishDigits(masterid);
        var mastertypeid = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        var treeid = document.getElementById('iTreeId').value;
        if (treeid == "") {
            treeid = "0";
        }
        var UnitConversionData = NETWORK.executeServerMethod(
            GLOBAL.getContextPath("GetDefaultBaseUnit", "Landing", "Landing"), true, { iMasterTypeId: mastertypeid, iMasterId: masterid, iTreeId: treeid }, "", false);
        //
        if (UnitConversionData != null) {
            baseunit = UnitConversionData.data.MasterId;
        }
    }

    var MasterIdsForUnitConversion = [];
    var productid = $(Row).find('td')[8].innerHTML.trim();
    productid = getEnglishDigits(productid);
    MasterIdsForUnitConversion.push(productid);
    MasterIdsForUnitConversion.push(baseunit);
    if (isGroup == "True") {
        COMMON.prototype.showMessage(getResourceValue("msgUnitsConversionNotOnGroup", GetMasterResourceMessages));
        return false;
    }

    else {
        if (baseunit == "0" || baseunit == "") {
            COMMON.prototype.showMessage(getResourceValue("msgPleasedefinebaseunitinproductbeforedefiningunitconversion", GetMasterResourceMessages));
        }
        NETWORK.executeServerMethod(
           GLOBAL.getContextPath("UnitConversion", "UnitConversion", "CoreMasters"), true, { bMasters: true }, "", true, "UnitConversionSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", MasterIdsForUnitConversion);
    }
}
function UnitConversionSuccess(bs, data, MasterIdsForUnitConversion) {
    if (bs == true && data != null) {
        divLandingGridSuccessHTML = $('#divSecondsub').html();
        PropertiesSuccess(true, data,'div_UnitConversion');
        OPTIONCONTROL.setControlValue("optionProduct", MasterIdsForUnitConversion[0]);
        OPTIONCONTROL.setControlValue("optionBaseUnit", MasterIdsForUnitConversion[1]);
        $("#optionBaseUnit_input_container").css('pointer-events', "none");
        $("#optionProduct_input_container").css('pointer-events', "none");
        LoadData();
        $("#optionProduct,#optionBaseUnit").addClass("grey");
        $('#ucClear').hide();
        $($('#divLanding').find("#header")).hide();

        var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        if (!$("#btnMasterCancel").hasClass("closeMasterPartial")) {
            $("#btnMasterCancel").addClass("closeMasterPartial").attr("data-content", MasterTypeId);
        }
        $("#btnMasterCancel").attr("onclick", "divLandingGrid(this)");

    } else {
        COMMON.prototype.showMessage('Error from Unit Conversion.');
    }
}
function GridCustomization(element, bRibbon) {

    var multipleTreeCounter = "";
    if (!bRibbon) {
        var numberPattern = /\d+/g;
        multipleTreeCounter = $(element).closest('.clsdivSecondsub')[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();
    }
    //   if ($("#btnCustomizeTree").length > 0) {
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + multipleTreeCounter).value;

    NETWORK.executeServerMethod(
         GLOBAL.getContextPath("GridCustomizationClick", "Landing", "Landing"),
         true,
         { m_iMasterTypeId: MasterTypeId, bReport: $('#MasterRetrieval_IsReport').val() },
         "",
         true,
         "divGridCustomizationSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    //}
}
function divGridCustomizationSuccess(bSuccess, data) {
    if (bSuccess == true) {
        $('#div_GridCustomization').html(data);
        $('#GridCustomizationModal').modal('show');
        //$('#GridCustomizationModal').modal('show').draggable({
        //    handle: ".modal-header"
        //});
        //$("#divGridCustModalContext").attr('draggable', '');
        //$(".modal-header").css('cursor', 'move');
    }
    else { COMMON.prototype.showMessage('error'); }
}

function getNewMasterForOC(element, bAlertFromWindow, bPreview, bAssests, fnCallBack, sCustomData, iAccountType, sNameTrans, iMasterIdTrans, lstIdNamePair, objExternalIdNamePair) {
    
    var clsHiddenOCMasterId;
    if (objExternalIdNamePair != null && objExternalIdNamePair.ID == 1)//@ from pos
    {
        localStorage.setItem('PosCallbackFunc', objExternalIdNamePair.Name);
    }
    else {
        localStorage.removeItem('PosCallbackFunc');
    }
    if (bPreview == undefined || bPreview == false) {
        clsHiddenOCMasterId = $(element).parent().parent().find('.clsHiddenOC').attr('data-mastertypeid');
    }
    else {
        if (bAssests == true && bAssests != undefined) {
            bPreview = false;
        }
        clsHiddenOCMasterId = element;
    }
    var spanControl = document.createElement("span");
    spanControl.id = "btnNew";
    if ($(element).closest('.modal-body').length <= '1') {
        var spanElement = $('#btnNew').length > 0 ? $('#btnNew') : spanControl;
        GenerateNewMaster(spanElement, true, clsHiddenOCMasterId, bPreview, iAccountType, lstIdNamePair, fnCallBack, sCustomData, sNameTrans, iMasterIdTrans);
    }
}

function createNewTree(element, bNew) {
    debugger
    var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var lstTree = [];
    var ddlOptionlen = $('#iTreeId').children().length;
    for (var i = 0; i < ddlOptionlen; i++) {
        var IdNamePair = {
            ID: $('#iTreeId').children()[i].value,
            Name: $('#iTreeId').children()[i].text,
            Tag: ""
        }
        lstTree.push(IdNamePair);
    }
    var treeid = document.getElementById('iTreeId').value;
    NETWORK.executeServerMethod(
      GLOBAL.getContextPath("CreateNewTree", "Landing", "Landing"),
      true,
      { lstTree: lstTree, masterTypeId: masterTypeId, bNew: bNew, TreeId: treeid },
      "",
      true,
      "createNewTreeSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}
function createNewTreeSuccess(bs, data) {
    debugger
    if (bs == true && data != null) {
       // $('#modalContents').html('').append(data);
        
        $('#div_CreateNewTree').html('').append(data);
        $('#createNewTreeModal').modal('show');
        // $('#exampleModalPreview9').modal('show');
    }
    else {
        COMMON.prototype.showMessage('Error from NewTree Success');
    }

}

function DeleteMasterTree() {
    var treeid = document.getElementById('iTreeId').value;
    if (treeid != "0") {
        if (confirm(getResourceValue("msgAreyousuretodelete", GetMasterResourceMessages))) {

            var sModule = $("#ObjMasterScreenStructure_Module").val();
            var sMasterName = $('#hdnMasterName').val();
            var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
            NETWORK.executeServerMethod(
         GLOBAL.getContextPath("DeleteMasterTree", "Landing", "Landing"),
         true,
         { iTreeId: treeid, strMasterName: sMasterName, strModule: sModule, iMasterTypeId: masterTypeId },
         "",
         true,
         "DeletemasterTreeSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            return false;
        }
    }
}
function DeletemasterTreeSuccess(bs, data) {
    if (bs == true && data != null) {
        var url = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
        MasterLandingScreenLoad(url);
    }
    else {
        COMMON.prototype.showMessage("Error in deleting Tree" + data.data);
        return false;
    }
}
function SetDefaultMasterTree() {
    var treeid = document.getElementById('iTreeId').value;
    if (treeid != "0") {
        if (confirm(getResourceValue("msgSetDefaultSure", GetMasterResourceMessages))) {
            var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
            NETWORK.executeServerMethod(
         GLOBAL.getContextPath("SetDefaultMasterTree", "Landing", "Landing"),
         true,
         { iTreeId: treeid, iMasterTypeId: masterTypeId },
         "",
         true,
         "SetDefaultMasterTreeSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
        else {
            return false;
        }
    }
}
function SetDefaultMasterTreeSuccess(bs, data) {
    if (bs == true && data != null) {
        var url = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
        MasterLandingScreenLoad(url);
    }
    else {
        COMMON.prototype.showMessage("Error in setting Default Tree Data" + data.data);
        return false;
    }
}
function onTreeChange(element) {
    debugger
    GridrowidValues = [];
    $($("#dropDowns").find("#" + element.id)).find("option").attr('selected', false);
    $($("#dropDowns").find("#" + element.id)).find("option[value=" + element.value + "]").attr('selected', true);
    if ($(element).find("option:selected").attr('data-auto') == "True") {
        $('#btnAddGroup,#btnGroup,#btnMasterEdit,#btnDeleteAll,#btnClone,#btnMoveUp,#btnMOveDown').css("pointer-events", "none");
        $('#btnAddGroup,#btnGroup,#btnMasterEdit,#btnDeleteAll,#btnClone,#btnMoveUp,#btnMOveDown').addClass("grey");
        $(".showAuto").show();
        $(".hideAuto").hide();
    }
    else {
        $('#btnAddGroup,#btnGroup,#btnMasterEdit,#btnDeleteAll,#btnClone,#btnMoveUp,#btnMOveDown').css("pointer-events", "auto");
        $('#btnAddGroup,#btnGroup,#btnMasterEdit,#btnDeleteAll,#btnClone,#btnMoveUp,#btnMOveDown').removeClass("grey");
        $(".hideAuto,.showAuto").show();
    }
    var url = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
    GetSearchOnBlur(element, url, true);
    
    var numberPattern = /\d+/g;
    var multipleTreeCounter = $(element)[0].id;
    multipleTreeCounter = multipleTreeCounter.match(numberPattern);
    if (multipleTreeCounter == null)
        multipleTreeCounter = '';
    else
        multipleTreeCounter = multipleTreeCounter.toString();
    // $($('#tree2' + multipleTreeCounter).find('a.clsMasterName')[0]).trigger('click');
    GetTreeMenus(GLOBAL.getContextPath("GetTreeMenu", "Landing", "Landing"), "", true);
    Landing.ApplyTreeContextMenu();
    var icon = $('#tree2' + multipleTreeCounter + ' ul li').find('.indicator')
    var accountIcon = $('#tree2' + multipleTreeCounter + ' li').find('.indicator')
    if ($(icon).hasClass('gplus icon-expand') || $(accountIcon).hasClass('gplus icon-expand')) {
        $(icon).addClass('gminus icon-collepse');
        $(icon).removeClass('gplus icon-expand');
        //$(tagli[0]).children().children().toggleClass('glyphicon-minus-sign' + " " + 'glyphicon-plus-sign');
        //  $(tagli).children().children().toggle();
        $('#tree2' + multipleTreeCounter + ' ul li').toggle();
    }
    $('#tree2' + multipleTreeCounter + ' li#0').find('.indicator').removeClass('gplus icon-expand');
    $('#tree2' + multipleTreeCounter + ' li#0').find('.indicator').addClass('gminus icon-collepse');
    //$('#tree2 ul li')[0].find('a').addClass('theme_color-inverse')
    $($($('#tree2' + multipleTreeCounter + ' li')[0]).find('a.clsMasterName')[0]).addClass('theme_color-inverse');
    $('#LandingGridBody').trigger('click');
    //if ($('#tree2' + multipleTreeCounter).find('a.theme_color-inverse').length == 1) {
    //}

    //  GetGridDataOnClick($('#tree2' + multipleTreeCounter + ' li').find('.theme_color-inverse').last().closest('li')[0].id, true, $($('#tree2' + multipleTreeCounter + ' li').find('.theme_color-inverse').last())[0].innerHTML.trim(), $('#tree2' + multipleTreeCounter + ' li').find('a.theme_color-inverse').last());
    var bgReport = ($('#MasterRetrieval_IsReport').val() == "False" && IsPartialView == 'False') ? false : true;
    var olText = '';
    if (bgReport == true) {
        olText = '<ol id="ol_treeNavigation" class="breadcrumb" style="background-color:#ECECEC;margin-left: -15px;padding:7px;"></ol>';
    } else {
        olText = '<ol id="ol_treeNavigation" class="breadcrumb" style="background-color:white;margin-left: -15px;padding:7px;"></ol>';
    }
    $('#treeNavigation' + multipleTreeCounter + '').html('');
    $('#treeNavigation' + multipleTreeCounter + '').append(olText);
    $('#treeNavigation' + multipleTreeCounter + ' ol').append('<li style="color:#34C3FB;font-weight:bold;"> <span> ' + $($('#tree2' + multipleTreeCounter + ' li').find('.theme_color-inverse').last())[0].innerHTML.trim() + '</span> </li>')

}

$(document).on('keyup', "#txtsrch-term,.clstxtsrch-term", function (e) {
    if (e.keyCode == 13) {
        var url = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
        GetSearchOnBlur($(this), url, false);
    }
    e.stopImmediatePropagation();
});

function getCustomizeMasterFromLanding() {
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var urlPath = GLOBAL.getContextPath("MasterCustomization", "MasterCustomization", "Masters");
    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iMasterTypeId: MasterTypeId, IsMaster: true }, "HTML", true, "fnResultSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd",'configuremaster');
}
//@functions to render productnewset screen of pos--starts
function getProductSetScreen(ele, iMenuId, iMasterId) {

    COMMON.prototype.showMessage('This feature is not available in this version');
    return;
    if (iMenuId == undefined || iMenuId == null) {
        iMenuId = document.getElementById('hdnMenuId').value;
    }
    var iMasterId = iMasterId;
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var urlPath = GLOBAL.getContextPath("OpenProductSets", "ProductSets", "PointOfSale");
    divLandingGridSuccessHTML = $('#divSecondsub').html();
    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iMenuId: iMenuId, iMasterId: iMasterId }, "HTML", true, "getProductSetScreen_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}
function getProductSetScreen_Success(bs, data) {

    if (bs == true && data != null) {
        $("#divSecondsub").removeClass('overflowNone');
        divLandingGridSuccessHTML = $('#divSecondsub').html();

        if (bs == true && data != null) {
            $('#divSecondsub').html('');
            $('#divSecondsub').html(data);
            $('#Main').addClass('hidden');
            $('#divfirstsub,#ulCommonlyUsedRibbon').css({ 'pointer-events': 'none' });
            $('#divaccorderan').css({ 'pointer-events': 'auto' });
            $("#ulCommonlyUsedRibbon").addClass('grey');
            $($('#divfirstsub').find("a,select")).each(function () {
                $(this).addClass('grey');
            });
            // $('#divaccorderan').prop('disabled', false);
            //  $("#GenerateNewMasterModel").modal('show');
            if ($('.modal-backdrop').length > 0) {
                $('.modal-backdrop').removeClass('modal-backdrop');
            }
            if ($('#btnMasterCancel').length > 0) {
                $('#btnMasterCancel').css('display', 'block');
                $('#ucCancel').hide();
            }
            COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
        }
        else {
            COMMON.prototype.showMessage('Error.')
        }

    }
}
function ProductSetCloseAndSave(IsRefresh) {

    var clearSessionCache = true;
    if (IsRefresh == false) {
        getCloseDataFromCache();
        return false;
    }
    else if (IsRefresh == true) {
        var tag = { ReOpen: "btnNew", bFromDeleteIPSidebar: false, bFromOpenCloseAccount: false, AttrSaved: false, MasterTypeId: 2 }
        NETWORK.executeServerMethod(
               GLOBAL.getContextPath("Landing", "Landing", "Landing"),
               true,
               { m_iMasterTypeId: 2, IsReportView: false, editMasterClick: null, AccountProductTypeIds: null, bClearSessionAndCache: clearSessionCache },
               "",
               true,
               "ProductSetCloseAndSave_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", tag);

    }
}
function ProductSetCloseAndSave_Success(bSuccess, data, tag) {

    var reopen = tag.ReOpen; var bFromDeleteIPSidebar = tag.bFromDeleteIPSidebar; var bFromOpenCloseAccount = tag.bFromOpenCloseAccount;
    var attrsaved = tag.AttrSaved;
    var MasterTypeId = tag.MasterTypeId;
    if (bSuccess == true) {

        if ($("#btnCloseAccount").attr("OpencloseAccountClick") == "2" && bFromOpenCloseAccount == true) {
            $("#divSecondsub").css("display", "none");
        }
        else {
            // $('#divSecondsub').html($(data).find('#divLanding')[0].innerHTML);
            //divLandingGridSuccessHTML = $('#divSecondsub').html();
            $('#divSecondsub').html($(data).find('#divSecondsub')[0].innerHTML);
            //  $('#ulheader').addClass("hidden");

        }

        var GetTreeMenusurl = GLOBAL.getContextPath("GetTreeMenu", "Landing", "Landing");
        var GetSearchOnBlurUrl = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
        ledgerSearchedValue = $("#hdnledgerSearchedValue").val();
        COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
        $("#chkRetainSelection").prop('checked', retainselectionValue);
        if ($("#div_Properties").attr("data-viewinfopanel") == "True") {
            $('#hdnsideBar').val("1");
            var ButtonEle = $('#btnsideBar');
            btnSideBarClick(ButtonEle);
        }

        if (GLOBAL.GlobalCacheArrayForMasters.length > 0 && !bFromOpenCloseAccount && $('#MasterRetrieval_IsReport').val() == "False") {
            for (var i = GLOBAL.GlobalCacheArrayForMasters.length - 1; i >= 0 ; i--) {
                if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) {
                    GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);

                    // break;
                }
            }
        } else {
            if ($('#MasterRetrieval_IsReport').val() == "True") {
                ReportsCacheContent();
                return;
            }
        }



        if (!bFromOpenCloseAccount) {
            //$('#ulheader').removeClass("hidden");
            getGlobalCacheForMasters(true);
            //  $('#ulheader').addClass("hidden");
        }






        if (gMasterId != undefined && gMasterId != "0" || $("#hdnledgerSearchedValue").val().trim() != "" || ledgerSearchedValue.trim() != "") {
            var url = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
            ledgerSearchedValue = ledgerSearchedValue == "" ? $("#hdnledgerSearchedValue").val() : ledgerSearchedValue;
            $("#txtsrch-term").val(ledgerSearchedValue)
            GetSearchOnBlur($("#txtsrch-term")[0], url, false);
            SaveRowIdValues(GridrowidValues[0], "", true);
        }
        else {
            GridrowidValues = [];
        }

        if (gridSelectedRow != undefined) {
            var id = document.getElementById('landgridData');
            $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
        }


        //if (gMasterId != undefined && $("#txtsrch-term").val().trim() == "" && (reopen != "btnNew" && reopen != 'btnAddGroup')) {
        //    GetGridDataOnClick(gMasterId, false, gParentName, gElement);
        //    GridrowidValues = retainEditedMasterIds;
        //    GetSelectedDataOfGrid();
        //}
        //else if (retainEditedMasterIds.length > 0) {
        //    GridrowidValues = retainEditedMasterIds;
        //    GetSelectedDataOfGrid();
        //    if (gridSelectedRow != undefined) {
        //        var id = document.getElementById('landgridData');
        //        $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
        //    }
        //}
        //else if (gridSelectedRow != undefined) {
        //    var id = document.getElementById('landgridData');
        //    $($($($(id).find('tbody')).find('tr'))[gridSelectedRow]).addClass('FRowColor');
        //}



        if (reopen != undefined && reopen != '') {
            var elemnt = $('#' + reopen);
            if (reopen != "btnMasterEdit" && reopen != "btnClone" && reopen != "btnGroup") {
                $($('#LandingGridBody').find('tr')).removeClass("FRowColor");
                gridSelectedRow = (gridSelectedRow == undefined) || parseInt(gridSelectedRow) - 1 < 0 ? 0 : gridSelectedRow;
                var highlightedRow = $($('#LandingGridBody').find('tr')[gridSelectedRow]).addClass("FRowColor");
                document.getElementById('hndSelectedRowNo').value = $(highlightedRow).attr('data-rowindex');
                $("#divCustomizeView").attr("data-reopen", "True");
                if (gMasterId == 0)
                    LoadSelectedGroupAndBreadCrumb();
                else
                    GetGridDataOnClick(gMasterId, false, gParentName, gElement);
                getProductSetScreen();
                $("#divCustomizeView").attr("data-reopen", "False");
            } else {
                if (reopen == "btnGroup") {
                    var url = GLOBAL.getContextPath("GetSearchOnBlur", "Landing", "Landing");
                    $("#txtsrch-term").val("");
                    GetSearchOnBlur($("#txtsrch-term"), url, false);
                }
            }
        }
        if ($("#iTreeId").val() == "" || $("#iTreeId").val() == null) {
            GetAllRecords("", GLOBAL.getContextPath("GetSearchOnLandingClick", "Landing", "Landing"), $('#MasterRetrieval_IsReport').val());
        }
        if ($("#btnCloseAccount").attr("OpencloseAccountClick") == "2") {
            GetAllClosedRecords(true, GLOBAL.getContextPath('GetSearchOnLandingClick', 'Landing', 'Landing'), $('#MasterRetrieval_IsReport').val());
            $("#divSecondsub").css("display", "block");
        }
        if (bFromDeleteIPSidebar) {
            if ($("#div_Properties").attr("data-viewinfopanel") == "True") {
                $('#hdnsideBar').val(0);
                btnSideBarClick($('#btnsideBar'));
                showInfoPanelForEdit();
            }
        }
    }
    else {
        COMMON.prototype.showMessage('error');
    }
    //  $('#ulheader').removeClass("hidden");
}

//@functions to render productnewset screen of pos --ends



function selectViewFromPopup(ele) {
    $(".clsViewName").removeClass("FRowColor");
    $(ele).addClass("FRowColor");
}
function getCustomizeViewPopup(bFromEntryScreen, TagObject, tagArray) {
    if (!bFromEntryScreen) {
        if ($("#divCustomizeView").length > "0") {
            $("#divCustomizeView").modal("show");
            $($("#ulViewName").find("li")[0]).addClass("theme_icon-color");
        }
        else {
            var ViewIdForCustomize = $("#hdnCustomzieViewId").val();
            var urlPath = GLOBAL.getContextPath("MasterViewCustomizationForMS", "MasterCustomization", "Masters");
            if (ViewIdForCustomize == undefined || ViewIdForCustomize == null) {
                ViewIdForCustomize = 1;//@open default view as su
                //COMMON.prototype.showMessage("This user does not have permission to access masters views");
                //return;
            }
            var fnResult = NETWORK.executeServerMethod(urlPath, true, { iViewId: ViewIdForCustomize }, "HTML", true, "fnResultSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", 'configuremaster');
        }
    }
    else {
        var urlPath = GLOBAL.getContextPath("getCustomizeMasterViewPopUpForEntryScreen", "Landing", "Landing");
        var MasterTypeId = $("#ObjMasterScreenStructure_MasterTypeId").length > 0 ? $("#ObjMasterScreenStructure_MasterTypeId").val() : TagObject.objAddEditNewMaster.iMasterTypeId;
        var ResultData = {};
        if (tagArray[0] == true || tagArray[0] == "True") {
            ResultData = NETWORK.executeServerMethod(urlPath, true, { MasterTypeId: MasterTypeId }, "HTML", false, "", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        } else {
            if ($("#divCustomizeView").length == 0 || $("#divCustomizeView").attr("data-reopen") == "True" && TagObject.objAddEditNewMaster.bFromAlertWindow == false) {
                ResultData.data = "";
                ResultData.lValue = 1;
            } else {
                ResultData = NETWORK.executeServerMethod(urlPath, true, { MasterTypeId: MasterTypeId }, "HTML", false, "", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        if (ResultData.lValue == 1 && ResultData.data.trim() != "") {
            $('#id_divCustomizeViewForMasters').html('').html(ResultData.data);
            $("#divCustomizeViewForEntryScreen").modal("show");
            $($("#ulViewNameEntryScreen").find("li")[0]).addClass("theme_icon-color");
            $("#btnCustomizeMasterSelectedViewOk").attr({ "data-tagobject": JSON.stringify(TagObject), "data-tagarray": JSON.stringify(tagArray) });

        } else {
            btnCustomizeMasterSelectedViewOk(TagObject, tagArray, ResultData.data.trim());
        }
    }
}
function btnCustomizeMasterSelectedViewOk(TagObject, tagArray, ResultData) {

    var ViewIdForCustomize = "";
    if ($("#divCustomizeViewForEntryScreen").length > 0 && ResultData != "") {
        if ($("#ulViewNameEntryScreen").find("li.theme_icon-color").length == "0") {
            COMMON.prototype.showMessage("Please select a view");
            return false;
        } else {
            ViewIdForCustomize = $($("#ulViewNameEntryScreen").find("li.FRowColor")).attr("data-customizeviewid");
        }
    } else {
        ViewIdForCustomize = $("#hdnCustomizeMasterViewId").val();
    }
    if (TagObject == null) {
        TagObject = JSON.parse($("#btnCustomizeMasterSelectedViewOk").attr("data-tagobject"));
        tagArray = JSON.parse($("#btnCustomizeMasterSelectedViewOk").attr("data-tagarray"));
    }
    TagObject.iMasterViewId = ViewIdForCustomize;
    var data = NETWORK.executeServerMethod(GLOBAL.getContextPath('GenerateNewMaster', 'GenerateMaster', 'Masters'),
                            true, TagObject, "HTML", true, "GenerateMaster_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", tagArray);
    $("#divCustomizeViewForEntryScreen").modal("hide");
    return false;
}

function getCustomizeViewIdForEntryScreen() {
    if ($("#divCustomizeView").length > "0") {
        $("#divCustomizeView").modal("show");
        $($("#ulViewName").find("li")[0]).addClass("theme_icon-color");
        $("#popUpdataSheetName").attr("data-content", true);
    }
    else {
        return $("#hdnCustomzieViewId").val();
    }
}

function getCustomizeViewFromLanding() {
    if ($("#ulViewName").find("li.theme_icon-color").length == "0") {
        COMMON.prototype.showMessage("Please select a view");
        return false;
    }
    var ViewIdForCustomize = $($("#ulViewName").find("li.theme_icon-color")).attr("data-customizeviewid");
    var urlPath = GLOBAL.getContextPath("MasterViewCustomizationForMS", "MasterCustomization", "Masters");
    $("#divCustomizeView").modal("hide");
    var fnResult = NETWORK.executeServerMethod(urlPath, true, { iViewId: ViewIdForCustomize }, "HTML", true, "fnResultSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

}

function fnResultSuccess(bs, data,tag) {
    if (bs == true && data != null) {
        $("#divSecondsub").removeClass('overflowNone');
        divLandingGridSuccessHTML = $('#divSecondsub').html();
        PropertiesSuccess(bs, data,tag);
    }
}
function GetLedgerScreen(element) {
    //debugger
    ledgerSearchedValue = $("#txtsrch-term").val();
    // gMasterId = undefined;
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    //var urlPath = GLOBAL.getContextPath("OpenReport", "RD", "RD");
    var urlPath = GLOBAL.getContextPath("OpenReport", "CommonReport", "RD");
    var ledgerid = (MasterTypeId == "1" || MasterTypeId == "50") ? 500 : MasterTypeId == "2" ? 551 : 538;
    var ReportMasterSessionId = GLOBAL.getCompanyId().toString() + GLOBAL.getLoginId().toString() + ledgerid;
    var SelectCheckbox = document.getElementById('liSelectAllMasters');
    var allMasters = SelectedMasters(true, ReportMasterSessionId, false);// (SelectCheckbox != null && SelectCheckbox.checked) ? true : bReportCheckAll);--no select all from grid header only page records
    var newTab = true;
    if (allMasters == false) {
        var eve = {};
        eve.checked = true;
        var RowNo = document.getElementById('hndSelectedRowNo').value;
        // GetRowDataOfGrid(RowNo, eve, 8);
        if (GridrowidValues.length == 0) {
            if (MasterTypeId == "1") {
                COMMON.prototype.showMessage(getResourceValue("msgNoAccSelected", GetMasterResourceMessages));
            }
            else {
                COMMON.prototype.showMessage("Atleast oneProduct should be checked");
            }
            return false;
        }
        allMasters = SelectedMasters(true, ReportMasterSessionId, false);
        for (var count = 0; count < allMasters.length; count++) {
            allMasters[count].Name += " " + allMasters[count].Tag;
        }
    }
    else {
        for (var count = 0; count < allMasters.length; count++) {
            allMasters[count].Name += " " + allMasters[count].Tag;
        }
    }

    if (allMasters.length > "0") {
        newTab = window.open(window.location);
        if (FCommon.UI.isValidObject(newTab) == false) {
            return (false);
        }

        newTab[newTab.addEventListener ? 'addEventListener' : 'attachEvent'](
            (newTab.attachEvent ? 'on' : '') + 'load', function (e) {
                newTab.GLOBAL.getNavigationHeaderElement().innerHTML = GLOBAL.getNavigationHeaderElement().innerHTML;
                newTab.NETWORK.executeServerMethod(urlPath,
                                            true,
                                            {
                                                iReportId: $(element).attr("data-reportid"), arrMasters: allMasters
                                            },
                                            "html",
                                            true,
                                            "GLOBAL.LoadScreen",
                                            "GLOBAL.LoadingStart",
                                            "GLOBAL.LoadingEnd"
                                            );
            }, false);
        //var fnResult = NETWORK.executeServerMethod(urlPath, true, { iReportId: $(element).attr("data-reportid"), arrMasters: allMasters }, "HTML", true, "LoadReportSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
    else {
        COMMON.prototype.showMessage("Please select a master");
    }
}

function isHTML(str) {
    var doc = new DOMParser().parseFromString(str, "text/html");
    return Array.from(doc.body.childNodes).some(node => node.nodeType === 1);
}

function LoadReportSuccess(bs, data) {
    if (bs == true && data != null) {

        //@html rendering is not required in case of normal text as return data from reports
        if (isHTML(data) == false) {
            COMMON.prototype.showMessage(data);
            return;
        }
        divLandingGridSuccessHTML = $('#divSecondsub').html();
        PropertiesSuccess(bs, data);
        var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        if (!$("#reportClose").hasClass("closeMasterPartial")) {
            $("#reportClose").addClass("closeMasterPartial").attr("data-content", MasterTypeId);
        }
        //@ making report view visible completely
        var ReportElement = document.getElementById('MainReportRender');
        if (ReportElement != null && ReportElement != undefined) {
            ReportElement.style.height = "100%";
        }
        $("#reportClose").attr("onclick", "divLandingGrid(this)");
    }
}

function getTreeSort() {

    try {
        if ($('#MasterRetrieval_IsReport').val() == 'False' && $('#hdnEditMasterClick').val() == '' && (IsPartialView != 'True')) {
            //console.log('TreeSort started: ', new Date().toLocaleString());
            $("#tree2 ul").sortable({
                //items: "> ul:not(:first)",
                appendTo: "parent",
                //cursor: 'move',
                helper: 'clone',
                revert: true,
                //  connectToSortable: "#tree2 ul",
                //connectWith: "#tree2 ul",
                connectWith: ".Sortability",
                scroll: false,
                //items: 'ul',
                start: function (event, ui) {
                    //debugger
                    MasterId = $(ui.item)[0].id// $(ui.item).find('td')[8].innerHTML.trim();
                    MasterId = getEnglishDigits(MasterId);
                    PickParentId = $(ui.item).parent('ul')[0].id// $(ui.item).find('td')[2].innerHTML.trim();
                    var IsGroup = true;//$(ui.item).find('td')[0].innerHTML.trim();
                    //if (!IsGroup) {
                    //}
                    var isProdorAcc = $(ui.item).attr('accountorproducttype')//$(ui.item).find('td')[9].innerHTML.trim();
                    if (document.getElementById('hdnGridDragDropAcctPrdTypes') != null) {
                        document.getElementById('hdnGridDragDropAcctPrdTypes').value = isProdorAcc;

                    }

                    if (MultipulMasterIds.length == 0)
                        SaveMultipuleMasterIds(MasterId, IsGroup, isProdorAcc);
                    //confirm("start End");
                },
                //change: function (event, ui) {
                //    // //
                //},
                update: function (event, ui) {
                    //debugger
                    if ($("#div_Properties").attr("data-movefield") == "False") {
                        COMMON.prototype.showMessage(getResourceValue("msgUserdonthavepermissiontomoveitems", GetMasterResourceMessages))
                        return false;
                    }
                    if (document.getElementById("hdnIsMove").value == 0) {
                        if (ui != null && ui.sender == null) {
                            COMMON.prototype.showMessage(getResourceValue("msgUserdonthavepermissiontomoveitems", GetMasterResourceMessages))
                        }
                        return false;
                    }
                    if (this === ui.item.parent()[0]) {
                        var isGroup, DropMasterId, DropParentId;
                        var url = GLOBAL.getContextPath("ValidateChangeTreeParent", "Landing", "Landing");
                        var id = document.getElementById('landgridData');
                        var rows = $(id).find('tbody').find('tr');
                        // var EndPosition = ui.item.prevAll().length;
                        var prevEle = $(ui.item[0]).prev();
                        if (prevEle.length == "0") {
                            prevEle = $(ui.item[0]).closest('ul').closest('li');
                        }
                        var DropMasterName = $(prevEle).find('a.clsMasterName')[0].innerHTML.trim();
                        var accountOrProdcutType = $(prevEle).attr('accountorproducttype') == undefined ? '0' : $(prevEle).attr('accountorproducttype');//document.getElementById('ObjMasterScreenStructure_MasterTypeId').value
                        DropMasterId = prevEle.length == '0' ? '0' : $(prevEle).attr('id');
                        isGroup = true;
                        DropParentId = ui.item[0].previousSibling == null ? DropMasterId : ui.item[0].previousSibling.id// $(ui.item).closest('ul')[0].id;
                        if (!ValidateTreeSort(url, accountOrProdcutType, isGroup)) {
                            //;
                            COMMON.prototype.showMessage(getResourceValue("msgCannotmoveoneAccounttypeintoanotheraccounttype", GetMasterResourceMessages));
                            newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
                            MasterLandingScreenLoad(newUrl);
                            GLOBAL.LoadingEnd();
                            return false;
                        }
                        else if (GridrowidValues.length == 0 && !$(ui.item).hasClass('sortable')) {
                            COMMON.prototype.showMessage(getResourceValue("msgPleaseSelectARecordToMove", GetMasterResourceMessages));
                            newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
                            MasterLandingScreenLoad(newUrl)
                            GLOBAL.LoadingEnd();
                            return false;
                        }
                        else if ($(ui.item[0]).find('td.ClsMaster').length > "0") {
                            var masterId = $(ui.item[0]).find('td.ClsMaster')[0].innerHTML.trim();
                            if (parseInt(DropParentId) == parseInt(getEnglishDigits(masterId))) {
                                COMMON.prototype.showMessage(getResourceValue("msgCannotDropselecteditemsatDropingPositionItemsareattheSameLevel", GetMasterResourceMessages));
                                newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
                                MasterLandingScreenLoad(newUrl);
                                GLOBAL.LoadingEnd();
                                return false;
                            }
                        }

                        if (GridrowidValues.length > 0) {
                            var checkedMasterName = $(ui.item).find('td.tdName')[0].innerHTML.trim();
                            for (var i = 0; i < rows.length; i++) {
                                for (var j = 0; j <= GridrowidValues.length; j++) {
                                    var masterid = parseInt(rows[i].cells[8].innerHTML.trim());
                                    if (parseInt(getEnglishDigits(masterid)) == GridrowidValues[j]) {
                                        var name = $(rows[i]).find('td.tdName')[0].innerHTML.trim();
                                        checkedMasterName = checkedMasterName == "" ? name : checkedMasterName + "," + name;
                                    }
                                }

                            }
                        } else {
                            var checkedMasterName = $(ui.item).find('a.clsMasterName')[0].innerHTML.trim();
                        }


                        if (confirm(getResourceValue("msgAreyousureyouwanttomove", GetMasterResourceMessages) + ", " + decodeEntities(checkedMasterName) + " into " + DropMasterName)) {
                            //;
                            if (GridrowidValues.length == 0) {
                                GridrowidValues.push(MasterId);
                            }
                            else if (MultipulMasterIds[0] == 0) {
                                MultipulMasterIds.push(MasterId);
                            }
                            if (isGroup) {
                                url = GLOBAL.getContextPath("ChangeTreeParent", "Landing", "Landing");
                                newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
                                var returndata = ChangeTreeParent(url, newUrl, DropMasterId, GridrowidValues);
                                if (returndata != null && !returndata.success) {
                                    COMMON.prototype.showMessage(returndata.ErrorMsg);
                                    MasterLandingScreenLoad(newUrl);
                                    GLOBAL.LoadingEnd();
                                    return false;
                                }
                            }

                        } else {
                            newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
                            MasterLandingScreenLoad(newUrl)
                            GLOBAL.LoadingEnd();
                            return false;
                        }

                    }
                },
            });

            //$("#tree2").find(".ui-sortable").one("click", function () {
            //    debugger
            //    alert('hi');
            //    $(this).addClass("sorting-initialize");
            //    $(this).sortable('refresh');
            //});
            //  console.log('TreeSort ended: ', new Date().toLocaleString());
        }
    } catch (ex) {
        alert("Exception : Landing => getTreeSort " + ex.message);
        return false;
    }
}

function InitializeTreeSort() {
    //console.log('InitializeTreeSort started: ', new Date().toLocaleString());
    //$("#tree2 ul").sortable({ appendTo: "parent", helper: 'clone', revert: true, scroll: false });
    //$("#tree2 ul").sortable({ connectWith: ".Sortability" });
    ////$("#tree2 ul").sortable({
    ////    connectWith: ".Sortability"
    ////});
    //console.log('InitializeTreeSort ended: ', new Date().toLocaleString());
    //$("#tree2 ul").sortable({
    //    start: function (event, ui) { }
    //});

    //$("#tree2 ul").on("sortstop", function (event, ui) {
    //    MasterId = $(ui.item)[0].id// $(ui.item).find('td')[8].innerHTML.trim();
    //    MasterId = getEnglishDigits(MasterId);
    //    PickParentId = $(ui.item).parent('ul')[0].id// $(ui.item).find('td')[2].innerHTML.trim();
    //    var IsGroup = true;//$(ui.item).find('td')[0].innerHTML.trim();
    //    //if (!IsGroup) {
    //    //}
    //    var isProdorAcc = $(ui.item).attr('accountorproducttype')//$(ui.item).find('td')[9].innerHTML.trim();
    //    if (MultipulMasterIds.length == 0)
    //        SaveMultipuleMasterIds(MasterId, IsGroup, isProdorAcc);
    //});
}

function drag(event, ui) {
    //debugger
    //event.dataTransfer.setData("text", event.target.id);
    //MasterId = $(ui)[0].id// $(ui.item).find('td')[8].innerHTML.trim();
    //MasterId = getEnglishDigits(MasterId);
    //PickParentId = $(ui).parent('ul')[0].id// $(ui.item).find('td')[2].innerHTML.trim();
    //var IsGroup = true;//$(ui.item).find('td')[0].innerHTML.trim();
    //////if (!IsGroup) {
    //////}
    //var isProdorAcc = $(ui).attr('accountorproducttype')//$(ui.item).find('td')[9].innerHTML.trim();
    //if (MultipulMasterIds.length == 0)
    //    SaveMultipuleMasterIds(MasterId, IsGroup, isProdorAcc);

}
function allowDrop(ev) {
    // ev.preventDefault();

}
function drop(event, ui) {
    //debugger
    //if (this === ui.parent()[0]) {
    //    var isGroup, DropMasterId, DropParentId;
    //    var url = GLOBAL.getContextPath("ValidateChangeTreeParent", "Landing", "Landing");
    //    var id = document.getElementById('landgridData');
    //    var rows = $(id).find('tbody').find('tr');
    //    // var EndPosition = ui.item.prevAll().length;
    //    var prevEle = $(ui[0]).prev();
    //    if (prevEle.length == "0") {
    //        prevEle = $(ui[0]).closest('ul').closest('li');
    //    }
    //    var DropMasterName = $(prevEle).find('a.clsMasterName')[0].innerHTML.trim();
    //    var accountOrProdcutType = $(prevEle).attr('accountorproducttype') == undefined ? '0' : $(prevEle).attr('accountorproducttype');//document.getElementById('ObjMasterScreenStructure_MasterTypeId').value
    //    DropMasterId = prevEle.length == '0' ? '0' : $(prevEle).attr('id');
    //    isGroup = true;
    //    DropParentId = ui[0].previousSibling == null ? DropMasterId : ui[0].previousSibling.id// $(ui.item).closest('ul')[0].id;
    //    if (!ValidateTreeSort(url, accountOrProdcutType, isGroup)) {
    //        //;
    //        COMMON.prototype.showMessage(getResourceValue("msgCannotmoveoneAccounttypeintoanotheraccounttype", GetMasterResourceMessages));
    //        newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
    //        MasterLandingScreenLoad(newUrl);
    //        return false;
    //    }
    //    else if (GridrowidValues.length == 0 && !$(ui.item).hasClass('sortable')) {
    //        COMMON.prototype.showMessage(getResourceValue("msgPleaseSelectARecordToMove", GetMasterResourceMessages));
    //        newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
    //        MasterLandingScreenLoad(newUrl)
    //        return false;
    //    }
    //    else if ($(ui[0]).find('td.ClsMaster').length > "0") {
    //        var masterId = $(ui[0]).find('td.ClsMaster')[0].innerHTML.trim();
    //        if (parseInt(DropParentId) == parseInt(getEnglishDigits(masterId))) {
    //            COMMON.prototype.showMessage(getResourceValue("msgCannotDropselecteditemsatDropingPositionItemsareattheSameLevel", GetMasterResourceMessages));
    //            newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
    //            MasterLandingScreenLoad(newUrl);
    //            return false;
    //        }
    //    }

    //    if (GridrowidValues.length > 0) {
    //        var checkedMasterName = $(ui).find('td.tdName')[0].innerHTML.trim();
    //        for (var i = 0; i < rows.length; i++) {
    //            for (var j = 0; j <= GridrowidValues.length; j++) {
    //                var masterid = parseInt(rows[i].cells[8].innerHTML.trim());
    //                if (parseInt(getEnglishDigits(masterid)) == GridrowidValues[j]) {
    //                    var name = $(rows[i]).find('td.tdName')[0].innerHTML.trim();
    //                    checkedMasterName = checkedMasterName == "" ? name : checkedMasterName + "," + name;
    //                }
    //            }

    //        }
    //    } else {
    //        var checkedMasterName = $(ui).find('a.clsMasterName')[0].innerHTML.trim();
    //    }


    //    if (confirm(getResourceValue("msgAreyousureyouwanttomove", GetMasterResourceMessages) + ", " + decodeEntities(checkedMasterName) + " into " + DropMasterName)) {
    //        //;
    //        if (GridrowidValues.length == 0) {
    //            GridrowidValues.push(MasterId);
    //        }
    //        else if (MultipulMasterIds[0] == 0) {
    //            MultipulMasterIds.push(MasterId);
    //        }
    //        if (isGroup) {
    //            url = GLOBAL.getContextPath("ChangeTreeParent", "Landing", "Landing");
    //            newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
    //            if (!ChangeTreeParent(url, newUrl, DropMasterId, GridrowidValues)) {
    //                return false;
    //            }
    //        }

    //    } else {
    //        newUrl = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
    //        MasterLandingScreenLoad(newUrl)
    //        return false;
    //    }

    //}

}
function getMasterAdvanceSearch(element) {
    $("#btnSearchAcc").toggle();
    var multipleTreeCounter = "";
    var numberPattern = /\d+/g;
    var CurrentDashletId = '';
    if (IsFromDashlet == false) {
        multipleTreeCounter = $(element).closest('.clsdivSecondsub')[0].id;
        multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        if (multipleTreeCounter == null)
            multipleTreeCounter = '';
        else
            multipleTreeCounter = multipleTreeCounter.toString();
    }
    else {
        CurrentDashletId = GetActiveDashletId();
    }
    var sModule = $("#ObjMasterScreenStructure_Module" + CurrentDashletId + multipleTreeCounter).val();
    var sMasterName = $("#divLanding" + CurrentDashletId + multipleTreeCounter).attr("data-mastertypename");
    var selectMastersResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("getAdvanceSearch", "Landing", "Landing"), true,
        { masterTypeId: $("#ObjMasterScreenStructure_MasterTypeId" + CurrentDashletId + multipleTreeCounter).val(), sModule: sModule, sMastername: sMasterName }, "HTML", true,
        "MasterAdvanceSearchSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", $(element).closest('.clsdivSecondsub')[0].id);
    ////
}
function MasterAdvanceSearchSucess(bs, data, tag) {
    debugger
    if (bs == true && data != null) {
        $("#div_getMasterAdvanceSearch").html(data);
        $("#div_getMasterAdvanceSearch").attr("data-seconddiv", tag);
        $("#getMasterAdvancedSearch").modal("show");
    }
    else {
        COMMON.prototype.showMessage("Error in getting advance search screen");
    }
}
//End DRag Drop
// Get Resource Messages
function getResourceValue(sKey, GetResourceMessages) {
    var value = "";
    var result = null;

    result = findKeyValue(sKey, GetResourceMessages);
    if (result.lValue > 0) {
        value = result.data.Value;

        value = value.replace("{0}", "");
        value = value.replace("{1}", "");
    }

    return (value);
}

function findKeyValue(sKey, arrKeyValue) {
    var iCounter = 0;
    var result = null;
    var obj = null;

    try {
        result = COMMON.prototype.getEmptyResultObject();
        result.lValue = 0;
        result.sValue = "";
        result.data = null;

        for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
            obj = arrKeyValue[iCounter];
            if (obj.Key == sKey) {
                result.lValue = iCounter + 1;
                result.data = obj;
                break;
            }
        }

    }
    catch (err) {
        result.lValue = -1;
        result.sValue = err.message;
    }

    return (result);
}
//End Resource Messages

/// Create/Delete/Edit Landing view
function GetMasterView(element, bNewView) {
    debugger
    if ($(element).hasClass('FOptionControl')) {
        if (OPTIONCONTROL.getControlValue("ctrlCreateMasterViewH") == "1") {
            FILTER.Clear($("#hdnLandingScreenMenuId").val(), 0, false);
            if (!$("#" + $("#hdnLandingScreenMenuId").val() + "_0_AdvanceFilter").find("input,select").hasClass('grey')) {
                COMMON.prototype.showMessage("Can not create or edit Default View");
                $("#" + $("#hdnLandingScreenMenuId").val() + "_0_AdvanceFilter_").css("pointer-events", "none");
                $("#" + $("#hdnLandingScreenMenuId").val() + "_0_AdvanceFilter_").find("input,select").each(function () {
                    $(this).addClass("grey");
                });
            }
            return false;
        }
        else {
            $("#" + $("#hdnLandingScreenMenuId").val() + "_0_AdvanceFilter_").css({ "pointer-events": "auto" });
            $("#" + $("#hdnLandingScreenMenuId").val() + "_0_AdvanceFilter_").find("input,select").each(function () {
                $(this).removeClass("grey");
            });
            $("#btnMasterViewDelete").attr("data-treeid", OPTIONCONTROL.getControlValue("ctrlCreateMasterViewH"));
        }
    }
    else if (bNewView == false && $("#iTreeViewId").val() == "1") {
        return false;
    }
    bNewView = $(element).hasClass('FOptionControl') ? false : bNewView;
    var iMasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var treeId = $(element).hasClass('FOptionControl') ? parseInt(OPTIONCONTROL.getControlValue("ctrlCreateMasterViewH")) : parseInt($("#iTreeViewId").val());
    var ViewNameLeave = $(element).hasClass('FOptionControl') ? true : false;
    NETWORK.executeServerMethod(GLOBAL.getContextPath("createMasterView", "Landing", "Landing"), true,
        { iTreeId: treeId, MasterTypeId: iMasterTypeId, bNewView: bNewView, ViewNameLeave: ViewNameLeave }, "HTML", true, $(element).hasClass('FOptionControl') ? "MasterViewLeaveSucess" : "LandingMasterViewSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ViewNameLeave);
}
function LandingMasterViewSuccess(bs, data) {
    if (bs == true && data != "") {
            $('.divcontents').html('');
            $('#createViewDiv').html('');
            $('#div_CreateMasterView').html(data);
            $('#div_CommonModal').modal('show');
        //$('#div_CreateMasterView').html('').append(data);
        //$('#createNewMasterViewModal').modal('show');
    }
    else {
        COMMON.prototype.showMessage("Error in Loading Master View Screen");
    }
}
function MasterViewLeaveSucess(bs, data, ViewNameLeave) {
    if (bs == true && data != "") {
        data = JSON.parse(data);
        $('#divMasterViewFilterCondition').html('').append(data.GetConditionFilter);
        data.IsAvailableonMobile == true ? $("#chkAvailbleonMobileApp").prop("checked", true) : $("#chkAvailbleonMobileApp").prop("checked", false);
        if (!ViewNameLeave) {
            $('#ctrlCreateMasterViewH').attr('readonly', true);
            $("#ctrlCreateMasterViewH").addClass('grey');
        }
    }
    else {
        COMMON.prototype.showMessage("Error in editing Master View Screen");
    }
}
function MasterCreateViewSave() {
    debugger
    var sMasterName = $("#hdnMasterTypeName").val();
    var sModule = $('#ObjMasterScreenStructure_Module').val();
    var ViewCondition = {
        Condition: "",
        DefaultFilter: true,
        ErrorMessege: "",
        IsAvlblOnMobile: $("#chkAvailbleonMobileApp").is(":checked") ? true : false,
        MasterTypeId: document.getElementById('ObjMasterScreenStructure_MasterTypeId').value,
        RuleCondition: "",
        TreeId: OPTIONCONTROL.getControlValue("ctrlCreateMasterViewH"),
        ViewName: OPTIONCONTROL.getControlText("ctrlCreateMasterViewH")
    }
    var RuleCondition = FILTER.getFilterValue($("#hdnLandingScreenMenuId").val(), 0);
    if (RuleCondition == "") {
        COMMON.prototype.showMessage(getResourceValue("msgFilterConditionisNotValid", GetMasterResourceMessages));
        return false;
    }
    else if (RuleCondition[0].CompareValue == "" && (RuleCondition[0].Operator != 6 && RuleCondition[0].Operator != 7)) {
        COMMON.prototype.showMessage(getResourceValue("msgValuecannotbeleaveempty", GetMasterResourceMessages));
        return false;
    }
    if (ViewCondition.ViewName == "") {
        COMMON.prototype.showMessage(getResourceValue("Enterviewname", GetMasterResourceMessages));
        return false;
    }
    else {
        NETWORK.executeServerMethod(GLOBAL.getContextPath("MasterViewSave", "Landing", "Landing"), true, { ViewCondition: ViewCondition, fRuleCondition: RuleCondition, sMasterName: sMasterName, sModule: sModule }, "HTML", false, "MasterViewSaveSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", true);
    }
}

function MasterViewSaveSuccess(bs, data, bSave) {
    if (bs == true) {
        if (bSave) {
            COMMON.prototype.showMessage(getResourceValue("msgViewCreated", GetMasterResourceMessages));
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("msgViewdeletedsuccessfully", GetMasterResourceMessages));
            treeViewIdSelectedValue = "1";
        }
        var url = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
        MasterLandingScreenLoad(url);
        if ($('.modal-backdrop').length > 0) {
            $('.modal-backdrop').removeClass('modal-backdrop');
        }
    }
    else {
        COMMON.prototype.showMessage(data);
        return false;
    }
}

function deleteMasterView(element) {
    var Treeid;
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    var IsDefault = $('#iTreeViewId').find('option:selected').attr('data-IsDefView');
    if ($(element).attr("data-treeid") != undefined) {
        Treeid = $(element).attr("data-treeid");
    }
    else {
        Treeid = $("#iTreeViewId").val();
    }
    if (Treeid == "1" || parseInt(IsDefault) == 1) {
        COMMON.prototype.showMessage(getResourceValue("msgcannotdeletedefaultView", GetMasterResourceMessages));
        return false;
    }
    if (confirm(getResourceValue("msgAreyousuretodelete", GetMasterResourceMessages))) {
        NETWORK.executeServerMethod(GLOBAL.getContextPath("MasterViewDelete", "Landing", "Landing"), true, { iTreeId: Treeid, iMasterTypeId: MasterTypeId }, "JSON", true, "MasterViewSaveSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", false);
    }
}


/// End Create/Delete/Edit Landing view

/// Master Advance Export 
function getAdvanceExportPartial(bBulkExport) {
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    NETWORK.executeServerMethod(GLOBAL.getContextPath("AdvanceMasterExportPartial", "Landing", "Landing"), true,
        { MasterTypeId: MasterTypeId, bBulkExport: bBulkExport }, "HTML", true, "getAdvanceExportPartialSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}
function getAdvanceExportPartialSuccess(bs, data) {
    if (bs && data != "") {
        $('#divAdvanceExport').html('').append(data);
        $("#AdvMasterExportModal").modal('show');
    }
    else {
        COMMON.prototype.showMessage("Error from advance export partial success");
    }
}

function GetMasterAdvanceExportTabData(element,event) {
    $($("#ulMasterExportTab").find('.FRowColor')).removeClass('FRowColor');
    $(element).addClass('FRowColor');
    var tabid = $(element).attr('id');
    $($("#ulMasterExportRightTab").find('li')).addClass('hidden').removeClass('active');
    $($("#AllContentsDiv").find('div')).addClass('hidden').removeClass('active');
    $($("#ulMasterExportRightTab").find('li.cls' + tabid)[0]).addClass('active');
    $($("#AllContentsDiv").find('div.cls' + tabid)[0]).addClass('active');
    $($("#ulMasterExportRightTab").find('li.cls' + tabid)).removeClass('hidden');
    $($("#AllContentsDiv").find('div.cls' + tabid)).removeClass('hidden');
    var ele = $("#ulMasterExportRightTab").find('li.cls' + tabid)[0];
    checkMasterExportTabBody($(ele).find('a')[0],event);
}
function checkMasterExportTabBody(ele,evt) {
    var bodyId = $(ele).attr('href');
    $("#btnMasterAdvanceExportSelectAll").prop('checked', false);
    if ($(bodyId).length == "0") {
        $($("#AllContentsDiv").find('div')).addClass('hidden');
    }
    else {
        $($("#AllContentsDiv").find('div' + bodyId)).removeClass('hidden');
        var tabid = $($("#AllContentsDiv").find('div' + bodyId)).attr('data-tabid');
        if ($($("#AllContentsDiv").find('div' + bodyId)).find('input[type=checkbox]').length == $($("#AllContentsDiv").find('div' + bodyId)).find('.clsChk' + tabid + ":checked").length) {
            $("#btnMasterAdvanceExportSelectAll").prop('checked', true);
        }
    }
    if (evt != undefined) {
        ExportPopUpTabToggle(ele, evt);
    }
}
function ExportPopUpTabToggle(ele, evt)
{
    debugger
    FCommon.UI.stopKeyProcess(evt);

    var element = ele;// $(ele).find('a');
    //var anchor = $(ele).find('a')[0];
    var aPath = ele.href;//  $(ele).find('a')[0].href;
    var togglediv = aPath.split('#')[1];

    $('#AllContentsDiv').children().removeClass('active');
    $('#AllContentsDiv').children().removeClass('show');

    $('.exportabs,#collapsed').children().removeClass('active');
    $('.exportabs,#collapsed').children().removeClass('show');

    $('.exportabs li').find('a').removeClass('active');
    $('.exportabs li').find('a').removeClass('show');

    document.getElementById(togglediv).classList.add('active');
    document.getElementById(togglediv).classList.add('show');

    $(ele).addClass('show');
    $(ele).addClass('active');

    if ($(ele).closest('li').length > 0) {
        $($(ele).closest('li')[0]).addClass('active');
    }

}
function checkAllAdvMasterExportFields(ele) {
    if (!$($("#AllContentsDiv").find("div.active")).hasClass("hidden")) {
        var activeDiv = !$($("#AllContentsDiv").find("div.active")).hasClass("hidden");
        $("#AllContentsDiv").find("div.active").each(function () {
            //
            if (!$(this).hasClass("hidden")) {
                var TabId = $(this).attr("data-tabid");
                if ($("#btnMasterAdvanceExportSelectAll").is(":checked")) {
                    $($(this).find(".clsChk" + TabId)).prop("checked", true);
                }
                else {
                    $($(this).find(".clsChk" + TabId)).prop("checked", false);
                }
            }
        });
        //


    }
}
function MasterExportTemplateLeave() {
    var MasterExportTemplateId = OPTIONCONTROL.getControlValue("id_MasterExportTemplate");
    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    if (MasterExportTemplateId != "0" && MasterExportTemplateId != "") {
        NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAdvMasterMapping", "Landing", "Landing"), true,
            { MasterTypeId: MasterTypeId, MasterExportTemplateId: MasterExportTemplateId }, "HTML", true, "loadAdvanceImportSheetDataSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
}
function MasterAdvanceExportClick(bBulkExport) {
    var lbMainFieldsArray = [];
    var lbBodyFieldsArray = [];
    var lbHeaderFieldsArray = [];
    var ExportType = $('#ddlMasterAdvanceExportType').val();
    var ExportExtensionType = $('#ddlExportExtensionType').val();
    $('.lbMainFields:checked').each(function () {
        var AdvanceMasterExportCheckedFields = {
            TabId: $(this).attr('data-tabid'),
            FieldId: $(this).attr('data-fieldid'),
            TabCaption: $(this).attr('data-tabcaption'),
            FieldName: $(this).attr('data-fieldname')
        }
        lbMainFieldsArray.push(AdvanceMasterExportCheckedFields);
    });
    $('.lbBodyFields:checked').each(function () {
        var AdvanceMasterExportCheckedFields = {
            TabId: $(this).attr('data-tabid'),
            FieldId: $(this).attr('data-fieldid'),
            TabCaption: $(this).attr('data-tabcaption'),
            FieldName: $(this).attr('data-fieldname')
        }
        lbBodyFieldsArray.push(AdvanceMasterExportCheckedFields);
    });
    $('.lbHeaderFields:checked').each(function () {
        var AdvanceMasterExportCheckedFields = {
            TabId: $(this).attr('data-tabid'),
            FieldId: $(this).attr('data-fieldid'),
            TabCaption: $(this).attr('data-tabcaption'),
            FieldName: $(this).attr('data-fieldname')
        }
        lbHeaderFieldsArray.push(AdvanceMasterExportCheckedFields);
    });
    var ProductAttributesCombo = [];
    if ($("#ulProductAttributesCombo").length > 0) {

        $($("#ulProductAttributesCombo").find('li')).each(function () {
            var obj = {
                ID: $(this).attr('data-id'),
                Name: $(this).text(),
                Tag: ""
            }
            ProductAttributesCombo.push(obj);
        });
    }
    var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
    $("#lblExporting").text("File Exporting in progress...");
    $("#btnMasterAdvanceExport").css({ "pointer-events": "none" });
    NETWORK.executeServerMethod(GLOBAL.getContextPath("MasterAdvanceExportClick", "Landing", "Landing"), true,
           {
               lbMainFieldsArray: lbMainFieldsArray, lbHeaderFields: lbHeaderFieldsArray, lbBodyFields: lbBodyFieldsArray, ExportType: ExportType,
               ExportExtensionType: ExportExtensionType, MasterTypeId: masterTypeId, bIsBulkExport: bBulkExport, ProductAttributesCombo: ProductAttributesCombo
           }, "HTML", true, "MasterAdvanceExportClickSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

}
function MasterAdvanceExportClickSucess(bs, data) {
    $("#lblExporting").text("");
    $("#btnMasterAdvanceExport").css({ "pointer-events": "auto" });
    data = JSON.parse(data);
    if (bs == true && data.strPath != "") {
        var MasterName = $("#hdnMasterTypeName").val();
        //alert(MasterName);
        $("#AdvMasterExportModal").modal('hide');
        var url = GLOBAL.getContextPath("AdvanceMasterDownload", "Landing", "Landing").trim();
        window.location = url + '?m_strPath=' + data.strPath + '&FolderName=' + MasterName;
    }
    else {
        COMMON.prototype.showMessage(data.strError);
    }
}

function advImportSaveMapping() {
    var AdvMasterImportArray = [];
    $(".divHeaderFields").each(function () {
        //
        var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Grid";
        var RowCount = $("#" + GridId + "_body").find('tr').length;
        for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
            var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
            var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
            var AdvMasterImport = {
                MasterTypeId: $("#id_hdnMasterTypeId").val(),
                IsBody: false,
                FieldId: cellObject_Col2.getCellData("value"),
                FieldName: cellObject_Col3.getCellText(),
                TabId: $(this).attr('data-tabid')
            }
            AdvMasterImportArray.push(AdvMasterImport);
        }
    });

    $(".divBodyFields").each(function () {
        //
        var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Body";
        var RowCount = $("#" + GridId + "_body").find('tr').length;
        for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
            var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
            var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
            var AdvMasterImport = {
                MasterTypeId: $("#id_hdnMasterTypeId").val(),
                IsBody: true,
                FieldId: cellObject_Col2.getCellData("value"),
                FieldName: cellObject_Col3.getCellText(),
                TabId: $(this).attr('data-tabid')
            }
            AdvMasterImportArray.push(AdvMasterImport);
        }
    });
    if (AdvMasterImportArray.length == 0) {
        COMMON.prototype.showMessage(getResourceValue("msgNoFields", GetMasterResourceMessages));
        return false;
    }
    var IdNamePair = {
        ID: OPTIONCONTROL.getControlValue("id_MasterExportTemplate"),
        Name: OPTIONCONTROL.getControlText("id_MasterExportTemplate")
    }
    if (IdNamePair.Name == "") {
        COMMON.prototype.showMessage(getResourceValue("msgenternameoftheTemplate", GetMasterResourceMessages));
        return false;
    }
    var advImportSaveMappingResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveAdvMasterMapping", "Landing", "Landing"), true, {
        advFieldList: AdvMasterImportArray, objTemplate: IdNamePair
    }, "JSON", false, "advImportSaveMappingResultSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
}

function advImportSaveMappingResultSuccess(bs, data) {
    if (bs == true && data == "") {
        COMMON.prototype.showMessage(getResourceValue("msgMappingSuccesfull", GetMasterResourceMessages));
    }
    else {
        COMMON.prototype.showMessage(data);
    }
}
function decodeEntities(encodedString) {
    var textArea = document.createElement('textarea');
    textArea.innerHTML = encodedString;
    return textArea.value;
}
function MastersAdvImportClick() {

    try {
        if ($("#txtAdvImportFileName").val().trim() == "") {
            COMMON.prototype.showMessage("Please load excel sheet");
            return false;
        }
        else {
            var HeaderFieldsArray = [];
            var BodyFieldsArray = [];
            $(".divHeaderFields").each(function () {
                //

                var IENamePair = [];
                var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Grid";
                var RowCount = $("#" + GridId + "_body").find('tr').length;
                for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                    var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                    var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                    var objIENamePair = {
                        FieldId: cellObject_Col2.getCellData("value"),
                        MapField: cellObject_Col3.getCellText(),
                    }
                    IENamePair.push(objIENamePair);
                }
                if (IENamePair.length > 0) {
                    var AdvImportHeaderBodyFields = {
                        IENamePairArr: IENamePair
                    }
                    HeaderFieldsArray.push(AdvImportHeaderBodyFields);
                }
            });

            $(".divBodyFields").each(function () {
                //
                var IENamePair = [];
                var GridId = $(this).attr('data-tabname').replace(/ /g, '') + "Body";
                var RowCount = $("#" + GridId + "_body").find('tr').length;
                for (var iRowCounter = 0; iRowCounter < RowCount; iRowCounter++) {
                    var cellObject_Col2 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 2);
                    var cellObject_Col3 = FGRIDCONTROL.getCellObject(GridId, iRowCounter + 1, 3);
                    var objIENamePair = {
                        FieldId: cellObject_Col2.getCellData("value"),
                        MapField: cellObject_Col3.getCellText(),
                    }
                    IENamePair.push(objIENamePair);
                }
                if (IENamePair.length > 0) {
                    var AdvImportHeaderBodyFields = {
                        IENamePairArr: IENamePair
                    }
                    BodyFieldsArray.push(AdvImportHeaderBodyFields);
                }
            });
            var bAppend = false; var bUpdateonly = false; var bOverWrite = false; var bIgnore = false; var bHeaderUpdate = false;
            if ($("#ddlImportAction").val() == "0") {
                bAppend = true;
            }
            else if ($("#ddlImportAction").val() == "1") {
                bUpdateonly = true;
            }
            else if ($("#ddlImportAction").val() == "2") {
                bOverWrite = true;
            }
            if ($("#ddlHeaderFieldAction").val() == "0") {
                bIgnore = true;
            }
            else if ($("#ddlHeaderFieldAction").val() == "1") {
                bHeaderUpdate = true;
            }
            if (HeaderFieldsArray.length > 0 || BodyFieldsArray.length > 0) {
                var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                NETWORK.executeServerMethod(GLOBAL.getContextPath("MastersAdvImportClick", "Landing", "Landing"), true,
                    { HeaderFieldsArray: HeaderFieldsArray, BodyFieldsArray: BodyFieldsArray, bAppend: bAppend, bUpdateonly: bUpdateonly, bOverride: bOverWrite, bIgnore: bIgnore, bHeaderUpdate: bHeaderUpdate, MasterTypeId: m_MasterTypeId },
                    "JSON", true, "MastersAdvImportClickSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
    } catch (ex) {
        alert("Exception-> MastersAdvImportClick : " + ex.message);
        return false;
    }
}

function ImportMastersBulkData() {
    try {
        if ($("#txtAdvImportFileName").val().trim() == "") {
            COMMON.prototype.showMessage("Please load excel sheet");
            return false;
        }
        else {
            var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
            var bAppend = false; var bUpdateonly = false; var bOverWrite = false;
            if ($("#ddlImportAction").val() == "0") {
                bAppend = true;
            }
            else if ($("#ddlImportAction").val() == "1") {
                bUpdateonly = true;
            }
            else if ($("#ddlImportAction").val() == "2") {
                bOverWrite = true;
            }
            NETWORK.executeServerMethod(GLOBAL.getContextPath("btnSQLBulk_Click", "Landing", "Landing"), true,
                { MasterTypeId: m_MasterTypeId, bAppend: bAppend, bUpdateonly: bUpdateonly, bOverride: bOverWrite },
                "JSON", true, "MastersAdvImportClickSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        }
    } catch (ex) {
        alert("Exception-> ImportMastersBulkData : " + ex.message);
        return false;
    }
}

function MastersAdvImportClickSuccess(bs, data) {
    if (bs == true && !isNaN(parseInt(data))) {
        data = data == "0" ? "" : data;
        COMMON.prototype.showMessage(data + " Records " + getResourceValue("msgImportedSuccessfully", GetMasterResourceMessages));
        var m_MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        divLandingGrid(m_MasterTypeId);
    }
    else {
        COMMON.prototype.showMessage("Error in processing import sheet " + data);
    }
}
function setContextMenuPostion(event, contextMenu) {
    contextMenu = $(contextMenu);
    var mousePosition = {};
    var menuPostion = {};
    var menuDimension = {};

    menuDimension.x = contextMenu.outerWidth();
    menuDimension.y = contextMenu.outerHeight();
    mousePosition.x = event.pageX;
    mousePosition.y = event.pageY;

    if (mousePosition.x + menuDimension.x > $(window).width() + $(window).scrollLeft()) {
        menuPostion.x = mousePosition.x - menuDimension.x;
    } else {
        menuPostion.x = mousePosition.x;
    }

    if (mousePosition.y + menuDimension.y > $(window).height() + $(window).scrollTop()) {
        menuPostion.y = (mousePosition.y - menuDimension.y)+100;
        //menuPostion.y = mousePosition.y;
    } else {
        menuPostion.y = mousePosition.y;
    }

    return menuPostion;
}
function getCheckedRowsinMultipleTreetbs() {
    var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
    var masterTypeid = $(tabId).find(".clsdivSecondsub").attr('data-mastertypeid');
    var localCheckedbuffer = [];
    $(tabId).find("#LandingGridBody tr").each(function () {
        if ($($(this).find(".chkRowCheck")).is(":checked")) {
            var masterid = parseInt($(this).find("td.ClsMaster")[0].innerHTML.trim());
            masterid = getEnglishDigits(masterid);
            localCheckedbuffer.push(masterid);

        }
    });
    if (checkbufferForMultipleTreeTbs.length > 0) {
        var localRecursiveBuffer = [];
        for (var i = 0; i < checkbufferForMultipleTreeTbs.length; i++) {
            var chkArr;
            if (masterTypeid == checkbufferForMultipleTreeTbs[i].masterTypeid) {
                chkArr = checkbufferForMultipleTreeTbs[i].checkbuffer;
                for (var j = 0; j < localCheckedbuffer.length; j++) {
                    chkArr.push(localCheckedbuffer[j]);
                }
            } else {
                chkArr = localCheckedbuffer;
            }
            localRecursiveBuffer.push({
                masterTypeid: masterTypeid,
                checkbuffer: chkArr
            });
            break;
        }
        for (var iCounter = 0; iCounter < checkbufferForMultipleTreeTbs.length; iCounter++) {
            if (checkbufferForMultipleTreeTbs[iCounter].masterTypeid == localRecursiveBuffer[0].masterTypeid) {
                checkbufferForMultipleTreeTbs[iCounter].checkbuffer = localRecursiveBuffer[0].checkbuffer;
            } else {
                checkbufferForMultipleTreeTbs.push(localRecursiveBuffer);
            }
        }
    } else {
        checkbufferForMultipleTreeTbs.push({
            masterTypeid: masterTypeid,
            checkbuffer: localCheckedbuffer
        });
    }
}
function getGlobalCacheForMasters(bFromDivLandingGridSuccess) {

    if (parseInt($("#ObjMasterScreenStructure_MasterTypeId").val()) == 1 || parseInt($("#ObjMasterScreenStructure_MasterTypeId").val()) == 2) {
        if (GLOBAL.GlobalCacheArrayForMasters.length > 0) {
            if (bFromDivLandingGridSuccess) {
                $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache", "True");
                $('#toggle_ribbon').attr('data-content', 0);
                $('#toggle_ribbon').attr('data-IsFirstToggle', 'false');
            }
            for (var i = 0; i < GLOBAL.GlobalCacheArrayForMasters.length; i++) {
                $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache") == undefined ? $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache", "True") : $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache");
                if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val()) && $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache") == "True" && GLOBAL.GlobalCacheArrayForMasters[i].bReport == false) {
                    $("#page_Content").html("");
                    treeViewIdSelectedValue = "";
                    $("#page_Content").html(GLOBAL.GlobalCacheArrayForMasters[i].HtmlContent);
                    //  alert(GLOBAL.GlobalCacheArrayForMasters[i].HtmlContent)
                    $('#divSecondsub').removeClass("hidden");
                    $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache", false);
                    //$('#toggle_ribbon').removeClass('glyphicon-menu-up').addClass('glyphicon-menu-down');
                    //$('#Main').removeClass('hidden');
                    $('#ulCommonlyUsedRibbon,#divfirstsub').css({ 'pointer-events': 'auto' });
                    $("#divfirstsub,#tree2 > li > a,#ulCommonlyUsedRibbon").removeClass('grey');
                    $($('#divfirstsub').find("a,select")).each(function () {
                        $(this).removeClass('grey');
                    });

                    return false;
                }
            }
            if (GLOBAL.GlobalCacheArrayForMasters.indexOf(parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) == -1 && $("#ObjMasterScreenStructure_MasterTypeId").attr("data-cache") == "True") {
                var obj = {
                    MasterTypeId: parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val()),
                    HtmlContent: document.getElementById("page_Content").innerHTML,
                    bReport: false,

                }
                GLOBAL.GlobalCacheArrayForMasters.push(obj);
                return false;
            }
        }
        else {
            if (bFromDivLandingGridSuccess) {
                $('#toggle_ribbon').attr('data-content', 0);
                $('#toggle_ribbon').attr('data-IsFirstToggle', 'false');
            }
            var obj = {
                MasterTypeId: parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val()),
                HtmlContent: document.getElementById("page_Content").innerHTML,
                bReport: false,

            }
            if (GLOBAL.GlobalCacheArrayForMasters.indexOf(parseInt($("#ObjMasterScreenStructure_MasterTypeId").val() + $("#companyId").val())) == -1) {
                GLOBAL.GlobalCacheArrayForMasters.push(obj);
            }
            return false;
        }
    }
}

function getCacheDataForMasterEntryScreen() {

    var bEntryScreenFromOutside = false;
    if ($("#hdnNewMasterOCValue").length > 0) {
        bEntryScreenFromOutside = $("#hdnNewMasterOCValue").val() == "True" ? true : false;
    }
    if ((parseInt($("#hdnMasterTypeId").val()) == 1 || parseInt($("#hdnMasterTypeId").val()) == 2) && !bEntryScreenFromOutside) {
        if ($("#hdnMasterTypeId").attr("data-buttonclicked") == undefined) {
            if ($("#hdnButtonClickName").val() == "btnNew" || $("#hdnButtonClickName").val() == "btnAddGroup") {
                FormCacheDataForMasterEntryScreen();
            }
        }
        else {
            FormCacheDataForMasterEntryScreen();
        }

    }
}
function FormCacheDataForMasterEntryScreen() {
    if (GLOBAL.GlobalCacheForMasterEntryScreen.length > 0) {
        for (var i = 0; i < GLOBAL.GlobalCacheForMasterEntryScreen.length; i++) {
            $("#hdnMasterTypeId").attr("data-cache") == undefined ? $("#hdnMasterTypeId").attr("data-cache", "True") : $("#hdnMasterTypeId").attr("data-cache");
            $("#hdnMasterTypeId").attr("data-group") == undefined ? $("#hdnMasterTypeId").attr("data-group", $("#hdnIsgroup").val()) : $("#hdnMasterTypeId").attr("data-group");
            if (GLOBAL.GlobalCacheForMasterEntryScreen[i].MasterTypeId == parseInt($("#hdnMasterTypeId").val() + $("#companyId").val()) && $("#hdnMasterTypeId").attr("data-cache") == "True" && GLOBAL.GlobalCacheForMasterEntryScreen[i].bGroup == $("#hdnMasterTypeId").attr("data-group")) {
                //debugger
                var objlstccopyparentvalue = document.getElementById('hdnLstCopyFromparentvalues').getAttribute('data-value');
                localStorage.setItem("CopyFromParentValues", objlstccopyparentvalue);

                var AcctOrProdValue = $("#hdnMasterTypeId").attr("data-accountorprodtype");
                var valuationtype = $("#hdnMasterTypeId").attr("data-valuationtype");
                var ParentId = $("#hdnMasterTypeId").attr("data-parentid");
                var strAccountTypeValues = $("#hdnMasterTypeId").attr("data-accounttypestringvalues");
                $("#divSecondsub").html("");
                $("#divSecondsub").html(GLOBAL.GlobalCacheForMasterEntryScreen[i].HtmlContent);
                $('#divSecondsub').removeClass("hidden");
                //  alert(GLOBAL.GlobalCacheArrayForMasters[i].HtmlContent)
                if ($("#hdnCountMultipleTrees").length > 0 && parseInt($("#hdnMasterTypeId").val()) == 2) {
                    $('#hdnCountMultipleTrees').val("0");
                }
                $("#hdnMasterTypeId").attr("data-cache", "False");
                if ($("#hdnMasterTypeId").val() == "1" && strAccountTypeValues != undefined && strAccountTypeValues != null) {
                    strAccountTypeValues = strAccountTypeValues.split(',');
                    $("#iAccountType").empty();
                    for (var i = 0; i < (strAccountTypeValues.length / 2) ; i++) {
                        var stroptions = '<option value=' + strAccountTypeValues[(2 * i)] + '>' + strAccountTypeValues[(2 * i) + 1] + '</option>'
                        $("#iAccountType").append(stroptions);
                    }
                }
                $("#iAccountType,#iProductType,#hdnAccountOrProdValue").val(AcctOrProdValue);
                if ($("#hdnMasterTypeId").val() == "2") {
                    $("#iValuationMethod").val(valuationtype);
                    $("#hdnAccountOrProdValue").attr("data-valuationtype", valuationtype);
                }
                $("#hdnParentId").val(ParentId);
                document.getElementById('hdnIsEntryReadyRequire').value = "False";
                return false;
            }
        }
        if ($("#hdnMasterTypeId").attr("data-cache") == "True") {
            var obj = {
                MasterTypeId: parseInt($("#hdnMasterTypeId").val() + $("#companyId").val()),
                HtmlContent: document.getElementById("divSecondsub").innerHTML,
                bGroup: $("#hdnIsgroup").val()
            }
            document.getElementById('hdnIsEntryReadyRequire').value = "False";
            GLOBAL.GlobalCacheForMasterEntryScreen.push(obj);
            return false;
        }
    }
    else {
        var obj = {
            MasterTypeId: parseInt($("#hdnMasterTypeId").val() + $("#companyId").val()),
            HtmlContent: document.getElementById("divSecondsub").innerHTML,
            bGroup: $("#hdnIsgroup").val()
        }
        document.getElementById('hdnIsEntryReadyRequire').value = "False";
        GLOBAL.GlobalCacheForMasterEntryScreen.push(obj);
        return false;
    }
}
/// End Master Advance Export 

/// Landing page script
function landingWindowResizeAndChangeCSS() {
    $("#test" + DashletId).text($(window).width())
    if ($(window).width() <= 768) {
        $("#divSearchControls" + DashletId).css("margin-left", "");
    } else {
       // $("#divSearchControls" + DashletId).css("margin-left", "-15px");
    }
    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
}
function ReportsCacheContent() {
    var bHasCacheReportsServer = document.getElementById('hdnHasReportsCache').value;
    if (IsFromDashlet) {
        return;
    }
    var bReport = $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("breport") == undefined ? "False" : $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("breport");
    if (bReport == "True" && $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-reportaccntorprod") == "True") {
        //debugger

        if (bHasCacheReportsServer == "False" || bHasCacheReportsServer == undefined) {
            //@if server does not have any caching identification,clear the stored cache as it has to be cache fresh page data
            if (GLOBAL.GlobalCacheArrayForMasters.length > 0) {
                for (var i = GLOBAL.GlobalCacheArrayForMasters.length - 1; i >= 0 ; i--) {
                    if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId" + DashletId).val() + $("#companyId").val()) && GLOBAL.GlobalCacheArrayForMasters[i].bReport == true) {
                        GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);
                    }
                }
            }
            //return;
        }

        if (GLOBAL.GlobalCacheArrayForMasters.length > 0) {
            for (var i = 0; i < GLOBAL.GlobalCacheArrayForMasters.length; i++) {
                $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-cache") == undefined ? $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-cache", "True") : $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-cache");
                if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#ObjMasterScreenStructure_MasterTypeId" + DashletId).val() + $("#companyId").val()) && $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-cache") == "True" && GLOBAL.GlobalCacheArrayForMasters[i].bReport == true) {
                    $("#LandingControl").html("");
                    $("#LandingControl").html(GLOBAL.GlobalCacheArrayForMasters[i].HtmlContent);
                    //  alert(GLOBAL.GlobalCacheArrayForMasters[i].HtmlContent)
                    $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-cache", false);

                    break;
                }
            }
            if (GLOBAL.GlobalCacheArrayForMasters.indexOf(parseInt($("#ObjMasterScreenStructure_MasterTypeId" + DashletId).val() + $("#companyId").val())) == -1 && $("#ObjMasterScreenStructure_MasterTypeId" + DashletId).attr("data-cache") == "True") {
                //document.getElementById('hdnIsReadyRequire').value = "False";
                document.getElementById('hdn_' + LandingReadyUniqueId).value = "False";
                var obj = {
                    MasterTypeId: parseInt($("#ObjMasterScreenStructure_MasterTypeId" + DashletId).val() + $("#companyId").val()),
                    HtmlContent: document.getElementById("LandingControl").innerHTML,
                    bReport: true,
                    bEntryScreen: false

                }
                GLOBAL.GlobalCacheArrayForMasters.push(obj);

                // break;
            }
        }
        else {

            //document.getElementById('hdnIsReadyRequire').value = "False";
            document.getElementById('hdn_' + LandingReadyUniqueId).value = "False";
            var obj = {
                MasterTypeId: parseInt($("#ObjMasterScreenStructure_MasterTypeId" + DashletId).val() + $("#companyId").val()),
                HtmlContent: document.getElementById("LandingControl").innerHTML,
                bReport: true,
                bEntryScreen: false

            }
            if (GLOBAL.GlobalCacheArrayForMasters.indexOf(parseInt($("#ObjMasterScreenStructure_MasterTypeId" + DashletId).val() + $("#companyId").val())) == -1) {
                GLOBAL.GlobalCacheArrayForMasters.push(obj);
            }
            // break;
        }
    }

}
//function landingWindowResizeAndChangeCSS() {
//    // //debugger
//    $("#test").text($(window).width())
//    console.log('landingWindowResizeAndChangeCSS started: ', new Date().toLocaleString());
//    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
//    if ($(window).width() <= 768 && $('#MasterRetrieval_IsReport').val() == 'False') {
//        if ($(window).width() > 760 && $(window).width() < 770) {
//            //  alert($(window).width())
//            $('#li_SearchAccnt').css('width', 'auto');
//            $('#btnSearchAcc').css('border', 'none');
//            $('#btnSearchAcc1').css('border', '1px solid #c6c6c6');
//            $('#divGridPadding').css('padding', '10px');
//            $('#li_cmb').css({ 'margin-bottom': '-10px', 'padding-left': '', 'width': '30%' });
//            $('#li_resizeGrid').css({ 'padding-left': '', 'padding-top': '', 'margin-bottom': '' });
//            $('#ulheader,.clsLandingULBtns').css('padding', '0px 15px');
//            $('#li_moveup').css({ 'width': '20%' });
//            $('#divLanding').css({ 'overflow-y': 'auto', 'overflow-x': 'hidden' });
//            $('#infoPanelSidebarDiv').css({ 'margin-left': '-14px' });
//            $('#landingHeaderDiv').css({ 'width': '102%' });
//            $('#ulheader,.clsLandingULBtns').css('display', 'flex');
//            $('#ulheader,.clsLandingULBtns').addClass('inlineFlexCls');
//            $('#page_Content').removeClass('overflowNone');
//            return false;
//        }
//        else {
//            //  alert($(window).width())
//            $('#divLanding').css({ 'overflow-y': 'auto', 'overflow-x': 'hidden' });
//            // $('#divSecondsub').removeClass('padding0');
//            $('#ulheaderm,.clsLandingULBtns').css('padding', '0px 15px');
//            $('#chkResizeGrid').css('padding', '5px 5px 0px');
//            $('#btnSearchAcc').css('border', 'none');
//            $('#btnSearchAcc1').css('border', '1px solid #c6c6c6');
//            $('#li_cmb').css({ 'margin-bottom': '', 'padding-left': '', 'width': '35%' });
//            $('#li_resizeGrid').css({ 'padding-left': '', 'padding-top': '', 'margin-bottom': '-10px' });
//            $('#divGridPadding').css('padding', '10px');
//            $('#li_SearchAccnt').css({ 'width': '' });
//            $('#li_moveup').css({ 'margin-bottom': '-10px', 'width': '25%' })//, 'padding-left': '15px',
//            if ($(window).width() > 470 && $(window).width() < 483) {
//                $('#li_cmb').css({ 'width': 'auto', 'margin-bottom': '-10px' });
//                $('#li_resizeGrid').css({ 'padding-left': '48px', 'padding-top': '10px' });
//                $('#li_Retain').css({ 'padding-left': '' });
//                $('#li_SearchAccnt').css({ 'width': '100%', 'padding-left': '' });
//                $('#ihndtoggle').val(0);
//                $("#oncheckaccorderan").trigger("click");
//            }
//            else if ($(window).width() <= 325) {
//                $('#li_SearchAccnt').css({ 'width': '' });
//                $('#li_cmb').css({ 'width': '' });
//                $('#li_resizeGrid').css({ 'padding-top': '', "margin-left": "-12px" });
//                $('#li_moveup').css({ 'width': '', "margin-bottom": "" })
//            }
//        }
//        $('#page_Content').removeClass('overflowNone');
//        $('#infoPanelSidebarDiv').css({ 'margin-left': '-14px' });
//        $('#landingHeaderDiv').css({ 'width': '102%' });
//        ($('#hdnEditMasterClick').val() != null && $('#hdnEditMasterClick').val() != '' && $(window).width() > 645) ? $('#ulheader,.clsLandingULBtns').css('display', 'flex') : $('#ulheader,.clsLandingULBtns').css('display', 'block');
//        ($('#hdnEditMasterClick').val() != null && $('#hdnEditMasterClick').val() != '' && $(window).width() > 645) ? $('#ulheader,.clsLandingULBtns').addClass('inlineFlexCls') : $('#ulheader,.clsLandingULBtns').removeClass('inlineFlexCls');
//    }
//    else if ($(window).width() >= 1020 && $('#MasterRetrieval_IsReport').val() == 'True') {
//        // COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
//        $('#ulheader,.clsLandingULBtns').css('display', 'inline-flex');
//        $('#landingHeaderDiv').css({ 'width': '' });
//        //$('#txtsrch-term').css('width', '150px');
//        $('#li_SearchAccnt,#li_cmb').css('width', '45%');
//        if ($(window).width() > 1020 && $(window).width() < 1028) {
//            $('#li_SearchAccnt').css('width', 'auto');
//            $('#divGridPadding').css('padding', '10px');
//            $('#btnSearchAcc').css('border', 'none');
//            $('#btnSearchAcc1').css('border', '1px solid #c6c6c6');
//            $('#divLanding').css('overflow', '');
//        }
//        else {
//            $('#divGridPadding').css('padding', '30px');
//            $('#divLanding').css('overflow', '');
//            $('#btnSearchAcc').css('border', '1px solid #c6c6c6');
//            $('#btnSearchAcc1').css('border', 'none');
//        }

//    }

//    else if ($(window).width() <= 480 && $('#MasterRetrieval_IsReport').val() == 'True') {
//        $('#page_Content').removeClass('overflowNone');
//        $('#ulheader,.clsLandingULBtns').css({ 'display': 'block', 'padding': '0px 15px' });
//        $('#ulheader,.clsLandingULBtns').removeClass('inlineFlexCls');
//        //$(window).width() == 480 ? $('#li_cmb').css({ 'padding-left': '5px', 'width': '40%' }) : $('#li_cmb').css({ 'padding-left': '5px', 'width': '100%' })
//        $('#li_cmb').css({ 'padding-left': '5px', 'width': '100%' });
//        $('#li_SearchAccnt').css('width', 'auto');
//        $($('#li_resizeGrid').find(".input-group")).css({ "padding": "10px 0 0 0" });
//        $('#txtsrch-term,.clstxtsrch-term').css('width', '');
//        $('#li_resizeGrid').css({ 'padding-left': '5px', 'padding-top': '' });
//        $('#divGridPadding').css('padding', '0px');
//        $('#divLanding').css({ 'overflow-y': 'auto', 'overflow-x': 'hidden' });
//        $('#landingHeaderDiv').css({ 'width': '102%' });
//        $('#btnSearchAcc').css('border', 'none');
//        $('#btnSearchAcc1').css('border', '1px solid #c6c6c6');
//    }
//    else {
//        if ($('#MasterRetrieval_IsReport').val() == 'False') {
//            $('#li_cmb').css('margin-bottom', '-12px');
//            ($('#hdnEditMasterClick').val() != null && $('#hdnEditMasterClick').val() != '') ? $('#ulheader,.clsLandingULBtns').css('display', 'flex') : $('#ulheader,.clsLandingULBtns').css('display', 'block');
//            ($('#hdnEditMasterClick').val() != null && $('#hdnEditMasterClick').val() != '') ? $('#ulheader,.clsLandingULBtns').addClass('inlineFlexCls') : $('#ulheader,.clsLandingULBtns').removeClass('inlineFlexCls');
//            if ($(window).width() > 1015 && $(window).width() < 1030) {
//                $('#li_SearchAccnt,#li_cmb').css('width', '45%');
//                $('#btnSearchAcc').css('border', 'none');
//                $('#btnSearchAcc1').css('border', '1px solid rgb(198, 198, 198)');
//                $('#page_Content').removeClass('overflowNone');
//            }
//            else {
//                $('#li_SearchAccnt,#li_cmb').css('width', '30%');
//                $('#btnSearchAcc').css('border', '1px solid rgb(198, 198, 198)');
//                $('#btnSearchAcc1').css('border', 'none');
//                $('#page_Content').addClass('overflowNone');
//            }
//            $('#divGridPadding').css('padding', '10px');
//            $('#li_moveup').css({ 'width': '' });
//            $('#li_resizeGrid').css({ 'padding-left': '' });
//            $('#divLanding').css('overflow', '');

//            $('#landingHeaderDiv').css({ 'width': '' });
//            $('#infoPanelSidebarDiv').css({ 'margin-left': '14px' });
//            $('#ihndtoggle').val(1);
//            CheckAccorderanClick(emptyString);
//            COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
//            console.log('landingWindowResizeAndChangeCSS ended: ', new Date().toLocaleString());
//            return;
//        }
//        else if ($(window).width() <= 640 && $('#MasterRetrieval_IsReport').val() == 'True') {
//            $('#ulheader,.clsLandingULBtns').css({ 'padding': '0px 15px' });
//            $('#divLanding').css({ 'overflow-y': 'auto', 'overflow-x': 'hidden' });
//            $('#landingHeaderDiv').css({ 'width': '102%' });
//            $('#btnSearchAcc').css('border', 'none');
//            $('#btnSearchAcc1').css('border', '1px solid #c6c6c6');
//            $('#page_Content').removeClass('overflowNone');
//        }
//        //alert($(window).width())
//        $('#li_cmb').css('padding-left', '0px');
//        $('#li_SearchAccnt').css('width', 'auto');
//        $('#li_resizeGrid').css('padding-top', '0px');
//        //  $('#txtsrch-term').css('width', '150px');
//        $('#divGridPadding').css('padding', '10px');
//        $('#btnSearchAcc').css('border', 'none');
//        $('#divLanding').css({ 'overflow-y': 'auto', 'overflow-x': 'hidden' });
//        $('#btnSearchAcc1').css('border', '1px solid #c6c6c6');
//        $('#landingHeaderDiv').css({ 'width': '102%' });
//        $('#infoPanelSidebarDiv').css({ 'margin-left': '14px' });
//        $('#page_Content').addClass('overflowNone');
//    }
//    console.log('landingWindowResizeAndChangeCSS ended: ', new Date().toLocaleString());
//}

function startFocusOut() {
    $(document).on("click", function () {
        $(".ContextMenu").hide(500);              // To hide the context menu
        $(document).off("click");
    });
}

// Landing page end

// Grid partial page
function LandingGridContextmenuClick(event) {
    //debugger
    var rowNo = $(event.target).closest('tr')[0].rowIndex;
    if (rowNo != undefined) {
        var id = document.getElementById('landgridData' + DashletId);
        //alert('Row No:' + rowNo + 'ID:' + ID);
        if (event.shiftKey || event.ctrlKey) {
            //$(event.target.parentElement).addClass('FRowColor');
        } else {
            $($($(id).find('tbody')).find('tr')).removeClass('FRowColor');
            MultipulMasterIds = [];
            IsMasterIdGroup = [];
            //$(event.target.parentElement).addClass('FRowColor');
        }
        $($($($(id).find('tbody')).find('tr'))[rowNo - 1]).addClass('FRowColor');
        document.getElementById('hndSelectedRowNo').value = rowNo - 1;
        var masterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId' + DashletId).value;
        var masterId = $(event.target).closest('tr').find('td')[8].innerHTML.trim();
        masterId = getEnglishDigits(masterId);
        var IsGroup = $(event.target).closest('tr').find('td')[0].innerHTML.trim();
        var isProdorAcc = $(event.target).closest('tr').find('td')[9].innerHTML.trim();
        var iParentId = $(event.target).closest('tr').find('td')[2].innerHTML.trim();
        if ($('#hndReportView').val() == "False" && IsPartialView == 'False') {
            getDataForInfoPanel(masterTypeId, masterId);
        }
        SaveMultipuleMasterIds(masterId, IsGroup, isProdorAcc);
    }
    if ($('#LandingGridBody' + DashletId + ' tr').hasClass('FRowColor')) {
        event.preventDefault();

        var isGroup = $($('.FRowColor')).find('td')[0].innerHTML.trim();
        if (isGroup == 'True') {
            $('#ctxOpen i,#li_cmSort i').contents().unwrap();
            $('#ctxOpen').attr('style', 'color: black');
            $('#ctxOpen,#li_cmSort').css('font-style', '');
            $('#ctxOpen,#ctxSort').removeClass("grey");
        }
        else {
            //$('#ctxOpen,#li_cmSort').css('font-style', 'italic');
            $('#ctxOpen,#ctxSort').addClass("grey");
        }

        if (GridrowidValuesForMovingRecords.length == 0) {
            //$('#ctxMove,#ctxMoveHere').css('font-style', 'italic');
            $('#ctxMoveHere,#ctxMove').addClass("GreyAndPointerEventNone");
            bMovedFromContextMenuClicked = false;
        }
        else {
            //  $('#ctxMove').contents().unwrap();
          //  $('#ctxMove').attr('style', 'color: black')
            $('#ctxMove').css('font-style', '');
            $('#ctxMove').removeClass("GreyAndPointerEventNone");
        }
        var postions = setContextMenuPostion(event, document.getElementById('gridContextMenu'));;

       // $('#gridContextMenu').css('left', postions.x);   // For updating the menu position.
        //$('#gridContextMenu').css('top', Math.abs(postions.y));  //

        $('#gridContextMenu').attr('style', 'position:absolute !important;left:' + postions.x.toString()+'px' + '!important;'+
            'top:' + Math.abs(postions.y).toString() + 'px' + '!important;');//+'display:block;'
        //$('#gridContextMenu').attr('style', 'left:' + postions.x.toString() + '!important');
        //$('#gridContextMenu').attr('style', 'top:' + Math.abs(postions.y).toString() + '!important');
        //$('#gridContextMenu').attr('style', 'display:block');


        $('#gridContextMenu').fadeIn(500);
        $("#ulGridContextMenu li").each(function () {
            if ($(this).find('span').attr('id') != "ctxBookMark" && $(this).find('span').attr('id') != "ctxShowInGroup") {

                // if($("#btnNew").length==0||$("#btnMasterEdit").length==0||$("#btnClone").length==0||$("#btnDelete").length==0|| $("#btnSorting").length==0|| $("#btnProperties").length==0||$("#div_Properties").attr("data-movefield")=="False"){
                var btnId = $(this).find('span').attr("data-btnid");
                if (btnId != undefined && !$(this).hasClass("clsMoveContexts")) {
                    if ($("#" + btnId).length == "0") {
                        $(this).find('span').addClass("GreyAndPointerEventNone");
                    }
                } else if ($(this).find("span").attr("id") == "ctxMoveToNewGroup" && $("#div_Properties").attr("data-movefield") == "False") {
                    $(this).find('span').addClass("GreyAndPointerEventNone");
                }
            }
        });
    }
}
function LandingAndMasterUpdateAlerts() {
    //  GLOBAL.gotoHomePage();
    NETWORK.executeServerMethod(
                GLOBAL.getContextPath("GetAlerts", "Home", ""),
                true,
                null,
                "",
                true,
                "LandingAndMasterUpdateAlertsSuccess",
                "GLOBAL.LoadingStart",
                "GLOBAL.LoadingEnd"
         );
}
// It is callback of UpdateAlerts
function LandingAndMasterUpdateAlertsSuccess(bSuccess, html) {
    if (bSuccess) {
        $("#alertsUL").html(html);
    }
}
function getEnglishDigits(str) {
    try {
        if (parseInt($("#hdnLanguageId").val()) == 1) {
            return Number(str.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function (d) {
                return d.charCodeAt(0) - 1632;
            }).replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function (d) { return d.charCodeAt(0) - 1776; }));
        }
        else {
            return str;
        }
    }
    catch (err) {

    }

}
//End grid parital

// Product Attributes region
var start = undefined;
var index = undefined;
var startX = undefined;
var startWidth = undefined;
var pressed = false;
var Landing_ExternalModule = {
    COMMON: function (ExternalModuleForMastersObject, i, TypeOfEvent, objCallBack) {
        //debugger
        if (ExternalModuleForMastersObject[i].ModuleType == EXTERNALMODULE_TYPE_ENUM.URL) {
            //if (ExternalModuleForMastersObject[i].ClassName != "") {
            //    if (ExternalModuleForMastersObject[i].FunctionName.toString() == "") {
            //        alert("Exception: FunctionName of External Module is blank");
            //        return false;
            //    }
            //    var strUrl = ExternalModuleForMastersObject[i].ModuleName.toString() + "/" + ExternalModuleForMastersObject[i].ClassName.toString() + "/" + ExternalModuleForMastersObject[i].FunctionName.toString();
            //    return strUrl;
            //}
            if (TypeOfEvent == EXTERNALMODULE_EVENT_ENUM.ON_ADD_TAB || TypeOfEvent == EXTERNALMODULE_EVENT_ENUM.ON_BUTTON) {
                if ((ExternalModuleForMastersObject[i].ModuleName).endsWith(".js")) {
                    var data = null;
                    try {
                        var returnValue = FWrapper.loadExternalJS(ExternalModuleForMastersObject[i].ModuleName, ExternalModuleForMastersObject[i].FunctionName);
                        if (typeof returnValue === 'undefined') {
                            return undefined;
                        } else {
                            data = {};
                            data.value = returnValue;
                            data.TabName = ExternalModuleForMastersObject[i].ButtonCaption;
                            data.bURL = false;
                            return data;
                        }

                    }
                    catch (err) {
                        alert("Exception :Landing_ExternalModule.Common " + err.message);
                        return false;
                    }
                }
                else {
                    //FWrapper.openPopup(ExternalModuleForMastersObject[i].ModuleName, objCallBack);
                }
                data = {};
                data.value = ExternalModuleForMastersObject[i].ModuleName;
                data.TabName = ExternalModuleForMastersObject[i].ButtonCaption;
                data.bURL = true;
                return data;
            }
            else {
                if ((ExternalModuleForMastersObject[i].ModuleName).endsWith(".js")) {
                    try {
                        FWrapper.loadExternalJS(ExternalModuleForMastersObject[i].ModuleName, ExternalModuleForMastersObject[i].FunctionName, objCallBack);
                        return;
                    }
                    catch (err) {
                        alert("Exception -> Landing_ExternalModule.Common: " + err.message);
                        return false;
                    }

                }
                else {
                    FWrapper.openPopup(ExternalModuleForMastersObject[i].ModuleName, objCallBack);
                }
                return ExternalModuleForMastersObject[i].ModuleName;
            }
        }
    },
    addResizeToColunmns: function (tableId) {
        $("#" + tableId + " th").mousedown(function (e) {
            var bReport = ($("#hndReportView").val() == "True" || IsPartialView == 'True') ? true : false;
            index = $(this).index()
            if ((index == 0 || index == 1) && !bReport) {
                return false;
            } else if (index == 0 && bReport)
                return false;
            start = $(this);
            startX = e.pageX;
            startWidth = start.width();
            pressed = true;


        });
        $("#divLanding").mousemove(function (e) {
            if (pressed) {
                $(start).addClass("resizer").removeClass("resizing");
                var newWidth = "";
                var child = "";
                var iLanguageID = document.getElementById("hdnLanguageId").value;
                if (iLanguageID == 0 || iLanguageID == undefined) {
                    newWidth = startWidth + (e.pageX - startX);
                    start.width(newWidth);
                    child = $("#" + tableId).find(e.target);
                    if (child != undefined && child != null && child.length > 0)
                        child[0].style.width = parseInt(child[0].style.width.substring(child[0].style.width.length - 2)) + newWidth + "px";
                }
                else {
                    newWidth = startWidth - (e.pageX - startX);
                    start.width(newWidth);
                    child = $("#" + tableId).find(e.target);
                    if (child != undefined && child != null && child.length > 0)
                        child[0].style.width = parseInt(child[0].style.width.substring(child[0].style.width.length + 2)) - newWidth + "px";
                }
            }
        });

        $("#divLanding").mouseup(function () {
            if (pressed) {
                $(start).removeClass("resizer resizing");
                pressed = false;
            }
        });
    },
}


// Product Attributes region
function CheckIfExternalModuleEnable(EventToBeChecked, objCallBack) {
    if (ExternalModuleForMastersObject != undefined) {
        //  debugger
        if (ExternalModuleForMastersObject.length > 0) {
            var bFoundEvent = false;
            for (var i = 0; i < ExternalModuleForMastersObject.length; i++) {
                if (ExternalModuleForMastersObject[i].OnEvent == EventToBeChecked) {
                    bFoundEvent = true;
                    break;
                }
            }
            if (bFoundEvent) {
                switch (EventToBeChecked) {
                    //case EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE://3
                    //    {
                    //        Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //        m_EmAddedEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE;
                    //        return true;
                    //        break;
                    //    }
                    //case EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE://4
                    //    {
                    //        Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //        m_EmAddedEvent = EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE;
                    //        return true;
                    //        break;
                    //    }
                    //case EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE://5
                    //    {
                    //        Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i, "", objCallBack);
                    //        m_EmAddedEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE;
                    //        return true;
                    //        break;
                    //    }
                    //case EXTERNALMODULE_EVENT_ENUM.AFTER_DELETE://9
                    //    {
                    //        Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //        m_EmAddedEvent = EXTERNALMODULE_EVENT_ENUM.AFTER_DELETE;
                    //        return true;
                    //        break;
                    //    }
                    //case EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD://1
                    //    {
                    //        Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //        m_EmAddedEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD;
                    //        return true;
                    //        break;
                    //    }
                    //case EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD://2
                    //    {
                    //        Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //        m_EmAddedEvent = EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD;
                    //        return true;
                    //        break;
                    //    }
                    //    //case EXTERNALMODULE_EVENT_ENUM.ON_BUTTON://7
                    //    //    {
                    //    //        return Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //    //        break;
                    //    //    }
                    //    //case EXTERNALMODULE_EVENT_ENUM.ON_ADD_TAB://8
                    //    //    {
                    //    //        return Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i, EXTERNALMODULE_EVENT_ENUM.ON_ADD_TAB);
                    //    //        break;
                    //    //    }
                    //case EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE://6
                    //    {
                    //        return Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                    //        break;
                    //    }
                    case EXTERNALMODULE_EVENT_ENUM.ON_ENTER, EXTERNALMODULE_EVENT_ENUM.ON_LEAVE, EXTERNALMODULE_EVENT_ENUM.ON_CHANGE://10,11,12
                        {
                            return Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i);
                            break;
                        }
                    default:
                        return false;
                        break;
                }
            }
            else {
                return false;
            }
        } else {
            return false;
        }
    }
    else {
        return false;
    }
}

function LandingTableColumnSort(element) {
   // debugger
    if (element.cellIndex == 0 || element.cellIndex == 1)
        return false;
    var sortOrder = 1;
    var o = $(element).hasClass('asc') ? 'desc' : 'asc';
    if (o == 'desc') {
        sortOrder = -1;
    }
    $(element.parentNode.children).each(function () {
        //$(this).innerHTML = "";
        this.innerHTML = this.innerText;

    });
    if (o == 'asc') {
        $(element).html('' + element.innerText + '<i class="fa fa-caret-down" style="margin-left:4px;"></i>');
    } else {
        $(element).html('' + element.innerText + '<i class="fa fa-caret-up" style="margin-left:4px;"></i>');
    }


    var tbod = $(element).closest("table").find("tbody");
    var rows = tbod.children().get();// tbod.find("tr");
    $(element).removeClass('asc').removeClass('desc');
    $(element).addClass(o);

    var ThIndex = $(element).prevAll().length;
    var colIndex = $(rows).find("td:visible")[ThIndex].cellIndex;

    //sortTable(rows, colIndex);
    var FireFoxIndex = parseInt(CheckBrowser());
    rows.sort(function (a, b) {
        var A = $(a).find("td").eq(colIndex).text().toLowerCase();
        var B = $(b).find("td").eq(colIndex).text().toLowerCase();

        if (!isNaN(A)) A = Number(A);
        if (!isNaN(B)) B = Number(B);

        //rows.sort(function (a, b) {
        //            debugger
        //            var A = $(a).find("td").eq(colIndex).text().toLowerCase();
        //            var B = $(b).find("td").eq(colIndex).text().toLowerCase();

        //            if (!isNaN(A)) A = Number(A);
        //            if (!isNaN(B)) B = Number(B);

        //            return o == 'asc' ? A > B : B > A;
        //        });

        //mozilla  sorting
        if (FireFoxIndex == 2) {
            if (o == 'asc') {
                if (isNaN(A) == false && isNaN(B) == true) {
                    return 0;
                }
                else if (isNaN(A) == true && isNaN(B) == false) {
                    return sortOrder;
                }
                else if (isNaN(A) && isNaN(B)) {
                    return (A < B) ? -sortOrder : sortOrder;

                } else {
                    return (A < B) ? -sortOrder : sortOrder;
                }
            }
            if (o == 'desc') {
                if (isNaN(A) == false && isNaN(B) == true) {
                    return 1;
                }
                else if (isNaN(A) == true && isNaN(B) == false) {
                    return sortOrder;
                }
                else if (isNaN(A) && isNaN(B)) {
                    return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;

                } else {
                    return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;
                }

            }
        }
        else {
            //apart from firefox browser

            if (o == 'asc') {
                if (isNaN(A) == false && isNaN(B) == true) {
                    return -sortOrder;
                }
                else if (isNaN(A) == true && isNaN(B) == false) {
                    return 0;
                }
                else if (isNaN(A) && isNaN(B)) {
                    return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;

                } else {
                    return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;
                }
            }
            if (o == 'desc') {
                if (isNaN(A) == false && isNaN(B) == true) {
                    return sortOrder;
                }
                else if (isNaN(A) == true && isNaN(B) == false) {
                    return sortOrder;
                }
                else if (isNaN(A) && isNaN(B)) {
                    return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;

                } else {
                    return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;
                }


            }
        }

        //return o == 'asc' ? ret :ret;
    });

    // var iResult = CheckBrowser();

    //if (iResult > 1) {
    //    rows.sort(function (a, b) {
    //        debugger
    //        var A = $(a).find("td").eq(colIndex).text().toLowerCase();
    //        var B = $(b).find("td").eq(colIndex).text().toLowerCase();

    //        if (!isNaN(A)) A = Number(A);
    //        if (!isNaN(B)) B = Number(B);

    //        return o == 'asc' ? A > B : B > A;
    //    });
    //}
    //else if (iResult == 1) {
    //    //chrome
    //    rows.sort(function (a, b) {
    //        debugger
    //        var A = $(a).find("td").eq(colIndex).text().toLowerCase();
    //        var B = $(b).find("td").eq(colIndex).text().toLowerCase();

    //        if (!isNaN(A)) A = Number(A);
    //        if (!isNaN(B)) B = Number(B);
    //        return (A < B) ? -sortOrder : (A > B) ? sortOrder : 0;

    //        //return o == 'asc' ? ret :ret;
    //    });
    //}

    $.each(rows, function (index, ele) {
        tbod.append(ele);
    });
}

function CheckBrowser() {
    //debugger
    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {

        return 1;
    }
        //Check if browser is Firefox
    else if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
        // debugger;

        return 2;
    }


}
function sortTable(rows, colIndex) {
    //debugger
    var table, rows, switching, i, x, y, shouldSwitch;
    table = document.getElementById("focuus8LandingGrid");
    switching = true;
    // table = table;
    rows = rows;
    /*Make a loop that will continue until
    no switching has been done:*/
    while (switching) {
        //start by saying: no switching is done:
        switching = false;
        //rows = table.rows;
        /*Loop through all table rows (except the
        first, which contains table headers):*/
        for (i = 1; i < (rows.length - 1) ; i++) {
            //start by saying there should be no switching:
            shouldSwitch = false;
            /*Get the two elements you want to compare,
            one from current row and one from the next:*/
            x = rows[i].getElementsByTagName("TD")[colIndex];
            y = rows[i + 1].getElementsByTagName("TD")[colIndex];
            //check if the two rows should switch place:
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                //if so, mark as a switch and break the loop:
                shouldSwitch = true;
                break;
            }
        }
        if (shouldSwitch) {
            /*If a switch has been marked, make the switch
            and mark that a switch has been done:*/
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
        }
    }
}

function OpenPortalEmailTemplate(element) {
    debugger
    if (element.id == 'btnPortalEmailHeaderTemplate') {
        SMSTEMPLATE.CreateControl('id_SMSTemplate', 'divSMSCustomization', 7);
        return;
    }
    var masterTypeId = document.getElementById('id_hdnMasterTypeId').value;
    var id = document.getElementById('landgridData');
    var SelectedRowNo = (document.getElementById('hndSelectedRowNo').value == "" || document.getElementById('hndSelectedRowNo').value == undefined) ? $(".FRowColor").length == "0" ? "" : $(".FRowColor").attr("data-rowindex") : document.getElementById('hndSelectedRowNo').value;
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var iMasterId = (SelectedRowNo == '') ? "0" : getEnglishDigits($(Row).find('td')[8].innerHTML.trim());

    var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("PrintLabelInvoiceDesigner", "Landing", "Landing"), true,
                          {
                              MasterId: iMasterId, MasterTypeId: masterTypeId, LayoutId: 0
                          },
                      "JSON",
                      false,
                      "",
                      "GLOBAL.LoadingStart",
                      " GLOBAL.LoadingEnd"
              );


    if (result != null) {
        //debugger
        var HeaderGroup = result.data.Tag;
        var layoutid = parseInt(OPTIONCONTROL.getControlValue("optPrintLabel"));
        NETWORK.executeServerMethod(GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                             true,
                                              {
                                                  iVouchertype: 264,
                                                  HeaderGroup: HeaderGroup, bSaveHTMLSource: true,
                                                  ModuleType: 1,
                                              },
                                             "",
                                             true,
                                             "PrintLabelInvoiceDesigner_Success",
                                             "GLOBAL.LoadingStart",
                                             "GLOBAL.LoadingEnd"
                         );


    }

}
function PrintLabelInvoiceDesigner_Success() {
    debugger
    try {
        if (bSuccess == true) {
            $("#PortalTemplateContainer").html(html);
            $("#PortalMasterModal").modal({ backdrop: 'static' }, "show");
            //if (document.getElementById("id_InvoiceDesingCancel") != null) {
            //    document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "CloseInvoiceScreen('InvoicePopModal')");
            //}
        }
    } catch (e) {
        COMMON.prototype.showMessage(e.message);
        return;
    }

}
//PrintLabel starts
function PrintLabelInvoiceDesigner() {
    //debugger
    var masterTypeId = document.getElementById('id_hdnMasterTypeId').value;
    var id = document.getElementById('landgridData');
    var SelectedRowNo = (document.getElementById('hndSelectedRowNo').value == "" || document.getElementById('hndSelectedRowNo').value == undefined) ? $(".FRowColor").length == "0" ? "" : $(".FRowColor").attr("data-rowindex") : document.getElementById('hndSelectedRowNo').value;
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var iMasterId = (SelectedRowNo == '') ? "0" : getEnglishDigits($(Row).find('td')[8].innerHTML.trim());

    var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("PrintLabelInvoiceDesigner", "Landing", "Landing"), true,
                          {
                              MasterId: iMasterId, MasterTypeId: masterTypeId, LayoutId: 0
                          },
                      "JSON",
                      false,
                      "",
                      "GLOBAL.LoadingStart",
                      " GLOBAL.LoadingEnd"
              );

    if (result != null) {
        //debugger
        var HeaderGroup = result.data.Tag;
        var layoutid = parseInt(OPTIONCONTROL.getControlValue("optPrintLabel"));
        NETWORK.executeServerMethod(GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                             true,
                                              {
                                                  LayoutId: layoutid,
                                                  iVouchertype: 1,
                                                  HeaderGroup: HeaderGroup, bSaveHTMLSource: true,
                                                  ModuleType: 6,
                                              },
                                             "",
                                             true,
                                             "PrintLabelInvoiceDesigner_Success",
                                             "GLOBAL.LoadingStart",
                                             "GLOBAL.LoadingEnd"
                         );


    }



}
function PrintLabelInvoiceDesigner_Success(bSuccess, html) {
    //debugger
    try {
        if (bSuccess == true) {
            $("#InvoiceDesignerContainer").html(html);
            $("#InvoicePopModal").modal({ backdrop: 'static' }, "show");
            if (document.getElementById("id_InvoiceDesingCancel") != null) {
                document.getElementById("id_InvoiceDesingCancel").setAttribute("onclick", "CloseInvoiceScreen('InvoicePopModal')");
                //document.getElementById("li_InvoicePreview").setAttribute("onclick", "PRICEBOOK.PRHPreview(this);");
                //document.getElementById("id_InvoicePrint").nextElementSibling.children[0].children[1].setAttribute("onclick", "PRICEBOOK.PRHPreview(this);");
                //document.getElementById("id_InvoicePrint").nextElementSibling.children[0].children[0].setAttribute("onclick", "PRICEBOOK.PRHprint(this);");
            }
        }
    } catch (e) {
        COMMON.prototype.showMessage(e.message);
        return;
    }

}
function PrintLabelClose() {
    $("#FAPrintLabelModal").modal('hide');
}
function CloseInvoiceScreen(id) {
    $('#' + id).modal('hide');
}
function PrintLabelClear() {
    //debugger;
    OPTIONCONTROL.clear("optPrintLabel");
}
function PrintLabel() {
    try {
        return PrintMultipleLabel();
        var LayoutId = parseInt(OPTIONCONTROL.getControlValue("optPrintLabel"));
        var iMasterTypeId = document.getElementById('id_hdnMasterTypeId').value;
        var id = document.getElementById('landgridData');
        var SelectedRowNo = (document.getElementById('hndSelectedRowNo').value == "" || document.getElementById('hndSelectedRowNo').value == undefined) ? $(".FRowColor").length == "0" ? "" : $(".FRowColor").attr("data-rowindex") : document.getElementById('hndSelectedRowNo').value;
        var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
        var iMasterId = (SelectedRowNo == '') ? "0" : getEnglishDigits($(Row).find('td')[8].innerHTML.trim());
        if (iMasterId > 0 && LayoutId > 0) {
            var result = NETWORK.executeServerMethod(
                   GLOBAL.getContextPath("PrintLabel", "Landing", "Landing"),
                                       true,
                                       {
                                           LayoutId: LayoutId,
                                           LayoutText: OPTIONCONTROL.getControlText("optPrintLabel"), iMasterIds: GridrowidValues, iMasterTypeId: iMasterTypeId
                                       },
                                       "",
                                       true,
                                       "PrintLabel_Success",
                                       "GLOBAL.LoadingStart",
                                       "GLOBAL.LoadingEnd"
                                   );
        }


    } catch (ex) {
        COMMON.prototype.showMessage(ex.message);
        return;
    }

}
function PrintMultipleLabel() {
    var LayoutId = parseInt(OPTIONCONTROL.getControlValue("optPrintLabel"));
    var iMasterTypeId = document.getElementById('id_hdnMasterTypeId').value;
    var id = document.getElementById('landgridData');
    var SelectedRowNo = (document.getElementById('hndSelectedRowNo').value == "" || document.getElementById('hndSelectedRowNo').value == undefined) ? $(".FRowColor").length == "0" ? "" : $(".FRowColor").attr("data-rowindex") : document.getElementById('hndSelectedRowNo').value;
    var Row = $($(id).find('tbody')).find('tr')[SelectedRowNo];
    var iMasterId = (SelectedRowNo == '') ? "0" : getEnglishDigits($(Row).find('td')[8].innerHTML.trim());
    if (LayoutId > 0 && iMasterTypeId > 0 && GridrowidValues != null && GridrowidValues.length > 0) {
        NETWORK.executeServerMethod(
                                        GLOBAL.getContextPath("GetMasterLabelData", "VoucherPopup", "Transactions"),
                                       true,
                                        { iLayoutId: LayoutId, iMasterTypeId: iMasterTypeId, arrMasterId: GridrowidValues, isPrint: true },
                                       "",
                                       true,
                                       "PrintLabel_Success",
                                       "GLOBAL.LoadingStart",
                                       "GLOBAL.LoadingEnd"
               );
    }
    else {
        if (GridrowidValues == null || GridrowidValues.length == 0) {
            COMMON.prototype.showMessage("Can not find any record for printing");
        }
        else if (LayoutId <= 0) {
            COMMON.prototype.showMessage("Layout for printing is not selected ,please select a layout");
        }
        return;
    }

}



function PrintLabel_Success(flag, data) {
    try {
        if (flag && data != null && data.FileName.length > 0) {
            //debugger
            if (data != undefined) {
                var w = window.open(GLOBAL.getContextPath("GetPrintLabelFile", "Landing", "Landing") + '?sFilePath=' + data.FileName, "_blank");
                //window.location = GLOBAL.getContextPath("GetPrintLabelFile", "Landing", "Landing") + '?sFilePath=' + data;
                //if (FCommon.UI.isValidObject(w)) {
                //    w.location = GLOBAL.getContextPath("GetPrintLabelFile", "Landing", "Landing") + '?sFilePath=' + data;
                //}
                //else {
                //    var msg = "popup is blocked for this page";
                //    COMMON.prototype.showMessage(msg);
                //    return;
                //}
            }

        }
    } catch (ex) {
        COMMON.prototype.showMessage(ex.message);
    }

}
//PrintLabel eNDS

function DeleteMasterInternal(arrMasterId, iMasterTypeId) {
    debugger
    var result = { ID: 0, Msg: '' };
    var IsArray = Array.isArray(arrMasterId);
    try {
        var url = GLOBAL.getContextPath("deleteMaster", "Landing", "Landing");
        if (IsArray == true && arrMasterId.length > 0 && iMasterTypeId > 0) {
            $.ajax({
                url: url,
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                datatype: "JSON",
                data: JSON.stringify({ bDeleteAll: true, iMasterTypeId: iMasterTypeId, arrMasterId: arrMasterId, iTreeId: 0, iLocationId: 0 }),
                cache: false,
                success: function (data) {
                    if (data != null && data.ErrorNo == 5) {
                        result.ID = 1;
                        result.Msg = "Success";
                        return result;
                    }
                    else {
                        result.ID = 0;
                        result.Msg = data.ErrorMessege.length == 0 ? "Failed" : data.ErrorMessege;
                        return result;
                    }
                },
                error: function (data) {
                    result.ID = 0;
                    result.Msg = (data != null && data.length == 0) ? "Failed" : data;
                    return result;
                }
            })
        }
        else {
            result.ID = 0;
            result.Msg = "MasterId and MasterType Can not be Empty or zero";
            return result;
        }
    }
    catch (error) {
        result.ID = 0;
        result.Msg = error;
        return result;
    }
}

function getIconChange(element, bInside) {
    if (bInside)
        $($(element).find(".icon-search")).removeClass("theme_color-inverse").addClass("theme_background-color theme_color");
    else
        $($(element).find(".icon-search")).addClass("theme_color-inverse").removeClass("theme_background-color theme_color");
}
function MoveHereSuccess(bs, data, bLevelChange) {
    //debugger

    if (bs == true && data != null) {
        if (data.Error != "") {
            COMMON.prototype.showMessage(data.Error);
           // $('#ctxMoveHere').css('font-style', 'italic');
            $('#ctxMoveHere').addClass("GreyAndPointerEventNone");
            return false;
        }
        GridrowidValuesForMovingRecords = []; AccountProductTypeIdsForMovingRecords = [];
        GridrowidValues = []; retainEditedMasterIds = [];
        //$('#ctxMoveHere,#ctxMove').css('font-style', 'italic');
        $('#ctxMoveHere,#ctxMove').addClass("GreyAndPointerEventNone");
        var url = GLOBAL.getContextPath("GetMasterLAndingScreen", "Landing", "Landing");
        var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
        if (bLevelChange)
            MasterLandingScreenLoad(url);
        else
            divLandingGrid(MasterTypeId);
        COMMON.prototype.showMessage("Moved Successfully!");
    } else {
        COMMON.prototype.showMessage('Error.')
    }
    GLOBAL.LoadingEnd();
}
$(document).on("click", "#liSearchOn", function (e) {
    // var CurrentDashletId = '';
    // if(IsFromDashlet)
    // {
    //     CurrentDashletId=  GetActiveDashletId();
    // }
    // $('#custom-menu').toggle();
    // var p = $("#divsearchLanding");
    // var offset = p.offset();
    // $('#divSearchMenu').show(1000);
    // $("#divSearchMenu").offset({ left: offset.left, top: offset.top + 25 });
    //e.preventDefault();
    // return false;
});

 function GetSearchOn(element) {
     debugger
     $("#btnSearchAcc").toggle();
    var CurrentDashletId = '';
    if (IsFromDashlet) {
        CurrentDashletId = GetActiveDashletId();
    }
    $('#custom-menu').toggle();
    var p = $("#divsearchLanding" + CurrentDashletId);
    var offset = p.offset();
    $('#divSearchMenu' + CurrentDashletId).show(1000);
    $("#divSearchMenu" + CurrentDashletId).offset({ left: offset.left, top: offset.top + 25 });
    //e.preventDefault();
    return false;
}

$(document).on("click", function (e) {
    //debugger
    var CurrentDashletId = '';
    if (IsFromDashlet) {
        CurrentDashletId = GetActiveDashletId();
    }
    if ($(e.target).closest('#divSearchMenu' + CurrentDashletId).length == '0' && $(e.target)[0].text != "Search on") {
        $('#divSearchMenu' + CurrentDashletId).hide();
    }
    if ($(e.target).closest('ul').length == "0") {
        $(".ContextMenu").hide(500);
    }
    else {
        $(".ContextMenu").hide(500);
    }

});
//var FExternalModule = {
//    CallWrapperJsForExternalModule: function (url, fnCallBackAfterExternalModuleOperation, strParams) {
//        //debugger
//        var ifrm = document.createElement("iframe");
//        ifrm.setAttribute("id", "imyFrame");
//        ifrm.setAttribute("src", url);
//        ifrm.style.width = "100%";
//        ifrm.style.height = "500px";
//        $('#divForExternalModuleModalBody').html('').html(ifrm);
//        $("#btnExternalScreenFooter").attr({ "data-params": strParams, "data-callback": fnCallBackAfterExternalModuleOperation })
//        $('#div_ForExternalModule_Popup').removeClass('hidden');

//        $('#ForExternalModule_Modal').addClass("in").css({ "display": "block" });
//    },
//    CloseExternalScreen: function (element) {
//        //debugger
//        $('#divForExternalModuleModalBody').html('');
//        $('#ForExternalModule_Modal').modal('hide');
//        $('#div_ForExternalModule_Popup').addClass('hidden');
//        if ($('.modal-backdrop').length > 0) {
//            $('.modal-backdrop').removeClass('modal-backdrop');
//        }
//        var strParams = $(element).attr("data-params");
//        var fnCallbak = $(element).attr("data-callback");
//        if (fnCallbak != undefined && fnCallbak.toString() != "") {
//            eval(fnCallbak)(strParams);
//        }
//    }
//}
console.log('JsLanding script ends : ', new Date().toLocaleString());

function SearchAccountChange() {
    var x = document.getElementById("btnSearchAcc");
    if (x.style.display === "block") {
        x.style.display = "none";
    } else {
        x.style.display = "block";
    }
}

   ;
!function(e,i){"use strict";var t={item:3,autoWidth:!1,slideMove:1,slideMargin:10,addClass:"",mode:"slide",useCSS:!0,cssEasing:"ease",easing:"linear",speed:400,auto:!1,pauseOnHover:!1,loop:!1,slideEndAnimation:!0,pause:2e3,keyPress:!1,controls:!0,prevHtml:"",nextHtml:"",rtl:!1,adaptiveHeight:!1,vertical:!1,verticalHeight:500,vThumbWidth:100,thumbItem:10,pager:!0,gallery:!1,galleryMargin:5,thumbMargin:5,currentPagerPosition:"middle",enableTouch:!0,enableDrag:!0,freeMove:!0,swipeThreshold:40,responsive:[],onBeforeStart:function(e){},onSliderLoad:function(e){},onBeforeSlide:function(e,i){},onAfterSlide:function(e,i){},onBeforeNextSlide:function(e,i){},onBeforePrevSlide:function(e,i){}};e.fn.lightSlider=function(i){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).lightSlider(i)}),this;var n={},l=e.extend(!0,{},t,i),a={},s=this;n.$el=this,"fade"===l.mode&&(l.vertical=!1);var o=s.children(),r=e(window).width(),d=null,c=null,u=0,f=0,h=!1,g=0,v="",p=0,m=!0===l.vertical?"height":"width",S=!0===l.vertical?"margin-bottom":"margin-right",b=0,C=0,M=0,T=0,x=null,w="ontouchstart"in document.documentElement,P={};return P.chbreakpoint=function(){if(r=e(window).width(),l.responsive.length){var i;if(!1===l.autoWidth&&(i=l.item),r<l.responsive[0].breakpoint)for(var t=0;t<l.responsive.length;t++)r<l.responsive[t].breakpoint&&(d=l.responsive[t].breakpoint,c=l.responsive[t]);if(void 0!==c&&null!==c)for(var n in c.settings)c.settings.hasOwnProperty(n)&&(void 0!==a[n]&&null!==a[n]||(a[n]=l[n]),l[n]=c.settings[n]);if(!e.isEmptyObject(a)&&r>l.responsive[0].breakpoint)for(var s in a)a.hasOwnProperty(s)&&(l[s]=a[s]);!1===l.autoWidth&&b>0&&M>0&&i!==l.item&&(p=Math.round(b/((M+l.slideMargin)*l.slideMove)))}},P.calSW=function(){!1===l.autoWidth&&(M=(g-(l.item*l.slideMargin-l.slideMargin))/l.item)},P.calWidth=function(e){var i=!0===e?v.find(".lslide").length:o.length;if(!1===l.autoWidth)f=i*(M+l.slideMargin);else{f=0;for(var t=0;t<i;t++)f+=parseInt(o.eq(t).width())+l.slideMargin}return f},(n={doCss:function(){return!(!l.useCSS||!function(){for(var e=["transition","MozTransition","WebkitTransition","OTransition","msTransition","KhtmlTransition"],i=document.documentElement,t=0;t<e.length;t++)if(e[t]in i.style)return!0}())},keyPress:function(){l.keyPress&&e(document).on("keyup.lightslider",function(i){e(":focus").is("input, textarea")||(i.preventDefault?i.preventDefault():i.returnValue=!1,37===i.keyCode?s.goToPrevSlide():39===i.keyCode&&s.goToNextSlide())})},controls:function(){l.controls&&(s.after('<div class="lSAction"><a class="lSPrev">'+l.prevHtml+'</a><a class="lSNext">'+l.nextHtml+"</a></div>"),l.autoWidth?P.calWidth(!1):l.item,e(document).on("click",".lSAction a",function(i){return i.preventDefault?i.preventDefault():i.returnValue=!1,e(this).hasClass("lSPrev")?s.goToPrevSlide():s.goToNextSlide(),!1}))},initialStyle:function(){var e=this;"fade"===l.mode&&(l.autoWidth=!1,l.slideEndAnimation=!1),l.auto&&(l.slideEndAnimation=!1),l.autoWidth&&(l.slideMove=1,l.item=1),l.loop&&(l.slideMove=1,l.freeMove=!1),l.onBeforeStart.call(this,s),P.chbreakpoint(),s.addClass("lightSlider").wrap('<div class="lSSlideOuter '+l.addClass+'"><div class="lSSlideWrapper"></div></div>'),v=s.parent(".lSSlideWrapper"),!0===l.rtl&&v.parent().addClass("lSrtl"),l.vertical?(v.parent().addClass("vertical"),g=l.verticalHeight,v.css("height",g+"px")):g=s.outerWidth(),o.addClass("lslide"),!0===l.loop&&"slide"===l.mode&&(P.calSW(),P.clone=function(){if(P.calWidth(!0)>g){for(var i=0,t=0,n=0;n<o.length&&(i+=parseInt(s.find(".lslide").eq(n).width())+l.slideMargin,t++,!(i>=g+l.slideMargin));n++);var a=!0===l.autoWidth?t:l.item;if(a<s.find(".clone.left").length)for(var r=0;r<s.find(".clone.left").length-a;r++)o.eq(r).remove();if(a<s.find(".clone.right").length)for(var d=o.length-1;d>o.length-1-s.find(".clone.right").length;d--)p--,o.eq(d).remove();for(var c=s.find(".clone.right").length;c<a;c++)s.find(".lslide").eq(c).clone().removeClass("lslide").addClass("clone right").appendTo(s),p++;for(var u=s.find(".lslide").length-s.find(".clone.left").length;u>s.find(".lslide").length-a;u--)s.find(".lslide").eq(u-1).clone().removeClass("lslide").addClass("clone left").prependTo(s);o=s.children()}else o.hasClass("clone")&&(s.find(".clone").remove(),e.move(s,0))},P.clone()),P.sSW=function(){u=o.length,!0===l.rtl&&!1===l.vertical&&(S="margin-left"),!1===l.autoWidth&&o.css(m,M+"px"),o.css(S,l.slideMargin+"px"),f=P.calWidth(!1),s.css(m,f+"px"),!0===l.loop&&"slide"===l.mode&&!1===h&&(p=s.find(".clone.left").length)},P.calL=function(){o=s.children(),u=o.length},this.doCss()&&v.addClass("usingCss"),P.calL(),"slide"===l.mode?(P.calSW(),P.sSW(),!0===l.loop&&(b=e.slideValue(),this.move(s,b)),!1===l.vertical&&this.setHeight(s,!1)):(this.setHeight(s,!0),s.addClass("lSFade"),this.doCss()||(o.fadeOut(0),o.eq(p).fadeIn(0))),!0===l.loop&&"slide"===l.mode?o.eq(p).addClass("active"):o.first().addClass("active")},pager:function(){var e=this;if(P.createPager=function(){T=(g-(l.thumbItem*l.thumbMargin-l.thumbMargin))/l.thumbItem;var i=v.find(".lslide"),t=v.find(".lslide").length,n=0,a="",o=0;for(n=0;n<t;n++){"slide"===l.mode&&(l.autoWidth?o+=(parseInt(i.eq(n).width())+l.slideMargin)*l.slideMove:o=n*((M+l.slideMargin)*l.slideMove));var r=i.eq(n*l.slideMove).attr("data-thumb");if(!0===l.gallery?a+='<li style="width:100%;'+m+":"+T+"px;"+S+":"+l.thumbMargin+'px"><a href="#"><img src="'+r+'" /></a></li>':a+='<li><a href="#">'+(n+1)+"</a></li>","slide"===l.mode&&o>=f-g-l.slideMargin){n+=1;var d=2;l.autoWidth&&(a+='<li><a href="#">'+(n+1)+"</a></li>",d=1),n<d?(a=null,v.parent().addClass("noPager")):v.parent().removeClass("noPager");break}}var c=v.parent();c.find(".lSPager").html(a),!0===l.gallery&&(!0===l.vertical&&c.find(".lSPager").css("width",l.vThumbWidth+"px"),C=n*(l.thumbMargin+T)+.5,c.find(".lSPager").css({property:C+"px","transition-duration":l.speed+"ms"}),!0===l.vertical&&v.parent().css("padding-right",l.vThumbWidth+l.galleryMargin+"px"),c.find(".lSPager").css(m,C+"px"));var u=c.find(".lSPager").find("li");u.first().addClass("active"),u.on("click",function(){return!0===l.loop&&"slide"===l.mode?p+=u.index(this)-c.find(".lSPager").find("li.active").index():p=u.index(this),s.mode(!1),!0===l.gallery&&e.slideThumb(),!1})},l.pager){var i="lSpg";l.gallery&&(i="lSGallery"),v.after('<ul class="lSPager '+i+'"></ul>');var t=l.vertical?"margin-left":"margin-top";v.parent().find(".lSPager").css(t,l.galleryMargin+"px"),P.createPager()}setTimeout(function(){P.init()},0)},setHeight:function(e,i){var t=null,n=this;t=l.loop?e.children(".lslide ").first():e.children().first();var a=function(){var n=t.outerHeight(),l=0,a=n;i&&(n=0,l=100*a/g),e.css({height:n+"px","padding-bottom":l+"%"})};a(),t.find("img").length?t.find("img")[0].complete?(a(),x||n.auto()):t.find("img").load(function(){setTimeout(function(){a(),x||n.auto()},100)}):x||n.auto()},active:function(e,i){this.doCss()&&"fade"===l.mode&&v.addClass("on");var t=0;if(p*l.slideMove<u){e.removeClass("active"),this.doCss()||"fade"!==l.mode||!1!==i||e.fadeOut(l.speed),t=!0===i?p:p*l.slideMove;var n,a;!0===i&&(a=(n=e.length)-1,t+1>=n&&(t=a)),!0===l.loop&&"slide"===l.mode&&(t=!0===i?p-s.find(".clone.left").length:p*l.slideMove,!0===i&&(a=(n=e.length)-1,t+1===n?t=a:t+1>n&&(t=0))),this.doCss()||"fade"!==l.mode||!1!==i||e.eq(t).fadeIn(l.speed),e.eq(t).addClass("active")}else e.removeClass("active"),e.eq(e.length-1).addClass("active"),this.doCss()||"fade"!==l.mode||!1!==i||(e.fadeOut(l.speed),e.eq(t).fadeIn(l.speed))},move:function(e,i){!0===l.rtl&&(i=-i),this.doCss()?!0===l.vertical?e.css({transform:"translate3d(0px, "+-i+"px, 0px)","-webkit-transform":"translate3d(0px, "+-i+"px, 0px)"}):e.css({transform:"translate3d("+-i+"px, 0px, 0px)","-webkit-transform":"translate3d("+-i+"px, 0px, 0px)"}):!0===l.vertical?e.css("position","relative").animate({top:-i+"px"},l.speed,l.easing):e.css("position","relative").animate({left:-i+"px"},l.speed,l.easing);var t=v.parent().find(".lSPager").find("li");this.active(t,!0)},fade:function(){this.active(o,!1);var e=v.parent().find(".lSPager").find("li");this.active(e,!0)},slide:function(){var e=this;P.calSlide=function(){f>g&&(b=e.slideValue(),e.active(o,!1),b>f-g-l.slideMargin?b=f-g-l.slideMargin:b<0&&(b=0),e.move(s,b),!0===l.loop&&"slide"===l.mode&&(p>=u-s.find(".clone.left").length/l.slideMove&&e.resetSlide(s.find(".clone.left").length),0===p&&e.resetSlide(v.find(".lslide").length)))},P.calSlide()},resetSlide:function(e){var i=this;v.find(".lSAction a").addClass("disabled"),setTimeout(function(){p=e,v.css("transition-duration","0ms"),b=i.slideValue(),i.active(o,!1),n.move(s,b),setTimeout(function(){v.css("transition-duration",l.speed+"ms"),v.find(".lSAction a").removeClass("disabled")},50)},l.speed+100)},slideValue:function(){var e=0;if(!1===l.autoWidth)e=p*((M+l.slideMargin)*l.slideMove);else{e=0;for(var i=0;i<p;i++)e+=parseInt(o.eq(i).width())+l.slideMargin}return e},slideThumb:function(){var e;switch(l.currentPagerPosition){case"left":e=0;break;case"middle":e=g/2-T/2;break;case"right":e=g-T}var i=p-s.find(".clone.left").length,t=v.parent().find(".lSPager");"slide"===l.mode&&!0===l.loop&&(i>=t.children().length?i=0:i<0&&(i=t.children().length));var n=i*(T+l.thumbMargin)-e;n+g>C&&(n=C-g-l.thumbMargin),n<0&&(n=0),this.move(t,n)},auto:function(){l.auto&&(clearInterval(x),x=setInterval(function(){s.goToNextSlide()},l.pause))},pauseOnHover:function(){var i=this;l.auto&&l.pauseOnHover&&(v.on("mouseenter",function(){e(this).addClass("ls-hover"),s.pause(),l.auto=!0}),v.on("mouseleave",function(){e(this).removeClass("ls-hover"),v.find(".lightSlider").hasClass("lsGrabbing")||i.auto()}))},touchMove:function(e,i){if(v.css("transition-duration","0ms"),"slide"===l.mode){var t=b-(e-i);if(t>=f-g-l.slideMargin)if(!1===l.freeMove)t=f-g-l.slideMargin;else{var n=f-g-l.slideMargin;t=n+(t-n)/5}else t<0&&(!1===l.freeMove?t=0:t/=5);this.move(s,t)}},touchEnd:function(e){if(v.css("transition-duration",l.speed+"ms"),"slide"===l.mode){var i=!1,t=!0;(b-=e)>f-g-l.slideMargin?(b=f-g-l.slideMargin,!1===l.autoWidth&&(i=!0)):b<0&&(b=0);var n=function(e){var t=0;if(i||e&&(t=1),l.autoWidth)for(var n=0,a=0;a<o.length&&(n+=parseInt(o.eq(a).width())+l.slideMargin,p=a+t,!(n>=b));a++);else{var s=b/((M+l.slideMargin)*l.slideMove);p=parseInt(s)+t,b>=f-g-l.slideMargin&&s%1!=0&&p++}};e>=l.swipeThreshold?(n(!1),t=!1):e<=-l.swipeThreshold&&(n(!0),t=!1),s.mode(t),this.slideThumb()}else e>=l.swipeThreshold?s.goToPrevSlide():e<=-l.swipeThreshold&&s.goToNextSlide()},enableDrag:function(){var i=this;if(!w){var t=0,n=0,a=!1;v.find(".lightSlider").addClass("lsGrab"),v.on("mousedown",function(i){if(f<g&&0!==f)return!1;e(i.target).hasClass("lSPrev")||e(i.target).hasClass("lSNext")||(t=!0===l.vertical?i.pageY:i.pageX,a=!0,i.preventDefault?i.preventDefault():i.returnValue=!1,v.scrollLeft+=1,v.scrollLeft-=1,v.find(".lightSlider").removeClass("lsGrab").addClass("lsGrabbing"),clearInterval(x))}),e(window).on("mousemove",function(e){a&&(n=!0===l.vertical?e.pageY:e.pageX,i.touchMove(n,t))}),e(window).on("mouseup",function(s){if(a){v.find(".lightSlider").removeClass("lsGrabbing").addClass("lsGrab"),a=!1;var o=(n=!0===l.vertical?s.pageY:s.pageX)-t;Math.abs(o)>=l.swipeThreshold&&e(window).on("click.ls",function(i){i.preventDefault?i.preventDefault():i.returnValue=!1,i.stopImmediatePropagation(),i.stopPropagation(),e(window).off("click.ls")}),i.touchEnd(o)}})}},enableTouch:function(){var e=this;if(w){var i={},t={};v.on("touchstart",function(e){t=e.originalEvent.targetTouches[0],i.pageX=e.originalEvent.targetTouches[0].pageX,i.pageY=e.originalEvent.targetTouches[0].pageY,clearInterval(x)}),v.on("touchmove",function(n){if(f<g&&0!==f)return!1;var a=n.originalEvent;t=a.targetTouches[0];var s=Math.abs(t.pageX-i.pageX),o=Math.abs(t.pageY-i.pageY);!0===l.vertical?(3*o>s&&n.preventDefault(),e.touchMove(t.pageY,i.pageY)):(3*s>o&&n.preventDefault(),e.touchMove(t.pageX,i.pageX))}),v.on("touchend",function(){if(f<g&&0!==f)return!1;var n;n=!0===l.vertical?t.pageY-i.pageY:t.pageX-i.pageX,e.touchEnd(n)})}},build:function(){var i=this;i.initialStyle(),this.doCss()&&(!0===l.enableTouch&&i.enableTouch(),!0===l.enableDrag&&i.enableDrag()),e(window).on("focus",function(){i.auto()}),e(window).on("blur",function(){clearInterval(x)}),i.pager(),i.pauseOnHover(),i.controls(),i.keyPress()}}).build(),P.init=function(){P.chbreakpoint(),!0===l.vertical?(g=l.item>1?l.verticalHeight:o.outerHeight(),v.css("height",g+"px")):g=v.outerWidth(),!0===l.loop&&"slide"===l.mode&&P.clone(),P.calL(),"slide"===l.mode&&s.removeClass("lSSlide"),"slide"===l.mode&&(P.calSW(),P.sSW()),setTimeout(function(){"slide"===l.mode&&s.addClass("lSSlide")},1e3),l.pager&&P.createPager(),!0===l.adaptiveHeight&&!1===l.vertical&&s.css("height",o.eq(p).outerHeight(!0)),!1===l.adaptiveHeight&&("slide"===l.mode?!1===l.vertical?n.setHeight(s,!1):n.auto():n.setHeight(s,!0)),!0===l.gallery&&n.slideThumb(),"slide"===l.mode&&n.slide(),!1===l.autoWidth?o.length<=l.item||v.find(".lSAction").show():P.calWidth(!1)<g&&0!==f||v.find(".lSAction").show()},s.goToPrevSlide=function(){if(p>0)l.onBeforePrevSlide.call(this,s,p),p--,s.mode(!1),!0===l.gallery&&n.slideThumb();else if(!0===l.loop){if(l.onBeforePrevSlide.call(this,s,p),"fade"===l.mode){var e=u-1;p=parseInt(e/l.slideMove)}s.mode(!1),!0===l.gallery&&n.slideThumb()}else if(!0===l.slideEndAnimation)return s.addClass("leftEnd"),!1},s.goToNextSlide=function(){var e=!0;if("slide"===l.mode&&(e=n.slideValue()<f-g-l.slideMargin),p*l.slideMove<u-l.slideMove&&e)l.onBeforeNextSlide.call(this,s,p),p++,s.mode(!1),!0===l.gallery&&n.slideThumb();else if(!0===l.loop)l.onBeforeNextSlide.call(this,s,p),p=0,s.mode(!1),!0===l.gallery&&n.slideThumb();else if(!0===l.slideEndAnimation)return s.addClass("rightEnd"),!1},s.mode=function(e){!0===l.adaptiveHeight&&!1===l.vertical&&s.css("height",o.eq(p).outerHeight(!0)),!1===h&&("slide"===l.mode?n.doCss()&&(s.addClass("lSSlide"),""!==l.speed&&v.css("transition-duration",l.speed+"ms"),""!==l.cssEasing&&v.css("transition-timing-function",l.cssEasing)):n.doCss()&&(""!==l.speed&&s.css("transition-duration",l.speed+"ms"),""!==l.cssEasing&&s.css("transition-timing-function",l.cssEasing))),e||l.onBeforeSlide.call(this,s,p),"slide"===l.mode?n.slide():n.fade(),v.hasClass("ls-hover")||n.auto(),setTimeout(function(){e||l.onAfterSlide.call(this,s,p)},l.speed),h=!0},s.play=function(){s.goToNextSlide(),l.auto=!0,n.auto()},s.pause=function(){l.auto=!1,clearInterval(x)},s.refresh=function(){P.init()},s.getCurrentSlideCount=function(){var e=p;if(l.loop){var i=v.find(".lslide").length,t=s.find(".clone.left").length;e=p<=t-1?i+(p-t):p>=i+t?p-i-t:p-t}return e+1},s.getTotalSlideCount=function(){return v.find(".lslide").length},s.goToSlide=function(e){p=l.loop?e+s.find(".clone.left").length-1:e,s.mode(!1),!0===l.gallery&&n.slideThumb()},s.destroy=function(){s.lightSlider&&(s.goToPrevSlide=function(){},s.goToNextSlide=function(){},s.mode=function(){},s.play=function(){},s.pause=function(){},s.refresh=function(){},s.getCurrentSlideCount=function(){},s.getTotalSlideCount=function(){},s.goToSlide=function(){},s.lightSlider=null,P={init:function(){}},s.parent().parent().find(".lSAction, .lSPager").remove(),s.removeClass("lightSlider lSFade lSSlide lsGrab lsGrabbing leftEnd right").removeAttr("style").unwrap().unwrap(),s.children().removeAttr("style"),o.removeClass("lslide active"),s.find(".clone").remove(),o=null,x=null,h=!1,p=0)},setTimeout(function(){l.onSliderLoad.call(this,s)},10),e(window).on("resize orientationchange",function(e){setTimeout(function(){e.preventDefault?e.preventDefault():e.returnValue=!1,P.init()},200)}),this}}(jQuery);;
var Focus8WAPI = {
    ENUMS: {
        MODULE_TYPE: {
            MASTER: 1,
            TRANSACTION: 2,
            UI: 3,
            GLOBAL: 4,
            MRP: 5,
            FixedAsset: 6,
            TransHome: 7,
            FORM: 8
        },

        REQUEST_TYPE: {
            GET: 1,
            SET: 2,
            CONTINUE: 3,
            RESET_CACHE: 4
        },

        REQUEST_TYPE_UI: {
            SET_POPUP_COORDINATE: 1,
            OPEN_POPUP: 2,
            CLOSE_POPUP: 3,
            GOTOHOMEPAGE: 4,
            OPEN_INVOICE_DESIGNER: 5,
            AWAKE_SESSION: 6,
            LOGOUT: 7,
            MANDATORY_FIELDS_ENTRYSCREEN: 8
        }
    },

    getFieldValue: function (sCallbackFn, Field, iModuleType, isFieldId, iRequestId, bStruct) {
        var obj = null;

        try {
            obj = {
                moduleType: iModuleType,
                rowIndex: 0,
                isFieldId: isFieldId,
                requestType: Focus8WAPI.ENUMS.REQUEST_TYPE.GET,
                objData: { fieldid: Field },
                iRequestId: iRequestId,
                sCallbackFn: sCallbackFn,
                bStruct: bStruct
            };

            if (Focus8WAPI.PRIVATE.isValidInput(obj, false) == true) {
                Focus8WAPI.PRIVATE.postMessage(obj);
            }
        }
        catch (err) {
            alert("Exception: Focus8WAPI.getFieldValue " + err.message);
        }
    },

    setFieldValue: function (sCallbackFn, Field, Value, iModuleType, isFieldId, iRequestId, bStruct) {
        var obj = null;

        try {
            obj = {
                moduleType: iModuleType,
                rowIndex: 0,
                isFieldId: isFieldId,
                requestType: Focus8WAPI.ENUMS.REQUEST_TYPE.SET,
                objData: { fieldid: Field, value: Value },
                iRequestId: iRequestId,
                sCallbackFn: sCallbackFn,
                bStruct: bStruct
            };

            if (Focus8WAPI.PRIVATE.isValidInput(obj, false) == true) {
                Focus8WAPI.PRIVATE.postMessage(obj);
            }
        }
        catch (err) {
            alert("Exception: Focus8WAPI.setFieldValue " + err.message);
        }
    },

    getBodyFieldValue: function (sCallbackFn, Field, iModuleType, isFieldId, iRowIndex, iRequestId, bStruct) {
        var obj = null;

        try {
            obj = {
                moduleType: iModuleType,
                rowIndex: iRowIndex,
                isFieldId: isFieldId,
                requestType: Focus8WAPI.ENUMS.REQUEST_TYPE.GET,
                objData: { fieldid: Field },
                iRequestId: iRequestId,
                sCallbackFn: sCallbackFn,
                bStruct: bStruct
            };

            if (Focus8WAPI.PRIVATE.isValidInput(obj, true) == true) {
                Focus8WAPI.PRIVATE.postMessage(obj);
            }
        }
        catch (err) {
            alert("Exception: Focus8WAPI.getBodyFieldValue " + err.message);
        }
    },

    setBodyFieldValue: function (sCallbackFn, Field, Value, iModuleType, isFieldId, iRowIndex, iRequestId, bStruct) {
        var obj = null;

        try {
            obj = {
                moduleType: iModuleType,
                rowIndex: iRowIndex,
                isFieldId: isFieldId,
                requestType: Focus8WAPI.ENUMS.REQUEST_TYPE.SET,
                objData: { fieldid: Field, value: Value },
                iRequestId: iRequestId,
                sCallbackFn: sCallbackFn,
                bStruct: bStruct
            };

            if (Focus8WAPI.PRIVATE.isValidInput(obj, true) == true) {
                Focus8WAPI.PRIVATE.postMessage(obj);
            }
        }
        catch (err) {
            alert("Exception: Focus8WAPI.setBodyFieldValue " + err.message);
        }
    },

    continueModule: function(iModuleType, result) {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = iModuleType;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE.CONTINUE;
            obj.result = result;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.continueModule " + err.message);
        }
    },

    openPopup: function (url, sCallback) {
        var obj = null;

        try {
            if (Focus8WAPI.PRIVATE.isNullOrEmpty(url, true) == true) {
                return(false);
            }

            obj = {};
            obj.URL = url;
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.OPEN_POPUP;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.openPopup " + err.message);
        }

        return (true);
    },

    closePopup: function () {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.CLOSE_POPUP;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.closePopup " + err.message);
        }
    },

    gotoHomePage: function() {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.GOTOHOMEPAGE;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.gotoHomePage " + err.message);
        }
    },

    logout: function() {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.LOGOUT;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.logout " + err.message);
        }
    },

    awakeSession: function() {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.AWAKE_SESSION;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.awakeSession " + err.message);
        }
    },
    getMandatoryFields: function (sCallback,iMasterTypeId) {
        var obj = null;
        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.MASTER;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.MANDATORY_FIELDS_ENTRYSCREEN;
            obj.sCallbackFn = sCallback;
            obj.objData = iMasterTypeId;
            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.getMandatoryFields " + err.message);
        }
    },

    resetTransactionCache: function(iVoucherType) {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.TRANSACTION;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE.RESET_CACHE;
            obj.iVoucherType = iVoucherType;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.awakeSession " + err.message);
        }
    },

    setPopupCoordinates: function(sLeft, sTop, sWidth, sHeight) {
        var obj = null;
        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.SET_POPUP_COORDINATE;
            obj.Left = sLeft;
            obj.Top = sTop;
            obj.Width = sWidth;
            obj.Height = sHeight;
            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.openPopup " + err.message);
        }

        return (true);
    },

    getGlobalValue: function (sCallbackFn, sVariable, iRequestId) {
        var obj = null;

        try {
            obj = {};
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.GLOBAL;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE.GET;
            obj.Variable = sVariable;
            obj.iRequestId = iRequestId;
            obj.sCallbackFn = sCallbackFn;

            Focus8WAPI.PRIVATE.postMessage(obj);
        }
        catch (err) {
            alert("Exception: Focus8WAPI.getGlobalValue " + err.message);
        }
    },

    openInvoiceDesigner: function (sCallbackFn, LayoutId, iVouchertype, iHeaderId, eModuleType, HeaderGroup, iSubReportId, bSaveHTMLSource, iRequestId) {
        var obj = null;
        try {            
            obj = {}; 
            obj.moduleType = Focus8WAPI.ENUMS.MODULE_TYPE.UI;
            obj.requestType = Focus8WAPI.ENUMS.REQUEST_TYPE_UI.OPEN_INVOICE_DESIGNER;
            obj.LayoutId = LayoutId;
            obj.iVouchertype = iVouchertype;
            obj.iHeaderId = iHeaderId;
            obj.ModuleType = eModuleType;
            obj.HeaderGroup = HeaderGroup;
            obj.iSubReportId = iSubReportId;
            obj.bSaveHTMLSource = bSaveHTMLSource; 
            obj.sCallbackFn = sCallbackFn;
            obj.iRequestId= iRequestId;           
            Focus8WAPI.PRIVATE.postMessage(obj);
            return obj;
        }
        catch (err) {
            alert("Exception: Focus8WAPI.openPopup " + err.message);
        }
    },

    PRIVATE: {
        isValidInput: function (obj, bBodyField) {
            try {
                if (Focus8WAPI.PRIVATE.isValidObject(obj.moduleType) == false || obj.moduleType.toString() == "") {
                    alert("Validation Exception: Please pass Module Type parameter");

                    return (false);
                }

                if (Focus8WAPI.PRIVATE.isValidObject(obj.isFieldId) == false || obj.isFieldId.toString() == "") {
                    alert("Validation Exception: Please pass isFieldId parameter");

                    return (false);
                }

                if (Focus8WAPI.PRIVATE.isValidObject(obj.objData.fieldid) == false) {
                    alert("Validation Exception: Please pass Field parameter");

                    return (false);
                }
                else {
                    if (Array.isArray(obj.objData.fieldid) == true) {
                        if (obj.objData.fieldid.length == 0) {
                            alert("Validation Exception: Please pass Field parameter");

                            return (false);
                        }
                    }
                }


                if (bBodyField == true) {
                    if (Focus8WAPI.PRIVATE.isValidObject(obj.rowIndex) == false) {
                        alert("Validation Exception: Row Index should be number type");

                        return (false);
                    }

                    if (Array.isArray(obj.rowIndex) == false) {
                        if (isNaN(obj.rowIndex)) {
                            alert("Validation Exception: Row Index should be number type");

                            return (false);
                        }

                        if (obj.rowIndex == 0) {
                            alert("Validation Exception: Row Index should be greater than 0 for Body Fields");

                            return (false);
                        }
                    }
                }
            }
            catch (err) {
                alert("Exception: {Focus8WAPI.PRIVATE.isValidInput} " + err.message);
            }

            return (true);
        },

        postMessage: function (obj) {
            try {
                obj.FromClient = true;
                window.parent.postMessage(obj, "*");
            }
            catch (err) {
                alert("Exception: Focus8WAPI.PRIVATE.postMessage " + err.message);
            }
        },

        onReceiveMessage: function (evt) {
            var objReturnData = null;
            var obj = null;

            try {
                Focus8WAPI.PRIVATE.stopKeyProcess(evt);
                objReturnData = evt.data;

                // Client                
                if (Focus8WAPI.PRIVATE.isValidObject(objReturnData.FromClient) == true) {
                    return;
                }

                console.log('Focus8WAPI::Received Response: ', JSON.stringify(objReturnData));

                if (Focus8WAPI.PRIVATE.isNullOrEmpty(objReturnData.sCallbackFn, true) == false) {
                    obj = {};
                    obj.returnCode = objReturnData.response.lValue;
                    obj.message = objReturnData.response.sValue;
                    obj.data = objReturnData.response.data;
                    obj.fieldId = objReturnData.fieldId;
                    obj.requestType = objReturnData.requestType;
                    obj.moduleType = objReturnData.moduleType;
                    obj.iRequestId = objReturnData.iRequestId;

                    if (Focus8WAPI.PRIVATE.isValidObject(objReturnData.RowsInfo) == true) {
                        obj.RowsInfo = objReturnData.RowsInfo;
                    }

                    eval(objReturnData.sCallbackFn)(obj);
                }
            }
            catch (err) {
                alert("Exception: Focus8WAPI.PRIVATE.onReceiveMessage " + err.message);
            }
        },

        isValidObject: function (obj) {
            try {
                if (typeof obj == "undefined" || obj == null) {
                    return (false);
                }

                return (true);
            }
            catch (err) {
                alert("Exception: {Focus8WAPI.PRIVATE.isValidObject} " + err.message);
            }

            return (false);
        },

        isNullOrEmpty: function (sValue, bTrim) {
            var bResult = false;

            try {
                if (Focus8WAPI.PRIVATE.isValidObject(sValue) == false || (typeof sValue).toLowerCase() != "string" || sValue.length <= 0) {
                    return (true);
                }

                if (Focus8WAPI.PRIVATE.isValidObject(bTrim) == true && bTrim == true) {
                    if (sValue.trim().length == 0) {
                        return (true);
                    }
                }
            }
            catch (err) {
                alert("Exception: {Focus8WAPI.PRIVATE.isNullOrEmpty} " + err.message);
                bResult = true;
            }

            return (bResult);
        },

        stopKeyProcess: function (evt) {
            try {
                if (Focus8WAPI.PRIVATE.isValidObject(evt) == false) {
                    return;
                }

                if (evt.preventDefault) {
                    evt.preventDefault();
                }
                else {
                    evt.returnValue = false;
                }

                if (evt.bubbles == true) {
                    evt.stopPropagation();
                }
            }
            catch (err) {
                alert("Exception: {Focus8WAPI.PRIVATE.stopKeyProcess} " + err.message);
            }
        }
    }

}
window.addEventListener('message', Focus8WAPI.PRIVATE.onReceiveMessage);
;
if (FWrapper == undefined || FWrapper == null) {
    var FWrapper = {
        ENUMS: {
            MODULE_TYPE: {
                MASTER: 1,
                TRANSACTION: 2,
                UI: 3,
                GLOBAL: 4,
                MRP: 5,
                FixedAsset: 6,
                TransHome: 7
            },

            REQUEST_TYPE: {
                GET: 1,
                SET: 2,
                CONTINUE: 3,
                RESET_CACHE: 4,
                DELETE_ROW: 5
            },

            REQUEST_TYPE_UI: {
                SET_POPUP_COORDINATE: 1,
                OPEN_POPUP: 2,
                CLOSE_POPUP: 3,
                GOTOHOMEPAGE: 4,
                OPEN_INVOICE_DESIGNER: 5,
                AWAKE_SESSION: 6,
                LOGOUT: 7,
                MANDATORY_FIELDS_ENTRYSCREEN: 8
            }
        },
        OpenInvoiceDesigner: function (arrData, evt) {
            try {
                result = NETWORK.executeServerMethod(GLOBAL.getContextPath("InvoiceDesign", "InvoiceDesign", "Transactions"),
                                                           true,
                                                            {
                                                                LayoutId: arrData.LayoutId,
                                                                iVouchertype: arrData.iVouchertype,
                                                                iHeaderId: arrData.iHeaderId,
                                                                ModuleType: arrData.ModuleType,
                                                                HeaderGroup: arrData.HeaderGroup,
                                                                iSubReportId: arrData.iSubReportId,
                                                                bSaveHTMLSource: arrData.bSaveHTMLSource,
                                                            },
                                                           "html",
                                                           false);

                //return result;
                var objResponse = COMMON.prototype.getEmptyResultObject();
                objResponse.lValue = 1;
                objResponse.sValue = "";
                objResponse.data = result.data;
                var objReturn = {};
                objReturn.moduleType = FWrapper.PRIVATE.getModuleType(arrData);
                objReturn.requestType = FWrapper.ENUMS.REQUEST_TYPE_UI.OPEN_INVOICE_DESIGNER;
                objReturn.response = objResponse;
                objReturn.sCallbackFn = FWrapper.PRIVATE.getCallback(arrData);
                objReturn.iRequestId = FWrapper.PRIVATE.getRequestId(arrData);

                evt.source.postMessage(objReturn, evt.origin);

            } catch (Ex) {
                alert("Exception: Fwrapper: OpenInvoiceDesigner " + Ex.message);
                return false;
            }
        },

        receiveMessage: function (evt) {
            let iModuleType = 0;
            let arrData = null;

            try {
                arrData = evt.data;

                // Server
                if (FConvert.toBoolean(arrData.FromClient) == false) {
                    return;
                }

                console.log('Received request:  ', FConvert.toString(arrData));

                iModuleType = FWrapper.PRIVATE.getModuleType(arrData);

                switch (iModuleType) {
                    case FWrapper.ENUMS.MODULE_TYPE.MASTER:
                        FWrapper.processMasterRequest(arrData, iModuleType, evt);
                        break;
                    case FWrapper.ENUMS.MODULE_TYPE.TRANSACTION:
                        FWrapper.processTransactionRequest(arrData, iModuleType, evt);
                        break;
                    case FWrapper.ENUMS.MODULE_TYPE.TransHome:
                        FWrapper.processTransactionHomeRequest(arrData, iModuleType, evt);
                        break;
                    case FWrapper.ENUMS.MODULE_TYPE.UI:
                        FWrapper.processUIRequest(arrData, evt);
                        break;
                    case FWrapper.ENUMS.MODULE_TYPE.GLOBAL:
                        FWrapper.processGlobalRequest(arrData, iModuleType, evt);
                        break;
                    case FWrapper.ENUMS.MODULE_TYPE.MRP:
                        FWrapper.processMRPRequest(arrData, iModuleType, evt);
                        break;
                    case FWrapper.ENUMS.MODULE_TYPE.FixedAsset:
                        FWrapper.processFixedAssetRequest(arrData, iModuleType, evt);
                        break;
                }
            }
            catch (Ex) {
                alert("Exception: Fwrapper: receiveMessage " + Ex.message);
                return false;
            }

            return (true);
        },

        openPopup: function (sURL, sCloseCallback, sLoadCallback, sErrorCallback) {
            let eleContainer = null;

            try {
                sURL = FWrapper.prepareURL(sURL);
                if (FCommon.String.isNullOrEmpty(sURL, true) == true) {
                    return;
                }

                eleContainer = GLOBAL.getExternalModuleContainer();
                FCommon.UI.removeChildren(eleContainer);

                if (FCommon.String.isNullOrEmpty(sLoadCallback, true) == false) {
                    eleContainer.onload = function (event) {
                        if (FCommon.String.includes(sLoadCallback, "(") == true) {
                            eval(sLoadCallback);
                        }
                        else {
                            eval(sLoadCallback)(true, event);
                        }
                    };
                }

                if (FCommon.String.isNullOrEmpty(sErrorCallback, true) == false) {
                    eleContainer.onerror = function (event) {
                        if (FCommon.String.includes(sErrorCallback, "(") == true) {
                            eval(sErrorCallback);
                        }
                        else {
                            eval(sErrorCallback)(true, event);
                        }
                    };
                }

                eleContainer.src = sURL;
                eleContainer.style.display = "block";

                if (FCommon.String.isNullOrEmpty(sCloseCallback, true) == false) {
                    eleContainer.setAttribute("data-closecallback", sCloseCallback);
                }
                else {
                    eleContainer.setAttribute("data-closecallback", "");
                }
            }
            catch (err) {
                alert("Exception: Fwrapper: openPopup " + err.message);
            }
        },

        closePopup: function () {
            let eleContainer = null;
            let sCallback = "";

            try {
                eleContainer = GLOBAL.getExternalModuleContainer();
                FCommon.UI.removeChildren(eleContainer);

                eleContainer.src = "";
                eleContainer.style.display = "none";

                sCallback = eleContainer.getAttribute("data-closecallback");
                eleContainer.setAttribute("data-closecallback", "");

                if (FCommon.String.isNullOrEmpty(sCallback, true) == false) {
                    if (FCommon.String.includes(sCallback, "(") == true) {
                        eval(sCallback);
                    }
                    else {
                        eval(sCallback)();
                    }
                }
            }
            catch (err) {
                alert("Exception: Fwrapper: closePopup " + err.message);
            }
        },

        processMasterRequest: function (arrData, iModuleType, evt) {
            var fnCallback = "";
            var iRequestType = 0;
            var iRowIndex = 0;
            var sCallbackFn = "";
            var iRequestId = null;
            var isFieldId = false;
            var objData = null;
            var objResponse = null;
            var objReturn = null;

            try {
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);
                isFieldId = FWrapper.PRIVATE.isFieldId(arrData);
                iRowIndex = FWrapper.PRIVATE.getRowIndex(arrData);
                objData = FWrapper.PRIVATE.getData(arrData);
                sCallbackFn = FWrapper.PRIVATE.getCallback(arrData);
                iRequestId = FWrapper.PRIVATE.getRequestId(arrData);

                if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.CONTINUE) {
                    debugger
                    //MASTERENTRYSCREEN.continueEMProcess(arrData, evt);
                    MasterEntryExternalModule.continueProcess(arrData, evt);
                    //continueProcess(arrData.result, evt)
                    return ;
                }

                if (FCommon.UI.isValidObject(objData) == true) {

                    if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.GET) {
                        fnCallback = "FOCUS.MASTER.UI.getValue";
                    }
                    else if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE_UI.MANDATORY_FIELDS_ENTRYSCREEN)
                    {
                        fnCallback = "FOCUS.MASTER.UI.getMandatoryFields";
                    }
                    else
                    {
                        fnCallback = "FOCUS.MASTER.UI.setValue";
                    }

                    if (fnCallback != null) {
                        objResponse = eval(fnCallback)(objData, isFieldId, iRowIndex);
                    }

                    objReturn = {};
                    objReturn.response = objResponse;
                    objReturn.moduleType = iModuleType;
                    objReturn.fieldId = objData.fieldid;
                    objReturn.requestType = iRequestType;
                    objReturn.sCallbackFn = sCallbackFn;
                    objReturn.iRequestId = iRequestId;

                    evt.source.postMessage(objReturn, evt.origin);
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.processMasterRequest} " + err.message);
            }
        },

        processTransactionRequest: function (arrData, iModuleType, evt) {
            let iRequestType = 0;
            let iVoucherType = 0;
            let sCallbackFn = "";
            let isFieldId = false;
            let bStruct = false;
            let rowIndex = null;
            let rowCount = null;
            let iRequestId = null;
            let objData = null;
            let objResponse = null;
            let objReturn = null;

            try {
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);
                if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.CONTINUE) {
                    EntryMainExternalModule.continueProcess(arrData.result, evt)
                    return;
                }
                else if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.RESET_CACHE) {
                    iVoucherType = FWrapper.PRIVATE.getVoucherType(arrData);
                    GLOBAL.clearTransactionCache(iVoucherType);
                    return;
                }
                else if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.DELETE_ROW) {
                    rowIndex = FWrapper.PRIVATE.getRowIndex(arrData);
                    rowCount = FWrapper.PRIVATE.getRowCount(arrData);
                    eval("EntryMainAPI.deleteRows")(rowIndex, rowCount);
                    return;
                }

                isFieldId = FWrapper.PRIVATE.isFieldId(arrData);
                rowIndex = FWrapper.PRIVATE.getRowIndex(arrData);
                objData = FWrapper.PRIVATE.getData(arrData);
                sCallbackFn = FWrapper.PRIVATE.getCallback(arrData);
                iRequestId = FWrapper.PRIVATE.getRequestId(arrData);
                bStruct = FWrapper.PRIVATE.getStruct(arrData);

                if (Array.isArray(rowIndex) == true) {
                    console.log('processTransactionRequest::RequestType:' + FConvert.toString(iRequestType) + "::isFieldId:" + FConvert.toString(isFieldId) + "::rowIndex:<Array>::Input:" + FConvert.toString(objData));
                }
                else {
                    console.log('processTransactionRequest::RequestType:' + FConvert.toString(iRequestType) + "::isFieldId:" + FConvert.toString(isFieldId) + "::rowIndex:" + FConvert.toString(iRowIndex) + "::Input:" + FConvert.toString(objData));
                }

                if (FCommon.UI.isValidObject(objData) == true) {

                    if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.GET) {
                        objResponse = eval("EntryMainAPI.getValue")(objData.fieldid, isFieldId == false, rowIndex, bStruct);
                        objResponse.FieldValue = objResponse.data;
                    }
                    else {
                        objResponse = eval("EntryMainAPI.setValue")(objData.fieldid, isFieldId == false, rowIndex, objData.value, bStruct);
                    }

                    objReturn = {};
                    objReturn.response = objResponse;
                    objReturn.moduleType = iModuleType;
                    objReturn.fieldId = objData.fieldid;
                    objReturn.requestType = iRequestType;
                    objReturn.sCallbackFn = sCallbackFn;
                    objReturn.iRequestId = iRequestId;
                    objReturn.bStruct = bStruct;

                    if (Array.isArray(rowIndex) == false && rowIndex > 0) {
                        objReturn.RowsInfo = eval("EntryMainAPI.getTotalValidRows")();
                    }

                    if (FCommon.UI.isValidObject(evt.source) == true) {
                        evt.source.postMessage(objReturn, evt.origin);
                    }                    
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.processTransactionRequest} " + err.message);
            }
        },

        processTransactionHomeRequest: function (arrData, iModuleType, evt) {
            var iRequestType = 0;

            try {
                debugger
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);
                if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.CONTINUE) {
                    transMainExternalModule.continueProcess(arrData.result, evt)
                    return;
                }

            }
            catch (err) {
                alert("Exception: {Fwrapper.processTransactionHomeRequest} " + err.message);
            }
        },

        processFixedAssetRequest: function (arrData, iModuleType, evt) {
            var iRequestType = 0;
            var iRowIndex = 0;
            var iVoucherType = 0;
            var sCallbackFn = "";
            var iRequestId = null;
            var isFieldId = false;
            var bStruct = false;
            var objData = null;
            var objResponse = null;
            var objReturn = null;

            try {
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);
                if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.CONTINUE) {
                    FixAEntryExternalModule.continueProcess(arrData.result, evt)
                    return;
                }                

                isFieldId = FWrapper.PRIVATE.isFieldId(arrData);
                iRowIndex = FWrapper.PRIVATE.getRowIndex(arrData);
                objData = FWrapper.PRIVATE.getData(arrData);
                sCallbackFn = FWrapper.PRIVATE.getCallback(arrData);
                iRequestId = FWrapper.PRIVATE.getRequestId(arrData);
                bStruct = FWrapper.PRIVATE.getStruct(arrData);

                console.log('processFixedAssetRequest::RequestType:' + FConvert.toString(iRequestType) + "::isFieldId:" + FConvert.toString(isFieldId) + "::iRowIndex:" + FConvert.toString(iRowIndex) + "Input:" + FConvert.toString(objData));

                if (FCommon.UI.isValidObject(objData) == true) {

                    if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.GET) {
                        objResponse = eval("FixedAssetAPI.getValue")(objData.fieldid, isFieldId == false, iRowIndex, bStruct);
                        objResponse.FieldValue = objResponse.data;
                    }
                    else {
                        objResponse = eval("FixedAssetAPI.setValue")(objData.fieldid, isFieldId == false, iRowIndex, objData.value, bStruct);
                    }

                    objReturn = {};
                    objReturn.response = objResponse;
                    objReturn.moduleType = iModuleType;
                    objReturn.fieldId = objData.fieldid;
                    objReturn.requestType = iRequestType;
                    objReturn.sCallbackFn = sCallbackFn;
                    objReturn.iRequestId = iRequestId;
                    objReturn.bStruct = bStruct;

                    if (iRowIndex > 0) {
                        objReturn.RowsInfo = eval("FixedAssetAPI.getTotalValidRows")();
                    }

                    if (FCommon.UI.isValidObject(evt.source) == true) {
                        evt.source.postMessage(objReturn, evt.origin);
                    }
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.processTransactionRequest} " + err.message);
            }
        },

        processMRPRequest: function (arrData, iModuleType, evt) {
            var iRequestType = 0;
            var iRowIndex = 0;
            var iVoucherType = 0;
            var sCallbackFn = "";
            var iRequestId = null;
            var isFieldId = false;
            var bStruct = false;
            var objData = null;
            var objResponse = null;
            var objReturn = null;

            try {
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);

                isFieldId = FWrapper.PRIVATE.isFieldId(arrData);
                iRowIndex = FWrapper.PRIVATE.getRowIndex(arrData);
                objData = FWrapper.PRIVATE.getData(arrData);
                sCallbackFn = FWrapper.PRIVATE.getCallback(arrData);
                iRequestId = FWrapper.PRIVATE.getRequestId(arrData);
                bStruct = FWrapper.PRIVATE.getStruct(arrData);

                console.log('processMRPRequest::RequestType:' + FConvert.toString(iRequestType) + "::isFieldId:" + FConvert.toString(isFieldId) + "::iRowIndex:" + FConvert.toString(iRowIndex) + "Input:" + FConvert.toString(objData));

                if (FCommon.UI.isValidObject(objData) == true) {

                    if (iRequestType == FWrapper.ENUMS.REQUEST_TYPE.GET) {
                        objResponse = eval("MRP.getValue")(objData.fieldid, isFieldId == false, iRowIndex, bStruct);
                        objResponse.FieldValue = objResponse.data;
                    }
                    else {
                        objResponse = eval("MRPCommon.MRPExternalMethods.SetValue")(objData.fieldid, isFieldId == false, iRowIndex, objData.value, bStruct);
                    }

                    objReturn = {};
                    objReturn.response = objResponse;
                    objReturn.moduleType = iModuleType;
                    objReturn.fieldId = objData.fieldid;
                    objReturn.requestType = iRequestType;
                    objReturn.sCallbackFn = sCallbackFn;
                    objReturn.iRequestId = iRequestId;
                    objReturn.bStruct = bStruct;


                    if (FCommon.UI.isValidObject(evt.source) == true) {
                        evt.source.postMessage(objReturn, evt.origin);
                    }
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.processMRPRequest} " + err.message);
            }
        },

        processUIRequest: function (arrData, evt) {
            var iRequestType = 0;
            var eleContainer = null;
            var value = null;

            try {
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);
                switch (iRequestType) {
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.SET_POPUP_COORDINATE:
                        eleContainer = GLOBAL.getExternalModuleContainer();
                        if (FCommon.UI.isValidObject(eleContainer) == false) {
                            console.log('SET_POPUP_COORDINATE::Container not found;');
                            break;
                        }
                        value = FConvert.toString(arrData.Left);
                        if (FCommon.String.isNullOrEmpty(value, true) == false) {
                            eleContainer.style.left = value;
                        }

                        value = FConvert.toString(arrData.Top);
                        if (FCommon.String.isNullOrEmpty(value, true) == false) {
                            eleContainer.style.top = value;
                        }

                        value = FConvert.toString(arrData.Width);
                        if (FCommon.String.isNullOrEmpty(value, true) == false) {
                            eleContainer.style.width = value;
                        }

                        value = FConvert.toString(arrData.Height);
                        if (FCommon.String.isNullOrEmpty(value, true) == false) {
                            eleContainer.style.height = value;
                        }

                        break;
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.OPEN_POPUP:
                        FWrapper.openPopup(arrData["URL"]);
                        break;
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.CLOSE_POPUP:
                        FWrapper.closePopup();
                        break;
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.GOTOHOMEPAGE:
                        GLOBAL.gotoHomePage();
                        break;
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.LOGOUT:
                        GENERAL.Logout();
                        break;
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.AWAKE_SESSION:
                        GLOBAL.awakeSession();
                        break;
                    case FWrapper.ENUMS.REQUEST_TYPE_UI.OPEN_INVOICE_DESIGNER:
                        FWrapper.OpenInvoiceDesigner(arrData, evt);
                        break;
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.processUIRequest} " + err.message);
            }
        },

        processGlobalRequest: function (arrData, iModuleType, evt) {
            var iRequestType = 0;
            var sVariable = "";
            var sCallbackFn = "";
            var iRequestId = null;
            var objGlobalValue = null;
            var objResponse = null;
            var objReturn = null;

            try {
                iRequestType = FWrapper.PRIVATE.getRequestType(arrData);
                sVariable = FConvert.toString(arrData["Variable"]);
                sCallbackFn = FWrapper.PRIVATE.getCallback(arrData);
                iRequestId = FWrapper.PRIVATE.getRequestId(arrData);

                console.log('GlobalValue::RequestType:' + FConvert.toString(iRequestType) + "::Variable:" + sVariable);

                switch (iRequestType) {
                    case FWrapper.ENUMS.REQUEST_TYPE.GET:
                        objResponse = COMMON.prototype.getEmptyResultObject();
                        objResponse.lValue = 0;
                        objResponse.sValue = "";
                        objResponse.data = {};

                        objGlobalValue = FWrapper.PRIVATE.getGlobalObject();

                        sVariable = sVariable.toUpperCase();
                        if (sVariable == "SESSION" || sVariable == "SESSIONID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.SessionId;
                            objResponse.data.FieldValue = objGlobalValue.SessionId;
                        }
                        else if (sVariable == "COMPANY" || sVariable == "COMPANYID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.CompanyId;
                            objResponse.data.FieldValue = objGlobalValue.CompanyId;
                        }
                        else if (sVariable == "YEARID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.YearId;
                            objResponse.data.FieldValue = objGlobalValue.YearId;
                        }
                        else if (sVariable == "LOGIN" || sVariable == "LOGINID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.LoginId;
                            objResponse.data.FieldValue = objGlobalValue.LoginId;
                        }
                        else if (sVariable == "LOGINNAME" || sVariable == "USERNAME") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.UserName;
                            objResponse.data.FieldValue = objGlobalValue.UserName;
                        }
                        else if (sVariable == "LANGUAGE" || sVariable == "LANGUAGEID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.LanguageId;
                            objResponse.data.FieldValue = objGlobalValue.LanguageId;
                        }
                        else if (sVariable == "ALTLANGUAGE" || sVariable == "ALTLANGUAGEID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.AltLanguageId;
                            objResponse.data.FieldValue = objGlobalValue.AltLanguageId;
                        }
                        else if (sVariable == "CALENDAR" || sVariable == "CALENDARTYPE") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.CalendarType;
                            objResponse.data.FieldValue = objGlobalValue.CalendarType;
                        }
                        else if (sVariable == "FINANCIALDATE" || sVariable == "ACCOUNTINGDATE") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.AccountingDate;
                            objResponse.data.FieldValue = objGlobalValue.AccountingDate;
                        }
                        else if (sVariable == "LOGID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.LogId;
                            objResponse.data.FieldValue = objGlobalValue.LogId;
                        }
                        else if (sVariable == "CDID") {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = {};
                            objResponse.data.FieldText = objGlobalValue.CDID;
                            objResponse.data.FieldValue = objGlobalValue.CDID;
                        }
                        else {
                            objResponse.lValue = 1;
                            objResponse.sValue = "";
                            objResponse.data = objGlobalValue;
                        }

                        if (objResponse.lValue > 0) {
                            objReturn = {};
                            objReturn.moduleType = iModuleType;
                            objReturn.requestType = iRequestType;
                            objReturn.fieldId = sVariable;
                            objReturn.response = objResponse;
                            objReturn.sCallbackFn = sCallbackFn;
                            objReturn.iRequestId = iRequestId;

                            evt.source.postMessage(objReturn, evt.origin);
                        }
                        break;
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.processGlobalRequest} " + err.message);
            }
        },

        prepareURL: function (sURL) {
            let sProtocol = "";
            let sPathName = "";
            let sHost = "";

            try {
                sProtocol = document.location.protocol;
                sHost = document.location.host;

                if (FCommon.String.startsWith(sURL, ".") == true) {
                    sURL = sURL.substr(1); // Remove .

                    sPathName = document.location.pathname;
                    if (sPathName.indexOf("/", 1) < 0) {
                        sPathName = sPathName + "/";
                    }

                    // Remove last /
                    sPathName = sPathName.substr(0, sPathName.indexOf("/", 1));
                }

                sURL = FConvert.toString(sURL).trim();
                if (FCommon.String.isNullOrEmpty(sURL) == true) {
                    return (sURL);
                }

                if (FCommon.String.startsWith(sURL, "/") == true) {
                    return (sProtocol + "//" + sHost + sPathName + sURL);
                }

                if (FCommon.String.startsWith(sURL.toLowerCase(), "www.") == true) {
                    return (sURL);
                }

                if (FCommon.String.startsWith(sURL.toLowerCase(), "http:") == true) {
                    return (sURL);
                }

                if (FCommon.String.startsWith(sURL.toLowerCase(), "https:") == true) {
                    return (sURL);
                }

                return (sProtocol + "//" + sHost + sPathName + "/" + sURL);
            }
            catch (err) {
                WriteConsoleLog("Exception: {FWrapper.prepareURL} " + err.message, "red");
            }

            return (sURL);
        },

        loadExternalJS: function (sURL, sFunctionName, objCallback, data, data1, sLoadedCallback) {
            let scriptTag = null;
            let location = null;
            let obj = null;

            try {
                sURL = FWrapper.prepareURL(sURL);
                if (FWrapper.isJSAlreadyLoaded(sURL) == true) {
                    if (FCommon.String.isNullOrEmpty(sFunctionName, true) == false) {
                        if (FCommon.String.isNullOrEmpty(sLoadedCallback, true) == false) {
                            try {
                                eval(sLoadedCallback)(data, data1);
                            }
                            catch (err) {
                            }
                        }

                        try {

                            if (FCommon.String.isNullOrEmpty(objCallback, true) == false) {
                                var ReturnObj = eval(sFunctionName)(objCallback.Data, data, data1);
                                eval(objCallback.Function)(ReturnObj);
                            }
                            else {
                                obj = FWrapper.PRIVATE.getGlobalObject();

                                eval(sFunctionName)(obj, data, data1);
                            }
                        }
                        catch (err) {
                            alert("Exception: {FWrapper.loadExternalJS.alreadyLoaded} " + err.message);
                        }
                    }

                    return;
                }

                location = UIContainer.getDefaultContainer();
                if (FCommon.UI.isValidObject(location) == false) {
                    location = document.head;
                }

                scriptTag = document.createElement('script');

                scriptTag.onload = function (evt) {
                    if (FCommon.String.isNullOrEmpty(sFunctionName, true) == false) {
                        var obj = null;

                        if (FCommon.String.isNullOrEmpty(sLoadedCallback, true) == false) {
                            try {
                                eval(sLoadedCallback)(data, data1);
                            }
                            catch (err) {
                            }
                        }

                        try {
                            if (FCommon.String.isNullOrEmpty(objCallback, true) == false) {

                                var ReturnObj = eval(sFunctionName)(objCallback.Data, data, data1);

                                eval(objCallback.Function)(ReturnObj);

                            }
                            else {

                                obj = FWrapper.PRIVATE.getGlobalObject();

                                eval(sFunctionName)(obj, data, data1);
                            }

                        }
                        catch (err) {
                            alert("Exception: {FWrapper.loadExternalJS.onload} " + err.message);
                        }
                    }
                }

                scriptTag.src = sURL;
                location.appendChild(scriptTag);
            }
            catch (err) {
                alert("Exception: {Fwrapper.loadExternalJS} " + err.message);
            }
        },

        isJSAlreadyLoaded: function (sURL) {
            var scripts = null;
            var iCounter = 0;

            try {
                scripts = document.getElementsByTagName('script');
                for (iCounter = scripts.length - 1; iCounter >= 0; iCounter--) {
                    if (scripts[iCounter].src.toLowerCase() == sURL.toLowerCase()) {
                        return (true);
                    }
                }
            }
            catch (err) {
                alert("Exception: {Fwrapper.isJSAlreadyLoaded} " + err.message);
            }

            return (false);
        },

        PRIVATE: {
            getModuleType: function (arrData) {
                var value = 0;

                value = FConvert.toInt(arrData['moduleType']);

                return (value);
            },

            getRequestType: function (arrData) {
                var value = 0;

                value = FConvert.toInt(arrData['requestType']);

                return (value);
            },

            isFieldId: function (arrData) {
                var value = false;

                value = FConvert.toBoolean(arrData['isFieldId']);

                return (value);
            },

            getRowIndex: function (arrData) {
                let value = 0;

                if (Array.isArray(arrData["rowIndex"]) == true) {
                    value = arrData["rowIndex"];
                }
                else {
                    value = FConvert.toInt(arrData["rowIndex"]);
                }

                return (value);
            },

            getRowCount: function (arrData) {
                let value = 0;

                value = FConvert.toInt(arrData["rowCount"]);

                return (value);
            },

            getVoucherType: function (arrData) {
                var value = 0;

                value = FConvert.toInt(arrData["iVoucherType"]);

                return (value);
            },

            getData: function (arrData) {
                var value = null;

                value = arrData['objData'];

                return (value);
            },

            getCallback: function (arrData) {
                var value = "";

                value = arrData["sCallbackFn"];

                return (value);
            },

            getRequestId: function (arrData) {
                var value = null;

                value = arrData["iRequestId"];

                return (value);
            },

            getStruct: function (arrData) {
                var value = null;

                value = FConvert.toBoolean(arrData["bStruct"]);

                return (value);
            },

            getGlobalObject: function () {
                var objGlobalValue = null;
                var obj = null;

                try {
                    objGlobalValue = GLOBAL.getGlobalValue();

                    obj = {};
                    obj.SessionId = objGlobalValue.SessionId;
                    obj.CompanyId = objGlobalValue.CompanyId;
                    obj.LoginId = objGlobalValue.LoginId;
                    obj.UserName = objGlobalValue.UserName;
                    obj.LanguageId = objGlobalValue.LanguageId;
                    obj.AltLanguageId = objGlobalValue.AltLanguageId;
                    obj.CalendarType = objGlobalValue.CalendarType;
                    obj.AccountingDate = objGlobalValue.AccountingDate;
                    obj.LiteVersion = objGlobalValue.LiteVersion;
                    obj.YearId = FConvert.getYearId(obj.CompanyId);
                    obj.CDID = FConvert.toString(objGlobalValue.CDID);
                    obj.CurrentTime = new Date();
                }
                catch (err) {
                    alert("Exception: {Fwrapper.PRIVATE.getGlobalObject} " + err.message);
                }

                return (obj);
            }
        }
    }

    if (window.addEventListener) {
        window.addEventListener("message", FWrapper.receiveMessage, false);
    }
    else if (window.attachEvent) {
        window.attachEvent("message", FWrapper.receiveMessage, false);
    }

    //window.addEventListener('message', FWrapper.receiveMessage, false);
}


;
console.log('GenerateNewMaster Starts: ', new Date().toLocaleString());
var PrevDatePickerLocation = ''; var PrevDatePickerId = '';
var RevisedOnDate = $('#lblRevisedOn').text();
var CreateNewRevision = false;
var iRevisionDate = ""; var lastComparefieldForRulesCondition = "";
var ledgerSearchedValue = "";
var iDepreciationMethodValue = 0;
var GetMasterEntryResourceMessages; var ExternalModuleForFields; var ExternalModuleForMastersObject;
var lstBodyMasterIds;
var checkbufferForMultipleTreeTabs = [];
var WarehouseBinvalue = 0;
//var BalanceSheetArray = ["Cash", "Bank", "Customer", "Vendor", "Customer/Vendor", "Assets", "Liabilities", "Petty cash expenses", "Taxes payable", "General & Administration", "Control", "Treasury stock", "Short term investments", "Sinking fund payable", "Property plant & Equipment", "Preferred dividends", "Prospect", "Inventory", "FixedAssets", "Cash/Petty Cash Account", "Employee", "Assets / Liabilities", "Trust Receipt Account"];
//var ProfitLossArray = ["Sales", "Purchases", "Income", "Expenses", "Travel & Entertainment expenses", "Selling expenses", "Manufacturing expenses", "TDS", "Depreciation & Amortization", "Other expenses", "Cost", "Revenues not producing working capital", "Sales returns & discounts", "Project operation expense", "Trading Account", "Income / Expense"]
var EXTERNALMODULEFIELD_EVENT_ENUM = {
    ON_ENTER: 1,
    ON_LEAVE: 2
}
var Focus_Common_DataStructs_MasterExternalModuleEvents = (function () {
    var private = {
        "ALT_F1": 3,
        "ALT_F2": 4,
        "ALT_F3": 5,
        //  "ALT_F4": 6,
        "ALT_F5": 7,
        "ALT_F6": 8,
        "ALT_F7": 9,
        "ALT_F8": 10,
        "ALT_F9": 11,
        "ALT_F10": 12,
        "ALT_F11": 13,
        "ALT_F12": 14
    }
    return {
        get: function (name) { return private[name.toUpperCase()]; }
    };
})();
//$('#lblRevisedOn').text(DATEPICKER.setDate('date_RevisedOn', RevisedOnDate, true));

//@ not implemented yet--under testing
var MasterEntryExternalModule = new FExternalModule("MastersExternalModule.ExecuteMasterExtModule","MastersExternalModule.onContinue");
var MastersExternalModule = {
    callExternalModule: function (iEvent, iCount, sCallBack, tag) {
        //debugger
        var arrExtModData = null;
        arrExtModData = MastersExternalModule.GetExternalModuleBasedOnEvent(ExternalModuleForMastersObject, iEvent, 3);
        switch (iEvent) {
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                MasterEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                MasterEntryExternalModule.startProcess();
                return (arrExtModData.length);
            case EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                MasterEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                MasterEntryExternalModule.startProcess();
                return (arrExtModData.length);
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE:
            case EXTERNALMODULE_EVENT_ENUM.AFTER_DELETE:
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD:
            case EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD:
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                // obj.FieldId = iFieldId;
                // obj.FieldName = sFieldName;
                //obj.Row = iRow;
                obj.Callback = sCallBack;
                obj.Data = tag;
                MasterEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                MasterEntryExternalModule.startProcess();
                return (arrExtModData.length);
            default:
                break;
        }



    },
    callExternalModuleField: function (iEvent, ControlId, iCount, sCallBack, tag) {
        //    debugger
        var arrExtModData = null;
        arrExtModData = MastersExternalModule.GetExternalModuleBasedOnField(ControlId, iEvent);
        switch (iEvent) {
            case EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE:
            case EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER:
                if (arrExtModData.length < 1) {
                    return (0);
                }

                obj = {};
                obj.OnEvent = iEvent;
                obj.Callback = sCallBack;
                obj.Data = tag;
                MasterEntryExternalModule.addEvent(iEvent, arrExtModData, obj);
                MasterEntryExternalModule.startProcess();
                return (arrExtModData.length);
            default:
                break;
        }
    },
    IsExternanlModuleFound: function (arrExternalModule, iEvent) {
        if (ExternalModuleForMastersObject != null && ExternalModuleForMastersObject != undefined) {
            if (ExternalModuleForMastersObject.filter(x=>x.OnEvent == iEvent).length > 0) {
                return true;
            }
        }
    },
    GetExternalModuleBasedOnEvent: function (arrExternalModule, iEvent, iModuleType) {
        var arrdata = [];
        if (arrExternalModule != null) {
            for (var i = 0; i < arrExternalModule.length; i++) {
                if (arrExternalModule[i].ModuleType == iModuleType && arrExternalModule[i].OnEvent == iEvent) {
                    arrdata.push(arrExternalModule[i]);
                }
            }
        }
        return arrdata;
    },
    GetExternalModuleBasedOnField: function (controlid, iEvent) {
        var arrdata = [];//ExternalModuleForFields global object
        if (ExternalModuleForFields != undefined) {
            if (ExternalModuleForFields.length > 0) {
                var bFoundEvent = false;
                for (var ls = 0; ls < ExternalModuleForFields.length; ls++) {
                    if (ExternalModuleForFields[ls].FieldName == controlid) {
                        for (var i = 0; i < ExternalModuleForFields[ls].ExternalModule.length; i++) {
                            if (ExternalModuleForFields[ls].ExternalModule[i].OnEvent == iEvent) {
                                arrdata.push(ExternalModuleForFields[ls].ExternalModule[i]);
                            }
                        }

                    }
                }
            }
        }
        return arrdata;
    },
    execute: function (sURL, sFunctionName, iRow) {
        try {
            console.log("ExternalModule.execute::" + FConvert.toString(sURL) + "::" + FConvert.toString(sFunctionName));

            if (FCommon.String.endsWith(sURL, ".js") == true) {
                FWrapper.loadExternalJS(sURL, sFunctionName, null, iRow);
            }
            else {
                GLOBAL.LoadingStart();
                FWrapper.openPopup(sURL,
                                    null,
                                    "ExternalModule.onLoadCallback",
                                    "ExternalModule.onLoadCallback");
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{ExternalModule.execute} " + err.message, "Exception");
        }
    },
    ExecuteMasterExtModule: function (objInput) {
        try {
            var objCallBack ='';
            console.log("MastersExternalModule.ExecuteMasterExtModule::" + FConvert.toString(objInput.ModuleName) + "::" + FConvert.toString(objInput.FunctionName));
            if ((objInput.ModuleName).endsWith(".js")) {
                try {
                    FWrapper.loadExternalJS(objInput.ModuleName, objInput.FunctionName, objCallBack, objInput.Data);
                    return;
                }
                catch (err) {
                    alert("Exception -> Landing_ExternalModule.Common: " + err.message);
                    return false;
                }

            }
            else {
                FWrapper.openPopup(objInput.ModuleName, objCallBack);
            }
        } catch (err) {
            COMMON.prototype.showMessage("{MastersExternalModule.ExecuteMasterExtModule} " + err.message, "Exception");
        }

    },
    onContinue: function (iEvent, arrResult, objCustomData, evt) {
        debugger
        switch (iEvent) {
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData, evt);
                }
                break;
            case EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData, evt);
                }
                break;
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData.Data, evt);
                }
                break;
            case EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData.Data, evt);
                }
                break;
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData, evt);
                }
                break;
            case EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData, evt);
                }
            case EXTERNALMODULE_EVENT_ENUM.AFTER_DELETE:
                if (FCommon.String.isNullOrEmpty(objCustomData.Callback, true) == false) {
                    eval(objCustomData.Callback)(MasterEntryExternalModule.getResult(), objCustomData, evt);
                }
                break;
        }
    }
};



//@ not implemented yet--under testing

var MasterEntry_ExternalModule = {
    m_arrEventQueue: [],
    m_arrResult: [],
    addEvent: function (iEvent, objExternalModules, tag) {
        var iCounter = 0;
        var temp = null;

        try {
            MasterEntry_ExternalModule.m_arrEventQueue = [];

            if (DataType.isArray(objExternalModules) == true) {
                for (iCounter = 0; iCounter < objExternalModules.length; iCounter++) {
                    temp = {};
                    temp.OnEvent = iEvent;
                    temp.ExternalModule = objExternalModules[iCounter];
                    temp.CustomData = tag;
                    MasterEntry_ExternalModule.m_arrEventQueue.push(temp);
                }
            }
            else {
                temp = {};
                temp.OnEvent = iEvent;
                temp.ExternalModule = objExternalModules;
                temp.CustomData = tag;
                MasterEntry_ExternalModule.m_arrEventQueue.push(temp);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{MasterEntry_ExternalModule.addEvent} " + err.message);
        }
    },
    startProcess: function () {
        var result = null;

        MasterEntry_ExternalModule.m_arrResult = [];
        result = MasterEntry_ExternalModule.execute();

        return (result);
    },
    execute: function () {
        var obj = null;

        try {
            if (MasterEntry_ExternalModule.getEventCount() > 0) {
                obj = MasterEntry_ExternalModule.getEventObject(0);

                ExternalModule.execute(obj.ExternalModule.ModuleName,
                                                            obj.ExternalModule.FunctionName,
                                                            0);

                return (true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{MasterEntry_ExternalModule.execute} " + err.message);
        }

        return (false);
    },
    getEventCount: function () {
        return (MasterEntry_ExternalModule.m_arrEventQueue.length);
    },
    getEventObject: function (iIndex) {
        var obj = null;

        if (iIndex >= 0 && iIndex < MasterEntry_ExternalModule.getEventCount()) {
            obj = MasterEntry_ExternalModule.m_arrEventQueue[iIndex];
        }

        return (obj);
    },
    continueProcess: function (result, evt) {
        var obj = null;

        try {
            if (MasterEntry_ExternalModule.getEventCount() > 0) {
                obj = MasterEntry_ExternalModule.getEventObject(0);
                MasterEntry_ExternalModule.removeEvent(0);

                MasterEntry_ExternalModule.m_arrResult.push(result);
            }

            if (MasterEntry_ExternalModule.execute() == false) {
                if (FCommon.UI.isValidObject(obj) == true) {
                    switch (obj.OnEvent) {
                        //case eVoucherExternalModuleEvents.BeforeSave:
                        //    if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                        //        eval(obj.CustomData.Callback)(tranEntryExternalModule.getResult(), obj.CustomData.SaveTransactionInput, evt);
                        //    }
                        //    break;
                        //case eVoucherExternalModuleEvents.AfterSave:
                        //    if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                        //        eval(obj.CustomData.Callback)(tranEntryExternalModule.getResult(), obj.CustomData.SaveTransactionInput.SaveSource, obj.CustomData.SaveTransactionInput.VoucherNo, evt);
                        //    }
                        //    break;
                        //case eVoucherExternalModuleEvents.BeforeDelete:
                        //    if (FCommon.String.isNullOrEmpty(obj.CustomData.Callback, true) == false) {
                        //        eval(obj.CustomData.Callback)(tranEntryExternalModule.getResult(), obj.CustomData, evt);
                        //    }
                        //    break;
                    }
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{MasterEntry_ExternalModule.continueProcess} " + err.message);
        }
    }


};
var MASTERENTRYSCREEN = {

    optionCtrlLoadedGrid: function (id, data, tag) {

        try {
            var sGridCtrlId = document.getElementById("tblNewMasterGenerator");

            if (FCommon.Array.getLength(tag.Data) == 0) {
                return;
            }
            if (tag.CustomData != null) {
                cell = FGRIDCONTROL.getCellObject(sGridCtrlId, tag.CustomData.iRow, tag.CustomData.iColumn);
                cell.setCellData("value", tag.Data[0].sValue);
                cell.setCellText(tag.Data[1].sValue);
            }
        } catch (ex) {
            COMMON.prototype.showMessage("MASTERENTRYSCREEN.optionCtrlLoadedGrid " + ex.message);
        }
    },
    cellChangeGrid: function (cellobj, event) {
            if (cellobj.bLeave == true) {
                return (MASTERENTRYSCREEN.onLeaveGrid(cellobj, event));
                }
                else {
                MASTERENTRYSCREEN.onEnterGrid(cellobj, event);
            }
    },
    onLeaveGrid: function (cellobj, event) {
        debugger
        var element = null;
        var data = null;
        var tag = {};
        if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {
            switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                case MasterDataType.get("MASTER"):
                    data = OPTIONCONTROL.getControlData(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", parseInt(COMMON.prototype.getObjectFirstPropertyValue(data[0]) == "" ? 0 : COMMON.prototype.getObjectFirstPropertyValue(data[0])));
                    cellobj.setCellText(COMMON.prototype.getObjectFirstPropertyValue(data[1]));
                    break;
                case MasterDataType.get("NUMBERLIST"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText($(element).find("option:selected").text()); 
                    break;
                case MasterDataType.get("FRACTION"):
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText(element.value);
                    break;
                case MasterDataType.get("TEXT"):
                   element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if(element!=null)
                    {

                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText(element.value);

                        //cellobj.setControl(element, cellobj.getCellData("value"));
                        $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                    }
                    
                    break;
                case MasterDataType.get("BOOLEAN"):
                    cellobj.processDefault(event);
                    //cellobj.setControl(element, cellobj.getCellData("value"));
                    break;
                default:
                    break;
            }
            return (true);
        }
    },
    onEnterGrid: function (cellobj, event) {
        debugger;
        var element = null;
        var sGridCtrlId = "";
        var iValue = 0;
        var data = null;
        sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);
       

        //start Dynamic Inser Row Functionality
        var gridId = cellobj.Grid.id;
        var gridBodyId = gridId + "_body";
        var CurrentrowsLength = $("#" + gridBodyId)[0].children.length;
        //if (cellobj.iRow == CurrentrowsLength) {
        //    FGRIDCONTROL.insertRows(gridId, 0, 1);
        //}
        //End Dynamic Inser Row Functionality

        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("MASTER"):
                cellobj.setCellText("");
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                OPTIONCONTROL.setParent(element, cellobj.cell);
                iValue = 0;
                if (COMMON.prototype.isInteger(cellobj.CellData.value) == true) {
                    iValue = parseInt(cellobj.getCellData("value"));
                }
                if (iValue <= 0) {
                    OPTIONCONTROL.clear(element);
                }
                else {
                    OPTIONCONTROL.setControlValue(element, iValue);
                }
                $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                break;
            case MasterDataType.get("NUMBERLIST"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (cellobj.getCellData("value") == null) {
                    cellobj.setControl(element, "0");
                }
                else {
                    cellobj.setControl(element, cellobj.getCellData("value"));
                }
                $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                break;
            case MasterDataType.get("FRACTION"):              
                   element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if(element!=null)
                    {
                        cellobj.setControl(element, cellobj.getCellData("value"));
                        $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                        
                    }                
                break;
            case MasterDataType.get("TEXT"):
              
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    if(element!=null)
                    {
                        cellobj.setControl(element, cellobj.getCellData("value"));
                        $("#" + cellobj.ColumnAttribute.ctrlid).focus();
                    }
                
                break;
            case MasterDataType.get("BOOLEAN"):
                cellobj.processDefault(event);
                //cellobj.setControl(element, cellobj.getCellData("value"));
                return;
            default:
                cellobj.processDefault(event);
                break;
        }
    },
    DocumentUploadChange: function (ele) {
        if (ele.files.length <= 0) {
            return false;
        }
        var divErrorMsg = $(ele).parent().parent().next().attr('id');
        $("#" + divErrorMsg).html("");
        var fileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[0].id;
        var hdnFileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[1].id;
        var fileName = ele.files[0].name;
        var imgId = "";
        if ((ele.files && ele.files[0])) {
            var fileType = ele.files[0].type;
            var rowIndex = "";
            if ($(ele).closest('table').length > 0) {
                if ($(ele).closest('table')[0].dataset.tabtype == '1') {
                    $($($($(ele).closest('tr')).find("td:last")).find("input")).val(MASTERENTRYSCREEN.bytesToSize(ele.files[0].size, true));
                    rowIndex = ele.closest('tr').rowIndex;

                }
            }
            if (fileType == "image/png" || fileType == "image/gif" || fileType == "image/jpg" || fileType == "image/jpeg" || fileType == "text/plain" || fileType == "application/pdf" || fileType == "application/doc" || fileType == "application/x-zip-compressed" || fileType == "application/x-rar-compressed" || fileType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || fileType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || fileType == "application/vnd.ms-excel" || fileType == "application/msword" || fileName.indexOf(".log") >= 0) {
                var selectedFile = ele.files[0];
                var ele = $(ele)

                selectedFile.convertToBase64(function (base64) {
                    //
                    ele.attr('data-img', '')
                    ele.attr('data-img', base64)
                    if ($($(ele).parent().next()).find('a').length > 0) {
                        $($(ele).parent().next()).find('a')[0].href = base64;
                        $($(ele).parent().next()).find('a')[0].download = fileName;
                    }
                    //if (base64Data.indexOf(base64) == -1) {
                    //    //
                    //    base64Data.push(base64);
                    //}
                }, imgId, selectedFile);
                //

                $('#' + fileNameInputId).val(fileName);
                $('#' + hdnFileNameInputId).val(fileName);
                if (rowIndex != "") {
                    $('#' + hdnFileNameInputId + rowIndex).val(fileName);
                }
                $(ele).addClass('image')
                $("#" + divErrorMsg).html('');
            }

            else {
                $("#" + divErrorMsg).html("Document must be txt,doc,docx,pdf,xls,xlsx format type only!")
                $("#" + divErrorMsg).show();
                $('#' + fileNameInputId).removeClass('image')
                $("#" + divErrorMsg).css("color", "red");
                $("#" + divErrorMsg).fadeOut(3000);
                var numberPattern = /\d+/g;
                var FilesizeNumber = fileNameInputId.match(numberPattern);
                if (FilesizeNumber != null) {
                    $("#iFileSize" + FilesizeNumber).val("");
                }
                return false;
            }
        }
        else {
            $("#" + divErrorMsg).html('');
            $('#' + fileNameInputId).val("");
            $('#' + hdnFileNameInputId).val("");
        }
    },
    FileUploadChange: function (ele, evt) {
       ////debugger
        if (ele.files.length <= 0) {
            return false;
        }
        var fileName = ele.files[0].name;
        var divErrorMsg = $(ele).parent().parent().next().attr('id');
        $("#" + divErrorMsg).html("");
        if ((ele.files && ele.files[0])) {
            var fileType = ele.files[0].type;
            if (fileType == "image/png" || fileType == "image/gif" || fileType == "image/jpg" || fileType == "image/jpeg") {
                //
                if ($(ele).attr('data-maxsize') == "0" || $(ele).attr('data-maxsize') == "")
                    $(ele).attr('data-maxsize', '40');
                if (MASTERENTRYSCREEN.bytesToSize(ele.files[0].size, false) < $(ele).attr('data-maxsize')) {
                    var selectedFile = ele.files[0];
                    var ele = $(ele)
                    var imgId = $($($(ele).parent('div')).parent('div').prev()[0]).find('img')[0].id

                    selectedFile.convertToBase64(function (base64) {
                        //
                        ele.attr('data-img', '')
                        ele.attr('data-img', base64)
                        $('#view' + imgId).attr('src', base64);
                        if ($($(ele).parent().next()).find('a').length > 0) {
                            $($(ele).parent().next()).find('a')[0].href = base64;
                            $($(ele).parent().next()).find('a')[0].download = fileName;
                        }
                    }, imgId, selectedFile);

                    //
                    $(".img-logo").css({ "padding-top": "0" });
                    $('#' + imgId).addClass('image')

                    $("#" + divErrorMsg).html('');
                    var fileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[0].id;
                    var hdnFileNameInputId = $($($(ele).parent('div')).parent('div')[0]).find('input')[1].id;

                    $('#' + fileNameInputId).val(fileName)
                    $('#' + hdnFileNameInputId).val(fileName)

                }
                else {
                    $("#" + divErrorMsg).html("Image size must be less than " + $(ele).attr('data-maxsize') + " KB!");
                    $("#" + divErrorMsg).css("color", "red");
                    $('#imageDataType').attr('src', "").css({ "width": "70px", "height": "60px" });
                    $(".img-logo").css({ "padding-top": "30px" });
                    $('#imageDataType').removeClass('image')

                    return;
                }
            }
            else {
                $("#" + divErrorMsg).html("Picture must be an image type only!");
                $("#" + divErrorMsg).css("color", "red");
                $('#imageDataType').attr('src', "").css({ "width": "70px", "height": "60px" });
                $(".img-logo").css({ "padding-top": "30px" });
                $('#imageDataType').removeClass('image')

                return;
            }
        }
        else {
            $('#imageDataType').attr('src', "").css({ "width": "70px", "height": "60px" });
            $(".img-logo").css({ "padding-top": "30px" });
            $("#" + divErrorMsg).html('');
            $('#pImage').val("");
            $('#pImage').val("")
            $('#imageDataType').removeClass('image')
        }
    },
    OpenImage:function(imagesrc)
    {
        debugger
        var y = window.top.outerHeight / 2 + window.top.screenY - (500 / 2);
        var x = window.top.outerWidth / 2 + window.top.screenX - (500 / 2);
        var newWindow = window.open("", "pictureViewer",
            "location=no, directories=no, fullscreen=no, " +
            "menubar=no, status=no, toolbar=no, width=" +
            500 + ", height=" + 500 + ",top="+ y + ",left="+ x +", scrollbars=no");
        newWindow.document.writeln("<html>");
        newWindow.document.writeln("<body style='margin: 0 0 0 0;'>");
        //newWindow.document.writeln("<a href='javascript:window.close();'>");        
        newWindow.document.writeln("<img src='" + imagesrc +
           "' alt='Click to close' id='bigImage'/>");
        newWindow.document.writeln("</a>");
        newWindow.document.writeln("</body></html>");
        newWindow.document.close();

    },
    RemoveImg:function(ele)
    {
        debugger
        var selectedId = document.getElementById('ImageDisplay').getAttribute('data-RefLiId');
        var UL = document.getElementById('ImageList');
        UL.removeChild(document.getElementById(selectedId));
        if($(UL).find('.imglink').length>0)
        {
            MASTERENTRYSCREEN.DisplayImage($(UL).find('a')[0]);
        }
        else
        {
            document.getElementById('ImageDisplay').setAttribute('data-RefLiId', '');
            document.getElementById('ImageDisplay').setAttribute('data-RefAnchorId', '');
            document.getElementById('ImageDisplay').setAttribute('src', '');

            document.getElementById('dvDefault').style.display = 'block';
            document.getElementById('dvImageContainer').style.display = 'none';
            document.getElementById('dvPrimaryDeleteContainer').style.display = 'none';

        }
    },
    MultipleUpload: function (ele, evt) {
        debugger
        var parent = document.getElementById('ImageSlides');
        var Ul = document.getElementById('ImageList') == null ? document.createElement('ul') : document.getElementById('ImageList');
        Ul.id = 'ImageList';
        var UlForPlus = null;
        var FirstLi = null;
        for (var i = 0; i <= ele.files.length; i++) {

            var Li = document.createElement('li');
            Li.style.listStyleType = 'none';
            Li.style.display = 'inline-flex';
            Li.style.padding = "10px";
            Li.id = 'Li_Img' + i;
            if (i == ele.files.length) {
                var addIcon = document.getElementById('AddImage_Link');
                if (addIcon == null) {
                    Li.id = "Li_Add";
                    Li.innerHTML = MASTERENTRYSCREEN.GetPlus();
                    //break;
                }
                else {
                    break;
                }
            }
            else {
                var selectedFile = ele.files[i];
                var html = '<a id="aLink' + i + '" data-IsPrimaryImg="0" class="imglink" style="border:1px solid #ccc;padding:10px;cursor:pointer;" onclick="MASTERENTRYSCREEN.DisplayImage(this);"><img id="viewimgpImage' + i + '" class="image" data-type="image" style="height:35px;width:40px;" src=""></a>';
                Li.innerHTML = html;
                selectedFile.convertToBase64(function (base64) {
                    $('#viewimgpImage' + i).attr('src', base64);
                }, 'viewimgpImage' + i, selectedFile);
                if(i==0)//set the first image in the list to the main image display block.
                {
                    selectedFile.convertToBase64(function (base64) {
                        MASTERENTRYSCREEN.DisplayImage($(FirstLi).find('a')[0]);
                    }, 'ImageDisplay', selectedFile);
                }
            }
            Ul.style.paddingTop = "8px";
            var addIcon = document.getElementById('AddImage_Link');
            if (addIcon != null) {
                var liAdd = document.getElementById('Li_Add');
                Ul.insertBefore(Li, liAdd);
            }
            else {
                Ul.appendChild(Li);
            }
            if(i==0)
            {
                FirstLi = Li;
            }
        }
        parent.appendChild(Ul);
        return;
    },
    GetPlus: function () {

        //var htmlPlus = '<a id="AddImage_Link" style="border:1px solid #ccc;padding:10px;width:40px;cursor:pointer;"> <img src="/Focus8W/Resources/Company/Images/uploadimg.png" alt="Company Logo" title="Company logo"></i><input title="" type="file" style="width:0;height:0;padding:5px;" multiple name="AddImage" class="image form-control upload FocusForTab" data-maxsize="500" value="" data-img="" id="AddImageBrowse" accept=".png, .jpg, .jpeg, .gif" onchange="MASTERENTRYSCREEN.AddImage(this)"/></a>';
        //var htmlPlus = '<a id="AddImage_Link" style="border:1px solid #ccc;padding:10px;cursor:pointer;"><span class="glyphicon glyphicon-plus" style="display:block;left:7px;top:5px;!Important"/><input title="" type="file" style="width:0;height:0;" multiple name="AddImage" class="image form-control upload FocusForTab" data-maxsize="500" value="" data-img="" id="AddImageBrowse" accept=".png, .jpg, .jpeg, .gif" onchange="MASTERENTRYSCREEN.AddImage(this)"/></a>';
        var htmlPlus = '<a id="AddImage_Link" style="border:1px solid #ccc;border-radius:8px; padding:10px;cursor:pointer;height:57px;width:62px;"><img src="/Focus8W/Resources/Company/Images/plus.png" class="image" style="height:35px;width:25px;margin-left:6px;"><input  type="file" style="width:0;height:-1px;" multiple name="AddImage" class="image form-control upload FocusForTab" data-maxsize="500" id="AddImageBrowse" accept=".png, .jpg, .jpeg, .gif" onchange="MASTERENTRYSCREEN.AddImage(this)"/></a>';
        return htmlPlus;
    },
    AddImage: function (ele) {
        debugger
        var UL = document.getElementById('ImageList');
        var IdCounter = 0;
        if (UL != null) {
            IdCounter = document.getElementById("ImageList").getElementsByTagName("li").length - 1;
        }
        if (UL != null && ele != null && ele.files != null) {
            if (IdCounter + ele.files.length > 15)
            {
                COMMON.prototype.showMessage("Can not upload more than 15 images");
                return;
            }
            for (var i = 0; i < ele.files.length; i++) {
                var ImageCounter = (i+1) + IdCounter;//used to set unique ids for dynamic images img element in html
                var Li = document.createElement('li');
                Li.style.listStyleType = 'none';
                Li.style.display = 'inline-flex';
                Li.style.padding = "10px";
                Li.id = 'Li_Img' + ImageCounter;
                var selectedFile = ele.files[i];
                var html = '<a id="aLink' + ImageCounter + '" data-IsPrimaryImg="0" class="imglink" style="border:1px solid #ccc;padding:10px;cursor:pointer;" onclick="MASTERENTRYSCREEN.DisplayImage(this);"><img id="viewimgpImage' + ImageCounter + '" class="image" data-type="image" style="height:100%;width:40px;" src=""></a>';
                Li.innerHTML = html;// .innerHTML(html);
                selectedFile.convertToBase64(function (base64) {
                    $('#viewimgpImage' + ImageCounter).attr('src', base64);
                }, 'viewimgpImage' + ImageCounter, selectedFile);

                UL.style.paddingTop = "8px";
                UL.style.display = "inline-flex";
                var addIcon = document.getElementById('AddImage_Link');
                if (addIcon != null) {
                    var liAdd = document.getElementById('Li_Add');
                    UL.insertBefore(Li, liAdd);
                }
                else {
                    UL.appendChild(Li);
                }
            }
        }



    },
    DisplayImage: function (element) {
        debugger
        var ImageElement=null;
        if (element != null)
        {
            ImageElement = $(element).find('img')[0];
            if(parseInt(element.getAttribute('data-IsPrimaryImg'))==0)
            {
                var MainImageSrc = document.getElementById('ImageDisplay').getAttribute('src');
                if (MainImageSrc != null && MainImageSrc.length > 0) {
                    MASTERENTRYSCREEN.MarkPrime(null, true);//only unmark when there is a main image present
                }
            }
            else
            {
                MASTERENTRYSCREEN.MarkPrime(null, false);
            }
        }
        document.getElementById('dvDefault').style.display = 'none';
        document.getElementById('ImageDisplay').setAttribute('src', ImageElement.src);
        document.getElementById('dvImageContainer').style.display = 'block';
        document.getElementById('dvPrimaryDeleteContainer').style.display = 'block';

        document.getElementById('ImageDisplay').setAttribute('data-RefAnchorId', element.id);
        var liID = document.getElementById(element.id).parentElement.id;
        document.getElementById('ImageDisplay').setAttribute('data-RefLiId', liID);
        if(element!=null && element.id.length>0)
        {
            
            document.querySelectorAll('.imglink').forEach(el => {
                el.classList.add('SetInActiveBorder');
            });
            document.getElementById(element.id).classList.remove('SetInActiveBorder');
            document.getElementById(element.id).classList.add('SetActiveBorder');
        }
        //var imgD = document.getElementById('ImageDisplay');
        //imgD.onload = function (ev) {
        //    debugger
        //    // Use the img
        //    const canvas = document.createElement('canvas');
        //    canvas.width = imgD.width;;
        //    canvas.height = imgD.height;
        //    const ctx = canvas.getContext('2d');
        //    ctx.drawImage(imgD, 0, 0, imgD.width, imgD.height);
        //    imgD.setAttribute('src', canvas.toDataURL());
        //    //canvas.toBlob(function (blob) {
        //    //    debugger;
        //    //    img.setAttribute('src', blob);
        //    //    // Handle the compressed image
        //    //});
        //};
    },
    MarkPrime:function(element,IsUnMark)
    {
        //marking image here as prime --styling is done here along with maintaining primary image status using data-attributes.
        //unmarking image as non-prime in case when user is navigating images ,styling for that also done here  in first //if block.
        debugger
        if (IsUnMark != undefined && IsUnMark == true) {

            document.getElementById('tickMark').style.display = "none";
            document.getElementById('Primar_Mark').text = 'Mark as primary';
            document.getElementById('tickMark').style.backgroundColor = "";
            document.getElementById('Primar_Mark').style.backgroundColor = "";

        }
        else {
            document.getElementById('tickMark').style.display = "inline";
            document.getElementById('Primar_Mark').text = 'primary';
            document.getElementById('tickMark').style.backgroundColor = "lightgray";
            document.getElementById('Primar_Mark').style.backgroundColor = "lightgray";
            var anchorBlock = document.getElementById('ImageDisplay').getAttribute('data-RefAnchorId');
            if (anchorBlock != null && anchorBlock.length > 0) {
                if (element != null && element != undefined) {

                    document.querySelectorAll('.imglink').forEach(el => {
                        el.setAttribute('data-IsPrimaryImg', 0);
                    });
                    document.getElementById(anchorBlock).setAttribute('data-IsPrimaryImg', 1);
                }
            }
        }

    },
    Imagedrop: function (e) {
        debugger
        e.preventDefault();
        var file = e.dataTransfer.files[0];
        file.convertToBase64(function (base64) {
            //
            MASTERENTRYSCREEN.DisplayImage(base64);
            //var ele = document.getElementById('ImageContainer');
           // $(ele).attr('src', base64);
        }, 'ImageContainer', file);
        alert('drop');

    },
    Imagedragover: function (e) {
        e.preventDefault();
    },
    Imagedragenter: function (e) {

    },
    MasterSaveBeforeEvent_EM: function (newMasterForOC) {
        debugger
        var lstBodyTable = []
        var lstAffectedDatesForTariff = [];
        var Is3plEnabled = document.getElementById('hdnIs3PLEnabled').value;
        try {
            for (var i = 0; i < $('#hdnTabsCount').val() ; i++) {
                var HasTbody = $('#newMasterDiv' + i).find('.clstblMasterNewGeneratorBody');
                if (HasTbody.length > 0) {
                    var arrMAPIDataRow = []

                    var cast = '';
                    for (var j = 0; j < HasTbody[0].rows.length; j++) {
                        var cellCount = HasTbody[0].rows[0].children.length;
                        var arrFields = []
                        for (var k = 1; k < cellCount ; k++) {

                            if ($($(HasTbody[0].rows[j].children[k]).find('input')).hasClass('clstxtOptionControl')) {
                                ////;
                                // var ControlId = $($(HasTbody[0].rows[j].children[k]).find('input')[1]).attr('id')
                                var tag =
                                {
                                    Code: "",
                                    MasterId: $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.value == '' ? '0' : $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.value,
                                    Name: $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.text == undefined ? "" : $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.text
                                }
                                tag = (tag.MasterId != null) ? JSON.stringify(tag) : ""

                            }
                            else if ($($(HasTbody[0].rows[j].children[k]).find('input')).hasClass('clstxtTimePicker')) {
                                var tag = $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.value;
                                if (tag == '') {
                                    tag = parseInt(0);
                                }
                            }
                            else if ($($(HasTbody[0].rows[j].children[k]).find('input')).hasClass('clstxtDatePicker')) {
                                //  //

                                var tag = $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.value;
                                if (tag == '0') {
                                    tag = '';
                                }
                                if ($('#newMasterDiv' + i).attr("data-tabname") == "Tariff" && Is3plEnabled == 1 && $('#hdnMasterTypeId').val() == "1006") {

                                    if (lstAffectedDatesForTariff != null && lstAffectedDatesForTariff != undefined && lstAffectedDatesForTariff.length == 0) {
                                        lstAffectedDatesForTariff.push(parseInt(tag));
                                    }
                                    else {
                                        var gridValue = parseInt(tag);
                                        var ValidCounter = lstAffectedDatesForTariff.filter(x=>x >= gridValue).length;
                                        if (ValidCounter >= 1) {
                                            COMMON.prototype.showMessage("Affected date given in Tariff details can not be less or equal than the previous affected date .check at row " + (j + 1));
                                            return;
                                        }
                                        else {
                                            lstAffectedDatesForTariff.push(parseInt(tag));
                                        }
                                    }
                                }
                                //else {
                                //    txtId = $(HasTbody[0].rows[j].children[k]).find('input')[0].id;
                                //    ocId = (txtId.match(/[a-z A-Z]+/g)).toString();
                                //    dataValue= $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.value;
                                //    arr = new ArrayBuffer(4); // an Int32 takes 4 bytes
                                //    view = new DataView(arr);
                                //    view.setUint32(0, DATEPICKER.getDate(ocId, dataValue), false); // byteOffset = 0; litteEndian = false
                                //    tag = arr;

                                //    //var arrayBuffer = $(HasTbody[0].rows[j].children[k]).find('input')[0].dataset.bytearray
                                //    //var tag = btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)));

                                //}
                            }
                            else {

                                if ($(HasTbody[0].rows[j].children[k]).find('input,select')[0].dataset.bytearray == undefined) {
                                    if ($(HasTbody[0].rows[j].children[k]).find('input,select').hasClass("clsdataTypeChkBox")) {
                                        tag = $($(HasTbody[0].rows[j].children[k]).find('input,select')).is(":checked") == true ? 1 : 0;
                                    } else {
                                        if ($(HasTbody[0].rows[j].children[k]).find('span').hasClass("clsMasterdatetime")) {
                                            tag = $($(HasTbody[0].rows[j].children[k]).find('span')).is(":visible") ? $($(HasTbody[0].rows[j].children[k]).find('span')[0]).attr("data-value") : $(HasTbody[0].rows[j].children[k]).find('span').text().trim();
                                        } else {
                                            tag = $($(HasTbody[0].rows[j].children[k]).find('input,select,textarea')[0]).val();
                                        }
                                    }

                                }
                                else {
                                    //
                                    var tag = $(HasTbody[0].rows[j].children[k]).find('input')[2].dataset.img;
                                }
                            }
                            var IdNamePair = {
                                ID: parseInt($($($('#newMasterDiv' + i).find('table#tblNewMasterGenerator')[0].rows[0].children[k]).find('.FieldId')).val()),
                                Name: $($($('#newMasterDiv' + i).find('table#tblNewMasterGenerator')[0].rows[0].children[k]).find('.FieldName')).val(),
                                Tag: tag

                            };

                            arrFields.push(IdNamePair);
                            if ($(HasTbody[0].rows[j].children[k]).find('input').length == '3' && !$($(HasTbody[0].rows[j].children[k]).find('input')).hasClass('clstxtDatePicker')) {

                                var IdNamePair1 = {
                                    ID: parseInt($($(HasTbody[0].rows[j].children[k]).find('input')[1])[0].dataset.fieldid),
                                    Name: $($(HasTbody[0].rows[j].children[k]).find('input')[1])[0].id,
                                    Tag: $($(HasTbody[0].rows[j].children[k]).find('input')[1]).val()

                                };

                                arrFields.push(IdNamePair1);
                            }
                        }

                        var dataLength = 0;
                        for (var item in arrFields) {
                            if (arrFields[item].Tag == '' || arrFields[item].Tag == undefined || (arrFields[item].Name == "iMasterId" || arrFields[item].Name == "iRowIndex")) {
                                dataLength = dataLength + 1;
                            }
                            else {
                                if ((arrFields[item].Tag.toString()).toLowerCase().indexOf("masterid") == -1) {
                                    if (arrFields[item].Tag.toString() != '' && arrFields[item].ID.toString() != "NaN") {
                                        continue;
                                    }
                                    else {
                                        dataLength = dataLength + 1;
                                    }
                                }
                                else {
                                    var jsonObj = JSON.parse(arrFields[item].Tag)
                                    if (jsonObj.MasterId == 0 || jsonObj.MasterId == NaN || jsonObj.MasterId == '') {
                                        dataLength = dataLength + 1;
                                    }
                                }
                            }
                        }
                        ////
                        var ConditionForDataExistInTable = $(HasTbody).find("tr.tableRow").length == 1 ? true : dataLength != arrFields.length;
                        if (ConditionForDataExistInTable) {
                            var myMAPIDataRow = {
                                myApiFields: arrFields
                            }
                            arrMAPIDataRow.push(myMAPIDataRow);
                        }
                        //  //

                    }
                    var BodyTable = null;
                    if (arrMAPIDataRow.length > 0) {
                        BodyTable = {
                            MAPIDataRow: arrMAPIDataRow,
                            TabName: $('#newMasterDiv' + i).attr("data-tabname")
                            // RecordMode: 0//$('#hdnRecordMode').val()
                        }
                    }
                    if (BodyTable != null) {
                        lstBodyTable.push(BodyTable);
                    }
                    var BodyData = null;
                    if (lstBodyTable.length > 0) {
                        BodyData = {
                            BodyTable: lstBodyTable,
                        }
                    }
                }
            }

            for (var tble = 0; tble < $('#hdnTabsCount').val() ; tble++) {
                if ($($('#newMasterDiv' + tble).find('#divForTblNewMasterGenerator')).find('span').hasClass('landingTreeCaption')) {
                    var masterTypeid = $('#newMasterDiv' + tble).find(".clsdivSecondsub").attr('data-mastertypeid');
                    MASTERENTRYSCREEN.getCheckedRowsinMultipleTreeTabs(tble, masterTypeid);
                    var arrMAPIDataRow = [];
                    if (checkbufferForMultipleTreeTabs != null && checkbufferForMultipleTreeTabs != undefined) {
                        for (var chkbuff = 0; (checkbufferForMultipleTreeTabs.length == '0') ? chkbuff < 1 : chkbuff < checkbufferForMultipleTreeTabs.length; chkbuff++) {
                            var arrFields = []
                            var tag = {
                                Code: "",
                                MasterId: checkbufferForMultipleTreeTabs.length == '0' ? '0' : checkbufferForMultipleTreeTabs[chkbuff],
                                Name: ""
                            }
                            var IdNamePair = {
                                ID: 0,
                                Name: $($('#newMasterDiv' + tble).find('#divForTblNewMasterGenerator')).find('span.landingTreeCaption').text().trim(),
                                Tag: JSON.stringify(tag)
                            }
                            arrFields.push(IdNamePair);

                            var myMAPIDataRow = {
                                myApiFields: arrFields
                            }
                            arrMAPIDataRow.push(myMAPIDataRow);
                        }
                    }
                    var BodyTable = null;
                    if (arrMAPIDataRow.length > 0) {
                        BodyTable = {
                            MAPIDataRow: arrMAPIDataRow,
                            TabName: $('#newMasterDiv' + tble).attr("data-tabname")
                            // RecordMode: 0//$('#hdnRecordMode').val()
                        }
                    }
                    if (BodyTable != null) {
                        lstBodyTable.push(BodyTable);
                    }
                    var BodyData = null;
                    if (lstBodyTable.length > 0) {
                        BodyData = {
                            BodyTable: lstBodyTable,
                        }
                    }

                    //var BodyTable = {
                    //    MAPIDataRow: arrMAPIDataRow,
                    //    //  RecordMode: 0//$('#hdnRecordMode').val()
                    //}

                    //lstBodyTable.push(BodyTable);

                    //var BodyData = {
                    //    BodyTable: lstBodyTable,
                    //}
                }
            }

            // //
            //debugger
            var Fields = [];
            for (var ind = 0; ind < $('#hdnTabsCount').val() ; ind++) {
                var DivId = $('#newMasterDiv' + ind);
                //if ($(DivId.find('div').length))
                DivId.find('input,select,textarea,span.clsMasterdatetime').each(function (index, element) {
                    //
                    if (!$($(this).parents('table')).hasClass('tabsTable')) {
                        //var isdefault;//= $(this).attr('data-isdefault');
                        var id = "";
                        //isdefault = ($(this).closest('table').length > 0) ? $(this).hasClass('False') : $(this).attr('data-isdefault');
                        if ($(this).attr('type') != 'hidden' && $(this).attr('type') != 'file' && ($(this).hasClass('False') || $(this).attr('data-isdefault') == 'False' || !$($(this).closest('.ruleHidden')).hasClass('clsDivHidden'))) {
                            if ($(element).is(':checkbox') == true) {
                                var tag = $(element).is(':checked') ? 1 : 0;
                            }
                            else {
                                if ($(this).hasClass('clsOptionControl')) {
                                    var ControlId = $(this).attr('id')
                                    var tag = {
                                        Code: "",
                                        MasterId: OPTIONCONTROL.getControlValue(ControlId),
                                        Name: OPTIONCONTROL.getControlText(ControlId)
                                    }
                                    var strclass = $(this).attr('class');
                                    var numberPattern = /\d+/g;
                                    id = strclass.match(numberPattern) == null ? "" : strclass.match(numberPattern);
                                    tag = (tag.MasterId != null) ? JSON.stringify(tag) : ""
                                }
                                else if ($(this).hasClass('clsDatePicker')) {
                                    //  //

                                    var tag = DATEPICKER.getDate($(this).attr('id'));
                                    var strclass = $(this).attr('class');
                                    var numberPattern = /\d+/g;
                                    //id = strclass.match(numberPattern) == null ? "" : strclass.match(numberPattern);
                                    id = (this.classList)[5] == null ? "" : (this.classList)[5];

                                }

                                else if ($(this).hasClass('clsTimePicker')) {
                                    //  //

                                    var tag = FTIMECONTROL.getTime($(this).attr('id'));
                                    var strclass = $(this).attr('class');
                                    var numberPattern = /\d+/g;
                                    id = strclass.match(numberPattern) == null ? "" : strclass.match(numberPattern);

                                }
                                else {
                                    if ($(element)[0].dataset.type == 'uploadFile' || $(element)[0].dataset.type == 'image') {
                                        // imageDataType
                                        var ctrlId = '';
                                        if ($(element)[0].dataset.type == 'image') {
                                            ctrlId = $($(element).next().next().next()).find('input')[0].id;
                                        }
                                        else {

                                            ctrlId = $($(element).next().next()).find('input')[0].id;
                                        }
                                        if ($('#' + ctrlId)[0].files.length > 0) {
                                            var tag = $('#' + ctrlId)[0].dataset.img;

                                            //var tag = base64Data[Counter];
                                            //Counter++;
                                        }
                                        else {
                                            var tag = $('#' + ctrlId)[0].dataset.img.trim();
                                            //  var tag = JSON.stringify(x);
                                        }
                                        $('#' + ctrlId).addClass('hdnfieldNameForImgDoc');
                                    }
                                    else {
                                        if ($(element).hasClass("clsMasterdatetime")) {
                                            var tag = $(element).is(":visible") ? $(element).attr("data-value") : $(element).text().trim();
                                        } else {
                                            var tag = $(element).val();
                                        }
                                    }
                                }
                            }
                            ////
                            var Field = {
                               ID: $(this).attr('data-fieldid') == undefined ? id.toString() : $(this).attr('data-fieldid'),
                                //ID: (this.classList)[5] || $(this).attr('data-fieldid') == undefined ? id.toString() : $(this).attr('data-fieldid'),
                                Name: $(this).attr('id'),
                                Tag: tag
                            }
                            if (Field.ID != "") {
                                Fields.push(Field);
                            }
                            if ($('#' + ctrlId).hasClass('hdnfieldNameForImgDoc') && Field.Tag != "") {

                                var Field = {
                                    ID: $(element).next()[0].dataset.fieldid, //$(this).attr('data-fieldid') == undefined ? id.toString() : $(this).attr('data-fieldid'),
                                    Name: $(element).next()[0].id,
                                    Tag: $(element).next().val()
                                }
                                Fields.push(Field);
                            }
                        }
                    }
                });

            }
            Fields = Fields.sort();
            var fieldsArray = [];
            for (var removeDupFields = 0; removeDupFields < Fields.length ; removeDupFields++) {
                //   //
                if ((removeDupFields + 1) != Fields.length) {
                    if (Fields[removeDupFields + 1].ID != Fields[removeDupFields].ID) {
                        fieldsArray.push(Fields[removeDupFields]);
                    }
                    else {
                        fieldsArray.push(Fields[removeDupFields]);
                        removeDupFields++;
                    }
                }
                else {
                    fieldsArray.push(Fields[removeDupFields]);
                }
            }
            var myMAPIDataRow = {
                myApiFields: fieldsArray
            }

            var myHeaderTables = {
                MAPIDataRow: myMAPIDataRow,
                //   RecordMode: 0//$('#hdnRecordMode').val()
            }
            //

            if ($('#hdnMasterTypeId').val() == '2') {
                //
                //var newarrProdAttributeDtls;
                var myProdAttributes = [];
                for (var i = 0; i < $('.clsProdAttribute').length; i++) {
                    var attrTabId = $($('.ulForTabs').find('li.liProdAttribute')[i]).find('a').attr('href');
                    var myarrProdAttributeDtls = [];
                    for (var j = 0; j < $(attrTabId).find('#tblProductAttributesBody')[0].rows.length; j++) {
                        var arrObj = {
                            AttributeNo: "0",//$($(attrTabId).find('#tblProductAttributesBody')[0].rows[j].cells[1]).find('input').val(),
                            Code: $($(attrTabId).find('#tblProductAttributesBody')[0].rows[j].cells[4]).find('input').val(),
                            MasterId: $($(attrTabId).find('#tblProductAttributesBody')[0].rows[j].cells[2]).find('input').val() == '' ? parseInt(0) : $($(attrTabId).find('#tblProductAttributesBody')[0].rows[j].cells[2]).find('input').val(),
                            Name: $($(attrTabId).find('#tblProductAttributesBody')[0].rows[j].cells[3]).find('input').val()
                        }
                        if (arrObj.Code != '' && arrObj.Name != '') {
                            myarrProdAttributeDtls.push(arrObj);
                        }
                    }
                    //newarrProdAttributeDtls = ProdAttributeDtls
                    var objProdAttributes = {
                        AttributeName: $(attrTabId).find('#id_AttributeName' + i)[0].value,
                        IsAttribute: $($(attrTabId).find('#chkProductAttribute' + $(attrTabId).attr("data-tabno"))).is(":checked") ? true : false,
                        AllowQuantity: $($(attrTabId).find('#chkAllowQuantiy' + $(attrTabId).attr("data-tabno"))).is(":checked") ? true : false,
                        myarrProdAttributeDtls: myarrProdAttributeDtls
                    } //list
                    if (objProdAttributes.AttributeName != '' && myarrProdAttributeDtls.length > 0) {
                        myProdAttributes.push(objProdAttributes);
                    }
                }
                if ($(".clsAllowQuantity:checked").length > 1) {
                    COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgAllowQuantitycanbeselectedonlyforoneAttribute", GetMasterEntryResourceMessages));
                    return false;
                }
                if ($('.clsProdAttribute').length > 0) {
                    var bHasDuplicateAttr = MASTERENTRYSCREEN.checkForDuplicateProdAttr($("#txtProdAttributeCode0"), false, true);
                    if (!bHasDuplicateAttr) {
                        return false;
                    }
                }
                var ProductAttributes = {
                    ProdAttributes: myProdAttributes
                }
            }
            //;
            var parentID = "0"; var lstTreeIds = [];
            if (($('#hdnNewMasterOCValue').val() == "True" && $("#oc_Group").length > 0) || $('#hdnGroupMandatory').val() == "true") {
                if (OPTIONCONTROL.getControlValue('oc_Group') == "0" || OPTIONCONTROL.getControlValue('oc_Group') == "" || OPTIONCONTROL.getControlValue('oc_Group') == null) {
                    parentID = parseInt($('#hdnMasterId').val()) > 0 ? $('#hdnParentId').val() : "0";
                }
                else {
                    parentID = OPTIONCONTROL.getControlValue('oc_Group');
                }
            }
            else {
                parentID = $('#hdnParentId').val();
            }
            if ($(".clsChkboxTreeControl").length > 0) {
                $(".clsChkboxTreeControl").each(function () {
                    if ($(this).is(":checked")) {
                        lstTreeIds.push($($(this).closest("label")).attr("data-treeid"));
                    }
                });
            }
            var IsCreateDiffAssetsForEachQty = false;
            if ($('#hdnMasterTypeId').val() == '601') {
                var elms = document.querySelectorAll("[id='bCreateadifferentfixedAssetforeachQty']");

                for (var i = 0; i < elms.length; i++)
                    if (elms[i].classList.contains('clsdataTypeChkBox')) {
                        if (elms[i].checked == true) {
                            IsCreateDiffAssetsForEachQty = true;
                        }
                    }
                var bResult = MASTERENTRYSCREEN.IsValidCumulativeDepreciationValidation();
                if (bResult == false) {
                    return false;
                }
            }

            var IsLeafAttribute = false;
            if (parseInt($('#hdnMasterId').val()) > 0 && $('#hdnMasterTypeId').val() == '2') {
                var nodes = document.querySelectorAll('[isattribute="True"]');
                if (nodes != null) {
                    nodes = Array.from(nodes);
                    if (nodes != null && nodes.length > 0) {
                        IsLeafAttribute = (nodes.filter(x=>x.id == parentID).length > 0);
                    }
                }
            }

           // debugger;
            var MasterApi = {
                AccountType: $('#iAccountType').val() == undefined ? null : $('#iAccountType').val(),
                Alias: $('#sAlias').val() == "" ? "0" : $('#sAlias').val(),
                AllowRevision: false,
                AlternateLanguageId: $("#hdnAltLanguageId").val(),
                bApplyChangesToAttributedProducts: false,
                BinCapacity: $('#iBinCapacity').val() == undefined ? '0' : $('#iBinCapacity').val(),
                BodyData: BodyData,
                Code: $('#sCode').val().trim(),
                CompanyId: $('#hdnCompanyId').val(),
                CreatedBy: $('#lblCreatedBy').text(),
                CreatedDate: $('#lblCreatedDate').text(),
                CreateDiffAssetsForEachQty: IsCreateDiffAssetsForEachQty,// $("#bCreateadifferentfixedAssetforeachQty").length > 0 ? $("#bCreateadifferentfixedAssetforeachQty").is(":checked") ? true : false : false,
                CreateNewRevision: CreateNewRevision,
                CreditDays: $('#iCreditDays').val() == undefined ? $('#hdnCreditDays').val() : $('#iCreditDays').val(),
                CreditLimit: $('#fCreditLimit').val() == undefined ? $('#hdnCreditLimit').val() : $('#fCreditLimit').val(),
                CurrentRevisionId: $('#hdnCurrentRevisionId').val(),
                DefaultLanguageId: '0',
                DoNotRestrict: false,
                HeaderData: myHeaderTables,
                IdSuppliedForMasters: false,
                Importing: false,
                iNoOfAssets: $("#iQuantity").val() == undefined || $("#iQuantity").val() == "" ? '0' : $("#iQuantity").val(),
                IsAttribute: parentID > 0 ? IsLeafAttribute : false,
                IsGroup: ($('#hdnIsgroup').val() == 'True' || $('#hdnIsgroup').val() == 'true') ? ($('#hdnNewMasterOCValue').val() == "True" ? false : true) : false,
                LanguageId: '0',
                LocationId: '0',
                LogId: '0',
                MasterId: $('#hdnMasterId').val(),
                MasterIdsToGroup: $('#hdnarrSelectedRow').val().split(','),
                MasterName: $('#hdnMasterEntryName').val(),
                MasterTypeId: $('#hdnMasterTypeId').val(),
                ModifiedBy: $('#lblModifiedBy').text(),
                ModifiedDate: $('#lblModifiedDate').text(),
                ModifiedUserId: $('#hdnModifiedUserId').val(),
                ModuleName: $('#hdnModuleName').val(),
                Name: $('#sName').val().trim(),
                NoOfDecimals: $("#iNoOfDecimals").val() == undefined ? "" : $("#iNoOfDecimals").val(),
                ParentId: parentID,
                ParentName: "",// $('#hdnParentName').val(),
                ProductAttributes: ProductAttributes,
                ProductMake: $("#iProductMake").val() == undefined ? "0" : $("#iProductMake").val(),// $('#hdnProductMake').val(),
                ProductType: $('#iProductType').val() == undefined ? null : $('#iProductType').val(),
                Properties: null,
                ReorderLevel: $('#fReorderLevel').val() == undefined ? '0' : $('#fReorderLevel').val(),
                RevisedBy: null,
                RevisedOn: null,
                RevisionDate: iRevisionDate == undefined ? '0' : DATEPICKER.getDate('iRevisionDate'),
                RevisionId: '-1',
                RoundingType: $("#iRoundingType").val() == undefined ? "" : $("#iRoundingType").val(),
                Status: $("#hdnStatus").val() == "" ? '0' : $("#hdnStatus").val(),
                TreeId: $('#hdnTreeId').val(),
                TreeIds: lstTreeIds,
                UserId: $('#hdnUserId').val(),
                ValuationMethod: $('#iValuationMethod').val() == undefined ? null : $('#iValuationMethod').val()
            }

            var ControlFieldId = "";
            $($("#divTabContentGenerateMaster").find('.Ftxtbox-M,.Fselect-M')).each(function () {
                //debugger
                var FieldName = document.getElementById($(this).attr("id"));
                var datatype = 0;
                if (FieldName != null && FieldName != undefined) {
                    datatype = FieldName.getAttribute('data-masterdatatype');
                }
                //@number type fields
                if (datatype == 1 || datatype == 6 || datatype == 13 || datatype == 16) {
                    var eleValue = FieldName.value;
                    if (((FCommon.String.isNullOrEmpty(eleValue, true) == true) || eleValue == 0) && !$(this).closest(".ruleHidden").hasClass("clsDivHidden") && $(this).closest(".ruleHidden").css('display') != 'none' && $(this).closest(".ruleHidden").css('display') != undefined) {
                        ControlFieldId = MASTERENTRYSCREEN.ValidateMandatroyFields($(this));
                        return false;
                    }
                }
                else {
                    if ((FCommon.String.isNullOrEmpty($(this).val(), true) == true) && !$(this).closest(".ruleHidden").hasClass("clsDivHidden") && $(this).closest(".ruleHidden").css('display') != 'none' && $(this).closest(".ruleHidden").css('display') != undefined) {
                        ControlFieldId = MASTERENTRYSCREEN.ValidateMandatroyFields($(this));
                        return false;
                    }
                }

                //@old code moved it to a function.
                //if ((FCommon.String.isNullOrEmpty($(this).val(), true) == true) && !$(this).closest(".ruleHidden").hasClass("clsDivHidden") && $(this).closest(".ruleHidden").css('display') != 'none' && $(this).closest(".ruleHidden").css('display') != undefined) {

                //    MASTERENTRYSCREEN.ValidateMandatroyFields($(this));

                //    ControlFieldId = $(this).attr("id");
                //    var tabNo = $($(this).closest('.tab-pane')).attr('data-tabno');
                //    $("#divBtnGroup" + tabNo).trigger("click");
                //    $('.tab-pane').each(function () {
                //        if ($(this).attr('id') != "Main") {
                //            $(this).removeClass("in active")
                //        }
                //    });
                //    $($(this).closest('.tab-pane')).addClass("in active");
                //    var TabName = $("#divBtnGroup" + tabNo).find('a').html();

                //    if ($("#divBtnGroup" + tabNo).closest('ul').length > 0) {//check for ul for tabsif any tab is present
                //        if ($("#divBtnGroup" + tabNo).closest('ul').css('display') == 'none' && TabName == 'General')//check for tab general if hidden
                //        {
                //            TabName = '';//making it empty for message display purpose.
                //        }
                //    }

                //    var ControlFieldName = $($($(this).closest(".ruleHidden")).find(".divlblControlName")).find('a').html().trim();
                //    if (TabName != undefined && TabName.length > 0) {
                //        COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgInTab", GetMasterEntryResourceMessages) + " :" + TabName + " ---> " + ControlFieldName + " " + MASTERENTRYSCREEN.getResourceValue("msgFieldisRequired", GetMasterEntryResourceMessages));
                //    } else if (TabName.length == 0) {
                //        COMMON.prototype.showMessage(ControlFieldName + " " + MASTERENTRYSCREEN.getResourceValue("msgFieldisRequired", GetMasterEntryResourceMessages));
                //    }
                //    // alert(result.data[0]);
                //    $("#" + ControlFieldId).focus();
                //    return false;
                //}
            });
            if (ControlFieldId != "") {
                GLOBAL.LoadingEnd();
                return false;
            }
            if (MasterApi.NoOfDecimals == "0") {
                COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgInTab", GetMasterEntryResourceMessages) + " :" + MASTERENTRYSCREEN.getResourceValue("General", GetMasterEntryResourceMessages) + " ---> " + MASTERENTRYSCREEN.getResourceValue("gdNoOfDecimals", GetMasterEntryResourceMessages) + " " + MASTERENTRYSCREEN.getResourceValue("msgFieldGreaterThanZero", GetMasterEntryResourceMessages));
                //alert(' In Tab : General --> No of decimals Should be greater than Zero');
                GLOBAL.LoadingEnd();
                return false;
            }
            else if (parseInt(MasterApi.NoOfDecimals) > parseInt(255)) {
                COMMON.prototype.showMessage('Please enter value between (0-255)');
                GLOBAL.LoadingEnd();
                return false;
            }
            //@beforsave rules evaluation starts
            if ($('.clsBeforeSave').length > 0) {
                $('.clsBeforeSave').each(function () {
                    //
                    MASTERENTRYSCREEN.getControlRules($(this), 'BeforeSave');
                });
            }
            //@beforsave rules evaluation ends


            if (!MASTERENTRYSCREEN.CheckTabPageExternalModuleBeforeSave(MasterApi)) {
                GLOBAL.LoadingEnd();
                return false;
            }
            //@added this block to evaluate  reg expression for fields if user is saving via tabbing and saving via enter key
            var elements = document.getElementsByClassName("clsHasRegExpression");
            for (var i = 0, len = elements.length; i < len; i++) {

                var elemntId = elements[i].id;
                var IsHidden = ($(document.getElementById(elemntId)).closest('.clsDivHidden').length > 0 || $(document.getElementById(elemntId)).closest('.ruleHidden').css('display') == 'none') ? true : false;
                if (elemntId != null && elemntId != undefined && !IsHidden) {
                    var IsMandatory = (document.getElementById(elemntId).classList.contains('Ftxtbox-M') || document.getElementById(elemntId).classList.contains('Fselect-M')) ? true : false;
                    if (IsMandatory) {
                        var nameRegex = $("#" + elemntId).attr("data-regularexpression");
                        if (nameRegex != "0") {
                            var forEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            var regExpress = new RegExp(elemntId == "sEMail" ? forEmail : nameRegex);
                            var controlValue = $("#" + elemntId).val();
                            var ErrorMessage = $("#" + elemntId).attr("data-errormessage");
                            if (!regExpress.test(controlValue)) {
                                COMMON.prototype.showMessage(ErrorMessage);
                                $("#" + elemntId).val("");
                                //e.stopImmediatePropagation();
                                //   $($(this).closest('.ruleHidden').next()).find("input,select").focus();
                                return false;
                            }
                        }
                    }
                }
            }
            //@ends
            //added this to set charactercasing for code/name fields when opening from trans screen.
            var ele = document.getElementById('sCode');
            if (ele != null && ele != undefined) {
                MASTERENTRYSCREEN.SetCharacterCasingOnSave(ele, MasterApi);
                if (MasterApi != null && MasterApi != undefined) {
                    MasterApi.Code = ele.value;
                }
            }
            ele = document.getElementById('sName');
            if (ele != null && ele != undefined) {
                MASTERENTRYSCREEN.SetCharacterCasingOnSave(ele);
                if (MasterApi != null && MasterApi != undefined) {
                    MasterApi.Name = ele.value;
                }
            }
            //@ends

            var IntegrationRows = [];
            if ($('#hdnMasterTypeId').val() == 1 && ($("#iIntegrationType").val() == 1 || $("#iIntegrationType").val() == 2))
            {
                var msg = '';
                if ($("#iAccountType").val() == 2)
                {
                    msg=MASTERENTRYSCREEN.FluxPayAndIciciValidation(IntegrationRows);
                }
                else if($("#iAccountType").val() == 6)
                {
                    if (lstBodyTable.filter(x=>x.TabName == 'Integration').length > 0) {
                        IntegrationRows = lstBodyTable.filter(x=>x.TabName == 'Integration')[0];
                    }
                    msg = MASTERENTRYSCREEN.FluxPayAndIciciValidation(IntegrationRows);
                }
                if (msg.length > 0) {
                    COMMON.prototype.showMessage(msg);
                    return;
                }
            }
            var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("onMasterSaveClick", "GenerateMaster", "Masters"), true, { objMasterAPI: MasterApi, myBodyTable: lstBodyTable, objHeaderTables: myHeaderTables, objmyProdAttributes: myProdAttributes });
            localStorage.setItem("masterSaveResult", JSON.stringify(result));
           
            if (result.data[0] == "") {

                if ($('#hdnMasterTypeId').val() == 1 && ($("#iAccountType").val() == 6 || $("#iAccountType").val() == 2)) {
                    if ($("#iIntegrationType").val() == 1 || $("#iIntegrationType").val() == 2)//icici or fluxpay
                    {
                        MASTERENTRYSCREEN.CallFluxPaySave(IntegrationRows, result.data[1]);
                    }
                }
                $($(document).find("#GenerateNewMasterModel iframe")).each(function () {
                    if ($.isFunction($(this)[0].contentWindow.SaveMasterExternalTab)) {
                        $(this)[0].contentWindow.SaveMasterExternalTab(result.data[1]);
                    }
                });
                var bModuleEnabled = undefined;
                var ExtModCustomData = {};
                ExtModCustomData.ExtModEvent = EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE;
                ExtModCustomData.Data = [];
                ExtModCustomData.Data.push(result.data[1]);
                var iCount = MastersExternalModule.callExternalModule(EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
                //var bModuleEnabled = CheckIfExternalModuleEnable(EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE);
                if (iCount > 0) {
                    return;
                }

                //node js ajax call

                //$.ajax({
                //    url: 'http://localhost:8080/user',' },
                //    success: function (dat
                //    type: 'Post',
                //    datatype: 'JSON',
                //    contentType: "text/plain;application/json; charset=utf-8",
                //    data: { "sName": 'mycontenta) {

                //        if (data != null) {
                //            if (data.length > 0) {
                //                alert('called');
                //            }

                //        }
                //        else {
                //            //alert(data);
                //            return false;
                //        }
                //    }, error: function (data) {

                //    }
                //});

                //node call


                if (bModuleEnabled) {
                    //FExternalModule.CallWrapperJsForExternalModule(bModuleEnabled, "", newMasterForOC);
                    FWrapper.openPopup(bModuleEnabled, "MASTERENTRYSCREEN.MasterSaveAfterEvent_EM(" + newMasterForOC + ")");
                } else {
                    MASTERENTRYSCREEN.MasterSaveAfterEvent_EM(newMasterForOC);
                }
            } else {
                MASTERENTRYSCREEN.MasterSaveAfterEvent_EM(newMasterForOC);
            }


        }
        catch (ex) {
            alert("Exception - MasterSaveBeforeEvent_EM " + ex.message);
        }
    },
    CallFluxPaySave:function(datarow,recordid)
    {
        debugger
        var rows =[] ;
        if (datarow != null && datarow.MAPIDataRow != null && datarow.MAPIDataRow.length > 0)
        {
            rows = datarow.MAPIDataRow;
        }

        var iAccType = $("#iAccountType").val();
        var iIntType = document.getElementById('iIntegrationType').value;
        var sCode = document.getElementById('sCode').value;
        var sName = document.getElementById('sName').value;
        var isEnabled = document.getElementById('benabled').checked == true ? 'YES' : 'NO';
        var masterid = recordid;
        if(iAccType==2)//bank
        {
           
            var defCur = MASTERENTRYSCREEN.GetMandatoryVal('iDefaultCurrency', 'sCode');
            if (defCur.length == 0) {
             defCur = OPTIONCONTROL.getControlText('iDefaultCurrency');
            }
            var bankcode = document.getElementById('sbnkCode').value;
            var ibanNo = document.getElementById('siban').value;
            var accNo = document.getElementById('sacctNo').value;
            var isPrimary = document.getElementById('bprimary').checked == true ? 'YES' : 'NO';
            
            if (defCur.length > 0 && bankcode.length > 0 && ibanNo.length > 0 && accNo.length > 0 && isPrimary.length > 0) {
                var CorpAcc = { code: sCode, acctCcy: defCur, bnkCode: bankcode, iBan: ibanNo, acctNo: accNo, primary: isPrimary, enabled: isEnabled, BankId: masterid };
                var MasterData = { IntgType: iIntType, AccountType: iAccType, CorpAccMaster: CorpAcc };
                FluxMaster.FluxMasterSave(MasterData, "MASTERENTRYSCREEN.CallFluxPaySave_Success");
            }
        }
        else if (iAccType == 6)
        {
            var docAuth = document.getElementById('sdocAuth').value;
            var docid = document.getElementById('docId').value;
            var email = document.getElementById('scnctEmail').value;
            var mobile = document.getElementById('scnctMobile').value;

            var lstGrid = [];
            
            if (rows!=null && rows!=undefined && rows.length > 0)
            {
                for (var i = 0; i < rows.length; i++) {
                    var myApiFields = rows[i].myApiFields;
                    var AccObj = {};
                    if (myApiFields.filter(x=>x.Name == 'sgcode').length > 0)
                    {
                        AccObj.code=  myApiFields.filter(x=>x.Name == 'sgcode')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgacctCcy').length > 0) {
                        AccObj.acctCcy = myApiFields.filter(x=>x.Name == 'sgacctCcy')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgbnkCode').length > 0) {
                        AccObj.bnkCode = myApiFields.filter(x=>x.Name == 'sgbnkCode')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgiban').length > 0) {
                        AccObj.iBan = myApiFields.filter(x=>x.Name == 'sgiban')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgacctNo').length > 0) {
                        AccObj.acctNo = myApiFields.filter(x=>x.Name == 'sgacctNo')[0].Tag;
                    }
                   if (myApiFields.filter(x=>x.Name == 'bgprimary').length > 0) {
                        AccObj.primary = myApiFields.filter(x=>x.Name == 'bgprimary')[0].Tag;
                    }
                   if (myApiFields.filter(x=>x.Name == 'bgenabled').length > 0) {
                        AccObj.enabled = myApiFields.filter(x=>x.Name == 'bgenabled')[0].Tag;
                   }
                   if (AccObj.code != null && AccObj.code.length > 0 && AccObj.acctCcy != null && AccObj.acctCcy.length > 0 && AccObj.bnkCode != null && AccObj.bnkCode.length > 0
                       && AccObj.iBan != null && AccObj.iBan.length > 0 && AccObj.acctNo != null && AccObj.acctNo.length > 0) {
                       lstGrid.push(AccObj);
                   }
                }
                if (docAuth.length > 0 && docid.length > 0 && email.length > 0 && mobile.length > 0) {
                    var BenefMaster = { code: sCode, name: sName, docAuth: docAuth, docId: docid, cnctEmail: email, cnctMobile: mobile, enabled: isEnabled, VendorId: masterid, lstAccount: lstGrid };
                    var MasterData = { IntgType: iIntType, AccountType: iAccType, benefMaster: BenefMaster };
                    FluxMaster.FluxMasterSave(MasterData, "MASTERENTRYSCREEN.CallFluxPaySave_Success");
                }
                
            }
            
        }
    },
    CallFluxPaySave_Success:function(flag,data)
    {
        debugger
        if (flag != null) {
            var data = JSON.parse(flag);
            if (data != null) {
                if (data.success == 0) {
                    COMMON.prototype.showMessage("FluxPay : " + data.message);
                }
            }
        }
    },
    FluxPayAndIciciValidation:function(datarow)
    {
        var validationmsg = '';
        var type = '';
        var rows=[];
        if (datarow != null && datarow.MAPIDataRow != null && datarow.MAPIDataRow.length > 0) {
            rows = datarow.MAPIDataRow;
        }
        var iAccType = $("#iAccountType").val();
        var iIntType = document.getElementById('iIntegrationType').value;
        if (iIntType == 1)
        {
            type = 'Icici';
        }
        else if (iIntType == 2)
        {
            type = 'Fluxpay';
        }
        if (iAccType == 2)
        {
            var defCur = OPTIONCONTROL.getControlText('iDefaultCurrency');
            var bankcode = document.getElementById('sbnkCode').value;
            var ibanNo = document.getElementById('siban').value;
            var accNo = document.getElementById('sacctNo').value;
            var isPrimary = document.getElementById('bprimary').checked == true ? 'YES' : 'NO';
            if (defCur == null || defCur.length <= 0)
            {
                validationmsg = 'Default currency can not be empty for ' + type;
            }
            else if (bankcode == null || bankcode.length <= 0)
            {
                validationmsg = 'SWIFT Code/BIC of Bank can not be empty for ' + type;
            }
            else if (ibanNo == null || ibanNo.length <= 0) {
                validationmsg = 'IBAN number can not be empty for ' + type;
            }
            else if (accNo == null || accNo.length <= 0) {
                validationmsg = 'Account Number can not be empty for ' + type;
            }
            return validationmsg;
        }
        else if(iAccType==6)//vendor
        {
            var docAuth = document.getElementById('sdocAuth').value;
            var docid = document.getElementById('docId').value;
            var email = document.getElementById('scnctEmail').value;
            var mobile = document.getElementById('scnctMobile').value;
            if (docAuth == null || docAuth.length <= 0) {
                validationmsg = 'Issuing Authority can not be empty for ' + type;
            }
            else if (docid == null || docid.length <= 0) {
                validationmsg = 'Identification Doc No/ License No can not be empty for ' + type;
            }
            else if (email == null || email.length <= 0) {
                validationmsg = 'Beneficiary Email can not be empty for ' + type;
            }
            else if (mobile == null || mobile.length <= 0) {
                validationmsg = 'Beneficiary Mobile can not be empty for ' + type;
            }

            var lstGrid = [];
            if (rows.length <= 0)
            {
                validationmsg = 'Body details  can not be left empty for ' + type;
            }
            else if (rows.length > 0) {
                for (var i = 0; i < rows.length; i++) {
                    var myApiFields = rows[i].myApiFields;
                    var AccObj = {};
                    if (myApiFields.filter(x=>x.Name == 'sgcode').length > 0) {
                        AccObj.code = myApiFields.filter(x=>x.Name == 'sgcode')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgacctCcy').length > 0) {
                        AccObj.acctCcy = myApiFields.filter(x=>x.Name == 'sgacctCcy')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgbnkCode').length > 0) {
                        AccObj.bnkCode = myApiFields.filter(x=>x.Name == 'sgbnkCode')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgiban').length > 0) {
                        AccObj.iBan = myApiFields.filter(x=>x.Name == 'sgiban')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'sgacctNo').length > 0) {
                        AccObj.acctNo = myApiFields.filter(x=>x.Name == 'sgacctNo')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'bgprimary').length > 0) {
                        AccObj.primary = myApiFields.filter(x=>x.Name == 'bgprimary')[0].Tag;
                    }
                    if (myApiFields.filter(x=>x.Name == 'bgenabled').length > 0) {
                        AccObj.enabled = myApiFields.filter(x=>x.Name == 'bgenabled')[0].Tag;
                    }
                    if (AccObj.code != null && AccObj.code.length > 0 && AccObj.acctCcy != null && AccObj.acctCcy.length > 0 && AccObj.bnkCode != null && AccObj.bnkCode.length > 0
                        && AccObj.iBan != null && AccObj.iBan.length > 0 && AccObj.acctNo != null && AccObj.acctNo.length > 0) {
                        lstGrid.push(AccObj);
                    }
                    if (lstGrid.length == 0)
                    {
                        validationmsg = "Please enter all body details colum for " + type + 'at row number ' + (i+1);
                    }
                }
               
               
            }
            return validationmsg;
        }

    },
    GetMandatoryVal:function(optCtrlId,fieldName)
    {
        var values = OPTIONCONTROL.getMandatoryFields(optCtrlId);
        var result = '';
        if (values.length > 0)
        {
            var arrFields = values.split(',');
            if(arrFields.length>0)
            {
                if(arrFields.filter(x=>x == fieldName).length>0)
                {
                    var field = arrFields.filter(x=>x == fieldName)[0];
                    result= OPTIONCONTROL.getControlValue(optCtrlId, field);

                }
            }
        }
        return result;
    },
    CheckTabPageExternalModuleBeforeSave: function (MasterApi) {
        //debugger
        var bSuccess = true;
        $($(document).find("#GenerateNewMasterModel iframe")).each(function () {
            if ($.isFunction($(this)[0].contentWindow.BeforeSaveMasterExternalTab)) {
                bSuccess = $(this)[0].contentWindow.BeforeSaveMasterExternalTab(MasterApi);
            }
        });
        return bSuccess;
    },
    CheckTabPageExternalOnAccountTypeChange: function (AccntProdValue) {
        $($(document).find("#GenerateNewMasterModel iframe")).each(function () {
            if ($.isFunction($(this)[0].contentWindow.MasterAccountProductTypeChange)) {
                $(this)[0].contentWindow.MasterAccountProductTypeChange(AccntProdValue);
            }
        });
    },
    FluxPayAndIciciHandle:function(AccountType,bOnLoad)
    {
        debugger
        var style = '';
     
        if (parseInt(AccountType)==2)//bank
        {
            MASTERENTRYSCREEN.HideShowField('iIntegrationType', true);
            MASTERENTRYSCREEN.HideShowField('sbnkCode', true);//display
            MASTERENTRYSCREEN.HideShowField('siban', true);
            MASTERENTRYSCREEN.HideShowField('sacctNo', true);
            MASTERENTRYSCREEN.HideShowField('bprimary', true);
            MASTERENTRYSCREEN.HideShowField('benabled', true);

            MASTERENTRYSCREEN.HideShowField('sdocAuth', false);//none
            MASTERENTRYSCREEN.HideShowField('docId', false);
            MASTERENTRYSCREEN.HideShowField('scnctEmail',false);
            MASTERENTRYSCREEN.HideShowField('scnctMobile', false);
            

            var element = document.querySelectorAll('li[data-tabname="' + 'Integration' + '"]');
            if (element != null && element.length > 0) {
                var divid=$(document.querySelectorAll('li[data-tabname="' + 'Integration' + '"]')[0]).find('a')[0].id;
                var url = $('#' + divid)[0].href;
                var id = url.substring(url.indexOf('#'), url.length);
                $($(id).find('table')[0]).css('display', 'none');
                element[0].style.display = 'block';
                if (bOnLoad == false) {
                    MASTERENTRYSCREEN.ResetIntegrationFields(id);
                }
            }

        }
        else if (parseInt(AccountType) == 6) {
            MASTERENTRYSCREEN.HideShowField('sbnkCode', false);
            MASTERENTRYSCREEN.HideShowField('siban', false);
            MASTERENTRYSCREEN.HideShowField('sacctNo', false);
            MASTERENTRYSCREEN.HideShowField('bprimary', false);

            MASTERENTRYSCREEN.HideShowField('iIntegrationType', true);
            MASTERENTRYSCREEN.HideShowField('benabled', true);
            MASTERENTRYSCREEN.HideShowField('sdocAuth', true);
            MASTERENTRYSCREEN.HideShowField('docId', true);
            MASTERENTRYSCREEN.HideShowField('scnctEmail', true);
            MASTERENTRYSCREEN.HideShowField('scnctMobile', true);


            var element = document.querySelectorAll('li[data-tabname="' + 'Integration' + '"]');
            if (element != null && element.length > 0) {
                var divid = $(document.querySelectorAll('li[data-tabname="' + 'Integration' + '"]')[0]).find('a')[0].id;
                var url = $('#' + divid)[0].href;
                var id= url.substring(url.indexOf('#'), url.length);
                $($(id).find('table')[0]).css('display', 'block');
                element[0].style.display = 'block';

            }

        }
        else
        {

            MASTERENTRYSCREEN.HideShowField('iIntegrationType', false)
            MASTERENTRYSCREEN.HideShowField('sbnkCode', false);//
            MASTERENTRYSCREEN.HideShowField('siban', false);
            MASTERENTRYSCREEN.HideShowField('sacctNo', false);
            MASTERENTRYSCREEN.HideShowField('bprimary', false);
            MASTERENTRYSCREEN.HideShowField('benabled', false);


            MASTERENTRYSCREEN.HideShowField('sdocAuth', false);//
            MASTERENTRYSCREEN.HideShowField('docId', false);
            MASTERENTRYSCREEN.HideShowField('scnctEmail', false);
            MASTERENTRYSCREEN.HideShowField('scnctMobile', false);
            
            var element = document.querySelectorAll('li[data-tabname="' + 'Integration' + '"]');
            if (element != null && element.length > 0) {
                var divid = $(document.querySelectorAll('li[data-tabname="' + 'Integration' + '"]')[0]).find('a')[0].id;
                element[0].style.display = 'none';
                var url = $('#' + divid)[0].href;
                var id = url.substring(url.indexOf('#'), url.length);
                if (bOnLoad == false) {
                    MASTERENTRYSCREEN.ResetIntegrationFields(id);
                }
            }

        }

    },
    HideShowField:function(fieldname,displaybit)
    {
        var style = '';
        if (displaybit) {
            style = 'block';
        }
        else
        {
            style = 'none';
        }
        var FieldEle = document.getElementById(fieldname);
        if (FieldEle != null) {
            FieldEle.style.display = style;
            $($(FieldEle).closest('div.ruleHidden')).css('display', style);
        }
    },
    ResetIntegrationFields:function(bodyid)
    {
        
        
        var masterid= parseInt($('#hdnMasterId').val());
        if (masterid > 0) {
            var bnkcode = document.getElementById('sbnkCode').getAttribute('value');
            if (bnkcode.length > 0) {
                document.getElementById('sbnkCode').value = bnkcode;
            }
            var iban = document.getElementById('siban').getAttribute('value');
            if (iban.length > 0) {
                document.getElementById('siban').value = iban;
            }
            var acctNo = document.getElementById('sacctNo').getAttribute('value');
            if (acctNo.length > 0) {
                document.getElementById('sacctNo').value = acctNo;
            }
            var primary = document.getElementById('bprimary').getAttribute('checked');
            if (primary.length > 0 && primary == 'checked') {
                document.getElementById('bprimary').checked = true;
            }
            var docauth = document.getElementById('sdocAuth').getAttribute('value');
            if (docauth.length > 0) {
                document.getElementById('sdocAuth').value = docauth;
            }
            var docid = document.getElementById('docId').getAttribute('value');
            if (docid.length > 0) {
                document.getElementById('docId').value = docid;
            }
            var Email = document.getElementById('scnctEmail').getAttribute('value');
            if (Email.length > 0) {
                document.getElementById('scnctEmail').value = Email;
            }
            var Mobile = document.getElementById('scnctMobile').getAttribute('value');
            if (Mobile.length > 0) {
                document.getElementById('scnctMobile').value = Mobile;
            }
            var enable = document.getElementById('benabled').getAttribute('checked');
            if (enable.length > 0 && enable == 'checked') {
                document.getElementById('benabled').checked = true;
            }
        }
        else {
            document.getElementById('iIntegrationType').value = 0;
            document.getElementById('sbnkCode').value = '';
            document.getElementById('siban').value = '';
            document.getElementById('sacctNo').value = '';
            document.getElementById('siban').value = '';
            document.getElementById('bprimary').checked = false;
            document.getElementById('sdocAuth').value = '';
            document.getElementById('docId').value = '';
            document.getElementById('scnctEmail').value = '';
            document.getElementById('scnctMobile').value = '';
            document.getElementById('benabled').checked = false;

            $($(bodyid).find('table tbody')[0]).children('tr:not(:first)').remove();

            $(bodyid).find('table tr td div input').each(function () {

                var inputid = $(this)[0].id;
                if (inputid != null && inputid.length > 0 && !inputid.startsWith('iMasterId') && !inputid.startsWith('iRowIndex')) {
                    if ($(this).attr('type') == 'checkbox') {
                        $(this).prop('checked', false);
                    } else if ($(this).attr('type') == 'text') {
                        $(this).val('');
                    }
                }


            })
        }
      
    },
    MasterSaveAfterEvent_EM: function (newMasterForOC) {

        try {

            for (var i = 0; i < GLOBAL.GlobalCacheArrayForMasters.length; i++) {
                if (GLOBAL.GlobalCacheArrayForMasters[i].MasterTypeId == parseInt($("#hdnMasterTypeId").val() + $("#companyId").val()) && GLOBAL.GlobalCacheArrayForMasters[i].bReport == true) {
                    GLOBAL.GlobalCacheArrayForMasters.splice(i, 1);
                    break;
                }
            }

            var MasterTypeId = parseInt($("#hdnMasterTypeId").val());
            var result = JSON.parse(localStorage.getItem("masterSaveResult"));
            if (result.data[0] == '' && newMasterForOC == undefined && $('#hdnNotFromMenu').val() == "True") {
                $('.btnGenerateMasterclose').attr('data-reopen', $('#hdnButtonClickName').val());
                if (result.data.length > 2 && result.data[2] != null && result.data[2] == true && parseInt($("#hdnMasterTypeId").val()) == 2) {
                    $('.btnGenerateMasterclose').attr('data-AttrSaved', "true");
                }
                if ($('#hdnButtonClickName').val() == 'btnMasterEdit') {
                    COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgUpdatedSuccessfully", GetMasterEntryResourceMessages));
                } else {
                    COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgSavedSuccessfully", GetMasterEntryResourceMessages));
                }
                GLOBAL.LoadingEnd();
                $('.btnGenerateMasterclose').trigger('click');
            }
            else if ((newMasterForOC == true || newMasterForOC == "true") && result.data[0] == "") {
                debugger
                GLOBAL.LoadingEnd();
                getMasterpopupData();
                var fnCallBackResult = $("#div_newMasterForOC").attr("data-callbackfunction");
                var sCustomData = $("#div_newMasterForOC").attr("data-customdata");
                if (fnCallBackResult != undefined && (MasterPopUps != null && MasterPopUps.filter(x=>x.ID == 0).length == 0)) {
                    sCustomData = sCustomData == undefined ? "" : sCustomData;
                    var MasterIds = [];
                    if (MasterTypeId == 601) {
                        if (result.data[3] != null && result.data[3].length>0) {
                            MasterIds = result.data[3];
                        }
                        if (result.data[1] != null) {
                            MasterIds.push(result.data[1]);
                        }
                        eval(fnCallBackResult)(MasterIds, sCustomData);
                    }
                    else {
                        MasterIds.push(result.data[1]);
                        eval(fnCallBackResult)(MasterIds, sCustomData);
                    }
                }
                //    fnCallBackResult = ;
            }
            else if ($('#hdnNotFromMenu').val() == "False") {
                GLOBAL.gotoHomePage();
            }
            else {
                GLOBAL.LoadingEnd();
                COMMON.prototype.showMessage(result.data[0]);
            }
        }
        catch (ex) {
            alert("Exception - MasterSaveAfterEvent_EM " + ex.message);
        }
    },
    onMasterSaveClick: function (ele, newMasterForOC) {
        debugger
        try {
            GLOBAL.LoadingStart();
            //if ($('.clsBeforeSave').length > 0) {
            //    $('.clsBeforeSave').each(function () {
            //        //
            //        MASTERENTRYSCREEN.getControlRules($(this), 'BeforeSave');
            //    });
            //}

            //@old code for calling external module --commentted on 9th june 2020
            //var bModuleEnabled = CheckIfExternalModuleEnable(EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE);
            //if (bModuleEnabled == true)//if any external module is attached with js or methods dont continue here ,wait for the response
            //{
            //    return;
            //}
            ////  newMasterForOC = newMasterForOC == undefined ? "undefined" : newMasterForOC;
            //if (bModuleEnabled) {
            //    //FExternalModule.CallWrapperJsForExternalModule(bModuleEnabled, "", newMasterForOC);
            //    FWrapper.openPopup(bModuleEnabled, "MASTERENTRYSCREEN.MasterSaveBeforeEvent_EM(" + newMasterForOC + ")");
            //    GLOBAL.LoadingEnd();
            //}
            //else {
            //    MASTERENTRYSCREEN.MasterSaveBeforeEvent_EM(newMasterForOC);
            //    GLOBAL.LoadingEnd();
            //}
            //@ends

            var ExtModCustomData = {};
            ExtModCustomData.ExtModEvent = EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE;
            ExtModCustomData.Data = [];
            ExtModCustomData.Data.push(parseInt($('#hdnMasterId').val()));
            var iCount = MastersExternalModule.callExternalModule(EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
            if (iCount == 0)//did not find any external module.
            {
                MASTERENTRYSCREEN.MasterSaveBeforeEvent_EM(newMasterForOC);
                GLOBAL.LoadingEnd();
            }
            else {
                return;
            }

        }
        catch (ex) {
            alert("Exception - onMasterSaveClick " + ex.message);
        }
        //result.lValue, result.sValue, result.data
    },
    startFocusOut: function () {
        $(document).on("click", function () {
            $(".clsContextMenu").hide(500);
        });
    },
    AddDynamicRow: function (RowIndexToBeInserted) {
        //debugger
        tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var c = $($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).children(':last')).clone();

        c.find('td,input,span').each(function () {

            id = v = $(this).prop('id');
            if (id != undefined) {
                var tlength = $(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody').children().length;
                v = tlength
                ++v;
                id = id.replace(/\d+/g, v);
                $(this).prop('id', id);
                d = v;
            }
        });

        //
        r = c.find('tr').text();
        // t = c.find('td:first').text()
        var tlength = $(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody').children().length;
        t = tlength;
        ++t;
        c.find('td:first')[0].innerHTML = t;
        if (parseInt(RowIndexToBeInserted) > 0) {
            $($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr').eq(parseInt(RowIndexToBeInserted) - 1).before(c);
            $($($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr')[parseInt(RowIndexToBeInserted) - 1]).find('input,select')).each(function () {
                //
                $(this).attr({ value: '', 'data-value': '0', 'data-text': '', 'data-id': '', 'data-img': '' })
                $(this).val('');
                $(this).show();
                if ($(this).closest('div.ocCommonTableClass').length > 0) {
                    //
                    $(this).closest('div.ocCommonTableClass').remove();
                    $($(this).closest('div').next()).remove();
                    $($(this).closest('div')).remove();

                }
                else if ($($(this).closest('td')).find(".clsTimePicker").length > 0) {
                    $($(this).closest('td')).find(".clsTimePicker").remove();
                }

            });
        } else {
            $($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).append(c);
            $($($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).children(':last')).find('input,select')).each(function () {
                //
                $(this).attr({ value: '', 'data-value': '0', 'data-text': '', 'data-id': '', 'data-img': '' })
                $(this).val('');
                $(this).show();
                if ($(this).closest('div.ocCommonTableClass').length > 0) {
                    //
                    $(this).closest('div.ocCommonTableClass').remove();
                    $($(this).closest('div').next()).remove();
                    $($(this).closest('div')).remove();

                }
                else if ($($(this).closest('td')).find(".clsTimePicker").length > 0) {
                    $($(this).closest('td')).find(".clsTimePicker").remove();
                }

            });
        }
        $($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('.highlight')).removeClass('highlight');

    },
    optionCtrlLoaded: function (id, data, tag) {
          //debugger
        try {
            if (data != null && tag != undefined && data.length > 0) {

                if (data[0].sValue != '0' && tag.CustomData != null) { //[(id.dataset.primaryfield).toLowerCase()]

                    //$('#' + tag.CustomData.id).val(data[1].sValue);
                    //$('#' + tag.CustomData.id).attr("data-value", data[0].sValue)
                    //$('#' + tag.CustomData.id).attr("data-text", data[1].sValue)

                    //new code 
                    if (tag.CustomData.CtrlData != null && tag.CustomData.CtrlData != undefined) {

                        var fieldid = document.getElementById(tag.CustomData.id).getAttribute("data-fieldid");
                        for (var i = 0; i < tag.CustomData.CtrlData.length; i++) {
                            if (parseInt(fieldid) == tag.CustomData.CtrlData[i].ID) {
                                for (var x = 0; x < data.length; x++) {

                                    if (tag.CustomData.CtrlData[i].Tag.toString() == data[x][0].sValue) {
                                        $('#' + tag.CustomData.CtrlData[i].Name).val(data[x][1].sValue);
                                        $('#' + tag.CustomData.CtrlData[i].Name).attr("data-value", data[x][0].sValue)
                                        $('#' + tag.CustomData.CtrlData[i].Name).attr("data-text", data[x][1].sValue)
                                        $('#' + tag.CustomData.CtrlData[i].Name).attr("data-updated", "true")
                                        break;
                                    }

                                }
                            }
                            //tag.CustomData.CtrlData[i].Name
                        }
                    }
                    else {
                        $('#' + tag.CustomData.id).val(data[1].sValue);
                        $('#' + tag.CustomData.id).attr("data-value", data[0].sValue)
                        $('#' + tag.CustomData.id).attr("data-text", data[1].sValue)

                    }

                }
                //if ($("#" + id.id).hasClass("tblOptionControl")) {
                //    $("#" + id.id + "_container").css({ "position": "absolute", "top": "","left":"" });
                //}
            }
        } catch (ex) {
            alert("Exception => MasterentryScreen.optionCtrlLoaded" + ex.message);
        }
    },
    onRevisionBlur: function () {
        //
        var RevisionId = $('#txtRevision').val();
        if (RevisionId == '') {
            RevisionId = parseInt(-1);
        }
        else if (parseInt($('#txtRevision').val()) > parseInt($('#hdnCurrentRevisionId').val())) {
            $('#txtRevision').val($('#hdnCurrentRevisionId').val());
            return false;
        }
        var IsDisable = (parseInt($('#txtRevision').val()) < parseInt($('#hdnCurrentRevisionId').val())) ? true : false;
        var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("getRevisedDataOnRevisionId", "GenerateMaster", "Masters"),
            true, { iRevisionId: RevisionId }, "HTML", true, "MASTERENTRYSCREEN.Blur_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", IsDisable);
    },
    Blur_onSuccess: function (bs, data, tag) {
        //;
        if (data != '-1' && bs == true) {
            PropertiesSuccess(true, data,"EntryScreen");
            if (tag) {
                $('#btnMasterSaveClick').attr('disabled');
                $('#btnMasterSaveClick').addClass('grey');
                $('#btnMasterSaveClick').css('pointer-events', "none");
                //btnMasterRevisionSaveClick


                $('#btnMasterRevisionSaveClick').attr('disabled');
                $('#btnMasterRevisionSaveClick').addClass('grey');
                $('#btnMasterRevisionSaveClick').css('pointer-events', "none");

                $('#btnMasterRevisionDeleteClick').css('pointer-events', "none");
            }
            // $("#GenerateNewMasterModel").modal('show');
        }
        else {
            COMMON.prototype.showMessage("error")
        }
    },
    Toggle_Tabs: function (ele, evt) {
        debugger

        FCommon.UI.stopKeyProcess(evt);

        var element = ele;// $(ele).find('a');
        //var anchor = $(ele).find('a')[0];
        var aPath = ele.href;//  $(ele).find('a')[0].href;
         var togglediv = aPath.split('#')[1];

        $('#divTabContentGenerateMaster').children().removeClass('active');
        $('#divTabContentGenerateMaster').children().removeClass('show');

        $('.ulForTabs,#collapsed').children().removeClass('active');
        $('.ulForTabs,#collapsed').children().removeClass('show');

        $('.ulForTabs li').find('a').removeClass('active');
        $('.ulForTabs li').find('a').removeClass('show');

        document.getElementById(togglediv).classList.add('active');
       document.getElementById(togglediv).classList.add('show');

        $(ele).addClass('show');
        $(ele).addClass('active');

        if ($(ele).closest('li').length > 0) {
            $($(ele).closest('li')[0]).addClass('active');
        }
        let eleHeader = document.getElementById('RecordHeader');
        let MasterId = document.getElementById('hdnMasterId');
        if (eleHeader != null && MasterId != null && parseInt(MasterId.value) > 0) {
            if (ele.id != 'divBtnGroup0') {
                let MainHeading = document.getElementById('hdnMasterNameCaption').value;
                var NameVal = document.getElementById('sName').value;
                var CodeVal = document.getElementById('sCode').value;

                let finalHeading = MainHeading + '| Name (' + NameVal + ' ) | Code (' + CodeVal + ')';
                eleHeader.innerText = '';
                eleHeader.innerText = finalHeading;
            }
            else if (ele.id == 'divBtnGroup0') {
                eleHeader.innerText = '';
                eleHeader.innerText = document.getElementById('hdnMasterNameCaption').value;
            }

        }


        //if (element != null && element.length > 0) {
        //    var anchor= $(ele).find('a')[0];
        //    var aPath = $(ele).find('a')[0].href;
        //    var togglediv = aPath.split('#')[1];
            
        //    $('#divTabContentGenerateMaster').children().removeClass('active');
        //    $('#divTabContentGenerateMaster').children().removeClass('show');
                
        //    $('.ulForTabs,#collapsed').children().removeClass('active');
        //    $('.ulForTabs,#collapsed').children().removeClass('show');

        //    $('.ulForTabs li').find('a').removeClass('active');
        //    $('.ulForTabs li').find('a').removeClass('show');

        //    document.getElementById(togglediv).classList.add('active');
        //    document.getElementById(togglediv).classList.add('show');

        //    $(anchor).addClass('show');
        //    $(anchor).addClass('active');
        //}

        //$('.ulForTabs,#collapsed').children().removeClass('active').css({ "background-color": "" });
        //$(ele).closest('li').addClass('active').css({ "background-color": "white" });
        //if ($(ele).closest('li').attr('data-content') != undefined) {
        //    var divId = $(ele).closest('div').attr('href');
        //    var numberPattern = /\d+/g;
        //    var multipleTreeCounter = $(divId).find('.clsdivSecondsub')[0].id;
        //    multipleTreeCounter = multipleTreeCounter.match(numberPattern);
        //    if (multipleTreeCounter == null)
        //        multipleTreeCounter = '';
        //    else
        //        multipleTreeCounter = multipleTreeCounter.toString();

        //    //   alert(multipleTreeCounter);
        //    // COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "Landing.setHeight");
        //    // CheckAccorderanClick(multipleTreeCounter);
        //}
        //Globalele = ele;
        //if ($('#hdnMasterTypeId').val() == '2') {
        //    var siblingsCount = parseInt($('#hdnTabsCount').val()) + parseInt($('.clsProdAttribute').length)// ele.parentElement.children.length;
        //}
        //else {
        //    var siblingsCount = $('#hdnTabsCount').val() + parseInt($('.liTabExternal').length)// ele.parentElement.children.length;
        //}
        //// var tabParent = $('#newMasterDiv' + ind);
        //var eleId = ele.id;
        //for (var i = 0; i < siblingsCount; i++) {
        //    var tabId = ($("#divBtnGroup" + i)[0] == undefined) ? "" : $("#divBtnGroup" + i)[0].id;
        //    // 
        //    if (eleId != tabId && tabId != '') {
        //        var strBGColorInverse = "theme_background-color-inverse";
        //        document.getElementById(tabId).children[0].className = "btn col-xs-12 header-button-group stop-text-overflow ";
        //        $($(document.getElementById(tabId).children[0]).find('a')).addClass('theme_color').removeClass('theme_color-inverse');
        //        $($(document.getElementById(tabId)).closest("li")).addClass(strBGColorInverse);
        //    }
        //}
        //$($(ele).closest('li')).addClass(strBGColorInverse);
        //$($(ele).closest('li').find('a')).addClass('theme_color-inverse').removeClass('theme_color');


        //ele.children[0].className = "btn col-xs-12 header-button-group stop-text-overflow ";
        //$($("#lastTab").find("a")).removeClass("theme_color-inverse");
        ////$(ele.children[0]).find('a').css('color', '#34C4F9');
        //if ($(".landingTreeCaption").length > 0) {
        //    var tabId = $($(ele).closest('li')).find('a').attr('href');
        //    MASTERENTRYSCREEN.GetselectedGridData(tabId);
        //}
    },
    GetselectedGridData: function (tabId) {
        debugger
        var id = $(tabId).find('#landgridData');
        if ($(id).length > 0) {
            var row = $(id).find('tbody').find('tr');
            if (GridrowidValues.length > 0 && row[0].cells.length > 1) {
                for (var i = 0; i < row.length; i++) {
                    for (var j = 0; j <= GridrowidValues.length; j++) {

                        if (IsTreeTabExists == "True" && m_arrTreeTabsIds != null) {
                            var TreeCheckedData = m_arrTreeTabsIds.filter(x=>x.ID == tabId);
                            if (TreeCheckedData != null && TreeCheckedData != undefined && TreeCheckedData.length > 0) {
                                if (TreeCheckedData[0].Tag != null && TreeCheckedData[0].Tag != undefined && TreeCheckedData[0].Tag.includes(GridrowidValues[j])) {
                                    if (parseInt(row[i].cells[8].innerHTML.trim()) == GridrowidValues[j]) {
                                        var p = row[i].cells[7];
                                        $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).attr("checked", true);
                                        $(row[i]).addClass('textRedColor');
                                        var name = $(row[i]).find('td.tdName');
                                        $(name).addClass('textBlackColor');
                                    }
                                }
                            }
                        }
                        else {
                            if (parseInt(row[i].cells[8].innerHTML.trim()) == GridrowidValues[j]) {
                                var p = row[i].cells[7];
                                $(p.getElementsByTagName('div')[0].getElementsByClassName('chkRowCheck')).attr("checked", true);
                                $(row[i]).addClass('textRedColor');
                                var name = $(row[i]).find('td.tdName');
                                $(name).addClass('textBlackColor');
                            }
                        }
                    }

                }
            }
        }
    },
    onBtnCloneClick: function (ele) {
        //
        var ParentId = $('#hdnParentId').val();
        $('#sName,#sCode').val('');
        $('#sCode').attr('readonly', false);
        $('#hdnMasterId').val('0');
        $('#btnMasterClone').css('pointer-events', "none");
        $('#btnMasterClone').addClass('grey');
        $('#hdnButtonClickName').val('btnClone');
        $("#hdnMasterTypeId").attr("data-btransexist", "False");
        $("#hdnMasterTypeId").attr("data-IsUpdateStockbTransExist", "False");


        MASTERENTRYSCREEN.GetCopyFromDataForGrpControl(ParentId);

        var MasterTypeId = $("#hdnMasterTypeId").val();
        if (MasterTypeId == 2) {
            var iBomEle = document.getElementById("mytest");
            if (iBomEle != null && iBomEle != undefined) {
                OPTIONCONTROL.setControlValue(iBomEle, 0);
                OPTIONCONTROL.setControlText(iBomEle, "");
            }

        }

        //@need to check incremental if any for cloning as well same as focus8
        if ($('.IncrementalBehaviour').length > 0) {
            $('.IncrementalBehaviour').each(function () {
                MASTERENTRYSCREEN.getIncrementalValue(this);
            });
        }
    },
    getIncrementalValue: function (element, ControlWithIncrementalBehaviour) {
        debugger
        var group = document.getElementById("hdnIsgroup").value;
        var ControlNameWithIncrementalBehaviour = '';
        var ParentId = document.getElementById("hdnParentId").value;
        if ((group == "True" || group == true) && ParentId == 0)
            return false;
        var eleId = $(element)[0].id;
        if (element != null && element.classList.contains('FOptionControl')) {
            var IsattributePresent = document.getElementById(eleId).getAttribute('data-controlwithincrement');
            if (IsattributePresent == null || IsattributePresent == false) {
                return;
            }
        }
        else {
            var IsIncrementPresent = document.getElementById(eleId).getAttribute('data-incrementfieldname');
            if (IsIncrementPresent == null || IsIncrementPresent.length == 0) {
                return;
            }
        }
        //var IsIncrementPresent = document.getElementById(eleId).classList.contains('IncrementalBehaviour');
        //if (IsIncrementPresent == false)
        //{
        //    return;
        //}
        var FieldId = $(element)[0].dataset.fieldid;
        var FieldName = eleId;// $(element)[0].dataset.fieldname;
        var MandatoryFields = "";
        var sMandatory = '';
        var optionControlPrimaryValue = $(element)[0].dataset.type == undefined ? OPTIONCONTROL.getControlValue(eleId) : "";
        var optionControlDisplayValue = $(element)[0].dataset.type == undefined ? OPTIONCONTROL.getControlText(eleId) : ""
        var ControlType = $(element)[0].dataset.type != undefined ? $(element)[0].dataset.type : "OptionControl";
        if (ControlType == 'OptionControl') {

            MandatoryFields = OPTIONCONTROL.getMandatoryFields(eleId).split(",");
            if (MandatoryFields.length > 0) {
                var arrMandatory = {};
                for (var i = 0; i < MandatoryFields.length; i++) {
                    arrMandatory[MandatoryFields[i]] = OPTIONCONTROL.getControlValue(eleId, MandatoryFields[i]);
                }
                sMandatory = JSON.stringify(arrMandatory);
            }
            ControlNameWithIncrementalBehaviour = ControlWithIncrementalBehaviour;
            ControlWithIncrementalBehaviour = document.getElementById(ControlNameWithIncrementalBehaviour);
        }
        else {
            if (ControlWithIncrementalBehaviour != undefined) {
                ControlNameWithIncrementalBehaviour = $(ControlWithIncrementalBehaviour)[0].id;
            }
            else {
                if (eleId != null && eleId != undefined && eleId.length > 0) {
                    ControlNameWithIncrementalBehaviour = eleId;
                    ControlWithIncrementalBehaviour = $("#" + eleId);
                }
            }
        }

        //@ here if copyfromdata is set for any txtttype field and increment is defined on the field then always take copyfrom parent value not the userinput- starts
        if (eleId.length > 0 && document.getElementById(eleId) != null && document.getElementById(eleId).getAttribute('data-iscopyfromparent') == "True" &&
            document.getElementById(eleId).getAttribute('data-masterdatatype') == "0") {

            var CopyData = localStorage.getItem("CopyFromParentValues");
            if (CopyData == null || CopyData.length == 0) {
                var ParentVal = document.getElementById(eleId).getAttribute('data-CopyFromParentVal');
                if (ParentVal != null) {
                    document.getElementById(eleId).value = ParentVal;
                }
            }
            else if (CopyData != null && CopyData.length > 0) {
                var CopyfieldsndData = JSON.parse(CopyData);
                if (CopyfieldsndData != null && CopyfieldsndData.length > 0) {
                    if (CopyfieldsndData.filter(x=>x.Name == eleId).length > 0) {
                        document.getElementById(eleId).value = CopyfieldsndData.filter(x=>x.Name == eleId)[0].Tag;
                    }
                }
            }

        }
        //@ here if copyfromdata is set for any txtttype field and increment is defined on the field then always take copyfrom parent value not the userinput--ends

        //var ControlInformation = {
        //    FieldId: $(element)[0].dataset.fieldid,
        //    iMasterTypeId: $('#hdnMasterTypeId').val(),
        //    iMasterId: $('#hdnMasterId').val(),
        //    Treeid: $('#hdnTreeId').val(),
        //    FieldName: $(element)[0].dataset.fieldname,
        //    Module: $('#hdnModule').val(),
        //    sMasterName: $('#sName').val(),
        //    bEditClicked: $('#hdnButtonClickName').val == "btnMasterEdit" ? true : false,
        //    controlValue: $("#" + eleId).val(),
        //    TableName: $(element)[0].dataset.tablename,
        //    MandatoryFields: "",
        //    optionControlPrimaryValue: $(element)[0].dataset.type == undefined ? OPTIONCONTROL.getControlValue(eleId) : "",
        //    ControlType: $(element)[0].dataset.type != undefined ? $(element)[0].dataset.type : "OptionControl",
        //    ControlNameWithIncrementalBehaviour: $(ControlWithIncrementalBehaviour)[0].id,
        //} //
        //form.push(ControlInformation);
        var form = $("#NewMasterForm").serialize() + '&FieldId=' + FieldId + '&FieldName=' + FieldName + '&MandatoryFields=' + MandatoryFields +
            '&optionControlPrimaryValue=' + optionControlPrimaryValue + '&ControlType=' + ControlType + '&ControlNameWithIncrementalBehaviour='
            + ControlNameWithIncrementalBehaviour + '&optionControlDisplayValue=' + optionControlDisplayValue +
            '&hdnMasterTypeId=' + $("#hdnMasterTypeId").val() + '&hdnModule=' + $("#hdnModule").val() + '&hdnMasterEntryName=' + $("#hdnMasterEntryName").val();


        var Finalform = $("#NewMasterForm").serializeArray();
        Finalform.push({ name: "FieldId", value: FieldId });
        Finalform.push({ name: "FieldName", value: FieldName });
        Finalform.push({ name: "MandatoryFields", value: MandatoryFields });
        Finalform.push({ name: "optionControlPrimaryValue", value: optionControlPrimaryValue });
        Finalform.push({ name: "ControlType", value: ControlType });
        Finalform.push({ name: "ControlNameWithIncrementalBehaviour", value: ControlNameWithIncrementalBehaviour });
        Finalform.push({ name: "optionControlDisplayValue", value: optionControlDisplayValue });
        Finalform.push({ name: "hdnMasterTypeId", value: $("#hdnMasterTypeId").val() });
        Finalform.push({ name: "hdnModule", value: $("#hdnModule").val() });
        Finalform.push({ name: "hdnMasterEntryName", value: $("#hdnMasterEntryName").val() });
        //Finalform.push({ name: "hdnButtonClickName", value: $("#hdnButtonClickName").val() });
        if (Finalform.filter(x=>x.name == "hdnButtonClickName") != null && Finalform.filter(x=>x.name == "hdnButtonClickName").length == 0) {
            Finalform.push({ name: "hdnButtonClickName", value: $("#hdnButtonClickName").val() });
        }
        if (Finalform.filter(x=>x.name == "hdnMasterId") != null && Finalform.filter(x=>x.name == "hdnMasterId").length == 0) {
            Finalform.push({ name: "hdnMasterId", value: $("#hdnMasterId").val() });
        }
        if (Finalform.filter(x=>x.name == "hdnMasterTypeId") != null && Finalform.filter(x=>x.name == "hdnMasterTypeId").length == 0) {
            Finalform.push({ name: "hdnMasterTypeId", value: $("#hdnMasterTypeId").val() });
        }
        if (ControlType == "OptionControl") {
            for (var i = 0; i < MandatoryFields.length; i++) {

                Finalform.push({ name: eleId + '-' + MandatoryFields[i], value: arrMandatory[MandatoryFields[i]] });
            }
        }
        var allControls = document.querySelectorAll("[data-controlwithincrement]");
        if (allControls != null && allControls.length > 0) {
            for (var i = 0; i < allControls.length; i++) {
                if (allControls[i].id != eleId && ($('#' + allControls[i].id).attr("data-masterdatatype") == 12) || $('#' + allControls[i].id).attr("data-masterdatatype") == 14)//data-masterdatatype="12"
                {
                    MandatoryFields = OPTIONCONTROL.getMandatoryFields(allControls[i].id).split(",");
                    if (MandatoryFields.length > 0) {
                        var arrMandatory = {};
                        for (var j = 0; j < MandatoryFields.length; j++) {
                            arrMandatory[MandatoryFields[j]] = OPTIONCONTROL.getControlValue(allControls[i].id, MandatoryFields[j]);
                        }
                        for (var k = 0; k < MandatoryFields.length; k++) {

                            Finalform.push({ name: allControls[i].id + '-' + MandatoryFields[k], value: arrMandatory[MandatoryFields[k]] });
                        }

                    }

                }
            }
        }
        //Finalform.push({ name: eleId, value: sMandatory });

        //if (ControlType == 'OptionControl' && sMandatory.length>0) {
        //    form.push({ name: eleId, value: sMandatory });
        //}
        var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("getIncrementalValues", "GenerateMaster", "Masters"), true, Finalform, "JSON", true, "MASTERENTRYSCREEN.IncrementalValueSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", ControlWithIncrementalBehaviour);
    },
    IncrementalValueSuccess: function (bs, data, ControlWithIncrementalBehaviour) {
        //debugger
        if (bs == true) {
            if (data != null && data.length > 0) {
                $(ControlWithIncrementalBehaviour).val(data);
                return false;
            }
        }
        {
            COMMON.prototype.showMessage('Error');
        }
    },
    SetIncremental: function (element, IsFromTrans) {
        debugger
        var IsPickCode = document.getElementById('hdnIsPickCode').value;
        var FieldForPickCode = [];
        if (IsPickCode == "True") {
            var FieldNames = document.getElementById("sCode").getAttribute('data-incrementfieldname');
            if (FieldNames != null && FieldNames != undefined && FieldNames.length > 0) {
                FieldForPickCode = FieldNames.split(',');
            }
        }
        var ControlWithIncrementalBehaviour = $(element);
        var ControlWithIncrementalBehaviourid = '';
        if (ControlWithIncrementalBehaviour != null && ControlWithIncrementalBehaviour.length > 0)
            ControlWithIncrementalBehaviourid = ControlWithIncrementalBehaviour[0].id;
        var IncrementalBehaviourId = ControlWithIncrementalBehaviour.attr('data-incrementfieldname');
        var IsOnLoadIncrement = ControlWithIncrementalBehaviour.attr('data-IsOnLoadIncrement');
        if (IncrementalBehaviourId != '') {
            IncrementalBehaviourId = IncrementalBehaviourId.split(',');
            IncrementalBehaviourId = IncrementalBehaviourId.filter(function (n) { return n != "" });
            if (MASTERENTRYSCREEN.CheckAllElementsIdenticalInArray(IncrementalBehaviourId)) {
                if (IsFromTrans != undefined && IsFromTrans) {
                    MASTERENTRYSCREEN.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                    return;
                }

                if (IsOnLoadIncrement == "True" && $("#hdnMasterId").val() <= 0 && (ControlWithIncrementalBehaviourid != 'sCode' || IsPickCode !== 'True')) {//only attach events if there is no pickcode enabled,or any other field except scode in case of pickcode
                    MASTERENTRYSCREEN.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                }
                else {
                    if (IncrementalBehaviourId.length >= 1) {

                        MASTERENTRYSCREEN.AddIncrementEvents(element, IncrementalBehaviourId, IsPickCode, FieldForPickCode, ControlWithIncrementalBehaviour, ControlWithIncrementalBehaviourid);
                    }
                    else {
                        if (ControlWithIncrementalBehaviourid != 'sCode' || IsPickCode !== 'True') {
                            $(document).on('blur', '#' + IncrementalBehaviourId[0], function () {
                                MASTERENTRYSCREEN.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                            })
                        }
                    }
                };
            } else {
                for (var i = 0; i < IncrementalBehaviourId.length; i++) {
                    //
                    if (IncrementalBehaviourId[i] != "") {
                        var ele = document.getElementById(IncrementalBehaviourId[i]);
                        if (ele != null && ele != undefined) {
                            ele.classList.add("Ftxtbox-M");//@making all the fields which are used for any increment mandatory
                            if (ele.classList.contains('clsOptionControl')) {
                                ele.setAttribute('data-IsOcIncrement', 'True');
                                ele.setAttribute('data-ControlWithIncrement', ControlWithIncrementalBehaviourid);
                            }
                        }
                        if ((ele.id == "sCode" || FieldForPickCode.includes(ele.id)) && IsPickCode == "True") {
                            continue;//@do not bind the below function in case it is pickcode
                        }
                        $(document).on('blur', '#' + IncrementalBehaviourId[i], function () {
                            MASTERENTRYSCREEN.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                        });
                    }
                }
            }

        }
    },
    EvaluateRegExpression: function (element) {
        debugger
        var elemntId = $(element).attr("id");
        debugger
        var nameRegex = $("#" + elemntId).attr("data-regularexpression");
        if (nameRegex != "0") {
            //if (nameRegex.endsWith('/')) {
            //    nameRegex = nameRegex.replace(/\//g, '');
            //}
            var forEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            var regExpress = new RegExp(elemntId == "sEMail" ? forEmail : nameRegex);
            //;
            var controlValue = null;
            if ($("#" + elemntId).attr('data-masterdatatype') == 6) {
                controlValue = parseFloat($("#" + elemntId).val());
            }
            else {
                controlValue = $("#" + elemntId).val();
            }
            var ErrorMessage = $("#" + elemntId).attr("data-errormessage");

            var EmailIds = {};
            if (elemntId == "sEMail") {
                EmailIds = controlValue.split(';');
                if (EmailIds != null && EmailIds != undefined && EmailIds.length > 0) {
                    for (var i = 0; i < EmailIds.length; i++) {

                        if (!regExpress.test(EmailIds[i])) {
                            COMMON.prototype.showMessage(ErrorMessage);
                            $("#" + elemntId).val("");
                            return false;
                        }

                    }
                }
            }
            else {
                if (!regExpress.test(controlValue)) {
                    COMMON.prototype.showMessage(ErrorMessage);
                    $("#" + elemntId).val("");
                    return false;
                }

            }
        }
    },
    AddIncrementEvents: function (element, IncrementalBehaviourId, IsPickCode, FieldForPickCode, ControlWithIncrementalBehaviour, ControlWithIncrementalBehaviourid) {
        for (var i = 0; i < IncrementalBehaviourId.length; i++) {
            //
            if (IncrementalBehaviourId[i] != "") {
                var ele = document.getElementById(IncrementalBehaviourId[i]);
                if (ele != null && ele != undefined) {
                    ele.classList.add("Ftxtbox-M");//@making all the fields which are used for any increment mandatory
                    if (ele.classList.contains('clsOptionControl')) {
                        ele.setAttribute('data-IsOcIncrement', 'True');
                        ele.setAttribute('data-ControlWithIncrement', ControlWithIncrementalBehaviourid);
                    }
                }
                if ((ele.id == "sCode" || FieldForPickCode.includes(ele.id)) && IsPickCode == "True") {
                    continue;//@do not bind the below function in case it is pickcode
                }
                $(document).on('blur', '#' + IncrementalBehaviourId[i], function () {
                    MASTERENTRYSCREEN.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                });
            }
        }

    },
    GetPickCode: function () {
        var sCodeEle = document.getElementById('sCode');
        var ControlWithIncrementalBehaviour = $(sCodeEle);
        MASTERENTRYSCREEN.getIncrementalValue(sCodeEle, ControlWithIncrementalBehaviour);
    },
    GetVariableValue: function (objFormula, objVar, iRowIndex, objTag, iColumnIndex) {
        debugger
        var value = objVar.Var //stores variable
        var result = '';
        var elements = document.querySelectorAll('[data-variable="' + value + '"]');
        if (elements != null && elements.length > 0) {
            result = elements[0].value;
        }
        //var element = document.querySelectorAll('li[data-tabname="' + TabDataToHide[m].Name + '"]');
        return (result);
    },
    EvaluateFormula: function (ele)//setting formula class --for calling and retrieving the formula results returned by formula class
    {
        var objFormula = new FFormula();
        objFormula.m_CalType = 1;
        objFormula.fnValueNeeded = "MASTERENTRYSCREEN.GetVariableValue";//call back to return varaible value given by user at present
        var FormulaValue = ele.getAttribute('data-formula');
        var sResult = objFormula.Result(FormulaValue, true);
        ele.value = sResult;
    },
    checkIfPropertyExistInSerializedForm: function (name, form) {
        var item, i = 0;
        while (item = form[i++])
            if (item.name == name) return --i
        return -1
    },
    getNewFormArray: function (form) {
        var unique = {};
        var distinct = [];
        var expr = 'date';
        form.forEach(function (x) {
            if ($("#" + x.name).hasClass("clsdataTypeChkBox")) {
                x.value = $("#" + x.name).is(":checked")
            }
            if ($("#" + x.name).hasClass("clsOptionControl")) {
                x.value = OPTIONCONTROL.getControlValue(x.name) + ',' + OPTIONCONTROL.getControlText(x.name);
            }
            //clsOptionControl
            if (!unique[x.name]) {
                if (x.name.toLowerCase().indexOf(expr) > -1) {
                    if ($("#" + x.name).hasClass("clsDatePicker")) {
                        x.value = DATEPICKER.getDate(x.name, true);
                    }
                }
                distinct.push(x);
                unique[x.name] = true;
            }
        });
        return distinct;
    },
    getControlRules: function (ele, typeofevent, e) {
        //debugger
        console.log('getControlRules Starts: ', new Date().toLocaleString());
        var tagObject = {}; var urlObject = {};
        tagObject.typeofevent = typeofevent;
        tagObject.currentevent = e;
        tagObject.currentControlId = $(ele)[0].id;
        urlObject.InUseControldId = $(ele)[0].id;
        urlObject.RuleEvent = typeofevent;
        if ($(ele).hasClass('clsOptionControl')) {
            if (!$(ele).closest('table').prev().find('input').hasClass('clstxtOptionControl')) {
                var dataruleid = $(ele)[0].dataset.ruleid;
                //if (dataruleid == '') {
                //    dataruleid = $(ele)[0].dataset.ruleid;
                //}
            }
            else {
                var dataruleid = $(ele)[0].dataset.ruleid;
                //if (dataruleid == '') {
                //    dataruleid = $(ele)[0].dataset.ruleid;
                //}
            }

            var ruleId = dataruleid != undefined ? dataruleid : "0";
            var OCtext = OPTIONCONTROL.getControlText($(ele)[0].id) == null ? '' : OPTIONCONTROL.getControlText($(ele)[0].id);
            var OCvalue = OPTIONCONTROL.getControlValue($(ele)[0].id) == null ? 0 : OPTIONCONTROL.getControlValue($(ele)[0].id);
            var sMandatory = "";
            var mandatoryFields = OPTIONCONTROL.getMandatoryFields($(ele)[0].id).split(",");
            if (mandatoryFields.length > 0) {
                var arrMandatory = {};
                for (var i = 0; i < mandatoryFields.length; i++) {
                    arrMandatory[mandatoryFields[i]] = OPTIONCONTROL.getControlValue(ele, mandatoryFields[i]);
                }
                sMandatory = JSON.stringify(arrMandatory);
            }
            var form = $("#NewMasterForm").serializeArray();
            //form = [...new Set(form.map(item => item.name))];
            NewArrayForForm = this.getNewFormArray(form);
            form = NewArrayForForm;
            form.push({ name: 'RuleId', value: ruleId });
            tagObject.RuleId = ruleId;
            var foundIndex = this.checkIfPropertyExistInSerializedForm($(ele)[0].id, form);
            if (foundIndex != -1) {
                form.splice(foundIndex, 1);
            }
            form.push({ name: 'MasterTypeId', value: $('#hdnMasterTypeId').val() });
            form.push({ name: $(ele)[0].id, value: OCvalue + "," + OCtext });
            form.push({ name: $(ele)[0].id + "Mandatory", value: sMandatory });
            //   var form = $("#NewMasterForm").serialize() + '&RuleId=' + ruleId + '&' + $(ele)[0].id + '=' + OCtext + '&MasterTypeId=' + $('#hdnMasterTypeId').val();

        }
        else if ($(ele).hasClass('clsDatePicker')) {
            if (!$(ele).closest('table').prev().find('input').hasClass('clstxtDatePicker')) {
                var dataruleid = $($(ele).closest('table').parent().find('input.clsHiddenHasRules')).attr('data-ruleid');
            }
            else {
                var dataruleid = $(ele).closest('table').prev().find('input').attr('data-ruleid');
            }
            var ruleId = dataruleid != undefined ? dataruleid : "0";
            var DatepickerValue = DATEPICKER.getDate($(ele)[0].id);
            var form = $("#NewMasterForm").serializeArray();
            //  form = [...new Set(form.map(item => item.name))];
            NewArrayForForm = this.getNewFormArray(form);
            form = NewArrayForForm;
            form.push({ name: 'RuleId', value: ruleId });
            tagObject.RuleId = ruleId;
            var foundIndex = this.checkIfPropertyExistInSerializedForm($(ele)[0].id, form);
            if (foundIndex != -1) {
                form.splice(foundIndex, 1);
            }
            form.push({ name: 'MasterTypeId', value: $('#hdnMasterTypeId').val() });
            form.push({ name: $(ele)[0].id, value: DatepickerValue });


            //var form = $("#NewMasterForm").serialize() + '&RuleId=' + ruleId + '&' + $(ele)[0].id + '=' + DatepickerValue + '&MasterTypeId=' + $('#hdnMasterTypeId').val();
        }

        else {
            var ruleId = $(ele).attr('data-ruleid') != undefined ? $(ele).attr('data-ruleid') : "0";
            if ($(ele).closest('table').length > 0 && $(ele).closest('table').hasClass('tabsTable')) {
                var controlid = $(ele)[0].id;
                controlid = (controlid.match(/[a-z A-Z]+/g)).toString();
                $('#' + controlid).val($(ele).val());
                var form = $("#NewMasterForm").serializeArray();

                var NewArrayForForm = [];
                NewArrayForForm = this.getNewFormArray(form);
                form = NewArrayForForm;
                //                form = [...new Set(form.map(item => item.name))];
                form.push({ name: 'RuleId', value: ruleId });
                tagObject.RuleId = ruleId;
                var foundIndex = this.checkIfPropertyExistInSerializedForm(controlid, form);
                if (foundIndex != -1) {
                    form.splice(foundIndex, 1);
                }
                form.push({ name: 'MasterTypeId', value: $('#hdnMasterTypeId').val() });
                form.push({ name: controlid, value: $(ele).val() });



                //   var form = $("#NewMasterForm").serialize() + '&RuleId=' + ruleId + '&MasterTypeId=' + $('#hdnMasterTypeId').val() + '&' + controlid + '=' + $(ele).val();

            }
            else {
                var alldisabledElements = $("#NewMasterForm").find("input,select:disabled");
                var form = $("#NewMasterForm").serializeArray();
                form = this.getNewFormArray(form);
                form.push({ name: 'RuleId', value: ruleId });
                tagObject.RuleId = ruleId;
                form.push({ name: 'MasterTypeId', value: $('#hdnMasterTypeId').val() });

                //var form = $("#NewMasterForm").serialize() + '&RuleId=' + ruleId + '&MasterTypeId=' + $('#hdnMasterTypeId').val();
                for (var i = 0; i < alldisabledElements.length; i++) {

                    var found = form.some(function (el) {
                        return el.name === alldisabledElements[i].id;
                    });
                    if (!found) {
                        var contrlid = alldisabledElements[i].id;
                        if (contrlid != null && contrlid.length > 0) {
                            form.push({
                                name: contrlid, value: $("#" + contrlid).hasClass("clsdataTypeChkBox") ? $("#" + contrlid).is(":checked") : alldisabledElements[i].value
                            });
                        }
                    }
                    //if (alldisabledElements[i].id != "" && form.indexOf(alldisabledElements[i].id) == "-1" && alldisabledElements[i].id!=undefined) {
                    //    form = form + "&" + alldisabledElements[i].id + "=" + alldisabledElements[i].value;
                    //}
                }

            }
        }
        form.push({ name: 'SelectedMasterViewId', value: $('#SelectedViewId').val() });
        urlObject.url = GLOBAL.getContextPath("getRules", "GenerateMaster", "Masters");
        urlObject.ButtonClicked = $('#hdnButtonClickName').val();
        var ajaxCall = NETWORK.executeServerMethod(urlObject, true, form, "JSON", false, "MASTERENTRYSCREEN.RuleAjaxCallSuccess", "", "", tagObject);
        console.log('getControlRules ends: ', new Date().toLocaleString());
    },
    RuleAjaxCallSuccess: function (bs, data, tagObject) {

        console.log('RuleAjaxCallSuccess rendering Starts: ', new Date().toLocaleString());
        try {
            var typeofevent = tagObject.typeofevent;
            var currentevent = tagObject.currentevent; var strCurrentControlId = tagObject.currentControlId;
            var IsWarnStopRule = false;
            var currentRuleId = "";
            if (tagObject.RuleId.split(",").length > 0)
                currentRuleId = tagObject.RuleId.split(",")[0];// document.getElementById(strCurrentControlId).getAttribute("data-ruleid");
            else
                currentRuleId = tagObject.RuleId;
            if ((currentRuleId == undefined || currentRuleId == 0) && tagObject.RuleId.length > 0) {
                currentRuleId = tagObject.RuleId.replace(',', '').trim();
            }
            var MastertypeId = $('#hdnMasterTypeId').val();
            if (bs == true && data.result != null && data.Error == "") {
                var data = data.result;
                for (var i = 0; i < data.length; i++) {
                    if ((data[i].GeneralMessage != undefined || data[i].AlertMessage != undefined) && data[i].OldRuleConditionId == currentRuleId) {
                        if (data[i].GeneralMessage != undefined && data[i].GeneralMessage != '') {
                            COMMON.prototype.showMessage(data[i].GeneralMessage);
                            if (data[i].MessageType == '2') {
                                $('#btnMasterSaveClick').prop('disabled', true);
                                $('#btnMasterClone').css('pointer-events', "none");
                                $('#btnMasterSaveClick,#btnMasterClone').addClass('grey');
                                var EvaluatingRuleId = data[i].OldRuleConditionId;
                                lastComparefieldForRulesCondition = EvaluatingRuleId;
                                IsWarnStopRule = true;
                                //for (var iDepCtrl = 0; iDepCtrl < data[i].RuleCondition.length; iDepCtrl++) {

                                //    var depId = data[i].RuleCondition[iDepCtrl].CompareFieldName;
                                //    if (depId == "")
                                //        continue;

                                //    //$("#" + depId).addClass("clsHasRules");
                                //    var EvalOn = $("#" + depId).attr("data-evaluateon");
                                //    var RuleIdPrevious = $("#" + depId).attr("data-ruleid");
                                //    EvalOn = (EvalOn != undefined) ? EvalOn + "," + typeofevent : typeofevent;
                                //    //var rulid = $("#" + depId).attr("data-ruleid");
                                //    //rulid = (rulid != undefined) ? rulid + "," + data[i].OldRuleConditionId : data[i].OldRuleConditionId;
                                //    //lastComparefieldForRulesCondition = depId;
                                //    //lastComparefieldForRulesCondition = RuleIdPrevious;
                                //    //  $("#" + depId).attr({ "data-evaluateon": EvalOn });
                                //    // MASTERENTRYSCREEN.setRulesForControls($("#" + depId), EvalOn, typeofevent);
                                //}
                            }
                        }

                        else {
                            if (data[i].AlertMessage != undefined && data[i].AlertMessage != '') {
                                COMMON.prototype.showMessage(data[i].AlertMessage);
                            }
                        }
                        //   return false;
                    }
                    if (data[i].FieldName != undefined) {
                        var controlID = data[i].FieldName;
                        if ($("#" + controlID).length == 0) {
                            continue;
                        }
                        //  var ControlCaption = $('#fCreditLimit').parent('div').parent('div').prev().find('label').text().trim();
                        if (data[i].DataTypeId == '12' || data[i].DataTypeId == '14' || data[i].DataTypeId == '3' || data[i].DataTypeId == '4') {
                            var optioncontrolvaules = data[i].Value.split(',');
                            var optioncontrolid = optioncontrolvaules[0];
                            var optioncontroldisplayval = optioncontrolvaules[1];
                            if (data[i].DataTypeId == '3' || data[i].DataTypeId == '4') {
                                DATEPICKER.setDate(controlID, optioncontrolid);
                            }
                            else {
                                var optioncontrolValueBeforeSetFilter = OPTIONCONTROL.getControlValue(controlID);
                                if ($('#' + controlID).attr('data-tablename') == "mCore_Account") {
                                    OPTIONCONTROL.setFilter(controlID, "iStatus=0");
                                } else {
                                    var tableName = $('#' + controlID).attr('data-tablename');
                                    if (tableName != '' && (controlID == 'iPaymentTerms' || controlID == 'iReminderTerms' || controlID == 'iFinanceChargeTerms'))
                                        OPTIONCONTROL.setFilter(controlID, tableName == "mCore_FinanceTerms" ? "bMarkDelete=0" : "bMarkDeleted=0");
                                }
                                if (optioncontrolid != "") { // setfilter is removing any value which is already set in option control hence writing this code here
                                    OPTIONCONTROL.setControlValue(controlID, optioncontrolid);
                                } else {
                                    if (optioncontrolValueBeforeSetFilter != null && optioncontrolValueBeforeSetFilter != '')
                                        OPTIONCONTROL.setControlValue(controlID, optioncontrolValueBeforeSetFilter);
                                }
                            }
                            if (data[i].Caption != '') {
                                if (data[i].FieldType == true) {
                                    $('#' + controlID).closest('table').closest('th').find('label').html('');
                                    $('#' + controlID).closest('table').closest('th').find('label').html(data[i].Caption);
                                }
                                else {
                                    $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html('');
                                    $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html(data[i].Caption);
                                }
                            }
                            if (data[i].BannerText != '') {
                                $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                            }
                        }
                        else {
                            if (data[i].DataTypeId == '2') {
                                if (controlID == "bCreateadifferentfixedAssetforeachQty" && $("#" + controlID).attr('checked')) {
                                    $('#' + controlID).prop('checked', true);
                                }
                                else {
                                    (data[i].Value == "true") ? $('#' + controlID).prop('checked', true) : $('#' + controlID).prop('checked', false);
                                }
                            }
                            else {
                                if ((data[i].DataTypeId == '8' || data[i].DataTypeId == '9') && isNaN(data[i].Value)) {
                                    // $("#" + controlID).find("option[text=" + data[i].Value + "]").attr("selected", true);
                                    var DrpDownValue = MASTERENTRYSCREEN.GetValueFromDropDownBasedOnText(controlID, data[i].Value);
                                    $("#" + controlID).find("option[value=" + DrpDownValue + "]").attr("selected", 'selected');

                                }
                                else {
                                    $('#' + controlID).val(data[i].Value);
                                }
                                //$('#' + controlID).val(data[i].Value);
                            }
                            if (data[i].Caption != '') {
                                if (data[i].FieldType == true) {
                                    $('#hidden' + controlID).parent().find('label').html('');
                                    $('#hidden' + controlID).parent().find('label').html(data[i].Caption);
                                }
                                else {
                                    $('#' + controlID).closest('div.divheaderControl').prev().find('label').html('');
                                    $('#' + controlID).closest('div.divheaderControl').prev().find('label').html(data[i].Caption);
                                }
                            }
                            if (data[i].BannerText != '') {
                                $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                            }
                        }
                    }
                    else {
                        for (var j = 0; j < data[i].RuleFormatting.length; j++) {
                            var controlID = data[i].RuleFormatting[j].FieldName;
                            if ($("#" + controlID).length == 0) {
                                continue;
                            }
                            if (data[i].RuleFormatting[j].RegularExpression != null && data[i].RuleFormatting[j].RegularExpression.length > 0) {
                                $("#" + controlID).attr('data-errormessage', data[i].RuleFormatting[j].ErrorMessage);
                                $("#" + controlID).attr('data-regularexpression', data[i].RuleFormatting[j].RegularExpression);
                                $("#" + controlID).blur(function () {
                                    MASTERENTRYSCREEN.EvaluateRegExpression($("#" + controlID));
                                });
                                break;
                            }
                            //  var ControlCaption = $('#fCreditLimit').parent('div').parent('div').prev().find('label').text().trim();
                            if (data[i].RuleFormatting[j].DataTypeId == '12' || data[i].RuleFormatting[j].DataTypeId == '14' || data[i].RuleFormatting[j].DataTypeId == '3' || data[i].RuleFormatting[j].DataTypeId == '4') {
                                var optioncontrolvaules = data[i].RuleFormatting[j].Value.split(',');
                                var optioncontrolid = optioncontrolvaules[0];
                                var optioncontroldisplayval = optioncontrolvaules[1];

                                //@ added this snippet to get the formatting values for option controls ,in case they are linked with other optioncontrol fields
                                //doing it here on client side because data is not available on server when the formatting is retrieved for all the linked fields 
                                if (data[i].RuleFormatting[j].ValueType == 2 && data[i].RuleFormatting[j].LinkID > 0 && data[i].RuleFormatting[j].LinkFieldName.length > 0) {
                                    var Fields = OPTIONCONTROL.getMandatoryFields(data[i].RuleFormatting[j].LinkFieldName);
                                    if (Fields != null && Fields.length > 0) {
                                        var mandatoryFields = Fields.split(",");
                                        var sMandatoryValue = '';
                                        if (mandatoryFields != null && mandatoryFields.length > 0) {
                                            for (var k = 0; k < mandatoryFields.length; k++) {
                                                if (mandatoryFields[k] == data[i].RuleFormatting[j].Value) {
                                                    optioncontrolid = sMandatoryValue = OPTIONCONTROL.getControlValue(data[i].RuleFormatting[j].LinkFieldName, mandatoryFields[k]);
                                                }
                                            }
                                        }

                                    }

                                }

                                if (data[i].RuleFormatting[j].DataTypeId == '3' || data[i].RuleFormatting[j].DataTypeId == '4') {
                                    if (!data[i].RuleFormatting[j].Enabled) {
                                        $('#' + controlID).attr('disabled', true).addClass('grey');
                                        var DateCheckbox = $('#' + controlID + '_checkbox');
                                        if (DateCheckbox != null) {
                                            DateCheckbox.attr('disabled', true);
                                        }
                                    }
                                    else {
                                        $('#' + controlID).attr('disabled', false).removeClass('grey');
                                        $('#' + controlID).attr('readonly', false);
                                        $('#' + controlID).removeClass('backGroundColorGray');
                                        var DateCheckbox = $('#' + controlID + '_checkbox');
                                        if (DateCheckbox != null) {
                                            DateCheckbox.attr('disabled', false);
                                        }
                                    }
                                    if (optioncontrolid.length > 0) {
                                        DATEPICKER.setDate(controlID, optioncontrolid);
                                    }
                                }
                                else {
                                    if (data[i].RuleFormatting[j].Mandatory == false) {
                                        $('#' + controlID).removeClass("Ftxtbox-M").addClass("Ftxtbox");

                                    } else {
                                        $('#' + controlID).addClass("Ftxtbox-M");
                                    }

                                    var optioncontrolValueBeforeSetFilter = OPTIONCONTROL.getControlValue(controlID);
                                    if ($('#' + controlID).attr('data-tablename') == "mCore_Account") {
                                        OPTIONCONTROL.setFilter(controlID, "iStatus=0");
                                    } else {
                                        if (controlID != "iMemberType") {
                                            var tableName = $('#' + controlID).attr('data-tablename');
                                            if (tableName != '' && (controlID == 'iPaymentTerms' || controlID == 'iReminderTerms' || controlID == 'iFinanceChargeTerms'))
                                                OPTIONCONTROL.setFilter(controlID, tableName == "mCore_FinanceTerms" ? "bMarkDelete=0" : "bMarkDeleted=0");
                                        }
                                    }
                                    if (optioncontrolid != "") {
                                        OPTIONCONTROL.setControlValue(controlID, optioncontrolid);
                                    } else {
                                        if (optioncontrolValueBeforeSetFilter != null && optioncontrolValueBeforeSetFilter.length > 0)
                                            OPTIONCONTROL.setControlValue(controlID, optioncontrolValueBeforeSetFilter);
                                    }
                                    if (data[i].RuleFormatting[j].Hidden) {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "none");
                                    }
                                    else {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "block");
                                    }
                                    if (!data[i].RuleFormatting[j].Enabled) {
                                        $('#' + controlID).attr('disabled', true).addClass('grey');
                                    }
                                    else {
                                        $('#' + controlID).attr('disabled', false).removeClass('grey');
                                        $('#' + controlID).removeClass('backGroundColorGray');
                                    }

                                }
                                if (data[i].RuleFormatting[j].Caption != '') {
                                    if (data[i].RuleFormatting[j].FieldType == true) {
                                        $('#' + controlID).closest('table').closest('th').find('label').html('');
                                        $('#' + controlID).closest('table').closest('th').find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                    else {
                                        $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html('');
                                        $('#' + controlID).closest('table').parent('div').parent('div').prev().find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                }
                                if (data[i].RuleFormatting[j].BannerText != '') {
                                    $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                                }
                                if (data[i].RuleFormatting[j].ToolTip != '') {
                                    $('#' + controlID).attr("title", data[i].RuleFormatting[j].ToolTip);
                                }
                            }
                            else {
                                if (data[i].RuleFormatting[j].DataTypeId == '2') {
                                    if (MastertypeId == "601" && $("#" + controlID).attr('checked')) {
                                        $('#' + controlID).prop('checked', true);
                                    }
                                    else {
                                        if (data[i].RuleFormatting[j].Value != null && data[i].RuleFormatting[j].Value.length > 0) {
                                            if (data[i].RuleFormatting[j].Value == "true") {
                                                $('#' + controlID).prop('checked', true)
                                            } else if (data[i].RuleFormatting[j].Value.toLowerCase() == "false") {
                                                $('#' + controlID).prop('checked', false)
                                            }
                                        }
                                        //(data[i].RuleFormatting[j].Value == "true") ? $('#' + controlID).prop('checked', true) : $('#' + controlID).prop('checked', false);
                                    }

                                    if (data[i].RuleFormatting[j].Hidden) {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "none");
                                    }
                                    else {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "block");
                                    }
                                }
                                else {
                                    if (MastertypeId == "601") {

                                        var currentTargetCondition = false;
                                        if (currentevent != null && currentevent != undefined) {
                                            currentTargetCondition = currentevent.target == undefined ? false : (currentevent.target.id == "iDepreciationInYears" || currentevent.target.id == "fRateOfDepreciation")
                                        }

                                        if ((($('#' + controlID).val() == "" || $('#' + controlID).val() == "0") && $('#' + controlID).attr('data-type') != "nmbrDDl" && $('#' + controlID).attr('data-type') != "number-text")) {
                                            $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                        }
                                        else {
                                            if (data[i].RuleFormatting[j].Value != "" && data[i].RuleFormatting[j].Value.length > 0) {
                                                $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                            }
                                        }
                                        //   $('#fRateOfDepreciation').attr('disabled', true).addClass('grey');

                                        if ($("#iDepreciationMethod").val() == "0" && controlID == "iDepreciationInYears") {
                                            if (data[i].RuleFormatting[j].Value != "" && data[i].RuleFormatting[j].Value.length > 0) {
                                                $('#iDepreciationInYears').val(data[i].RuleFormatting[j].Value);
                                            }
                                        }
                                        else if (($("#iDepreciationMethod").val() == "2" || $("#iDepreciationMethod").val() == "3" || $("#iDepreciationMethod").val() == "4") && currentTargetCondition && typeofevent == "OnLeave") {
                                            if (data[i].RuleFormatting[j].Value != "" && data[i].RuleFormatting[j].Value.length > 0) {
                                                $('#' + data[i].RuleFormatting[j].FieldName).val(data[i].RuleFormatting[j].Value);
                                            }
                                        }

                                    } else {
                                        if ((data[i].RuleFormatting[j].DataTypeId == '8' || data[i].RuleFormatting[j].DataTypeId == '9') && isNaN(data[i].RuleFormatting[j].Value)) {
                                            //$("#"+controlID+" option").filter(function() {
                                            //    return this.text == data[i].RuleFormatting[j].Value; 
                                            //}).attr('selected', true);​

                                            //$("#" + controlID).find("option[text=" + data[i].RuleFormatting[j].Value + "]").attr("selected", true);
                                            var DrpDownValue = MASTERENTRYSCREEN.GetValueFromDropDownBasedOnText(controlID, data[i].RuleFormatting[j].Value);
                                            $("#" + controlID).find("option[value=" + DrpDownValue + "]").attr("selected", 'selected');


                                        }
                                        else {
                                            if (data[i].RuleFormatting[j].Mandatory == false) {
                                                if ((data[i].RuleFormatting[j].DataTypeId == '8' || data[i].RuleFormatting[j].DataTypeId == '9')) {
                                                    $('#' + controlID).removeClass("Fselect-M").addClass("Fselect");
                                                }
                                                else {
                                                    $('#' + controlID).removeClass("Ftxtbox-M").addClass("Ftxtbox");
                                                }

                                            } else {
                                                if ((data[i].RuleFormatting[j].DataTypeId == '8' || data[i].RuleFormatting[j].DataTypeId == '9')) {
                                                    $('#' + controlID).addClass("Fselect-M");
                                                }
                                                else {
                                                    $('#' + controlID).addClass("Ftxtbox-M");
                                                }
                                            }
                                            if (data[i].RuleFormatting[j].Value != "" || data[i].RuleFormatting[j].ValueType == 2) {
                                                if (data[i].RuleFormatting[j].ValueType == 2) {
                                                    var linkfieldname = data[i].RuleFormatting[j].LinkFieldName;
                                                    var isOptionControl = $("#" + linkfieldname).hasClass('clsOptionControl');
                                                    var isDatePicker = $("#" + linkfieldname).hasClass('clsDatePicker');
                                                    var CtrlValue = '';
                                                    if (isOptionControl) {
                                                        CtrlValue = OPTIONCONTROL.getControlValue(linkfieldname, data[i].RuleFormatting[j].Value);
                                                        if(CtrlValue!=null && CtrlValue.length>0 && CtrlValue!='0')
                                                        {
                                                            $('#' + controlID).val(CtrlValue);
                                                        }
                                                    }
                                                    else if (isDatePicker) {
                                                        CtrlValue = OPTIONCONTROL.getControlText(linkfieldname, data[i].RuleFormatting[j].Value);
                                                        if (CtrlValue != null && CtrlValue.length > 0) {
                                                            $('#' + controlID).val(CtrlValue);
                                                        }
                                                    }
                                                    else {
                                                        if (linkfieldname.length > 0) {
                                                            var fieldvalue = document.getElementById(linkfieldname).value;
                                                            if (fieldvalue != null && fieldvalue.length > 0) {
                                                                $('#' + controlID).val(fieldvalue);
                                                            }
                                                        }
                                                        else {
                                                            $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                                        }
                                                    }
                                                }
                                                else
                                                    $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                            }
                                        }
                                        //  $('#' + controlID).val(data[i].RuleFormatting[j].Value);
                                    }
                                    if (data[i].RuleFormatting[j].Hidden) {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "none");
                                    }
                                    else {
                                        $($('#' + controlID).closest('div.ruleHidden')).css("display", "block");
                                    }
                                }
                                if (data[i].RuleFormatting[j].Caption != '') {
                                    if (data[i].RuleFormatting[j].FieldType == true) {
                                        $('#hidden' + controlID).parent().find('label').html('');
                                        $('#hidden' + controlID).parent().find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                    else {
                                        $('#' + controlID).closest('div.divheaderControl').prev().find('label').html('');
                                        $('#' + controlID).closest('div.divheaderControl').prev().find('label').html(data[i].RuleFormatting[j].Caption);
                                    }
                                }
                                if (data[i].RuleFormatting[j].BannerText != '') {
                                    $('#' + controlID).attr("placeholder", data[i].RuleFormatting[j].BannerText);
                                }
                                if (data[i].RuleFormatting[j].ToolTip != '') {
                                    $('#' + controlID).attr("title", data[i].RuleFormatting[j].ToolTip);
                                }
                                if (!data[i].RuleFormatting[j].Enabled) {
                                    $('#' + controlID).attr('disabled', true).addClass('grey');
                                }
                                else {
                                    $('#' + controlID).attr('disabled', false).removeClass('grey');
                                    $('#' + controlID).removeClass('backGroundColorGray');
                                }
                            }

                        }
                        if (TabDataToHide != null && TabDataToHide.length > 0) {
                            debugger
                            for (var m = 0; m < TabDataToHide.length; m++) {

                                var FieldNames = TabDataToHide[m].Tag;
                                var IsTabHidden = true;
                                for (var fieldcount = 0; fieldcount < FieldNames.length; fieldcount++) {
                                    var elementLabel = $('#' + FieldNames[fieldcount]).closest('div.ruleHidden');
                                    if (elementLabel != null) {
                                        var display = elementLabel.css('display');
                                        if (display == 'block') {
                                            IsTabHidden = false;
                                            break;
                                        }

                                    }
                                }
                                if (IsTabHidden) {
                                    var element = document.querySelectorAll('li[data-tabname="' + TabDataToHide[m].Name + '"]');
                                    if (element != null && element.length > 0) {
                                        element[0].style.display = 'none';
                                    }
                                }
                            }

                        }


                    }
                }
                if ($('#btnMasterSaveClick').prop('disabled') == true && IsWarnStopRule == false && lastComparefieldForRulesCondition != "" && currentRuleId == lastComparefieldForRulesCondition) {
                    $('#btnMasterSaveClick').prop('disabled', false);
                    $('#btnMasterClone').css('pointer-events', "auto");
                    $('#btnMasterSaveClick,#btnMasterClone').removeClass('grey');
                }
                if ($('#hdnMasterTypeId').val() == "601") {
                    ////debugger
                    MASTERENTRYSCREEN.ApplyFixedAssetPreference();
                }
            }
            else {
                COMMON.prototype.showMessage(data.Error);
            }
        } catch (ex) {
            alert("Exception => MasterEntryScreen.RuleAjaxCallSuccess " + ex.message);
        }
        console.log('RuleAjaxCallSuccess rendering Ends: ', new Date().toLocaleString());
    },
    autocollapse: function () {
        debugger
        if (!$("#divTabContentGenerateMaster").is(":visible")) {
            if ($('#lastTab') != null) {
                $('#lastTab').hide();
            }
            return false;
        }
        var tabs = $('.ulForTabs');
        var tabsHeight = tabs.innerHeight();
        $('#lastTab').show();

        if (tabsHeight >= 55) {
            while (tabsHeight > 55) {
                //console.log("new"+tabsHeight);
                var children = tabs.children('li:not(:last-child)');
                var count = children.length;
                $(children[count - 1]).prependTo('#collapsed');

                //if (!$(children[count - 1]).hasClass('clsCollapse'));
                //{
                //    $(children[count - 1]).addClass('clsCollapse');
                //}
                tabsHeight = tabs.innerHeight();
            }

        }
        else {
            while (tabsHeight < 55 && (tabs.children('li').length > 0)) {

                var collapsed = $('#collapsed').children('li');
                var count = collapsed.length;
                if (count > 0) {
                    $(collapsed[0]).insertBefore(tabs.children('li:last-child'));
                    tabsHeight = tabs.innerHeight();
                }
                else {
                    $('#lastTab').hide();
                    return false;
                }
            }
            if (tabsHeight > 55) { // double chk height again
                MASTERENTRYSCREEN.autocollapse();
            }
        }
    },
    DownloadImageDocument: function (element, FieldId, TableNo, rowNo, fieldnameid) {
        var FileName = document.getElementById(fieldnameid).value;//filename
        var RevisionId = $('#txtRevision').val() == undefined ? 0 : parseInt($('#txtRevision').val());
        if (FileName == undefined)
            FileName = "";
        FileName = escape(FileName);
        if ($("#" + fieldnameid).val() != "") {
            if (parseInt(rowNo) > 0) {
                var DocNameInputValue = $($(element).closest("td")).find('input')[0].value;
                if (DocNameInputValue != "") {
                    var url = GLOBAL.getContextPath("Download", "Generatemaster", "Masters");
                    window.location = url + '?FieldId=' + FieldId + '&tableNo=' + TableNo + '&rowNo=' + rowNo + '&FileName=' + FileName + '&RevId=' + RevisionId;
                }
                return false;
            }
            var url = GLOBAL.getContextPath("Download", "Generatemaster", "Masters");
            window.location = url + '?FieldId=' + FieldId + '&tableNo=' + TableNo + '&rowNo=' + rowNo + '&FileName=' + FileName + '&RevId=' + RevisionId;
        }
    },
    chkProdAttributeClick: function (element) {
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        if ($(element).is(':checked')) {
            if ($(element).attr("data-newmaster") == "0") {
                $($(tabId).find('.clsOptionControlAttrPro')).prop('disabled', false);
                $($(tabId).find('.clsOptionControlAttrPro')).removeClass("grey");
            }
            $($($(tabId).find('.clstblProductAttributes')).find('input[type=text]')).prop('disabled', false);

            $($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr').each(function () {
                $($(this).find('td')[0]).addClass("CustomizePopupForAddDeleteRow");
            });
        }
        else {
            $($(tabId).find('.clsOptionControlAttrPro')).prop('disabled', true);
            $($(tabId).find('.clsOptionControlAttrPro')).addClass("grey");
            $($($(tabId).find('.clstblProductAttributes')).find('input[type=text]')).prop('disabled', true);
            $($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr').each(function () {
                $($(this).find('td')[0]).removeClass("CustomizePopupForAddDeleteRow");
            });
        }
        if ($(element).attr("data-newmaster") == "0") {
            var optioncontrolid = "id_AttributeName" + $(element).attr("data-attrtabno");
            OPTIONCONTROL.setControlText(optioncontrolid, $(element).attr("data-attrname"), true);
            if ($(element).attr("data-attrname").length > 0) {
                $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').html($(element).attr("data-attrname"));
            }
            $("#" + optioncontrolid + "_container").css({ "display": "none" });
        }
    },
    checkForDuplicateProdAttr: function (element, bFromAttrName, bFromSaving) {
        //////debugger
        var FilterArry = [];
        var FilterArrrForName = [];
        var tableLength = $($(element).closest("tbody")).find('tr').length;
        var cell = null;
        for (var i = 0; i < tableLength; i++) {
            if (bFromAttrName) {
                cell = $($($(element).closest("tbody")).find('tr')[i]).find('td')[3];
            } else {
                cell = $($($(element).closest("tbody")).find('tr')[i]).find('td')[4];
            }
            if ($(cell).find("input")[0].value.toLowerCase().trim() != "" && (i + 1) != $(element).closest('tr')[0].rowIndex) {
                FilterArry.push($(cell).find("input")[0].value.toLowerCase().trim());
            }
            if (bFromSaving) {
                var namecell = $($($("#txtProdAttributeName0").closest("tbody")).find('tr')[i]).find('td')[3];
                if ($(cell).find("input")[0].value.toLowerCase().trim() != "") {
                    FilterArrrForName.push($(namecell).find("input")[0].value.toLowerCase().trim());
                }
            }
        }
        if (bFromSaving) {
            return !(MASTERENTRYSCREEN.hasProAttrDuplicates(FilterArry, FilterArrrForName));
        }
        if (parseInt(tableLength) > 0) {
            if ($.inArray($(element).val().toLowerCase().trim(), FilterArry) > -1) {
                if (bFromAttrName) {
                    COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgCannotHaveDuplicateNameforAttributes", GetMasterEntryResourceMessages));
                }
                else {
                    COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgCannotHaveDuplicateCodesforAttributes", GetMasterEntryResourceMessages));
                }
                $(element).val("");
                return false;
            }
        }
        return true;
    },
    hasProAttrDuplicates: function (array, FilterArrrForName) {
        var valuesSoFar = [];
        for (var i = 0; i < array.length; ++i) {
            var value = array[i];
            if (valuesSoFar.indexOf(value) !== -1) {
                COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgCannotHaveDuplicateCodesforAttributes", GetMasterEntryResourceMessages));
                return true;
            }
            valuesSoFar.push(value);
        }
        valuesSoFar = [];
        for (var i = 0; i < FilterArrrForName.length; ++i) {
            var value = FilterArrrForName[i];
            if (valuesSoFar.indexOf(value) !== -1) {
                COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgCannotHaveDuplicateNameforAttributes", GetMasterEntryResourceMessages));
                return true;
            }
            valuesSoFar.push(value);
        }
        return false;
    },
    CarretToggle: function (element) {
        //
        $(element).toggleClass('glyphicon-chevron-down glyphicon-chevron-up');
        $('#divMultipleTreeBox').toggleClass('hidden');
    },
    SelectAllTreeBoxes: function (element) {
        //
        if ($(element).is(':checked')) {
            $('.clsChkboxTreeControl').prop('checked', true);
        }
        else {
            $('.clsChkboxTreeControl').prop('checked', false);
        }
    },
    MaxInputValue: function (element, maxValue, maxSize) {
        //debugger
        if (element.value == "" || element.value == "0") {
            element.value = "";
            return false;
        }

        if ($(element).attr('data-fieldtype') == undefined) {
            if (parseInt(element.value) > maxValue) {
                if (maxSize == undefined) {
                    $(element).val(maxValue);
                }
                else {
                    element.value = parseFloat(maxValue).toFixed(maxSize);
                }
                return false;
            }
        } else if ($(element).attr('data-fieldtype') == "smallNumber" && $(element).attr('data-type') == "smallNumber") {
            if (parseInt(element.value) > maxValue) {
                element.value = parseInt(maxValue)
                alert("Cannot enter value more than 32766 for small number type!");
            }
            return false;
        }
    },
    setPrecisionValue: function (element, maxSize) {
        if (maxSize != null) {
            element.value = element.value == '' ? '' : parseFloat(element.value).toFixed(maxSize);
        }
    },
    //setFractionOnly: function (event) {
    //    
    //    if (event.keyCode > 31 && ((event.keyCode != 46 || $(this).val().indexOf('.') != -1) && (event.keyCode < 48 || event.keyCode > 57)) ) {
    //        return false;
    //    }
    //    else {
    //        return true;
    //    }
    //},
    getNetworkPrinters: function (element) {
        //
        NETWORK.executeServerMethod(GLOBAL.getContextPath("getNetworkPrinters", "GenerateMaster", "Masters"), true, { controlId: $(element).attr("data-printerid") }, "HTML", true, "MASTERENTRYSCREEN.GetNetworkPrinterSuccess");
    },
    GetNetworkPrinterSuccess: function (bs, data) {
        //
        if (bs == true && data != null) {
            $("#div_Printers").html(data);
            $("#divPrinterModal").modal("show");
        }
        else {
            COMMON.prototype.showMessage("Error in getting network printers list");
        }
    },
    printerRowClick: function (element) {
        //
        $("#tblPrinters").find("tr").removeClass("tblPrinterHighlight");
        $(element).addClass('tblPrinterHighlight');
        var SelectedPrinter = $($(element).find('label')).text();
        $("#txtSelectedPrinter").val(SelectedPrinter);
    },
    printersOkClick: function () {
        //
        var SelectedPrinter = $("#txtSelectedPrinter").val();
        var PrinterControlId = $("#hdnPrinterControlId").val();
        $("#" + PrinterControlId).val(SelectedPrinter);
        $("#divPrinterModal").modal("hide");
    },
    closePrintersModal: function (element) {
        debugger
        if (element == undefined) {
            $("#divPrinterModal").modal("hide");
        }
        else {
            var modalid = $(element).attr('data-content');
            $("#" + modalid).modal("hide");
        }
    },
    getResourceValue: function (sKey, GetMasterEntryResourceMessages) {

        var value = "";
        var result = null;

        result = MASTERENTRYSCREEN.findKeyValue(sKey, GetMasterEntryResourceMessages);
        if (result.lValue > 0) {
            value = result.data.Value;

            value = value.replace("{0}", "");
            value = value.replace("{1}", "");
        }

        return (value);
    },
    findKeyValue: function (sKey, arrKeyValue) {
        var iCounter = 0;
        var result = null;
        var obj = null;

        try {
            result = COMMON.prototype.getEmptyResultObject();
            result.lValue = 0;
            result.sValue = "";
            result.data = null;

            for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
                obj = arrKeyValue[iCounter];
                if (obj.Key == sKey) {
                    result.lValue = iCounter + 1;
                    result.data = obj;
                    break;
                }
            }

        }
        catch (err) {
            result.lValue = -1;
            result.sValue = err.message;
        }

        return (result);
    },
    BinCapacitySuccess: function (bs, objProductBinCapacityDetails, tagArray) {
        //////debugger
        binCapacityValue = tagArray[0];
        BinCapacity = tagArray[1];
        if (bs == true && objProductBinCapacityDetails != null) {
            if (BinCapacity.trim() == "iCapacity") {
                if (objProductBinCapacityDetails != null && parseFloat(binCapacityValue) < objProductBinCapacityDetails.CurrentProductQTYUsed) {
                    COMMON.prototype.showMessage("Capacity already consumed is '" + objProductBinCapacityDetails.CurrentProductQTYUsed + "' cannot decrease");
                    $("#" + BinCapacity).val(objProductBinCapacityDetails.ActualCapacity);
                }
                return false;
            }
            else if (BinCapacity.trim() == "iBinCapacity") {
                var ProjectedQTY = parseInt(binCapacityValue) * objProductBinCapacityDetails.QTYConsumedbyProduct + objProductBinCapacityDetails.OtherProductQTYUsed;
                if (objProductBinCapacityDetails != null && ProjectedQTY > objProductBinCapacityDetails.ActualCapacity) {
                    COMMON.prototype.showMessage("bin Capacity already consumed is '" + objProductBinCapacityDetails.CurrentProductQTYUsed + "' in '" + objProductBinCapacityDetails.BinName + "' cannot increase");
                    $("#" + BinCapacity).val(objProductBinCapacityDetails.BinCapacityPrev);
                }
                return false;
            }
        }
    },
    selectAllProductAttributes: function (element) {
        if (element.checked) {
            $(document).find(".clsAttrChkbox").prop("checked", true);
        }
        else {
            $(document).find(".clsAttrChkbox").prop("checked", false);
        }
    },
    productAttrOKClick: function () {

        var divId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var tbleRows = $(divId).find('#tblProductAttributesBody').children();
        if ($(document).find(".clsAttrChkbox:checked").length > 0) {
            MASTERENTRYSCREEN.ClearGrid();
            $(document).find(".clsAttrChkbox:checked").each(function (i) {
                if (i >= tbleRows.length) {
                    MASTERENTRYSCREEN.AddDynamicRow()
                    tbleRows = $(divId).find('#tblProductAttributesBody').children();
                }
                $($(tbleRows[i]).find('input')[0]).val($(this).attr("data-attributeno"));
                $($(tbleRows[i]).find('input')[1]).val($(this).attr("data-masterid"));
                $($(tbleRows[i]).find('input')[2]).val($(this).attr("data-name"));
                $($(tbleRows[i]).find('input')[3]).val($(this).attr("data-code"));
            });
            $("#divProductAttributesModal").modal("hide");
        }
        else {
            COMMON.prototype.showMessage("You have not selected any attribute from the List. Please Select attributes to Display");
            return false;
        }
    },
    ClearGrid: function () {

        var divId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var tbleRows = $(divId).find('#tblProductAttributesBody').children();
        //  var id = document.getElementById(id);
        $(tbleRows).each(function () {

            var cell = $(this).find("td");
            $(cell).each(function () {
                if ($(this)[0].cellIndex > 0 && $(this).find("input").length > 0) {
                    $(this).find("input")[0].value = "";
                }
            });
        });
    },
    getCheckedRowsinMultipleTreeTabs: function (tble, masterTypeid) {

        checkbufferForMultipleTreeTabs = [];
        $('#newMasterDiv' + tble).find("#LandingGridBody tr").each(function () {
            if ($($(this).find(".chkRowCheck")).is(":checked")) {
                var masterid = parseInt($(this).find("td.ClsMaster")[0].innerHTML.trim());
                checkbufferForMultipleTreeTabs.push(masterid);
            }
        });
        if (checkbufferForMultipleTreeTbs.length > 0) {
            for (var j = 0; j < checkbufferForMultipleTreeTbs.length; j++) {
                var chkArr;
                if (masterTypeid == checkbufferForMultipleTreeTbs[i].masterTypeid) {
                    chkArr = checkbufferForMultipleTreeTbs[i].checkbuffer;
                    for (var k = 0; k < chkArr.length; k++) {
                        if (checkbufferForMultipleTreeTabs.indexOf(chkArr[k]) == "-1") {
                            checkbufferForMultipleTreeTabs.push(chkArr[k]);
                        }
                    }
                }

            }
        }
        if (tble != null && tble != undefined && masterTypeid > 0) {
            checkbufferForMultipleTreeTabs = GetTreeTabCheckedMasterIds('#newMasterDiv' + tble, masterTypeid);
        }
        //if (GridrowidValues != null && GridrowidValues != undefined && GridrowidValues.length > 0) {
        //    checkbufferForMultipleTreeTabs = GetTreeTabCheckedMasterIds('#newMasterDiv' + tble, masterTypeid);
        //}
    },
    LandingAndMasterUpdateAlerts: function () {
        //  GLOBAL.gotoHomePage();
        NETWORK.executeServerMethod(
                    GLOBAL.getContextPath("GetAlerts", "Home", ""),
                    true,
                    null,
                    "",
                    true,
                    "MASTERENTRYSCREEN.LandingAndMasterUpdateAlertsSuccess",
                    "GLOBAL.LoadingStart",
                    "GLOBAL.LoadingEnd"
             );
    },
    // It is callback of UpdateAlerts
    LandingAndMasterUpdateAlertsSuccess: function (bSuccess, html) {
        if (bSuccess) {
            $("#alertsUL").html(html);
        }
    },

    onCustomTableDeleteRow: function (row, event) {
      //debugger
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var tlength = $(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody').children().length;
        if (parseInt(tlength) > 1) {
            $($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr')[parseInt(row - 1)]).remove();
            MASTERENTRYSCREEN.RearrangeIdsAfterInsertDeleteRow(tabId);
        }
        else {
            COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");
            return false;
        }
    },
    onCustomTableInsertRow: function (row, event) {
        //////debugger
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        var c = $($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).children(':last')).clone();
        c.find('td,input').each(function () {
            id = v = $(this).prop('id');
            id = id.replace(/\d+/g, parseInt(row));
            $(this).prop('id', id);
            d = parseInt(row);
        });
        r = c.find('tr').text();
        c.find('td:first')[0].innerHTML = parseInt(row);
        $($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr').eq(parseInt(row - 1)).before(c);
        $($($($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr')[parseInt(row - 1)]).find('input,select')).each(function () {
            //
            $(this).attr({ value: '', 'data-value': '0', 'data-text': '', 'data-id': '', 'data-img': '' })
            $(this).val('');
            $(this).show();
            if ($(this).closest('table.ocCommonTableClass').length > 0) {
                //
                $($(this).closest('table').next()).remove();
                $($(this).closest('table')).remove();

            }

        });
        MASTERENTRYSCREEN.RearrangeIdsAfterInsertDeleteRow(tabId);
    },
    RearrangeIdsAfterInsertDeleteRow: function (tabId) {
        var tlength = $(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody').children().length;
        for (var iC = 0; iC < tlength; iC++) {
            var tRow = $($(tabId).find('#tblMasterNewGeneratorBody,#tblProductAttributesBody')).find('tr')[iC];
            $($(tRow).find('input,td')).each(function () {
                id = v = $(this).prop('id');
                id = id.replace(/\d+/g, parseInt(iC + 1));
                $(this).prop('id', id);
                //  d = parseInt(row);
            });
            $(tRow).find('td:first')[0].innerHTML = parseInt(iC + 1);
            $(tRow).attr("data-rowno", parseInt(iC + 1));
        }
    },
    spinNumberBlur: function (element, minValue) {
        if (parseInt($(element).val()) < parseInt(minValue)) {
            $(element).val(minValue);
        }
    },
    MasterControlDPLeave: function (element) {
        ////debugger
        if ($(element).hasClass('clsHasRules')) {
            MASTERENTRYSCREEN.getControlRules(element, 'OnLeave', null);
            return false;
        }
    },
    HeaderTypeOCLeave: function (element) {
        debugger
        if ($('#hdnMasterTypeId').val() == "2" && element.id == "iDefaultBaseUnit") {
            var Is3PLEnabled = document.getElementById('hdnIs3PLEnabled').value;
            if (Is3PLEnabled != null && Is3PLEnabled != undefined && Is3PLEnabled == 1) {
                MASTERENTRYSCREEN.Units3PlValidation();
            }
        }
        if ($('#hdnMasterTypeId').val() == "4" && $("#hdnMasterTypeId").attr("data-btransexist") == "True" && element.id == "iBins") //for warehouse master
        {
            var hdnValue = document.getElementById("hdniBins");
            if (hdnValue != null && hdnValue.getAttribute('data-value') > 0) {
                COMMON.prototype.showMessage("WareHouse is already used in transactions ,can not update the bin updating it would affect tranactions.");
                OPTIONCONTROL.setControlValue("iBins", WarehouseBinvalue);
            }
        }
        //@commneted payment terms usage in transaction validation code as validaiton is not required
        //if ($('#hdnMasterTypeId').val() == "1" && $("#hdnMasterTypeId").attr("data-btransexist") == "True" && element.id == "iPaymentTerms") //for account master
        //{
        //    var paymenttermvalue = document.getElementById('hdnPaymentTermValue').value;
        //    var selectedId = OPTIONCONTROL.getControlValue('iPaymentTerms');
        //    var MasterTypeId = $('#hdnMasterTypeId').val();
        //    var MasterId = $('#hdnMasterId').val();
        //    if (paymenttermvalue != null && selectedId != null && MasterTypeId != null && MasterId != null && parseInt(MasterId) > 0) {
        //        if (parseInt(paymenttermvalue) > 0) {
        //            var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("CheckForPaymentTermInVoucher", "GenerateMaster", "Masters"), true,
        //                                { iMasterId: MasterId, iMasterTypeId: MasterTypeId, PaymentTermId: parseInt(paymenttermvalue) }, "JSON", false, '', "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //            if (result != null) {
        //                if (result.data != null && result.data.length >= 2) {
        //                    if (result.data[0] && result.data[1] == '') {
        //                        COMMON.prototype.showMessage("can not change payment term as this record is used in transaction ");
        //                        OPTIONCONTROL.setControlValue("iPaymentTerms", paymenttermvalue);
        //                    }
        //                }
        //            }
        //        }
        //    }
            
        //}
        //@added this block to get copy from data for Group option control --if code field is set to copyfromparent and user is selecting it fron GroupOptioncontrol from transaction.
        if (element.id == 'oc_Group' && $("#hdnNewMasterOCValue").val() == "True") {
            var ParentId = OPTIONCONTROL.getControlValue("oc_Group");
            var iMasterId = parseInt(document.getElementById('hdnMasterId').value);
            if (ParentId != undefined && ParentId != null && ParentId > 0 && iMasterId != null && iMasterId != undefined && iMasterId == 0) {

                var MandatoryFields = OPTIONCONTROL.getMandatoryFields("oc_Group").split(",");
                if (MandatoryFields.length > 0) {
                    var Field = MandatoryFields.filter(x=>x == 'sCode')[0];
                    if (Field.length > 0) {
                        var sMandatoryValue = OPTIONCONTROL.getControlValue('oc_Group', Field);
                        var Elements = document.querySelectorAll("[data-IsCopyFromParent='True']");
                        if (Elements != null && Elements.length > 0) {
                            for (var i = 0; i < Elements.length; i++) {
                                if (Elements[i].id == 'sCode') {
                                    document.getElementById('sCode').value = sMandatoryValue;

                                    if (document.getElementById('div_newMasterForOC') != null)//@call increment in case on trans screen-if master open from trans screen and group is selected
                                    {
                                        if (!document.getElementById('div_newMasterForOC').classList.contains('hidden')) {
                                            MASTERENTRYSCREEN.SetIncremental(document.getElementById('sCode'), true);
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }

        }
        //&& $("#hdnNewMasterOCValue").val() == "True"
        if (element.id == 'oc_Group') {
            var SelectedId = OPTIONCONTROL.getControlValue("oc_Group");
            MASTERENTRYSCREEN.GetCopyFromDataForGrpControl(SelectedId);
            MASTERENTRYSCREEN.getIncrementalValue(document.getElementById('sCode'), $('#sCode'));

        }


        //@ added this block to set increment ,if applied on fields of type optioncontrol
        if (element != null && element != undefined) {
            var attrValue = element.getAttribute('data-IsOcIncrement');
            if (attrValue != null && attrValue != undefined && attrValue == 'True') {
                var ControlWithIncrementalBehaviour = element.getAttribute('data-ControlWithIncrement');
                var IsPickCode = document.getElementById('hdnIsPickCode').value;

                if (ControlWithIncrementalBehaviour != 'sCode' || IsPickCode !== 'True') {
                    MASTERENTRYSCREEN.getIncrementalValue(element, ControlWithIncrementalBehaviour);
                }
            }
        }
        //@ ends
        if (element.id == "iStorer" && $("#iStorer").length > 0) {
            var MasterTypeId = $('#hdnMasterTypeId').val();
            var MasterId = $('#hdnMasterId').val();
            if (MasterTypeId == 2 && MasterId == 0 && IsPrefixCustomerCodeToProductCode > 0) {
                MASTERENTRYSCREEN.SetStorerCode(element.id);
            }

        }

        if ($("#iCountry").length > 0 && element.id == "iCountry") {
            if ($("#iState").length > 0) {
                OPTIONCONTROL.clear('iState');
            }
            if ($("#iCity").length > 0) {
                OPTIONCONTROL.clear('iCity');
            }
        }
        if ($("#iState").length > 0 && element.id == "iState") {
            if ($("#iCity").length > 0) {
                OPTIONCONTROL.clear('iCity');
            }
        }
        //@TO get selected id values and set to Fixedasset master screen starts
        if ($("#iParentAsset").length > 0 && element.id == "iParentAsset") {
            if ($("#iParentAsset").length > 0) {
                var SelectedId = OPTIONCONTROL.getControlValue("iParentAsset");
                if (SelectedId > 0) {
                    var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetCopyFromParentData", "GenerateMaster", "Masters"), true,
                                { iMasterId: SelectedId, iMasterTypeId: $('#hdnMasterTypeId').val() }, "JSON", false, '', "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
                    if (result != null) {
                        localStorage.setItem("CopyFromParentValues", JSON.stringify(result.data));
                        MASTERENTRYSCREEN.SetCopyFromParent();
                        localStorage.setItem("CopyFromParentValues", "");
                    }
                }
            }
        }
        //@TO get selected id values and set to Fixedasset master screen ends
        if ($(element).hasClass('clsHasRules')) {
            if (OPTIONCONTROL.getControlText(element.id) == "")
                return false;
            MASTERENTRYSCREEN.getControlRules(element, 'OnLeave', null);
            return false;
        }
        // call for specifically optioncontrols handled here -for field extmodule    
        var ExtModCustomData = {};
        ExtModCustomData.ExtModEvent = EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE;
        var iCount = MastersExternalModule.callExternalModuleField(EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE, element.id, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
        if (iCount > 0) {
            return;
        }
    },
    SetStorerCode: function (elementid) {

        var sMandatory = "";
        var sMandatoryValue = '';
        var mandatoryFields = OPTIONCONTROL.getMandatoryFields('iStorer').split(",");
        if (mandatoryFields.length > 0) {
            for (var i = 0; i < mandatoryFields.length; i++) {
                if (mandatoryFields[i] == 'sPrefix') {
                    sMandatoryValue = OPTIONCONTROL.getControlValue('iStorer', mandatoryFields[i]);
                }
            }
            if (document.getElementById('sCode').value.includes(sMandatoryValue + '-') && sMandatoryValue != null && sMandatoryValue != undefined) {
                var withoutPrefix = document.getElementById('sCode').value.replace(sMandatoryValue + '-', '');
                document.getElementById('sCode').value = sMandatoryValue + '-' + withoutPrefix;
            }
            else {
                if (sMandatoryValue != null && sMandatoryValue != undefined) {
                    var ExistingCode = document.getElementById('sCode').value;
                    var index = parseInt(ExistingCode.indexOf('-'));
                    if (index > 0) {
                        var withoutprefix = ExistingCode.substring(index + 1, ExistingCode.length);
                        document.getElementById('sCode').value = sMandatoryValue + '-' + withoutprefix;
                    }
                    else {
                        document.getElementById('sCode').value = sMandatoryValue + '-' + document.getElementById('sCode').value;
                    }
                }
            }

        }

    },
    IsValidCumulativeDepreciationValidation: function () {

        var bResultMsg = MASTERENTRYSCREEN.FixedAssetCumulativeDepreciationValidation();
        if (bResultMsg.length > 0 && bResultMsg != '') {
            COMMON.prototype.showMessage(bResultMsg);
            var CumulativeDepreciation = document.getElementById('fCumulativeDepreciation');
            CumulativeDepreciation.value = 0;
            return false;
        }
        else
            return true;
    },
    Units3PlValidation: function () {
        var element = document.getElementById('iDefaultBaseUnit');
        var mandatoryFields = OPTIONCONTROL.getMandatoryFields('iDefaultBaseUnit').split(',');
        if (mandatoryFields != null && mandatoryFields != undefined && element != null && element != undefined) {
            for (var i = 0; i < mandatoryFields.length; i++) {
                if (mandatoryFields[i] == "UnitType") {
                    var UnitType = OPTIONCONTROL.getControlValue(element, mandatoryFields[i]);
                    if (UnitType == 0) {
                        if (document.getElementById('iPalletUnit') != null) {
                            document.getElementById('iPalletUnit').classList.add('Ftxtbox-M');
                        }
                        if (document.getElementById('fPalletQty') != null) {
                            document.getElementById('fPalletQty').classList.add('Ftxtbox-M');
                        }
                    } else {
                        if (document.getElementById('iPalletUnit') != null) {
                            document.getElementById('iPalletUnit').classList.remove('Ftxtbox-M');
                        }
                        if (document.getElementById('fPalletQty') != null) {
                            document.getElementById('fPalletQty').classList.remove('Ftxtbox-M');
                        }
                    }
                    break;
                }
            }
        }
    },
    AddRestrictionForUpdateStocks: function () {

        var Is3PLEnabled = document.getElementById('hdnIs3PLEnabled').value;
        var IsWMS = document.getElementById('hdnIsWMSEnabled').value;
        if ($("#hdnMasterTypeId").attr("data-IsUpdateStockbTransExist") == "True" && (IsWMS == 1 || Is3PLEnabled == 1)) {
            debugger
            if (document.getElementById('iValuationMethod') != null) {
                document.getElementById('iValuationMethod').disabled = true;
            }
            if (document.getElementById('fLength') != null) {
                document.getElementById('fLength').disabled = true;
            }
            if (document.getElementById('fWidth') != null) {
                document.getElementById('fWidth').disabled = true;
            }
            if (document.getElementById('fHeight') != null) {
                document.getElementById('fHeight').disabled = true;
            }
            if (document.getElementById('fWeight') != null) {
                document.getElementById('fWeight').disabled = true;
            }
            if (document.getElementById('fCBM') != null) {
                document.getElementById('fCBM').disabled = true;
            }
            if (document.getElementById('fPalletWidth') != null) {
                document.getElementById('fPalletWidth').disabled = true;
            }
            if (document.getElementById('fPalletLength') != null) {
                document.getElementById('fPalletLength').disabled = true;
            }
            if (document.getElementById('fPalletHeight') != null) {
                document.getElementById('fPalletHeight').disabled = true;
            }
        }

    },
    bodyCellLeave: function (element) {
        alert(element.id);
    },
    FixedAssetCumulativeDepreciationValidation: function (elementid) {

        var IsChecked = document.getElementById('bCreateadifferentfixedAssetforeachQty').checked;
        var iQuantity = document.getElementById('iQuantity');
        var CumulativeDepreciation = document.getElementById('fCumulativeDepreciation');
        var Price = document.getElementById('fPrice');
        var errorMsg = '';
        if (iQuantity != null && iQuantity != undefined && iQuantity.value > 1 && IsChecked == false) {
            if (parseFloat(CumulativeDepreciation.value) <= parseFloat((iQuantity.value * Price.value))) {
                return '';//true
            }
            else {
                return errorMsg = "Cumulative Depreciation can not be greater than  (Price * Quantity)";
            }
        }
        else if (iQuantity != null && iQuantity != undefined && iQuantity.value == 1 && IsChecked == false) {
            if (parseFloat(CumulativeDepreciation.value) <= parseFloat((Price.value))) {
                return '';//true
            }
            else {
                return errorMsg = "Cumulative Depreciation can not be greater than Price";
            }
        }
        else if (iQuantity != null && iQuantity != undefined && IsChecked == true) {
            if (parseFloat(CumulativeDepreciation.value) <= parseFloat((Price.value * iQuantity.value))) {
                return '';//true
            }
            else {
                return errorMsg = "Cumulative Depreciation can not be greater than  (Price * Quantity)";
            }
        }
        return errorMsg;
    },
    bytesToSize: function (bytes, bDocumentView) {
        //////debugger
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes == 0) return '0';
        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
        if (bDocumentView)
            return (bytes / Math.pow(1024, i)).toFixed(2);
        return Math.round(bytes / Math.pow(1024, i), 2);// + ' ' + sizes[i];
    },
    getDynamicRow: function (element) {
        //debugger
        var event = element.Event;
        if ($(event.target).closest('tr.tableRow').is(':last-child')) {
            MASTERENTRYSCREEN.AddDynamicRow();
        }
        if ($(element.Control).hasClass("HasFilter")) {
            // MASTERENTRYSCREEN.ApplyFilterForField(element.Control);
        }
        event.stopImmediatePropagation();
        //$(element).off('focus');
    },
    ApplyFixedAssetPreference: function () {
        // debugger
        if ($('#hdnMasterTypeId').val() == "601") {
            if ($('#hdnAlwaysDefineDepreciationRateAsPercentage').attr("data-favalue") == "True") {
                if ($('#iDepreciationMethod').val() == '2') {
                    if ($("#iDepreciationInYears").val() != '') {
                        $('#iDepreciationInYears').attr('disabled', true).addClass('grey');
                    }
                    if ($("#iDepreciationInMonths").val() != '') {
                        $('#iDepreciationInMonths').attr('disabled', true).addClass('grey');
                    }
                    if ($("#fRateOfDepreciation").val() != '') {
                        $('#fRateOfDepreciation').attr('disabled', false).removeClass('grey');
                    }
                }
                else {
                    if ($("#iDepreciationInYears").val() != '') {
                        $('#iDepreciationInYears').attr('disabled', true).addClass('grey');
                    }
                    if ($("#iDepreciationInMonths").val() != '') {
                        $('#iDepreciationInMonths').attr('disabled', true).addClass('grey');
                    }
                    //if ($("#iDepreciationInMonths").val() != '') {
                    //    $('#iDepreciationInMonths').attr('disabled', true).addClass('grey');
                    //}
                }
            }
            else {
                if ($('#iDepreciationMethod').val() == '2') {
                    if ($("#iDepreciationInYears").val() != '') {
                        $('#iDepreciationInYears').attr('disabled', false).removeClass('grey');
                    }
                    if ($("#iDepreciationInMonths").val() != '') {
                        $('#iDepreciationInMonths').attr('disabled', false).removeClass('grey');
                    }
                    if ($("#fRateOfDepreciation").val() != '') {
                        $('#fRateOfDepreciation').attr('disabled', true).addClass('grey');
                    }
                }
                else {
                    if ($("#fRateOfDepreciation").val() != '') {
                        $('#fRateOfDepreciation').attr('disabled', true).addClass('grey');
                    }
                    //if ($("#iDepreciationInMonths").val() != '') {
                    //    $('#iDepreciationInMonths').attr('disabled', true).addClass('grey');
                    //}
                }
            }
            if ($('#hdnDepreciationPosted').val() == "True") {
                $('#iDateOfCommencement').attr('disabled', true).addClass('grey');
                $('#bCreateadifferentfixedAssetforeachQty').attr('disabled', true).addClass('grey');
            }
        }
    },
    setRulesForControls: function ($this, dataEvaluateOn, e) {
        //debugger
        if (dataEvaluateOn != '' && dataEvaluateOn != undefined) {
            dataEvaluateOn = dataEvaluateOn.split(',')
            var uniqueNames = [];
            $.each(dataEvaluateOn, function (i, el) {
                if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
            });
            dataEvaluateOn = uniqueNames;
            for (var i = 0; i < dataEvaluateOn.length; i++) {
                //
                if ($($this).hasClass('clstxtOptionControl')) {
                    var octrlid = $($this)[0].id;
                    octrlid = (octrlid.match(/[a-z A-Z]+/g)).toString();
                    // tableRuleid = $(this).attr('data-ruleid');
                }
                var elemntid = $($this).hasClass('clstxtOptionControl') ? '#' + octrlid : "#" + $($this)[0].id;
                if (dataEvaluateOn[i] != "") {
                    if (dataEvaluateOn[i] == "OnLeave") {
                        if ($($this).hasClass("Fselect") || $($this).hasClass("Fselect-M") || $($this).hasClass("clsdataTypeChkBox")) {
                            $(document).on('change', elemntid, function (e) {
                                //
                                MASTERENTRYSCREEN.getControlRules($this, 'OnLeave', e);
                                e.stopImmediatePropagation();
                            });
                        }
                        else {
                            $(document).on('blur', elemntid, function (e) {
                                MASTERENTRYSCREEN.getControlRules($this, 'OnLeave', e);
                                e.stopImmediatePropagation();
                            });
                        }
                    }
                    if (dataEvaluateOn[i] == "OnEnter") {
                        $(document).on('focus', elemntid, function (e) {
                            //
                            MASTERENTRYSCREEN.getControlRules($this, 'OnEnter', e);
                            e.stopImmediatePropagation();
                        });
                    }
                    if (dataEvaluateOn[i] == "Load") {
                        var elemnt = $($this).hasClass('clstxtOptionControl') ? $('#' + octrlid) : $($this);
                        //MASTERENTRYSCREEN.getControlRules(elemnt, 'Load', e);
                    }
                    if (dataEvaluateOn[i] == "BeforeSave") {
                        $(document).on('click', '#btnMasterSaveClick', function () {
                        });
                    }
                }
            }

        }
    },
    OpenAuditTrail: function (element) {
        var masterid = document.getElementById('hdnMasterId').value;
        var iMasterTypeId = document.getElementById('hdnMasterTypeId').value;
        var feildId = 0;
        var datatypeid = 0;
        var IsDatePicker = document.getElementById(element.id).classList.contains('clsDatePicker');
        var IsOptionCtrl = document.getElementById(element.id).classList.contains('clsOptionControl');
        if (IsDatePicker) {
            feildId = document.getElementById('hdn' + element.id).getAttribute('data-fieldid');
            datatypeid = document.getElementById('hdn' + element.id).getAttribute('data-masterdatatype');
        }
        if (IsOptionCtrl) {
            datatypeid = document.getElementById(element.id).getAttribute('data-masterdatatype');
            feildId = document.getElementById('hdn' + element.id).getAttribute('data-fieldid');
        }
        else {
            datatypeid = document.getElementById(element.id).getAttribute('data-masterdatatype');
            feildId = document.getElementById(element.id).getAttribute('data-fieldid');
        }
        // var feildId = $($(element).closest('div')).find('input.clsHiddenOC').attr('data-fieldid');
        var FieldCaption = $($($(element).closest(".ruleHidden")).find(".divlblControlName")).find('a').html().trim();
        var CurrentFieldValue = "";
        if (datatypeid != undefined && parseInt(datatypeid) == 12 || parseInt(datatypeid) == 14) {
            CurrentFieldValue = OPTIONCONTROL.getControlText(element.id);
        }
        else {
            CurrentFieldValue = element.value;
        }
        var objFieldInfo = { FieldId: feildId, MasterId: masterid, CurrentFieldValue: CurrentFieldValue, FieldCaption: FieldCaption, DataTypeId: datatypeid, IndexId: index };
        var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuditTrial", "GenerateMaster", "Masters"), true,
            { iMasterTypeId: iMasterTypeId, objFieldInfo: objFieldInfo }, "html", false, 'MASTERENTRYSCREEN.GetAuditTrial_Success', "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    },
    GetAuditTrial_Success(flag, data) {

        try {
            if (flag && data != null) {
                //debugger
                $('#AuditTrailModal').html('');
                $('#AuditTrailModal').html(data);
                $('#AuditTrailModal').modal('show');

            }
        } catch (err) {
            COMMON.prototype.showMessage(err);
        }


    },
    SetCharacterCasingOnSave: function (element) {
        var charactercase = element.getAttribute('data-charactercasing');
        if (charactercase != null && charactercase != undefined && charactercase != "0") {
            MASTERENTRYSCREEN.onkeyup(element);
        }
    },
    continueEMProcess: function (result, objCustomData, evt) {
        debugger;
        //@ stop every process here ,do not continue further focus9 events
        if (result != null && result.length > 0) {
            if (result.filter(x=>x.result == false).length > 0) {
                GLOBAL.LoadingEnd();
                return;
            }
        }
        //if (result.result == false) {
        //    GLOBAL.LoadingEnd();
        //    return;
        //}
        var Event = null;
        if (objCustomData!=null && objCustomData.ExtModEvent!=undefined)
        {
            Event = objCustomData.ExtModEvent;
        }
        else if (objCustomData!=null && objCustomData.OnEvent != undefined)
        {
            Event = objCustomData.OnEvent;
        }
        var IsNewMasterFromOc = document.getElementById('hdnNewMasterOCValue') != null ? document.getElementById('hdnNewMasterOCValue').value : "False";
        if (objCustomData != null && Event!=null &&  Event == EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE) {
            MASTERENTRYSCREEN.MasterSaveAfterEvent_EM(IsNewMasterFromOc == "False" ? undefined : IsNewMasterFromOc.toLowerCase());
        }
        else if (objCustomData != null && Event != null && Event == EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE) {
            MASTERENTRYSCREEN.MasterSaveBeforeEvent_EM(IsNewMasterFromOc == "False" ? undefined : IsNewMasterFromOc.toLowerCase());
        }
        else if (objCustomData != null && Event != null && Event == EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE) {
            MasterDeleteOperations.MasterDeleteBeforeEvent_EM(true);
        }
        else if (objCustomData != null && Event != null && Event == EXTERNALMODULE_EVENT_ENUM.AFTER_DELETE) {
            divLandingGrid(document.getElementById('ObjMasterScreenStructure_MasterTypeId').value)
        }
        else if (objCustomData != null && Event != null && Event == EXTERNALMODULE_EVENT_ENUM.BEFORE_CLOSE) {
            MasterBeforeCloseForPopData_EM();
        }
        else if (objCustomData != null && Event != null && Event == EXTERNALMODULE_EVENT_ENUM.BEFORE_LOAD) {
            MasterBeforeLoad_EM();
        }
        else {
            return;
        }
        //if (m_EmAddedEvent == EXTERNALMODULE_EVENT_ENUM.AFTER_SAVE) {
        //    MASTERENTRYSCREEN.MasterSaveAfterEvent_EM(IsNewMasterFromOc == "False" ? undefined : IsNewMasterFromOc);
        //}
        //else if (m_EmAddedEvent == EXTERNALMODULE_EVENT_ENUM.BEFORE_SAVE) {
        //    MASTERENTRYSCREEN.MasterSaveBeforeEvent_EM(IsNewMasterFromOc == "False" ? undefined : IsNewMasterFromOc);
        //}
        //else if (m_EmAddedEvent == EXTERNALMODULE_EVENT_ENUM.BEFORE_DELETE) {
        //    MasterDeleteOperations.MasterDeleteBeforeEvent_EM(true);
        //}

    },
    SetCopyFromParent: function () {
        debugger
        var storageobj = localStorage.getItem("CopyFromParentValues");
        if (storageobj != undefined && storageobj != null && storageobj.toString().length > 0) {
            var lstCopyFromParentData = JSON.parse(localStorage.getItem("CopyFromParentValues"));//  JSON.parse(document.getElementById('hdnLstCopyFromparentvalues').getAttribute('data-value'));
            var elements = document.querySelectorAll("[data-IsCopyFromParent='True']");
            if (elements != null && elements.length > 0 && lstCopyFromParentData != null && lstCopyFromParentData.length > 0) {
                //debugger
                for (var i = 0; i < elements.length; i++) {
                    for (var x = 0; x < lstCopyFromParentData.length; x++) {
                        if (elements[i].id == lstCopyFromParentData[x].Name) {
                            var datatype = document.getElementById(elements[i].id).getAttribute('data-masterdatatype');
                            if (datatype != null && datatype != 12 && datatype != 14 && datatype != 8 && datatype != 9 && datatype != 11) {
                                if (lstCopyFromParentData[x].Tag != null && lstCopyFromParentData[x].Tag.toString().length > 0) {
                                    elements[i].value = lstCopyFromParentData[x].Tag.toString();
                                    document.getElementById(elements[i].id).setAttribute('data-CopyFromParentVal', elements[i].value);
                                }
                            }
                            else if (parseInt(datatype) == 12 || parseInt(datatype) == 14) {
                                if (lstCopyFromParentData[x].Tag != null && lstCopyFromParentData[x].Tag.toString().length > 0) {
                                    if (parseInt(lstCopyFromParentData[x].Tag.toString()) > 0) {
                                        OPTIONCONTROL.setControlValue(lstCopyFromParentData[x].Name, lstCopyFromParentData[x].Tag.toString());
                                        document.getElementById(elements[i].id).setAttribute('CopyFromParentVal', lstCopyFromParentData[x].Tag.toString());
                                    }
                                }
                            }
                            else if (parseInt(datatype) == 8 || parseInt(datatype) == 9) {
                                if (lstCopyFromParentData[x].Tag != null && lstCopyFromParentData[x].Tag.toString().length > 0) {
                                    document.getElementById(elements[i].id).value = lstCopyFromParentData[x].Tag.toString();
                                    document.getElementById(elements[i].id).setAttribute('data-CopyFromParentVal', lstCopyFromParentData[x].Tag.toString());
                                }
                            }
                        }
                    }

                }
            }
        }

    },
    GetCopyFromDataForGrpControl: function (iMasterId) {
        if (iMasterId > 0) {
            var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetCopyFromParentData", "GenerateMaster", "Masters"), true,
                        { iMasterId: iMasterId, iMasterTypeId: $('#hdnMasterTypeId').val() }, "JSON", false, '', "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            if (result != null && result.data != null && result.data.length > 0) {
                localStorage.setItem("CopyFromParentValues", JSON.stringify(result.data));
                MASTERENTRYSCREEN.SetCopyFromParent();
                if ($('#hdnButtonClickName').val() != 'btnClone') {
                    localStorage.setItem("CopyFromParentValues", "");
                }
            }
        }
    },
    GetValueFromDropDownBasedOnText: function (ElementId, InputValue) {
        var select = document.getElementById(ElementId);
        var DrpDownValue = "";
        if (select != null && select != undefined) {
            //@ looping through all option values based on text and retrieving value to set selected value
            for (var x = 0; x < select.length; x++) {
                var option = select.options[x];
                if (option.text == InputValue) {
                    DrpDownValue = option.value;
                }
            }
        }
        if (DrpDownValue.length == 0) {
            DrpDownValue = InputValue;
        }
        return DrpDownValue;

    },
    ValidateMandatroyFields: function (element) {
        //debugger
        ControlFieldId = $(element).attr("id");
        var tabNo = $($(element).closest('.tab-pane')).attr('data-tabno');
        $("#divBtnGroup" + tabNo).trigger("click");
        $('.tab-pane').each(function () {
            if ($(this).attr('id') != "Main") {
                $(this).removeClass("in active")
            }
        });
        $($(element).closest('.tab-pane')).addClass("in active");

        
      

        var TabName = $("#divBtnGroup" + tabNo).find('a').html();
        if ($("#divBtnGroup" + tabNo).closest('a').length > 0) {
            TabName=  $("#divBtnGroup" + tabNo).closest('a')[0].text;
        }


        if ($("#divBtnGroup" + tabNo).closest('ul').length > 0) {//check for ul for tabsif any tab is present
            if ($("#divBtnGroup" + tabNo).closest('ul').css('display') == 'none' && TabName == 'General')//check for tab general if hidden
            {
                TabName = '';//making it empty for message display purpose.
            }
        }

        var eleExists = $($($(element).closest(".ruleHidden")).find(".divlblControlName")).find('a').html();
        var ControlFieldName = '';
        if (eleExists != null && eleExists != undefined) {
            ControlFieldName = $($($(element).closest(".ruleHidden")).find(".divlblControlName")).find('a').html().trim();
        }
        else {
            ControlFieldName = $($($(element).closest(".ruleHidden")).find(".divlblControlName")).find('label').html();
        }
        //var ControlFieldName = $($($(element).closest(".ruleHidden")).find(".divlblControlName")).find('a').html().trim();

        if (TabName != undefined && TabName.length > 0) {
            COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgInTab", GetMasterEntryResourceMessages) + " :" + TabName + " ---> " + ControlFieldName + " " + MASTERENTRYSCREEN.getResourceValue("msgFieldisRequired", GetMasterEntryResourceMessages));
        } else if (TabName.length == 0) {
            COMMON.prototype.showMessage(ControlFieldName + " " + MASTERENTRYSCREEN.getResourceValue("msgFieldisRequired", GetMasterEntryResourceMessages));
        }
        // alert(result.data[0]);
        $("#" + ControlFieldId).focus();
        return ControlFieldId;
    },
    CopyMasterData: function () {
        //debugger
        try {
            var masterid = $('#hdnMasterId').val();
            var mastertypeid = document.getElementById("hdnMasterTypeId").value;
            var form = $("#NewMasterForm").serializeArray();
            var NewArrayForForm = this.getNewFormArray(form);
            var MasterDataCopyEle = document.getElementById('hdnMasterCopiedData');
            if (MasterDataCopyEle != null && MasterDataCopyEle != undefined) {
                var MasterType = MasterDataCopyEle.getAttribute('data-MasterTypeId');

                var arrMasterData = [];
                if (MasterType == mastertypeid) {

                    //var FormElements= document.getElementById('NewMasterForm').elements;
                    //for (var i = 0; i < FormElements.length; i++) {
                    //    var Element=FormElements[i].id;

                    //}
                    var MastertypeFields = document.querySelectorAll("[data-masterdatatype='12']");
                    for (var i = 0; i < MastertypeFields.length; i++) {
                        var MasterData = { name: '', value: '', datatype: '' };
                        MasterData.name = MastertypeFields[i].id;
                        MasterData.datatype = 12;
                        if (document.getElementById(MastertypeFields[i].id + '_data') != null) {
                            MasterData.value = document.getElementById(MastertypeFields[i].id + '_data').value;
                        }
                        arrMasterData.push(MasterData);
                    }
                    var ExtTabletypeFields = document.querySelectorAll("[data-masterdatatype='14']");
                    for (var i = 0; i < ExtTabletypeFields.length; i++) {
                        var MasterData = { name: '', value: '', datatype: '' };
                        MasterData.name = ExtTabletypeFields[i].id;
                        MasterData.datatype = 14;
                        if (document.getElementById(ExtTabletypeFields[i].id + '_data') != null) {
                            MasterData.value = document.getElementById(ExtTabletypeFields[i].id + '_data').value;
                        }
                        arrMasterData.push(MasterData);
                    }
                    var TxtTypeFields = document.querySelectorAll("[data-masterdatatype='0']");
                    for (var i = 0; i < TxtTypeFields.length; i++) {
                        if (TxtTypeFields[i].id == 'iMasterId' || TxtTypeFields[i].id == 'iRowIndex') {
                            continue;
                        }
                        var MasterData = { name: '', value: '', datatype: '' };
                        MasterData.name = TxtTypeFields[i].id;
                        MasterData.datatype = 0;
                        if (document.getElementById(TxtTypeFields[i].id) != null) {
                            MasterData.value = document.getElementById(TxtTypeFields[i].id).value;
                        }
                        arrMasterData.push(MasterData);
                    }
                    var numLstTypeFields = document.querySelectorAll("[data-masterdatatype='9']");
                    for (var i = 0; i < numLstTypeFields.length; i++) {
                        if (numLstTypeFields[i].id == 'iMasterId' || numLstTypeFields[i].id == 'iRowIndex') {
                            continue;
                        }
                        var MasterData = { name: '', value: '', datatype: '' };
                        MasterData.name = numLstTypeFields[i].id;
                        MasterData.datatype = 9;
                        if (document.getElementById(numLstTypeFields[i].id) != null) {
                            MasterData.value = document.getElementById(numLstTypeFields[i].id).value;
                        }
                        arrMasterData.push(MasterData);
                    }
                    var stringlsttypefields = document.querySelectorAll("[data-masterdatatype='8']");
                    for (var i = 0; i < stringlsttypefields.length; i++) {
                        if (stringlsttypefields[i].id == 'iMasterId' || stringlsttypefields[i].id == 'iRowIndex') {
                            continue;
                        }
                        var MasterData = { name: '', value: '', datatype: '' };
                        MasterData.name = stringlsttypefields[i].id;
                        MasterData.datatype = 8;
                        if (document.getElementById(stringlsttypefields[i].id) != null) {
                            MasterData.value = document.getElementById(stringlsttypefields[i].id).value;
                        }
                        arrMasterData.push(MasterData);
                    }


                    var NumberTypeFields = [];
                    NumberTypeFields.push(document.querySelectorAll("[data-masterdatatype='1']"));
                    NumberTypeFields.push(document.querySelectorAll("[data-masterdatatype='6']"))
                    NumberTypeFields.push(document.querySelectorAll("[data-masterdatatype='15']"))
                    NumberTypeFields.push(document.querySelectorAll("[data-masterdatatype='16']"))
                    for (var i = 0; i < NumberTypeFields.length; i++) {
                        for (var x = 0; x < NumberTypeFields[i].length; x++) {
                            if (NumberTypeFields[i][x].id == 'iMasterId' || NumberTypeFields[i][x].id == 'iRowIndex') {
                                continue;
                            }
                            var MasterData = { name: '', value: '', datatype: '' };
                            MasterData.name = NumberTypeFields[i][x].id;
                            MasterData.datatype = 1;
                            if (document.getElementById(NumberTypeFields[i][x].id) != null) {
                                MasterData.value = document.getElementById(NumberTypeFields[i][x].id).value;
                            }
                            arrMasterData.push(MasterData);
                        }


                    }
                    var BoolTypeFields = [];
                    BoolTypeFields.push(document.querySelectorAll("[data-masterdatatype='2']"));
                    for (var i = 0; i < BoolTypeFields.length; i++) {
                        for (var x = 0; x < BoolTypeFields[i].length; x++) {
                            if (BoolTypeFields[i][x].id == 'iMasterId' || BoolTypeFields[i][x].id == 'iRowIndex') {
                                continue;
                            }
                            var MasterData = { name: '', value: '', datatype: '' };
                            MasterData.name = BoolTypeFields[i][x].id;
                            MasterData.datatype = 2;
                            if (document.getElementById(BoolTypeFields[i][x].id) != null) {
                                MasterData.value = document.getElementById(BoolTypeFields[i][x].id).checked;
                            }
                            arrMasterData.push(MasterData);
                        }


                    }

                    MasterDataCopyEle.setAttribute('data-value', JSON.stringify(arrMasterData));
                    MasterDataCopyEle.setAttribute('data-IsDataCopied', "True");
                    localStorage.setItem('MasterCopiedData', JSON.stringify(arrMasterData));
                    localStorage.setItem('IsDataCopied', 'True');
                }
            }
        } catch (error) {
            COMMON.prototype.showMessage("Exception--CopyMasterData" + error.message);
        }
    },
    PasteMasterData: function () {
        //debugger
        try {
            var MasterCopiedData = JSON.parse(localStorage.getItem("MasterCopiedData"));
            //localStorage.setItem("MasterCopiedData", "");
            //localStorage.setItem("IsDataCopied", "False");
            if (MasterCopiedData != null && MasterCopiedData != undefined && MasterCopiedData.length > 0) {
                for (var i = 0; i < MasterCopiedData.length; i++) {


                    switch (MasterCopiedData[i].datatype) {
                        case 0:
                        case 1:
                        case 15:
                        case 16:
                        case 6:
                        case 8:
                        case 9:
                            {
                                if (document.getElementById(MasterCopiedData[i].name) != null) {
                                    document.getElementById(MasterCopiedData[i].name).value = MasterCopiedData[i].value;
                                }
                                break;
                            }
                        case 12:
                        case 14:
                            {
                                if (MasterCopiedData[i].value != '')
                                    OPTIONCONTROL.setControlValue(MasterCopiedData[i].name, MasterCopiedData[i].value);
                                //OPTIONCONTROL.setControlText(MasterCopiedData[i].name, Currentvalue);
                            }
                            break;
                        case 2:
                            {
                                if (MasterCopiedData[i].value == true && document.getElementById(MasterCopiedData[i].name) != null) {
                                    document.getElementById(MasterCopiedData[i].name).checked = true;
                                }
                            }
                            break;
                        default:
                            if (document.getElementById(MasterCopiedData[i].name) != null) {
                                document.getElementById(MasterCopiedData[i].name).value = MasterCopiedData[i].value;
                            }
                            break;

                    }
                    //if (MasterCopiedData[i].datatype == 0 || MasterCopiedData[i].datatype == 1 || MasterCopiedData[i].datatype == 15 || MasterCopiedData[i].datatype == 16 || MasterCopiedData[i].datatype == 6)
                    //{
                    //    document.getElementById(MasterCopiedData[i].name).value = MasterCopiedData[i].value;
                    //}
                }
            }
        } catch (error) {
            COMMON.prototype.showMessage("Exception--PasteMasterData" + error.message);
        }

    },
    COMMON: {
        MastersExternalModule: function (ExternalModuleForFields, ls, i) {
            if (ExternalModuleForFields[ls].ExternalModule[i].ModuleType == EXTERNALMODULE_TYPE_ENUM.URL) {
                if ((ExternalModuleForFields[ls].ExternalModule[i].ModuleName).endsWith(".js")) {
                    try {
                        FWrapper.loadExternalJS(ExternalModuleForFields[ls].ExternalModule[i].ModuleName, ExternalModuleForFields[ls].ExternalModule[i].FunctionName);
                        return;
                    }
                    catch (err) {
                        alert("Exception :MASTERENTRYSCREEN.Common.MastersExternalModule " + err.message);
                        return false;
                    }

                }
                return ExternalModuleForFields[ls].ExternalModule[i].ModuleName;
            }
        },
        checkRecursion: function ($this) {

            var NextElement = $($($this).closest(".ruleHidden")).next();

            if (NextElement.length == 0) {
                $("#btnMasterSaveClick").addClass("dottedBorder").focus();
            }
            else {
                if ($(NextElement).css("display") == "none")
                    MASTERENTRYSCREEN.COMMON.checkRecursion(NextElement);
            }

        }
    },

    CheckIfExternalModuleEnableForFields: function (EventToBeChecked, controlid) {
        //  //debugger
        if (ExternalModuleForFields != undefined) {
            if (ExternalModuleForFields.length > 0) {
                var bFoundEvent = false;
                for (var ls = 0; ls < ExternalModuleForFields.length; ls++) {
                    if (ExternalModuleForFields[ls].FieldName == controlid) {
                        for (var i = 0; i < ExternalModuleForFields[ls].ExternalModule.length; i++) {
                            if (ExternalModuleForFields[ls].ExternalModule[i].OnEvent == EventToBeChecked) {
                                bFoundEvent = true;
                                break;
                            }
                        }
                        break;
                    }
                }
                if (bFoundEvent) {
                    switch (EventToBeChecked) {
                        case EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER://1
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE://2
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F1"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F2"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F3"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F4"):
                            {
                                return false;// MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                // break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F5"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F6"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F7"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F8"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F9"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F10"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F11"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        case Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F12"):
                            {
                                return MASTERENTRYSCREEN.COMMON.MastersExternalModule(ExternalModuleForFields, ls, i);
                                break;
                            }
                        default:
                            return false;
                            break;
                    }
                }
                else {
                    return false;
                }
            }
        }
    },
    onkeyup: function (element) {
        var casingIndex = $(element).attr("data-charactercasing");
        if (casingIndex != undefined && casingIndex != "0") {
            var previewTxt = element.value;
            if (casingIndex == 1) {
                element.value = previewTxt.toUpperCase();
            }
            else if (casingIndex == 2) {
                element.value = previewTxt.toLowerCase();
            }
            else if (casingIndex == 3) {
                element.value = previewTxt.replace(/\w\S*/g, function (txt) {
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                });
            }
            else {
                var str = previewTxt.substring(0, 1);
                element.value = str.toUpperCase() + previewTxt.substring(1, previewTxt.length).toLowerCase();
            }
        }
    },

    externalModuleForTabs: function () {
        debugger
        try {
            if (ExternalModuleForMastersObject != undefined) {
                for (var i = 0; i < ExternalModuleForMastersObject.length; i++) {
                    if (ExternalModuleForMastersObject[i].OnEvent == EXTERNALMODULE_EVENT_ENUM.ON_ADD_TAB) {

                        var sUrlTabAdd = $("#hdnMasterTypeId").attr("data-cache") == "True" ? false : Landing_ExternalModule.COMMON(ExternalModuleForMastersObject, i, EXTERNALMODULE_EVENT_ENUM.ON_ADD_TAB);
                        if (sUrlTabAdd) {
                            var li = $($($('.ulForTabs').find('li')[0]).clone()).removeClass("active").addClass("clsTabExternal liTabExternal").css({ "background-color": "" });
                            var tlength = $(".ulForTabs").find('li').length - 1;
                            tlength = parseInt(tlength) + parseInt($("#collapsed").find("li").length);
                            $(li).find("div").each(function (index) {
                                var id = $(this).prop('id');
                                var href = $(this).attr('href');
                                if (id != undefined) {
                                    id = id.replace(/\d+/g, tlength);
                                    $(this).prop('id', id);
                                }
                                if (href != undefined) {
                                    href = href.replace(/\d+/g, tlength);
                                    $(this).attr('href', href);
                                }
                            });
                            $(li).find("a").each(function () {
                                var href = $(this).attr('href');
                                if (href != undefined) {
                                    href = href.replace(/\d+/g, tlength);
                                    $(this).attr('href', href);
                                }
                                $(this).text(sUrlTabAdd.TabName);
                                $(this).removeClass("theme_color-inverse").addClass("theme_color");
                            });

                            if ($("#lastTab").is(":visible")) {
                                $("#collapsed").append(li);
                            }
                            else {
                                $('#lastTab').before(li);
                            }

                            var div = document.createElement("div");
                            div.id = "newMasterDiv" + tlength;
                            div.className = "tab-pane fade clsTabExternal";
                            div.style.marginTop = "10px";

                            var innerDiv = document.createElement("div");
                            innerDiv.className = "container-fluid";
                            innerDiv.style.padding = "0px";

                            if (sUrlTabAdd.bURL) {
                                var ifrm = document.createElement("iframe");
                                ifrm.setAttribute("id", "imyFrame" + tlength);
                                ifrm.setAttribute("src", sUrlTabAdd.value);
                                ifrm.style.width = "100%";
                                ifrm.style.height = "360px";
                                innerDiv.appendChild(ifrm);
                            } else {
                                innerDiv.appendChild(sUrlTabAdd.value);
                            }
                            div.appendChild(innerDiv);
                            $("#divTabContentGenerateMaster").append(div);
                            //  FWrapper.openPopup(sExternalModuleUrl);
                        }
                    }
                }
                MASTERENTRYSCREEN.autocollapse();
            }
        }
        catch (err) {
            alert("Exception : MASETERENTRYSCREEN.externalModuleForTabs " + err.message);
        }
    },
    getExternalModuleButtonCaptions: function () {
        try {
            if (ExternalModuleForMastersObject != undefined) {
                var strLI = "";
                for (var i = 0; i < ExternalModuleForMastersObject.length; i++) {
                    if (ExternalModuleForMastersObject[i].ModuleType == EXTERNALMODULE_TYPE_ENUM.URL && ExternalModuleForMastersObject[i].OnEvent == EXTERNALMODULE_EVENT_ENUM.ON_BUTTON) {
                        var strurl = ExternalModuleForMastersObject[i].ModuleName.toString();
                        strLI = strLI + '<li onclick="MASTERENTRYSCREEN.externalModuleForButtons(this)" data-url=' + strurl + '><a href="#">' + ExternalModuleForMastersObject[i].ButtonCaption + '</a></li>'
                    }
                }
                return strLI;
            }
            return strLI;
        }
        catch (err) {
            alert("Exception : MASTERENTRYSCREEN.getExternalModuleButtonCaptions " + err.message);
        }
    },
    externalModuleForButtons: function (ele) {
        try {
            var sURL = $(ele).attr('data-url');
            if (sURL != undefined && sURL != "") {
                FWrapper.openPopup(sURL);
            }
        }
        catch (err) {
            alert("Exception : MASTERENTRYSCREEN.externalModuleForButtons " + err.message);
        }
    },
    getExternalModuleFunctionKeyEvent: function (evt) {
        var obj = null;

        try {
            obj = {};
            obj.iKeyEvent = 0;
            obj.sSourceId = "";

            if (evt.shiftKey == false && evt.ctrlKey == false && evt.altKey == true) {
                switch (evt.keyCode) {
                    case 112: // F1
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F1");
                        break;
                    case 113: // F2
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F2");
                        break;
                    case 114: // F3
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F3");
                        break;
                    case 115: // F4
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F4");
                        break;
                    case 0: // F5
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F5");
                        break;
                    case 117: // F6
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F6");
                        break;
                    case 118: // F7
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F7");
                        break;
                    case 119: // F8
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F8");
                        break;
                    case 120: // F9
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F9");
                        break;
                    case 121: // F10
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F10");
                        break;
                    case 122: // F11
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F11");
                        break;
                    case 123: // F12
                        obj.iKeyEvent = Focus_Common_DataStructs_MasterExternalModuleEvents.get("Alt_F12");
                        break;
                }

                if (obj.iKeyEvent > 0 && FCommon.UI.isValidObject(evt.target) == true) {
                    obj.sSourceId = evt.target.id;
                }
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{MASTERENTRYSCREEN.EXTERNALMODULE.getExternalModuleFunctionKeyEvent} " + err.message, "Exception");
        }

        return (obj);
    },
    onKeyUpForHotKeys: function (evt) {
        //  //debugger
        var obj = null;
        var objField = null;
        var arrData = null;

        obj = MASTERENTRYSCREEN.getExternalModuleFunctionKeyEvent(evt);
        if (obj.iKeyEvent > 0) {

            var sExternalModuleUrlHotKeys = MASTERENTRYSCREEN.CheckIfExternalModuleEnableForFields(obj.iKeyEvent, obj.sSourceId);
            if (sExternalModuleUrlHotKeys) {
                FWrapper.openPopup(sExternalModuleUrlHotKeys);
            }
            return;
        }
    },
    validateInputNumber: function (eleInput, iType, evt) {
        // 0 For Signed Integer
        // 1 For Unsigned Integer
        // 2 For Signed Decimal
        // 3 For Unsingned Decimal
        var charCode = null;

        try {
            bResult = false;

            if (evt.which == 0 || evt.which == 8) {
                return (true);
            }

            charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode == 45) { // -
                if ((iType == 0 || iType == 2)
                    && eleInput.value.length == 0) { // Signed Integer, Signed Decimal
                    return (true);
                }
            }
            else if (charCode == 46) { // .
                if ((iType == 2 || iType == 3)
                    && eleInput.value.indexOf(".") == -1) { // Signed Decimal, Unsingned Decimal
                    return (true);
                }
            }
            else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                if (eleInput != null && eleInput.getAttribute('data-masterdatatype') == 6) {
                    var arrSplit = eleInput.value.split('.');
                    if (arrSplit != null && arrSplit.length > 1) {
                        var noofdec = eleInput.value.split('.')[1];
                        if (Math.floor(noofdec) != 0 && noofdec.length >= eleInput.getAttribute('data-noofdec')) {
                            return false;
                        }
                    }
                }
                return (true);
            }
        }
        catch (err) {
            COMMON.prototype.showMessage("{ExchangeRate.validateInputNumber} " + err.message, "Exception");
        }

        return (false);
    },
    getTabsHoverFunctionality: function () {
        debugger
        $($(document).find(".ulForTabs li:not(#lastTab)")).hover(function () {
            if (!$(this).hasClass("active")) {
                $(this).css("background-color", "white");
                $($(this).find("a")).addClass("theme_color-inverse");
            }
        }, function () {
            if (!$(this).hasClass("active")) {
                $(this).css("background-color", "");
                $($(this).find("a")).removeClass("theme_color-inverse");
            }
        });
    },
    CheckAllElementsIdenticalInArray: function (array) {
        for (var i = 0; i < array.length - 1; i++) {
            if (array[i] !== array[i + 1]) {
                return false;
            }
        }
        return true;
    },
    GetActTypeById: function (iAccountTypeId) {

        if (iAccountTypeId == 1 ||
            iAccountTypeId == 2 ||
            iAccountTypeId == 5
            || iAccountTypeId == 7
            || iAccountTypeId == 6
            || iAccountTypeId == 8
            || iAccountTypeId == 9
            || iAccountTypeId == 12
            || iAccountTypeId == 17
           || iAccountTypeId == 18
            || iAccountTypeId == 21
            || iAccountTypeId == 23
            || iAccountTypeId == 24
            || iAccountTypeId == 26
            || iAccountTypeId == 28
            || iAccountTypeId == 30
            || iAccountTypeId == 31
            || iAccountTypeId == 33
            || iAccountTypeId == 32
            || iAccountTypeId == 35
            || iAccountTypeId == 36
            || iAccountTypeId == 37
            || iAccountTypeId == 39) {
            iActType = 1;
        }
            // Profit and Loss
        else if (iAccountTypeId == 3 ||
            iAccountTypeId == 4
            || iAccountTypeId == 10 ||
            iAccountTypeId == 11 ||
            iAccountTypeId == 13
            || iAccountTypeId == 14 ||
            iAccountTypeId == 15 ||
            iAccountTypeId == 16
            || iAccountTypeId == 19
            || iAccountTypeId == 20
            || iAccountTypeId == 22
            || iAccountTypeId == 25
            || iAccountTypeId == 27
            || iAccountTypeId == 29
            || iAccountTypeId == 34
            || iAccountTypeId == 38) {
            iActType = 2;
        }
        return iActType;
    },
    SetGroupControlFilter: function (flag, data) {
        //debugger
        if (flag == true && data != null) {
            if (data != null) {
                if (data.ID == 0) {
                    OPTIONCONTROL.setFilter('oc_Group', data.Name);
                }
                else if (data.ID > 0) {
                    COMMON.prototype.showMessage(data.Name);
                }
            }
        }
    },
    ApplyFilterForField: function (element) {
        var Currentvalue;
        var tagArray = []; var bGridControl = false;
        var feildId = $($(element).closest('div')).find('input.clsHiddenOC').attr('data-fieldid');
        if (feildId == undefined) {
            var cid = $(element).attr('id') + "1";
            bGridControl = true;
            feildId = $("#" + cid).attr("data-fieldid");
            if (feildId == undefined) {
                var eleid = $(element).attr('id');
                feildId = document.getElementById(eleid).getAttribute('data-fieldid');

            }
        }
        tagArray.push($(element).attr('id'));
        tagArray.push(feildId);
        var masterid = $('#hdnMasterId').val();
        var Filter = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFilterDataForControl", "GenerateMaster", "Masters"), true,
            { FieldId: feildId, masterId: masterid, bGridControl: bGridControl }, "JSON", false);
        if ($(element).hasClass("clsOptionControl")) {
            Currentvalue = OPTIONCONTROL.getControlValue($(element).attr('id'));

            //@ doing this for body field option controls--in order to get correct value of control based on row index of grid --from input hidden fields maintained for option control.
            var TableRows = $(element).closest('.tableRow');
            if (TableRows != null && TableRows.length > 0) {
                var RowIndex = TableRows[0].rowIndex;
                if (document.getElementById($(element).attr('id') + RowIndex) != null) {
                    Currentvalue = document.getElementById($(element).attr('id') + RowIndex).getAttribute('data-value');
                }
                else {
                    Currentvalue = OPTIONCONTROL.getControlValue($(element).attr('id'));
                }
            }
            else {
                Currentvalue = OPTIONCONTROL.getControlValue($(element).attr('id'));
            }
            //@ ends
        }
        var data = Filter.data;
        var ctrolID = tagArray[0];
        if (Filter.lValue == 1 && data != null) {
            if (data != null && data[0].FilterOnColumn == undefined) {
                var strFiltermessage = ($("#" + ctrolID).attr('data-tablename') == undefined || $("#" + ctrolID).attr('data-tablename') == "") ? " and (iStatus=0)" : "";
                OPTIONCONTROL.setFilter(ctrolID, "(" + data + ") " + strFiltermessage);
                if (Currentvalue != undefined) {
                    if (Currentvalue != "") {
                        OPTIONCONTROL.setControlValue(ctrolID, Currentvalue);
                    }
                }
            }
            else if (data[0].FilterOnColumn != undefined) {
                var ocMandatoryValue = null; var optCtrol = false;
                var controlid = (data[0].FilterOnColumn == "iVoucherType" ? "optiVoucherType" : data[0].FilterOnColumn);
                if ($('#' + controlid).hasClass('FOptionControl')) {
                    var ocdata = OPTIONCONTROL.getControlData(controlid);
                    var controlValue = 0;//OPTIONCONTROL.getControlValue(controlid);
                    if (controlValue == '0') {
                        //@ doing this for body field option controls--in order to get correct value of control based on row index of grid --from input hidden fields maintained for option control.
                        var TableRows = $(element).closest('.tableRow');
                        if (TableRows != null && TableRows.length > 0) {
                            var RowIndex = TableRows[0].rowIndex;
                            if (document.getElementById(controlid + RowIndex) != null) {
                                controlValue = document.getElementById(controlid + RowIndex).getAttribute('data-value');
                            }
                            else {
                                controlValue = OPTIONCONTROL.getControlValue(controlid);
                            }
                        }
                        else {
                            controlValue = OPTIONCONTROL.getControlValue(controlid);
                        }
                        //@ends
                    }
                    optCtrol = true;
                    if (ocdata.length > 2) {
                        //var getPropertyValueArray=COMMON.prototype.getObjectPropertyValueArray(ocdata, true);
                        ocMandatoryValue = ocdata.map(function (a) { return a[data[0].LinkField.toLowerCase()]; })[0]; //ocdata[];//  getPropertyValueArray.value[0];
                    }
                }
                else {
                    var controlValue = $('#' + controlid).val();
                }
                var FilterContent = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFilterDataBasedOnField", "GenerateMaster", "Masters"), true,
                    {
                        FieldId: tagArray[1], masterId: $('#hdnMasterId').val(), ocMandatoryValue: ocMandatoryValue,
                        ControlValue: controlValue, IsOptionControl: optCtrol, bGridControl: bGridControl
                    }, "JSON", false);

                if (FilterContent.lValue == 1 && FilterContent.data != null) {
                    var strFiltermessage = ($("#" + ctrolID).attr('data-tablename') == undefined || $("#" + ctrolID).attr('data-tablename') == "") ? " and (iStatus=0)" : "";
                    if (FilterContent != null && FilterContent.data != null && FilterContent.data.length > 0) {
                        OPTIONCONTROL.setFilter(ctrolID, "(" + FilterContent.data + ")" + strFiltermessage);// .data + " and (iStatus=0 and bGroup=0)");
                        //console.log('Filter -' + OPTIONCONTROL.getFilter(ctrolID));
                    }

                    if (Currentvalue != undefined) {
                        if (Currentvalue != "") {
                            OPTIONCONTROL.setControlValue(ctrolID, Currentvalue);
                        }
                    }
                }
                else {
                    COMMON.prototype.showMessage("Error from FilterContentSuccess");
                }
            }
        }
        else {
            COMMON.prototype.showMessage("Error from filterSuccess");
        }
    },

    DeleteRevision_Success: function (bs, data) {
        //debugger
        if (bs == true && data != null) {
            if (data.data != '-1') {
                $('.btnGenerateMasterclose').trigger('click');
            }
            else {
                COMMON.prototype.showMessage(result.data);
            }
        }
    }



    //onFilterSuccess: function (bs, data, tagArray) {
    //    //
    //    var ctrolID = tagArray[0];
    //    if (bs == true && data != null) {
    //        if (data != null && data[0].FilterOnColumn == undefined) {
    //            OPTIONCONTROL.setFilter(ctrolID, data + " and iStatus=0");
    //        }
    //        else if (data[0].FilterOnColumn != undefined) {
    //            var ocMandatoryValue = null; var optCtrol = false;
    //            var controlid = data[0].FilterOnColumn;
    //            if ($('#' + controlid).hasClass('FOptionControl')) {
    //                var ocdata = OPTIONCONTROL.getControlData(controlid);
    //                var controlValue = OPTIONCONTROL.getControlValue(controlid);
    //                optCtrol = true;
    //                if (ocdata.length > 2) {
    //                    ocMandatoryValue = ocdata[2];
    //                }
    //            }
    //            else {
    //                var controlValue = $('#' + controlid).val();
    //            }
    //            var FilterContent = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFilterDataBasedOnField", "GenerateMaster", "Masters"), true, { FieldId: tagArray[1], masterId: $('#hdnMasterId').val(), ocMandatoryValue: ocMandatoryValue, ControlValue: controlValue, IsOptionControl: optCtrol }, "JSON", true, "MASTERENTRYSCREEN.FilterContentSuccess", ctrolID);
    //        }
    //    }
    //    else {
    //        alert("Error from filterSuccess");
    //    }
    //},
    //FilterContentSuccess: function (bs, data, tagArray) {
    //    //
    //    if (bs == true && data != null) {
    //        OPTIONCONTROL.setFilter(ctrolID, data + " and iStatus=0");
    //    }
    //    else {
    //        alert("Error from FilterContentSuccess");
    //    }
    //}
};

var FOCUS = {
    MASTER: {
        UI: {
            getFieldValueByName: function (WrapperObj) {
                debugger
                var obje = COMMON.prototype.getEmptyResultObject();
                obje.lValue = 0;
                obje.sValue = "";
                obje.data = {};
                try {
                    var FieldName = WrapperObj;
                    var StandardFieldRequest = FOCUS.MASTER.UI.isStandardInternalFieldRequest(FieldName);
                    if (StandardFieldRequest) {
                        obje.data.FieldValue = StandardFieldRequest.objValue;
                        obje.data.sFieldName = FieldName;
                        obje.lValue = 1;
                        return obje;
                    }
                    var obj = FOCUS.MASTER.UI.getFieldObject(FieldName);
                    if (typeof obj == "undefined" || obj == null) {
                        return null;
                    }
                    else {
                        var MasterDataType = $(obj).attr('data-masterdatatype')
                        if (MasterDataType == undefined || MasterDataType == "8" || MasterDataType == "9" || MasterDataType == "2") {
                            if ($(obj).hasClass("clsOptionControl")) {
                                obje.data.FieldValue = OPTIONCONTROL.getControlValue(obj.id);
                                obje.data.FieldText = OPTIONCONTROL.getControlText(obj.id);
                                obje.data.sFieldName = FieldName;
                            }
                            else if ($(obj).hasClass("clsDatePicker")) {
                                obje.data.FieldValue = DATEPICKER.getDate(obj.id);
                                obje.data.FieldText = obj.value;
                                obje.data.sFieldName = FieldName;
                            }
                            else if ($(obj).hasClass("clsTimePicker")) {
                                obje.data.FieldValue = FTIMECONTROL.getTime(obj.id);
                                obje.data.FieldText = obj.value;
                                obje.data.sFieldName = FieldName;
                            }
                            else if (MasterDataType == "8" || MasterDataType == "9") {
                                obje.data.FieldValue = obj.value;
                                obje.data.FieldText = $("#" + obj.id + " :selected").text();
                                obje.data.sFieldName = FieldName;
                            }
                            else if (MasterDataType == "2") {
                                obje.data.FieldValue = $("#" + obj.id).is(":checked");
                                obje.data.sFieldName = FieldName;
                            }
                        }
                        else {
                            if (MasterDataType == "7" || MasterDataType == "10") {
                                obje.data.FieldValue = "";
                                obje.data.FieldText = "";
                                obje.data.sFieldName = FieldName;
                                obje.sValue = MasterDataType == "7" ? "Cannot get Value for Image Type" : "Cannot get Value for DocumentViewer Type";
                                return obje;
                            }
                            else if (MasterDataType == "12" || MasterDataType == "14") {
                                var SelectedId = OPTIONCONTROL.getControlValue(obj.id);
                                if (SelectedId == null || SelectedId == '') {
                                    var ele = document.getElementById(obj.id);
                                    if (ele != null) {
                                        SelectedId = ele.getAttribute('data-value');
                                    }
                                }
                                obje.data.FieldValue = SelectedId == null ? 0 : SelectedId;
                                obje.data.FieldText = OPTIONCONTROL.getControlText(obj.id);
                                obje.data.sFieldName = FieldName;
                                return obje;
                            }
                            else {
                                if ($(obj).attr('data-value') != undefined) {
                                    obje.data.FieldText = $(obj).attr('data-text');
                                    obje.data.FieldValue = $(obj).attr('data-value');
                                    obje.data.sFieldName = FieldName;
                                } else {
                                    obje.data.FieldValue = obj.value;
                                    obje.data.sFieldName = FieldName;
                                }
                            }
                        }
                    }
                    obje.lValue = 1;
                    return (obje);
                }
                catch (Ex) {
                    //alert("Exception: MASTER: getFieldValueByName " + Ex.message);
                    obje.data = null;
                    return obje.sValue = Ex.message;
                }
            },
            setFieldValueByName: function (WrapperObj, iRowIndex, value) {
                debugger
                var FieldName = WrapperObj;
                var obje = COMMON.prototype.getEmptyResultObject();
                obje.lValue = 0;
                obje.sValue = "";
                obje.data = {};
                try {
                    var obj = FOCUS.MASTER.UI.getFieldObject(FieldName);
                    if (typeof obj == "undefined" || obj == null) {
                        obje.sValue = "Field not found";
                        obje.data = obj;
                        return obje;
                    }
                    else {
                        var MasterDataType = $(obj).attr('data-masterdatatype')
                        if (MasterDataType == undefined || MasterDataType == "2") {
                            if ($(obj).hasClass("clsOptionControl")) {
                                OPTIONCONTROL.setControlValue(obj.id, value);
                            }
                            else if ($(obj).hasClass("clsDatePicker")) {
                                DATEPICKER.setDate(obj.id, value, true);
                            }
                            else if ($(obj).hasClass("clsTimePicker")) {
                                FTIMECONTROL.setTime(obj.id, value, true);
                            }
                            else if (MasterDataType == "2") {
                                obj.checked = JSON.parse(value);
                            }
                        }
                        else {
                            if (MasterDataType == '12' || MasterDataType == '14') {
                                var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                OPTIONCONTROL.setControlValue(ctrlid, value, true);
                                $(obj).attr({ "data-value": value, "data-text": OPTIONCONTROL.getControlText(ctrlid) });
                                obj.value = OPTIONCONTROL.getControlText(ctrlid);
                            }
                            else if (MasterDataType == "7" || MasterDataType == "10") {
                                obje.data = null;
                                obje.sValue = MasterDataType == "7" ? "Cannot set Value for Image Type" : "Cannot set Value for DocumentViewer Type";
                                return obje;
                            } else {
                                if (iRowIndex > 0) {
                                    if (MasterDataType == '12' || MasterDataType == '14') {
                                        var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                        OPTIONCONTROL.setControlValue(ctrlid, value, true);
                                        $(obj).attr({ "data-value": value, "data-text": OPTIONCONTROL.getControlText(ctrlid) });
                                        obj.value = OPTIONCONTROL.getControlText(ctrlid);
                                    }
                                    else if (MasterDataType == '4' || MasterDataType == '17' || MasterDataType == '18' || MasterDataType == '19') {
                                        var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                        DATEPICKER.setDate(ctrlid, value, true);
                                        $(obj).attr({ "data-value": value, "data-text": value });
                                        obj.value = OPTIONCONTROL.getControlText(ctrlid);
                                    }
                                    else if (MasterDataType == '5') {
                                        var ctrlid = ((obj.id).match(/[a-z A-Z]+/g)).toString();
                                        FTIMECONTROL.setTime(ctrlid, value, true);
                                        $(obj).attr({ "data-value": value, "data-text": value });
                                        obj.value = $("#" + ctrlid).val();
                                    }
                                    else {
                                        obj.value = value;
                                    }
                                }
                                else {
                                    obj.value = value;
                                }
                            }
                        }
                        if (iRowIndex > 0) {
                            //debugger;
                            MASTERENTRYSCREEN.AddDynamicRow();
                        }
                        obje.lValue = 1;
                        obje.Error = "";
                        return obje;
                    }
                }
                catch (Ex) {
                    alert("Exception: MASTER : setFieldValueByName " + Ex.message);
                }
            },
            getFieldObject: function (FieldName) {
                debugger
                try {
                    var arr = [];
                    var re = RegExp(FieldName, "i");
                    $('*[id]').filter(function () {
                        return re.test(this.id);
                    }).each(function () { arr.push(this) });
                    if (arr.length > 0) {
                        arr.forEach(function (ele) {
                            if (ele.id.toLowerCase() == FieldName.toLowerCase()) {
                                FieldName = ele.id;
                                return;
                            }
                        });
                    }
                    var obj = document.getElementById(FieldName);
                    return obj;
                }
                catch (Ex) {
                    alert("Exception: MASTER: getFieldObject " + Ex.message);
                }
            },
            getSetFieldValueById: function (arrWrapper, bGetValue, isFieldId, iRowIndex, setValue) {
                try {
                    var FieldId = arrWrapper;
                    var arr = [];
                    var re = RegExp(FieldId);
                    $('*[data-fieldid]').filter(function () {
                        if (re.test(this.dataset.fieldid)) {
                            FieldId = this.id;
                        }
                        return FieldId;
                    });
                    if (isFieldId && ($("#" + FieldId).hasClass("clsHiddenOC") || $("#" + FieldId).hasClass("clsHiddenTC") || $("#" + FieldId).hasClass("clsHiddenDC"))) {
                        FieldId = $("#" + FieldId).attr('name');
                    } else {
                        if (isFieldId && iRowIndex > 0) {
                            var ctrlid = (FieldId.match(/[a-z A-Z]+/g)).toString();
                            FieldId = ctrlid + iRowIndex;
                        }
                    }
                    arrWrapper = FieldId;
                    return bGetValue == true ? FOCUS.MASTER.UI.getFieldValueByName(arrWrapper) : FOCUS.MASTER.UI.setFieldValueByName(arrWrapper, iRowIndex, setValue);

                } catch (Ex) {
                    alert("Exception: MASTER: getFieldValueById " + Ex.message);
                }
            },
            getValue: function (arrWrapper, isFieldId, iRowIndex) {
                debugger
                var iCounter = 0;
                var arrField = null;
                var objResult = null;
                var result = null;

                try {

                    if (DataType.isArray(arrWrapper.fieldid) == true) {
                        arrField = arrWrapper.fieldid;
                    }
                    else {
                        arrField = [];
                        arrField.push(arrWrapper.fieldid);
                    }
                    objResult = {};
                    objResult.lValue = [];
                    objResult.sValue = [];
                    objResult.data = [];

                    iRowIndex = FConvert.toInt(iRowIndex);
                    var MasterEntry = document.getElementById('GenerateNewMasterModel');
                    if (MasterEntry == null) {
                        objResult = FOCUS.MASTER.UI.getMasterApiDataForRecord(arrField);
                    }
                    else {

                        for (iCounter = 0; iCounter < arrField.length; iCounter++) {
                            if (!isFieldId) {
                                if (iRowIndex > 0) {                                                           //header
                                    arrField[iCounter].fieldid = arrField[iCounter].fieldid + iRowIndex;
                                }
                                result = FOCUS.MASTER.UI.getFieldValueByName(arrField[iCounter]); //body
                            }
                            else {
                                result = FOCUS.MASTER.UI.getSetFieldValueById(arrField[iCounter], true, isFieldId, iRowIndex, ""); //body
                            }
                            objResult.lValue.push(result.lValue);
                            objResult.sValue.push(result.sValue);
                            objResult.data.push(result.data);
                            //if (!isFieldId) {
                            //    if (iRowIndex > 0) {
                            //        arrWrapper.fieldid = arrWrapper.fieldid + iRowIndex;
                            //    }
                            //    return FOCUS.MASTER.UI.getFieldValueByName(arrWrapper);
                            //} else {
                            //    return FOCUS.MASTER.UI.getSetFieldValueById(arrWrapper, true, isFieldId, iRowIndex);
                            //}
                        }
                    }
                }
                catch (Ex) {
                    alert("Exception => Masters.getValue " + Ex.message);
                    return false;
                }
                return (objResult);
            },
            setValue: function (arrWrapper, isFieldId, iRowIndex) {
                debugger
                var iCounter = 0;
                var arrField = null;
                var arrValue = null;
                var objResult = null;
                var result = null;

                try {
                    if (DataType.isArray(arrWrapper.fieldid) == true) {
                        arrField = arrWrapper.fieldid;
                        arrValue = arrWrapper.value;
                    }
                    else {
                        arrField = [];
                        arrField.push(arrWrapper.fieldid);

                        arrValue = [];
                        arrValue.push(arrWrapper.value);
                    }

                    objResult = {};
                    objResult.lValue = [];
                    objResult.sValue = [];
                    objResult.data = [];

                    iRowIndex = FConvert.toInt(iRowIndex);
                    for (iCounter = 0; iCounter < arrField.length; iCounter++) {
                        if (!isFieldId) {
                            if (iRowIndex > 0) {
                                arrField[iCounter].fieldid = arrField[iCounter].fieldid + iRowIndex;
                            }
                            result = FOCUS.MASTER.UI.setFieldValueByName(arrField[iCounter], iRowIndex, arrValue[iCounter]);
                        }
                        else {
                            result = FOCUS.MASTER.UI.getSetFieldValueById(arrField[iCounter], false, isFieldId, iRowIndex, arrValue[iCounter]);
                        }
                        objResult.lValue.push(result.lValue);
                        objResult.sValue.push(result.sValue);
                        objResult.data.push(result.data);
                    }

                } catch (ex) {
                    alert("Exception -> Masters.setValue: " + ex.message);
                    return (false);
                }
                return (objResult);
            },
            isStandardInternalFieldRequest: function (strFieldName) {
                //debugger
                var Tag = {};
                try {
                    var masterid = 0;
                    switch (strFieldName.toLowerCase()) {
                        case "mastertypeid":
                            Tag.objValue = document.getElementById("hdnMasterTypeId").value;
                            return Tag;
                            break;
                        case "masterid":
                            masterid = document.getElementById("hdnMasterId").value;
                            Tag.objValue = masterid;
                            return Tag;
                            break;
                        case "parentid":
                            Tag.objValue = document.getElementById("hdnParentId").value;
                            return Tag;
                            break;
                        case "isgroup":
                            Tag.objValue = document.getElementById("hdnIsgroup").value;
                            return Tag;
                            break;
                        case "treeid":
                            Tag.objValue = document.getElementById("hdnTreeId").value;
                            return Tag;
                            break;
                        case "mastername":
                            Tag.objValue = document.getElementById("hdnMasterEntryName").value;
                            return Tag;
                            break;
                        case "status":
                            Tag.objValue = document.getElementById("hdnStatus").value;
                            return Tag;
                            break;
                        case "createdby":
                            masterid = document.getElementById("hdnMasterId").value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblCreatedBy").text();
                            } else {
                                Tag.objValue = document.getElementById("hdnUserId").value;
                            }
                            return Tag;
                            break;
                        case "createddate":
                            masterid = document.getElementById("hdnMasterId").value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblCreatedDate").text();
                            } else {
                                var d = new Date();
                                Tag.objValue = d.toLocaleDateString();
                            }
                            return Tag;
                            break;
                        case "modifiedby":
                            masterid = document.getElementById("hdnMasterId").value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblModifiedBy").text();
                            } else {
                                Tag.objValue = document.getElementById("hdnModifiedUserId").value;
                            }
                            return Tag;
                            break;
                        case "modifieddate":
                            masterid = document.getElementById("hdnMasterId").value;
                            if (parseInt(masterid) > 0) {
                                Tag.objValue = $("#lblModifiedDate").text();
                            } else {
                                var d = new Date();
                                Tag.objValue = d.toLocaleDateString();
                            }
                            return Tag;
                            break;
                        case "selectedmasterids":
                            if (GridrowidValues != undefined)
                                Tag.objValue = GridrowidValues;
                            return Tag;
                            break;
                        default:
                            return false;
                            break;
                    }
                }
                catch (Ex) {
                    alert("Exception => Masters: isStandardInternalFieldRequest " + Ex.message);
                    return false;
                }
            },
            getMandatoryFields: function (MasterTypeId) {
                var objResult = {};
                objResult.lValue = [];
                objResult.sValue = [];
                objResult.data = [];

                try {
                    var arrFieldsEle = document.getElementsByClassName('clsIsMandatory');
                    if (arrFieldsEle != null && arrFieldsEle.length > 0) {
                        for (var i = 0; i < arrFieldsEle.length; i++) {
                            objResult.data.push(arrFieldsEle[i].id.toString());
                        }
                    }
                }
                catch (error) {
                    alert("Exception => Masters.getMandatoryFields " + error.message);
                    return false;
                }
                return (objResult);
            },
            getMasterApiDataForRecord: function (arrFieldNames) {
                debugger
                var MasterEntry = document.getElementById('GenerateNewMasterModel');
                var obje = COMMON.prototype.getEmptyResultObject();

                objResult = {};
                objResult.lValue = [];
                objResult.sValue = [];
                objResult.data = [];

                //obje.lValue = 0;
                //obje.sValue = "";
                //obje.data = {};
                if (MasterEntry == null) {
                    var MasterTypeId = document.getElementById('ObjMasterScreenStructure_MasterTypeId').value;
                    var MasterId = parseInt($($("#landgridData").find("tr.FRowColor")).find('td.ClsMaster')[0].innerHTML.trim());
                    var ResultData = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetMasterDataForExtModule", "GenerateMaster", "Masters"),
            true, { MasterTypeId: MasterTypeId, MasterId: MasterId, arrFieldNames: arrFieldNames }, "JSON", false, '', "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
                    if (ResultData != null && ResultData.data.length > 0) {


                        for (var x = 0; x < arrFieldNames.length; x++) {

                            if (ResultData.data.filter(t=>t.Name == arrFieldNames[x]).length > 0) {

                                var data = ResultData.data.filter(t=>t.Name == arrFieldNames[x])[0];
                                obje = {};
                                obje.sValue = '';
                                obje.lValue = 1;
                                obje.data = {};
                                obje.data.FieldValue = data.Tag;
                                obje.data.FieldText = '';
                                obje.data.sFieldName = data.Name;

                                objResult.sValue.push(obje.sValue);
                                objResult.lValue.push(obje.lValue);
                                objResult.data.push(obje.data);
                            }
                            else {
                                obje = {};
                                obje.sValue = '';
                                obje.lValue = 1;
                                obje.data = {};
                                obje.data.FieldValue = '';
                                obje.data.FieldText = '';
                                obje.data.sFieldName = arrFieldNames[x];


                                objResult.sValue.push(obje.sValue);
                                objResult.lValue.push(obje.lValue);
                                objResult.data.push(obje.data);
                            }

                        }
                        //for (var i = 0; i < ResultData.data.length; i++) {

                        //    obje.lValue = 1;
                        //    obje.data.FieldValue = ResultData.data[i].Tag;
                        //    obje.data.FieldText = '';
                        //    obje.data.sFieldName = ResultData.data[i].Name;

                        //    objResult.sValue.push(obje.sValue);
                        //    objResult.lValue.push(obje.lValue);
                        //    objResult.data.push(obje.data);

                        //}
                    }
                }
                return objResult;
            }
        }
    }
}



var newMaster = {
    settingHeight: function () {
        //
        //debugger
        var divTabContentGenerateMaster = document.getElementById("divTabContentGenerateMaster");
        if (divTabContentGenerateMaster != null) {
            if ($("#divTabContentGenerateMaster").closest("#newMasterForOCModal").length > 0) {
                //divTabContentGenerateMaster.style.height = // GLOBAL.getPageHeight() - (divTabContentGenerateMaster.getBoundingClientRect().top + 185) + "px";
            }
            else {
                divTabContentGenerateMaster.style.height = GLOBAL.getPageHeight() - (divTabContentGenerateMaster.getBoundingClientRect().top + 35) + "px";
            }
            if ($("#ulCommonlyUsedRibbon").length == "1") {
                var divTreeMenu = document.getElementById("divTreeMenu");
                divTreeMenu.style.height = GLOBAL.getPageHeight() - (divTreeMenu.getBoundingClientRect().top - 10) + "px";
                var divSecondsub = document.getElementById("divSecondsub");
                divSecondsub.style.height = GLOBAL.getPageHeight() - (divSecondsub.getBoundingClientRect().top - 43) + "px";
                if ($("#hdnMasterTypeId").val() == "2") {
                    //$("#divSecondsub").addClass('overflowNone');
                }
            }
            else {
                for (var i = 0; i < $('.clsdivSecondsub').length; i++) {
                    var divTreeMenu = document.getElementById("divTreeMenu" + i);
                    divTreeMenu.style.height = GLOBAL.getPageHeight() - (divTreeMenu.getBoundingClientRect().top - 30) + "px";
                    var divSecondsub = document.getElementById("divSecondsub" + i);
                    divSecondsub.style.height = GLOBAL.getPageHeight() - (divSecondsub.getBoundingClientRect().top - 50) + "px";
                }
            }

            //var divForTblNewMasterGenerator = document.getElementById("divForTblNewMasterGenerator");
            //divForTblNewMasterGenerator.style.height = GLOBAL.getPageHeight() - (divForTblNewMasterGenerator.getBoundingClientRect().top - 15) + "px";
            if ($('#divNewMasterForOCModalBody').length > 0) {
                //  //
                if ($('#divTabContentGenerateMaster').find('.tabsTable').length > 0) {
                    $('#divNewMasterForOCModalBody').css({ 'overflow': 'auto' });
                }
                else {
                    $('#divNewMasterForOCModalBody').css({ 'overflow': '' });
                }
            }
        }
    }
}

File.prototype.convertToBase64 = function (callback, imgId, ele) {
    if (typeof (window.FileReader) != "undefined") {
        var FR = new FileReader();
        FR.onload = function (e) {
            //
            callback(e.target.result)
            if (imgId != "") {
                $('#' + imgId).attr('src', e.target.result);
            }
        };

        FR.readAsDataURL(ele);
        // FileAPIProxy.swfObject.read(this, this.name, 'readAsDataURL');
    }
}
//// $($('.clstblMasterNewGeneratorBody tr:last-child()').addClass('hiddenRow')).hide();
// $($($($('.ulForTabs').find('li.active')).find('a').attr('href')).find('#tblMasterNewGeneratorBody tr')).on("click", function () {

$(document).ready(function () {
    debugger
    $(".ContextMenu").hide(500);
    if ($("#oc_Group").length > 0) {
        //OPTIONCONTROL.setFilter('oc_Group', "a.bGroup=1 and a.iStatus=0");
        if ($('#hdnMasterTypeId').val() == "1" || $('#hdnMasterTypeId').val() == "50") {
            //debugger
            if (GroupControlFilter != undefined && GroupControlFilter.length > 0) {
                OPTIONCONTROL.setFilter('oc_Group', GroupControlFilter);
                if ($('#hdnButtonClickName').val() == 'btnMasterEdit') {
                    var ParentId = document.getElementById('hdnParentId');
                    if (ParentId != null && ParentId != undefined) {
                        OPTIONCONTROL.setControlValue('oc_Group', ParentId.value)
                    }
                }
            }
        }
        var ParentIdEle = document.getElementById('hdnParentId');
        if (ParentIdEle.value.length > 0 && $('#hdnMasterId').val() == 0) {
            OPTIONCONTROL.setControlValue('oc_Group', ParentIdEle.value);
        }

    }
    if ($('#hdnMasterTypeId').val() == "4") {
        var BinEle = document.getElementById("iBins_data");
        if (BinEle != null) {
            WarehouseBinvalue = BinEle.getAttribute("data-imasterid");
        }
    }
    if ($('#hdnMasterTypeId').val() == "1") {
        var iPaymentTerms = document.getElementById("iPaymentTerms");
        if (iPaymentTerms != null) {
            document.getElementById('hdnPaymentTermValue').value = OPTIONCONTROL.getControlValue('iPaymentTerms');
        }
    }
    COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "newMaster.settingHeight");

    // bind onfocus event on fields who have formula linked to it
    //debugger
    var Elements = document.querySelectorAll("[data-formula]");
    if (Elements != null && Elements.length > 0) {
        for (var i = 0; i < Elements.length; i++) {
            var Formula = Elements[i].getAttribute('data-formula');
            if (Formula != null && Formula.length > 0) {
                var Ele = Elements[i].id;
                Elements[i].onfocus = function () {

                    MASTERENTRYSCREEN.EvaluateFormula(this);
                };
            }
        }
    }
    // bind onfocus events on fields who have formula linked to it
    if (document.getElementById('iRevisionDate') != null) {
        iRevisionDate = DATEPICKER.getDate('iRevisionDate');
    }


    /// Code was outside of ready function
    $('.tabsTable').find('input[type=text],input[type=number]').css({ 'border': '1px black' });
    if (parseInt($('#txtRevision').val()) < parseInt($('#hdnCurrentRevisionId').val())) {
        $('#btnMasterRevisionSaveClick').prop('disabled', true);
        $('#btnMasterRevisionDeleteClick').prop('disabled', true);
        $('#btnMasterRevisionDeleteClick').addClass('grey');
        $('#btnMasterSaveClick').prop('disabled', true);
    }
    else {
        $('#btnMasterRevisionSaveClick').prop('disabled', false);
        $('#btnMasterRevisionDeleteClick').prop('disabled', false);
        $('#btnMasterRevisionDeleteClick').removeClass('grey');
        $('#btnMasterSaveClick').prop('disabled', false);
    }
    if (parseInt($('#hdnCurrentRevisionId').val()) == 0) {
        $('#btnMasterRevisionDeleteClick').prop('disabled', true);
        $('#btnMasterRevisionDeleteClick').addClass('grey');
    }

    //$('#newMasterDiv0').addClass('show active');

    //$(".ulForTabs li").each(function (index) {
    //    debugger
    //    var visibleDivs = $($("#newMasterDiv" + index).find("div.container-fluid")).find(".col-lg-6").not(".clsDivHidden");
    //    var visibleDivsTables = $($("#newMasterDiv" + index).find("div.container-fluid")).find(".divTables");
    //    if (visibleDivs.length == 0) {
    //        if (visibleDivsTables.length == 0) {
    //            $(this).hide();
    //            }
    //    }
    //    $(visibleDivsTables).each(function () {
    //        debugger
    //        var arr = [];
    //        if ($(this).attr("id") != "divForTblNewMasterGenerator") {
    //            $(this).find('.tabsTable th').each(function () {
    //                if ($(this).css("display") == "table-cell") {
    //                    arr.push(true);
    //                }
    //            });
    //            if (arr.length <= 1)
    //                $($(".ulForTabs li")[index]).hide();
    //        }

    //    });
    //});
    //   $(".ulForTabs").show();

    if ($('#hdnTabsCount').val() == "1") {
        $('.ulForTabs ').css('display', 'none');
    }
    else {
       // $('.ulForTabs ').css('display', 'block');
    }

    if ($('#divForTblNewMasterGenerator').hasClass('padding0')) {
        $('#divForTblNewMasterGenerator').css('overflow', '')
    }
    if ($('#hdnButtonClickName').val() == 'btnClone') {
        $('#sName').val('');
        $('#sCode').val('');
        $('#sCode').attr('readonly', false);
    }
    else if ($('#hdnButtonClickName').val() == 'btnNew' || $('#hdnButtonClickName').val() == 'btnAddGroup' || $('#hdnButtonClickName').val() == 'btnGroup') {
        $('#btnMasterClone,#btnMasterCopy,#btnMasterAction').css('pointer-events', "none");
        $('#btnMasterClone,#btnMasterCopy,#btnMasterAction').addClass('grey')
    }



    //@call copyfrom parent if any 
    if ($('#hdnButtonClickName').val() == 'btnNew' || $('#hdnButtonClickName').val() == 'btnAddGroup') {
        var ParentId = document.getElementById('hdnParentId').value;
        var iMasterId = parseInt(document.getElementById('hdnMasterId').value);
        if (ParentId != undefined && ParentId != null && ParentId > 0 && iMasterId != null && iMasterId != undefined && iMasterId == 0) {
            MASTERENTRYSCREEN.SetCopyFromParent();
        }
    }

    ////

    if ($('.IncrementalBehaviour').length > 0) {
        $('.IncrementalBehaviour').each(function () {


            MASTERENTRYSCREEN.SetIncremental(this);
            //var ControlWithIncrementalBehaviour = $(this);
            //var IncrementalBehaviourId = ControlWithIncrementalBehaviour.attr('data-incrementfieldname');
            //var IsOnLoadIncrement = ControlWithIncrementalBehaviour.attr('data-IsOnLoadIncrement');
            //if (IncrementalBehaviourId != '') {
            //    IncrementalBehaviourId = IncrementalBehaviourId.split(',');
            //    IncrementalBehaviourId = IncrementalBehaviourId.filter(function (n) { return n != "" });
            //    if (MASTERENTRYSCREEN.CheckAllElementsIdenticalInArray(IncrementalBehaviourId)) {
            //        if (IsOnLoadIncrement=="True" && $("#hdnMasterId").val() <= 0) {
            //            MASTERENTRYSCREEN.getIncrementalValue(this, ControlWithIncrementalBehaviour);
            //        }
            //        else {
            //            $(document).on('blur', '#' + IncrementalBehaviourId[0], function () {
            //                MASTERENTRYSCREEN.getIncrementalValue(this, ControlWithIncrementalBehaviour);
            //            })
            //        };
            //    } else {
            //        for (var i = 0; i < IncrementalBehaviourId.length; i++) {
            //            //
            //            if (IncrementalBehaviourId[i] != "")
            //                $(document).on('blur', '#' + IncrementalBehaviourId[i], function () {
            //                    //debugger
            //                    MASTERENTRYSCREEN.getIncrementalValue(this, ControlWithIncrementalBehaviour);
            //                });
            //        }
            //    }

            //}
        });
    }
    if ($('.hdnSelection').length > 0) {
        $('.hdnSelection').each(function () {
            var ctrlid = $(this).attr('data-id');
            var ctrlValue = $(this).attr('data-value');
            $('#' + ctrlid).val(ctrlValue);
        });
    }
    if ($('.clsBinCapacity').length > 0) {
        $('.clsBinCapacity').blur(function () {
            //////debugger
            var BinCapacity = $(this).attr('id');
            var changedBinCapcity = $(this).val();
            var tagArray = [];
            tagArray.push($(this).val());
            tagArray.push(BinCapacity);
            var objProductBinCapacityDetails = NETWORK.executeServerMethod(GLOBAL.getContextPath("checkBinCapacity", "GenerateMaster", "Masters"),
                true, { masterId: $("#hdnMasterId").val(), mastertypeId: $("#hdnMasterTypeId").val() }, "JSON", false, "MASTERENTRYSCREEN.BinCapacitySuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd", tagArray);
        });
    }
    if ($('#hdnButtonClickName').val() == 'btnClone') {

        MASTERENTRYSCREEN.onBtnCloneClick();
    }
    var MasterRuleCall = null;
    //
    if ($('#hdnMasterTypeId').val() != undefined) {
        //debugger
        console.log('getMasterRules Server Starts: ', new Date().toLocaleString());
        var MasterViewId = $('#SelectedViewId').val();
        MasterRuleCall = NETWORK.executeServerMethod(GLOBAL.getContextPath("getMasterRules", "GenerateMaster", "Masters"), true, { masterTypeId: $('#hdnMasterTypeId').val(), MasterViewId: MasterViewId }, "JSON", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //
        console.log('getMasterRules Server ends and rendering starts: ', new Date().toLocaleString());
        if (MasterRuleCall.lValue != 0 && MasterRuleCall.data != null) {
            for (var i = 0; i < MasterRuleCall.data.length; i++) {
                //
                var contrlID = MasterRuleCall.data[i].FieldName;
                var MasterEvaluateOn = "";
                //  if (!$('#' + contrlID).hasClass('clsHasRules')) {
                if ((MasterRuleCall.data[i].Group == true && $('#hdnIsgroup').val() == "True") || (MasterRuleCall.data[i].NewRecord == true && $('#hdnButtonClickName').val() == 'btnNew') ||
                    (MasterRuleCall.data[i].Edit == true && $('#hdnButtonClickName').val() == 'btnMasterEdit')) {

                    $('#' + contrlID).addClass('clsHasRules');
                    var ruleid = $('#' + contrlID).attr('data-ruleid');
                    var evalON = $('#' + contrlID).attr('data-evaluateon');
                    if (ruleid != undefined && ruleid != '/') {
                        $('#' + contrlID).attr('data-ruleid', ruleid + ',' + MasterRuleCall.data[i].RuleId);
                    }
                    else {
                        $('#' + contrlID).attr('data-ruleid', MasterRuleCall.data[i].RuleId);
                    }
                    if (MasterRuleCall.data[i].BeforeDelete == true) {
                        MasterEvaluateOn += "BeforeDelete";
                    }
                    if (MasterRuleCall.data[i].BeforeSave == true) {
                        MasterEvaluateOn += ",BeforeSave";
                        $('#' + contrlID).addClass('clsBeforeSave');
                    }
                    if (MasterRuleCall.data[i].Load == true) {
                        MasterEvaluateOn += ",Load";
                    }
                    if (MasterRuleCall.data[i].OnEnter == true) {
                        MasterEvaluateOn += ",OnEnter";
                    }
                    if (MasterRuleCall.data[i].OnLeave == true) {
                        MasterEvaluateOn += ",OnLeave";
                    }
                    if (evalON != undefined && evalON != '/') {
                        $('#' + contrlID).attr('data-evaluateon', evalON + ',' + MasterEvaluateOn);
                    }
                    else {
                        $('#' + contrlID).attr('data-evaluateon', MasterEvaluateOn);
                    }

                    //@ added this block to set all the rules on masterlevel for option control,class 'clsHiddenHasRules' and 'data-evaluateon' is used to get rule formatting for the rule
                    // this class and attribute are added while rendering on server if rules are applied on fieldlevel,in cases on masterlevel these were not added while rendering ,hence adding this through ajax result got from above call.
                    if ($('#' + contrlID).hasClass('clsOptionControl')) {
                        var eleInputHdn = document.getElementById('hdn' + contrlID);
                        if (eleInputHdn != null && eleInputHdn != undefined) {
                            if (eleInputHdn.classList.contains("clsHiddenHasRules") == false) {
                                eleInputHdn.classList.add("clsHiddenHasRules");
                                eleInputHdn.setAttribute('data-evaluateon', MasterEvaluateOn);
                            }
                        }
                        //var dataEvaluateOn = $($(this).closest('table').parent().find('input.clsHiddenHasRules')).attr('data-evaluateon');
                    }

                }

                //  }

            }
            console.log('getMasterRules rendering ends: ', new Date().toLocaleString());
        }
        else {
            COMMON.prototype.showMessage('Error in Master Rule');
        }

        if ($('#hdnMasterTypeId').val() == "1") {
            //////debugger
            var AccountOrProdValue = $('#hdnAccountOrProdValue').val() == '0' ? "1" : $('#hdnAccountOrProdValue').val();
            $('#iAccountType').val(AccountOrProdValue);
            $('#iAccountType').attr("data-oldvalue", $('#iAccountType').val());
            var AccountTypeTextForTransExist = $('#iAccountType').find("option:selected").text();
            MASTERENTRYSCREEN.FluxPayAndIciciHandle($("#iAccountType").val(),true);//onload
            //if ($('#hdnButtonClickName').val() == 'btnMasterEdit') {
            $(document).on('change', '#iAccountType', function () {
                //   debugger
                //var comboText = $(this).find("option:selected").text();
                //var balancesheet = BalanceSheetArray.indexOf(AccountTypeTextForTransExist) > -1 && BalanceSheetArray.indexOf(comboText) > -1;
                //var profitandloss = ProfitLossArray.indexOf(AccountTypeTextForTransExist) > -1 && ProfitLossArray.indexOf(comboText) > -1;
                MASTERENTRYSCREEN.FluxPayAndIciciHandle($("#iAccountType").val(),false);

                if ($('#hdnButtonClickName').val() == 'btnMasterEdit') {
                    if ($("#hdnMasterTypeId").attr("data-btransexist") == "True") {
                        var m_AccountTypeVal = $('#iAccountType').attr("data-oldvalue");
                        if (!((m_AccountTypeVal == 5 && parseInt($(this).val()) == 7)
                                || (m_AccountTypeVal == 6 && parseInt($(this).val()) == 7))) {
                            var SourceType = MASTERENTRYSCREEN.GetActTypeById(parseInt(m_AccountTypeVal));
                            var DestinationType = MASTERENTRYSCREEN.GetActTypeById(parseInt($(this).val()));
                            if (SourceType != DestinationType) {
                                COMMON.prototype.showMessage($("#hdnMasterTypeId").attr("data-msgtransexsitforvalidation"));
                                $("#iAccountType").val(m_AccountTypeVal);
                                return false;
                            }
                        }
                    }
                }
                if (document.getElementById('oc_Group') != null) {
                    //debugger//
                    var AccountType = $('#iAccountType').val();
                    NETWORK.executeServerMethod(
                                 GLOBAL.getContextPath("GetGroupOptionControlFilter", "GenerateMaster", "Masters"),
                                     true,
                                     { SelectedType: AccountType, iMasterTypeId: $('#hdnMasterTypeId').val() },
                                     "json",
                                     true,
                                     "MASTERENTRYSCREEN.SetGroupControlFilter",
                                     "GLOBAL.LoadingStart",
                                     "GLOBAL.LoadingEnd");

                }


            });

            //@customerportal, case to make it readonly if this bAllowCustomerPortal is already saved
            var elebAllowCustomerPortal = document.getElementById('bAllowCustomerPortal');
            if (elebAllowCustomerPortal != null && elebAllowCustomerPortal != undefined) {
                if (elebAllowCustomerPortal.checked == true) {
                    elebAllowCustomerPortal.disabled = true;
                }
            }
            //ends
            //@ hiding sPortalEmail field based on pref setting
            var ele = document.getElementById('hdnMasterTypeId');
            if (ele != null && ele != undefined && ele.getAttribute('data-CustomerPortal') == 0) {
                var sPortalEmailEle = document.getElementById('sPortalEmail');
                if (sPortalEmailEle != null) {
                    sPortalEmailEle.style.display = "none";
                    $($(sPortalEmailEle).closest('div.ruleHidden')).css('display', 'none');
                }
            }

            //}
        }
        else if ($('#hdnMasterTypeId').val() == "2") {
            debugger
            if (Elements[28].defaultValue =="")
            {
                $("#SaveImg").removeAttr('href');
            }
            var Is3PLEnabled = document.getElementById('hdnIs3PLEnabled').value;
            var AccountOrProdValue = $('#hdnAccountOrProdValue').val() == '0' ? "1" : $('#hdnAccountOrProdValue').val();
            var iMasterId = parseInt(document.getElementById('hdnMasterId').value);
            var iProductType = document.getElementById('iProductType').value;
            $('#iProductType').val(AccountOrProdValue);
            $("#iValuationMethod").val($('#hdnAccountOrProdValue').attr('data-valuationtype'));
            //  alert($('#hdnIsgroup').val())
            if ($('#hdnParentId').val() > "0" && ($('#hdnButtonClickName').val() == 'btnNew' || $('#hdnButtonClickName').val() == 'btnMasterEdit')) {
                //commentted as per mahmood sir for product master only--05/10/2018
                //$('#iProductType').attr('disabled', true);
                //$('#iProductType').addClass('grey');
            }
            if (AccountOrProdValue > "0" && $('#hdnParentId').val() > 0 && $('#hdnButtonClickName').val() == 'btnNew') {
                //commentted as per mahmood sir for product master only--05/10/2018
                //$('#iProductType').attr('disabled', true);
                //$('#iProductType').addClass('grey');
            }
            if ($("#hdnMasterTypeId").attr("data-btransexist") == "True") {
                //@ need to remove disablity condition ,if trans exist but value is not there unit field should be enable ,if value exists let it be disable

                var BaseUnitValue = OPTIONCONTROL.getControlValue("iDefaultBaseUnit");
                if (BaseUnitValue == null && iMasterId > 0) {
                    OPTIONCONTROL.disableControl("iDefaultBaseUnit", false);
                }
                else if (BaseUnitValue != null && parseInt(BaseUnitValue) <= 0 && iMasterId > 0) {
                    OPTIONCONTROL.disableControl("iDefaultBaseUnit", false);
                }
                else {
                    OPTIONCONTROL.disableControl("iDefaultBaseUnit", true);
                }
            }
            if (iMasterId > 0) {
                MASTERENTRYSCREEN.AddRestrictionForUpdateStocks();
            }
            if (Is3PLEnabled != null && Is3PLEnabled != undefined && Is3PLEnabled == 1) {
                MASTERENTRYSCREEN.Units3PlValidation();
                if ($("#hdnMasterTypeId").attr("data-btransexist") == "True") {
                    if (document.getElementById('iPalletUnit') != null) {
                        document.getElementById('iPalletUnit').disabled = true;
                    }
                    if ($("#hdnMasterTypeId").attr("data-IsUpdateStockbTransExist") == "True") {
                        if (document.getElementById('fPalletQty') != null) {
                            document.getElementById('fPalletQty').disabled = true;
                        }
                        if (document.getElementById('iBinCapacity') != null) {
                            document.getElementById('iBinCapacity').disabled = true;
                        }
                    }
                }
                var eleServiceType = document.getElementById('iServicetype');
                if (iProductType == 1)//@service
                {

                    if (eleServiceType != null && eleServiceType != undefined) {
                        $(document.getElementById('iServicetype')).closest('.clsDivHidden').css('display', 'block');
                    }
                }
                else {
                    if (eleServiceType != null && eleServiceType != undefined) {
                        $(document.getElementById('iServicetype')).closest('.clsDivHidden').css('display', 'none');
                    }
                }
            }
        }
        $(document).on("blur", "#iAccountType,#iProductType", function (e) {
            MASTERENTRYSCREEN.CheckTabPageExternalOnAccountTypeChange($(this).val());
            e.stopImmediatePropagation();
        });

        if ($('#hdnMasterTypeId').val() == "14") {
            if (document.getElementById('iPRAccountType') != null) {
                let StockBField = document.getElementById('bStockBalance');
                let PriceField = document.getElementById('bPriceList');
                if (StockBField != null && PriceField != null) {

                    if (document.getElementById('iPRAccountType').value == 6) {
                        document.getElementById('bStockBalance').disabled = true;
                        document.getElementById('bPriceList').disabled = true;
                    }
                    $(document).on('change', '#iPRAccountType', function () {
                        debugger
                        if (document.getElementById('iPRAccountType').value == 6) {
                            document.getElementById('bStockBalance').disabled = true;
                            document.getElementById('bPriceList').disabled = true;
                        }
                        else if (document.getElementById('iPRAccountType').value == 5) {
                            document.getElementById('bStockBalance').disabled = false;
                            document.getElementById('bPriceList').disabled = false;
                        }
                    })
                }
            }



        }

        if (Is3PLEnabled == 1) {
            $(document).on('change', '#iProductType', function () {
                if (document.getElementById('iProductType').value == 1)//@service 
                {
                    $(document.getElementById('iServicetype')).closest('.clsDivHidden').css('display', 'block');
                }
                else {
                    $(document.getElementById('iServicetype')).closest('.clsDivHidden').css('display', 'none');
                }

            });
        }

    }
    if (document.getElementById('hdnIs3PLEnabled') != null && document.getElementById('hdnIs3PLEnabled').value == 1 && $('#hdnMasterTypeId').val() == "1006") {
        var iMasterId = parseInt(document.getElementById('hdnMasterId').value);
        if (iMasterId > 0)//edit mode
        {
            //@storerportal, case to make it readonly if this bAllowstorerPortal is already saved with checked value.
            var elebAllowStorerPortal = document.getElementById('bAllowStorerPortal');
            if (elebAllowStorerPortal != null && elebAllowStorerPortal != undefined) {
                if (elebAllowStorerPortal.checked == true) {
                    elebAllowStorerPortal.disabled = true;
                }
            }
            //ends

        }
    }
    if ($('.clsHasRules').length > 0) {
        console.log('clsHasRules rendering ends: ', new Date().toLocaleString());
        $('.clsHasRules').each(function (e) {
            //debugger;
            if ($(this).hasClass('clsOptionControl')) {
                var dataEvaluateOn = $($(this).closest('table').parent().find('input.clsHiddenHasRules')).attr('data-evaluateon');
            }
            else if ($(this).hasClass('clstxtOptionControl')) {
                var dataEvaluateOn = $(this).attr('data-evaluateon');
            }
            else {
                var dataEvaluateOn = $(this).attr('data-evaluateon');
            }
            MASTERENTRYSCREEN.setRulesForControls($(this), dataEvaluateOn, e);
        });
        console.log('clsHasRules rendering ends: ', new Date().toLocaleString());
    }
    if (MasterRuleCall != null && MasterRuleCall.lValue != 0 && MasterRuleCall.data != null) {
        //debugger
        var rulesForLoad = MasterRuleCall.data.filter(x=>x.Load == true);
        {
            for (var i = 0; i < rulesForLoad.length; i++) {
                //var elemnt = $($this).hasClass('clstxtOptionControl') ? $('#' + octrlid) : $($this);
                if (document.getElementById(rulesForLoad[i].FieldName) != null) {
                    MASTERENTRYSCREEN.getControlRules(document.getElementById(rulesForLoad[i].FieldName), 'Load', null);
                }
            }
        }


    }

    if ($('#hdnMasterTypeId').val() == "601") {
        iDepreciationMethodValue = $("#iDepreciationMethod").val();
        var iMasterId = document.getElementById('hdnMasterId');
        var isFromTrans = document.getElementById('hdnNewMasterOCValue');

        if ($('#hdnMasterTypeId').val() == "601") {
            MASTERENTRYSCREEN.ApplyFixedAssetPreference();
        }
        if (iMasterId != null && iMasterId != undefined && iMasterId.value == 0) {
            if (isFromTrans != null && isFromTrans != undefined && isFromTrans.value == "True") {
                debugger
                var GetCustomData = localStorage.getItem('customTagObject');
                if (GetCustomData != null) {
                    var TransFixAData = JSON.parse(GetCustomData);
                    if (TransFixAData != null) {
                        var arrFields = TransFixAData['lstIdNamePair'];
                        if (arrFields != null) {
                            for (var i = 0; i < arrFields.length; i++) {
                                var idnamePair = arrFields[i];
                                var UiControl = document.getElementById(idnamePair.Name);
                                if (UiControl != null && UiControl != undefined) {
                                    var datatype = UiControl.getAttribute('data-masterdatatype');
                                    if (datatype != null && datatype != undefined) {
                                        if (datatype == 12 || datatype == 14) {
                                            //for masters
                                            OPTIONCONTROL.setControlValue(UiControl.id, (idnamePair.Tag == null || idnamePair.Tag == undefined) ? 0 : idnamePair.Tag);
                                        }
                                        else if (datatype == 4 || datatype == 17 || datatype == 18 || datatype == 19) {
                                            //for dates
                                            DATEPICKER.setDate(UiControl.id, (idnamePair.Tag == null || idnamePair.Tag == undefined) ? 0 : idnamePair.Tag, true);

                                        } else {
                                            UiControl.value = (idnamePair.Tag == null || idnamePair.Tag == undefined) ? "" : idnamePair.Tag;
                                        }

                                    } else {
                                        if (UiControl.classList != null && UiControl.classList.contains('clsDatePicker')) {
                                            DATEPICKER.setDate(UiControl.id, (idnamePair.Tag == null || idnamePair.Tag == undefined) ? 0 : idnamePair.Tag, true);
                                        }
                                    }
                                }
                            }
                            var IsNewMasterFromOc = document.getElementById('hdnNewMasterOCValue') != null ? document.getElementById('hdnNewMasterOCValue').value : "False";
                            if (IsNewMasterFromOc == "True") {//@calling this after fixed asset master sets all input values passed from trans screen.
                                if ($('.IncrementalBehaviour').length > 0) {
                                    $('.IncrementalBehaviour').each(function () {
                                        MASTERENTRYSCREEN.SetIncremental(this, true);
                                    });
                                }
                            }

                        }
                    }
                }
            }
        }

    }
    if ($('#hdnMasterTypeId').val() == "1005") {//skid master
        var prefixValue = $("#sPrefix").val();
        $(document).on("change", "#sPrefix", function () {
            if ($("#hdnMasterTypeId").attr("data-bskidexist") == "True" || $("#hdnMasterTypeId").attr("data-bskidexist") == "true") {
                alert("Cannot change value, skid is used in transaction");
                $("#sPrefix").val(prefixValue);
                return false;
            }
        });
    }
    if ($(".clsHasRegExpression").length > 0) {

        $(".clsHasRegExpression").each(function () {

            var elemntId = $(this).attr("id");
            $(document).on("blur", "#" + elemntId, function (e) {
                //debugger
                var nameRegex = $("#" + elemntId).attr("data-regularexpression");
                if (nameRegex != "0") {
                    //if (nameRegex.endsWith('/')) {
                    //    nameRegex = nameRegex.replace(/\//g, '');
                    //}
                    var forEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    var regExpress = new RegExp(elemntId == "sEMail" ? forEmail : nameRegex);
                    //;
                    var controlValue = $("#" + elemntId).val();
                    var ErrorMessage = $("#" + elemntId).attr("data-errormessage");

                    var EmailIds = {};
                    if (elemntId == "sEMail") {
                        EmailIds = controlValue.split(';');
                        if (EmailIds != null && EmailIds != undefined && EmailIds.length > 0) {
                            for (var i = 0; i < EmailIds.length; i++) {

                                if (!regExpress.test(EmailIds[i])) {
                                    COMMON.prototype.showMessage(ErrorMessage);
                                    $("#" + elemntId).val("");
                                    e.stopImmediatePropagation();
                                    //   $($(this).closest('.ruleHidden').next()).find("input,select").focus();
                                    return false;
                                }

                            }
                        }
                    }
                    else {
                        if (!regExpress.test(controlValue)) {
                            COMMON.prototype.showMessage(ErrorMessage);
                            $("#" + elemntId).val("");
                            e.stopImmediatePropagation();
                            //   $($(this).closest('.ruleHidden').next()).find("input,select").focus();
                            return false;
                        }

                    }
                }
                e.stopImmediatePropagation();
            });
        });
    }
    if ($('.clsMacAddress').length > 0) {
        $('.clsMacAddress').blur(function () {
            var val = $(this).attr('data-macaddress');
            if (val != undefined) {
                $(this).val(val);
            }
        });
    }
    if ($('.HasFilter').length > 0) {

        //var AllIdsHasFilter=[];
        //$(".HasFilter").each(function (index) {
        //    var id = "#" + $(this).attr("id");
        //    AllIdsHasFilter.push(id);
        //});
        //let sAllIdsHasFilter = AllIdsHasFilter.toString();
        $(document).on('focus', ".HasFilter", function (eventt) {
            MASTERENTRYSCREEN.ApplyFilterForField($(this));
            $(this).off('click');
            eventt.stopImmediatePropagation();
        });
    }

    if ($(".clsDatePicker").length > 0) {
        $(".clsDatePicker").each(function () {
            var id = $(this).attr("id");
            var hasCheckbox = $("#" + id + "_checkbox").is(":visible");
            if (hasCheckbox == true && !$("#" + id + "_checkbox").is(":checked")) {
                if (($('#hdnIsgroup').val() == 'True' || $('#hdnIsgroup').val() == 'true') && ($('#hdnMasterTypeId').val() == "601")) {
                    //  $(this).val("");
                    $('#' + id + '_checkbox').trigger('click');
                    $('#' + id + '_checkbox').css('display', 'none');
                    //DATEPICKER.setDate(id, 0, false);
                }
            }
        });
    }


    MASTERENTRYSCREEN.autocollapse(); // when document first loads
    if ($('.tabsTable').length > 0 && $('.clstxtDatePicker').length > 0) {
        //
        var id = $('.clstxtDatePicker')[0].id;
        id = (id.match(/[a-z A-Z]+/g)).toString();
        var currentNumericDate = $('.FieldId').attr('data-currentdate', DATEPICKER.getDate(id))
    }
    if ($('#hdnButtonClickName').val() == 'btnNew' || $('#hdnButtonClickName').val() == 'btnMasterEdit') {
        if ($('#hdnIsgroup').val() == 'True' || $('#hdnIsgroup').val() == 'true') {
            var treeid = $('#iTreeId').val();
            $($('#lbl' + treeid).find('input[type=checkbox]')).attr({ 'checked': true });
            $($($('#lbl' + treeid).find('input[type=checkbox]')).closest('div')).addClass("grey");
            var selectedTreeChkboxId = $($('#lbl' + treeid).find('input[type=checkbox]')).attr('id');
            $('#divMultipleTreeBox').css({ 'pointer-events': 'none' });
            $('.clsLblTreeArray:not(#lbl' + treeid + ')').css({ 'pointer-events': 'auto' });
            $('.clsLblTreeArray').each(function () {
                //

                if ($(this).attr("data-autogroup") == "True") {
                    $(this).css({ "pointer-events": "none" });
                    $($(this).closest('div')).addClass("grey");
                }
            });

        } else {
            $('#chkboxTreeSelectAll').prop('checked', true);
            $('.clsChkboxTreeControl').prop('checked', true);
            $('#divMultipleTreeBox').css({ 'pointer-events': 'none', "background-color": "#eee" });
            $('#divMultipleTreeBox').addClass("grey");
        }
    }
    else if ($('#hdnButtonClickName').val() == 'btnAddGroup' || $('#hdnButtonClickName').val() == 'btnGroup') {
        var treeid = $('#iTreeId').val();
        $($('#lbl' + treeid).find('input[type=checkbox]')).attr({ 'checked': true });
        $($($('#lbl' + treeid).find('input[type=checkbox]')).closest('div')).addClass("grey");
        var selectedTreeChkboxId = $($('#lbl' + treeid).find('input[type=checkbox]')).attr('id');
        $('#divMultipleTreeBox').css({ 'pointer-events': 'none' });
        $('.clsLblTreeArray:not(#lbl' + treeid + ')').css({ 'pointer-events': 'auto' });
        $('.clsLblTreeArray').each(function () {
            if ($(this).attr("data-autogroup") == "True") {
                $($(this).find('input')).attr("readonly", true);
                $(this).css({ "pointer-events": "none" });
                $($(this).closest('div')).addClass("grey");
            }
        });
    }
    $(window).resize(function () {
        if ($('#divTabContentGenerateMaster').length > 0) {
            COMMON.prototype.getStyleLibObject().notifyWhenFileLoaded("Resources/Common/Css/bootstrap-toggle.min.css", "newMaster.settingHeight");
        }
        MASTERENTRYSCREEN.autocollapse();
    });
    $(document).on('click', '.RemoveImg', function (evt) {
        debugger
        var fileNameInputId = $($($(this).parent('div')).parent('div')[0]).find('input')[0].id;
        var browseId = $($($(this).closest('div')).prev().prev()).find('input')[0].id;

        if ($($(this).parent('div')).parent('div').prev()[0] != undefined) {
            var imgId = $($($(this).parent('div')).parent('div').prev()[0]).find('img')[0].id;
            var ViewimgId = $($($($(this).parent('div')).parent('div')[0]).find('input').prevObject.find('input')[2].offsetParent.previousElementSibling)[0].lastElementChild.id;
 
        }
        if ($("#" + ViewimgId + ",#" + browseId + "").hasClass('image') == false)
        {
            $("#" + ViewimgId + ",#" + browseId + "").addClass('image');
        }
 
        if ($("#" + ViewimgId + ",#" + browseId + "").hasClass('image')) {
            if (confirm('Are you sure you want to remove?')) {
                $("#" + ViewimgId).removeClass('image')
                $('#' + ViewimgId).attr('src', "");
                $('#' + ViewimgId).attr('data-value', "");
                $('#' + browseId).val("");
                $('#' + ViewimgId).val("");
                $('#' + browseId).removeClass('image');
                $('#' + fileNameInputId).val("");
                $('#' + fileNameInputId + "Name").val("");
                $($('#' + fileNameInputId + "Name").closest('.ruleHidden').next()).find("#" + fileNameInputId + "Name").val("");
                $('#' + browseId).attr("data-img", "");
                $('#' + fileNameInputId).attr({ 'data-value': "", 'value': " " });
                $('#' + browseId).attr({ 'data-value': "", 'value': " " });
                $("#" + $(this).parent().parent().next().attr('id')).html('');
                var numberPattern = /\d+/g;
                var FilesizeNumber = fileNameInputId.match(numberPattern);
                if (FilesizeNumber != null) {
                    $("#iFileSize" + FilesizeNumber).val("");
                }
            }          
        }
        if ($("#" + imgId + ",#" + browseId + "").hasClass('image')) {

                $("#" + imgId).removeClass('image')
                //$('.upload').val('')
                $('#' + imgId).attr('src', "").css({ "width": "70px", "height": "60px" });
                $('#' + imgId).attr('data-value', "");
                //  $(".img-logo").css({ "padding-top": "30px" });
                $('#' + browseId).val("");
                $('#' + imgId).val("");
                $('#' + browseId).removeClass('image');
                $('#' + fileNameInputId).val("");
                $('#' + fileNameInputId + "Name").val("");
                $($('#' + fileNameInputId + "Name").closest('.ruleHidden').next()).find("#" + fileNameInputId + "Name").val("");
                $('#' + browseId).attr("data-img", "");
                $('#' + fileNameInputId).attr({ 'data-value': "", 'value': " " });
                $('#' + browseId).attr({ 'data-value': "", 'value': " " });
                $("#" + $(this).parent().parent().next().attr('id')).html('');
                var numberPattern = /\d+/g;
                var FilesizeNumber = fileNameInputId.match(numberPattern);
                if (FilesizeNumber != null) {
                    $("#iFileSize" + FilesizeNumber).val("");
                }
            // $('#DocumentViewerName').val("");      
                $("#SaveImg").removeAttr('href');
            evt.stopImmediatePropagation();
        }    

    });

    $(document).on('change', '#iDepreciationMethod', function () {
        if ($("#hdnMasterTypeId").attr("data-btransexist") == "True") {
            COMMON.prototype.showMessage($("#hdnMasterTypeId").attr("data-msgtransexsitforvalidation"));
            $("#iDepreciationMethod").val(iDepreciationMethodValue);
            return false;
        }
    });
    $(document).on("focus", '.clstxtOptionControl', function (e) {
        debugger
        $('.clstxtOptionControl').show();
        $('.clstxtDatePicker').show();

        var id = null;
        var FieldId = $(this)[0].getAttribute('data-fieldid');
        if (FieldId != null && FieldId > 0) {
            var elements = $("[data-fieldid='" + FieldId + "']");
            for (var i = 0; i < elements.length; i++) {

                if (elements[i].getAttribute('data-fieldid') == FieldId && elements[i].classList.contains('clsOptionControl')) {
                    id = elements[i].id;
                    break;
                }
            }

        }
        else {
            id = $(this)[0].id;
            id = (id.match(/[a-z A-Z]+/g)).toString();
        }

        var ocCommonTableClass = $("#" + id + '_input_container').attr('class', 'ocCommonTableClass FDatePicker')
        $('.ocCommonTableClass').hide();
        $("#" + id + '_input_container').show();

        OPTIONCONTROL.setParent(id, $(this).parents('td')[0]);
        if (document.getElementById(id) != null) {
            if (document.getElementById(id).classList.contains('HasFilter')) {
                MASTERENTRYSCREEN.ApplyFilterForField(document.getElementById(id));
            }
        }

        if (id == "iCLFATag") {
            var ColIndex = $(this).closest("td").index();
            var RowIndex = $(this).closest("tr").index();
            var tbody = $($(this).closest("td")).closest("tbody");
            var sFilter = [];
            $(tbody).find("tr.tableRow").each(function () {
                var bLastRow = $(tbody).find("tr").length == $(this).index();
                if ($(this).index() != RowIndex) {
                    var val = $($($(this).find("td")[ColIndex]).find("input")).attr("data-value");
                    if (val != "0")
                        sFilter.push(val);// +=  val + bLastRow ? "" : ",";
                }

            });
            sFilter = sFilter.toString();
            if (sFilter.trim() != "")
                OPTIONCONTROL.setFilter(id, "a.iMasterId NOT IN (" + sFilter + ")");
            else
                OPTIONCONTROL.setFilter(id, "iStatus=0");
        }
        // var optctrlId = $($($(this).parents('td')).find('.clsOptionControl')).attr('id')
        if (($(this)[0].dataset.value != '' && $(this)[0].dataset.value != undefined) && $(this)[0].dataset.value != '0') {
            OPTIONCONTROL.setControlValue(id, $(this)[0].dataset.value, $(this).attr('id'));
            OPTIONCONTROL.setControlText(id, $(this)[0].dataset.text);
        }
        else {
            //OPTIONCONTROL.setControlValue(id, "0"); // setting to 0 throwing incorrect syntax error. Clear function not clearing data-value content.
            OPTIONCONTROL.clear(id);
        }

        $(this).hide();
        $("#" + id).focus();
        e.stopImmediatePropagation();
        $(this).off('click');
    });
    $(document).on("focus", ".FocusForTab", function (e) {

        $($(this).parent()).addClass("OnFocusForTab");
        e.stopImmediatePropagation();
    });
    $(document).on("blur", ".FocusForTab", function (e) {

        $($(this).parent()).removeClass("OnFocusForTab");
        e.stopImmediatePropagation();
    });
    $(document).on('focus', '.clstxtTimePicker', function (e) {
        //////debugger
        $('.clstxtTimePicker').show();
        //  $('.clstxtOptionControl').show();
        var id = $(this)[0].id;
        id = (id.match(/[a-z A-Z]+/g)).toString();
        FTIMECONTROL.setParent(id, $(this).parents('td')[0]);
        if (($(this)[0].dataset.value != '' && $(this)[0].dataset.value != undefined)) {
            if ($(this)[0].dataset.value.toString() == "0") {
                FTIMECONTROL.clear(id, true);
            } else {
                FTIMECONTROL.setTime(id, $(this)[0].dataset.value, true)
            }
        }
        $(this).hide();
        e.stopImmediatePropagation();
        $(this).off('click');
    });

    $(document).on('focus', '.clstxtDatePicker', function (e) {
        //
        $('.clstxtDatePicker').show();
        $('.clstxtOptionControl').show();
        var id = $(this)[0].id;
        id = (id.match(/[a-z A-Z]+/g)).toString();
        if (PrevDatePickerLocation != '') {
            $('#' + PrevDatePickerLocation).val($('#' + PrevDatePickerId).val());
            $('#' + PrevDatePickerLocation).attr('data-value', DATEPICKER.getDate(PrevDatePickerId))
        }
        PrevDatePickerLocation = $(this)[0].id;
        PrevDatePickerId = id;
        var ocCommonTableClass = $("#" + id + '_input_container').attr('class', 'ocCommonTableClass FDatePicker')
        $('.ocCommonTableClass').hide();
        $("#" + id + '_input_container').show();
        DATEPICKER.setDate(id, $(this)[0].dataset.value, true);
        OPTIONCONTROL.setParent(id, $(this).parents('td')[0])
        if (($(this)[0].dataset.value != '' && $(this)[0].dataset.value != undefined)) {
            DATEPICKER.setDate(id, $(this)[0].dataset.value, true)
        }
        $(this).hide();
        e.stopImmediatePropagation();
        $(this).off('click');
        //var celltd = $($(this).closest('table')).closest('td');
        //optCtrlID = $(this)[0].id;
        //$($(celltd).find('.clstxtDatePicker')).attr('data-value', DATEPICKER.getDate(optCtrlID));
        //$($(celltd).find('.clstxtDatePicker')).attr('data-text', OPTIONCONTROL.getControlText(optCtrlID));
        //$(celltd).find('.clstxtDatePicker').val($(this).val());

    });
    //$(document).on("focus", ".clsspellCheck", function (e) {
    //    //
    //    $(this).attr("spellcheck", true); 
    //    e.stopImmediatePropagation();
    //    $(this).off('change');
    //})
    $(document).on('blur', '.clsOptionControl', function (e) {
        //;
        debugger
        //var celltd = $($(this).closest('table')).closest('td');
        var celltd = $(this).closest('.tdOptionControl')
        optCtrlID = $(this)[0].id;
        $($(celltd).find('.clstxtOptionControl')).attr('data-value', OPTIONCONTROL.getControlValue(optCtrlID));
        $($(celltd).find('.clstxtOptionControl')).attr('data-text', OPTIONCONTROL.getControlText(optCtrlID));
        $(celltd).find('.clstxtOptionControl').val($(this).val());
        e.stopImmediatePropagation();
        $(this).off('blur');
    });

    $(document).on('blur', '.clsDatePicker', function (e) {
        //////debugger
        var celltd = $($(this).closest('table')).closest('td');
        var RowIndex = $(celltd.parent()).length > 0 ? $(celltd.parent())[0].rowIndex : 0;
        var CurrentCellValue = '';
        var rows = $(celltd).closest('tbody').children();
        optCtrlID = $(this)[0].id;
        CurrentCellValue = DATEPICKER.getDate(optCtrlID);
        $($(celltd).find('.clstxtDatePicker')).attr('data-value', DATEPICKER.getDate(optCtrlID));
        $($(celltd).find('.clstxtDatePicker')).attr('data-text', DATEPICKER.getDate(optCtrlID));
        $(celltd).find('.clstxtDatePicker').val($(this).val());

        //@added this validation for UI -storer master 3PL case starts
        var tdcell = null;
        var GridCellValue = '';
        if (Is3plEnabled == 1 && $('#hdnMasterTypeId').val() == "1006" && $("div[class='tab-pane fade active in']").attr('data-tabname') == "Tariff") {

            for (var i = 0; i < rows.length; i++) {
                if ((i + 1) == RowIndex) {
                    continue;
                }
                else {
                    GridCellValue = $($(rows[i]).children().find('#iAffectedDate' + (i + 1))).attr('data-value');
                    if (GridCellValue != 0 && GridCellValue >= CurrentCellValue) {
                        COMMON.prototype.showMessage("Affected date given in Tariff details can not be less or equal than the previous affected date .check at row " + (i + 1));
                        $(celltd).css('border-color', 'red');
                        break;
                    }
                    $(celltd).css('border-color', '');
                }
            }
        }
        //@added this validation for UI -storer master 3PL case ends
        e.stopImmediatePropagation();
        $(this).off('blur');
    });

    $(document).on('blur', '.clsTimePicker', function (e) {
        //////debugger
        var celltd = $(this).closest('td');
        optCtrlID = $(this)[0].id;
        $($(celltd).find('.clstxtTimePicker')).attr('data-value', FTIMECONTROL.getTime(optCtrlID));
        $($(celltd).find('.clstxtTimePicker')).attr('data-text', FTIMECONTROL.getTime(optCtrlID));
        $(celltd).find('.clstxtTimePicker').val($(this).val());
        e.stopImmediatePropagation();
        $(this).off('blur');
    });

    $(document).on('blur', '.clsOptionControlAttrPro', function (e) {
        //
        MasterName = $(this).val();
        cntrlId = $(this)[0].id;
        if (MasterName != '') {
            $.ajax({
                url: GLOBAL.getContextPath("OnProductAttributeNameBlur", "GenerateMaster", "Masters"),
                type: 'Get',
                datatype: 'JSON',
                contentType: "application/json; charset=utf-8",
                data: { sName: MasterName },
                success: function (data) {

                    if (data != null) {
                        if (data.length > 0) {
                            $("#selectProdAttr").prop("checked", false);
                            var tr = "";
                            for (var i = 0; i < data.length; i++) {
                                tr += "<tr><td><label class='Flabel' style='cursor:pointer;'><input type='checkbox' class='clsAttrChkbox' data-code='" + data[i].Code + "' data-masterid='" + data[i].MasterId + "' data-attributeno='" + data[i].AttributeNo + "' data-name='" + data[i].Name + "' />" + data[i].Name + "</label></td></tr>"
                            }
                            var strTable = "<div style='height:150px;overflow:auto;'><table>" + tr + "</table></div>";
                            $("#prodAttrModalBody").html(strTable);
                            $("#divProductAttributesModal").modal("show");
                            if (MasterName.length > 0 && $('.ulForTabs').find('li.active').length > 0) {
                                $($($('.ulForTabs').find('li.active')).find('a')).html(MasterName);
                            }
                        }
                        else if (MasterName.length > 0 && $('.ulForTabs').find('li.active').length > 0) {
                            $($($('.ulForTabs').find('li.active')).find('a')).html(MasterName);
                        }

                    }
                    else {
                        //alert(data);
                        return false;
                    }
                }
            });
        }
        e.stopImmediatePropagation();
        $(this).off('blur');
    });
    $(document).on('click', '.PreviousNextPage', function (e) {
        //
        var RevisionValue = parseInt($('#txtRevision').val());
        if ($(this)[0].id == 'spnPreviousPage') {
            if (RevisionValue > 0) {
                var RevisionId = RevisionValue - parseInt(1);
                $('#txtRevision').val(RevisionId);
                var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("getRevisedDataOnRevisionId", "GenerateMaster", "Masters"), true, { iRevisionId: RevisionId }, "HTML", true, "MASTERENTRYSCREEN.Blur_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        else {
            if (RevisionValue < parseInt($('#hdnCurrentRevisionId').val())) {
                var RevisionId = RevisionValue + parseInt(1);
                $('#txtRevision').val(RevisionId);
                var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("getRevisedDataOnRevisionId", "GenerateMaster", "Masters"), true, { iRevisionId: RevisionId }, "HTML", true, "MASTERENTRYSCREEN.Blur_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        e.stopImmediatePropagation();
        $(this).off('click');
    });
    $(document).on('click', '.FirstLastPage', function (e) {
        //
        if ($(this)[0].id == 'spnFirstPage') {
            if (parseInt($('#txtRevision').val()) != 0) {
                var RevisionId = parseInt(0);
                var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("getRevisedDataOnRevisionId", "GenerateMaster", "Masters"), true, { iRevisionId: RevisionId }, "HTML", true, "MASTERENTRYSCREEN.Blur_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        else {
            if (parseInt($('#txtRevision').val()) < parseInt($('#hdnCurrentRevisionId').val())) {
                var RevisionId = parseInt($('#hdnCurrentRevisionId').val());
                var data = NETWORK.executeServerMethod(GLOBAL.getContextPath("getRevisedDataOnRevisionId", "GenerateMaster", "Masters"), true, { iRevisionId: RevisionId }, "HTML", true, "MASTERENTRYSCREEN.Blur_onSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            }
        }
        e.stopImmediatePropagation();
        $(this).off('click');
    });
    $(document).on('click', '#btnMasterRevisionSaveClick', function (e) {
        //debugger;
        CreateNewRevision = true;
        if (confirm(MASTERENTRYSCREEN.getResourceValue("msgAreyousureyouwanttosavethisrecordasNewRevision", GetMasterEntryResourceMessages))) {
            var RevisionDate = DATEPICKER.getDate('iRevisionDate');
            if (RevisionDate != iRevisionDate) {
                MASTERENTRYSCREEN.onMasterSaveClick(this);
            } else {
                COMMON.prototype.showMessage(MASTERENTRYSCREEN.getResourceValue("msgPleasechangetherevisiondatebeforesavingasanewrevision", GetMasterEntryResourceMessages));
            }
            //
            e.stopImmediatePropagation();
            $(this).off('click');
        }
        e.stopImmediatePropagation();
    });
    if (document.getElementById('iStorer') != null && document.getElementById('iStorer') != undefined) {
        $("#sCode").blur(function () {
            var MasterTypeId = $('#hdnMasterTypeId').val();
            var MasterId = $('#hdnMasterId').val();
            if (MasterTypeId == 2 && MasterId == 0 && IsPrefixCustomerCodeToProductCode > 0) {
                MASTERENTRYSCREEN.SetStorerCode('sCode')
            }
        })
    }
    if ($('#hdnMasterTypeId').val() == "601") {//fixed asset master
        $("#fCumulativeDepreciation").blur(function () {
            var MasterTypeId = $('#hdnMasterTypeId').val();
            var MasterId = $('#hdnMasterId').val();
            if (MasterTypeId == 601) {
                var bResult = MASTERENTRYSCREEN.IsValidCumulativeDepreciationValidation();
            }
        })
    }

    $(document).on('click', '#btnMasterRevisionDeleteClick', function (e) {

        var MasterTypeId = $('#hdnMasterTypeId').val();
        var MasterId = $('#hdnMasterId').val();
        if (confirm(MASTERENTRYSCREEN.getResourceValue("msgAreyousureyouwanttoDeletethisRevision", GetMasterEntryResourceMessages))) {
            //var result =
            NETWORK.executeServerMethod($(this).attr('href'), true, { iMasterTypeId: MasterTypeId, iMasterId: MasterId }, "JSON", true, "MASTERENTRYSCREEN.DeleteRevision_Success", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            //if (result.data != '-1') {
            //    $('.btnGenerateMasterclose').trigger('click');
            //}
            //else {
            //    COMMON.prototype.showMessage(result.data);
            //}
        }
        e.stopImmediatePropagation();
        $(this).off('click');
    });

    $(document).on('click', '.serialNo', function (e) {
        //
        $($('#tblMasterNewGeneratorBody tr.highlight')).removeClass('highlight');
        $($(this).closest('tr')).addClass('highlight');
        e.stopImmediatePropagation();
        $(this).off('click');
    });
    $(document).on('contextmenu', '.serialNo', function (e) {
        //
        //debugger
        var isFromTrans = document.getElementById('hdnNewMasterOCValue');
        if ($(this).hasClass('serialNo'))
            $(".ContextMenu").hide();              // To hide the context menu
        else
            $(".ContextMenu").show();
        $('.clsContextMenu').show()
        $($('#tblMasterNewGeneratorBody tr.highlight')).removeClass('highlight');
        $($(this).closest('tr')).addClass('highlight')
        e.preventDefault();
        if (isFromTrans != null && isFromTrans != undefined && isFromTrans.value == "True") {

            $("#tblContextMenu").css({ left: (e.pageX - 445), top: (e.pageY - 30) });
        }
        else {
            $("#tblContextMenu").css({ left: e.pageX, top: e.pageY });
        }


        $('#tblContextMenu').fadeIn(500, MASTERENTRYSCREEN.startFocusOut());

        e.stopImmediatePropagation();
        $(this).off('click');
    });
    $('.clsContextMenu li').on('click', function (e) {
        debugger
        var tabId = $($('.ulForTabs').find('li.active:not(#lastTab)')).find('a').attr('href');
        if ($(this).find('span')[0].innerHTML.trim() == 'Delete Row') {
            //
            for (var i = 1; i < $(tabId).find('.highlight').children().length; i++) {
                //
                if ($($(tabId).find('.highlight').children()[i]).hasClass('tdOptionControl') || $($(tabId).find('.highlight').children()[i]).hasClass('tdDatePickerControl')) {
                    var txtboxId = $($(tabId).find('.highlight').children()[i]).find('input')[0].id;
                    var optionControlId = (txtboxId.match(/[a-z A-Z]+/g)).toString();
                    if (FCommon.UI.isValidObject(document.getElementById("div" + optionControlId)))
                    {
                        OPTIONCONTROL.setParent(optionControlId, 'div' + optionControlId + '');
                    }
                }
            }
            var index = $(tabId).find('.highlight').index();
            if ($(tabId).find('tr.tableRow').length == 1)
                MASTERENTRYSCREEN.AddDynamicRow();
            $($(tabId).find('tr.tableRow')[index]).remove();

        }

        if ($(this).find('span')[0].innerHTML.trim() == 'Add Row') {
            //
            var RowIndexToBeInserted = $(tabId).find('.highlight')[0].rowIndex;
            MASTERENTRYSCREEN.AddDynamicRow();
        }
    });
    $(document).on("focus", ".clstblMasterNewGeneratorBody:not(.tblOptionControl)", function (e) {

        //  if ($(e.target.closest('tr.tableRow')).is(':last-child')) {
        //debugger
        if ($(e.target).closest('tr.tableRow').is(':last-child')) {
            MASTERENTRYSCREEN.AddDynamicRow();
        }
        e.stopImmediatePropagation();
        $(this).off('focus');
    });
    $(document).on("blur", ".clstblMasterNewGeneratorBody td:not(.tblOptionControl)", function (e, ele) {

        //debugger
        //  if ($(e.target.closest('tr.tableRow')).is(':last-child')) {
        if (e != null && e.target != null && e.target.id.toString().includes('sCardNumber') && $('#hdnMasterTypeId').val() == "1106")//membermaster
        {
            if ($("#hdnMasterTypeId").attr("data-btransexist") == "True") {
                var currentVal = document.getElementById(e.target.id).value;
                var PreviousVal = e.target.getAttribute('value');
                if (currentVal != PreviousVal) {
                    COMMON.prototype.showMessage('can not edit cardnumber already used in transactions');
                    document.getElementById(e.target.id).value = PreviousVal;
                    e.stopImmediatePropagation();
                    $(this).off('blur');
                    return;
                }
            }
        }
        e.stopImmediatePropagation();
        $(this).off('blur');
    });
    $(document).on({
        mouseenter: function (event) {
            var obj = {};
            obj.Cell = $(this)[0];
            obj.iRow = $($(this).closest('.tableRow')).attr('data-rowno');
            var sControl = "";
            var sContent = "";
            IsFocus = false;
            FCommon.UI.setText(obj.Cell, "");
            sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
            sControl += obj.iRow;
            sControl += "</div>";
            $(obj.Cell).html(sControl);

            sContent = "<table>";
            sContent += "<tbody class='grid_row_menu'>";
            sContent += "<tr onclick='MASTERENTRYSCREEN.onCustomTableDeleteRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Delete Current Row'>";
            sContent += "<td><span class='icon-delete icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;Delete Row</div></td>";
            sContent += "</tr>";
            sContent += "<tr onclick='MASTERENTRYSCREEN.onCustomTableInsertRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Add Row Above'>";
            sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;Insert Row</div></td>";
            sContent += "</tr>";
            sContent += "</tbody>";
            sContent += "</table>";

            $("#id_row_popup").popover({
                type: "tooltip",
                trigger: "manual",
                placement: $("#hdnLanguageId").val() == "0" ? "right" : "left",
                html: true,
                content: sContent
            });

            $("#id_row_popup").popover('show');
            event.stopImmediatePropagation();
        },
        mouseleave: function (event) {

            var obj = {};
            obj.Cell = $(this)[0];
            obj.iRow = $($(this).closest('.tableRow')).attr('data-rowno');
            $("#id_row_popup").popover('destroy');
            FCommon.UI.setText(obj.Cell, "");
            FCommon.UI.removeChildren(obj.Cell);
            FCommon.UI.setText(obj.Cell, obj.iRow);
            obj.Cell.style.paddingLeft = "3px;";
            event.stopImmediatePropagation();
        }
    }, '.CustomizePopupForAddDeleteRow');
    if ($('#hdnButtonClickName').val() == 'btnNew' || $('#hdnButtonClickName').val() == 'btnClone' || $('#hdnButtonClickName').val() == 'btnAddGroup') {
        $("#sName").focus();
        var hasExternalModule = MASTERENTRYSCREEN.CheckIfExternalModuleEnableForFields(EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER, 'sName');
        if (hasExternalModule) {
            FWrapper.openPopup(hasExternalModule);
        }
    }

    //$(document).on('focus', '#GenerateNewMasterModel input[type=text],#GenerateNewMasterModel select', function (e) {
    //    var ExtModCustomData = {};
    //    ExtModCustomData.ExtModEvent = EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER;
    //    var iCount = MastersExternalModule.callExternalModuleField(EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER, $(this).attr('id'), 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
    //    if (iCount > 0) {
    //        // return;
    //    }
    //    //old code for extmodule event--commentted on 10th August 2020 for field leave requirement
    //    //var hasExternalModule = MASTERENTRYSCREEN.CheckIfExternalModuleEnableForFields(EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER, $(this).attr('id'));
    //    //if (hasExternalModule) {
    //    //    FWrapper.openPopup(hasExternalModule);
    //    //}
    //});
    //$(document).on('blur', '#GenerateNewMasterModel input[type=text],#GenerateNewMasterModel select', function (e) {
    //    debugger
    //    if(!$(this).hasClass('FOptionControl'))
    //    {
    //        var ExtModCustomData = {};
    //        ExtModCustomData.ExtModEvent = EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE;
    //        var iCount = MastersExternalModule.callExternalModuleField(EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE, $(this).attr('id'), 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
    //        if (iCount > 0) {
    //           // return;
    //        }
    //    }
    //    //old code for extmodule event--commentted on 10th August 2020 for field leave requirement
    //    //var hasExternalModule = MASTERENTRYSCREEN.CheckIfExternalModuleEnableForFields(EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE, $(this).attr('id'));
    //    //if (hasExternalModule) {
    //    //    FWrapper.openPopup(hasExternalModule);
    //    //}
    //});


    //@field leave/focus external module event binding -starts-
    if (ExternalModuleForFields != null && ExternalModuleForFields.length > 0) {
        for (var i = 0; i < ExternalModuleForFields.length; i++) {
            for (var extmod = 0; extmod < length; extmod++) {

                if (ExternalModuleForFields[i].ExternalModule[extmod].OnEvent == EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE) {
                    if (!$('#' + ExternalModuleForFields[i].FieldName).hasClass('FOptionControl')) {
                        $('#' + ExternalModuleForFields[i].FieldName).blur(function () {
                            debugger
                            var ExtModCustomData = {};
                            ExtModCustomData.ExtModEvent = EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE;
                            var iCount = MastersExternalModule.callExternalModuleField(EXTERNALMODULEFIELD_EVENT_ENUM.ON_LEAVE, $(this).attr('id'), 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
                            if (iCount > 0) {
                            }
                        })
                    }
                }
                else if (ExternalModuleForFields[i].ExternalModule[extmod].OnEvent == EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER) {
                    $('#' + ExternalModuleForFields[i].FieldName).focus(function () {
                        debugger
                        var ExtModCustomData = {};
                        ExtModCustomData.ExtModEvent = EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER;
                        var iCount = MastersExternalModule.callExternalModuleField(EXTERNALMODULEFIELD_EVENT_ENUM.ON_ENTER, $(this).attr('id'), 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
                        if (iCount > 0) {
                        }
                    })

                }

            }
        }
    }
    //@field leave/focus external module event binding -ends--


    //@old code for calling external module --commentted on 9th june 2020
    //var sExternalModuleUrlAfterLoad = CheckIfExternalModuleEnable(EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD);
    //if (sExternalModuleUrlAfterLoad) {
    //    FWrapper.openPopup(sExternalModuleUrlAfterLoad);
    //}
    //@ends
    var IsAccess = document.getElementById('hdnIsOnlyAccess');
    if (IsAccess != null) {
        var IsOnlyAccess = parseInt(IsAccess.value);// document.getElementById('hdnIsOnlyAccess');
        if (IsOnlyAccess == 1) {
            debugger
            var Form = document.getElementById('NewMasterForm');
            if (Form != null && Form != undefined) {
                //Form.style.display='none';
                Form.style.color = 'grey';
                Form.style.pointerEvents = 'none'
                $('#btnMasterSaveClick').addClass('grey');
                $('#btnMasterSaveClick').prop('disabled', true);
            }
        }
    }
    var ExtModCustomData = {};
    ExtModCustomData.ExtModEvent = EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD;
    ExtModCustomData.Data = [];
    var iCount = MastersExternalModule.callExternalModule(EXTERNALMODULE_EVENT_ENUM.AFTER_LOAD, 0, 'MASTERENTRYSCREEN.continueEMProcess', ExtModCustomData);
    //if ($("#hdnMasterTypeId").attr("data-cache") == undefined) {

    //}

    MASTERENTRYSCREEN.externalModuleForTabs();
    var strExternalModuleButtonCaptions = MASTERENTRYSCREEN.getExternalModuleButtonCaptions();
    if (strExternalModuleButtonCaptions != undefined) {
        if (strExternalModuleButtonCaptions.toString() != "") {
            $("#ulExternalModuleMasters").append(strExternalModuleButtonCaptions);
            $("#liExternalModuleMasters").css("display", "block");
        }
    }

    $(document).on("keydown", "input,select,button", function (e) {
        try {
            var keyCode = e.keyCode || e.which;
            var index = $(".ulForTabs").find("li.active").index();
            switch (keyCode) {
                case 9: // tab key is pressed
                    $(".btn-link").removeClass("dottedBorder");
                    if ($(this).closest(".ruleHidden").length > 0) {
                        var CurrentElement = $(this).closest(".ruleHidden");
                        MASTERENTRYSCREEN.COMMON.checkRecursion(CurrentElement);
                    }
                    else if ($(this).hasClass("btn-link")) {
                        $(".btnGenerateMasterclose").addClass("dottedBorder");
                    }
                    break;
                case 13: // enter key is pressed
                    if ($('#btnMasterSaveClick').hasClass("dottedBorder"))
                        $('#btnMasterSaveClick').click();
                    else if ($('#btnGenerateMasterclose').hasClass("dottedBorder"))
                        $('.btnGenerateMasterclose').click();
                    break;
                case 119:
                    debugger
                    MASTERENTRYSCREEN.OpenAuditTrail(e.currentTarget);
                    break;
                    //case 37: // left arrow key is pressed
                    //    if (index == 0)
                    //        return false;
                    //    $($(".ulForTabs").find("li")[parseInt(index) - 1]).find("div")[0].click();
                    //    $("#divTabContentGenerateMaster .tab-pane").removeClass("active in");
                    //    $($("#divTabContentGenerateMaster .tab-pane")[parseInt(index) - 1]).addClass("active in");
                    //    break;
                    //case 39:// right arrow key is pressed
                    //    if (index == $(".ulForTabs").find("li:not(#lastTab)").length - 1)
                    //        return false;
                    //    $($(".ulForTabs").find("li")[parseInt(index) + 1]).find("div")[0].click();
                    //    $("#divTabContentGenerateMaster .tab-pane").removeClass("active in");
                    //    $($("#divTabContentGenerateMaster .tab-pane")[parseInt(index) + 1]).addClass("active in");
                    //    break;
                default:
                    break;

            }
            e.stopImmediatePropagation();
        } catch (ex) {
            alert("Exception=> Keydown " + ex.message);
            return false;
        }
    });

    $(document).on("keydown", function (e) {
        try {
            var keyCode = e.keyCode || e.which;
            var index = $(".ulForTabs").find("li.active").index();
            if (e.target.type == "textarea")
                return;
            switch (keyCode) {
                case 37: // left arrow key is pressed
                    if (index <= 0)
                        return false;
                    $($(".ulForTabs").find("li")[parseInt(index) - 1]).find("div")[0].click();
                    $("#divTabContentGenerateMaster .tab-pane").removeClass("active in");
                    $($("#divTabContentGenerateMaster .tab-pane")[parseInt(index) - 1]).addClass("active in");
                    break;
                case 39:// right arrow key is pressed
                    if (index == $(".ulForTabs").find("li:not(#lastTab)").length - 1)
                        return false;
                    $($(".ulForTabs").find("li")[parseInt(index) + 1]).find("div")[0].click();
                    $("#divTabContentGenerateMaster .tab-pane").removeClass("active in");
                    $($("#divTabContentGenerateMaster .tab-pane")[parseInt(index) + 1]).addClass("active in");
                    break;
                default:
                    break;
            }
            e.stopImmediatePropagation();

        } catch (ex) {
            alert("Exception=> Keydown " + ex.message);
            return false;
        }
    });

});


;
(function(e){var t=e.Callbacks("once unique memory"),n=0,r=null;if(window.FileReader){e.fn.fileReader=function(){return this};return}e.fn.fileReader=function(n){n=e.extend(e.fn.fileReader.defaults,n);var r=this;t.add(function(){return i(r,n)});if(e.isFunction(n.callback))t.add(n.callback);if(!FileAPIProxy.ready){FileAPIProxy.init(n)}return this};e.fn.fileReader.defaults={id:"fileReaderSWFObject",multiple:null,accept:null,label:null,extensions:null,filereader:"files/filereader.swf",expressInstall:null,debugMode:false,callback:false};var i=function(t,i){return t.each(function(t,s){s=e(s);var o=s.attr("id"),u,a;if(!o){o="flashFileInput"+n;n++}u=s.parent("label");a=u.length>0?u:s;a.attr("id",a.attr("id")||o);i.multiple=!!(i.multiple===null?s.attr("multiple"):i.multiple);i.accept=i.accept===null?s.attr("accept"):i.accept;FileAPIProxy.inputs[o]=s;FileAPIProxy.swfObject.add(a.attr("id"),i.multiple,i.accept,i.label,i.extensions);a.css("z-index",0).mouseover(function(e){if(o!==r){e=e||window.event;r=o;FileAPIProxy.swfObject.mouseover(a.attr("id"));FileAPIProxy.container.height(a.outerHeight()).width(a.outerWidth()).css(a.offset())}}).click(function(e){e.preventDefault();e.stopPropagation();e.stopImmediatePropagation();return false})})};window.FileAPIProxy={ready:false,init:function(n){var i=this;this.debugMode=n.debugMode;this.container=e("<div>").attr("id",n.id).wrap("<div>").parent().css({position:"fixed",width:"1px",height:"1px",display:"inline-block",background:"transparent","z-index":99999}).on("mouseover mouseout mousedown mouseup",function(t){if(r)e("#"+r).trigger(t.type)}).appendTo("body");swfobject.embedSWF(n.filereader,n.id,"100%","100%","10",n.expressInstall,{debugMode:n.debugMode?true:""},{wmode:"transparent",allowScriptAccess:"sameDomain"},{},function(n){i.swfObject=n.ref;e(i.swfObject).css({display:"block",outline:0}).attr("tabindex",0);if(i.ready){t.fire()}i.ready=n.success&&typeof n.ref.add==="function"})},swfObject:null,container:null,inputs:{},readers:{},onFileInputEvent:function(e){if(this.debugMode)console.info("FileInput Event ",e.type,e);if(e.target in this.inputs){var t=this.inputs[e.target];e.target=t[0];if(e.type==="change"){e.files=new FileList(e.files);e.target={files:e.files}}t.trigger(e)}window.focus()},onFileReaderEvent:function(e){if(this.debugMode)console.info("FileReader Event ",e.type,e,e.target in this.readers);if(e.target in this.readers){var t=this.readers[e.target];e.target=t;t._handleFlashEvent.call(t,e)}},onFileReaderError:function(e){if(this.debugMode)console.log(e)},onSWFReady:function(){this.container.css({position:"absolute"});this.ready=typeof this.swfObject.add==="function";if(this.ready){t.fire()}return true}};window.FileReader=function(){this.EMPTY=0;this.LOADING=1;this.DONE=2;this.readyState=0;this.result=null;this.error=null;this.onloadstart=null;this.onprogress=null;this.onload=null;this.onabort=null;this.onerror=null;this.onloadend=null;this._callbacks={loadstart:e.Callbacks("unique"),progress:e.Callbacks("unique"),abort:e.Callbacks("unique"),error:e.Callbacks("unique"),load:e.Callbacks("unique"),loadend:e.Callbacks("unique")};this._id=null};window.FileReader.prototype={readAsBinaryString:function(e){this._start(e);FileAPIProxy.swfObject.read(e.input,e.name,"readAsBinaryString")},readAsText:function(e,t){this._start(e);FileAPIProxy.swfObject.read(e.input,e.name,"readAsText")},readAsDataURL:function(e){this._start(e);FileAPIProxy.swfObject.read(e.input,e.name,"readAsDataURL")},readAsArrayBuffer:function(e){throw"Whoops FileReader.readAsArrayBuffer is unimplemented"},abort:function(){this.result=null;if(this.readyState===this.EMPTY||this.readyState===this.DONE)return;FileAPIProxy.swfObject.abort(this._id)},addEventListener:function(e,t){if(e in this._callbacks)this._callbacks[e].add(t)},removeEventListener:function(e,t){if(e in this._callbacks)this._callbacks[e].remove(t)},dispatchEvent:function(t){t.target=this;if(t.type in this._callbacks){var n=this["on"+t.type];if(e.isFunction(n))n(t);this._callbacks[t.type].fire(t)}return true},_register:function(e){this._id=e.input+"."+e.name;FileAPIProxy.readers[this._id]=this},_start:function(e){this._register(e);if(this.readyState===this.LOADING)throw{type:"InvalidStateError",code:11,message:"The object is in an invalid state."}},_handleFlashEvent:function(e){switch(e.type){case"loadstart":this.readyState=this.LOADING;break;case"loadend":this.readyState=this.DONE;break;case"load":this.readyState=this.DONE;this.result=FileAPIProxy.swfObject.result(this._id);break;case"error":this.result=null;this.error={name:"NotReadableError",message:"The File cannot be read!"}}this.dispatchEvent(new FileReaderEvent(e))}};FileReaderEvent=function(e){this.initEvent(e)};FileReaderEvent.prototype={initEvent:function(t){e.extend(this,{type:null,target:null,currentTarget:null,eventPhase:2,bubbles:false,cancelable:false,defaultPrevented:false,isTrusted:false,timeStamp:(new Date).getTime()},t)},stopPropagation:function(){},stopImmediatePropagation:function(){},preventDefault:function(){}};FileList=function(e){if(e){for(var t=0;t<e.length;t++){this[t]=e[t]}this.length=e.length}else{this.length=0}};FileList.prototype={item:function(e){if(e in this)return this[e];return null}}})(jQuery)
;
/*!    SWFObject v2.3.20130521 <http://github.com/swfobject/swfobject>
    is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
*/

/* global ActiveXObject: false */

var swfobject = function () {

    var UNDEF = "undefined",
        OBJECT = "object",
        SHOCKWAVE_FLASH = "Shockwave Flash",
        SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash",
        FLASH_MIME_TYPE = "application/x-shockwave-flash",
        EXPRESS_INSTALL_ID = "SWFObjectExprInst",
        ON_READY_STATE_CHANGE = "onreadystatechange",

        win = window,
        doc = document,
        nav = navigator,

        plugin = false,
        domLoadFnArr = [],
        regObjArr = [],
        objIdArr = [],
        listenersArr = [],
        storedFbContent,
        storedFbContentId,
        storedCallbackFn,
        storedCallbackObj,
        isDomLoaded = false,
        isExpressInstallActive = false,
        dynamicStylesheet,
        dynamicStylesheetMedia,
        autoHideShow = true,
        encodeURIEnabled = false,

    /* Centralized function for browser feature detection
        - User agent string detection is only used when no good alternative is possible
        - Is executed directly for optimal performance
    */
    ua = function () {
        var w3cdom = typeof doc.getElementById !== UNDEF && typeof doc.getElementsByTagName !== UNDEF && typeof doc.createElement !== UNDEF,
            u = nav.userAgent.toLowerCase(),
            p = nav.platform.toLowerCase(),
            windows = p ? /win/.test(p) : /win/.test(u),
            mac = p ? /mac/.test(p) : /mac/.test(u),
            webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, // returns either the webkit version or false if not webkit
            ie = nav.appName === "Microsoft Internet Explorer",
            playerVersion = [0, 0, 0],
            d = null;
        if (typeof nav.plugins !== UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] === OBJECT) {
            d = nav.plugins[SHOCKWAVE_FLASH].description;
            // nav.mimeTypes["application/x-shockwave-flash"].enabledPlugin indicates whether plug-ins are enabled or disabled in Safari 3+
            if (d && (typeof nav.mimeTypes !== UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) {
                plugin = true;
                ie = false; // cascaded feature detection for Internet Explorer
                d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                playerVersion[0] = toInt(d.replace(/^(.*)\..*$/, "$1"));
                playerVersion[1] = toInt(d.replace(/^.*\.(.*)\s.*$/, "$1"));
                playerVersion[2] = /[a-zA-Z]/.test(d) ? toInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1")) : 0;
            }
        }
        else if (typeof win.ActiveXObject !== UNDEF) {
            try {
                var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);
                if (a) { // a will return null when ActiveX is disabled
                    d = a.GetVariable("$version");
                    if (d) {
                        ie = true; // cascaded feature detection for Internet Explorer
                        d = d.split(" ")[1].split(",");
                        playerVersion = [toInt(d[0]), toInt(d[1]), toInt(d[2])];
                    }
                }
            }
            catch (e) {}
        }
        return {w3: w3cdom, pv: playerVersion, wk: webkit, ie: ie, win: windows, mac: mac};
    }(),

    /* Cross-browser onDomLoad
        - Will fire an event as soon as the DOM of a web page is loaded
        - Internet Explorer workaround based on Diego Perini's solution: http://javascript.nwbox.com/IEContentLoaded/
        - Regular onload serves as fallback
    */
    onDomLoad = function () {
        if (!ua.w3) { return; }
        if ((typeof doc.readyState !== UNDEF && (doc.readyState === "complete" || doc.readyState === "interactive")) || (typeof doc.readyState === UNDEF && (doc.getElementsByTagName("body")[0] || doc.body))) { // function is fired after onload, e.g. when script is inserted dynamically
            callDomLoadFunctions();
        }
        if (!isDomLoaded) {
            if (typeof doc.addEventListener !== UNDEF) {
                doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, false);
            }
            if (ua.ie) {
                doc.attachEvent(ON_READY_STATE_CHANGE, function detach() {
                    if (doc.readyState === "complete") {
                        doc.detachEvent(ON_READY_STATE_CHANGE, detach);
                        callDomLoadFunctions();
                    }
                });
                if (win == top) { // if not inside an iframe
                    (function checkDomLoadedIE() {
                        if (isDomLoaded) { return; }
                        try {
                            doc.documentElement.doScroll("left");
                        }
                        catch (e) {
                            setTimeout(checkDomLoadedIE, 0);
                            return;
                        }
                        callDomLoadFunctions();
                    }());
                }
            }
            if (ua.wk) {
                (function checkDomLoadedWK() {
                    if (isDomLoaded) { return; }
                    if (!/loaded|complete/.test(doc.readyState)) {
                        setTimeout(checkDomLoadedWK, 0);
                        return;
                    }
                    callDomLoadFunctions();
                }());
            }
        }
    }();

    function callDomLoadFunctions() {
        if (isDomLoaded || !document.getElementsByTagName("body")[0]) { return; }
        try { // test if we can really add/remove elements to/from the DOM; we don't want to fire it too early
            var t, span = createElement("span");
            span.style.display = "none"; //hide the span in case someone has styled spans via CSS
            t = doc.getElementsByTagName("body")[0].appendChild(span);
            t.parentNode.removeChild(t);
            t = null; //clear the variables
            span = null;
        }
        catch (e) { return; }
        isDomLoaded = true;
        var dl = domLoadFnArr.length;
        for (var i = 0; i < dl; i++) {
            domLoadFnArr[i]();
        }
    }

    function addDomLoadEvent(fn) {
        if (isDomLoaded) {
            fn();
        }
        else {
            domLoadFnArr[domLoadFnArr.length] = fn; // Array.push() is only available in IE5.5+
        }
    }

    /* Cross-browser onload
        - Based on James Edwards' solution: http://brothercake.com/site/resources/scripts/onload/
        - Will fire an event as soon as a web page including all of its assets are loaded
     */
    function addLoadEvent(fn) {
        if (typeof win.addEventListener !== UNDEF) {
            win.addEventListener("load", fn, false);
        }
        else if (typeof doc.addEventListener !== UNDEF) {
            doc.addEventListener("load", fn, false);
        }
        else if (typeof win.attachEvent !== UNDEF) {
            addListener(win, "onload", fn);
        }
        else if (typeof win.onload === "function") {
            var fnOld = win.onload;
            win.onload = function () {
                fnOld();
                fn();
            };
        }
        else {
            win.onload = fn;
        }
    }

    /* Detect the Flash Player version for non-Internet Explorer browsers
        - Detecting the plug-in version via the object element is more precise than using the plugins collection item's description:
          a. Both release and build numbers can be detected
          b. Avoid wrong descriptions by corrupt installers provided by Adobe
          c. Avoid wrong descriptions by multiple Flash Player entries in the plugin Array, caused by incorrect browser imports
        - Disadvantage of this method is that it depends on the availability of the DOM, while the plugins collection is immediately available
    */
    function testPlayerVersion() {
        var b = doc.getElementsByTagName("body")[0];
        var o = createElement(OBJECT);
        o.setAttribute("style", "visibility: hidden;");
        o.setAttribute("type", FLASH_MIME_TYPE);
        var t = b.appendChild(o);
        if (t) {
            var counter = 0;
            (function checkGetVariable() {
                if (typeof t.GetVariable !== UNDEF) {
                    try {
                        var d = t.GetVariable("$version");
                        if (d) {
                            d = d.split(" ")[1].split(",");
                            ua.pv = [toInt(d[0]), toInt(d[1]), toInt(d[2])];
                        }
                    } catch (e) {
                        //t.GetVariable("$version") is known to fail in Flash Player 8 on Firefox
                        //If this error is encountered, assume FP8 or lower. Time to upgrade.
                        ua.pv = [8, 0, 0];
                    }
                }
                else if (counter < 10) {
                    counter++;
                    setTimeout(checkGetVariable, 10);
                    return;
                }
                b.removeChild(o);
                t = null;
                matchVersions();
            }());
        }
        else {
            matchVersions();
        }
    }

    /* Perform Flash Player and SWF version matching; static publishing only
    */
    function matchVersions() {
        var rl = regObjArr.length;
        if (rl > 0) {
            for (var i = 0; i < rl; i++) { // for each registered object element
                var id = regObjArr[i].id;
                var cb = regObjArr[i].callbackFn;
                var cbObj = {success: false, id: id};
                if (ua.pv[0] > 0) {
                    var obj = getElementById(id);
                    if (obj) {
                        if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) { // Flash Player version >= published SWF version: Houston, we have a match!
                            setVisibility(id, true);
                            if (cb) {
                                cbObj.success = true;
                                cbObj.ref = getObjectById(id);
                                cbObj.id = id;
                                cb(cbObj);
                            }
                        }
                        else if (regObjArr[i].expressInstall && canExpressInstall()) { // show the Adobe Express Install dialog if set by the web page author and if supported
                            var att = {};
                            att.data = regObjArr[i].expressInstall;
                            att.width = obj.getAttribute("width") || "0";
                            att.height = obj.getAttribute("height") || "0";
                            if (obj.getAttribute("class")) { att.styleclass = obj.getAttribute("class"); }
                            if (obj.getAttribute("align")) { att.align = obj.getAttribute("align"); }
                            // parse HTML object param element's name-value pairs
                            var par = {};
                            var p = obj.getElementsByTagName("param");
                            var pl = p.length;
                            for (var j = 0; j < pl; j++) {
                                if (p[j].getAttribute("name").toLowerCase() !== "movie") {
                                    par[p[j].getAttribute("name")] = p[j].getAttribute("value");
                                }
                            }
                            showExpressInstall(att, par, id, cb);
                        }
                        else { // Flash Player and SWF version mismatch or an older Webkit engine that ignores the HTML object element's nested param elements: display fallback content instead of SWF
                            displayFbContent(obj);
                            if (cb) { cb(cbObj); }
                        }
                    }
                }
                else { // if no Flash Player is installed or the fp version cannot be detected we let the HTML object element do its job (either show a SWF or fallback content)
                    setVisibility(id, true);
                    if (cb) {
                        var o = getObjectById(id); // test whether there is an HTML object element or not
                        if (o && typeof o.SetVariable !== UNDEF) {
                            cbObj.success = true;
                            cbObj.ref = o;
                            cbObj.id = o.id;
                        }
                        cb(cbObj);
                    }
                }
            }
        }
    }

    /* Main function
        - Will preferably execute onDomLoad, otherwise onload (as a fallback)
    */
    domLoadFnArr[0] = function () {
        if (plugin) {
            testPlayerVersion();
        }
        else {
            matchVersions();
        }
    };

    function getObjectById(objectIdStr) {
        var r = null,
            o = getElementById(objectIdStr);

        if (o && o.nodeName.toUpperCase() === "OBJECT") {
            //If targeted object is valid Flash file
            if (typeof o.SetVariable !== UNDEF) {
                r = o;
            } else {
                //If SetVariable is not working on targeted object but a nested object is
                //available, assume classic nested object markup. Return nested object.

                //If SetVariable is not working on targeted object and there is no nested object,
                //return the original object anyway. This is probably new simplified markup.

                r = o.getElementsByTagName(OBJECT)[0] || o;
            }
        }

        return r;
    }

    /* Requirements for Adobe Express Install
        - only one instance can be active at a time
        - fp 6.0.65 or higher
        - Win/Mac OS only
        - no Webkit engines older than version 312
    */
    function canExpressInstall() {
        return !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);
    }

    /* Show the Adobe Express Install dialog
        - Reference: http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=6a253b75
    */
    function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {

        var obj = getElementById(replaceElemIdStr);

        //Ensure that replaceElemIdStr is really a string and not an element
        replaceElemIdStr = getId(replaceElemIdStr);

        isExpressInstallActive = true;
        storedCallbackFn = callbackFn || null;
        storedCallbackObj = {success: false, id: replaceElemIdStr};

        if (obj) {
            if (obj.nodeName.toUpperCase() === "OBJECT") { // static publishing
                storedFbContent = abstractFbContent(obj);
                storedFbContentId = null;
            }
            else { // dynamic publishing
                storedFbContent = obj;
                storedFbContentId = replaceElemIdStr;
            }
            att.id = EXPRESS_INSTALL_ID;
            if (typeof att.width === UNDEF || (!/%$/.test(att.width) && toInt(att.width) < 310)) { att.width = "310"; }
            if (typeof att.height === UNDEF || (!/%$/.test(att.height) && toInt(att.height) < 137)) { att.height = "137"; }
            var pt = ua.ie ? "ActiveX" : "PlugIn",
                fv = "MMredirectURL=" + encodeURIComponent(win.location.toString().replace(/&/g, "%26")) + "&MMplayerType=" + pt + "&MMdoctitle=" + encodeURIComponent(doc.title.slice(0, 47) + " - Flash Player Installation");
            if (typeof par.flashvars !== UNDEF) {
                par.flashvars += "&" + fv;
            }
            else {
                par.flashvars = fv;
            }
            // IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,
            // because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work
            if (ua.ie && obj.readyState != 4) {
                var newObj = createElement("div");
                replaceElemIdStr += "SWFObjectNew";
                newObj.setAttribute("id", replaceElemIdStr);
                obj.parentNode.insertBefore(newObj, obj); // insert placeholder div that will be replaced by the object element that loads expressinstall.swf
                obj.style.display = "none";
                removeSWF(obj); //removeSWF accepts elements now
            }
            createSWF(att, par, replaceElemIdStr);
        }
    }

    /* Functions to abstract and display fallback content
    */
    function displayFbContent(obj) {
        if (ua.ie && obj.readyState != 4) {
            // IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,
            // because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work
            obj.style.display = "none";
            var el = createElement("div");
            obj.parentNode.insertBefore(el, obj); // insert placeholder div that will be replaced by the fallback content
            el.parentNode.replaceChild(abstractFbContent(obj), el);
            removeSWF(obj); //removeSWF accepts elements now
        }
        else {
            obj.parentNode.replaceChild(abstractFbContent(obj), obj);
        }
    }

    function abstractFbContent(obj) {
        var ac = createElement("div");
        if (ua.win && ua.ie) {
            ac.innerHTML = obj.innerHTML;
        }
        else {
            var nestedObj = obj.getElementsByTagName(OBJECT)[0];
            if (nestedObj) {
                var c = nestedObj.childNodes;
                if (c) {
                    var cl = c.length;
                    for (var i = 0; i < cl; i++) {
                        if (!(c[i].nodeType == 1 && c[i].nodeName === "PARAM") && !(c[i].nodeType == 8)) {
                            ac.appendChild(c[i].cloneNode(true));
                        }
                    }
                }
            }
        }
        return ac;
    }

    function createIeObject(url, paramStr) {
        var div = createElement("div");
        div.innerHTML = "<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='" + url + "'>" + paramStr + "</object>";
        return div.firstChild;
    }

    /* Cross-browser dynamic SWF creation
    */
    function createSWF(attObj, parObj, id) {
        var r, el = getElementById(id);
        id = getId(id); // ensure id is truly an ID and not an element

        if (ua.wk && ua.wk < 312) { return r; }

        if (el) {
            var o = (ua.ie) ? createElement("div") : createElement(OBJECT),
                attr,
                attrLower,
                param;

            if (typeof attObj.id === UNDEF) { // if no 'id' is defined for the object element, it will inherit the 'id' from the fallback content
                attObj.id = id;
            }

            //Add params
            for (param in parObj) {
                //filter out prototype additions from other potential libraries and IE specific param element
                if (parObj.hasOwnProperty(param) && param.toLowerCase() !== "movie") {
                    createObjParam(o, param, parObj[param]);
                }
            }

            //Create IE object, complete with param nodes
            if (ua.ie) { o = createIeObject(attObj.data, o.innerHTML); }

            //Add attributes to object
            for (attr in attObj) {
                if (attObj.hasOwnProperty(attr)) { // filter out prototype additions from other potential libraries
                    attrLower = attr.toLowerCase();

                    // 'class' is an ECMA4 reserved keyword
                    if (attrLower === "styleclass") {
                        o.setAttribute("class", attObj[attr]);
                    } else if (attrLower !== "classid" && attrLower !== "data") {
                        o.setAttribute(attr, attObj[attr]);
                    }
                }
            }

            if (ua.ie) {
                objIdArr[objIdArr.length] = attObj.id; // stored to fix object 'leaks' on unload (dynamic publishing only)
            } else {
                o.setAttribute("type", FLASH_MIME_TYPE);
                o.setAttribute("data", attObj.data);
            }

            el.parentNode.replaceChild(o, el);
            r = o;
        }

        return r;
    }

    function createObjParam(el, pName, pValue) {
        var p = createElement("param");
        p.setAttribute("name", pName);
        p.setAttribute("value", pValue);
        el.appendChild(p);
    }

    /* Cross-browser SWF removal
        - Especially needed to safely and completely remove a SWF in Internet Explorer
    */
    function removeSWF(id) {
        var obj = getElementById(id);
        if (obj && obj.nodeName.toUpperCase() === "OBJECT") {
            if (ua.ie) {
                obj.style.display = "none";
                (function removeSWFInIE() {
                    if (obj.readyState == 4) {
                        //This step prevents memory leaks in Internet Explorer
                        for (var i in obj) {
                            if (typeof obj[i] === "function") {
                                obj[i] = null;
                            }
                        }
                        obj.parentNode.removeChild(obj);
                    } else {
                        setTimeout(removeSWFInIE, 10);
                    }
                }());
            }
            else {
                obj.parentNode.removeChild(obj);
            }
        }
    }

    function isElement(id) {
        return (id && id.nodeType && id.nodeType === 1);
    }

    function getId(thing) {
        return (isElement(thing)) ? thing.id : thing;
    }

    /* Functions to optimize JavaScript compression
    */
    function getElementById(id) {

        //Allow users to pass an element OR an element's ID
        if (isElement(id)) { return id; }

        var el = null;
        try {
            el = doc.getElementById(id);
        }
        catch (e) {}
        return el;
    }

    function createElement(el) {
        return doc.createElement(el);
    }

    //To aid compression; replaces 14 instances of pareseInt with radix
    function toInt(str) {
        return parseInt(str, 10);
    }

    /* Updated attachEvent function for Internet Explorer
        - Stores attachEvent information in an Array, so on unload the detachEvent functions can be called to avoid memory leaks
    */
    function addListener(target, eventType, fn) {
        target.attachEvent(eventType, fn);
        listenersArr[listenersArr.length] = [target, eventType, fn];
    }

    /* Flash Player and SWF content version matching
    */
    function hasPlayerVersion(rv) {
        rv += ""; //Coerce number to string, if needed.
        var pv = ua.pv, v = rv.split(".");
        v[0] = toInt(v[0]);
        v[1] = toInt(v[1]) || 0; // supports short notation, e.g. "9" instead of "9.0.0"
        v[2] = toInt(v[2]) || 0;
        return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
    }

    /* Cross-browser dynamic CSS creation
        - Based on Bobby van der Sluis' solution: http://www.bobbyvandersluis.com/articles/dynamicCSS.php
    */
    function createCSS(sel, decl, media, newStyle) {
        var h = doc.getElementsByTagName("head")[0];
        if (!h) { return; } // to also support badly authored HTML pages that lack a head element
        var m = (typeof media === "string") ? media : "screen";
        if (newStyle) {
            dynamicStylesheet = null;
            dynamicStylesheetMedia = null;
        }
        if (!dynamicStylesheet || dynamicStylesheetMedia != m) {
            // create dynamic stylesheet + get a global reference to it
            var s = createElement("style");
            s.setAttribute("type", "text/css");
            s.setAttribute("media", m);
            dynamicStylesheet = h.appendChild(s);
            if (ua.ie && typeof doc.styleSheets !== UNDEF && doc.styleSheets.length > 0) {
                dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];
            }
            dynamicStylesheetMedia = m;
        }
        // add style rule
        if (dynamicStylesheet) {
            if (typeof dynamicStylesheet.addRule !== UNDEF) {
                dynamicStylesheet.addRule(sel, decl);
            } else if (typeof doc.createTextNode !== UNDEF) {
                dynamicStylesheet.appendChild(doc.createTextNode(sel + " {" + decl + "}"));
            }
        }
    }

    function setVisibility(id, isVisible) {
        if (!autoHideShow) { return; }
        var v = isVisible ? "visible" : "hidden",
            el = getElementById(id);
        if (isDomLoaded && el) {
            el.style.visibility = v;
        } else if (typeof id === "string") {
            createCSS("#" + id, "visibility:" + v);
        }
    }

    /* Filter to avoid XSS attacks
    */
    function urlEncodeIfNecessary(s) {
        var regex = /[\\\"<>\.;]/;
        var hasBadChars = regex.exec(s) !== null;
        return hasBadChars && typeof encodeURIComponent !== UNDEF ? encodeURIComponent(s) : s;
    }

    /* Release memory to avoid memory leaks caused by closures, fix hanging audio/video threads and force open sockets/NetConnections to disconnect (Internet Explorer only)
    */
    var cleanup = function () {
        if (ua.ie) {
            window.attachEvent("onunload", function () {
                // remove listeners to avoid memory leaks
                var ll = listenersArr.length;
                for (var i = 0; i < ll; i++) {
                    listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);
                }
                // cleanup dynamically embedded objects to fix audio/video threads and force open sockets and NetConnections to disconnect
                var il = objIdArr.length;
                for (var j = 0; j < il; j++) {
                    removeSWF(objIdArr[j]);
                }
                // cleanup library's main closures to avoid memory leaks
                for (var k in ua) {
                    ua[k] = null;
                }
                ua = null;
                for (var l in swfobject) {
                    swfobject[l] = null;
                }
                swfobject = null;
            });
        }
    }();

    return {
        /* Public API
            - Reference: http://code.google.com/p/swfobject/wiki/documentation
        */
        registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {
            if (ua.w3 && objectIdStr && swfVersionStr) {
                var regObj = {};
                regObj.id = objectIdStr;
                regObj.swfVersion = swfVersionStr;
                regObj.expressInstall = xiSwfUrlStr;
                regObj.callbackFn = callbackFn;
                regObjArr[regObjArr.length] = regObj;
                setVisibility(objectIdStr, false);
            }
            else if (callbackFn) {
                callbackFn({success: false, id: objectIdStr});
            }
        },

        getObjectById: function (objectIdStr) {
            if (ua.w3) {
                return getObjectById(objectIdStr);
            }
        },

        embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {

            var id = getId(replaceElemIdStr),
                callbackObj = {success: false, id: id};

            if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {
                setVisibility(id, false);
                addDomLoadEvent(function () {
                    widthStr += ""; // auto-convert to string
                    heightStr += "";
                    var att = {};
                    if (attObj && typeof attObj === OBJECT) {
                        for (var i in attObj) { // copy object to avoid the use of references, because web authors often reuse attObj for multiple SWFs
                            att[i] = attObj[i];
                        }
                    }
                    att.data = swfUrlStr;
                    att.width = widthStr;
                    att.height = heightStr;
                    var par = {};
                    if (parObj && typeof parObj === OBJECT) {
                        for (var j in parObj) { // copy object to avoid the use of references, because web authors often reuse parObj for multiple SWFs
                            par[j] = parObj[j];
                        }
                    }
                    if (flashvarsObj && typeof flashvarsObj === OBJECT) {
                        for (var k in flashvarsObj) { // copy object to avoid the use of references, because web authors often reuse flashvarsObj for multiple SWFs
                            if (flashvarsObj.hasOwnProperty(k)) {

                                var key = (encodeURIEnabled) ? encodeURIComponent(k) : k,
                                    value = (encodeURIEnabled) ? encodeURIComponent(flashvarsObj[k]) : flashvarsObj[k];

                                if (typeof par.flashvars !== UNDEF) {
                                    par.flashvars += "&" + key + "=" + value;
                                }
                                else {
                                    par.flashvars = key + "=" + value;
                                }

                            }
                        }
                    }
                    if (hasPlayerVersion(swfVersionStr)) { // create SWF
                        var obj = createSWF(att, par, replaceElemIdStr);
                        if (att.id == id) {
                            setVisibility(id, true);
                        }
                        callbackObj.success = true;
                        callbackObj.ref = obj;
                        callbackObj.id = obj.id;
                    }
                    else if (xiSwfUrlStr && canExpressInstall()) { // show Adobe Express Install
                        att.data = xiSwfUrlStr;
                        showExpressInstall(att, par, replaceElemIdStr, callbackFn);
                        return;
                    }
                    else { // show fallback content
                        setVisibility(id, true);
                    }
                    if (callbackFn) { callbackFn(callbackObj); }
                });
            }
            else if (callbackFn) { callbackFn(callbackObj); }
        },

        switchOffAutoHideShow: function () {
            autoHideShow = false;
        },

        enableUriEncoding: function (bool) {
            encodeURIEnabled = (typeof bool === UNDEF) ? true : bool;
        },

        ua: ua,

        getFlashPlayerVersion: function () {
            return {major: ua.pv[0], minor: ua.pv[1], release: ua.pv[2]};
        },

        hasFlashPlayerVersion: hasPlayerVersion,

        createSWF: function (attObj, parObj, replaceElemIdStr) {
            if (ua.w3) {
                return createSWF(attObj, parObj, replaceElemIdStr);
            }
            else {
                return undefined;
            }
        },

        showExpressInstall: function (att, par, replaceElemIdStr, callbackFn) {
            if (ua.w3 && canExpressInstall()) {
                showExpressInstall(att, par, replaceElemIdStr, callbackFn);
            }
        },

        removeSWF: function (objElemIdStr) {
            if (ua.w3) {
                removeSWF(objElemIdStr);
            }
        },

        createCSS: function (selStr, declStr, mediaStr, newStyleBoolean) {
            if (ua.w3) {
                createCSS(selStr, declStr, mediaStr, newStyleBoolean);
            }
        },

        addDomLoadEvent: addDomLoadEvent,

        addLoadEvent: addLoadEvent,

        getQueryParamValue: function (param) {
            var q = doc.location.search || doc.location.hash;
            if (q) {
                if (/\?/.test(q)) { q = q.split("?")[1]; } // strip question mark
                if (!param) {
                    return urlEncodeIfNecessary(q);
                }
                var pairs = q.split("&");
                for (var i = 0; i < pairs.length; i++) {
                    if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
                        return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)));
                    }
                }
            }
            return "";
        },

        // For internal usage only
        expressInstallCallback: function () {
            if (isExpressInstallActive) {
                var obj = getElementById(EXPRESS_INSTALL_ID);
                if (obj && storedFbContent) {
                    obj.parentNode.replaceChild(storedFbContent, obj);
                    if (storedFbContentId) {
                        setVisibility(storedFbContentId, true);
                        if (ua.ie) { storedFbContent.style.display = "block"; }
                    }
                    if (storedCallbackFn) { storedCallbackFn(storedCallbackObj); }
                }
                isExpressInstallActive = false;
            }
        },

        version: "2.3"

    };
}();
;
// Ion.RangeSlider | version 2.1.4 | https://github.com/IonDen/ion.rangeSlider
;(function(g){"function"===typeof define&&define.amd?define(["jquery"],function(q){g(q,document,window,navigator)}):g(jQuery,document,window,navigator)})(function(g,q,h,t,v){var u=0,p=function(){var a=t.userAgent,b=/msie\s\d+/i;return 0<a.search(b)&&(a=b.exec(a).toString(),a=a.split(" ")[1],9>a)?(g("html").addClass("lt-ie9"),!0):!1}();Function.prototype.bind||(Function.prototype.bind=function(a){var b=this,d=[].slice;if("function"!=typeof b)throw new TypeError;var c=d.call(arguments,1),e=function(){if(this instanceof
e){var f=function(){};f.prototype=b.prototype;var f=new f,l=b.apply(f,c.concat(d.call(arguments)));return Object(l)===l?l:f}return b.apply(a,c.concat(d.call(arguments)))};return e});Array.prototype.indexOf||(Array.prototype.indexOf=function(a,b){var d;if(null==this)throw new TypeError('"this" is null or not defined');var c=Object(this),e=c.length>>>0;if(0===e)return-1;d=+b||0;Infinity===Math.abs(d)&&(d=0);if(d>=e)return-1;for(d=Math.max(0<=d?d:e-Math.abs(d),0);d<e;){if(d in c&&c[d]===a)return d;d++}return-1});
var r=function(a,b,d){this.VERSION="2.1.4";this.input=a;this.plugin_count=d;this.old_to=this.old_from=this.update_tm=this.calc_count=this.current_plugin=0;this.raf_id=this.old_min_interval=null;this.is_update=this.is_key=this.no_diapason=this.force_redraw=this.dragging=!1;this.is_start=!0;this.is_click=this.is_resize=this.is_active=this.is_finish=!1;this.$cache={win:g(h),body:g(q.body),input:g(a),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,
s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]};this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]};this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,
p_single_fake:0,p_single_left:0};var c=this.$cache.input;a=c.prop("value");var e;d={type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!1,keyboard_step:5,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",
postfix:"",max_postfix:"",decorate_both:!0,values_separator:" \u2014 ",input_values_separator:";",disable:!1,onStart:null,onChange:null,onFinish:null,onUpdate:null};c={type:c.data("type"),min:c.data("min"),max:c.data("max"),from:c.data("from"),to:c.data("to"),step:c.data("step"),min_interval:c.data("minInterval"),max_interval:c.data("maxInterval"),drag_interval:c.data("dragInterval"),values:c.data("values"),from_fixed:c.data("fromFixed"),from_min:c.data("fromMin"),from_max:c.data("fromMax"),from_shadow:c.data("fromShadow"),
to_fixed:c.data("toFixed"),to_min:c.data("toMin"),to_max:c.data("toMax"),to_shadow:c.data("toShadow"),prettify_enabled:c.data("prettifyEnabled"),prettify_separator:c.data("prettifySeparator"),force_edges:c.data("forceEdges"),keyboard:c.data("keyboard"),keyboard_step:c.data("keyboardStep"),grid:c.data("grid"),grid_margin:c.data("gridMargin"),grid_num:c.data("gridNum"),grid_snap:c.data("gridSnap"),hide_min_max:c.data("hideMinMax"),hide_from_to:c.data("hideFromTo"),prefix:c.data("prefix"),postfix:c.data("postfix"),
max_postfix:c.data("maxPostfix"),decorate_both:c.data("decorateBoth"),values_separator:c.data("valuesSeparator"),input_values_separator:c.data("inputValuesSeparator"),disable:c.data("disable")};c.values=c.values&&c.values.split(",");for(e in c)c.hasOwnProperty(e)&&(c[e]||0===c[e]||delete c[e]);a&&(a=a.split(c.input_values_separator||b.input_values_separator||";"),a[0]&&a[0]==+a[0]&&(a[0]=+a[0]),a[1]&&a[1]==+a[1]&&(a[1]=+a[1]),b&&b.values&&b.values.length?(d.from=a[0]&&b.values.indexOf(a[0]),d.to=
a[1]&&b.values.indexOf(a[1])):(d.from=a[0]&&+a[0],d.to=a[1]&&+a[1]));g.extend(d,b);g.extend(d,c);this.options=d;this.validate();this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null};this.init()};r.prototype={init:function(a){this.no_diapason=!1;this.coords.p_step=this.convertToPercent(this.options.step,!0);this.target="base";this.toggleInput();this.append();this.setMinMax();
a?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart());this.updateScene()},append:function(){this.$cache.input.before('<span class="irs js-irs-'+this.plugin_count+'"></span>');this.$cache.input.prop("readonly",!0);this.$cache.cont=this.$cache.input.prev();this.result.slider=this.$cache.cont;this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="-1"><span class="irs-line-left"></span><span class="irs-line-mid"></span><span class="irs-line-right"></span></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span><span class="irs-bar"></span>');
this.$cache.rs=this.$cache.cont.find(".irs");this.$cache.min=this.$cache.cont.find(".irs-min");this.$cache.max=this.$cache.cont.find(".irs-max");this.$cache.from=this.$cache.cont.find(".irs-from");this.$cache.to=this.$cache.cont.find(".irs-to");this.$cache.single=this.$cache.cont.find(".irs-single");this.$cache.bar=this.$cache.cont.find(".irs-bar");this.$cache.line=this.$cache.cont.find(".irs-line");this.$cache.grid=this.$cache.cont.find(".irs-grid");"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar-edge"></span><span class="irs-shadow shadow-single"></span><span class="irs-slider single"></span>'),
this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-slider from"></span><span class="irs-slider to"></span>'),this.$cache.s_from=this.$cache.cont.find(".from"),
this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler());this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none");this.appendGrid();this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.cont.removeClass("irs-disabled"),this.$cache.input[0].disabled=
!1,this.bindEvents());this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var a=this.options.max,b=this.options.to;this.options.from>this.options.min&&b===a?this.$cache.s_from.addClass("type_last"):b<a&&this.$cache.s_to.addClass("type_last")},changeLevel:function(a){switch(a){case "single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake);break;case "from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake);
this.$cache.s_from.addClass("state_hover");this.$cache.s_from.addClass("type_last");this.$cache.s_to.removeClass("type_last");break;case "to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake);this.$cache.s_to.addClass("state_hover");this.$cache.s_to.addClass("type_last");this.$cache.s_from.removeClass("type_last");break;case "both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-
this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>');this.$cache.cont.addClass("irs-disabled")},remove:function(){this.$cache.cont.remove();this.$cache.cont=null;this.$cache.line.off("keydown.irs_"+this.plugin_count);this.$cache.body.off("touchmove.irs_"+this.plugin_count);this.$cache.body.off("mousemove.irs_"+this.plugin_count);this.$cache.win.off("touchend.irs_"+
this.plugin_count);this.$cache.win.off("mouseup.irs_"+this.plugin_count);p&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count));this.$cache.grid_labels=[];this.coords.big=[];this.coords.big_w=[];this.coords.big_p=[];this.coords.big_x=[];cancelAnimationFrame(this.raf_id)},bindEvents:function(){if(!this.no_diapason){this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this));this.$cache.body.on("mousemove.irs_"+this.plugin_count,
this.pointerMove.bind(this));this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this));this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this));this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"));this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"));this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,
"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")));"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),
this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+
this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),
this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+
this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")));if(this.options.keyboard)this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard"));p&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this)))}},
pointerMove:function(a){this.dragging&&(this.coords.x_pointer=(a.pageX||a.originalEvent.touches&&a.originalEvent.touches[0].pageX)-this.coords.x_gap,this.calc())},pointerUp:function(a){if(this.current_plugin===this.plugin_count&&this.is_active){this.is_active=!1;this.$cache.cont.find(".state_hover").removeClass("state_hover");this.force_redraw=!0;p&&g("*").prop("unselectable",!1);this.updateScene();this.restoreOriginalMinInterval();if(g.contains(this.$cache.cont[0],a.target)||this.dragging)this.is_finish=
!0,this.callOnFinish();this.dragging=!1}},pointerDown:function(a,b){b.preventDefault();var d=b.pageX||b.originalEvent.touches&&b.originalEvent.touches[0].pageX;2!==b.button&&("both"===a&&this.setTempMinInterval(),a||(a=this.target),this.current_plugin=this.plugin_count,this.target=a,this.dragging=this.is_active=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=d-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(a),p&&g("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),
this.updateScene())},pointerClick:function(a,b){b.preventDefault();var d=b.pageX||b.originalEvent.touches&&b.originalEvent.touches[0].pageX;2!==b.button&&(this.current_plugin=this.plugin_count,this.target=a,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(d-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(a,b){if(!(this.current_plugin!==this.plugin_count||b.altKey||b.ctrlKey||b.shiftKey||b.metaKey)){switch(b.which){case 83:case 65:case 40:case 37:b.preventDefault();
this.moveByKey(!1);break;case 87:case 68:case 38:case 39:b.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(a){var b=this.coords.p_pointer,b=a?b+this.options.keyboard_step:b-this.options.keyboard_step;this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*b);this.is_key=!0;this.calc()},setMinMax:function(){this.options&&(this.options.hide_min_max?(this.$cache.min[0].style.display="none",this.$cache.max[0].style.display="none"):(this.options.values.length?(this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),
this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]))):(this.$cache.min.html(this.decorate(this._prettify(this.options.min),this.options.min)),this.$cache.max.html(this.decorate(this._prettify(this.options.max),this.options.max))),this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)))},setTempMinInterval:function(){var a=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval);
this.options.min_interval=a},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(a){if(this.options){this.calc_count++;if(10===this.calc_count||a)this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent();if(this.coords.w_rs){this.calcPointerPercent();a=this.getHandleX();"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,a=this.getHandleX(),this.target=
this.options.drag_interval?"both_one":this.chooseHandle(a));switch(this.target){case "base":var b=(this.options.max-this.options.min)/100;a=(this.result.from-this.options.min)/b;b=(this.result.to-this.options.min)/b;this.coords.p_single_real=this.toFixed(a);this.coords.p_from_real=this.toFixed(a);this.coords.p_to_real=this.toFixed(b);this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max);this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,
this.options.from_min,this.options.from_max);this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max);this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);this.target=null;break;case "single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(a);this.coords.p_single_real=
this.calcWithStep(this.coords.p_single_real);this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max);this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case "from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(a);this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real);this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real);
this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max);this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from");this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from");this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case "to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(a);this.coords.p_to_real=
this.calcWithStep(this.coords.p_to_real);this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real);this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max);this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to");this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to");this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);
break;case "both":if(this.options.from_fixed||this.options.to_fixed)break;a=this.toFixed(a+.1*this.coords.p_handle);this.coords.p_from_real=this.convertToRealPercent(a)-this.coords.p_gap_left;this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real);this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max);this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from");this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);
this.coords.p_to_real=this.convertToRealPercent(a)+this.coords.p_gap_right;this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real);this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max);this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to");this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case "both_one":if(!this.options.from_fixed&&!this.options.to_fixed){var d=this.convertToRealPercent(a);
a=this.result.to_percent-this.result.from_percent;var c=a/2,b=d-c,d=d+c;0>b&&(b=0,d=b+a);100<d&&(d=100,b=d-a);this.coords.p_from_real=this.calcWithStep(b);this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max);this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);this.coords.p_to_real=this.calcWithStep(d);this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max);this.coords.p_to_fake=
this.convertToFakePercent(this.coords.p_to_real)}}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-
this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to]));this.calcMinMax();this.calcLabels()}}},calcPointerPercent:function(){this.coords.w_rs?(0>this.coords.x_pointer||isNaN(this.coords.x_pointer)?
this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(a){return a/(100-this.coords.p_handle)*100},convertToFakePercent:function(a){return a/100*(100-this.coords.p_handle)},getHandleX:function(){var a=100-this.coords.p_handle,b=this.toFixed(this.coords.p_pointer-this.coords.p_gap);0>b?b=0:b>a&&(b=a);return b},calcHandlePercent:function(){this.coords.w_handle=
"single"===this.options.type?this.$cache.s_single.outerWidth(!1):this.$cache.s_from.outerWidth(!1);this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(a){return"single"===this.options.type?"single":a>=this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=
this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=
this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=
this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&
(cancelAnimationFrame(this.raf_id),this.raf_id=null);clearTimeout(this.update_tm);this.update_tm=null;this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1);if(this.coords.w_rs){this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0);if(this.coords.w_rs!==this.coords.w_rs_old||this.force_redraw)this.setMinMax(),
this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow();if(this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)){if(this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key){this.drawLabels();this.$cache.bar[0].style.left=this.coords.p_bar_x+"%";this.$cache.bar[0].style.width=this.coords.p_bar_w+"%";if("single"===this.options.type)this.$cache.s_single[0].style.left=
this.coords.p_single_fake+"%",this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from);else{this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%";this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%";if(this.old_from!==this.result.from||this.force_redraw)this.$cache.from[0].style.left=this.labels.p_from_left+
"%";if(this.old_to!==this.result.to||this.force_redraw)this.$cache.to[0].style.left=this.labels.p_to_left+"%";this.$cache.single[0].style.left=this.labels.p_single_left+"%";this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to);this.$cache.input.data("from",this.result.from);this.$cache.input.data("to",this.result.to)}this.old_from===
this.result.from&&this.old_to===this.result.to||this.is_start||this.$cache.input.trigger("change");this.old_from=this.result.from;this.old_to=this.result.to;this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange();if(this.is_key||this.is_click)this.is_click=this.is_key=!1,this.callOnFinish();this.is_finish=this.is_resize=this.is_update=!1}this.force_redraw=this.is_click=this.is_key=this.is_start=!1}}},drawLabels:function(){if(this.options){var a=this.options.values.length,
b=this.options.p_values,d;if(!this.options.hide_from_to)if("single"===this.options.type)a=a?this.decorate(b[this.result.from]):this.decorate(this._prettify(this.result.from),this.result.from),this.$cache.single.html(a),this.calcLabels(),this.$cache.min[0].style.visibility=this.labels.p_single_left<this.labels.p_min+1?"hidden":"visible",this.$cache.max[0].style.visibility=this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?"hidden":"visible";else{a?(this.options.decorate_both?
(a=this.decorate(b[this.result.from]),a+=this.options.values_separator,a+=this.decorate(b[this.result.to])):a=this.decorate(b[this.result.from]+this.options.values_separator+b[this.result.to]),d=this.decorate(b[this.result.from]),b=this.decorate(b[this.result.to])):(this.options.decorate_both?(a=this.decorate(this._prettify(this.result.from),this.result.from),a+=this.options.values_separator,a+=this.decorate(this._prettify(this.result.to),this.result.to)):a=this.decorate(this._prettify(this.result.from)+
this.options.values_separator+this._prettify(this.result.to),this.result.to),d=this.decorate(this._prettify(this.result.from),this.result.from),b=this.decorate(this._prettify(this.result.to),this.result.to));this.$cache.single.html(a);this.$cache.from.html(d);this.$cache.to.html(b);this.calcLabels();b=Math.min(this.labels.p_single_left,this.labels.p_from_left);a=this.labels.p_single_left+this.labels.p_single_fake;d=this.labels.p_to_left+this.labels.p_to_fake;var c=Math.max(a,d);this.labels.p_from_left+
this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c=d):(this.$cache.from[0].style.visibility=
"hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",c=Math.max(a,d))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden");this.$cache.min[0].style.visibility=b<this.labels.p_min+1?"hidden":"visible";this.$cache.max[0].style.visibility=c>100-this.labels.p_max-1?"hidden":"visible"}}},drawShadow:function(){var a=this.options,b=this.$cache,d="number"===typeof a.from_min&&
!isNaN(a.from_min),c="number"===typeof a.from_max&&!isNaN(a.from_max),e="number"===typeof a.to_min&&!isNaN(a.to_min),f="number"===typeof a.to_max&&!isNaN(a.to_max);"single"===a.type?a.from_shadow&&(d||c)?(d=this.convertToPercent(d?a.from_min:a.min),c=this.convertToPercent(c?a.from_max:a.max)-d,d=this.toFixed(d-this.coords.p_handle/100*d),c=this.toFixed(c-this.coords.p_handle/100*c),d+=this.coords.p_handle/2,b.shad_single[0].style.display="block",b.shad_single[0].style.left=d+"%",b.shad_single[0].style.width=
c+"%"):b.shad_single[0].style.display="none":(a.from_shadow&&(d||c)?(d=this.convertToPercent(d?a.from_min:a.min),c=this.convertToPercent(c?a.from_max:a.max)-d,d=this.toFixed(d-this.coords.p_handle/100*d),c=this.toFixed(c-this.coords.p_handle/100*c),d+=this.coords.p_handle/2,b.shad_from[0].style.display="block",b.shad_from[0].style.left=d+"%",b.shad_from[0].style.width=c+"%"):b.shad_from[0].style.display="none",a.to_shadow&&(e||f)?(e=this.convertToPercent(e?a.to_min:a.min),a=this.convertToPercent(f?
a.to_max:a.max)-e,e=this.toFixed(e-this.coords.p_handle/100*e),a=this.toFixed(a-this.coords.p_handle/100*a),e+=this.coords.p_handle/2,b.shad_to[0].style.display="block",b.shad_to[0].style.left=e+"%",b.shad_to[0].style.width=a+"%"):b.shad_to[0].style.display="none")},callOnStart:function(){if(this.options.onStart&&"function"===typeof this.options.onStart)this.options.onStart(this.result)},callOnChange:function(){if(this.options.onChange&&"function"===typeof this.options.onChange)this.options.onChange(this.result)},
callOnFinish:function(){if(this.options.onFinish&&"function"===typeof this.options.onFinish)this.options.onFinish(this.result)},callOnUpdate:function(){if(this.options.onUpdate&&"function"===typeof this.options.onUpdate)this.options.onUpdate(this.result)},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input")},convertToPercent:function(a,b){var d=this.options.max-this.options.min;return d?this.toFixed((b?a:a-this.options.min)/(d/100)):(this.no_diapason=!0,0)},convertToValue:function(a){var b=
this.options.min,d=this.options.max,c=b.toString().split(".")[1],e=d.toString().split(".")[1],f,l,g=0,k=0;if(0===a)return this.options.min;if(100===a)return this.options.max;c&&(g=f=c.length);e&&(g=l=e.length);f&&l&&(g=f>=l?f:l);0>b&&(k=Math.abs(b),b=+(b+k).toFixed(g),d=+(d+k).toFixed(g));a=(d-b)/100*a+b;(b=this.options.step.toString().split(".")[1])?a=+a.toFixed(b.length):(a/=this.options.step,a*=this.options.step,a=+a.toFixed(0));k&&(a-=k);k=b?+a.toFixed(b.length):this.toFixed(a);k<this.options.min?
k=this.options.min:k>this.options.max&&(k=this.options.max);return k},calcWithStep:function(a){var b=Math.round(a/this.coords.p_step)*this.coords.p_step;100<b&&(b=100);100===a&&(b=100);return this.toFixed(b)},checkMinInterval:function(a,b,d){var c=this.options;if(!c.min_interval)return a;a=this.convertToValue(a);b=this.convertToValue(b);"from"===d?b-a<c.min_interval&&(a=b-c.min_interval):a-b<c.min_interval&&(a=b+c.min_interval);return this.convertToPercent(a)},checkMaxInterval:function(a,b,d){var c=
this.options;if(!c.max_interval)return a;a=this.convertToValue(a);b=this.convertToValue(b);"from"===d?b-a>c.max_interval&&(a=b-c.max_interval):a-b>c.max_interval&&(a=b+c.max_interval);return this.convertToPercent(a)},checkDiapason:function(a,b,d){a=this.convertToValue(a);var c=this.options;"number"!==typeof b&&(b=c.min);"number"!==typeof d&&(d=c.max);a<b&&(a=b);a>d&&(a=d);return this.convertToPercent(a)},toFixed:function(a){a=a.toFixed(9);return+a},_prettify:function(a){return this.options.prettify_enabled?
this.options.prettify&&"function"===typeof this.options.prettify?this.options.prettify(a):this.prettify(a):a},prettify:function(a){return a.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(a,b){if(!this.options.force_edges)return this.toFixed(a);0>a?a=0:a>100-b&&(a=100-b);return this.toFixed(a)},validate:function(){var a=this.options,b=this.result,d=a.values,c=d.length,e,f;"string"===typeof a.min&&(a.min=+a.min);"string"===typeof a.max&&
(a.max=+a.max);"string"===typeof a.from&&(a.from=+a.from);"string"===typeof a.to&&(a.to=+a.to);"string"===typeof a.step&&(a.step=+a.step);"string"===typeof a.from_min&&(a.from_min=+a.from_min);"string"===typeof a.from_max&&(a.from_max=+a.from_max);"string"===typeof a.to_min&&(a.to_min=+a.to_min);"string"===typeof a.to_max&&(a.to_max=+a.to_max);"string"===typeof a.keyboard_step&&(a.keyboard_step=+a.keyboard_step);"string"===typeof a.grid_num&&(a.grid_num=+a.grid_num);a.max<a.min&&(a.max=a.min);if(c)for(a.p_values=
[],a.min=0,a.max=c-1,a.step=1,a.grid_num=a.max,a.grid_snap=!0,f=0;f<c;f++)e=+d[f],isNaN(e)?e=d[f]:(d[f]=e,e=this._prettify(e)),a.p_values.push(e);if("number"!==typeof a.from||isNaN(a.from))a.from=a.min;if("number"!==typeof a.to||isNaN(a.from))a.to=a.max;if("single"===a.type)a.from<a.min&&(a.from=a.min),a.from>a.max&&(a.from=a.max);else{if(a.from<a.min||a.from>a.max)a.from=a.min;if(a.to>a.max||a.to<a.min)a.to=a.max;a.from>a.to&&(a.from=a.to)}if("number"!==typeof a.step||isNaN(a.step)||!a.step||0>a.step)a.step=
1;if("number"!==typeof a.keyboard_step||isNaN(a.keyboard_step)||!a.keyboard_step||0>a.keyboard_step)a.keyboard_step=5;"number"===typeof a.from_min&&a.from<a.from_min&&(a.from=a.from_min);"number"===typeof a.from_max&&a.from>a.from_max&&(a.from=a.from_max);"number"===typeof a.to_min&&a.to<a.to_min&&(a.to=a.to_min);"number"===typeof a.to_max&&a.from>a.to_max&&(a.to=a.to_max);if(b){b.min!==a.min&&(b.min=a.min);b.max!==a.max&&(b.max=a.max);if(b.from<b.min||b.from>b.max)b.from=a.from;if(b.to<b.min||b.to>
b.max)b.to=a.to}if("number"!==typeof a.min_interval||isNaN(a.min_interval)||!a.min_interval||0>a.min_interval)a.min_interval=0;if("number"!==typeof a.max_interval||isNaN(a.max_interval)||!a.max_interval||0>a.max_interval)a.max_interval=0;a.min_interval&&a.min_interval>a.max-a.min&&(a.min_interval=a.max-a.min);a.max_interval&&a.max_interval>a.max-a.min&&(a.max_interval=a.max-a.min)},decorate:function(a,b){var d="",c=this.options;c.prefix&&(d+=c.prefix);d+=a;c.max_postfix&&(c.values.length&&a===c.p_values[c.max]?
(d+=c.max_postfix,c.postfix&&(d+=" ")):b===c.max&&(d+=c.max_postfix,c.postfix&&(d+=" ")));c.postfix&&(d+=c.postfix);return d},updateFrom:function(){this.result.from=this.options.from;this.result.from_percent=this.convertToPercent(this.result.from);this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to;this.result.to_percent=this.convertToPercent(this.result.to);this.options.values&&(this.result.to_value=this.options.values[this.result.to])},
updateResult:function(){this.result.min=this.options.min;this.result.max=this.options.max;this.updateFrom();this.updateTo()},appendGrid:function(){if(this.options.grid){var a=this.options,b,d;b=a.max-a.min;var c=a.grid_num,e=0,f=0,g=4,h,k,m=0,n="";this.calcGridMargin();a.grid_snap?(c=b/a.step,e=this.toFixed(a.step/(b/100))):e=this.toFixed(100/c);4<c&&(g=3);7<c&&(g=2);14<c&&(g=1);28<c&&(g=0);for(b=0;b<c+1;b++){h=g;f=this.toFixed(e*b);100<f&&(f=100,h-=2,0>h&&(h=0));this.coords.big[b]=f;k=(f-e*(b-1))/
(h+1);for(d=1;d<=h&&0!==f;d++)m=this.toFixed(f-k*d),n+='<span class="irs-grid-pol small" style="left: '+m+'%"></span>';n+='<span class="irs-grid-pol" style="left: '+f+'%"></span>';m=this.convertToValue(f);m=a.values.length?a.p_values[m]:this._prettify(m);n+='<span class="irs-grid-text js-grid-text-'+b+'" style="left: '+f+'%">'+m+"</span>"}this.coords.big_num=Math.ceil(c+1);this.$cache.cont.addClass("irs-with-grid");this.$cache.grid.html(n);this.cacheGridLabels()}},cacheGridLabels:function(){var a,
b,d=this.coords.big_num;for(b=0;b<d;b++)a=this.$cache.grid.find(".js-grid-text-"+b),this.$cache.grid_labels.push(a);this.calcGridLabels()},calcGridLabels:function(){var a,b;b=[];var d=[],c=this.coords.big_num;for(a=0;a<c;a++)this.coords.big_w[a]=this.$cache.grid_labels[a].outerWidth(!1),this.coords.big_p[a]=this.toFixed(this.coords.big_w[a]/this.coords.w_rs*100),this.coords.big_x[a]=this.toFixed(this.coords.big_p[a]/2),b[a]=this.toFixed(this.coords.big[a]-this.coords.big_x[a]),d[a]=this.toFixed(b[a]+
this.coords.big_p[a]);this.options.force_edges&&(b[0]<-this.coords.grid_gap&&(b[0]=-this.coords.grid_gap,d[0]=this.toFixed(b[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),d[c-1]>100+this.coords.grid_gap&&(d[c-1]=100+this.coords.grid_gap,b[c-1]=this.toFixed(d[c-1]-this.coords.big_p[c-1]),this.coords.big_x[c-1]=this.toFixed(this.coords.big_p[c-1]-this.coords.grid_gap)));this.calcGridCollision(2,b,d);this.calcGridCollision(4,b,d);for(a=0;a<c;a++)b=this.$cache.grid_labels[a][0],
b.style.marginLeft=-this.coords.big_x[a]+"%"},calcGridCollision:function(a,b,d){var c,e,f,g=this.coords.big_num;for(c=0;c<g;c+=a){e=c+a/2;if(e>=g)break;f=this.$cache.grid_labels[e][0];f.style.visibility=d[c]<=b[e]?"visible":"hidden"}},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_handle="single"===this.options.type?this.$cache.s_single.outerWidth(!1):this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/
this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(a){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.options=g.extend(this.options,a),this.validate(),this.updateResult(a),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),
this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),g.data(this.input,"ionRangeSlider",null),this.remove(),this.options=this.input=null)}};g.fn.ionRangeSlider=function(a){return this.each(function(){g.data(this,"ionRangeSlider")||g.data(this,"ionRangeSlider",new r(this,a,u++))})};(function(){for(var a=0,b=["ms","moz","webkit","o"],d=0;d<b.length&&!h.requestAnimationFrame;++d)h.requestAnimationFrame=h[b[d]+"RequestAnimationFrame"],h.cancelAnimationFrame=
h[b[d]+"CancelAnimationFrame"]||h[b[d]+"CancelRequestAnimationFrame"];h.requestAnimationFrame||(h.requestAnimationFrame=function(b,d){var f=(new Date).getTime(),g=Math.max(0,16-(f-a)),p=h.setTimeout(function(){b(f+g)},g);a=f+g;return p});h.cancelAnimationFrame||(h.cancelAnimationFrame=function(a){clearTimeout(a)})})()});
;
var filter = [];
var bchange = false;
var conjuction = [];
var operator = [];
var comparewith = [];
var defaultFilterValues = [];
var bAdvanceFilter = false;
var arrFilterTree = [];
var arrDataFilterTree = [];
var arrFilterResourceMsgs = undefined;
var bConditionChanged = false;
var callBackFnName = undefined;
var bDataChanged = false;
var iSubParentId = 0;
var varDataType = 0;
var flgCheckConjunctionEnd = true;
var iElementVal = 0;

var arrFields = [];
var parentTagName = null;
var tagName = null;
var chkbox = null;
var iSubParentId = 0;
var Fields = "";
var newchkbox = null;
var newSubParentId = 0;
var g_AdavncedFilterfields = "";

var FILTER = {
    createControl: function (iFilterId, iSubFilterId, FilterTreeData, arrFilter, bdefaultFilter, sFrom) {
        try {
            FILTER.m_DefaultFields = [];

            data = NETWORK.executeServerMethod(
                GLOBAL.getContextPath("CreateFilterControlFromTreeData", "Home")
                ,
                true,
                {
                    iFilterId: iFilterId,
                    iSubFilterId: iSubFilterId,
                    treeData: FilterTreeData,
                    filter: arrFilter,
                    bdefaultFilter: bdefaultFilter,
                    sFrom: sFrom
                },
                ""
                );

            if (data.lValue > 0) {
                return data.data;
            }
            else {
                return null;
            }
        }
        catch (err) {
            alert("Exception: {FILTER.createControl} " + err.message);
        }
    },

    setVariables: function (conjuctions, operators, comparewiths, FilterTree, FilterValue, iFilterId, iSubFilterId, FilterResource, DataFilterTree, sFrom, dashletid) {
        try {
            if (dashletid == undefined) {
                dashletid = "";
            }
            conjuction = conjuctions;
            operator = operators;
            comparewith = comparewiths;
            arrFilterTree = FilterTree;
            arrDataFilterTree = DataFilterTree;
            arrFilterResourceMsgs = FilterResource;
            if (FilterValue != null && FilterValue != undefined)
                FILTER.displayAdvanceFilter(FilterValue, iFilterId, iSubFilterId, false, sFrom, dashletid);
            var FilterFieldsUL = document.getElementById("FilterFields_" + FILTER.getFilterId(iFilterId, iSubFilterId));
            if (FilterFieldsUL != null) {
                var pageHeight = GLOBAL.getPageHeight();
                if (pageHeight > 250) {
                    FilterFieldsUL.style.height = (pageHeight - 250) + "px";
                }
            }
            $(document).click(function (e) {
                try {
                    var container = $("#" + FILTER.getFilterTreeId(iFilterId, iSubFilterId, sFrom, dashletid));
                    var container1 = $("#" + FILTER.getFilterDateRangeTreeId(iFilterId, iSubFilterId, sFrom, dashletid));
                    var container2 = $("#" + FILTER.getFilterDataTreeId(iFilterId, iSubFilterId, sFrom, dashletid));
                }
                catch (err) {
                    alert("Exception: {FILTER.setVariables} " + err.message.toString());
                }
            });
        }
        catch (err) {
            alert("Exception: {FILTER.setVariables} " + err.message);
        }
    },

    getDataFieldsTree: function (eleTxt, iFilterId, iSubFilterId, sFrom) {

        try {
            var FilterTree = document.getElementById(FILTER.getFilterDataTreeId(iFilterId, iSubFilterId, sFrom));
            if (FilterTree != null) {
                FilterTree.style.top = "auto";
                FilterTree.style.display = "block";
                if (eleTxt.getBoundingClientRect().top > (GLOBAL.getPageHeight() / 2)) {
                    eleTxt.type = "text";
                    eleTxt.parentElement.appendChild(FilterTree);
                    $(eleTxt.parentNode).toggleClass("open");
                    FCommon.UI.setFocusDropdownPopupPosition(eleTxt, FilterTree);
                }
                else {
                    $(eleTxt.parentNode).toggleClass("open");
                    eleTxt.parentElement.appendChild(FilterTree);
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.getDataFieldsTree} " + err.message);
        }
    },

    getDateRangeTree: function (element, iFilterId, iSubFilterId) {
        try {
            var FilterTree = document.getElementById(FILTER.getFilterDateRangeTreeId(iFilterId, iSubFilterId));
            FilterTree.style.top = "auto";
            FilterTree.style.display = "block";
            FCommon.UI.setFocusDropdownPopupPosition(element, FilterTree);

            if (element.getBoundingClientRect().top > (GLOBAL.getPageHeight() / 2)) {
                element.type = "text";
                element.parentElement.appendChild(FilterTree);
                if (iElementVal > 0) {
                    if (document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']').length > 0) {
                        document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].style.backgroundColor = '';
                    }
                }
                iElementVal = element.getAttribute('data-value');
                if (FCommon.UI.isValidObject(document.getElementById(FilterTree.id))) {
                    if (document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']').length > 0) {
                        document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].style.backgroundColor = '#9ecaed';
                        if (FCommon.UI.isValidObject(document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].parentElement)) {
                            document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].parentElement.style.display = 'block';
                        }
                    }
                }
                $(element.parentNode).toggleClass("open");
            }
            else {
                element.parentElement.appendChild(FilterTree);
                if (iElementVal > 0) {
                    if (document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']').length > 0) {
                        document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].style.backgroundColor = '';
                    }
                }
                iElementVal = element.getAttribute('data-value');
                if (FCommon.UI.isValidObject(document.getElementById(FilterTree.id))) {
                    if (document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']').length > 0) {
                        document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].style.backgroundColor = '#9ecaed';
                        if (FCommon.UI.isValidObject(document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].parentElement)) {
                            document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].parentElement.style.display = 'block';
                        }
                    }
                }
                $(element.parentNode).toggleClass("open");
            }
        }
        catch (err) {
            alert("Exception: {FILTER.getDateRangeTree} " + err.message);
        }
    },

    getFormulaControl: function (element, iFilterId, iSubFilterId) {
        try {
            var FilterTree = document.getElementById(FILTER.getFilterFormulaId(iFilterId, iSubFilterId));
            FilterTree.style.top = "auto";
            FilterTree.style.display = "";
            if (element.getBoundingClientRect().top > (GLOBAL.getPageHeight() / 2)) {
                element.type = "text";
                element.parentElement.appendChild(FilterTree);
                iElementVal = element.getAttribute('data-value');
            }
            else {
                element.parentElement.appendChild(FilterTree);
                iElementVal = element.getAttribute('data-value');
            }
        }
        catch (err) {
            alert("Exception: {FILTER.getFormulaControl} " + err.message);
        }
    },

    hideTree: function (iFilterId, iSubFilterId) {
        try {
            var FilterTree = document.getElementById(FILTER.getFilterTreeId(iFilterId, iSubFilterId));
            if (FilterTree.parentNode.className == "dropdown open")
                FilterTree.parentNode.className = "dropdown";
            document.getElementsByClassName(FILTER.ADVANCEFILTER.getAdvanceFilterClassName())[0].parentNode.appendChild(FilterTree);
            FilterTree.style.display = "none";
        }
        catch (err) {
            alert("Exception: {FILTER.hideTree} " + err.message);
        }
    },

    ToggleField: function (element) {
        try {
            var ul = element.nextElementSibling;
            $(ul).slideToggle("fast");
            if (element.children[0].className == "icon-right-arrow") {
                element.children[0].className = "icon-down-arrow";
            }
            else {
                element.children[0].className = "icon-right-arrow";
            }
        }
        catch (err) {
            alert("Exception: {FILTER.ToggleField} " + err.message);
        }
    },

    getFilterValue: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        try {
            if (dashletid == undefined) {
                dashletid = "";
            }
            var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            var sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            var iCounter = 0;
            var iCountDefaultValues = 0;
            var iComapareWith = 0;
            var iConjuction = 0;
            var iOperator = 0;
            var iDataType = 0;
            var iFieldId = 0;
            var iParentId = 0;
            var iSubParentId = 0;
            var sCompareText = "";
            var sCompareValue = "";
            var sExtraFieldName = "";
            var numberlist = null;
            var eleAdvance = null;
            var arrFilter = [];
            var arrDefaultValues = [];
            var eleRow = null;
            var eleField = null;
            var eleValue = null;
            var sFieldName = "";
            var iIndex = 0;
            var isgroup = false;
            var sDateRangeValue = 0;
            var iFromDate = 0;
            var iToDate = 0;
            var sCurrentDate = new Date();
            var iCurrentDay = 0;
            var iCurrentDate = 0;
            var iCurrentMonth = 0;
            var iCurrentYear = 0;
            var iValCurrentDate = 0;
            var iCalendarType = GLOBAL.getCalendarType();

            eleAdvance = FILTER.ADVANCEFILTER.getRowContainer(iFilterId, iSubFilterId, sFrom, dashletid);
            if (FCommon.UI.isValidObject(eleAdvance) == true) {
                var defaulFilter = document.getElementById(sDefaultFilterId);
                if (FCommon.UI.isValidObject(defaulFilter) == true) {
                    if (document.getElementById(sDefaultFilterId).style.display != "none") {
                        arrDefaultValues = FILTER.getDefaultFilterValues(iFilterId, iSubFilterId, sFrom, dashletid);
                        FILTER.displayAdvanceFilter(arrDefaultValues, iFilterId, iSubFilterId, true, sFrom, dashletid);
                    }
                }
                //Checking the Conjunction values.
                var flgWhere = false;
                flgCheckConjunctionEnd = false;
                var iBracketCounter = 0;
                if (parseInt(eleAdvance.children[0].children[0].children[0].value) == -1) {
                    //return (arrFilter);
                }
                else {
                    if (parseInt(eleAdvance.children[0].children[0].children[0].value) == 0) {
                        flgWhere = true;
                        flgCheckConjunctionEnd = true;
                    }
                    else {
                        iBracketCounter = 1;
                    }
                    if (eleAdvance.children.length > 1) {
                        for (iCounter = 1; iCounter < eleAdvance.children.length; iCounter++) {
                            eleRow = eleAdvance.children[iCounter];
                            iIndex = FCommon.UI.getElementPosition(eleRow);
                            if (iIndex < 1) { // Some error
                                return;
                            }
                            iConjuction = parseInt(eleRow.children[0].children[0].value);
                            if (flgWhere == true) {
                                if (iConjuction == 4 || iConjuction == 5 || iConjuction == 8 || iConjuction == 9 || iConjuction == 10) {
                                    if (flgCheckConjunctionEnd == true) {
                                        COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                        return null;
                                    }
                                    else {
                                        flgCheckConjunctionEnd = true;
                                    }
                                }
                                if (iConjuction == 3 || iConjuction == 7) {
                                    flgCheckConjunctionEnd = false;
                                }
                            }
                            else {
                                if (iConjuction == 3 || iConjuction == 5 || iConjuction == 7 || iConjuction == 9) {
                                    flgCheckConjunctionEnd = false;
                                    iBracketCounter++;
                                }
                                if (iConjuction == 4 || iConjuction == 8 || iConjuction == 10) {
                                    if (iBracketCounter == 0) {
                                        if (flgCheckConjunctionEnd == true) {
                                            iBracketCounter++;
                                        }
                                        else {
                                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                            return null;
                                        }
                                    }
                                    else {
                                        flgCheckConjunctionEnd = true;
                                        iBracketCounter--;
                                    }
                                }
                            }
                        }
                        if (iBracketCounter > 0) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                            return null;
                        }
                    }

                    for (iCounter = 0; iCounter < eleAdvance.children.length; iCounter++) {
                        sDateRangeValue = 0;
                        eleRow = eleAdvance.children[iCounter];
                        iIndex = FCommon.UI.getElementPosition(eleRow);
                        if (iIndex < 1) { // Some error
                            return;
                        }

                        iConjuction = parseInt(eleRow.children[0].children[0].value);

                        if (arrFilter.length == 0 && iConjuction == -1)
                            iConjuction = 0;
                        eleField = eleRow.children[0].nextElementSibling.children[0];
                        iOperator = FConvert.toInt(eleRow.children[0].nextElementSibling.nextElementSibling.children[0].value);
                        iComapareWith = FConvert.toInt(eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.children[0].value);
                        eleValue = eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.children[0];
                        sCompareText = "";
                        sCompareValue = "";
                        iDataType = parseInt(eleField.dataset.datatype);
                        sFieldName = eleField.getAttribute('data-fieldname');
                        iFieldId = parseInt(eleField.dataset.fieldid);
                        iParentId = parseInt(eleField.dataset.parent);
                        iSubParentId = parseInt(eleField.dataset.subparent);
                        isgroup = FConvert.toBoolean(eleValue.getAttribute('data-isgroup'));
                        sExtraFieldName = eleField.getAttribute('data-extraFieldName');
                        switch (iComapareWith) {
                            case RD_CompareWith.get('VALUE'):
                                switch (iDataType) {
                                    case MasterDataType.get('TEXT'):
                                        if (eleValue.value == "") {
                                            sCompareValue = "Type a Value";
                                            sCompareText = "Type a Value";
                                        }
                                        else {
                                            sCompareText = eleValue.value;
                                            sCompareValue = eleValue.value;
                                        }
                                        break;
                                    case MasterDataType.get('NUMBER'):
                                    case MasterDataType.get('FRACTION'):
                                    case MasterDataType.get('BIGNUMBER'):
                                    case MasterDataType.get('SMALLNUMBER'):
                                    case MasterDataType.get('TINYNUMBER'):
                                        sCompareValue = eleValue.value;
                                        break;
                                    case MasterDataType.get('BOOLEAN'):
                                        //sCompareValue = eleValue.checked;
                                        sCompareValue = (eleValue.checked == true ? 1 : 0);
                                        break;
                                    case MasterDataType.get('DATETIME'):
                                    case MasterDataType.get('DATE'):
                                        {
                                            //eleValue = eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.children[0];
                                            //eleValue = document.getElementById("advancefilter_date_" + iFilterId + "_" + iSubFilterId); //eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.children[1].children[0].children[3].children[0].children[0].children[1].children[0];
                                            //eleValue = eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.children[1].children[0].children[3].children[0].children[0].children[1].children[0];
                                            sCompareValue = DATEPICKER.getDate(eleValue);
                                        }
                                        break;
                                    case MasterDataType.get('TIME'):
                                        sCompareValue = eleValue.dataset.value;
                                        break;
                                    case MasterDataType.get('NUMBERLIST'):
                                        //Added  old code for trigger filter issue on 24th march 2021.
                                        sCompareValue = eleValue.getAttribute('data-value');//eleValue.value
                                        sCompareText = eleValue.value;
                                        numberlist = eleValue.getAttribute('data-numberlist');
                                        break;
                                    case MasterDataType.get('STRINGLIST'):
                                        sCompareValue = eleValue.value;//eleValue.getAttribute('data-value');
                                        sCompareText = eleValue.value;
                                        numberlist = eleValue.getAttribute('data-numberlist');
                                        break;
                                    case MasterDataType.get('MASTER'):
                                    case MasterDataType.get('EXTERNALTABLE'):
                                        if (eleValue.getAttribute('data-ivalue') == null) {
                                            sCompareValue = eleValue.value;
                                        }
                                        else {
                                            sCompareValue = eleValue.getAttribute('data-ivalue');//eleValue.value;
                                        }
                                        sCompareText = eleValue.value;

                                        if (eleField.value.toLowerCase().trim() == "name") {
                                            iDataType = MasterDataType.get('NUMBER');
                                        }
                                        break;
                                }
                                break;
                            case RD_CompareWith.get('FORMULA'):
                                sCompareValue = eleValue.value;
                                //if (sFrom == undefined || sFrom == '') {
                                //    sCtrlId = "filterFormulaControl_" + iFilterId + "_" + iSubFilterId;
                                //}
                                //else {
                                //    sCtrlId = "filterFormulaControl_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                                //}
                                //sCompareValue = document.getElementById(sCtrlId).value;
                                break;
                            case RD_CompareWith.get('FIELD'):
                                switch (iDataType) {
                                    case MasterDataType.get('TEXT'):
                                        sCompareValue = eleValue.value;
                                        sCompareText = eleValue.value;
                                        break;
                                    case MasterDataType.get('NUMBER'):
                                    case MasterDataType.get('FRACTION'):
                                    case MasterDataType.get('BIGNUMBER'):
                                    case MasterDataType.get('SMALLNUMBER'):
                                    case MasterDataType.get('TINYNUMBER'):
                                        sCompareValue = eleValue.value;
                                        break;
                                    case MasterDataType.get('BOOLEAN'):
                                        //sCompareValue = eleValue.checked;
                                        sCompareValue = (eleValue.checked == true ? 1 : 0);
                                        break;
                                    case MasterDataType.get('DATETIME'):
                                    case MasterDataType.get('DATE'):
                                        sCompareValue = eleValue.getAttribute('data-fieldid');
                                        sCompareText = eleValue.value;//eleValue.dataset.value;
                                        break;
                                    case MasterDataType.get('TIME'):
                                        sCompareValue = eleValue.dataset.value;
                                        break;
                                    case MasterDataType.get('NUMBERLIST'):
                                    case MasterDataType.get('STRINGLIST'):
                                        sCompareValue = eleValue.value;//eleValue.dataset.value;
                                        sCompareText = eleValue.value;
                                        numberlist = eleValue.getAttribute('data-numberlist');
                                        break;
                                    case MasterDataType.get('MASTER'):
                                    case MasterDataType.get('EXTERNALTABLE'):
                                        sCompareValue = eleValue.value;// eleValue.dataset.value;
                                        sCompareText = eleValue.value;
                                        break;
                                }
                                break;
                            case RD_CompareWith.get('DATERANGE'):
                                sDateRangeValue = eleValue.getAttribute('data-value');
                                sCompareValue = eleValue.getAttribute('data-value');
                                sCompareText = eleValue.value;
                                break;
                            default:
                                break;
                        }

                        if (iConjuction == 10) {
                            arrFilter.push(
                                  {
                                      CompareText: "",
                                      CompareValue: "",
                                      CompareWith: -1,
                                      Conjuction: iConjuction,
                                      DataType: 0,
                                      FieldId: 0,
                                      IsGroup: false,
                                      Operator: -1,
                                      ParentId: 0,
                                      SubParentId: 0,
                                      numberlist: numberlist,
                                      sExtraFieldName: sExtraFieldName
                                  });
                        }
                        else {
                            if (iFieldId > 0 && iConjuction != -1) {
                                if (iOperator == -1) {
                                    if (sCompareValue == undefined || sCompareValue.length == 0) {
                                        document.getElementById(sAdvanceFilterId).dataset.invalid = true;
                                    }
                                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                    return null;
                                }
                                if (iComapareWith == -1 && iOperator != 6 && iOperator != 7) {
                                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                    return null;
                                }
                                if (iFieldId != NaN &&
                                   (iDataType != MasterDataType.get('TEXT') && iDataType != MasterDataType.get('NUMBER') && iDataType != MasterDataType.get('FRACTION')
                                   && iDataType != MasterDataType.get('BIGNUMBER') && iDataType != MasterDataType.get('SMALLNUMBER') && iDataType != MasterDataType.get('TINYNUMBER')
                                   && iDataType != MasterDataType.get('DATETIME') && iDataType != MasterDataType.get('DATE'))
                                   && (sCompareValue == undefined || sCompareValue.length == 0 || sCompareValue.trim == "")) {
                                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                    return null;
                                }
                            }
                            if (iOperator == 6 || iOperator == 7) {
                                if (iConjuction != -1 && iOperator != -1 && iFieldId != NaN) {
                                    //if (sFieldName == 'Name' && iDataType == MasterDataType.get('MASTER')) {
                                    //    iDataType = MasterDataType.get('NUMBER');
                                    //}
                                    arrFilter.push(
                                        {
                                            CompareText: sCompareText,
                                            CompareValue: sCompareValue,
                                            CompareWith: iComapareWith,
                                            Conjuction: iConjuction,
                                            DataType: iDataType,
                                            FieldId: iFieldId,
                                            IsGroup: isgroup,
                                            Operator: iOperator,
                                            ParentId: iParentId,
                                            SubParentId: iSubParentId,
                                            numberlist: numberlist,
                                            sExtraFieldName: sExtraFieldName
                                        });
                                }
                                else if (bDataChanged == true) {
                                    document.getElementById(sAdvanceFilterId).dataset.invalid = true;
                                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                    return null;
                                }
                            }
                            else {
                                if (iComapareWith == 3) {
                                    arrFilter.push(
                                       {
                                           CompareText: sCompareText,
                                           CompareValue: sCompareValue,
                                           CompareWith: iComapareWith,
                                           Conjuction: iConjuction,
                                           DataType: iDataType,
                                           FieldId: iFieldId,
                                           IsGroup: isgroup,
                                           Operator: iOperator,
                                           ParentId: iParentId,
                                           SubParentId: iSubParentId,
                                           numberlist: numberlist,
                                           sExtraFieldName: sExtraFieldName
                                       });
                                }
                                else if (iComapareWith != -1 && iConjuction != -1 && iOperator != -1 && iFieldId != NaN &&
                                    (iDataType == MasterDataType.get('TEXT') || iDataType == MasterDataType.get('NUMBER') || iDataType == MasterDataType.get('FRACTION')
                                    || iDataType == MasterDataType.get('BIGNUMBER') || iDataType == MasterDataType.get('SMALLNUMBER') || iDataType == MasterDataType.get('TINYNUMBER'))) {
                                    arrFilter.push(
                                        {
                                            CompareText: sCompareText,
                                            CompareValue: sCompareValue,
                                            CompareWith: iComapareWith,
                                            Conjuction: iConjuction,
                                            DataType: iDataType,
                                            FieldId: iFieldId,
                                            IsGroup: isgroup,
                                            Operator: iOperator,
                                            ParentId: iParentId,
                                            SubParentId: iSubParentId,
                                            numberlist: numberlist,
                                            sExtraFieldName: sExtraFieldName
                                        });
                                }
                                else if (iComapareWith != -1 && iConjuction != -1 && iOperator != -1 && sCompareValue != undefined && sCompareValue.length != 0 && iFieldId != NaN) {
                                    //if (sFieldName == 'Name' && iDataType == MasterDataType.get('MASTER')) {
                                    //    iDataType = MasterDataType.get('NUMBER');
                                    //}
                                    arrFilter.push(
                                        {
                                            CompareText: sCompareText,
                                            CompareValue: sCompareValue,
                                            CompareWith: iComapareWith,
                                            Conjuction: iConjuction,
                                            DataType: iDataType,
                                            FieldId: iFieldId,
                                            IsGroup: isgroup,
                                            Operator: iOperator,
                                            ParentId: iParentId,
                                            SubParentId: iSubParentId,
                                            numberlist: numberlist,
                                            sExtraFieldName: sExtraFieldName
                                        });
                                }
                                else if (bDataChanged == true) {
                                    document.getElementById(sAdvanceFilterId).dataset.invalid = true;
                                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                                    return null;
                                }
                            }
                        }
                    }
                    if (flgCheckConjunctionEnd == false) {
                        COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                        arrFilter = null;
                    }
                }
            }
            if (reportLineModel != '' && reportLineModel != undefined && reportLineModel.RepRec != null) {
                reportLineModel.FilterValue = arrFilter;
                reportLineModel.RepRec.FilterSource = arrFilter;
            }
            return arrFilter;
        }
        catch (err) {
            alert("Exception: {FILTER.getFilterValue} " + err.message);
        }
    },

    getDefaultFilterValues: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        var arrFilterValues = [];
        var iCounter = 0;
        var obj = null;
        try {
            sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            if (document.getElementById(sDefaultFilterId) != null) {
                var DefaultFields = document.getElementById(sDefaultFilterId).children;
                var sScreen = '';
                var Field = null;
                var eleEndField = null;
                var endEleFieldID = '';

                if (FCommon.UI.isValidObject(document.getElementById('idFilterDisplayingScreen'))) {
                    sScreen = document.getElementById('idFilterDisplayingScreen').value;
                };

                if (DefaultFields.length > 0) {
                    for (var iCount = 0; iCount < DefaultFields.length; iCount++) {
                        eleStartField = null;
                        eleEndField = null;
                        dtPickereleEndFieldID = '';
                        Field = document.getElementById(sDefaultFilterId + iCount);
                        if (sScreen == 'Transaction' && Field == null) {
                            Field = document.getElementById(sDefaultFilterId + iCount + "_Start");

                            if (Field != null) {
                                eleEndField = document.getElementById(sDefaultFilterId + iCount + "_End");
                                if (eleEndField != null && eleEndField != '') {
                                    endEleFieldID = eleEndField.getAttribute('data-ctrlid');
                                }
                                obj = {};
                                obj.FieldId = FConvert.toInt(Field.dataset.fieldid);
                                obj.DataType = FConvert.toInt(Field.dataset.datatype);
                                obj.Conjuction = arrFilterValues.length > 0 ? 2 : 0;
                                obj.ParentId = FConvert.toInt(Field.dataset.parent);
                                obj.SubParentId = FConvert.toInt(Field.dataset.subparent);
                                obj.CompareText = "";
                                obj.CompareValue = "";
                                obj.CompareWith = 0;
                                obj.CtrlId = Field.getAttribute('data-ctrlId');
                                switch (parseInt(Field.dataset.datatype)) {
                                    case MasterDataType.get('DATE'):
                                        var FieldChanged = document.getElementById("DatePicker_" + Field.id);
                                        if (FieldChanged != null)
                                            obj.CompareValue = DATEPICKER.getDate("DatePicker_" + Field.id);
                                        break;
                                    case MasterDataType.get('TEXT'):
                                        obj.CompareValue = Field.value;
                                        obj.CompareText = Field.value;
                                        break;
                                }

                                if (eleEndField != null && endEleFieldID != '' && obj.CompareValue != 0 && obj.CompareValue != "") {
                                    if (document.getElementById(endEleFieldID).value != "") {
                                        obj.Operator = 5;
                                    }
                                    else {
                                        obj.Operator = 0;
                                    }

                                    if (FCommon.UI.isValidObject(obj.CompareValue) == true && obj.CompareValue != "") {
                                        arrFilterValues.push(obj);
                                    }

                                    obj = {};
                                    obj.FieldId = FConvert.toInt(Field.dataset.fieldid);
                                    obj.DataType = FConvert.toInt(Field.dataset.datatype);
                                    obj.Conjuction = arrFilterValues.length > 0 ? 2 : 0;
                                    obj.ParentId = FConvert.toInt(Field.dataset.parent);
                                    obj.SubParentId = FConvert.toInt(Field.dataset.subparent);
                                    obj.CompareText = "";
                                    obj.CompareValue = "";
                                    obj.CompareWith = 0;
                                    obj.CtrlId = eleEndField;
                                    obj.Conjuction = 2;
                                    obj.Operator = 4;

                                    switch (parseInt(Field.dataset.datatype)) {
                                        case MasterDataType.get('DATE'):
                                            obj.CompareValue = DATEPICKER.getDate(endEleFieldID);
                                            break;
                                        case MasterDataType.get('TEXT'):
                                            obj.CompareValue = document.getElementById(endEleFieldID).value;
                                            obj.CompareText = document.getElementById(endEleFieldID).value;
                                            break;
                                    }

                                    if (FCommon.UI.isValidObject(obj.CompareValue) == true && obj.CompareValue != "") {
                                        arrFilterValues.push(obj);
                                    }
                                }
                                else {
                                    obj.Operator = 0;
                                    if (FCommon.UI.isValidObject(obj.CompareValue) == true && obj.CompareValue != "") {
                                        arrFilterValues.push(obj);
                                    }
                                }
                            }
                        }
                        else {
                            if (Field != null) {
                                obj = {};
                                obj.FieldId = FConvert.toInt(Field.dataset.fieldid);
                                obj.DataType = FConvert.toInt(Field.dataset.datatype);
                                obj.Conjuction = arrFilterValues.length > 0 ? 2 : 0;
                                obj.ParentId = FConvert.toInt(Field.dataset.parent);
                                obj.SubParentId = FConvert.toInt(Field.dataset.subparent);
                                obj.CompareText = "";
                                obj.CompareValue = "";
                                obj.CompareWith = 0;
                                obj.Operator = 0;
                                obj.CtrlId = Field.getAttribute('data-ctrlId');

                                switch (parseInt(Field.dataset.datatype)) {
                                    case MasterDataType.get('TEXT'):
                                        obj.Operator = 10;
                                        obj.CompareValue = Field.value;
                                        obj.CompareText = Field.value;
                                        break;
                                    case MasterDataType.get('NUMBER'):
                                    case MasterDataType.get('FRACTION'):
                                    case MasterDataType.get('BIGNUMBER'):
                                    case MasterDataType.get('SMALLNUMBER'):
                                    case MasterDataType.get('TINYNUMBER'):
                                        obj.CompareValue = Field.value;
                                        break;
                                    case MasterDataType.get('BOOLEAN'):

                                        //obj.CompareValue = Field.checked;
                                        obj.CompareValue = (Field.checked == true ? 1 : 0);
                                        break;
                                    case MasterDataType.get('DATETIME'):
                                        break;
                                    case MasterDataType.get('DATE'):
                                        var FieldChanged = document.getElementById("DatePicker_" + Field.id);
                                        if (FieldChanged != null)
                                            obj.CompareValue = DATEPICKER.getDate("DatePicker_" + Field.id);
                                        break;
                                    case MasterDataType.get('TIME'):
                                        var FieldChanged = document.getElementById("TimeCtrl_" + Field.id);
                                        if (FieldChanged != null)
                                            obj.CompareValue = FTIMECONTROL.getTime("TimeCtrl_" + Field.id);
                                        break;
                                    case MasterDataType.get('NUMBERLIST'):
                                        obj.CompareValue = Field.value;//(Field.value == '' ? '' : Field.options[Field.value - 1].text);//Field.value;
                                        obj.CompareText = (Field.value == '' ? '' : Field.options[Math.abs(Field.value)].text);
                                        break;
                                    case MasterDataType.get('STRINGLIST'):
                                        obj.CompareValue = Field.value;
                                        obj.CompareText = Field.value;
                                    case MasterDataType.get('MASTER'):
                                    case MasterDataType.get('EXTERNALTABLE'):
                                        if (parseInt(OPTIONCONTROL.getControlValue("FOption_" + Field.id)) > 0) {
                                            var optionData = OPTIONCONTROL.getControlData("FOption_" + Field.id);
                                            if (optionData.length > 0) {
                                                obj.CompareValue = COMMON.prototype.getObjectFirstPropertyValue(optionData[0]);
                                                obj.CompareText = COMMON.prototype.getObjectFirstPropertyValue(optionData[1]);
                                                obj.FieldName = 'Name';
                                            }
                                            obj.IsGroup = OPTIONCONTROL.getControlValue("FOption_" + Field.id, "bgroup");
                                        }
                                        break;
                                }
                                if (FCommon.UI.isValidObject(obj.CompareValue) == true) {
                                    if (obj.DataType == 2) {
                                        arrFilterValues.push(obj);
                                    }
                                    else if (obj.CompareValue != "") {
                                        arrFilterValues.push(obj);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return (arrFilterValues);
        }
        catch (err) {
            alert("Exception: {FILTER.getDefaultFilterValues} " + err.message);
        }
    },

    displayAdvanceFilter: function (arrFilterValues, iFilterId, iSubFilterId, bFromToggle, sFrom, dashletid) {
        var arrTreeData = null;
        var eleBody = null;
        var eleRow = null;
        var iCounter = 0;
        var iTotal = 0;
        var iIndex = 0;
        var objData = null;
        var objTreeData = null;
        var arrOldData = null;
        var iConjuction = 0;
        var iOperator = 0;

        try {
            var eleFormulaCtrl = null;
            var eleFormulaCtrlOKButton = null;
            eleFormulaCtrl = document.getElementById(FILTER.getFilterFormulaId(iFilterId, iSubFilterId, dashletid));
            if (FCommon.UI.isValidObject(eleFormulaCtrl)) {
                eleFormulaCtrl.style.display = 'none';
                eleFormulaCtrlOKButton = document.getElementById(FILTER.getFilterFormulaId(iFilterId, iSubFilterId) + "_Ok");
                eleFormulaCtrlOKButton.click = "FILTER.ADVANCEFILTER.onFormulaControlLeave";
            }

            eleBody = FILTER.ADVANCEFILTER.getRowContainer(iFilterId, iSubFilterId, sFrom, dashletid);
            FILTER.ADVANCEFILTER.resetAdvanceFilter(iFilterId, iSubFilterId, dashletid);
            if (bFromToggle == true) {
                arrOldData = FILTER.ADVANCEFILTER.getLastData(eleBody);
                arrFilterValues = FILTER.mergeDefaultFilterData(arrFilterValues, arrOldData);
            }
            arrTreeData = FILTER.ADVANCEFILTER.getFieldTreeData(eleBody);
            iTotal = FCommon.Array.getLength(arrFilterValues);

            for (iCounter = 0; iCounter < iTotal; iCounter++) {
                if (iCounter > 0) {
                    FILTER.ADVANCEFILTER.addRow(eleBody);
                }

                eleRow = FILTER.ADVANCEFILTER.getRowElement(eleBody, iCounter);
                if (FCommon.UI.isValidObject(eleRow) == false) {
                    continue;
                }

                objData = arrFilterValues[iCounter];

                objTreeData = null;
                iIndex = FILTER.ADVANCEFILTER.getTreeDataIndex(objData.FieldId, objData.ParentId, objData.SubParentId, arrTreeData);
                if (iIndex >= 0) {
                    objTreeData = arrTreeData[iIndex];
                }

                iConjuction = FConvert.toInt(objData.Conjuction);
                iOperator = FConvert.toInt(objData.Operator);

                if (objData.FieldName != undefined) {
                    eleRow.setAttribute("data-fieldname", objData.FieldName);
                    eleRow.setAttribute("data-extraFieldName", objData.FieldName);
                }
                else {
                    if (objTreeData != null) {
                        eleRow.setAttribute("data-fieldname", objTreeData.sName);
                        eleRow.setAttribute("data-extraFieldName", objTreeData.sName);
                    }
                }

                if (objTreeData != null) {

                    eleRow.setAttribute("data-datatype", FConvert.toInt(objTreeData.DataType));
                }
                else {
                    eleRow.setAttribute("data-datatype", FConvert.toInt(objData.DataType));
                }
                FILTER.ADVANCEFILTER.setConjuction(eleRow, iConjuction);
                if (iConjuction == 10) {
                    eleRow.children[1].style.display = 'none';
                    eleRow.children[2].style.display = 'none';
                    eleRow.children[3].style.display = 'none';
                    eleRow.children[4].style.display = 'none';
                }
                else {
                    FILTER.ADVANCEFILTER.setOperator(eleRow, iOperator);

                    //Hide CompareWith and Value fields if selected operator is "IsBlank" or "IsNotBlank".
                    if (iOperator == FilterOperator.get('IsBlank') || iOperator == FilterOperator.get('IsNotBlank')) {
                        eleRow.children[3].children[0].style.display = "none";
                        eleRow.children[4].children[0].style.display = "none";
                    }
                    else {
                        eleRow.children[3].children[0].style.display = "";
                        eleRow.children[4].children[0].style.display = "";
                    }
                    FILTER.ADVANCEFILTER.setCompareType(eleRow, FConvert.toInt(objData.CompareWith));

                    objData = FILTER.ADVANCEFILTER.setField(eleRow, objData, objTreeData);
                    if (objData.CompareWith == 3 && (objData.CompareText == null || objData.CompareText == '')) {
                        var FilterTree = document.getElementById(FILTER.getFilterDateRangeTreeId(iFilterId, iSubFilterId));
                        iElementVal = objData.CompareValue;
                        if (FCommon.UI.isValidObject(document.getElementById(FilterTree.id))) {
                            if (document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']').length > 0) {
                                if (FCommon.UI.isValidObject(document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0])) {
                                    objData.CompareText = document.getElementById(FilterTree.id).querySelectorAll('[id^=' + '"' + iElementVal + '"' + ']')[0].textContent;
                                }
                            }
                        }
                    }
                    FILTER.ADVANCEFILTER.setFieldValue(eleRow, objData, 'onLoad', iFilterId, iSubFilterId);
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.displayAdvanceFilter} " + err.message);
        }
    },

    //Called on click of toggle button
    ToggleFilter: function (element, iFilterId, iSubFilterId, sFrom, dashletid) {
        var eleAdvFilter = null;
        var eleData = null;
        try {
            var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            var sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            var defaulFilter = document.getElementById(sDefaultFilterId);
            eleAdvFilter = document.getElementById(sAdvanceFilterId);
            // If default filter is displayed
            if (defaulFilter.style.display == "flex") {
                document.getElementById(sDefaultFilterId).style.display = "none"; // Hide default filter block
                document.getElementById('idFilterCustomizeIcon').style.display = 'none';
                eleAdvFilter.style.display = "block"; // Display advance filter block

                var filterlabel = document.getElementById("filterLabel_" + sDefaultFilterId);
                if (filterlabel != null) {
                    element.title = arrFilterResourceMsgs.lblChangeTo + ' ' + arrFilterResourceMsgs.AdvanceFilter;
                    document.getElementById("filterLabel_" + sDefaultFilterId).textContent = arrFilterResourceMsgs.AdvanceFilter
                }

                var FilterValues = FILTER.getDefaultFilterValues(iFilterId, iSubFilterId, sFrom, dashletid);
                FILTER.displayAdvanceFilter(FilterValues, iFilterId, iSubFilterId, true, sFrom, dashletid);
            }
            else { // Advance filter is displayed
                FILTER.ADVANCEFILTER.setLastData(eleAdvFilter, FILTER.getFilterValue(iFilterId, iSubFilterId, sFrom, dashletid));
                eleAdvFilter.style.display = "none"; // Hide default filter block
                document.getElementById('idFilterCustomizeIcon').style.display = '';
                document.getElementById(sDefaultFilterId).style.display = "flex";//block // Display default filter block
                element.title = arrFilterResourceMsgs.lblChangeTo + ' ' + arrFilterResourceMsgs.grbDefaultFilter;
                document.getElementById("filterLabel_" + sDefaultFilterId).textContent = arrFilterResourceMsgs.grbDefaultFilter
                //bAdvanceFilter = false;
            }
            //$("#" + sDefaultFilterId).slideToggle("slow");
            //$("#" + sAdvanceFilterId).slideToggle("slow", function () {
            //    if (bAdvanceFilter == true) {
            //        document.getElementById(sAdvanceFilterId).style.display = "block";
            //        var FilterValues = FILTER.getDefualtFilterValues(iFilterId, iSubFilterId)
            //        var filterRows = document.getElementById(sAdvanceFilterId).children;
            //        FILTER.addAdvanceFilter(FilterValues, iFilterId, iSubFilterId);
            //    }
            //});
        }
        catch (err) {
            alert("Exception: {FILTER.ToggleFilter} " + err.message);
        }
    },

    //Internal
    mergeDefaultFilterData: function (arrDefaultFilter, arrAdvanceFilter) {
        var iCounter = 0;
        var iTotal = 0;
        var iIndex = 0;
        try {
            iTotal = FCommon.Array.getLength(arrDefaultFilter);
            if (iTotal < 1) {
                return (arrAdvanceFilter);
            }

            if (FCommon.Array.getLength(arrAdvanceFilter) < 1) {
                return (arrDefaultFilter);
            }

            for (iCounter = 0; iCounter < arrDefaultFilter.length; iCounter++) {
                iIndex = FILTER.ADVANCEFILTER.getDataIndex(arrDefaultFilter[iCounter].FieldId, arrDefaultFilter[iCounter].SubParentId, arrAdvanceFilter, arrDefaultFilter[iCounter].CompareText, arrDefaultFilter[iCounter].CompareValue, arrDefaultFilter[iCounter].Operator);
                if (iIndex == -2) {
                    arrDefaultFilter[iCounter].Conjuction = 2; // And
                    arrAdvanceFilter.push(arrDefaultFilter[iCounter]);
                }
                else if (iIndex.toString().indexOf(',') > 0) {
                    //There are already multiple conditions for some same fields. They will get deleted and only one condition for the respective field. Do you want to continue?
                    var retVal = false;
                    if (FCommon.UI.isValidObject(document.getElementById('idmsgDefaultFilterConfirm'))) {
                        retVal = confirm(document.getElementById('idmsgDefaultFilterConfirm').value);
                    }
                    if (retVal == false) {
                        return (arrAdvanceFilter);
                    }
                    var arriIndex = iIndex.toString().split(',');
                    if (arriIndex != null) {
                        if (arriIndex.length > 0) {
                            for (var i = 0; i < arriIndex.length; i++) {
                                arrAdvanceFilter.splice(arriIndex[i], arriIndex.length);
                            }
                            if (arrDefaultFilter.length > 0) {
                                arrDefaultFilter[iCounter].Conjuction = 2; // And
                            }
                            else {
                                arrDefaultFilter[iCounter].Conjuction = 1; // Where
                            }
                            arrAdvanceFilter.push(arrDefaultFilter[iCounter]);
                        }
                    }
                }
                else if (iIndex >= 0) {
                    arrAdvanceFilter[iIndex].CompareText = arrDefaultFilter[iCounter].CompareText;
                    arrAdvanceFilter[iIndex].CompareValue = arrDefaultFilter[iCounter].CompareValue;
                }
                switch (parseInt(arrDefaultFilter[iCounter].DataType)) {
                    case MasterDataType.get('TEXT'):
                    case MasterDataType.get('NUMBER'):
                    case MasterDataType.get('FRACTION'):
                    case MasterDataType.get('BIGNUMBER'):
                    case MasterDataType.get('SMALLNUMBER'):
                    case MasterDataType.get('TINYNUMBER'):
                        if (FCommon.UI.isValidObject(document.getElementById(arrDefaultFilter[iCounter].CtrlId))) {
                            document.getElementById(arrDefaultFilter[iCounter].CtrlId).value = '';
                        }
                        break;
                    case MasterDataType.get('BOOLEAN'):
                    case MasterDataType.get('DATETIME'):
                    case MasterDataType.get('DATE'):
                    case MasterDataType.get('TIME'):
                        break;
                    case MasterDataType.get('NUMBERLIST'):
                    case MasterDataType.get('STRINGLIST'):
                        break;
                    case MasterDataType.get('MASTER'):
                    case MasterDataType.get('EXTERNALTABLE'):
                        OPTIONCONTROL.resetControl(document.getElementById(arrDefaultFilter[iCounter].CtrlId), 0);
                        break;
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.mergeDefaultFilterData} " + err.message);
        }
        return (arrAdvanceFilter);
    },

    Clear: function (iFilterId, iSubFilterId, showConfirmation, dashletid) {
        try {
            FILTER.ClearDefaultFilter(iFilterId, iSubFilterId, "", dashletid)
            FILTER.ADVANCEFILTER.resetAdvanceFilter(iFilterId, iSubFilterId, dashletid);
            bConditionChanged = false;
        }
        catch (err) {
            alert("Exception: {FILTER.Clear} " + err.message);
        }
    },

    ClearDefaultFilter: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        try {
            var sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            if (document.getElementById(sDefaultFilterId) != null) {
                var DefaultFields = document.getElementById(sDefaultFilterId).children;
                if (DefaultFields.length > 0) {
                    for (var iCount = 0; iCount < DefaultFields.length; iCount++) {
                        var Field = document.getElementById(sDefaultFilterId + iCount)
                        if (Field != null) {
                            var FieldType = Field.dataset.datatype;
                            switch (parseInt(FieldType)) {
                                case MasterDataType.get('TEXT'):
                                case MasterDataType.get('NUMBER'):
                                case MasterDataType.get('FRACTION'):
                                case MasterDataType.get('BIGNUMBER'):
                                case MasterDataType.get('SMALLNUMBER'):
                                case MasterDataType.get('TINYNUMBER'):
                                    Field.value = "";
                                    Field.dataset.ischanged = false;
                                    break;
                                case MasterDataType.get('BOOLEAN'):
                                    Field.checked = false;
                                    Field.dataset.ischanged = false;
                                    break;
                                case MasterDataType.get('DATETIME'):
                                    break;
                                case MasterDataType.get('DATE'):
                                    DATEPICKER.clear("DatePicker_" + Field.id);
                                    document.getElementById("DatePicker_" + Field.id).dataset.ischanged = false;
                                    break;
                                case MasterDataType.get('TIME'):
                                    FTIMECONTROL.clear("TimeCtrl_" + Field.id);
                                    document.getElementById("TimeCtrl_" + Field.id).dataset.ischanged = false;
                                    break;
                                case MasterDataType.get('NUMBERLIST'):
                                case MasterDataType.get('STRINGLIST'):
                                    Field.value = 0;
                                    Field.dataset.ischanged = false;
                                    //sCompareText = document.getElementById("filterValue_" + iCounter).text;
                                    break;
                                case MasterDataType.get('MASTER'):
                                case MasterDataType.get('EXTERNALTABLE'):
                                    OPTIONCONTROL.setControlValue("FOption_" + Field.id, 0);
                                    break;
                            }
                        }
                    }
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.ClearDefaultFilter} " + err.message);
        }
    },

    getIsAllConditionsValid: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        try {
            var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            if (document.getElementById(sAdvanceFilterId).dataset.invalid == 'true')
                return false;
            else
                return true;
        }
        catch (err) {
            alert("Exception: {FILTER.getIsAllConditionsValid} " + err.message);
        }
    },

    OpenFieldCustPopup: function (iFilterId, iSubFilterId) {
        try {

            var FilterId = FILTER.getFilterId(iFilterId, iSubFilterId);
            var fullScreen = document.getElementById("fullScreen");
            if (fullScreen != null) {
                var element = document.getElementById("FilterFieldCust_" + FilterId);
                element.style.display = "";

                if (document.getElementById("searchDiv") != null) {
                    document.getElementById("searchDiv").innerHTML = "";
                    document.getElementById("searchDiv").style.display = "none";
                }
                if (document.getElementById("txtfiltersearch").value != null && document.getElementById("txtfiltersearch").value != "") {
                    document.getElementById("txtfiltersearch").value = "";
                }
                document.getElementById("FilterFields_" + iFilterId + "_" + iSubFilterId).style.display = "block";
                //loop to check the selected fields and mark as ticked.
                var eleFilterTree = element.children[0];
                if (FCommon.UI.isValidObject(eleFilterTree)) {
                    if (FCommon.UI.isValidObject(eleFilterTree.children[1])) {
                        var eleBody = eleFilterTree.children[1].children[0];

                    }
                }
                $(fullScreen).html(element);
            }
            $(fullScreen).modal('show');
        }
        catch (err) {
            alert("Exception: {FILTER.OpenFieldCustPopup} " + err.message);
        }
    },

    FieldCustPopupClose: function (iFilterId, iSubFilterId, sFrom) {
        try {
            //var AdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom);
            //var element = document.getElementById("FilterFieldCust_" + iFilterId)

            //if (AdvanceFilterId != null && element != null) {
            //    element.style.display = "none";
            //    AdvanceFilterId.parentNode.appendChild(element);
            //}

            //var eleCustomizeFilterUlid = "FilterFields_" + iFilterId + "_" + iSubFilterId;
            //var treeElement = $('#' + eleCustomizeFilterUlid).find('.Fchkbox');

            //if (treeElement != null) {
            //    var sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom);
            //    var defaulFilter = document.getElementById(sDefaultFilterId);
            //    for (var iTreeRow = 0; iTreeRow < treeElement.length; iTreeRow++) {
            //        var sTreeItem = treeElement[iTreeRow].parentNode.getAttribute('data-text');
            //        var iFieldRow = 0;
            //        treeElement[iTreeRow].checked = false;
            //        while (iFieldRow < defaulFilter.childNodes.length) {
            //            var sFieldItem = defaulFilter.childNodes[iFieldRow].getElementsByTagName('Label')[0].title;
            //            if (sTreeItem == sFieldItem) {
            //                treeElement[iTreeRow].checked = true;
            //                break;
            //            }
            //            iFieldRow++;
            //        }
            //    }
            //}
            $("#fullScreen").modal('hide');
        }
        catch (err) {
            alert("Exception: {FILTER.FieldCustPopupClose} " + err.message);
        }
    },

    SaveFilterCustomizeFields: function (iFilterId, iSubFilterId, sFrom, sScreen, dashletid) {
        try {
            var arrFields_checked = [];
            var arrFields_Unchecked = [];
            arrFields = [];
            if (document.getElementById("txtfiltersearch") != null) {
                document.getElementById("txtfiltersearch").value = "";
            }
            if (document.getElementById("searchDiv") != null && document.getElementById("searchDiv").style.display != "none") {
                bsearch = true;
                var SearchFields = document.getElementById("searchDiv").children;
                for (var count = 0; count < SearchFields.length; count++) {
                    chkbox = SearchFields[count].children[0].children[0];
                    if (SearchFields[count].children[0].children[0].checked == true) {
                        iSubParentId = SearchFields[count].children[0].getAttribute('data-groupid');
                        //arrFields.push({ id: chkbox.id, value: iSubParentId }); //search Checked fields
                        arrFields_checked.push({ id: chkbox.id, value: iSubParentId }); //search Checked fields
                        FILTER.m_DefaultFields = FILTER.FilterTreeData(iFilterId, iSubFilterId, chkbox.id, iSubParentId)  //if search checked field id matches to default tree filter value id then the checkbox is made true .
                    }
                    else// unchecked
                    {
                        if (FILTER.m_DefaultFields.filter(x=>x.id == chkbox.id && x.value == SearchFields[count].children[0].getAttribute('data-groupid')).length > 0) {
                            arrFields_Unchecked.push({ id: chkbox.id, value: iSubParentId }); //search Checked fields
                        }
                    }
                }

                for (var i = 0; i < arrFields_checked.length; i++) {
                    if (FILTER.m_DefaultFields.filter(x=>x.id == arrFields_checked[i].id && x.value == arrFields_checked[i].value).length == 0) {
                        FILTER.m_DefaultFields.push({ id: arrFields_checked[i].id, value: arrFields_checked[i].value }); //search Checked fields
                    }
                }
                for (var j = 0; j < arrFields_Unchecked.length; j++) {
                    if (FILTER.m_DefaultFields.filter(x=>x.id == arrFields_Unchecked[j].id && x.value == arrFields_Unchecked[j].value).length > 0) {
                        for (var k = 0; k < FILTER.m_DefaultFields.length; k++) {
                            if (FILTER.m_DefaultFields[k].id === arrFields_Unchecked[j].id) {
                                FILTER.m_DefaultFields.splice(k, 1);
                            }
                        }
                    }
                }
                //for (var i = 0; i < arrFields.length; i++) {
                //    if (FILTER.m_DefaultFields.filter(x=>x.id == arrFields[i].id).length > 0)
                //    {
                //        for (var j = 0; j < FILTER.m_DefaultFields.length; j++)
                //        {
                //            if (FILTER.m_DefaultFields[j].id === arrFields[i].id)
                //            {
                //                FILTER.m_DefaultFields.splice(j, 1);
                //            }
                //        }
                //    }
                //    else {
                //        FILTER.m_DefaultFields.push({ id: arrFields[i].id, value: arrFields[i].value })
                //    }
                //}
                //for (var i = 0; i < FILTER.m_DefaultFields.length; i++) {
                //    for (var j = i + 1; j < FILTER.m_DefaultFields.length; j++) {
                //        if (FILTER.m_DefaultFields[i].id == FILTER.m_DefaultFields[j].id && FILTER.m_DefaultFields[i].value == FILTER.m_DefaultFields[j].value) {
                //            FILTER.m_DefaultFields.splice(i, 1);
                //        }
                //    }
                //}
                arrFields = FILTER.m_DefaultFields;
                document.getElementById("searchDiv").style.display = "block";
            }
            else {

                Fields = document.getElementById("FilterFields_" + iFilterId + "_" + iSubFilterId).children;
                for (var count = 0; count < Fields.length; count++) {
                    if (!FCommon.UI.isValidObject(Fields[count])) {
                        break;
                    }
                    parentTagName = Fields[count].tagName;
                    if (parentTagName == 'LI') {
                        tagName = Fields[count].children[0].children[0].tagName;
                        if (tagName == 'LABEL') {
                            chkbox = Fields[count].children[0].children[0].children[0];
                            if (chkbox.checked == true) {
                                //arrFields.push(chkbox.id);
                                arrFields.push({ id: chkbox.id, value: 0 });
                            }
                        }
                    }
                    else if (parentTagName == 'UL') {
                        var ele = Fields[count];

                        if (FCommon.UI.isValidObject(ele.previousElementSibling) &&
                            FCommon.UI.isValidObject(ele.previousElementSibling.getElementsByTagName('input')) &&
                            FCommon.UI.isValidObject(ele.previousElementSibling.getElementsByTagName('input')[0])) {
                            iSubParentId = ele.previousElementSibling.getElementsByTagName('input')[0].id;
                        }
                        for (var i = 0; i < ele.children.length; i++) {
                            if (ele.children[i].children[0].children[0].tagName == 'LABEL') {
                                chkbox = ele.children[i].children[0].children[0].children[0];
                                if (chkbox.checked == true) {
                                    //arrFields.push(chkbox.id);
                                    arrFields.push({ id: chkbox.id, value: iSubParentId });
                                }
                            }
                        }
                    }
                }
            }

            result = NETWORK.executeServerMethod(
                                    GLOBAL.getContextPath("SaveFilterCustomFields", "RD", "RD"),
                                    true,
                                    { CustomFields: { FilterId: iFilterId, SubFilterId: iSubFilterId, FieldIdSubParentId: arrFields }, sFrom: sFrom, sScreen: sScreen, DashletId: dashletid },
                                    "",
                                    true,
                                    "FILTER.SaveFilterCustomizeFieldsSuccess",
                                    "GLOBAL.LoadingStart",
                                    "GLOBAL.LoadingEnd",
                                    { iFilterId: iFilterId, iSubFilterId: iSubFilterId, sFrom: sFrom, DashletId: dashletid }
                   );
        }
        catch (err) {
            alert("Exception: {FILTER.SaveFilterCustomizeFields} " + err.message);
        }
    },

    SaveFilterCustomizeFieldsSuccess: function (bSuccess, html, tag) {
        try {
            if (bSuccess == true) {
                var DefaultFilter = document.getElementById(FILTER.getDefaultFilterId(tag.iFilterId, tag.iSubFilterId, tag.sFrom, tag.DashletId));
                if (DefaultFilter != null) {
                    $(DefaultFilter).html(html);
                }
                FILTER.FieldCustPopupClose(tag.iFilterId, tag.iSubFilterId, tag.sFrom);
            }
        }
        catch (err) {
            alert("Exception: {FILTER.SaveFilterCustomizeFieldsSuccess} " + err.message);
        }
    },

    getDefaultFilterId: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        if (dashletid == undefined) {
            dashletid = "";
        }
        if (sFrom == undefined || sFrom == '') {
            return iFilterId + "_" + iSubFilterId + "_DefaultFilter" + "_" + dashletid;
        }
        else {
            return iFilterId + "_" + iSubFilterId + "_DefaultFilter" + "_" + sFrom;
        }
    },

    getAdvanceFilterId: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        if (dashletid == undefined) {
            dashletid = "";
        }
        if (sFrom == undefined || sFrom == '') {
            return iFilterId + "_" + iSubFilterId + "_AdvanceFilter" + "_" + dashletid;
        }
        else {
            return iFilterId + "_" + iSubFilterId + "_AdvanceFilter" + "_" + sFrom;
        }
    },

    getContainerId: function (iFilterId, iSubFilterId) {
        return "ControlDiv_" + iFilterId + "_" + iSubFilterId + "_AdvanceFilter";
    },

    getFilterId: function (iFilterId, iSubFilterId) {
        return iFilterId + "_" + iSubFilterId;
    },

    getFilterTreeId: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        if (dashletid == undefined) {
            dashletid = "";
        }
        return "filterTree_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
    },

    getFilterDataTreeId: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        if (dashletid == undefined) {
            dashletid = "";
        }
        return "filterDataTree_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
    },

    getFilterDateRangeTreeId: function (iFilterId, iSubFilterId, sFrom) {
        return "dateRangeTree_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom);
    },

    getFilterFormulaId: function (iFilterId, iSubFilterId, sFrom, dashletid) {
        if (dashletid == undefined) {
            dashletid = "";
        }
        return "filterFormulaControl_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
    },

    getMasterOptionControlId: function (iFilterId, iSubFilterId) {
        return "advancefilter_master_" + iFilterId + "_" + iSubFilterId;
    },

    getTableOptionControlId: function (iFilterId, iSubFilterId, sFrom) {
        return "advancefilter_TableOptionControl_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom);
    },

    getDatePickerControlId: function (iFilterId, iSubFilterId, sFrom) {
        return "DatePickerControl_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom);
    },

    getTimeControlId: function (iFilterId, iSubFilterId, sFrom) {
        return "TimePickerControl_" + FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom);
    },

    getSelectControlId: function (iFilterId, iSubFilterId) {
        return "advancefilter_SelectOptionControl_" + iFilterId + "_" + iSubFilterId;
    },

    getControlDivId: function (sAdvanceFilterId) {
        return "ControlDiv_" + sAdvanceFilterId;
    },

    SetState: function (ele) {
        ele.dataset.ischanged = true;
    },

    expandCollapseFilterMenu: function (element) {

        if (element.children[0].className == 'icon-new icon-font7') {
            element.parentElement.nextSibling.style.display = 'block';
            element.children[0].className = "icon-collepse icon-font7";
        }
        else {
            element.children[0].className = 'icon-new icon-font7';
            element.parentElement.nextSibling.style.display = 'none';
        }
    },

    getFilterTreePosition: function (element) {
        try {
            if (element.className.indexOf("modal-dialog") > -1) {
                return 32;
            }
            else if (element.id == GLOBAL.getMainPageId()) {
                return 0;
            }
            else {
                return FILTER.getFilterTreePosition(element.parentNode);
            }
        }
        catch (err) {
            alert("Exception: {FILTER.getFilterTreePosition} " + err.message);
        }
    },

    getFilterTreeScrollHeight: function (element) {
        var height = 0;
        if (element == undefined || element.id == "mainDiv")
            return height;
        if (element.scrollHeight > 0)
            return element.scrollHeight;
        else
            return FILTER.getFilterTreeScrollHeight(element.parentNode);

    },

    getMasterOptionControl: function (element) {
        try {
            var arrIds = element.id.split('_');
            var iFilterId = arrIds[1];
            var iSubFilterId = arrIds[2];
            var MasterOptionControl = FILTER.getMasterOptionControlId(iFilterId, iSubFilterId);
            var ParentDiv = element.parentNode;
            OPTIONCONTROL.resetControl(MasterOptionControl, 0);
            OPTIONCONTROL.setMasterTypeId(MasterOptionControl, element.dataset.mastertypeid);
            OPTIONCONTROL.setControlValue(MasterOptionControl, element.dataset.value);
            element.parentNode.removeChild(element);
            if (ParentDiv != null)
                OPTIONCONTROL.setParent(MasterOptionControl, ParentDiv);
        }
        catch (err) {
            alert("Exception: {FILTER.getMasterOptionControl} " + err.message);
        }
    },

    getTableOptionControl: function (element) {
        try {
            var arrIds = element.id.split('_');
            var iFilterId = arrIds[1];
            var iSubFilterId = arrIds[2];
            var TableOptionControl = FILTER.getTableOptionControlId(iFilterId, iSubFilterId);
            var ParentDiv = element.parentNode;
            OPTIONCONTROL.clear(TableOptionControl, false);
            OPTIONCONTROL.setTableName(TableOptionControl, element.dataset.tablename);
            OPTIONCONTROL.setPrimaryField(TableOptionControl, element.dataset.primaryfield);
            OPTIONCONTROL.setDisplayField(TableOptionControl, element.dataset.displayfield);
            OPTIONCONTROL.setControlValue(TableOptionControl, element.dataset.value);
            element.parentNode.removeChild(element);
            if (ParentDiv != null)
                OPTIONCONTROL.setParent(TableOptionControl, ParentDiv);
        }
        catch (err) {
            alert("Exception: {FILTER.getTableOptionControl} " + err.message);
        }
    },

    getDatePickerControl: function (element) {
        try {
            var arrIds = element.id.split('_');
            var iFilterId = arrIds[1];
            var iSubFilterId = arrIds[2];
            var DateControl = FILTER.getDatePickerControlId(iFilterId, iSubFilterId);
            var ParentDiv = element.parentNode;
            DATEPICKER.clear(DateControl, false);
            DATEPICKER.setDate(DateControl, element.dataset.value);
            element.parentNode.removeChild(element);
            if (ParentDiv != null)

                DATEPICKER.setParent(DateControl, ParentDiv);
        }
        catch (err) {
            alert("Exception: {FILTER.getDatePickerControl} " + err.message);
        }
    },

    getTimeControl: function (element) {
        try {
            var arrIds = element.id.split('_');
            var iFilterId = arrIds[1];
            var iSubFilterId = arrIds[2];
            var TimeControl = FILTER.getTimeControlId(iFilterId, iSubFilterId);
            var ParentDiv = element.parentNode;
            FTIMECONTROL.clear(TimeControl, false);
            FTIMECONTROL.setTime(TimeControl, element.dataset.value);
            element.parentNode.removeChild(element);
            if (ParentDiv != null)

                FTIMECONTROL.setParent(TimeControl, ParentDiv);
        }
        catch (err) {
            alert("Exception: {FILTER.getTimeControl} " + err.message);
        }
    },

    getDataType: function (arrData, parentId) {
        try {
            if (arrData != null && arrData != undefined) {
                for (var count = 0; count < arrData.length; count++) {
                    if (parseInt(parentId) == parseInt(arrData[count].iFieldId) && arrData[count].bGroup == true) {
                        return arrData[count].iDataTypeId;
                    }
                }
            }
            return 0;
        }
        catch (err) {
            alert("Exception: {FILTER.getDataType} " + err.message);
        }
    },

    getMasterId: function (arrData, parentId) {
        try {
            if (arrData != null && arrData != undefined) {
                for (var count = 0; count < arrData.length; count++) {
                    if (parseInt(parentId) == parseInt(arrData[count].iFieldId) && arrData[count].bGroup == true) {
                        return arrData[count].iMasterLink;
                    }
                }
            }
            return 0;
        }
        catch (err) {
            alert("Exception: {FILTER.getMasterId} " + err.message);
        }
    },

    CollapseFilterTree: function () {
        try {
            var dateRangeTree = document.getElementsByClassName("dateRangeTree");
            if (dateRangeTree != null) {
                for (var iCount = 0; iCount < dateRangeTree.length; iCount++) {
                    dateRangeTree[iCount].style.display = "none";
                }
            }
            var filterTree = document.getElementsByClassName("filterTree");
            if (filterTree != null) {
                for (var iCount = 0; iCount < filterTree.length; iCount++) {
                    filterTree[iCount].style.display = "none";
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.CollapseFilterTree} " + err.message);
        }
    },

    GetDataTypeText: function (datatype) {
        try {
            if (DATATYPE.hasOwnProperty) {
                for (key in DATATYPE) {
                    if (DATATYPE[key] == parseInt(datatype)) {
                        return key.toString();
                    }
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.GetDataTypeText} " + err.message);
        }
    },

    removeFilterFieldPopup: function () {
        var iCounter = 0;
        var arrAdvanceFilterTreeParent = null;
        var arrControlDiv = null;
        try {
            arrAdvanceFilterTreeParent = document.getElementsByClassName("FAdvanceFilterField open");
            if (arrAdvanceFilterTreeParent.length > 0 && arrAdvanceFilterTreeParent[0].children.length > 1) {
                while (iCounter < arrAdvanceFilterTreeParent.length) {
                    var filterTree = arrAdvanceFilterTreeParent[iCounter].children[1];
                    if (FCommon.UI.isValidObject(filterTree) == false) {
                        return;
                    }
                    arrAdvanceFilterTreeParent[iCounter].className = "FAdvanceFilterField";
                    arrControlDiv = document.getElementsByClassName("FAdvanceFilterFieldHideDiv");
                    if (FCommon.UI.isValidObject(arrControlDiv[iCounter])) {
                        //alert('hi');
                        arrControlDiv[iCounter].appendChild(filterTree);
                    }
                    iCounter += 1;
                }
            }
        }
        catch (err) {

        }
    },

    setFilter: function (iFilterId, iSubFilterId, arrFilterobj, sFrom, dashletid) {
        try {
            var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            var sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
            var defaulFilter = document.getElementById(sDefaultFilterId);
            if (arrFilterobj != null && defaulFilter != null && defaulFilter.style.display == "block") {
                var filterlabel = document.getElementById("filterLabel_" + sDefaultFilterId);
                if (filterlabel != null) {
                    filterlabel.textContent = arrFilterResourceMsgs.AdvanceFilter;
                    bAdvanceFilter = true;
                }
            }
            else {
                var filterlabel = document.getElementById("filterLabel_" + sDefaultFilterId);
                if (filterlabel != null)
                    filterlabel.textContent = arrFilterResourceMsgs.grbDefaultFilter;
                bAdvanceFilter = false;
            }
            FILTER.Clear(iFilterId, iSubFilterId, false, dashletid);
            if (arrFilterobj != null && arrFilterobj != undefined && arrFilterobj.length > 0) {
                FILTER.displayAdvanceFilter(arrFilterobj, iFilterId, iSubFilterId, false, sFrom, dashletid);
                document.getElementById(sAdvanceFilterId).style.display = "block";
                if (document.getElementById(sDefaultFilterId) != null)
                    document.getElementById(sDefaultFilterId).style.display = "none";
            }
            else {
                if (document.getElementById(sDefaultFilterId) != null) {
                    document.getElementById(sAdvanceFilterId).style.display = "none";
                    //document.getElementById(sDefaultFilterId).style.display = "block";
                    document.getElementById(sDefaultFilterId).style.display = "flex";
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.setFilter} " + err.message);
        }
    },

    ToggleField_Mouseover: function (ele, iFilterId, iSubFilterId, sFrom, dashletid) {
        try {
            var defaulFilter = document.getElementById(FILTER.getDefaultFilterId(iFilterId, iSubFilterId, sFrom, dashletid));
            if (FCommon.UI.isValidObject(defaulFilter) == true) {
                if (defaulFilter.getBoundingClientRect().top > 0) {
                    ele.title = ele.getAttribute('data-titleDef');
                }
                else {
                    ele.title = ele.getAttribute('data-titleAdv');
                }
            }
        }
        catch (err) {
            alert("Exception: {FILTER.ToggleField_Mouseover} " + err.message);
        }
    },

    ADVANCEFILTER: {

        // Internal
        getMasterOptionControlId: function (iFilterId, iSubFilterId) {
            return "advancefilter_master_" + iFilterId + "_" + iSubFilterId;
        },

        // Internal
        getTableOptionControlId: function (iFilterId, iSubFilterId) {
            return "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId;
        },

        // Internal
        getDatePickerControlId: function (iFilterId, iSubFilterId) {
            return "advancefilter_date_" + iFilterId + "_" + iSubFilterId;
        },

        // Internal
        getTimeControlId: function (iFilterId, iSubFilterId) {
            return ("advancefilter_time_" + iFilterId + "_" + iSubFilterId);
        },

        // Internal
        getSelectControlId: function (iFilterId, iSubFilterId) {
            return "advancefilter_SelectOptionControl_" + iFilterId + "_" + iSubFilterId;
        },

        // Called when conjuction(where, and, or....) is changed
        conjuction_Change: function (eleSelect, evt) {
            var iIndex = 0;
            var eleTr = null;
            try {
                eleTr = eleSelect.parentElement.parentElement;
                iIndex = FCommon.UI.getElementPosition(eleTr);
                var eleParent = eleSelect.parentElement.parentElement;
                if (FCommon.UI.isValidObject(eleParent)) {
                    eleParent.children[1].style.display = '';
                    eleParent.children[2].style.display = '';
                    eleParent.children[3].style.display = '';
                    eleParent.children[4].style.display = '';
                }

                if (iIndex < 1) { // Some error
                    return;
                }
                iIndex--;

                if (iIndex == 0) {
                    if (eleSelect.selectedIndex == 0 || eleSelect.selectedIndex > 2) {
                        eleSelect.selectedIndex = 1;
                    }
                    else if (eleSelect.selectedIndex == 2) {
                        eleSelect.selectedIndex = 2;
                        eleSelect.value = 1;
                    }
                }
                else if (iIndex > 0 && eleSelect.selectedIndex < 3) {
                    eleSelect.selectedIndex = 3;
                }
                else if (iIndex > 0 && eleSelect.selectedIndex == 11) {
                    if (FCommon.UI.isValidObject(eleParent)) {

                        eleParent.children[1].style.display = 'none';
                        eleParent.children[2].style.display = 'none';
                        eleParent.children[3].style.display = 'none';
                        eleParent.children[4].style.display = 'none';
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.conjuction_Change} " + err.message);
            }
        },

        // Called when compare type(value, formula, field, date range) is changed
        compareWith_Change: function (eleSelect, iFilterId, iSubFilterId, evt, sFrom, dashletid) {

            var eleRow = null;
            var objField = null;
            var iValue = 0;
            try {
                FILTER.ADVANCEFILTER.setFieldValue(eleSelect.parentElement.parentElement, null, '');
                $(eleSelect.parentElement.nextElementSibling.children[0]).addClass("form-control");
                if (eleSelect.selectedIndex <= 0) {
                    return;
                }
                eleSelect.parentElement.nextElementSibling.children[0].readOnly = false;
                iValue = FConvert.toInt(eleSelect.options[eleSelect.selectedIndex].value);
                switch (iValue) {
                    case 0: // value
                        FILTER.ADVANCEFILTER.valueField_Click(eleSelect.parentElement.nextElementSibling.children[0], iFilterId, iSubFilterId, evt, sFrom, dashletid);
                        break;
                    case 1: // formula
                        //eleSelect.parentElement.nextElementSibling.children[0].readOnly = true;
                        FILTER.ADVANCEFILTER.valueField_Click(eleSelect.parentElement.nextElementSibling.children[0], iFilterId, iSubFilterId, evt, sFrom, dashletid);
                        break;
                    case 2: // field
                        FILTER.ADVANCEFILTER.valueField_Click(eleSelect.parentElement.nextElementSibling.children[0], iFilterId, iSubFilterId, evt, sFrom);
                        break;
                    case 3: // date range
                        eleSelect.parentElement.nextElementSibling.children[0].readOnly = false;
                        break;
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.compareWith_Change} " + err.message);
            }
        },

        // Called when operater(equal, notequal....) is changed in selection
        operator_Change: function (eleSelect, iFilterId, iSubFilterId, evt) {

            bchange = true;
            var eleTr = null;
            var eleTd = null;
            var iDataType = null;
            var fieldtype = null;
            var operator = null;
            var eleTxt = null;
            try {
                eleTr = eleSelect.parentElement.parentElement;
                eleTd = eleSelect.parentElement;
                eleTr.parentElement.dataset.parentid = undefined;
                iDataType = FConvert.toInt(eleTd.previousElementSibling.children[0].dataset.datatype);
                operator = parseInt(eleSelect.value);

                switch (iDataType) {
                    case MasterDataType.get('TEXT'):
                        if (operator != FilterOperator.get('Equalto') &&
                            operator != FilterOperator.get('NotEqualto') &&
                            operator != FilterOperator.get('IsBlank') &&
                            operator != FilterOperator.get('IsNotBlank') &&
                            operator != FilterOperator.get('BeginWith') &&
                            operator != FilterOperator.get('DoesNotBeginWith') &&
                            operator != FilterOperator.get('Contains')) {//&& FConvert.toInt(eleTd.previousElementSibling.children[0].dataset.fieldid) != 1
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                    case MasterDataType.get('NUMBER'):
                    case MasterDataType.get('FRACTION'):
                    case MasterDataType.get('BIGNUMBER'):
                    case MasterDataType.get('TINYNUMBER'):
                    case MasterDataType.get('SMALLNUMBER'):
                        if (operator != FilterOperator.get('Equalto') &&
                            operator != FilterOperator.get('NotEqualto') &&
                            operator != FilterOperator.get('Lessthan') &&
                            operator != FilterOperator.get('Greaterthan') &&
                             operator != FilterOperator.get('Lessthanorequalto') &&
                            operator != FilterOperator.get('Greaterthanorequalto')) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                    case MasterDataType.get('NUMBERLIST'):
                        if (operator != FilterOperator.get('Equalto') &&
                            operator != FilterOperator.get('NotEqualto')) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                    case MasterDataType.get('STRINGLIST'):
                        if (operator != FilterOperator.get('Equalto') &&
                            operator != FilterOperator.get('NotEqualto')) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                    case MasterDataType.get('BOOLEAN'):
                        if (operator != FilterOperator.get('Equalto') &&
                            operator != FilterOperator.get('NotEqualto')) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                    case MasterDataType.get('DATETIME'):
                    case MasterDataType.get('DATE'):
                    case MasterDataType.get('TIME'):
                        if (operator != FilterOperator.get('Equalto') &&
                            operator != FilterOperator.get('NotEqualto') &&
                            operator != FilterOperator.get('Lessthan') &&
                           operator != FilterOperator.get('Greaterthan') &&
                            operator != FilterOperator.get('Lessthanorequalto') &&
                           operator != FilterOperator.get('Greaterthanorequalto')) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                    case MasterDataType.get('MASTER'):
                    case MasterDataType.get('EXTERNALTABLE'):
                        if (operator != FilterOperator.get('Equalto') &&
                          operator != FilterOperator.get('NotEqualto')) {
                            COMMON.prototype.showMessage(arrFilterResourceMsgs.msgOperatorInvalid, "Error");
                            eleSelect.value = -1;
                            return true;
                        }
                        break;
                }

                //Hide CompareWith and Value fields if selected operator is "IsBlank" or "IsNotBlank".
                if (operator == FilterOperator.get('IsBlank') || operator == FilterOperator.get('IsNotBlank')) {
                    eleTr.children[3].children[0].style.display = "none";
                    eleTr.children[4].children[0].style.display = "none";
                }
                else {
                    eleTr.children[3].children[0].style.display = "";
                    eleTr.children[4].children[0].style.display = "";
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.operator_Change} " + err.message);
            }
        },

        //Internal
        getElementInsideContainer: function (container, childID, parentID, iFilterId) {
            try {
                var iParentID = 0;
                var ele = {};
                var eles = document.getElementById(container.id).getElementsByTagName("*");
                for (var i = 0; i < eles.length; i++) {
                    if (iFilterId == 68) {
                        iParentID = eles[i].getAttribute('data-parent');
                    }
                    else {
                        iParentID = eles[i].getAttribute('data-subparent');
                    }
                    if (eles[i].id === childID && iParentID == parentID) {
                        ele = eles[i];
                        break;
                    }
                }
                return ele;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getElementInsideContainer} " + err.message);
            }
        },

        //Internal
        collapsingElementsInsideContainer: function (container, tagname) {
            try {
                var eles = document.getElementById(container.id).getElementsByTagName(tagname);
                var eleParent = null;
                var eleCollapseIcon = null;
                var iMasterId = 0;
                if (eles.length > 0) {
                    for (var i = 1; i < eles.length; i++) {
                        if (FCommon.UI.isValidObject(eles[i])) {
                            iMasterId = eles[i].getAttribute('data-masterid');
                            if (iMasterId != null) {
                                eleParent = eles[i].parentElement;
                                if (eleParent.tagName == 'LI') {
                                    eleParent.parentElement.style.display = "none";
                                    eleCollapseIcon = eleParent.parentElement.parentElement;
                                    if (FCommon.UI.isValidObject(eleCollapseIcon)) {
                                        if (eleCollapseIcon.children.length > 0) {
                                            if (eleCollapseIcon.children[0].children[0].className == "icon-down-arrow") {
                                                eleCollapseIcon.children[0].children[0].className = "icon-right-arrow";
                                            }
                                        }
                                    }
                                }
                            }
                            $(eles[i]).css("background-color", "");
                        }
                    }
                    if (FCommon.UI.isValidObject(eles[0])) {
                        eleParent = eles[0].parentElement;
                        if (eleParent.tagName == 'LI') {
                            eleParent.parentElement.style.display = "";
                        }
                        $(eles[0]).focus();
                        $(eles[0]).css("background-color", "");
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.collapsingElementsInsideContainer} " + err.message);
            }
        },

        // Called when click on field column
        getFiledsTree_Click: function (eleTxt, dashletid, evt) {
            var eleTable = null;
            var FilterTree = null;
            var eleTreeField = null;
            var eleParentofeleTreeField = null;
            var eleCollapseIcon = null;
            var iFilterId = 0;
            var iSubFilterId = 0;
            var ieleTxtFieldId = 0;
            var ieleTxtParentId = 0;
            try {
                eleTable = eleTxt.parentElement.parentElement.parentElement.parentElement;
                iFilterId = eleTable.getAttribute('data-filterid');
                iSubFilterId = eleTable.getAttribute('data-subfilterid');
                var sFrom = eleTxt.getAttribute('data-sFrom');
                FilterTree = document.getElementById(FILTER.getFilterTreeId(iFilterId, iSubFilterId, sFrom, dashletid));

                //Code to show the saved valued as selected in the tree.
                if (FCommon.UI.isValidObject(FilterTree) == false) {
                    return;
                }
                ieleTxtFieldId = eleTxt.getAttribute('data-fieldid');
                if (iFilterId == 68) {
                    ieleTxtParentId = eleTxt.getAttribute('data-parent');
                }
                else {
                    ieleTxtParentId = eleTxt.getAttribute('data-subparent');
                }
                FILTER.ADVANCEFILTER.collapsingElementsInsideContainer(FilterTree, 'A');
                if (ieleTxtFieldId != 0) {
                    eleTreeField = FILTER.ADVANCEFILTER.getElementInsideContainer(FilterTree, ieleTxtFieldId, ieleTxtParentId, iFilterId);
                }
                //

                FilterTree.style.top = "auto";
                {
                    $(eleTxt.parentNode).toggleClass("open");
                    eleTxt.parentElement.appendChild(FilterTree);
                    FCommon.UI.setFocusDropdownPopupPosition(eleTxt, FilterTree);
                }
                FilterTree.style.display = "block";
                //Code to show the saved valued as selected in the tree.
                if (FCommon.UI.isValidObject(eleTreeField)) {
                    eleParentofeleTreeField = eleTreeField.parentElement;
                    if (FCommon.UI.isValidObject(eleParentofeleTreeField)) {
                        if (eleParentofeleTreeField.tagName == 'LI') {
                            eleParentofeleTreeField.parentElement.style.display = "";
                            eleCollapseIcon = eleParentofeleTreeField.parentElement.parentElement;
                            if (eleCollapseIcon.children[0].children[0].className == "icon-right-arrow") {
                                eleCollapseIcon.children[0].children[0].className = "icon-down-arrow";
                            }
                        }
                    }
                    $(eleTreeField).focus();
                    $(eleTreeField).css("background-color", "#9ecaed");
                }
                //
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getFiledsTree_Click} " + err.message);
            }
        },
        UpdateOptionControl: function () {
            var element = $('[data-opflag*="on"]')
            if (FCommon.UI.isValidObject(element)) {
                var ctrlid = element[0].getAttribute('data-opctrlid');
                FILTER.ADVANCEFILTER.processOptionControlLeave(ctrlid);
            }
        },
        UpdateDateControl: function () {
            var element = $('[data-dtflag*="on"]')
            if (FCommon.UI.isValidObject(element)) {
                var ctrlid = element[0].getAttribute('data-dtctrlid');
                FILTER.ADVANCEFILTER.processDateControlLeave(ctrlid);
            }
        },
        // Called when click on field value
        valueField_Click: function (eleTxt, iFilterId, iSubFilterId, evt, dashletid) {
            debugger
            var eleRow = null;
            var sCtrlId = "";
            var value = null;
            var eleChild = null;
            var eleParent = null;
            var containerID = "";
            var arrNumberList = null;
            try {
                eleRow = eleTxt.parentElement.parentElement;
                var sFrom = eleRow.children[1].children[0].getAttribute('data-sFrom');
                var compareType = FILTER.ADVANCEFILTER.getCompareType(eleRow);
                var objFieldData = FILTER.ADVANCEFILTER.getField(eleRow);
                eleTxt.setAttribute("onkeypress", "");

                if (compareType == -1) {
                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgSelectCompareWith, "Error");
                }
                else {
                    switch (parseInt(compareType)) {
                        case RD_CompareWith.get('VALUE'):
                            switch (objFieldData.DataType) {
                                case MasterDataType.get("STRINGLIST"):
                                case MasterDataType.get("NUMBERLIST"):
                                    arrNumberList = eleRow.children[1].children[0].getAttribute('data-numberlist').split(',');
                                    sCtrlId = FILTER.ADVANCEFILTER.getSelectControlId(iFilterId, iSubFilterId);
                                    eleChild = document.getElementById(sCtrlId);
                                    if (eleChild == null) {
                                        var select = document.createElement("SELECT");
                                        select.className = "custom-select borderr";
                                        select.setAttribute("onchange", "FILTER.ADVANCEFILTER.onStringListNumberListLeave(this)");
                                        select.id = "advancefilter_SelectOptionControl_iFilterId_iSubFilterId";
                                        eleChild = select;

                                    } else {
                                        FILTER.ADVANCEFILTER.removeOptions(eleChild);
                                    }
                                    FILTER.ADVANCEFILTER.removeOptions(eleChild);
                                    eleTxt.type = "text";
                                    eleTxt.style.display = "none";
                                    containerID = FILTER.getContainerId(iFilterId, iSubFilterId);
                                    eleChild.parentElement = eleTxt.parentElement;
                                    if (objFieldData.DataType == MasterDataType.get("STRINGLIST")) {
                                        for (var i = 0; i < arrNumberList.length; i++) {
                                            var option = document.createElement("option");
                                            option.value = arrNumberList[i];
                                            option.textContent = arrNumberList[i];
                                            eleChild.appendChild(option);
                                        }
                                    }
                                    else {
                                        for (var i = 0; i < arrNumberList.length; i = i + 2) {
                                            var option = document.createElement("option");
                                            option.value = parseInt(arrNumberList[i]);//arrNumberList[i + 1];
                                            option.textContent = arrNumberList[i + 1];
                                            eleChild.appendChild(option);
                                        }
                                    }
                                    if (FCommon.String.isNullOrEmpty(eleTxt.getAttribute('data-value')) == false) {
                                        //eleChild.selectedIndex = eleTxt.getAttribute('data-value');
                                        eleChild.value = eleTxt.getAttribute('data-value');
                                    }
                                    else {
                                        eleChild.selectedIndex = -1;
                                    }
                                    eleParent = eleTxt.parentElement;
                                    eleParent.appendChild(eleChild);
                                    eleChild.style.display = "";
                                    eleChild.focus();
                                    break;
                                case MasterDataType.get("MASTER"):
                                    FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
                                    if (objFieldData.iMasterTypeId > 0) {

                                        eleRow.setAttribute('data-opflag', 'on');
                                        if (sFrom == undefined || sFrom == '') {
                                            sCtrlId = "advancefilter_master_" + iFilterId + "_" + iSubFilterId + "_" + dashletid;
                                        }
                                        else {
                                            sCtrlId = "advancefilter_master_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                                        }
                                        eleRow.setAttribute('data-opctrlid', sCtrlId);
                                        eleTxt.type = "text";
                                        eleTxt.style.display = "none";
                                        OPTIONCONTROL.setParent(sCtrlId, eleTxt.parentElement);
                                        OPTIONCONTROL.setMasterTypeId(sCtrlId, objFieldData.iMasterTypeId);
                                        //OPTIONCONTROL.clear(sCtrlId);
                                        OPTIONCONTROL.resetControl(sCtrlId, 0);
                                        var sFilter = '';
                                        sFilter = eleRow.children[1].children[0].getAttribute('data-sfilter');
                                        if (sFilter != "undefined" && sFilter != "0" && sFilter != "null") {
                                            OPTIONCONTROL.setFilter(sCtrlId, sFilter);
                                        }
                                        OPTIONCONTROL.setControlValue(sCtrlId, FConvert.toInt(FILTER.ADVANCEFILTER.getFieldValue(eleRow)));
                                        //FUIElement.setFocus(sCtrlId);
                                    }
                                    else {
                                        if (objFieldData.ParentId == 10 || objFieldData.ParentId == 14) {
                                            eleRow.setAttribute('data-opflag', 'on');
                                            if (sFrom == undefined || sFrom == '') {
                                                sCtrlId = "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId;
                                            }
                                            else {
                                                sCtrlId = "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                                            }
                                            eleRow.setAttribute('data-opctrlid', sCtrlId);
                                            eleTxt.type = "text";
                                            eleTxt.style.display = "none";
                                            OPTIONCONTROL.setParent(sCtrlId, eleTxt.parentElement);
                                            OPTIONCONTROL.setTableName(sCtrlId, "mCore_Currency");
                                            OPTIONCONTROL.setPrimaryField(sCtrlId, "iCurrencyId");
                                            OPTIONCONTROL.setDisplayField(sCtrlId, "sName");
                                            //OPTIONCONTROL.clear(sCtrlId);
                                            OPTIONCONTROL.resetControl(sCtrlId, 0);
                                            OPTIONCONTROL.setControlValue(sCtrlId, FConvert.toInt(FILTER.ADVANCEFILTER.getFieldValue(eleRow)));
                                        }
                                        else if (objFieldData.tablename != "") {
                                            eleRow.setAttribute('data-opflag', 'on');
                                            if (sFrom == undefined || sFrom == '') {
                                                sCtrlId = "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId;
                                            }
                                            else {
                                                sCtrlId = "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                                            }
                                            eleRow.setAttribute('data-opctrlid', sCtrlId);
                                            eleTxt.type = "text";
                                            eleTxt.style.display = "none";
                                            OPTIONCONTROL.setParent(sCtrlId, eleTxt.parentElement);
                                            OPTIONCONTROL.setTableName(sCtrlId, objFieldData.tablename);
                                            OPTIONCONTROL.setPrimaryField(sCtrlId, objFieldData.primaryfield);
                                            OPTIONCONTROL.setDisplayField(sCtrlId, objFieldData.displayfield);
                                            //OPTIONCONTROL.clear(sCtrlId);
                                            OPTIONCONTROL.resetControl(sCtrlId, 0);
                                            OPTIONCONTROL.setControlValue(sCtrlId, FConvert.toInt(FILTER.ADVANCEFILTER.getFieldValue(eleRow)));
                                        }
                                    }
                                    break;
                                case MasterDataType.get("EXTERNALTABLE"):
                                    FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
                                    if (objFieldData.tablename != "") {
                                        eleRow.setAttribute('data-opflag', 'on');
                                        if (sFrom == undefined || sFrom == '') {
                                            sCtrlId = "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId;
                                        }
                                        else {
                                            sCtrlId = "advancefilter_TableOptionControl_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                                        }
                                        eleRow.setAttribute('data-opctrlid', sCtrlId);
                                        eleTxt.type = "text";
                                        eleTxt.style.display = "none";
                                        OPTIONCONTROL.setParent(sCtrlId, eleTxt.parentElement);
                                        OPTIONCONTROL.setTableName(sCtrlId, objFieldData.tablename);
                                        OPTIONCONTROL.setPrimaryField(sCtrlId, objFieldData.primaryfield);
                                        OPTIONCONTROL.setDisplayField(sCtrlId, objFieldData.displayfield);
                                        //OPTIONCONTROL.clear(sCtrlId);
                                        OPTIONCONTROL.resetControl(sCtrlId, 0);
                                        OPTIONCONTROL.setControlValue(sCtrlId, FConvert.toInt(FILTER.ADVANCEFILTER.getFieldValue(eleRow)));
                                        //FUIElement.setFocus(sCtrlId);
                                    }
                                    break;
                                case MasterDataType.get("DATE"):
                                    FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
                                    eleRow.setAttribute('data-dtflag', 'on');
                                    if (sFrom == undefined || sFrom == '') {
                                        sCtrlId = "advancefilter_date_" + iFilterId + "_" + iSubFilterId;
                                    }
                                    else {
                                        sCtrlId = "advancefilter_date_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                                    }
                                    eleRow.setAttribute('data-dtctrlid', sCtrlId);
                                    eleTxt.type = "text";
                                    eleTxt.style.display = "none";
                                    DATEPICKER.setParent(sCtrlId, eleTxt.parentElement);
                                    value = FConvert.toInt(FILTER.ADVANCEFILTER.getFieldValue(eleRow));
                                    if (value > 0) {
                                        DATEPICKER.setDate(sCtrlId, value, true);
                                    }
                                    else {
                                        var val = eleTxt.getAttribute("data-value");
                                        DATEPICKER.setDate(sCtrlId, val, true);
                                    }
                                    //FUIElement.setFocus(sCtrlId);
                                    break;
                                case MasterDataType.get("TIME"):
                                    sCtrlId = FILTER.ADVANCEFILTER.getTimeControlId(iFilterId, iSubFilterId);
                                    eleTxt.type = "text";
                                    eleTxt.style.display = "none";
                                    FTIMECONTROL.setParent(sCtrlId, eleTxt.parentElement);
                                    value = FConvert.toInt(FILTER.ADVANCEFILTER.getFieldValue(eleRow));
                                    if (value > 0) {
                                        FTIMECONTROL.setTime(sCtrlId, value);
                                    }
                                    //FUIElement.setFocus(sCtrlId);
                                    break;
                                case MasterDataType.get("BOOLEAN"):
                                    eleTxt = FILTER.ADVANCEFILTER.getFieldValueColumn(eleRow).children[0];
                                    $(eleTxt).removeClass("form-control");
                                    eleTxt.type = "checkbox";
                                    break;
                                case MasterDataType.get("Fraction"):
                                    eleTxt.setAttribute("onkeypress", "return FILTER.ADVANCEFILTER.validateInputNumber(this, 1, event)");
                                    break;
                            }
                            bchange = false;
                            break;
                        case RD_CompareWith.get('FIELD'):
                            FILTER.getDataFieldsTree(eleTxt, iFilterId, iSubFilterId, sFrom);
                            bchange = false;
                            eleTreeField = eleTxt.nextElementSibling;
                            //eleTreeField.style.display = "block";
                            if (FCommon.UI.isValidObject(eleTreeField)) {
                                $(eleTreeField).focus();
                                //COMMON.prototype.showMessage(arrFilterResourceMsgs.msgConditionAndCompareWithInvalid, "Error");
                            }
                            sCtrlId = "";
                            break;
                        case RD_CompareWith.get('DATERANGE'):
                            if (objFieldData.DataType != MasterDataType.get('DATETIME') && objFieldData.DataType != MasterDataType.get('DATE')) {
                                COMMON.prototype.showMessage(arrFilterResourceMsgs.msgInvalidSelectField + " " + FILTER.GetDataTypeText(objFieldData.DataType), "Error");
                            }
                            else {
                                FILTER.getDateRangeTree(eleTxt, iFilterId, iSubFilterId);
                                bchange = false;
                            }
                            break;
                        case RD_CompareWith.get('FORMULA'):
                            if (sFrom == undefined || sFrom == '') {
                                sCtrlId = "filterFormulaControl_" + iFilterId + "_" + iSubFilterId;
                            }
                            else {
                                sCtrlId = "filterFormulaControl_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                            }
                            eleTxt.type = "text";
                            eleTxt.style.display = "none";
                            FILTER.getFormulaControl(eleTxt, iFilterId, iSubFilterId);
                            eleTxt.style.display = "none";
                            bchange = false;
                            //FUIElement.setFocus(sCtrlId);
                            break;
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.valueField_Click} " + err.message);
            }
        },
        onOkSaveClick_UpdateOption_DateControl: function () {
            var dateelement = $('[data-dtflag*="on"]');
            if (dateelement.length > 0)
                FILTER.ADVANCEFILTER.UpdateDateControl();
            var element = $('[data-opflag*="on"]');
            if (element.length > 0)
                FILTER.ADVANCEFILTER.UpdateOptionControl();
        },
        validateInputNumber: function (eleInput, iType, evt) {

            // 0 For Signed Integer
            // 1 For Unsigned Integer
            // 2 For Signed Decimal
            // 3 For Unsingned Decimal
            var sTemp = "";
            var charCode = null;
            var iDecimalPlaces = 0;

            try {
                bResult = false;

                if (eleInput.readOnly == true) {
                    return (false);
                }

                if (FCommon.UI.isValidObject(evt.which) == false) {
                    return (true);
                }
                charCode = evt.which;
                if (evt.which == 0) {
                    return (true);
                }

                if (FUIElement.isTextSelected(eleInput) == true) {
                    eleInput.value = "";
                }

                if (charCode == 45) { // -
                    if (eleInput.value.length == 0) {
                        return (true);
                    }
                }
                else if (charCode == 46) { // .
                    var splitedValue = parseInt(eleInput.value.split('.')[0]);
                    if ((iType == 2 || iType == 3)
                        && (eleInput.value.indexOf(".") == -1 || splitedValue == 0)) { // Signed Decimal, Unsingned Decimal
                        return (true);
                    }
                    else {
                        if (iType == 1 && (eleInput.value.indexOf(".") == -1))
                            return true;
                    }
                }
                else if (charCode >= 48 && charCode <= 57) { // 0 to 9
                    return (FNUMERICCONTROL.isValidDigitPlaceForDecimalNumber(eleInput, iType));
                }
            }
            catch (err) {
                COMMON.prototype.showMessage("{validateInputNumber} " + err.message, "Exception");
            }
            return (false);
        },

        //called on placing mouse pointer over the remove button.
        removeFilterRow_mouseover: function (ele, evt) {
            try {
                $(ele).addClass("highlight");
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.removeFilterRow_mouseover} " + err.message);
            }
        },

        //called on removing mouse pointer out of the remove button.
        removeFilterRow_mouseout: function (ele, evt) {
            try {
                $(ele).removeClass("highlight");
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.removeFilterRow_mouseout} " + err.message);
            }
        },

        // Called when remove row button is clicked
        removeFilterRow_Click: function (eleSpan, evt) {
            var eleTr = null;
            var eleParent = null;
            try {
                //var retVal = confirm(document.getElementById('idmsgDeleteFilterConfirm').value);
                //if (retVal == false) {
                //    return;
                //}
                eleTr = eleSpan.parentElement.parentElement;
                eleParent = eleTr.parentElement.parentElement;
                FILTER.ADVANCEFILTER.removeRow(eleTr);
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.removeFilterRow_Click} " + err.message);
            }
        },

        // Called when plus symbol is clicked.
        addFilterRow_Click: function (eleSpan, evt) {
            var eleBody = null;
            var eleTd = null;

            eleTd = eleSpan.parentElement;
            eleBody = eleTd.parentElement.parentElement;
            FILTER.ADVANCEFILTER.addRow(eleBody);
        },

        // Called when leaf node is clicked in field tree
        selectField_Click: function (eleLeaf, iFilterId, iSubFilterId, sFrom, dashletid) {
            var iIndex = 0;
            var eleBody = null;
            var arrTreeData = null;
            var objTreeData = null;
            var objData = null;
            var objTemp = null;
            var eleOperator = null;

            try {
                objTemp = FCommon.UI.findAncestorElementsUsingClass(eleLeaf, "FAdvanceFilterField", false);
                if (objTemp.length < 1) {
                    return;
                }
                eleRow = objTemp[0].parentElement;
                if (FCommon.UI.isValidObject(eleRow) == false) {
                    return;
                }
                eleBody = eleRow.parentElement;
                arrTreeData = FILTER.ADVANCEFILTER.getFieldTreeData(eleBody);
                objData = {};
                objData.FieldId = FConvert.toInt(eleLeaf.id);
                objData.FieldName = eleLeaf.textContent;
                objData.DataType = FConvert.toInt(eleLeaf.getAttribute("data-datatype"));
                objData.ParentId = FConvert.toInt(eleLeaf.dataset.parent);
                objData.SubParentId = FConvert.toInt(eleLeaf.dataset.subparent);
                objData.numberlist = eleLeaf.getAttribute("data-numberlist");
                objData.sFilter = eleLeaf.getAttribute('data-sfilter');//eleLeaf.parentElement.parentElement.previousElementSibling.getAttribute('data-sfilter');
                objData.FieldName = eleLeaf.getAttribute("data-extraFieldName");
                objTreeData = null;
                iIndex = FILTER.ADVANCEFILTER.getTreeDataIndex(objData.FieldId, objData.ParentId, objData.SubParentId, arrTreeData);
                if (iIndex >= 0) {
                    objTreeData = arrTreeData[iIndex];
                }

                FILTER.ADVANCEFILTER.setField(eleRow, objData, objTreeData);
                var filterTree = document.getElementById(FILTER.getFilterTreeId(iFilterId, iSubFilterId, sFrom, dashletid));
                if (filterTree.parentNode.className == "dropdown open")
                    filterTree.parentNode.className = "dropdown";
                filterTree.style.display = "none";

                var filterDataTree = document.getElementById(FILTER.getFilterDataTreeId(iFilterId, iSubFilterId, sFrom, dashletid));
                filterDataTree.style.display = "none";
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, null, '');
                eleOperator = FILTER.ADVANCEFILTER.setOperator(eleRow, -1);
                //eleOperator = FILTER.ADVANCEFILTER.setCompareType(eleRow, -1);
                FUIElement.setFocus(eleOperator);
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.selectField_Click} " + err.message);
            }
        },

        // Internal
        getConjuctionColumn: function (eleRow) {
            return (eleRow.children[0]);
        },

        // Internal
        getFieldColumn: function (eleRow) {
            return (eleRow.children[1]);
        },

        // Internal
        getCompareWithColumn: function (eleRow) {
            return (eleRow.children[3]);
        },

        // Internal
        getFieldValueColumn: function (eleRow) {
            return (eleRow.children[4]);
        },

        // Internal
        setConjuction: function (eleRow, iValue) {
            var eleSelect = null;

            try {
                eleSelect = eleRow.children[0].children[0];
                eleSelect.value = iValue;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.setConjuction} " + err.message);
            }
        },

        // Internal
        setField: function (eleRow, obj, objTreeData) {
            var eleInput = null;
            var iFilterId = null;
            var iSubFilterId = null;
            var eleTreeId = null;
            try {
                iFilterId = eleRow.parentElement.parentElement.getAttribute('data-filterid');
                iSubFilterId = eleRow.parentElement.parentElement.getAttribute('data-subfilterid');
                eleTreeId = iFilterId + '_' + iSubFilterId + '_advancerfiltertreedata';
                eleInput = FILTER.ADVANCEFILTER.getFieldColumn(eleRow).children[0];
                if (FCommon.UI.isValidObject(obj) == false) {
                    return;
                }
                if (obj.FieldName != undefined) {
                    eleInput.setAttribute("data-fieldname", obj.FieldName);
                    eleInput.setAttribute("data-extraFieldName", obj.FieldName);
                }
                else {
                    if (objTreeData != null) {
                        eleInput.setAttribute("data-fieldname", objTreeData.sName);
                        eleInput.setAttribute("data-extraFieldName", objTreeData.sName);
                        obj.numberlist = objTreeData.sExtraValue;
                    }
                }


                eleInput.setAttribute("data-fieldid", FConvert.toInt(obj.FieldId));
                eleInput.setAttribute("data-subparent", FConvert.toInt(obj.SubParentId));
                eleInput.setAttribute("data-parent", (FConvert.toInt(obj.ParentId) == FConvert.toInt(obj.SubParentId) ? 0 : FConvert.toInt(obj.ParentId)));
                eleInput.setAttribute("data-sFilter", obj.sFilter);

                eleInput.setAttribute("data-datatype", FConvert.toInt(obj.DataType));
                varDataType = 0;
                if (obj != null && obj != '') {
                    //Running loop for checking the correct datatype of a field.
                    if (FCommon.UI.isValidObject(document.getElementById(eleTreeId))) {
                        var eleTree = FConvert.stringToObject(document.getElementById(eleTreeId).value).data;
                        if (eleTree.length > 0) {
                            for (var iRow = 0; iRow < eleTree.length; iRow++) {
                                if (eleTree[iRow].iFieldId == FConvert.toInt(obj.FieldId)) {
                                    //if (eleInput.getAttribute('data-fieldname') == 'Name' && FConvert.toInt(eleTree[iRow].iDataTypeId) != 12){

                                    eleInput.setAttribute("data-datatype", FConvert.toInt(eleTree[iRow].iDataTypeId));
                                    //obj.DataType = FConvert.toInt(eleTree[iRow].iDataTypeId);
                                    //varDataType = FConvert.toInt(eleTree[iRow].iDataTypeId);
                                    //}
                                    varDataType = FConvert.toInt(obj.DataType);
                                    break;
                                }
                            }
                        }
                    }
                }

                if (FCommon.UI.isValidObject(objTreeData) == true) {
                    eleInput.setAttribute("data-masterid", FConvert.toInt(objTreeData.iMasterLink));
                    eleInput.setAttribute("data-tablename", objTreeData.TableName);
                    eleInput.setAttribute("data-primaryfield", objTreeData.PrimaryField);
                    eleInput.setAttribute("data-displayfield", objTreeData.DisplayField);
                    eleInput.setAttribute("data-numberlist", objTreeData.sExtraValue);
                    eleInput.setAttribute("data-isgroup", obj.IsGroup);
                    eleInput.value = objTreeData.sName;
                }
                else {
                    eleInput.value = "";
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.setField} " + err.message);
            }
            return obj;
        },

        // Internal
        getField: function (eleRow) {
            var eleTxt = null;
            var objField = null;

            try {
                eleTxt = FILTER.ADVANCEFILTER.getFieldColumn(eleRow).children[0];

                objField = {};
                objField.DataType = FConvert.toInt(eleTxt.getAttribute('data-datatype'));
                objField.FieldId = FConvert.toInt(eleTxt.getAttribute('data-fieldid'));
                objField.ParentId = FConvert.toInt(eleTxt.getAttribute('data-parent'));
                objField.SubParentId = FConvert.toInt(eleTxt.getAttribute('data-subparent'));
                objField.iMasterTypeId = FConvert.toInt(eleTxt.getAttribute('data-masterid'));
                objField.tablename = eleTxt.getAttribute('data-tablename');
                objField.primaryfield = eleTxt.getAttribute('data-primaryfield');
                objField.displayfield = eleTxt.getAttribute('data-displayfield');
                objField.sName = eleTxt.value;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getField} " + err.message);
            }

            return (objField);
        },

        // Internal
        setOperator: function (eleRow, iValue) {
            var eleSelect = null;

            try {
                eleSelect = eleRow.children[2].children[0];
                eleSelect.value = iValue;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.setOperator} " + err.message);
            }

            return (eleSelect);
        },

        // Internal
        setCompareType: function (eleRow, iValue) {
            var eleSelect = null;

            try {
                eleSelect = FILTER.ADVANCEFILTER.getCompareWithColumn(eleRow).children[0];
                eleSelect.value = iValue;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.setCompareType} " + err.message);
            }
        },

        // Internal
        getCompareType: function (eleRow) {
            var iValue = 0;
            try {
                iValue = FConvert.toInt(FILTER.ADVANCEFILTER.getCompareWithColumn(eleRow).children[0].value);
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getCompareType} " + err.message);
            }

            return (iValue);
        },

        // Internal
        setFieldValue: function (eleRow, obj, eleCondition, iFilterId, iSubFilterId) {
            var eleContainer = null;
            var eleAdvanceFilter = null;
            var eleInput = null;
            var eleParentTable = null;
            try {
                eleInput = FILTER.ADVANCEFILTER.getFieldValueColumn(eleRow).children[0];
                eleInput.style.display = "";
                $(eleInput).addClass('form-control');
                if (FCommon.UI.isValidObject(obj) == false) {
                    eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleRow.children[0]);
                    FILTER.ADVANCEFILTER.moveControl(FILTER.ADVANCEFILTER.getFieldValueColumn(eleRow), eleContainer);
                    FCommon.UI.removeDataAttribute(eleInput);
                    eleInput.type = "text";
                    eleInput.value = "";
                    if ((eleRow.children[2].children[0].value) == 6 || eleRow.children[2].children[0].value == 7) {
                        eleInput.style.display = "none";
                    }
                    return;
                }

                if (FCommon.UI.isValidObject(obj.DataType) == false) {
                    eleInput.type = "text";
                    eleInput.value = "";
                    return;
                }

                if (obj.Operator == 6 || obj.Operator == 7) {
                    eleInput.style.display = "none";
                    return;
                }

                varDataType = FConvert.toInt(obj.DataType);

                varDataType = eleRow.children[1].children[0].getAttribute('data-datatype');
                eleInput.setAttribute("data-datatype", FConvert.toInt(varDataType));
                eleInput.setAttribute("data-fieldid", obj.FieldId);

                switch (FConvert.toInt(varDataType)) {
                    case MasterDataType.get("NUMBER"):
                    case MasterDataType.get("FRACTION"):
                    case MasterDataType.get("BIGNUMBER"):
                    case MasterDataType.get("SMALLNUMBER"):
                    case MasterDataType.get("TINYNUMBER"):
                    case MasterDataType.get("TEXT"):
                        if (obj.CompareText != "" && obj.CompareText != null) {
                            eleInput.value = obj.CompareText;
                        } else {
                            eleInput.value = obj.CompareValue;
                        }
                        eleInput.setAttribute("data-value", eleInput.value);
                        eleInput.setAttribute("data-ivalue", obj.CompareValue);
                        break;
                    case MasterDataType.get("BOOLEAN"):
                        eleInput.type = "checkbox";
                        eleInput.checked = FConvert.toBoolean(obj.CompareValue);
                        eleInput.setAttribute("data-value", eleInput.checked);
                        break;
                    case MasterDataType.get("STRINGLIST"):
                    case MasterDataType.get("NUMBERLIST"):
                        if (obj.CompareText == "" || obj.CompareText == null) {
                            if (obj.numberlist != undefined && obj.numberlist != null) {
                                var lstvalues = obj.numberlist.split(',');
                                for (var iCount = 0; iCount < lstvalues.length; iCount++) {
                                    if (lstvalues[iCount] == obj.CompareValue) {
                                        if (FConvert.toInt(varDataType) == 9)
                                            obj.CompareText = lstvalues[iCount + 1];
                                        else
                                            obj.CompareText = lstvalues[iCount];
                                        break;
                                    }
                                }
                            }
                        }
                        eleInput.value = obj.CompareText;
                        eleInput.setAttribute("data-value", obj.CompareValue);
                        break;
                    case MasterDataType.get("MASTER"):
                    case MasterDataType.get("EXTERNALTABLE"):
                        if (obj.CompareText == null) {
                            var sFrom = eleRow.children[1].children[0].getAttribute('data-sFrom');
                            if (sFrom == undefined || sFrom == '') {
                                sCtrlId = "advancefilter_master_" + iFilterId + "_" + iSubFilterId;
                            }
                            else {
                                sCtrlId = "advancefilter_master_" + iFilterId + "_" + iSubFilterId + "_" + sFrom;
                            }
                            var sMasterTypeId = eleRow.children[1].children[0].getAttribute('data-masterid');
                            OPTIONCONTROL.setMasterTypeId(sCtrlId, sMasterTypeId);
                            OPTIONCONTROL.resetControl(sCtrlId, 0);
                            var sFilter = '';
                            sFilter = eleRow.children[1].children[0].getAttribute('data-sfilter');
                            if (sFilter != "undefined") {
                                OPTIONCONTROL.setFilter(sCtrlId, sFilter);
                            }
                            OPTIONCONTROL.setControlValue(sCtrlId, FConvert.toInt(obj.CompareValue));
                            var sName = OPTIONCONTROL.getControlValue(sCtrlId, "Name");
                            eleInput.value = sName;
                        }
                        else {
                            eleInput.value = obj.CompareText;
                        }
                        eleInput.setAttribute("data-value", FConvert.toInt(obj.CompareValue));
                        eleInput.setAttribute("data-ivalue", FConvert.toInt(obj.CompareValue));
                        eleInput.setAttribute("data-isgroup", FConvert.toBoolean(obj.IsGroup));
                        break;
                    case MasterDataType.get("DATE"):
                        obj.CompareValue = FConvert.toInt(obj.CompareValue);
                        if (FCommon.String.isNullOrEmpty(obj.CompareText) == true && obj.CompareValue > 0) {
                            eleAdvanceFilter = FCommon.UI.findAncestorElementsUsingClass(eleRow, FILTER.ADVANCEFILTER.getAdvanceFilterClassName(), false)[0];
                            iFilterId = FConvert.toInt(eleAdvanceFilter.getAttribute("data-filterid"));
                            iSubFilterId = FConvert.toInt(eleAdvanceFilter.getAttribute("data-subfilterid"));
                            obj.CompareText = DATEPICKER.convertDateIntoString("advancefilter_date_" + iFilterId + "_" + iSubFilterId, obj.CompareValue);
                        }
                        eleInput.value = obj.CompareText;
                        eleInput.setAttribute("data-value", obj.CompareValue);
                        break;
                    case MasterDataType.get("TIME"):
                        obj.CompareValue = FConvert.toInt(obj.CompareValue);
                        if (FCommon.String.isNullOrEmpty(obj.CompareText) == true && obj.CompareValue > 0) {
                            eleAdvanceFilter = FCommon.UI.findAncestorElementsUsingClass(eleRow, FILTER.ADVANCEFILTER.getAdvanceFilterClassName(), false)[0];
                            iFilterId = FConvert.toInt(eleAdvanceFilter.getAttribute("data-filterid"));
                            iSubFilterId = FConvert.toInt(eleAdvanceFilter.getAttribute("data-subfilterid"));
                            FTIMECONTROL.setTime(FILTER.ADVANCEFILTER.getTimeControlId(iFilterId, iSubFilterId), obj.CompareValue);
                            obj.CompareText = FTIMECONTROL.getText(FILTER.ADVANCEFILTER.getTimeControlId(iFilterId, iSubFilterId));
                        }
                        eleInput.value = obj.CompareText;
                        eleInput.setAttribute("data-value", FConvert.toInt(obj.CompareValue));
                        break;
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.setFieldValue} " + err.message);
            }
        },

        // Internal
        getFieldValue: function (eleRow) {
            var eleInput = null;
            var value = null;

            try {
                eleInput = FILTER.ADVANCEFILTER.getFieldValueColumn(eleRow).children[0];
                value = eleInput.getAttribute("data-ivalue");
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getFieldValue} " + err.message);
            }

            return (value);
        },

        // Internal - Returns body element of advance filter
        getRowContainer: function (iFilterId, iSubFilterId, sFrom, dashletid) {
            var sAdvanceFilterId = "";
            var eleAdvance = null;
            var eleBody = null;
            var iCount = 0;
            var iTotal = 0;
            var sTagName = "";

            try {
                sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom, dashletid);
                eleAdvance = document.getElementById(sAdvanceFilterId);
                if (FCommon.UI.isValidObject(eleAdvance)) {
                    iTotal = eleAdvance.children.length;
                    for (iCount = 0; iCount < iTotal; iCount++) {
                        sTagName = eleAdvance.children[iCount].tagName;
                        if (sTagName == "TABLE") {
                            eleBody = eleAdvance.children[iCount].children[1];
                            break;
                        }
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getRowContainer} " + err.message);
            }

            return (eleBody);
        },

        // Internal - Returns container of date,time,master etc. controls of advance filter
        getControlContainer: function (ele) {
            var sNodeName = "";
            var eleContainer = null;
            var eleTable = null;

            try {
                if (FCommon.UI.isValidObject(ele)) {
                    sNodeName = ele.nodeName.toLowerCase();
                    if (sNodeName == "td") {
                        eleTable = ele.parentElement.parentElement.parentElement;
                    }
                    else if (sNodeName == "tr") {
                        eleTable = ele.parentElement.parentElement;
                    }
                    else if (sNodeName == "tbody") {
                        eleTable = ele.parentElement;
                    }
                    else if (sNodeName == "table") {
                        eleTable = ele;
                    }

                    if (FCommon.UI.isValidObject(eleTable) == true) {
                        eleContainer = eleTable.children[0].children[1].children[0];
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getControlContainer} " + err.message);
            }

            return (eleContainer);
        },

        // Internal - Returns total body rows of advance filter
        getTotalAdvanceRows: function (iFilterId, iSubFilterId) {
            var eleBody = null;
            var iValue = 0;

            try {
                eleBody = FILTER.ADVANCEFILTER.getRowContainer(iFilterId, iSubFilterId);
                iValue = eleBody.children.length;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getTotalAdvanceRows} " + err.message);
            }

            return (iValue);
        },

        // Internal - Deletes all advance filter rows
        resetAdvanceFilter: function (iFilterId, iSubFilterId, dashletid) {
            var eleBody = null;
            try {
                eleBody = FILTER.ADVANCEFILTER.getRowContainer(iFilterId, iSubFilterId, dashletid);
                if (FCommon.UI.isValidObject(eleBody)) {
                    while (eleBody.children.length > 1) {
                        FILTER.ADVANCEFILTER.removeRow(eleBody.children[1]);
                    }
                    FILTER.ADVANCEFILTER.removeRow(eleBody.children[0]);
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.resetAdvanceFilter} " + err.message);
            }
        },

        // Internal - Moves advance filter controls like date, time, master etc. into given container
        moveControl: function (eleTd, eleContainer) {
            try {
                if (FCommon.UI.isValidObject(eleContainer) == false) {
                    eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleTd);
                }

                if (eleTd.children.length > 1) {
                    eleContainer.appendChild(eleTd.children[1]);
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.moveControl} " + err.message);
            }
        },

        // Internal - Moves advance filter controls like date, time, master etc. into its original container.  
        moveControlbydefault: function (iFilterId, iSubFilterId) {
            try {
                var ContainerID = null;
                ContainerID = FILTER.getContainerId(iFilterId, iSubFilterId);
                var eleContainer = document.getElementById(ContainerID);
                var eleParent = null;
                var eleChild = null;
                if (FCommon.UI.isValidObject(eleContainer) == true) {
                    //OptionControl
                    eleChild = document.getElementById(FILTER.ADVANCEFILTER.getMasterOptionControlId(iFilterId, iSubFilterId));
                    eleParent = eleChild.parentElement;
                    if (eleParent.id != ContainerID) {
                        eleContainer.appendChild(eleChild);
                    }
                    //TableControl
                    eleChild = document.getElementById(FILTER.ADVANCEFILTER.getTableOptionControlId(iFilterId, iSubFilterId));
                    eleParent = eleChild.parentElement;
                    if (eleParent.id != ContainerID) {
                        eleContainer.appendChild(eleChild);
                    }
                    //Date Control
                    eleChild = document.getElementById(FILTER.ADVANCEFILTER.getDatePickerControlId(iFilterId, iSubFilterId));
                    eleParent = eleChild.parentElement;
                    if (eleParent.id != ContainerID) {
                        eleContainer.appendChild(eleChild);
                    }
                    //Time Control
                    eleChild = document.getElementById(FILTER.ADVANCEFILTER.getTimeControlId(iFilterId, iSubFilterId));
                    eleParent = eleChild.parentElement;
                    if (eleParent.id != ContainerID) {
                        eleContainer.appendChild(eleChild);
                    }
                    //Select Control
                    eleChild = document.getElementById(FILTER.ADVANCEFILTER.getSelectControlId(iFilterId, iSubFilterId));
                    eleParent = eleChild.parentElement;
                    if (eleParent.id != ContainerID) {
                        eleContainer.appendChild(eleChild);
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.moveControlbydefault} " + err.message);
            }
        },

        // Internal
        removeRow: function (eleRow) {
            var eleContainer = null;
            var eleBody = null;
            var eleTd = null;
            var iIndex = 0;

            try {
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleRow.children[0]);
                FILTER.ADVANCEFILTER.moveControl(eleRow.children[1], eleContainer); // For field
                iIndex = FCommon.UI.getElementPosition(eleRow);
                if (iIndex < 1) {
                    // Some error
                    return;
                }
                eleBody = eleRow.parentElement;
                if (eleBody.children.length == 1) {
                    // If only one row
                    // Reset value
                    //Making the ContainsWith and Value fields visible.


                    eleRow.children[3].children[0].style.display = "";
                    eleRow.children[4].children[0].style.display = "";
                    //advancefilter_master_531_0__input_container
                    if (eleRow.children[4].children.length > 1)
                    {
                        var str = eleRow.getAttribute("data-opctrlid") + "_input_container";
                        if (str == eleRow.children[4].children[1].id)
                            eleRow.children[4].children[1].style.display = "";
                        else
                            eleRow.children[4].children[1].style.display = "none";
                    }
                    eleRow.children[4].children[0].value = "";
                    FILTER.ADVANCEFILTER.setConjuction(eleRow, 0);
                    FILTER.ADVANCEFILTER.setField(eleRow, "");
                    FILTER.ADVANCEFILTER.setOperator(eleRow, -1);
                    FILTER.ADVANCEFILTER.setCompareType(eleRow, -1);
                    FILTER.ADVANCEFILTER.setFieldValue(eleRow, "", '');
                    return;
                }

                iIndex--;
                if (iIndex == 0) { // If first row delete
                    // Find next row add td
                    eleTd = eleRow.nextElementSibling.children[eleRow.children.length - 1]; // Get add row column
                    eleTd.children[0].style.display = ""; // Display add row column
                    eleTd = FILTER.ADVANCEFILTER.getFieldValueColumn(eleRow.nextElementSibling);
                    eleTd.children[0].type = "text";
                    FILTER.ADVANCEFILTER.setConjuction(eleRow.nextElementSibling, 0);
                }
                eleBody.removeChild(eleRow);
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.removeRow} " + err.message);
            }
        },

        // Internal - Adds a new row
        addRow: function (eleBody) {
            var eleHead = null;
            var eleRow = null;
            var eleTd = null;

            try {
                eleHead = eleBody.previousElementSibling;
                $(eleHead.children[0]).clone(true).appendTo(eleBody);

                // Hiding Add Row Image
                eleRow = eleBody.children[eleBody.children.length - 1];
                //Making the ContainsWith and Value fields visible.
                eleRow.children[3].children[0].style.display = "";
                eleRow.children[4].children[0].style.display = "";

                eleTd = eleRow.children[eleRow.children.length - 1];
                eleTd.children[0].style.display = "none";
                FILTER.ADVANCEFILTER.setConjuction(eleRow, 2);
                FILTER.ADVANCEFILTER.setField(eleRow, "");
                FILTER.ADVANCEFILTER.setOperator(eleRow, -1);
                FILTER.ADVANCEFILTER.setCompareType(eleRow, -1);
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, null, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.addRow} " + err.message);
            }

            return (eleRow);
        },

        getDataContainerId: function (sAdvanceFilterId) {
            return (sAdvanceFilterId + "_data");
        },

        getDataContainer: function (ele) {
            var objTemp = null;
            var eleAdvanceContainer = null;
            var eleData = null;
            try {
                if (FUIElement.hasClass(ele, FILTER.ADVANCEFILTER.getAdvanceFilterClassName(), false).Value == true) {
                    eleAdvanceContainer = ele;
                }
                else {
                    eleAdvanceContainer = FCommon.UI.findAncestorElementsUsingClass(ele, FILTER.ADVANCEFILTER.getAdvanceFilterClassName(), false);
                    if (eleAdvanceContainer.length < 1) {
                        return;
                    }
                    eleAdvanceContainer = eleAdvanceContainer[0];
                }
                eleData = document.getElementById(FILTER.ADVANCEFILTER.getDataContainerId(eleAdvanceContainer.id));
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getDataContainer} " + err.message);
            }

            return (eleData);
        },

        // Internal - Called whenever switch from advance filter to default filter
        setLastData: function (ele, arrData) {
            var eleData = null;
            try {
                eleData = FILTER.ADVANCEFILTER.getDataContainer(ele);
                if (FCommon.UI.isValidObject(eleData) == true) {
                    eleData.value = FConvert.toString(arrData);
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.setLastData} " + err.message);
            }
        },

        // Internal - Called whenever switch from default filter to advance filter
        getLastData: function (ele) {
            var eleData = null;
            var result = null;

            try {
                eleData = FILTER.ADVANCEFILTER.getDataContainer(ele);
                if (FCommon.UI.isValidObject(eleData) == false) {
                    return ([]);
                }

                result = FConvert.stringToObject(eleData.value);
                if (result.lValue < 1) {
                    return ([]);
                }

                result = result.data;
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getLastData} " + err.message);
                result = [];
            }

            return (result);
        },

        getRowElement: function (eleBody, iIndex) {
            var eleRow = null;

            try {
                if (iIndex >= 0 && iIndex < eleBody.children.length) {
                    eleRow = eleBody.children[iIndex];
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getRowElement} " + err.message);
            }

            return (eleRow);
        },

        getFieldTreeData: function (eleBody) {
            var iCounter = 0;
            var arrTreeData = null;
            var eleTreeData = null;
            var result = null;
            try {
                arrTreeData = [];
                eleTreeData = eleBody.parentElement.nextElementSibling;
                if (FCommon.String.isNullOrEmpty(eleTreeData.value, true) == false) {
                    result = FConvert.stringToObject(eleTreeData.value);
                    if (result.lValue > 0) {
                        arrTreeData = result.data;
                    }
                }
                //for (iCounter = 0; iCounter < arrTreeData.length; iCounter++) {
                //    arrTreeData[iCounter].iParentId = 0;
                //}
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getFieldTreeData} " + err.message);
            }

            return (arrTreeData);
        },

        getTreeDataIndex: function (iFieldId, iParentId, iSubParentId, arrTreeData) {
            var iIndex = -1;
            var iCounter = 0;
            var objData = null;
            try {

                if (FCommon.Array.getLength(arrTreeData) == 0) {
                    return (-1);
                }

                for (iCounter = 0; iCounter < arrTreeData.length; iCounter++) {
                    objData = arrTreeData[iCounter];
                    if (iParentId <= 0) {
                        if (iSubParentId <= 0) {
                            if (objData.iFieldId == iFieldId) {
                                iIndex = iCounter;
                                break;
                            }
                        }
                        else {
                            if (objData.iFieldId == iFieldId && objData.iSubParentId == iSubParentId) {
                                iIndex = iCounter;
                                break;
                            }
                        }
                    }
                    else {
                        if (iSubParentId <= 0) {
                            if (objData.iFieldId == iFieldId && objData.iParentId == iParentId) {
                                iIndex = iCounter;
                                break;
                            }
                        }
                        else {
                            if (objData.iFieldId == iFieldId && objData.iParentId == iParentId && objData.iSubParentId == iSubParentId) {
                                iIndex = iCounter;
                                break;
                            }
                        }
                    }
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getTreeDataIndex} " + err.message);
            }

            return (iIndex);
        },

        onClick: function (tbl, evt) {
            debugger
            let iColumn = 0;
            let obj = null;

            try {

                if (DataType.isValidObject(evt.target) == false) {
                    return;
                }

                obj = FUIElement.hasClass(evt.target, "FAdvanceFilterColumn", true);
                if (obj.Value == false) {
                    return;
                }

                iColumn = DataType.toInt(obj.Element.getAttribute("data-column"));
                var elerow = obj.Element.parentElement;
                var flag = elerow.getAttribute("data-opflag");

                var dtflag = elerow.getAttribute("data-dtflag");
                if (flag == "on" && iColumn != 4 && iColumn != 5) {
                    var ctrlid = elerow.getAttribute('data-opctrlid');
                    FILTER.ADVANCEFILTER.processOptionControlLeave(ctrlid);
                    eleRow.setAttribute('data-opflag', 'off');
                }
                else if (dtflag == "on" && iColumn != 4 && iColumn != 5) {
                    FILTER.ADVANCEFILTER.processDateControlLeave("advancefilter_date_" + tbl.getAttribute("data-Filterid") + "_" + tbl.getAttribute("data-subfilterid"));
                    eleRow.setAttribute('data-dtflag', 'off');
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onClick} " + err.message);
            }
        },

        onKeyDown: function (tbl, evt) {
            ;
            let iColumn = 0;
            let obj = null;

            try {
                if (evt.keyCode != eKeyCode.CR && evt.keyCode != eKeyCode.Tab) {
                    return;
                }

                if (DataType.isValidObject(evt.target) == false) {
                    return;
                }

                obj = FUIElement.hasClass(evt.target, "FAdvanceFilterColumn", true);
                if (obj.Value == true) {
                    iColumn = DataType.toInt(obj.Element.getAttribute("data-column"));
                }

                if ($(evt.target).hasClass(OPTIONCONTROL.getClassName()) == true) {
                    FILTER.ADVANCEFILTER.processOptionControlLeave(evt.target);
                }
                if ($(evt.target).hasClass(DATEPICKER.getClassName()) == true) {
                    FILTER.ADVANCEFILTER.processDateControlLeave(evt.target);
                }
                if ($(evt.target).hasClass(FTIMECONTROL.getClassName()) == true) {
                    FILTER.ADVANCEFILTER.processTimeControlLeave(evt.target);
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onKeyDown} " + err.message);
            }
        },
        processTimeControlLeave: function (ctrl) {
            ;
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var obj = null;

            try {
                eleTd = FTIMECONTROL.getParent(ctrl).data;
                eleRow = eleTd.parentElement;


                eleBody = eleRow.parentElement;
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                FTIMECONTROL.setParent(ctrl, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("TIME");
                obj.CompareValue = FConvert.toInt(FTIMECONTROL.getTime(ctrl));
                obj.CompareText = DATEPICKER.getText(ctrl);
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onTimeControlLeave} " + err.message);
            }
        },
        processDateControlLeave: function (ctrl) {
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var obj = null;
            try {
                eleTd = DATEPICKER.getParent(ctrl).data;
                eleRow = eleTd.parentElement;
                eleRow.setAttribute('data-dtflag', 'off');
                eleBody = eleRow;
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                DATEPICKER.setParent(ctrl, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("DATE");
                obj.CompareValue = FConvert.toInt(DATEPICKER.getDate(ctrl));
                obj.CompareText = DATEPICKER.getText(ctrl);
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onDatePickerControlLeave} " + err.message);
            }
        },
        processOptionControlLeave: function (id) {
            let eleContainer = null;
            let eleBody = null;
            let eleRow = null;
            let eleTd = null;
            let objUserData = null;
            let obj = null;

            try {
                eleTd = OPTIONCONTROL.getParent(id).data;
                if (eleTd != null) {
                    eleRow = eleTd.parentElement;
                    eleRow.setAttribute('data-opflag', 'off');
                    objUserData = DataType.stringToObject(OPTIONCONTROL.getUserData(id)).data;

                    eleBody = FILTER.ADVANCEFILTER.getRowContainer(objUserData.iFilterId, objUserData.iSubFilterId, "", objUserData.DashletId);
                    eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                    OPTIONCONTROL.setParent(id, eleContainer);

                    obj = {};
                    obj.DataType = eMasterDataType.Master;
                    obj.CompareValue = DataType.toInt(OPTIONCONTROL.getControlValue(id));
                    if (obj.CompareValue > 0) {
                        obj.CompareText = OPTIONCONTROL.getControlText(id);
                        obj.IsGroup = obj.IsGroup = OPTIONCONTROL.getControlValue(id, "bgroup");
                    }
                    else {
                        obj.CompareText = OPTIONCONTROL.getControlText(id);
                    }

                    FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.processOptionControlLeave} " + err.message);
            }
        },

        onOptionControlLeave: function (id, data, tag) {
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var objUserData = null;
            var obj = null;

            try {
                if (OPTIONCONTROL.isCustomizedPopupVisible(id) == true) {
                    return;
                }

                //return;

                eleTd = OPTIONCONTROL.getParent(tag.Control.id).data;
                eleRow = eleTd.parentElement;

                objUserData = FConvert.stringToObject(tag.UserData).data;

                eleBody = FILTER.ADVANCEFILTER.getRowContainer(objUserData.iFilterId, objUserData.iSubFilterId, "", objUserData.DashletId);
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                OPTIONCONTROL.setParent(tag.Control, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("MASTER");
                obj.CompareValue = FConvert.toInt(OPTIONCONTROL.getControlValue(tag.Control));
                if (tag.Data.length > 0) {
                    obj.CompareText = OPTIONCONTROL.getControlText(tag.Control);
                    //if (tag.Data[1].name != undefined) {
                    //    obj.CompareText = tag.Data[1].name;
                    //}
                    //else if (tag.Data[1].Name != undefined) {
                    //    obj.CompareText = tag.Data[1].Name;
                    //}
                    //else if (tag.Data[1].sname != undefined) {
                    //    obj.CompareText = tag.Data[1].sname;
                    //}
                    //else if (tag.Data[1].sName != undefined) {
                    //    obj.CompareText = tag.Data[1].sName;
                    //}
                    //else if (tag.Data[1].code != undefined) {
                    //    obj.CompareText = tag.Data[1].code;
                    //}
                    //else if (tag.Data[1].alias != undefined) {
                    //    obj.CompareText = tag.Data[1].alias;
                    //}
                    obj.IsGroup = obj.IsGroup = OPTIONCONTROL.getControlValue(id, "bgroup");
                }
                else {
                    obj.CompareText = OPTIONCONTROL.getControlText(tag.Control);
                }
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onOptionControlLeave} " + err.message);
            }
        },

        onTableOptionControlLeave: function (controlId, data, tag) {
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var objUserData = null;
            var obj = null;

            try {
                eleTd = OPTIONCONTROL.getParent(tag.Control.id).data;
                eleRow = eleTd.parentElement;

                objUserData = FConvert.stringToObject(tag.UserData).data;

                eleBody = FILTER.ADVANCEFILTER.getRowContainer(objUserData.iFilterId, objUserData.iSubFilterId, "", objUserData.DashletId);
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                OPTIONCONTROL.setParent(tag.Control, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("MASTER");
                obj.CompareValue = FConvert.toInt(OPTIONCONTROL.getControlValue(tag.Control));
                obj.CompareText = OPTIONCONTROL.getControlText(tag.Control);
                obj.IsGroup = OPTIONCONTROL.getControlValue(tag.Control.id, "bGroup");
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onTableOptionControlLeave} " + err.message);
            }
        },

        onDatePickerControlLeave: function (ctrl, data) {
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var obj = null;
            try {
                eleTd = DATEPICKER.getParent(ctrl).data;
                eleRow = eleTd.parentElement;

                eleBody = eleRow.parentElement;
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                DATEPICKER.setParent(ctrl, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("DATE");
                obj.CompareValue = FConvert.toInt(DATEPICKER.getDate(ctrl));
                obj.CompareText = DATEPICKER.getText(ctrl);
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onDatePickerControlLeave} " + err.message);
            }
        },

        onTimeControlLeave: function (ctrl, data) {
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var obj = null;

            try {
                eleTd = FTIMECONTROL.getParent(ctrl).data;
                eleRow = eleTd.parentElement;


                eleBody = eleRow.parentElement;
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                FTIMECONTROL.setParent(ctrl, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("TIME");
                obj.CompareValue = FConvert.toInt(FTIMECONTROL.getTime(ctrl));
                obj.CompareText = DATEPICKER.getText(ctrl);
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onTimeControlLeave} " + err.message);
            }
        },

        onStringListNumberListLeave: function (ele) {
            try {
                var eleRow = null;
                var eleCol = null;
                eleRow = ele.parentElement.parentElement;
                eleCol = eleRow.children[1];;
                obj = {};
                obj.DataType = FConvert.toInt(eleCol.children[0].getAttribute('data-datatype'));
                obj.CompareValue = ele.value;
                obj.CompareText = ele[ele.selectedIndex].innerHTML;
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
                ele.style.display = "none";
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onStringListNumberListLeave} " + err.message);
            }
        },

        onFormulaControlLeave: function (id, data, tag) {
            var eleContainer = null;
            var eleBody = null;
            var eleRow = null;
            var eleTd = null;
            var objUserData = null;
            var obj = null;
            try {
                var controlTextBox = document.getElementById(controlId + "_textbox");
                controlTextBox.value = document.getElementById(controlId + "_formulaText").value;
                document.getElementById(controlId).className = "form-group dropdown";
                eleTd = OPTIONCONTROL.getParent(tag.Control.id).data;
                eleRow = eleTd.parentElement;
                objUserData = FConvert.stringToObject(tag.UserData).data;
                eleBody = FILTER.ADVANCEFILTER.getRowContainer(objUserData.iFilterId, objUserData.iSubFilterId);
                eleContainer = FILTER.ADVANCEFILTER.getControlContainer(eleBody);
                OPTIONCONTROL.setParent(tag.Control, eleContainer);

                obj = {};
                obj.DataType = MasterDataType.get("MASTER");
                obj.CompareValue = FConvert.toInt(OPTIONCONTROL.getControlValue(tag.Control));
                if (tag.Data.length > 0) {
                    if (tag.Data[1].name != undefined) {
                        obj.CompareText = tag.Data[1].name;
                    }
                    else if (tag.Data[1].Name != undefined) {
                        obj.CompareText = tag.Data[1].Name;
                    }
                    else if (tag.Data[1].sname != undefined) {
                        obj.CompareText = tag.Data[1].sname;
                    }
                    else if (tag.Data[1].sName != undefined) {
                        obj.CompareText = tag.Data[1].sName;
                    }
                    else if (tag.Data[1].code != undefined) {
                        obj.CompareText = tag.Data[1].code;
                    }
                    else if (tag.Data[1].alias != undefined) {
                        obj.CompareText = tag.Data[1].alias;
                    }
                    obj.IsGroup = obj.IsGroup = OPTIONCONTROL.getControlValue(id, "bgroup");
                }
                else {
                    obj.CompareText = OPTIONCONTROL.getControlText(tag.Control);
                }
                FILTER.ADVANCEFILTER.setFieldValue(eleRow, obj, '');
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.onOptionControlLeave} " + err.message);
            }
        },

        SelectDateRange: function (element, iFilterId, iSubFilterId) {
            try {
                var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, '');
                var dateRangeTree = document.getElementById(FILTER.getFilterDateRangeTreeId(iFilterId, iSubFilterId));
                var filterFieldTxtbox = dateRangeTree.parentNode.children[0];
                filterFieldTxtbox.setAttribute("data-fieldId", element.id);
                filterFieldTxtbox.setAttribute("data-value", element.id);
                filterFieldTxtbox.setAttribute("data-datatype", element.textContent == "Name" ? FILTER.getDataType(arrDataFilterTree, element.dataset.parent) : element.dataset.datatype);
                filterFieldTxtbox.setAttribute("data-masterid", element.textContent == "Name" ? FILTER.getMasterId(arrDataFilterTree, element.dataset.parent) : element.dataset.masterid);
                filterFieldTxtbox.setAttribute("data-parent", element.dataset.parent);
                filterFieldTxtbox.setAttribute("data-subparent", element.dataset.subparent);
                filterFieldTxtbox.setAttribute("data-numberlist", element.dataset.numberlist);
                filterFieldTxtbox.setAttribute("data-tablename", element.dataset.tablename);
                filterFieldTxtbox.setAttribute("data-primaryfield", element.dataset.primaryfield);
                filterFieldTxtbox.setAttribute("data-displayfield", element.dataset.displayfield);
                filterFieldTxtbox.value = element.textContent;
                if (dateRangeTree.parentNode.className == "FAdvanceFilterField open")
                    dateRangeTree.parentNode.className = "FAdvanceFilterField";
                document.getElementById(FILTER.getControlDivId(sAdvanceFilterId)).appendChild(dateRangeTree);
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.SelectDateRange} " + err.message);
            }
        },

        selectValueField: function (element, iFilterId, iSubFilterId, sFrom) {
            try {
                bchange = true;
                var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId, sFrom);
                var filterFieldTxtbox = document.getElementById(FILTER.getFilterDataTreeId(iFilterId, iSubFilterId)).parentNode.children[0];
                var eleTd = null;
                eleTd = document.getElementById(FILTER.getFilterDataTreeId(iFilterId, iSubFilterId)).parentNode.parentNode.children[1];
                var fieldtype = FConvert.toInt(eleTd.children[0].getAttribute('data-datatype'));
                var fieldName = eleTd.children[0].value;
                var iValue1 = 0;
                var iValue2 = 0;
                switch (fieldtype) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                        iValue1 = 0;
                        break;
                    case 0:
                    case 8:
                        iValue1 = 1;
                        break;
                }

                switch (FConvert.toInt(element.dataset.datatype)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                        iValue2 = 0;
                        break;
                    case 0:
                    case 8:
                        iValue2 = 1;
                        break;
                }

                if (iValue1 != iValue2) {
                    var filterTree = document.getElementById(FILTER.getFilterTreeId(iFilterId, iSubFilterId));
                    if (filterTree.parentNode.className == "dropdown open")
                        filterTree.parentNode.className = "dropdown";
                    //document.getElementsByClassName(FILTER.ADVANCEFILTER.getAdvanceFilterClassName())[0].parentNode.appendChild(filterTree);
                    filterTree.style.display = "none";
                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgConditionAndCompareWithInvalid, "Error");
                    filterFieldTxtbox.removeAttribute("data-fieldId");
                    filterFieldTxtbox.removeAttribute("data-datatype");
                    filterFieldTxtbox.removeAttribute("data-masterid");
                    filterFieldTxtbox.removeAttribute("data-numberlist");
                    filterFieldTxtbox.removeAttribute("data-tablename");
                    filterFieldTxtbox.removeAttribute("data-primaryfield");
                    filterFieldTxtbox.removeAttribute("data-displayfield");
                    filterFieldTxtbox.value = "";
                    return;
                }
                if (fieldName == element.textContent) {
                    var filterTree = document.getElementById(FILTER.getFilterDataTreeId(iFilterId, iSubFilterId));
                    if (filterTree.parentNode.className == "dropdown open")
                        filterTree.parentNode.className = "dropdown";
                    //document.getElementsByClassName(FILTER.ADVANCEFILTER.getAdvanceFilterClassName())[0].parentNode.appendChild(filterTree);
                    filterTree.style.display = "none";
                    COMMON.prototype.showMessage(arrFilterResourceMsgs.msgConitionAndCompareFieldNotSame, "Error");
                    return;
                }
                if (element.textContent.indexOf("@") > -1) {
                    filterFieldTxtbox.value = element.textContent;
                }
                else {

                    filterFieldTxtbox.setAttribute("data-fieldId", element.id);
                    filterFieldTxtbox.setAttribute("data-datatype", element.textContent == "Name" ? FILTER.getDataType(arrDataFilterTree, element.dataset.parent) : element.dataset.datatype);
                    filterFieldTxtbox.setAttribute("data-masterid", element.textContent == "Name" ? FILTER.getMasterId(arrDataFilterTree, element.dataset.parent) : element.dataset.masterid);
                    filterFieldTxtbox.setAttribute("data-parent", (element.dataset.parent == element.dataset.subparent ? 0 : element.dataset.parent));
                    filterFieldTxtbox.setAttribute("data-subparent", element.dataset.subparent);
                    filterFieldTxtbox.setAttribute("data-numberlist", element.dataset.numberlist);
                    filterFieldTxtbox.setAttribute("data-tablename", element.dataset.tablename);
                    filterFieldTxtbox.setAttribute("data-primaryfield", element.dataset.primaryfield);
                    filterFieldTxtbox.setAttribute("data-displayfield", element.dataset.displayfield);
                    filterFieldTxtbox.setAttribute("data-sfilter", element.dataset.sFilter);
                    filterFieldTxtbox.value = element.textContent;
                }
                var filterTree = document.getElementById(FILTER.getFilterDataTreeId(iFilterId, iSubFilterId));
                if (filterTree.parentNode.className == "FAdvanceFilterField open")
                    filterTree.parentNode.className = "FAdvanceFilterField";
                document.getElementById(FILTER.getControlDivId(sAdvanceFilterId)).appendChild(filterTree);
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.selectValueField} " + err.message);
            }
        },

        getDataIndex: function (iFieldId, iSubParentId, arrData, sCompareText, sCompareValue, iOperator) {
            var iCounter = 0;
            var iTotal = 0;
            var objData = null;
            try {
                iTotal = FCommon.Array.getLength(arrData);
                if (iTotal < 1) {
                    return (-1);
                }

                var iCounters = -1;
                var iExists = 0;
                objData = arrData[0];
                for (iCounter = 0; iCounter < iTotal; iCounter++) {
                    objData = arrData[iCounter];
                    if (objData.FieldId == iFieldId && objData.SubParentId == iSubParentId && objData.Operator == iOperator) {
                        iExists = 1;
                        if (iCounters == -1) {
                            iCounters = iCounter;
                        }
                        else {
                            iCounters = iCounters + ',' + iCounter;
                        }
                    }
                }
                if (iExists == 1) {
                    return (iCounters);
                }
                if (iExists == -1) {
                    return (-1);
                }
            }
            catch (err) {
                alert("Exception: {FILTER.ADVANCEFILTER.getDataIndex} " + err.message);
            }
            return (-2);
        },

        // Internal
        getAdvanceFilterClassName: function () {
            return ("AdvanceFilter");
        },

        removeOptions: function (selectbox) {
            var i;
            for (i = selectbox.options.length - 1 ; i >= 0 ; i--) {
                selectbox.remove(i);
            }
        },

        onFilterInput_Change: function (eleInput, ifilterid, isubfilterid, event) {
            var sSelectedId = "";
            var sSearchText = "";
            var arrData = [];
            var param = null;
            var value = null;
            var bPatternFound = false;
            var sName = "";
            var objRawData = [];
            var containerid = document.getElementById("filterTree_" + ifilterid + "_" + isubfilterid + "_" + "AdvanceFilter");
            var eleinputs = containerid.children[0].children;

            try {
                sSearchText = eleInput.value;
                if (sSearchText == '' || sSearchText == undefined) {
                    return;
                }
                if (g_AdavncedFilterfields != "" || g_AdavncedFilterfields.length > 0) {

                    g_AdavncedFilterfields.style.backgroundColor = "";
                }

                //var eleinputs = document.getElementsByClassName('advancefilterinput');
                //if (eleinputs != null && eleinputs.length > 0) {
                //    for (var inputrow = 0; inputrow < eleinputs.length; inputrow++) {
                //        if (eleinputs[inputrow].textContent.toLowerCase().includes(sSearchText)) {
                //            //alert(inputrow);
                //            var eleContent = document.getElementById(eleinputs[inputrow].id);
                //            if (FCommon.UI.isValidObject(eleContent)) {
                //                eleInput.parentElement.className = 'FAdvanceFilterField open';
                //                eleContent.scrollIntoView();
                //            }
                //            break;
                //        }
                //    }
                //}
                //return;

                for (var i = 0; i < eleinputs.length; i++) {
                    if (eleinputs[i].tagName == "LI") {
                        if (eleinputs[i].children[1].tagName == "UL") {
                            for (var j = 0; j < eleinputs[i].children[1].children.length; j++) {
                                if (eleinputs[i].children[1].children[j].children[0].innerText.charAt(0).toLowerCase().includes(sSearchText.toLowerCase())) {
                                    eleinputs[i].children[1].children[j].children[0].style.backgroundColor = '#9ecaed';
                                    g_AdavncedFilterfields = eleinputs[i].children[1].children[j].children[0];
                                    eleinputs[i].children[1].style.display = "block";
                                    eleinputs[i].children[1].children[j].children[0].scrollIntoView();
                                    return;
                                }
                            }
                        }
                    }
                    else if (eleinputs[i].tagName = "A") {
                        eleinputs[i].innerText.charAt(0).toLowerCase().includes(sSearchText);
                        eleinputs[i].style.backgroundColor = '#9ecaed';
                        g_AdavncedFilterfields = eleinputs[i];
                        return
                    }
                }

                if (FCommon.String.isNullOrEmpty(sSearchText) == false) {
                    bPatternFound = true;
                    objRawData.push({
                        iFieldId: 0,
                        sName: "Fields",
                        bGroup: true,
                        iLevel: 0,
                        iParentId: 0,
                        iDataTypeId: 0,
                        iSequenceId: 0
                    });
                    for (iCounter = 0; iCounter < arrData.length; iCounter++) {
                        value = arrData[iCounter];
                        if (bPatternFound == true) {
                            if (value.iFieldId == 0) {
                                continue;
                            }
                            var strtext = value.sName;
                            if (strtext.toLowerCase().includes(sSearchText.toLowerCase())) {
                                sName = RD_ENTRY.FIELDTREE.getTreeTooltipText(value.iSequenceId);
                                if (RD_ENTRY.CUSTOMIZATION.isSearchTreeUniqueId(arrData, value.iFieldId, sName) == true) {
                                    objRawData.push({
                                        iFieldId: value.iFieldId,
                                        sName: sName, //RD_ENTRY.FIELDTREE.getTreeTooltipText(value.iSequenceId), // value.sName,
                                        bGroup: false,
                                        iLevel: 1,
                                        iParentId: value.iParentId,
                                        iDataTypeId: value.iDataTypeId,
                                        iSequenceId: value.iSequenceId
                                    });
                                }
                            }
                        }
                    }
                    arrData = objRawData;
                }
                //ends.
                param = {};
                param.arrTreeData = arrData;
                param.Parent = document.getElementById("id_rd_customization_tree_container");
                if (sSearchText == "") {
                    param.bCollapsed = true;
                }
                else {
                    param.bCollapsed = false;
                }
                param.bRootNodeSeparator = false;
                param.sElementIdPrefix = 'rd_customization_tree';
                param.fnDragStart = 'RD_ENTRY.onDrag_Handler';
                param.fnDblClick = 'RD_ENTRY.CUSTOMIZATION.addReportColumn';

                RD_ENTRY.FIELDTREE.createTreeNew(param);
            }
            catch (err) {
                COMMON.prototype.showMessage("{RD_ENTRY.CUSTOMIZATION.onReportColumnInput_Change} " + err.message, "Exception");
            }
        }
    },
    SearchDataInFilterTree: function (element, iFilterId, iSubFilterId) {

        try {
            var filterContainer = document.getElementById("FilterFields_" + iFilterId + "_" + iSubFilterId);
            var treeelements = filterContainer.children;
            var arrSearchFields = [];
            var groupname = "";
            var text = "";
            var childname = "";
            var eleInput = "";
            var parentdiv = null;
            var groupid = 0;
            var searchdivchildren = " ";
            var id = 0;
            var value = "";

            for (var count = 0; count < treeelements.length; count++) {
                if (treeelements[count].tagName == "LI") {
                    if (treeelements[count].children[0].tagName == "DIV") {
                        childname = treeelements[count].children[0].children[0].getAttribute("data-text");
                        id = treeelements[count].children[0].children[0].children[0].id
                        arrSearchFields.push({
                            ID: id, Value: childname, tag: groupid
                        });
                    }
                }
                else if (treeelements[count].tagName == "UL") {
                    var ulchildren = treeelements[count].children;
                    for (var i = 0; i < ulchildren.length; i++) {
                        if (ulchildren[i].parentElement.previousElementSibling.children[0].tagName == "A") {
                            groupname = ulchildren[i].parentElement.previousElementSibling.children[0].children[1].children[0].getAttribute("data-text")
                            groupid = ulchildren[i].parentElement.previousElementSibling.children[0].children[2].id;
                        }

                        childname = ulchildren[i].children[0].children[0].getAttribute("data-text");
                        id = ulchildren[i].children[0].children[0].children[0].id;
                        if (groupname == "") {
                            text = childname;
                        }
                        else {
                            text = groupname + "-" + childname;
                        }
                        arrSearchFields.push({
                            ID: id, Value: text, tag: groupid
                        });
                    }
                    groupname = "";
                    groupid = 0;
                }
            }
            if (document.getElementById("txtfiltersearch").value != null && document.getElementById("txtfiltersearch").value != "") {
                eleInput = document.getElementById("txtfiltersearch").value;
            }
            else {
                document.getElementById("FilterFields_" + iFilterId + "_" + iSubFilterId).style.display = "block";
                if (document.getElementById("searchDiv") != null) {
                    document.getElementById("searchDiv").style.display = "block";
                    document.getElementById("searchDiv").innerHTML = "";
                    document.getElementById("searchDiv").style.height = '0px';
                }

            }
            if (eleInput != "" && eleInput != null) {
                bsearch = true;
                filterContainer.style.display = "none";

                if (document.getElementById("FilterFieldCust_" + iFilterId + "_" + iSubFilterId).children[0].children[1].children[3] != undefined) {
                    if (document.getElementById("FilterFieldCust_" + iFilterId + "_" + iSubFilterId).children[0].children[1].children[3].id == "searchDiv") {
                        document.getElementById("searchDiv").innerHTML = "";
                    }
                } else {

                    var FilterFieldCust = document.getElementById("FilterFieldCust_" + iFilterId + "_" + iSubFilterId);
                    var ModelBody = FilterFieldCust.children[0].children[1];
                    parentdiv = document.createElement("div");
                    parentdiv.id = "searchDiv";
                    ModelBody.appendChild(parentdiv);
                }

                for (var j = 0; j < arrSearchFields.length; j++) {
                    if (j == 465) {
                        //alert('hi');
                    }
                    if (arrSearchFields[j].Value.toLowerCase().includes(eleInput.toLowerCase())) {
                        var div = document.createElement("div");
                        ///////////////////////
                        // div.append('<div class="row"><label class="containerr" style="float: left;margin:10px;">' + arrSearchFields[j].Value + '<input class="fchk" type="checkbox" data-FieldId="' + 1000 + '"/><span class="checkmark"></span></label></div>')
                        ////////////////////////
                        div.className = "row";
                        var label = document.createElement("label");
                        label.className = "containerr";
                        label.style.float = "left";
                        label.style.marginLeft = "12px";
                        label.setAttribute("data-text", arrSearchFields[j].Value);
                        label.setAttribute("data-groupid", arrSearchFields[j].tag);
                        div.appendChild(label);
                        var checkbox = document.createElement('input');
                        checkbox.type = "checkbox";
                        checkbox.className = "Fchkbox";
                        checkbox.value = arrSearchFields[j].Value;
                        checkbox.id = arrSearchFields[j].ID;
                        var span = document.createElement("span");
                        span.className = "checkmark";
                        label.appendChild(checkbox)
                        label.appendChild(document.createTextNode(arrSearchFields[j].Value));
                        label.appendChild(span)
                        if (parentdiv != null) {
                            parentdiv.appendChild(div);
                        } else {
                            document.getElementById("searchDiv").appendChild(div);
                        }
                    }
                }

                if (parentdiv == null && document.getElementById("searchDiv") != null) {
                    document.getElementById("searchDiv").style.display = "block";
                }

                FILTER.FilterTreeData(iFilterId, iSubFilterId); //getting checked filter values in filter tree 
                searchdivchildren = document.getElementById("searchDiv").children;

                for (var count = 0; count < FILTER.m_DefaultFields.length; count++) {
                    for (var count2 = 0; count2 < searchdivchildren.length; count2++) {
                        id = document.getElementById("searchDiv").children[count2].children[0].children[0].id;
                        value = document.getElementById("searchDiv").children[count2].children[0].getAttribute("data-groupid");
                        if (FILTER.m_DefaultFields[count].id == id & FILTER.m_DefaultFields[count].value == value) {
                            document.getElementById("searchDiv").children[count2].children[0].children[0].checked = true; // when filter tree values matching in search div fields then the checkbox is made true .
                        }
                    }
                }

                document.getElementById("searchDiv").className = 'col-lg-12';
                document.getElementById("searchDiv").style.overflow = 'auto';
                document.getElementById("searchDiv").style.height = "450px";
            }
        }
        catch (err) {
            alert("Exception: {FILTER.SearchDataInFilterTree} " + err.message);
        }
    },

    FilterTreeData: function (iFilterId, iSubFilterId, id, subparentid) {


        FILTER.m_DefaultFields = [];

        Fields = document.getElementById("FilterFields_" + iFilterId + "_" + iSubFilterId).children;

        for (var count = 0; count < Fields.length; count++) {
            if (!FCommon.UI.isValidObject(Fields[count])) {
                break;
            }
            parentTagName = Fields[count].tagName;
            if (parentTagName == 'LI') {
                tagName = Fields[count].children[0].children[0].tagName;
                if (tagName == 'LABEL') {
                    newchkbox = Fields[count].children[0].children[0].children[0];
                    if (newchkbox.checked == true) {
                        FILTER.m_DefaultFields.push({ id: newchkbox.id, value: 0 });
                    }
                    if (id != null && id != "") {
                        if (newchkbox.id == id) {
                            newchkbox.checked = true
                        }
                    }
                }
            }
            else if (parentTagName == 'UL') {
                var ele = Fields[count];

                if (FCommon.UI.isValidObject(ele.previousElementSibling) &&
                    FCommon.UI.isValidObject(ele.previousElementSibling.getElementsByTagName('input')) &&
                FCommon.UI.isValidObject(ele.previousElementSibling.getElementsByTagName('input')[0])) {
                    newSubParentId = ele.previousElementSibling.getElementsByTagName('input')[0].id;
                }
                for (var i = 0; i < ele.children.length; i++) {
                    if (ele.children[i].children[0].children[0].tagName == 'LABEL') {
                        newchkbox = ele.children[i].children[0].children[0].children[0];
                        if (newchkbox.checked == true) {
                            if (DataType.arrayFilterDataIndex(FILTER.m_DefaultFields, ["id", "value"], [newchkbox.id, newSubParentId], "==").length == 0) {
                                FILTER.m_DefaultFields.push({
                                    id: newchkbox.id, value: newSubParentId
                                });
                            }
                        }
                        if (id != "" && id != null && subparentid != "") {
                            if (newchkbox.id == id && newSubParentId == subparentid) {
                                newchkbox.checked = true
                            }
                        }
                    }
                }
            }
        }
        return FILTER.m_DefaultFields;

    },

    ValidateFilterText: function (element, event) {
        var isValid = false;
        var regExp = /^[0-9.,-]+$/;
        isValid = regExp.test(element.value);
        if (!isValid) {
            element.value = "";
        }

    },

    m_DefaultFields: []

}

var DATATYPE = {
    "Text": 0,
    "Number": 1,
    "Boolean": 2,
    "DateTime": 3,
    "Date": 4,
    "Time": 5,
    "Fraction": 6,
    "Picture": 7,
    "StringList": 8,
    "NumberList": 9,
    "DocumentViewer": 10,
    "UpdatedTime": 11,
    "Master": 12,
    "BigNumber": 13,
    "ExternalTable": 14,
    "SmallNumber": 15,
    "TinyNumber": 16
}

var DateRange = {
    CurrentMonth: 10,
    PreviousMonth: 11,
    NextMonth: 12,
    CurrentAndNextMonth: 13,
    CurrentAndPreviousMonth: 14,
    CurrentWeek: 15,
    PreviousWeek: 16,
    NextWeek: 17,
    CurrentAndNextWeek: 18,
    CurrentAndPreviousWeek: 19,
    Today: 20,
    Yesterday: 21,
    Tomorrow: 22,
    Previous7Days: 23,
    Previous30Days: 24,
    Previous60Days: 25,
    Previous90Days: 26,
    Next7Days: 27,
    Next30Days: 28,
    Next60Days: 29,
    Next90Days: 30,
    MonthToDate: 31,
    YearToDate: 32
}
;
var GetMasterTransAuthResourceMessages;
var priceBookCount;
var today;
var AllauthorizationDetails=[];
var GValidationMsg;
var TempArrayForKeepUnposted=[];
var scrollValue;
var LineWiseAuthorization;
var m_tableData;
var EmailHEader;
var SMS;
var DashBoard;
var AuthDesignAreaInnerHTML;
function hidePanel(element) {
    debugger
    if ($("#hdnPanelValue").val() == "0") {
        $("#hdnPanelValue").val('1');
        $("#AuthDesignArea").removeClass("col-xs-12 col-lg-10 col-md-10 col-sm-12");
        $("#AuthDesignArea").addClass("col-xs-12 col-lg-12 col-md-12 col-sm-12");
        $('#RightPanel').addClass("hidden");
        $('#spnHidePanel').css("display", "block");
        $('#AuthDesignArea').css("padding-right", "0px");
    }
    else {
        $("#hdnPanelValue").val('0');
        $("#AuthDesignArea").addClass("col-xs-12 col-lg-10 col-md-10 col-sm-12");
        $("#AuthDesignArea").removeClass("col-xs-12 col-lg-12 col-md-12 col-sm-12");
        $('#RightPanel').removeClass("hidden");
        $('#spnHidePanel').css("display", "none");
        $('#AuthDesignArea').css("padding-right", "2%")
    }
}
function getVoucherData(ele, eAuthType) {
    debugger
    $.ajax({

        url: GLOBAL.getContextPath("getVoucherList", "Authorization", "Masters"),
        type: "POST",
        dataType: "html",
        data: { term: ele.value, eAuthType: eAuthType },

        success: function (data) {

            if (data != null) {
                //debugger
                $("#id_Auth_menu").html("").html(data);
            }

        }
    });
}
var AuthDesignAreaInnerHTML = AuthDesignAreaInnerHTML;
GLOBAL.getnavigationHeader("id_div_heading");

var TransMasterAuthorizationHeight = {
    settingHeight: function () {
        debugger
        var VoucherMenu = document.getElementById("VoucherMenu");
        if (VoucherMenu != null) {
            VoucherMenu.style.height = ((GLOBAL.getPageHeight() - 200) - VoucherMenu.getBoundingClientRect().top) + "px";
            VoucherMenu.style.maxHeight = ((GLOBAL.getPageHeight() - 200) - VoucherMenu.getBoundingClientRect().top) + "px";
        }
        var AuthDesignAreaa = document.getElementById("AuthDesignArea");
        AuthDesignAreaa.style.height = ((GLOBAL.getPageHeight()) - AuthDesignAreaa.getBoundingClientRect().top + 45) + "px";
        var innerDivRightPanel = document.getElementById("innerDivRightPanel");
        innerDivRightPanel.style.height = ((GLOBAL.getPageHeight()) - innerDivRightPanel.getBoundingClientRect().top + 45) + "px";
    }
}

    function  Toggle_AuthDefTabs(ele, evt) {
    debugger

    FCommon.UI.stopKeyProcess(evt);

    var element = ele;// $(ele).find('a');
    //var anchor = $(ele).find('a')[0];
    var aPath = ele.href;//  $(ele).find('a')[0].href;
    var togglediv = aPath.split('#')[1];

    $('#AllContentsDiv').children().removeClass('active');
    $('#AllContentsDiv').children().removeClass('show');

    $('.AuthTabs,#collapsed').children().removeClass('active');
    $('.AuthTabs,#collapsed').children().removeClass('show');

    $('.AuthTabs li').find('a').removeClass('active');
    $('.AuthTabs li').find('a').removeClass('show');

    document.getElementById(togglediv).classList.add('active');
    document.getElementById(togglediv).classList.add('show');

    $(ele).addClass('show');
    $(ele).addClass('active');
    $("#ddlStatusUpdate").hide();
}


function VoucherClick(ctrl) {
    debugger
    if (ctrl != undefined) {
        TempArrayForKeepUnposted = [];
        AllauthorizationDetails = AllauthorizationDetails.splice(AllauthorizationDetails.length, 1);
        //if (bMasterAuthorization == undefined) {
        //    bMasterAuthorization = false;
        //}
        var eAuthType = $('#hdnAuthorizationType').val();
        var obj = ctrl.getAttribute("data-VoucherName")
        document.getElementById("txtDoc").value = obj;
        $('#txtDoc').attr('data-vouchertype', ctrl.getAttribute("data-VoucherType"));


        OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = ' + eAuthType + ' and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        OPTIONCONTROL.setFilter('CopyAuthorization', 'iAuthorizationType = ' + eAuthType + ' and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));

        //if (bMasterAuthorization == false) {
        //    OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = 2 and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        //}
        //else {
        //    OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = 1 and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        //}
        OPTIONCONTROL.setControlValue("ctrlAuthorizationH", "0");
        OPTIONCONTROL.setControlValue("CopyAuthorization", "0");
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationData", "Authorization", "Masters"), true, { authorizationId: "0", iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $('#hdnAuthorizationType').val() }, "JSON", false);
        authorizationFlowResult.data.bIsItSales == true ? $(".clsInventory").show() : $(".clsInventory").hide();
        if (ctrl.getAttribute("data-VoucherType") == "1" || ctrl.getAttribute("data-VoucherType") == "2") {
            $('.clsDivHideProperties').show();
            ctrl.getAttribute("data-VoucherType") == "1" ? $('.clsHideProperties').hide() : $('.clsHideProperties').show();
        }

        $("#id_Auth_menu").hide();
        //debugger;
        if (authorizationFlowResult.data.myActive) {
            $('#chkActive').prop("checked", true);
        }
        else {
            $('#chkActive').prop("checked", false);
        }
        $("#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        $('#id_StartNode').removeClass('grey').addClass('theme_color-inverse');
        $("#ctrlAuthorizationH").focus();
    }
}

$(document).click(function (e) {
    //debugger;
    if (FCommon.UI.isValidObject(document.getElementById("ddlStatusUpdate"))) {
        if (e.target.id == 'id_txtStatusUpdate') {
            if (document.getElementById("ddlStatusUpdate").style.display == "block") {
                document.getElementById("ddlStatusUpdate").style.display = "none";
            }
            else {
                document.getElementById("ddlStatusUpdate").style.display = "block";
            }
        }
        else {
            $("#ddlStatusUpdate").hide();
        }
    }
});
function getAuthDefPopup(element) {
   debugger
    if ($('#txtDoc').val() != "" && $('#txtDoc').attr('data-vouchertype') != null && $('#txtDoc').attr('data-vouchertype') != undefined && $('#ctrlAuthorizationH').val() != "") {
        var authorizationId = "0";
        if ($(element).hasClass('pull-left')) {
            $($(element).closest('.clsDivNode')).addClass('AddBlueColor theme_background-color');
        }        
        var stage = $('.AddBlueColor').attr('data-stage');
        var level = $('.AddBlueColor').attr('data-level');
        var nodeLength = $('.clsdivLevelFlow:visible').length;
        var SelectedNodes = document.querySelectorAll('[data-selected="1"]');
        //if (nodeLength > 0 && (SelectedNodes == null || SelectedNodes == undefined || SelectedNodes.length==0))
        //{
        //    COMMON.prototype.showMessage("Please select the node to add new level/Parallel definition");
        //    return;
        //}

        if (SelectedNodes != null && SelectedNodes.length > 0) {
            var NodeId = document.querySelectorAll('[data-selected="1"]')[0];
            if (NodeId != null) { 
                stage = $(NodeId).attr('data-stage');
                level = $(NodeId).attr('data-level');
            }
        }

        if (nodeLength > "0") {
            authorizationId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
        }
        var levelType = $(element).attr("data-content") == undefined ? "0" : $(element).attr("data-content");
        if (stage != undefined) {
            if (levelType == "0") {
                stage = stage;
                level = parseInt(level) + 1;
            }
            else {
                stage = parseInt(stage) + 1;
                level = level;
            }
        }
        else {
            stage = 0;
            level = 0;
        }
        if (parseInt(stage) >= 1 && $(element).hasClass('pull-left') && levelType == "0") {
            COMMON.prototype.showMessage("Only parallel node can be added to this node.");
            $(element).addClass("grey");
            $(element).css({ "pointer-events": "none" });
            return false;
        }
        //debugger;
        if ($("#hdnAuthorizationType").val() == "" || $("#hdnAuthorizationType").val() == "0") {
            var AuthType = $('#hdnAuthorizationName').val() == "Transaction" ? "2" : $('#hdnAuthorizationName').val() == "Masters" ? "1" : "3";
            $("#hdnAuthorizationType").val(AuthType);
        }
        if ($($(element).find('i')).hasClass('icon-player6')) {
            $('#id_StartNode').removeClass('grey').addClass('blue');
            $('.clsDivNode').removeClass('AddBlueColor theme_background-color');
        }
        var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("AuthDef_Partial", "Authorization", "Masters"), true, { VoucherId: $('#txtDoc').attr('data-vouchertype'), levelType: levelType, authorizationId: authorizationId, NodeStage: stage, NodeLevel: level, NodeType: levelType == "0" ? "Level" : "Stage", AuthorizationType: $("#hdnAuthorizationType").val() }, "HTML", false);
        //debugger;
        if (result.data != null) {
            $('#divAuthorization').hide();
            $('#divAuthDefPartial').html('').html(result.data);
            $('#id_AuthDef_popup').show();
            $("#ulAuthBtns").find('span').each(function () {
                $(this).addClass("grey").css({ "pointer-events": "none" });
            });
        }
        else {
            COMMON.prototype.showMessage("Error generating pop up");
        }
    }
    else {


        if ($('#txtDoc').attr('data-vouchertype') == null || $('#txtDoc').attr('data-vouchertype') == undefined) {
            COMMON.prototype.showMessage(getResourceValue("msgTD_DocType", GetMasterTransAuthResourceMessages));               // $('#txtDoc').val("");
            return false;
        }
        if ($('#txtDoc').val() == "") {
            COMMON.prototype.showMessage(getResourceValue("msgTD_DocType", GetMasterTransAuthResourceMessages));
            return false
        }
        if ($('#ctrlAuthorizationH').val() == "") {
            COMMON.prototype.showMessage(getResourceValue("msgAuthCantBlank", GetMasterTransAuthResourceMessages));
            return false;
        }
        return false;
    }
}
var g_DeletedNode = 0;
function ctrlAuthorizationLeave() {
    debugger
    m_tableData = [];
    DeletedAuthorizationDetailsIds = [];
    var authorizationId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
    var bMasterAuthorization = $("#hdnAuthorizationName").val().trim() == "Transaction" ? false : true;
    if ($("#CopyAuthorization").val() != "" && authorizationId == 0) {
        return true;
    }
    if ($("#txtDoc").attr("data-VoucherType") != null && $("#txtDoc").attr("data-VoucherType") != "" && $("#txtDoc").attr("data-VoucherType") != undefined) {
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationFlow", "Authorization", "Masters"), true, { authorizationId: authorizationId, iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $("#hdnAuthorizationType").val() }, "JSON", false);

        if (authorizationId > 0) {
            document.getElementById("CopyAuthorization").disabled = true;
            $("#CopyAuthorization").val("");
            OPTIONCONTROL.setControlValue("CopyAuthorization", 0)
        }
        else {
            if (authorizationFlowResult.data != null && authorizationFlowResult.data.lstAuthorizationMasterTrans != null && authorizationFlowResult.data.lstAuthorizationMasterTrans.length > 0) {
                for (var i = 0; i < authorizationFlowResult.data.lstAuthorizationMasterTrans.length; i++) {
                    if (authorizationFlowResult.data.lstAuthorizationMasterTrans[i].DocumentId == $("#txtDoc").attr("data-VoucherType")) {
                        document.getElementById("CopyAuthorization").disabled = false;
                        break;
                    }
                    else {
                        document.getElementById("CopyAuthorization").disabled = true;
                    }

                }
            }

            else {
                document.getElementById("CopyAuthorization").disabled = true;
            }


        }


        if (authorizationFlowResult.data.myActive) {
            $('#chkActive').prop("checked", true);
        }
        else {
            $('#chkActive').prop("checked", false);
        }
        if (authorizationId != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
            DATEPICKER.setDate("dpAffectedDate", authorizationFlowResult.data.myAuthorizationMasterTrans.EffectiveDate);
        }
        else {
            DATEPICKER.setDate("dpAffectedDate", today);

        }
        $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        $('#spndeleteProfile').removeClass('grey');
        $('#spndeleteProfile').css({ "pointer-events": "auto" });
        if ($("#txtDoc").attr("data-VoucherType") != undefined && authorizationId != null) {//&& authorizationId != "0"


            if (authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
                // g_DeletedNode++;
                getAuthorizationWorkFlow(authorizationFlowResult, false);
                var OptionControlData = OPTIONCONTROL.getControlData('ctrlAuthorizationH');
                if (OptionControlData[3].exist == "1") {
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').addClass('grey');
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "none" });
                } else {
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').removeClass('grey');
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "auto" });
                }
            }
            else {
                $('#spndeleteProfile').addClass('grey');
                $('#spndeleteProfile').css({ "pointer-events": "none" });
            }
        }
        else {
            $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
            $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
            // DeletedAuthorizationDetailsIds = [];
            // AuthorizationDetails[];
            //AuthorizationDetails.ListAuthorizationUserSelection[];
        }
    }
    if (GValidationMsg != "") {
        COMMON.prototype.showMessage(GValidationMsg);
        GValidationMsg = "";
    }
}
function RemoveLevel(ele) {
    // //debugger
    var stage = $($($(ele).closest('.clsdivLevelFlow')).find('.clsDivNode')).attr('data-stage');
    var level = $($($(ele).closest('.clsdivLevelFlow')).find('.clsDivNode')).attr('data-level');
    if (stage == "0" && level == "0") {
        COMMON.prototype.showMessage(getResourceValue("msgcannotdeleteatLevelZero", GetMasterTransAuthResourceMessages));
        return false;
    }
    if (confirm(getResourceValue("msgWouldyouliketodeletetheselectednode", GetMasterTransAuthResourceMessages))) {
        g_DeletedNode++;
        var authdetailid = $($(ele).closest('.clsdivLevelFlow')).attr('data-authorizationdetailid');
        DeletedAuthorizationDetailsIds.push(parseInt(authdetailid));
        $(ele).closest('.clsdivLevelFlow').remove();
        if ($('.clsdivLevelFlow').length == "1") {
            $($('#tblNodeBody').find('.divStopNode')).remove();
        }

        var authorizationEditResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("DeleteNode", "Authorization", "Masters"), true, { stage: stage, level: level, AuthDetailsId: authdetailid }, "JSON", false);
        if (authorizationEditResult.data != null && authorizationEditResult.lValue == "1") {
            getAuthorizationWorkFlow(authorizationEditResult, true);
        }
        else {
            COMMON.prototype.showMessage("Error in deleting node");
            return false;
        }
    }
}
function AuthorizationEdit(ele) {
     //debugger
    if (!$(ele).hasClass("clsdivLevelFlow")) {
        ele = $(ele).closest('.clsdivLevelFlow');
    }
    var authID = $(ele).attr('data-authorizationdetailid');
    if (authID != undefined && $('#ctrlAuthorizationH').val() != "") {
        SelectedNode(ele);
        var stage = $('.AddBlueColor').attr('data-stage');
        var level = $('.AddBlueColor').attr('data-level');
        var authorizationEditResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationEdit", "Authorization", "Masters"), true, { authorizationDtsId: authID, NodeStage: stage, NodeLevel: level, NodeType: "none", AuthorizationType: $("#hdnAuthorizationType").val() }, "HTML", false);
        // //debugger
        if (authorizationEditResult.data != null && authorizationEditResult.data != "") {
            $('#divAuthorization').hide();
            $('#divAuthDefPartial').html('').html(authorizationEditResult.data);
            $('#id_AuthDef_popup').show();
            //  //debugger
            if (TempArrayForKeepUnposted.length > 0) {
                for (var i = 0; i < TempArrayForKeepUnposted.length; i++) {
                    $("#" + TempArrayForKeepUnposted[i].id).attr("checked", TempArrayForKeepUnposted[i].bCheck);
                }
            }
            $("#ulAuthBtns").find('span').each(function () {
                $(this).addClass("grey").css({ "pointer-events": "none" });
            });
        }
        else if (authorizationEditResult.data == "") {
            COMMON.prototype.showMessage("Please Load Authorization flow Again");
        }
        else {
            COMMON.prototype.showMessage("Error generating pop up");
        }
    }
    else {
        COMMON.prototype.showMessage(getResourceValue("msgAuthCantBlank", GetMasterTransAuthResourceMessages));
        return false;
    }

}
var DeletedAuthorizationDetailsIds = [];
function saveAuthorizationFlow(element) {
    debugger
    var arrAuthorizationDetails = [];
    var arrDeletedAuthorizationDetailsIds = DeletedAuthorizationDetailsIds;
    var arrDeletedEscalationIds = []; var arrLevel = [];
    var arrDeletedUserSelectionIds = [];
    var KeepUnpostedInitialRejectionValue = 0;
    if ($('#hdnAuthorizationName').val() == "Transaction") {
        if ($('#chkFinancialAccountingMain').is(":checked")) {
            KeepUnpostedInitialRejectionValue += 1;
        }
        if ($('#chkInventoryMain').is(":checked")) {
            KeepUnpostedInitialRejectionValue += 2;
        }
        if ($('#chkBaseLinkMain').is(":checked")) {
            KeepUnpostedInitialRejectionValue += 4;
        }
        if ($('#chkLinksMain').is(":checked")) {
            KeepUnpostedInitialRejectionValue += 8;
        }
        if ($('#chkReferencesMain').is(":checked")) {
            KeepUnpostedInitialRejectionValue += 16;
        }
        if ($('#chkReservationMain').is(":checked")) {
            KeepUnpostedInitialRejectionValue += 32;
        }
    }
    else {
        KeepUnpostedInitialRejectionValue = parseInt($('#ddlAuthStatus').val());
    }

    var authorizationName = OPTIONCONTROL.getControlText('ctrlAuthorizationH').trim();
    if (authorizationName != "" && $('.clsdivLevelFlow').length > 1 && authorizationName != getResourceValue("msgAddNewAuthorizationFlow", GetMasterTransAuthResourceMessages)) {
        var objAuthorizationMasterTrans = {
            AccountTypeSelected: null,
            ActionOnInitialRejectionSuspendedMrpData: false,
            ActionOnInitialRejectionSuspendedVendorData: false,
            Active: $("#chkActive").is(":checked") ? true : false,
            Alwaysauthorizationstartsfromfirstlevel: $("#chkAlwaysauthorizationstartsfromfirstlevel").is(":checked") ? true : false,
            AuthorizationDetails: arrAuthorizationDetails,
            AuthorizationId: OPTIONCONTROL.getControlValue('ctrlAuthorizationH'),
            AuthorizationName: authorizationName,
            AuthorizationType: $('#hdnAuthorizationType').val(),
            CreatedBy: '0',
            CreatedDate: '0',
            DeletedAuthorizationDetailsIds: arrDeletedAuthorizationDetailsIds,
            DeletedEscalationIds: arrDeletedEscalationIds,
            DeletedUserSelectionIds: arrDeletedUserSelectionIds,
            DocumentId: $('#txtDoc').attr('data-vouchertype'),
            EditedFrom: false,
            EffectiveDate: DATEPICKER.getDate("dpAffectedDate"),
            KeepUnpostedFinalStatus: "0",
            KeepUnpostedInitialRejection: KeepUnpostedInitialRejectionValue,
            KeepUnpostedInitialStatus: "0",
            KeepUnpostedInitialSuspendCreditLimit: $('#chkSuspendCreditLimit').is(":checked") ? true : false,
            LocationId: "0",
            MarkDeleted: false,
            ModifiedBy: "0",
            ModifiedDate: "0"
        }
        $(".clsSpnLevelCheck").each(function () {
            if ($($(this).find("input[type=checkbox]")).is(":checked")) {
                var allLevel = $($(this).closest(".clsDivNode")).attr("data-level");
                arrLevel.push(parseInt(allLevel));
            }
        });


        if (AllauthorizationDetails != null && AllauthorizationDetails.length > 0) {
            for (var i = 0; i < AllauthorizationDetails.length ; i++) {
                if (objAuthorizationMasterTrans.AuthorizationId > 0) {
                    if (AllauthorizationDetails[i].AuthorizationId != objAuthorizationMasterTrans.AuthorizationId) {
                        if ($("#chkActive").is(":checked") && AllauthorizationDetails[i].EffectiveDate == objAuthorizationMasterTrans.EffectiveDate) {
                            COMMON.prototype.showMessage(getResourceValue("msgValidationForEffectiveDate", GetMasterTransAuthResourceMessages));
                            return false;
                        }

                    }
                }
                else {
                    if ($("#chkActive").is(":checked") && objAuthorizationMasterTrans.EffectiveDate <= AllauthorizationDetails[i].EffectiveDate) {
                        COMMON.prototype.showMessage(getResourceValue("msgValidationForEffectiveDate", GetMasterTransAuthResourceMessages));
                        return false;
                    }
                }
            }
        }




        //if ($('#hdnEffectiveDate').val() != "" && objAuthorizationMasterTrans.EffectiveDate <= $('#hdnEffectiveDate').val()&& $("#chkActive").is(":checked") &&  $('#hdnActiveAuthName').val() != authorizationName)
        //{
        //    COMMON.prototype.showMessage("Effective date should  be greater than the previous authorization flow effective date. ");
        //  return false;
        //}

        //if ($('#hdnActiveAuthName').val() != "" && parseInt($("#hdnActiveAuthName").attr("data-documentid")) == parseInt(objAuthorizationMasterTrans.DocumentId) && $('#hdnActiveAuthName').val() != authorizationName && $("#chkActive").is(":checked")) {

        //    if (confirm($('#hdnActiveAuthName').val() + " is already Activated , do you want '" + authorizationName + "' to Activate?")) {
        //        objAuthorizationMasterTrans.Active = true;
        //        var AuthorizationSave = NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveAuthorizationFlow", "Authorization", "Masters"), true, { objAuthorizationMasterTrans: objAuthorizationMasterTrans, arrLevel: arrLevel }, "JSON", true, "AuthorizationSaveSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //    }
        //}

        //else {
        var AuthorizationSave = NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveAuthorizationFlow", "Authorization", "Masters"), true, { objAuthorizationMasterTrans: objAuthorizationMasterTrans, arrLevel: arrLevel }, "JSON", true, "AuthorizationSaveSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //}
    }
    else {
        if ($("#txtDoc").val() == "") {
            var strMessage = $('#hdnAuthorizationName').val() == "Transaction" ? "msgSelectDoc" : $('#hdnAuthorizationName').val() == "Pricebook" ? "msgSelectPriceBook" : "SelectMaster";
            COMMON.prototype.showMessage(getResourceValue(strMessage, GetMasterTransAuthResourceMessages));
        }
        else if (authorizationName == "") {
            COMMON.prototype.showMessage(getResourceValue("msgAuthCantBlank", GetMasterTransAuthResourceMessages));
            $('#ctrlAuthorizationH').focus().select();
        }
        else if ($('.clsdivLevelFlow').length == "1") {
            COMMON.prototype.showMessage(getResourceValue("msgCreateAuthorizationbeforesaving", GetMasterTransAuthResourceMessages));
        }

        return false;
    }
}
function AuthorizationSaveSuccess(bflag, data) {
    debugger
    AllauthorizationDetails = AllauthorizationDetails.splice(AllauthorizationDetails.length, 1);
    if (bflag == true && data == "") {
        var authorizationtype = $('#hdnAuthorizationType').val();// == "Transaction" ? 2 : 1;
        g_DeletedNode = 0;
        OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = ' + authorizationtype + ' and  iDocumentId =' + $('#txtDoc').attr("data-VoucherType"));
        OPTIONCONTROL.setControlValue("ctrlAuthorizationH", "0");
        OPTIONCONTROL.setFilter('CopyAuthorization', 'iAuthorizationType = ' + authorizationtype + ' and  iDocumentId =' + $('#txtDoc').attr("data-VoucherType"));
        OPTIONCONTROL.setControlValue("CopyAuthorization", "0");
        var isMasterAuthorization = $('#hdnAuthorizationName').val() == "Transaction" ? false : true;
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationFlow", "Authorization", "Masters"), true, { authorizationId: "0", iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $('#hdnAuthorizationType').val() }, "JSON", false);
        if (authorizationFlowResult.data != null) {
            // //debugger
            if (authorizationFlowResult.data.lstAuthorizationMasterTrans != null) {
                for (var count = 0; count < authorizationFlowResult.data.lstAuthorizationMasterTrans.length; count++) {
                    if (authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId == $("#txtDoc").attr("data-VoucherType")) {
                        var Authdetail = {
                            AuthorizationId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationId,
                            AuthorizationName: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationName,
                            DocumentId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId,
                            EffectiveDate: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].EffectiveDate,
                        }
                        AllauthorizationDetails.push(Authdetail);
                    }
                    else {
                        AllauthorizationDetails = [];

                    }
                }
            }
            else {
                AllauthorizationDetails = [];
            }
            //$("#hdnActiveAuthName").val(authorizationFlowResult.data[1] != null ? authorizationFlowResult.data[1].AuthorizationName : "");
            //$("#hdnActiveAuthName").attr("data-documentid", authorizationFlowResult.data[1].DocumentId);
            $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
            $('.clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel,#chkActive').prop('checked', false);
            DATEPICKER.setDate("dpAffectedDate", today);

            $('#ddlAuthStatus').val('0');
            //if (OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == null || OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == "0") {
            //    OPTIONCONTROL.setControlText("ctrlAuthorizationH", "Add New Authorization Flow");
            //}
        }
        $("#id_Auth_menu").hide();
        COMMON.prototype.showMessage(getResourceValue("msgAuthorizationSave", GetMasterTransAuthResourceMessages));
        //if(authorizationtype == 3)
        //    NETWORK.executeServerMethod(GLOBAL.getContextPath("PricebookAuthorization", "Authorization", "Masters"), true,{ iMenuId : 235, iTypeId : 6}, "HTML", true, "SucessPriceBookReLoad", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
    else {
        if (data != "") {
            GValidationMsg = data;
        }
        ctrlAuthorizationLeave();
    }
}
function SucessPriceBookReLoad(flag, data) {
    //debugger
    $("#page_Content").html('');
    $("#page_Content").html(data);
}
function SelectedNode(ele) {
    debugger
    $('.clsDivNode').removeClass("AddBlueColor ");
    $($(ele).find('div')[1]).addClass("AddBlueColor ");
    //$('#id_StartNode').removeClass('blue').addClass('grey');
    if ($($(ele).find('div')[1]).attr('data-stage') != "0") {
        $('#spnAddLevel').css({ 'pointer-events': 'none' });
        $('#spnAddLevel').addClass('grey');
    }
    else {
        $('#spnAddLevel').css({ 'pointer-events': 'auto' });
        $('#spnAddLevel').removeClass('grey');
    }
}
function deleteProfile() {
    // //debugger
    var authDetailsId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
    var bMasterAuthorization = $("#hdnAuthorizationName").val().trim() == "Transaction" ? false : true;
    if (authDetailsId != "0") {
        if (confirm(getResourceValue("msgAuthDeleteSure", GetMasterTransAuthResourceMessages))) {
            if (authDetailsId != "0") {
                var DeleteAuthorizationResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("DeleteAuthorizationProfile", "Authorization", "Masters"), true,
                    { eAuthoriztionType: $('#hdnAuthorizationType').val(), iAuthorizationId: authDetailsId }, "JSON", true, "DeleteAuthorizationProfileSucess", "", "");
            }
        }
        else {
            return false;
        }
    }
}

function DeleteAuthorizationProfileSucess(bSuccess, Data) {
    //debugger
    if (bSuccess == true && Data == "") {
        $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
        //$('#txtDoc,#ctrlAuthorizationH').val("");
        //$('#txtDoc').attr({ "data-vouchertype": "" });
        OPTIONCONTROL.clear("ctrlAuthorizationH");
        DATEPICKER.setDate("dpAffectedDate", today);

        //if (OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == null || OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == "0") {
        //    OPTIONCONTROL.setControlText("ctrlAuthorizationH", "Add New Authorization Flow");
        //}
        COMMON.prototype.showMessage(getResourceValue("msgAuthorizationDelete", GetMasterTransAuthResourceMessages));
    }
    else {
        COMMON.prototype.showMessage("Error in deleting Authorization. " + Data);
        return false;
    }
}


function ClearAuthorization() {
    debugger
    $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
    OPTIONCONTROL.setControlValue("ctrlAuthorizationH", "0");
    $("#ctrlAuthorizationH").val("");
    OPTIONCONTROL.setControlValue("CopyAuthorization", "0");
    $("#CopyAuthorization").val("");
    if ($("#ctrlAuthorizationH").val() == "") {
        document.getElementById("CopyAuthorization").disabled = false;
    }
    // $('#txtDoc').val("") ;
    //  $('#txtDoc').removeAttr('data-vouchertype');
    var ClearAuthorizationProfileResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("ClearAuthorizationProfile", "Authorization", "Masters"), true, {}, "JSON", true);
    // $('#txtDoc').attr({ "data-vouchertype": "" });
    $("#chkActive,.clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
    DATEPICKER.setDate("dpAffectedDate", today);

    DeletedAuthorizationDetailsIds = [];
}
function getAuthorizationWorkFlow(authorizationFlowResult, bDeleteAuthorization) {
    //debugger
    AllauthorizationDetails = AllauthorizationDetails.splice(AllauthorizationDetails.length, 1);

    if (bDeleteAuthorization == false) {
        if (authorizationFlowResult.data.lstAuthorizationMasterTrans != null) {
            for (var count = 0; count < authorizationFlowResult.data.lstAuthorizationMasterTrans.length; count++) {
                if (authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId == $("#txtDoc").attr("data-VoucherType")) {
                    var Authdetail = {
                        AuthorizationId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationId,
                        AuthorizationName: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationName,
                        DocumentId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId,
                        EffectiveDate: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].EffectiveDate,
                    }
                    AllauthorizationDetails.push(Authdetail);
                }
                else {
                    AllauthorizationDetails = [];

                }

            }
        }
        else {
            AllauthorizationDetails = [];

        }

        authorizationFlowResult.data = authorizationFlowResult.data.myAuthorizationMasterTrans;
    }
    $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
    if ($("#hdnPanelValue").val() == "1") {
        $('#spnHidePanel').css("display", "block");
    }
    else {
        $('#spnHidePanel').css("display", "none");
    }
    if (authorizationFlowResult.data.AuthorizationDetails != null) {
        $('#hdnAuthorizationType').val(authorizationFlowResult.data.AuthorizationType);
        for (var i = 0; i < authorizationFlowResult.data.AuthorizationDetails.length; i++) {
            var divLevelFlow = $('#divLevelFlow').clone();
            var row = authorizationFlowResult.data.AuthorizationDetails[i].Stage;
            var col = authorizationFlowResult.data.AuthorizationDetails[i].Level;

            if (parseInt(row) >= 4) {
                //   //debugger
                var tdhtml = "";
                var tdLen = $('#tblNodeBody').find('tr')[0].cells.length;
                for (var iColLen = 0; iColLen < tdLen; iColLen++) {
                    tdhtml = tdhtml + '<td></td>';
                }
                var dRow = '<tr>' + tdhtml + '</tr>'
                $('#tblNodeBody').append(dRow);
            }
            if (parseInt(col) >= 4) {
                //  //debugger
                var trLen = $('#tblNodeBody').find('tr').length;
                for (var iRowLen = 0; iRowLen < trLen; iRowLen++) {
                    $($('#tblNodeBody').find('tr')[iRowLen]).append('<td></td>');
                }
            }


            $($($('#tblNodeBody').find('tr')[row]).find('td')[col]).html(divLevelFlow)
            //  $($('#AuthDesignArea').find('div.container')).append(divLevelFlow);
            var currentCell = $($('#tblNodeBody').find('tr')[row]).find('td')[col];
            $(currentCell).find('.clsdivLevelFlow').removeClass("hidden");
            if (parseInt(authorizationFlowResult.data.AuthorizationDetails[i].Stage) >= 1) {
                // $(currentCell).find('.clsArrowChange').toggleClass("icon-line-arrow glyphicon-arrow-down");
                $(currentCell).find('.clsSpnLevelCheck').hide();
                if ($("#hdnLanguageId").val() == "1") {
                    $($($(currentCell).find('.clsArrowChange')).closest('span')).css({ "transform": "rotate(-90deg)" });
                    $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-right": "22%" });
                } else {
                    $($($(currentCell).find('.clsArrowChange1')).closest('div')).css({ "transform": "rotate(90deg)" });
                    $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "position": "relative","top":"10px" });
                   // $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-left": "18%" });
                }
                
                $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "text-align": "center" });
                $($($(currentCell).find('.clsdivLevelFlow')).find('div')[0]).css({ "width": "100px","height":"20px","position":"relative","top":"39px", "left":"85px"});

                //impline$(currentCell).find('.clsDivNode').css({ "width": "35px", "height": "35px", "position": "relative", "left": "9px", "top": "76px", "margin-top": "13px" });


                $(currentCell).find('.clsDivNode').css({ "width": "35px", "height": "35px", "margin-left": "70%", "margin-top": "50%"});

            }
            if (col == 0)
            {
                //NodeIcon
                $(currentCell).find('.NodeIcon').addClass('icon-report-1');
            }
            if (col == 1)
            {
                $(currentCell).find('.NodeIcon').addClass('icon-inventory');
            }
            if (col == 2) {
                $(currentCell).find('.NodeIcon').addClass('icon-inventory-1');
            }
            if (col == 3) {
                $(currentCell).find('.NodeIcon').addClass('icon-loadform');
            }
            if (col == 4) {
                $(currentCell).find('.NodeIcon').addClass('icon-masterdocument');
            }
            if (row == 0 && col == 0)
            {
                $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "display": "none"});
            }

            //$('.clsdivLevelFlow:last').removeClass("hidden"); clsArrowChange
            var len = $('#AuthDesignArea').find('.clsdivLevelFlow:visible').length;
            //   //debugger
            $(currentCell).find('.clsdivLevelFlow').attr('id', "divLevel" + len);
            $(currentCell).find('.clsSpnLevelCheck').attr('id', "chkLevelCheck" + len);
            //    $($('.clsdivLevelFlow:last').find('label')[0]).text('').text('Level ' + len);
            $(currentCell).find('.clsdivLevelFlow').attr('data-authorizationdetailid', authorizationFlowResult.data.AuthorizationDetails[i].AuthorizationDetailId);
            $($($(currentCell).find('.clsdivLevelFlow')).find('div')[1]).attr({ "data-level": authorizationFlowResult.data.AuthorizationDetails[i].Level, "data-stage": authorizationFlowResult.data.AuthorizationDetails[i].Stage })
            if (authorizationFlowResult.data.AuthorizationDetails[i].Condition == null) {
                authorizationFlowResult.data.AuthorizationDetails[i].Condition = "";
            }
            $(currentCell).find('.clsDivAuthorizationName').prop("title", "Condition:" + authorizationFlowResult.data.AuthorizationDetails[i].Condition);
            $($(currentCell).find('.clsDivAuthorizationName')).find('label').text(authorizationFlowResult.data.AuthorizationDetails[i].Description);
            $($(currentCell).find('.clsDivAuthorizationName')).find('label').prop("title", authorizationFlowResult.data.AuthorizationDetails[i].Description);
            (authorizationFlowResult.data.AuthorizationDetails[i].AllinLevel == true) ? $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", true) : $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", false);
        }
        //     $($($('#tblNodeBody').find('tr')[0]).children()).each(function (index) { AllinLevel
        //  //debugger
        var lastNode = $($('#tblNodeBody').find('tr')[0]).find('.clsdivLevelFlow:last');
        var level = $($(lastNode).find('div')[1]).attr("data-level");
        var divLevelStop = $('.divStopNode').clone();
        var td = $($('#tblNodeBody').find('tr')[0]).find('td')[parseInt(level) + 1];
        $(td).html(divLevelStop);
        $(td).addClass("clsTdEnd");
        $($(td).find('.divStopNode')).removeClass("hidden");
        $($($('#tblNodeBody').find('tr')[0]).find('td:first')).find(".clsArrowChange").addClass("icon-font1");
        $($($('#tblNodeBody').find('tr')[0]).find('td.clsTdEnd')).find(".clsArrowChange").addClass("icon-font1");
        $(".clsArrowChange:not(.icon-font1)").css({ "font-size": "56px" });
        $(".clsArrowChange:not(.icon-font1)").addClass('grey');
        $($($($('#tblNodeBody').find('tr')[0]).find(".clsArrowChange:not(.icon-font1)")).closest('div')).css({ "padding-top": "5px" });

        //   COMMON.prototype.showMessage(authorizationFlowResult.data.AuthorizationName)
        //if(!bDeleteAuthorization){
        //    $('#tblNodeBody').find('tr').each(function () {
        //        $(this).find('td').each(function(){
        //            if($(this).text().trim()=="" && !$(this).hasClass('clsTdEnd')){
        //                $(this).remove();
        //            }
        //        });
        //    });
        //}
        //  }
        (authorizationFlowResult.data.KeepUnpostedInitialSuspendCreditLimit == true) ? $('#chkSuspendCreditLimit').prop('checked', true) : $('#chkSuspendCreditLimit').prop('checked', false);
        (authorizationFlowResult.data.Active == true) ? $("#chkActive").prop("checked", true) : $("#chkActive").prop('checked', false);
        (authorizationFlowResult.data.Alwaysauthorizationstartsfromfirstlevel == true) ? $("#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", true) : $("#chkAlwaysauthorizationstartsfromfirstlevel").prop('checked', false);
        // //debugger
        if (authorizationFlowResult.data.KeepUnpostedInitialRejection > "0") {
            if (authorizationFlowResult.data.AuthorizationType == "2") {
                var arriKeepUnpostedArr = [];
                var iKeepUnposted = parseInt(authorizationFlowResult.data.KeepUnpostedInitialRejection);
                for (var i = 0; i < 6; i++) {
                    arriKeepUnpostedArr[i] = iKeepUnposted % 2;
                    iKeepUnposted = Math.floor(iKeepUnposted / 2);
                }
                (arriKeepUnpostedArr[0] == "1") ? $('#chkFinancialAccountingMain').prop("checked", true) : $('#chkFinancialAccountingMain').prop("checked", false);
                (arriKeepUnpostedArr[1] == "1") ? $('#chkInventoryMain').prop("checked", true) : $('#chkInventoryMain').prop("checked", false);
                (arriKeepUnpostedArr[2] == "1") ? $('#chkBaseLinkMain').prop("checked", true) : $('#chkBaseLinkMain').prop("checked", false);
                (arriKeepUnpostedArr[3] == "1") ? $('#chkLinksMain').prop("checked", true) : $('#chkLinksMain').prop("checked", false);
                (arriKeepUnpostedArr[4] == "1") ? $('#chkReferencesMain').prop("checked", true) : $('#chkReferencesMain').prop("checked", false);
                (arriKeepUnpostedArr[5] == "1") ? $('#chkReservationMain').prop("checked", true) : $('#chkReservationMain').prop("checked", false);
            }
            else {
                $('#ddlAuthStatus').val(authorizationFlowResult.data.KeepUnpostedInitialRejection);
            }
        }

    }
}

function ShowPopOver(ele,event)
{
    debugger
    var v = $(ele).closest('.clsDivNode');
    if (v != null && v.length > 0)
    {
       
        $(".popover__content").addClass('hide');
        $(".clsDivNode").css({ "border-color": "grey" });
        $(".clsDivNode").attr('data-selected',0);
        $(v[0]).css({ "border-color": "#44799b" });
        $(v[0]).find('.NodeIcon').css({ "color": "rgb(68, 121, 155)" });
        $(v[0]).attr('data-selected', 1);
    }
    $(ele).next().removeClass('hide');
    FCommon.UI.stopKeyProcess(event);
}

function ShowGridContext(ele, event,ofset) {
    debugger
    
    $("#GridContext").removeClass('hide');
    var positions = setContextMenuPostionGrid(event, document.getElementById('GridContext'));
    $("#GridContext").css('bottom', positions.x);
    $("#GridContext").css('left', positions.y);
    $("#GridContext").css('top', ofset);
    FCommon.UI.stopKeyProcess(event);
}
function setContextMenuPostionGrid(event, contextMenu) {
    contextMenu = $(contextMenu);
    var mousePosition = {};
    var menuPostion = {};
    var menuDimension = {};

    menuDimension.x = contextMenu.outerWidth();
    menuDimension.y = contextMenu.outerHeight();
    mousePosition.x = event.pageX;
    mousePosition.y = event.pageY;

    if (mousePosition.x + menuDimension.x > $(window).width() + $(window).scrollLeft()) {
        menuPostion.x = mousePosition.x - menuDimension.x;
    } else {
        menuPostion.x = mousePosition.x;
    }

    if (mousePosition.y + menuDimension.y > $(window).height() + $(window).scrollTop()) {
        menuPostion.y = mousePosition.y - menuDimension.y;
    } else {
        menuPostion.y = mousePosition.y;
    }

    return menuPostion;
}

function showDropdown() {
   //debugger
    $('#id_Auth_menu').show();
    event.stopImmediatePropagation();
}
function CloseAuthorizationScreen() {
    if (g_DeletedNode == 0) {
        GLOBAL.gotoHomePage();
    }
    else {
        if (confirm(getResourceValue("msgWouldyouliketoClosethiswindowthereareuncommitedchanges", GetMasterTransAuthResourceMessages))) {
            GLOBAL.gotoHomePage();
        }
        else {
            return false;
        }
    }
}
// Get Resource Messages
function getResourceValue(sKey, GetResourceMessages) {
    var value = "";
    var result = null;

    result = findKeyValue(sKey, GetResourceMessages);
    if (result.lValue > 0) {
        value = result.data.Value;

        value = value.replace("{0}", "");
        value = value.replace("{1}", "");
    }

    return (value);
}
function findKeyValue(sKey, arrKeyValue) {
    var iCounter = 0;
    var result = null;
    var obj = null;

    try {
        result = COMMON.prototype.getEmptyResultObject();
        result.lValue = 0;
        result.sValue = "";
        result.data = null;

        for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
            obj = arrKeyValue[iCounter];
            if (obj.Key == sKey) {
                result.lValue = iCounter + 1;
                result.data = obj;
                break;
            }
        }

    }
    catch (err) {
        result.lValue = -1;
        result.sValue = err.message;
    }

    return (result);
}
//End Resource Messages
function CopyAuthorizationLeave() {
    debugger
    m_tableData = [];
    DeletedAuthorizationDetailsIds = [];

    var authorizationId = OPTIONCONTROL.getControlValue("CopyAuthorization");
    var bMasterAuthorization = $("#hdnAuthorizationName").val().trim() == "Transaction" ? false : true;

    if ($("#txtDoc").attr("data-VoucherType") != null && $("#txtDoc").attr("data-VoucherType") != "" && $("#txtDoc").attr("data-VoucherType") != undefined) {
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationFlow", "Authorization", "Masters"), true, { authorizationId: authorizationId, iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $("#hdnAuthorizationType").val() }, "JSON", false);

        if (authorizationFlowResult.data.myActive) {
            $('#chkActive').prop("checked", true);
        }
        else {
            $('#chkActive').prop("checked", false);
        }
        if (authorizationId != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
            DATEPICKER.setDate("dpAffectedDate", authorizationFlowResult.data.myAuthorizationMasterTrans.EffectiveDate);
        }
        else {
            DATEPICKER.setDate("dpAffectedDate", today);

        }
        $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        $('#spndeleteProfile').removeClass('grey');
        $('#spndeleteProfile').css({ "pointer-events": "auto" });
        if ($("#txtDoc").attr("data-VoucherType") != undefined && authorizationId != null) {//&& authorizationId != "0"


            if (authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
                getAuthorizationWorkFlow(authorizationFlowResult, false);
                var OptionControlData = OPTIONCONTROL.getControlData('CopyAuthorization');
                if (OptionControlData[3].exist == "1") {
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').addClass('grey');
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "none" });
                } else {
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').removeClass('grey');
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "auto" });
                }
            }
            else {
                $('#spndeleteProfile').addClass('grey');
                $('#spndeleteProfile').css({ "pointer-events": "none" });
            }
        }
        else {
            $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
            $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);

        }
    }

}


//auth def methods
function KeepUnpostedClick(element) {
    debugger
    var NodesLen = $("#hdnAuthorizationId").val() == "" || $("#hdnAuthorizationId").val() == "0" ? $(".clsDivNode").length : $(".clsDivNode").length - 1;
    var strConfirmMessage;
    if ($("#hdnLevel").val() < NodesLen) {
        if ($(element).is(":checked")) {
            strConfirmMessage = "Are You Sure Want To Check All KeepUnposted For Previous Levels"
        }
        else {
            strConfirmMessage = "Are You Sure Want To UnCheck All KeepUnposted For Next Levels"

        }
    }

    var AuthoriZationId = $("#hdnAuthorizationId").val();
    if (NodesLen > 1 && AuthoriZationId > 0) {
        if (confirm(strConfirmMessage)) {

            if (TempArrayForKeepUnposted.length > 0) {
                var idsArray = TempArrayForKeepUnposted.map(function (a) { return a.id; });
                var index = idsArray.indexOf($(element).attr("id"));
                if (index > -1) {
                    TempArrayForKeepUnposted.splice(index, 1);
                }
            }
            TempArrayForKeepUnposted.push({ id: $(element).attr("id"), bCheck: $(element).is(":checked") });
            $(element).attr("checked", true);

            if ($(element).attr("id") == "chkReservation") {
                if (document.getElementById("chkReservation").checked == true) {
                    debugger
                    document.getElementById("chkLinkBase").disabled = true;
                    document.getElementById("chkLinkBase").checked = true;
                }
                else {
                    document.getElementById("chkLinkBase").disabled = false;
                    // document.getElementById("chkLinkBase").checked = true;
                }

            }
        }
        else {
            $(element).attr("checked", false);
            if ($(element).attr("id") == "chkReservation") {
                document.getElementById("chkLinkBase").disabled = false;
                // document.getElementById("chkLinkBase").checked = true;
            }
            return false;
        }




        event.stopImmediatePropagation();
        // return false;
    }
    else {
        if ($(element).attr("id") == "chkReservation") {
            if (document.getElementById("chkReservation").checked == true) {
                debugger
                document.getElementById("chkLinkBase").disabled = true;
                document.getElementById("chkLinkBase").checked = true;
            }
            else {
                document.getElementById("chkLinkBase").disabled = false;
                //document.getElementById("chkLinkBase").checked = true;
            }
        }
    }
}
function GetRow() {
    debugger
    c = $('#userSelectionTableBody > tr:nth-child(1)').clone();
    d = 0;
    c.find('.Common').each(function () {
        //  debugger
        id = v = $(this).prop('id');
        var tlength = document.getElementById('userSelectionTableBody').rows.length;
        v = tlength + 1
        id = id.replace(/\d+/g, v);
        $(this).prop('id', id);
        d = v;
        $(this).attr({ 'value': '', 'data-value': '', 'data-text': '' });
        $(this).val('');
    });

    //   debugger
    r = c.find('tr').text();
    t = c.find('td:first').text()
    var tlength = document.getElementById('userSelectionTableBody').rows.length;
    t = tlength + 1
    c.find('td:first').text(t)
    return c;
}

function AddEscalation(element, index,IsEdit) {
    debugger
    var div = $($(element).closest('div').next()).find('div')[0];
    var escDiv = document.getElementById('tab_Escalation_Levels');
    div = $($(escDiv).closest('div')).find('div')[0];
    var tlength = index == undefined ? $('.lvl').length : (parseInt(index) - 1);
    var Ishidden = div.classList.contains('hidden');
    if ((tlength == '1' || tlength == '0') && Ishidden) {
        $(div).removeClass('hidden');
        AddEsclationLevelListBox(1,IsEdit);
        return false;
    }
    else {
        var cloned = $(div).clone();
        // $('#divSecondsub #divfirstsub').find('*').each(function () {
        cloned.find('*').each(function () {
            var id = v = $(this).prop('id');
            var name = $(this).prop('name');
            if (id != "") {
                var tlength = index == undefined ? $('.lvl').length : (parseInt(index) - 1);
                //debugger
                ++tlength;
                id = id.replace(/\d+/g, tlength);
                $(this).prop('id', id);
                $(this).prop('value', "");
                if (name != undefined) {
                    name = name.replace(/\d+/g, tlength);
                    $(this).prop('name', name);
                }
            }
        });
        debugger
        $(cloned).attr('id', $(cloned).prop('id').replace(/\d+/g, index == undefined ? ($('.lvl').length + 1) : (index)));
        $('#tab_Escalation_Levels').append(cloned);
        var divsLen = $('.lvl').length;
        $("#ddlEscalationType" + divsLen).val("0");
        EsacalationTypeChange($("#ddlEscalationType" + divsLen)[0]);
        $(cloned).removeClass('hidden');
        tlength = index == undefined ? $('.lvl').length : (index);
        $(cloned).find('label.lblEscalationLevel').html('').html(getResourceValue("lblEscalationlevel", GetMasterTransAuthResourceMessages) + " " + tlength);
        AddEsclationLevelListBox(tlength, IsEdit);
    }
}

function AddEsclationLevelListBox(index,IsEdit)
{
    debugger
    var li = document.createElement('li');
    if (index == 1) {
        li.classList.add('list-group-item');
        li.classList.add('active');
        li.classList.add('leftEsclationItem');
    }
    else {
        li.classList.add('list-group-item');
        li.classList.add('leftEsclationItem');
    }
    li.setAttribute('data-LevelId', "divEscalation" + index);
    //li.addEventListener('click',ActiveEsclationLevel(li));
    li.addEventListener('click', (e) => {
        ActiveEsclationLevel(e.currentTarget,e);
    });
    li.textContent = 'Level' + index;
    //li.style.paddingLeft = '5px';

    var iconClose = document.createElement('i');
    iconClose.classList.add('icon-close');
    iconClose.classList.add('LevelClose');
    iconClose.style.cssFloat = 'right';
    //iconClose.style.position = 'relative';
    //iconClose.style.left = '142px';
    iconClose.setAttribute('data-LevelId', "divEscalation" +index);
    iconClose.addEventListener('click', (e) => {
        DeleteLevelFromListBox(e.currentTarget, e);
    });


    li.appendChild(iconClose);
    ulEscLvl.appendChild(li);
    var authid = parseInt(document.getElementById('hdnEscalationLevels').getAttribute('data-authorizationdetailid').trim());

    if ((IsEdit == undefined || IsEdit == false))
    {
        if (index > 1) {
            ActiveEsclationLevel(li);
        }
    }
    //if (authid > 0 && !isNaN(authid)  && index == 1)
    //{
    // ActiveEsclationLevel(li);
    //}
    //else if((authid==0 || isNaN(authid)) && index>1)
    //{
    //    ActiveEsclationLevel(li);
    //}
    
}

function DivRemove(ele) {
    debugger
    if (confirm(getResourceValue("msgWouldyouliketodeletetheselectedEscalation", GetMasterTransAuthResourceMessages))) {
        if ($('.clsDivEscalation').length == '1') {
            $($(".clsDivEscalation").find(".clsEscalationType")).val("0");
            EsacalationTypeChange($(".clsDivEscalation").find(".clsEscalationType"));
            $($(ele).closest('div.clsDivEscalation ')).addClass('hidden');
            return false;
        }
        else {
            $($(ele).closest('div.clsDivEscalation ')).remove();
        }
        $('.lblEscalationLevel').each(function (index) {
            $(this).html('').html(getResourceValue("lblEscalationlevel", GetMasterTransAuthResourceMessages) + (index + 1));
        });
        $('.clsDivEscalation').each(function (index) {
            //var numberPattern = /\d+/g;
            var length = (index + 1);
            $(this).find('*').each(function () {
                var id = $(this).prop('id');
                if (id != "") {
                    id = id.replace(/\d+/g, length);
                    $(this).prop('id', id);
                }
            });
            $(this).prop('id', $(this).prop('id').replace(/\d+/g, length));
        });
    }
}
function AllSelectedUsers(ele) {
    debugger
    if ($(ele).val() == "3") {//($(ele).find('input').is(":checked") && $($(ele).closest('div').next()).hasClass('clsPercentage')) {
        //  $($(ele).closest('div').next()).removeClass('hidden');
        $('.clsPercentage').removeClass('hidden');
    }
    else {
        $('.clsPercentage').addClass('hidden');
    }
}

function SetMax100(input) {
    if (input.value < 0) input.value = 0;
    if (input.value > 100) input.value = 100;
    else {
        input.value = Number(input.value).toFixed(7);
    }
}
function getUserRoles(ele) {
    debugger
    FGRIDCONTROL.clearData("id_tblUserSelection", true);
    var result = null;
    if ($(ele).val() == "0") {
        FGRIDCONTROL.hideColumn("id_tblUserSelection", 1, false);
        FGRIDCONTROL.hideColumn("id_tblUserSelection", 2, true);
        $("#id_divCriteria").show();
        $($('#id_tblUserSelection th')[1]).html('').html(getResourceValue("lbUser", GetMasterTransAuthResourceMessages));
        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetUsers", "Authorization", "Masters"), true, {}, "JSON", false);
    }
    else if ($(ele).val() == "1") {
        FGRIDCONTROL.hideColumn("id_tblUserSelection", 1, false);
        FGRIDCONTROL.hideColumn("id_tblUserSelection", 2, true);
        $("#id_divCriteria").show();
        $($('#id_tblUserSelection th')[1]).html('').html(getResourceValue("lbRole", GetMasterTransAuthResourceMessages));
        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetRoles", "Authorization", "Masters"), true, {}, "JSON", false);
    }
    else if ($(ele).val() == "2") {
        FGRIDCONTROL.hideColumn("id_tblUserSelection", 1, false);
        FGRIDCONTROL.hideColumn("id_tblUserSelection", 2, true);
        $($('#id_tblUserSelection th')[1]).html('').html(getResourceValue("lbDesignation", GetMasterTransAuthResourceMessages));
        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetDesignations", "Authorization", "Masters"), true, {}, "JSON", false);
    }
    else if ($(ele).val() == "3") {
        if ($("#hdnAuthorizationType").val() == "2") {
            FGRIDCONTROL.hideColumn("id_tblUserSelection", 1, true);
            FGRIDCONTROL.hideColumn("id_tblUserSelection", 2, false);
        }
        else {
            FGRIDCONTROL.hideColumn("id_tblUserSelection", 1, false);
            FGRIDCONTROL.hideColumn("id_tblUserSelection", 2, true);
        }
    }
    if (result != null) {
        if (result.data != null) {
            $('.clsRoleUserDDL')[0].options.length = 0;
            var ddl = $('.clsRoleUserDDL');
            for (var i = 0; i < result.data.length; i++) {
                ddl.append("<option value=" + result.data[i].ID + ">" + result.data[i].Name + "</option>");
            }
        }
        else {
            COMMON.prototype.showMessage("Error in getting User selection data");
            return false;
        }
    }
    debugger;
    //BINDING USER/ROLES DATA TO GRID
    if (m_tableData != undefined) {
        tableData = m_tableData;
        if (tableData.data != null && tableData.lValue > 0) {
            for (var iRowCounter = 0; iRowCounter < tableData.data.length; iRowCounter++) {
                for (iColCounter = 1; iColCounter <= 4; iColCounter++) {
                    objData = tableData.data[iRowCounter];
                    cellobj = FGRIDCONTROL.getCellObject("id_tblUserSelection", iRowCounter + 1, iColCounter);
                    try {
                        var userRoleDesignation = "";
                        if ($("#ddlUserSelection").val() == "0") {
                            userRoleDesignation = "UserId";
                        }
                        if ($("#ddlUserSelection").val() == "1") {
                            userRoleDesignation = "RoleId";
                        }
                        if ($("#ddlUserSelection").val() == "2") {
                            userRoleDesignation = "DesignationId";
                        }
                        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                            case MasterDataType.get("NUMBERLIST"):
                                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                if (iColCounter == 1) {
                                    cellobj.setCellData("value", objData[userRoleDesignation]);
                                    cellobj.setCellData("AuthorizationUserSelectionId", objData["AuthorizationUserSelectionId"]);
                                    $(element).val(objData[userRoleDesignation]);
                                }
                                else if (iColCounter == 4) {
                                    cellobj.setCellData("value", objData["FrequencyId"]);
                                    $(element).val(objData["FrequencyId"]);
                                }
                                cellobj.setCellText($(element).find("option:selected").text());
                                break;

                            case MasterDataType.get("NUMBER"):
                                cellobj.setCellData("value", objData["LimitValue"]);
                                cellobj.setCellText(objData["LimitValue"]);
                                break;

                            default:
                                if (iColCounter == 2) {
                                    var sVariable = objData["Variable"] == null ? "" : objData["Variable"];
                                    cellobj.setCellData("value", sVariable);
                                    cellobj.setCellText(sVariable);
                                }
                                else {
                                    cellobj.setCellData("value", $("#hdnFilterString" + cellobj.iRow).val());
                                    cellobj.setCellData("limiton", $("#hdnFilterString" + cellobj.iRow).attr("data-limiton"));
                                    cellobj.setCellText($("#hdnFilterString" + cellobj.iRow).val());
                                }
                                break;
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage(err.message, "Exception");
                    }
                }

            }

        }
    }
}

function OnConditionNotRequiredClick(ele) {
    debugger

    if ($('#chkConditionNotRequired').is(":checked")) {
        $('.divConditionFormula,.divCredit').css({ 'pointer-events': 'none' });
        $('.divConditionFormula,.divCredit').addClass('grey');
        $($('.divConditionFormula').find('.Fselect,.Ftxtbox')).each(function () {
            $(this).addClass('grey');
        });
    }
    else {
        $('.divConditionFormula,.divCredit').css({ 'pointer-events': 'auto' });
        $('.divConditionFormula,.divCredit').removeClass('grey');
        $($('.divConditionFormula').find('.Fselect,.Ftxtbox')).each(function () {
            $(this).removeClass('grey');
        });

    }
    if ($("#hdnAuthorizationType").val() == "2") {
        var isCreditLimitExceeded = $("#chkCreditLimitExceeded").attr("data-content");
        if (isCreditLimitExceeded == "False") {
            $("#chkCreditLimitExceeded").closest(".divCredit").addClass("grey").css({ 'pointer-events': 'none' });
        }
    }
}
function EsacalationTypeChange(ele) {
    debugger
    if (parseInt($(ele).val()) > 1) {
        if ($(ele).val() == "3") {
            $($(ele).closest('div.row').next()).removeClass("hidden");
            $($($(ele).closest('div.row').next()).find('.clsDivAlertMessage')[0]).removeClass('hidden');
           // $($($(ele).closest('div.row').next()).find('.clsDivUserType')[0]).removeClass('hidden');
        }
        else {
            $($(ele).closest('div.row').next()).addClass("hidden");
            $($($(ele).closest('div.row').next()).find('.clsDivAlertMessage')[0]).addClass('hidden');
        }
        if ($(ele).val() == "2" || $(ele).val() == "3") {
            $($(ele).closest('div.row').next()).removeClass("hidden");
            $($($(ele).closest('div.row').next()).find('.clsDivUserType')[0]).removeClass('hidden');
            
        }
        else {
            $($(ele).closest('div.row').next()).addClass("hidden");
        }
        $($(ele).closest('div.row').next()).removeClass("grey");
        $($(ele).closest('div.row').next()).css({ 'pointer-events': 'auto' });
    }
    else {
        $($(ele).closest('div.row').next()).addClass("hidden");
        $($(ele).closest('div.row').next().next()).addClass("hidden");
        $($(ele).closest('div.row').next().next()).css({ 'pointer-events': 'none' });
        $($(ele).closest('div.row').next().next()).addClass('grey');
    }
}
function userTypeChange(element, bOnChange) {
    debugger

    var id = $($($(element).closest('div').next()).find('.clsUserRoleOrg')).removeClass("hidden");
    if (bOnChange) {
        $($(".clsRoleDiv,.clsUserDiv").find("input[type=checkbox]")).attr("checked", false);
    }
    if ($(element).val() == "0") {
        $($($(element).closest('div').next()).find('.clsUserRoleOrg')).find('.clsUserDiv').removeClass("hidden");
        $($($(element).closest('div').next()).find('.clsUserRoleOrg')).find('.clsRoleDiv,.clsSelectOrganizationLevel').addClass("hidden");
    }
    else if ($(element).val() == "1") {
        $($($(element).closest('div').next()).find('.clsUserRoleOrg')).find('.clsRoleDiv').removeClass("hidden");
        $($($(element).closest('div').next()).find('.clsUserRoleOrg')).find('.clsUserDiv,.clsSelectOrganizationLevel').addClass("hidden");
    }
    else {
        $($($(element).closest('div').next()).find('.clsUserRoleOrg')).find('.clsSelectOrganizationLevel').removeClass("hidden");
        $($($(element).closest('div').next()).find('.clsUserRoleOrg')).find('.clsUserDiv,.clsRoleDiv').addClass("hidden");
    }
}
function lblOrganizationTypeClick(element) {
    debugger
    var id = $($(element).find('input')).attr('id');
    if ($("#" + id).attr('data-hidden') == "false") {

        $($(element).closest('div')).find('.clsSelectOrganizationLevel').removeClass('hidden');
        $($(element).closest('div')).find('.clsUserDiv,.clsRoleDiv').addClass('hidden');
    }
    else {
        $($(element).closest('div')).find('.clsSelectOrganizationLevel').addClass('hidden');
        $($(element).closest('div')).find('.clsUserDiv,.clsRoleDiv').removeClass('hidden');
        if ($("#" + id).attr('data-content') == "user") {
            $($(element).closest('div')).find('.clsUserDiv').removeClass('hidden');
            $($(element).closest('div')).find('.clsRoleDiv').addClass('hidden');
        } else {
            $($(element).closest('div')).find('.clsRoleDiv').removeClass('hidden');
            $($(element).closest('div')).find('.clsUserDiv').addClass('hidden');
        }
    }
    $(element).off('click');
}
function AuthorizationEscalationDetails(index, UserOrRole) {
    debugger
    var arrAuthorizationEscalationDetails = [];
    // user=0, role=1
    if (UserOrRole == "0") {
        var inputlen = $($("#divEscalationBody" + index).find('.clsUserDiv')).find('input').length;
        for (var i = 0; i < inputlen; i++) {
            var AuthorizationEscalationDetails = {
                AuthorizationEscalationId: "0",
                UserOrRoleId: $($($("#divEscalationBody" + index).find('.clsUserDiv')).find('input')[i]).attr("data-contentid")
            }
            if ($($($("#divEscalationBody" + index).find('.clsUserDiv')).find('input')[i]).is(":checked")) {
                arrAuthorizationEscalationDetails.push(AuthorizationEscalationDetails);
            }
        }
    }
    else {
        var inputlen = $($("#divEscalationBody" + index).find('.clsRoleDiv')).find('input').length;
        for (var i = 0; i < inputlen; i++) {
            var AuthorizationEscalationDetails = {
                AuthorizationEscalationId: "0",
                UserOrRoleId: $($($("#divEscalationBody" + index).find('.clsRoleDiv')).find('input')[i]).attr("data-contentid")
            }
            if ($($($("#divEscalationBody" + index).find('.clsRoleDiv')).find('input')[i]).is(":checked")) {
                arrAuthorizationEscalationDetails.push(AuthorizationEscalationDetails);
            }
        }
    }
    return arrAuthorizationEscalationDetails;
}
function SaveNodeData(element, event) {
    debugger
    //for update the Advancefilter control on Ok or Save filter control so that leave event of last row should update 
    FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
    var arrArrAuthorizationAlters = [];
    var arrDeletedEscalation = [];
    var arrDeletedUserSelection = [];
    var arrFilterCondition = [];
    if (!$("#chkConditionNotRequired").is(":checked")) {
        if ($("#hdnAuthorizationType").val() == "2") {
            arrFilterCondition = getFilterValueForTransAuthorization($("#hdnAuthorizationMenuId").val(), "0");
        }
        else {
            arrFilterCondition = getFilterValueForAuthorization($("#hdnAuthorizationMenuId").val(), "0");
        }
    }
    debugger
    var arrListAuthorizationEscalation = [];
    var arrListAuthorizationUserSelection = [];
    if (lastCellObj != null && lastCellObj != "") {
        onLeave(lastCellObj, event);
    }
    var tableLen = document.getElementById("id_tblUserSelection_body");
    debugger;
    for (var i = 0; i < tableLen.rows.length; i++) {
        var AuthorizationUserSelection = {
            AuthorizationDetailId: $("#ddlUserSelection").attr('data-authorizationdetailid') == undefined ? "0" : $("#ddlUserSelection").attr('data-authorizationdetailid'),
            AuthorizationUserSelectionId: $(tableLen.rows[i].cells[1]).attr("data-authorizationuserselectionid") == undefined ? "0" : $(tableLen.rows[i].cells[1]).attr("data-authorizationuserselectionid"),//$("#hdnAuthorizationUserSelectionId").val(),
            DesignationId: $("#ddlUserSelection").val() == "2" ? $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : "0" : $(tableLen.rows[i].cells[1]).attr("data-value") : "0",
            FrequencyId: $(tableLen.rows[i].cells[5]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[5]).find('select').length > 0 ? $($(tableLen.rows[i].cells[5]).find('select')).val() : "0" : $(tableLen.rows[i].cells[5]).attr("data-value"),
            LimitCondition: "",
            LimitDefinition: "",
            LimitOn: $("#hdnFilterString" + (i + 1)).attr("data-limiton") == undefined ? ($("#ddlLimiton").attr("data-isitsales") == "False" ? "1" : "0") : $("#hdnFilterString" + (i + 1)).attr("data-limiton"),
            LimitValue: $(tableLen.rows[i].cells[4]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[4]).find('input').length > 0 ? $($(tableLen.rows[i].cells[4]).find('input')).val() : "" : $(tableLen.rows[i].cells[4]).attr("data-value"),
            MarkDeleted: false,
            RoleId: $("#ddlUserSelection").val() == "1" ? $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[1]).attr("data-value") : "0",
            RoleName: $("#ddlUserSelection").val() == "1" ? $($(tableLen.rows[i].cells[1]).find('option:selected')).text() : "",
            UserId: $("#ddlUserSelection").val() == "0" ? $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[1]).attr("data-value") : "0",
            UserName: $("#ddlUserSelection").val() == "0" ? $($(tableLen.rows[i].cells[1]).find('option:selected')).text() : "",
            UserSelectionFlagId: $("#ddlUserSelection").val(),
            Variable: $("#ddlUserSelection").val() == "3" ? $(tableLen.rows[i].cells[2]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[2]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[2]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[2]).attr("data-value") : null,
            //$("#ddlUserSelection").val() == "2" ? "0" : $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[1]).attr("data-value")
        }
        //debugger;
        switch ($("#ddlUserSelection").val()) {
            case "0":
                if (AuthorizationUserSelection.UserId != undefined && AuthorizationUserSelection.UserId != "0") {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
            case "1":
                if (AuthorizationUserSelection.RoleId != undefined && AuthorizationUserSelection.RoleId != "0" && AuthorizationUserSelection.RoleId != "") {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
            case "2":
                if (AuthorizationUserSelection.DesignationId != undefined && AuthorizationUserSelection.DesignationId != "0" && AuthorizationUserSelection.DesignationId != "") {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
            case "3":
                if (AuthorizationUserSelection.Variable != "" && AuthorizationUserSelection.Variable != undefined) {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
        }

    }

    if ($(".clsEscalationBody:visible").length > 0) {
        $(".clsEscalationBody:visible").each(function (index) {
            debugger
            var AuthorizationEscalation = {
                AuthorizationDetailId: $('#hdnEscalationLevels').attr('data-authorizationdetailid') == undefined ? "0" : $('#hdnEscalationLevels').attr('data-authorizationdetailid'),
                AuthorizationEscalationDetails: ($("#ddlUserType" + (index + 1)).val() == "0" || $("#ddlUserType" + (index + 1)).val() == "1") ? AuthorizationEscalationDetails((index + 1), $("#ddlUserType" + (index + 1)).val()) : null,//working
                AuthorizationEscalationId: $('#hdnAuthorizationEscalationId' + (index + 1)).val(),
                EscalationFlag: $("#ddlUserType" + (index + 1)).val(),
                EscalationLevelNo: index + 1,
                EscalationSelectionType: $('#ddlEscalationType' + (index + 1)).val(),
                EscalationTime: $("#txtTimeLimit" + (index + 1)).val(),
                EscalationTimeLimitType: $("#ddlTimeLimit" + (index + 1)).val(),
                MarkDeleted: false,
                OrganizationTypeId: $("#ddlUserType" + (index + 1)).val() == "2" ? $("#ddlSelectOrganizationLevel" + (index + 1)).val() : "0",
                // SendAlertToUser: $("#ddlEscalationType" + (index + 1)).val == "3" ? $("#ddlAlertMessage" + (index + 1)).val() : "0"
                SendAlertToUser: $("#ddlAlertMessage" + (index + 1)).val()
            }
            arrListAuthorizationEscalation.push(AuthorizationEscalation);
        })
    }

    var KeepUnposted = 0;
    var UndoAuthBitwise = 0;

    if ($("#chkFinancialAccounting").is(":checked") == true) {
        KeepUnposted = KeepUnposted + 1;

    }
    if ($("#chkInventory").is(":checked") == true) {
        KeepUnposted = KeepUnposted + 2;

    }
    if ($("#chkLinkBase").is(":checked") == true) {
        KeepUnposted = KeepUnposted + 4;

    }
    if ($("#chkLinks").is(":checked") == true) {
        KeepUnposted = KeepUnposted + 8;

    }
    if ($("#chkReferences").is(":checked") == true) {
        KeepUnposted = KeepUnposted + 16;

    }
    if ($("#chkReservation").is(":checked") == true) {
        KeepUnposted = KeepUnposted + 32;

    }

    if ($("#chkAnyValueChange").is(":checked") == true) {
        UndoAuthBitwise = UndoAuthBitwise + 1;

    }
    if ($("#chkAmountsOrQuantityOrNumeric").is(":checked") == true) {
        UndoAuthBitwise = UndoAuthBitwise + 2;
    }
    if ($("#chkBillAdjustments").is(":checked") == true) {
        UndoAuthBitwise = UndoAuthBitwise + 4;
    }
    if ($("#chkUndoLinks").is(":checked") == true) {
        UndoAuthBitwise = UndoAuthBitwise + 8;
    }
    if ($("#chkUndoReservation").is(":checked") == true) {
        UndoAuthBitwise = UndoAuthBitwise + 16;
    }
    if ($("#chkBatchRMABins").is(":checked") == true) {
        UndoAuthBitwise = UndoAuthBitwise + 32;
    }
    var tableAlerts = document.getElementById("id_tblAlerts_body");
    if (arrFilterCondition == null) {
        arrFilterCondition = [];
    }
    debugger
    var AuthorizationDetails = {
        AllinLevel: false,
        Approved: $('#chkApproved').is(":checked") ? true : false,
        ApprovedAlertMsg: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[5]).attr("data-value") : "0",
        ApprovedEmailTemplateId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[3]).attr("data-value") : "0",
        ApprovedRecipientId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[6]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[6]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[6]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[6]).attr("data-value") : "0",
        ApprovedSmsTemplateId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[4]).attr("data-value") : "0",
        ApprovedEmailHeaderTemplateId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[2]).attr("data-value") : "0",
        ArrAuthorizationAlters: arrArrAuthorizationAlters,
        AskRemarksonapproval: $('#chkAskRemarksonapproval').is(":checked") ? true : false,
        AskremarksonRejection: $('#chkAskremarksonRejection').is(":checked") ? true : false,
        AuthorizationDetailId: $("#hdnAuthorizationId").val(),
        AuthorizationMode: $('#chkFullAuthorization').is(":checked") ? "1" : "0",
        Budgetexceeded: $("#chkBudgetExceeded").is(":checked") ? true : false,
        Condition: "",
        ConditionNotReq: $("#chkConditionNotRequired").is(":checked") ? true : false,
        CreditDaysexceeded: $("#chkCreditDaysExceeded").is(":checked") ? true : false,
        Creditlimitexceeded: $("#chkCreditLimitExceeded").is(":checked") ? true : false,
        DateRange: $("#chkDateRange").is(":checked") ? true : false,
        DeletedEscalation: arrDeletedEscalation,
        DeletedUserSelection: arrDeletedUserSelection,
        Description: $("#txtDescription").val(),
        FilterCondition: arrFilterCondition,
        Formula: "",
        FromDate: $("#chkDateRange").is(":checked") ? DATEPICKER.getDate("dpFromDate") : "0",
        FromTime: $("#chkTimeRange").is(":checked") ? FTIMECONTROL.getTime("tpFromTime") : "0",
        KeepUnposted: KeepUnposted,
        Level: $("#hdnLevel").val(),
        LineWiseAutorization: $("#chkLineWiseAuthorization").is(":checked") ? true : false,
        ListAuthorizationEscalation: arrListAuthorizationEscalation,
        ListAuthorizationUserSelection: arrListAuthorizationUserSelection,
        MarkDeleted: false,
        Negativecashcheck: $("#chkNegativeCashCheck").is(":checked") ? true : false,
        NegativeStockcheck: $("#chkNegativeStockCheck").is(":checked") ? true : false,
        NodeType: $("#hdnStage").val() == "0" ? true : false,
        Percentage: $("#txtPercentage").val(),
        Received: $("#chkReceived").is(":checked") ? true : false,
        ReceivedAlertTemplateId: $("#chkReceived").is(":checked") == true ? $(tableAlerts.rows[0].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[5]).attr("data-value") : "0",
        ReceivedEmailTemplateId: $("#chkReceived").is(":checked") == true ? $(tableAlerts.rows[0].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[3]).attr("data-value") : "0",
        ReceivedRecipientId: $("#chkReceived").is(":checked") == true ? $(tableAlerts.rows[0].cells[6]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[6]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[6]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[6]).attr("data-value") : "0",
        ReceivedSmsTemplateId: $("#chkReceived").is(":checked") == true ? $(tableAlerts.rows[0].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[4]).attr("data-value") : "0",
        ReceivedEmailHeaderTemplateId: $("#chkReceived").is(":checked") == true ? $(tableAlerts.rows[0].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[2]).attr("data-value") : "0",
        Rejected: $("#chkRejected").is(":checked") ? true : false,
        RejectedAlertMsg: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[5]).attr("data-value") : "0",
        RejectedEmailTemplateId: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[3]).attr("data-value") : "0",
        RejectedRecipientId: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[6]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[6]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[6]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[6]).attr("data-value") : "0",
        RejectedSmsTemplateId: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[4]).attr("data-value") : "0",
        RejectedEmailHeaderTemplateId: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[2]).attr("data-value") : "0",
        Reason: $("#txtAuthDefReason").val(),
        Stage: $("#hdnStage").val(),
        Status: $("#ddlStatus").val(),
        StatusUpdate: $("#id_txtStatusUpdate").attr("data-ifieldid") == undefined ? "0" : $("#id_txtStatusUpdate").attr("data-ifieldid"),
        Stopped: $("#chkStopped").is(":checked") ? true : false,
        StoppedAlertMsg: $("#chkStopped").is(":checked") == true ? $(tableAlerts.rows[3].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[3].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[3].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[3].cells[5]).attr("data-value") : "0",
        StoppedEmailTemplateId: $("#chkStopped").is(":checked") == true ? $(tableAlerts.rows[3].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[3].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[3].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[3].cells[3]).attr("data-value") : "0",
        StoppedRecipientId: $("#chkStopped").is(":checked") == true ? $(tableAlerts.rows[3].cells[6]).attr("data-value") == undefined ? ($(tableAlerts.rows[3].cells[6]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[3].cells[6]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[3].cells[6]).attr("data-value") : "0",
        StoppedSmsTemplateId: $("#chkStopped").is(":checked") == true ? $(tableAlerts.rows[3].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[3].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[3].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[3].cells[4]).attr("data-value") : "0",
        StoppedEmailHeaderTemplateId: $("#chkStopped").is(":checked") == true ? $(tableAlerts.rows[3].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[3].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[3].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[3].cells[2]).attr("data-value") : "0",
        SuspendCreditLimit: false,
        TempAuthDetailId: "0",
        TimeRange: $("#chkTimeRange").is(":checked") ? true : false,
        ToDate: $("#chkDateRange").is(":checked") ? DATEPICKER.getDate("dpToDate") : "0",
        ToTime: $("#chkTimeRange").is(":checked") ? FTIMECONTROL.getTime("tpToTime") : "0",
        UndoAutherizationOnEditing: $("#ddlUndoAuthEditing").val(),
        UndoAutherization: UndoAuthBitwise,
        UserSelectionFlag: $("#ddlUserSelection").val(),//$("#rbnUsers").is(":checked") ? "0" : $("#rbnRoles").is(":checked") ? "1" : "2",
        UserSelectionType: $("#ddlCriteria").val(),//$("#rbnAnySelectedUser").is(":checked") ? "0" : $("#rbnAllSelectedUser").is(":checked") ? "1" : $("#rbnMajority").is(":checked") ? "2" : "3",
        ApprovalRemarksMandatory: $('#chkmakeAskRemarksonapproval').is(":checked") ? true : false,
        RejectionRemarksMandatory: $('#chkmakeAskRemarksonRejection').is(":checked") ? true : false

    }
    if ($("#txtDescription").val().trim() == "") {
        COMMON.prototype.showMessage(getResourceValue("msgEnterDesc", GetMasterTransAuthResourceMessages));
        return false;
    }


    else if (arrListAuthorizationUserSelection.length == "0" && $("#ddlUserSelection").val() != "2") {
        if (parseInt($("#ddlUserSelection").val()) == 1) {
            COMMON.prototype.showMessage(getResourceValue("msgRoleselectionismandatory", GetMasterTransAuthResourceMessages));
            return false;
        }
        else if (parseInt($("#ddlUserSelection").val()) == 3) {
            COMMON.prototype.showMessage(getResourceValue("msgVariableismandatory", GetMasterTransAuthResourceMessages));
            return false;
        }
        else {
            COMMON.prototype.showMessage(getResourceValue("msgInUserSelectiontabselectuserUserselectionismandatory", GetMasterTransAuthResourceMessages));
            return false;
        }

    }

    else if (AuthorizationDetails.DateRange == true && parseInt(AuthorizationDetails.FromDate) > parseInt(AuthorizationDetails.ToDate)) {
        COMMON.prototype.showMessage(getResourceValue("msgEnterValidDateRange", GetMasterTransAuthResourceMessages));
        return false;
    }

    else if (AuthorizationDetails.Received == true && (AuthorizationDetails.ReceivedAlertTemplateId == "0" && AuthorizationDetails.ReceivedEmailTemplateId == "0" && AuthorizationDetails.ReceivedRecipientId == "0" && AuthorizationDetails.ReceivedSmsTemplateId == "0" && AuthorizationDetails.ReceivedEmailHeaderTemplateId == "0")) {
        COMMON.prototype.showMessage(getResourceValue("msgSelectEmailTemplateSMSTemplateAlertforReceiving", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (AuthorizationDetails.Approved == true && (AuthorizationDetails.ApprovedAlertMsg == "0" && AuthorizationDetails.ApprovedEmailTemplateId == "0" && AuthorizationDetails.ApprovedRecipientId == "0" && AuthorizationDetails.ApprovedSmsTemplateId == "0" && AuthorizationDetails.ApprovedEmailHeaderTemplateId == "0")) {
        COMMON.prototype.showMessage(getResourceValue("msgSelectEmailTemplateSMSTemplateAlertApproval", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (AuthorizationDetails.Rejected == true && (AuthorizationDetails.RejectedAlertMsg == "0" && AuthorizationDetails.RejectedEmailTemplateId == "0" && AuthorizationDetails.RejectedRecipientId == "0" && AuthorizationDetails.RejectedSmsTemplateId == "0" && AuthorizationDetails.RejectedEmailHeaderTemplateId == "0")) {
        COMMON.prototype.showMessage(getResourceValue("msgSelectEmailTemplateSMSTemplateAlertforRejection", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (AuthorizationDetails.Stopped == true && (AuthorizationDetails.StoppedAlertMsg == "0" && AuthorizationDetails.StoppedEmailTemplateId == "0" && AuthorizationDetails.StoppedRecipientId == "0" && AuthorizationDetails.StoppedSmsTemplateId == "0" && AuthorizationDetails.StoppedEmailHeaderTemplateId == "0")) {
        COMMON.prototype.showMessage(getResourceValue("msgSelectEmailTemplateSMSTemplateAlertforStop", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (!$("#chkConditionNotRequired").is(":checked") && !$("#chkConditionNotRequired").hasClass("grey")) {

        if (arrFilterCondition.length == "0") {
            COMMON.prototype.showMessage(getResourceValue("msgEntervalidCondition", GetMasterTransAuthResourceMessages));
            return false;
        }

            //else if (!$('.clsChildDivCredit').is(":checked") && $("#hdnAuthorizationType").val() == "2") {
            //    COMMON.prototype.showMessage("Give proper condition for Authorization");
            //    return false;
            //}

        else if (arrFilterCondition.length > 0) {
            for (var i = 0; i < arrFilterCondition.length; i++) {
                debugger;
                if (arrFilterCondition[i].DataType == 6 ||
                    arrFilterCondition[i].DataType == 13 || arrFilterCondition[i].DataType == 15 ||
                    arrFilterCondition[i].DataType == 16 || arrFilterCondition[i].DataType == 2 ||
                    arrFilterCondition[i].DataType == 5) {
                    if ((arrFilterCondition[i].CompareText == "" && arrFilterCondition[i].CompareValue == "" && arrFilterCondition[i].Conjuction != "10")) {
                        COMMON.prototype.showMessage(getResourceValue("msgEntervalidCondition", GetMasterTransAuthResourceMessages));
                        return false;
                    }

                }
                else {
                    if ((arrFilterCondition[i].CompareText == "" && arrFilterCondition[i].CompareValue == "0") || (arrFilterCondition[i].CompareValue == "Type a Value" && arrFilterCondition[i].CompareText == "Type a Value")) {
                        COMMON.prototype.showMessage(getResourceValue("msgEntervalidCondition", GetMasterTransAuthResourceMessages));
                        return false;
                    }
                }
            }
        }
        //else {
        //var NodeLvel = NETWORK.executeServerMethod(GLOBAL.getContextPath("saveNodeLevelData", "Authorization", "Masters"), true, { VoucherType: $("#hdnVoucherType").val(), AuthDetailsId: $('#hdnAuthorizationId').val() == "" ? "0" : $('#hdnAuthorizationId').val(), AuthorizationDetails: AuthorizationDetails, NodeType: $("#hdnNodeType").val(), arrFilterCondition: arrFilterCondition, objUserSelection: arrLimitCondition }, "JSON", true, "NodeLvelSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
        //}
    }
    var NodeLength = $(".clsDivNode").length - 1;
    // else {
    var AuthDetailsId = $('#hdnAuthorizationId').val() == "" ? "0" : $('#hdnAuthorizationId').val()
    var Authorizationid = OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == "" ? 0 : OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
    var bCopyForm;
    if (OPTIONCONTROL.getControlValue("CopyAuthorization") > 0) {
        bCopyForm = true;
    }
    else {
        bCopyForm = false;
    }
    var NodeLvel = NETWORK.executeServerMethod(GLOBAL.getContextPath("saveNodeLevelData", "Authorization", "Masters"), true, { VoucherType: $("#hdnVoucherType").val(), AuthDetailsId: AuthDetailsId, AuthorizationDetails: AuthorizationDetails, NodeType: $("#hdnNodeType").val(), arrFilterCondition: arrFilterCondition, objUserSelection: arrLimitCondition, iAuthorizationID: Authorizationid, SelectedLevel: $("#hdnLevel").val(), TotalNodeLength: NodeLength, bCopyfrom: bCopyForm }, "JSON", true, "NodeLvelSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    // }
}
function NodeLvelSucess(bflag, data) {
    // debugger
    if (bflag == true && data != null && data != "") {
        closeAuthDef();
        g_DeletedNode++;
        $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
        if (data.AuthorizationDetails != null) {
            //           //   $('#hdnAuthorizationType').val(data.AuthorizationType);
            for (var i = 0; i < data.AuthorizationDetails.length; i++) {
                debugger
                //$('#id_StartNode').removeClass('blue').addClass('grey');
                var divLevelFlow = $('#divLevelFlow').clone();
                var row = data.AuthorizationDetails[i].Stage;
                var col = data.AuthorizationDetails[i].Level;
                if (parseInt(row) >= 4) {
                    var tdhtml = "";
                    var tdLen = $('#tblNodeBody').find('tr')[0].cells.length;
                    for (var iColLen = 0; iColLen < tdLen; iColLen++) {
                        tdhtml = tdhtml + '<td></td>';
                    }
                    var dRow = '<tr>' + tdhtml + '</tr>'
                    $('#tblNodeBody').append(dRow);
                }
                if (parseInt(col) >= 4) {
                    var trLen = $('#tblNodeBody').find('tr').length;
                    for (var iRowLen = 0; iRowLen < trLen; iRowLen++) {
                        $($('#tblNodeBody').find('tr')[iRowLen]).append('<td></td>');
                    }
                }

                $($($('#tblNodeBody').find('tr')[row]).find('td')[col]).html(divLevelFlow)
                //  $($('#AuthDesignArea').find('div.container')).append(divLevelFlow);
                var currentCell = $($('#tblNodeBody').find('tr')[row]).find('td')[col];
                $(currentCell).find('.clsdivLevelFlow').removeClass("hidden");
                if (parseInt(data.AuthorizationDetails[i].Stage) >= 1) {
                    //  $(currentCell).find('.clsArrowChange').toggleClass("icon-line-arrow glyphicon-arrow-down");
                    $(currentCell).find('.clsSpnLevelCheck').hide();
                    if ($("#hdnLanguageId").val() == "1") {
                        $($($(currentCell).find('.clsArrowChange')).closest('span')).css({ "transform": "rotate(-90deg)" });
                        $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-right": "22%" });

                    } else {
                        $($($(currentCell).find('.clsArrowChange1')).closest('div')).css({ "transform": "rotate(90deg)" });
                        $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "position": "relative", "top": "10px" });
                        //$(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-left": "22%" });

                    }
                    $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "text-align": "center" });
                    $($($(currentCell).find('.clsdivLevelFlow')).find('div')[0]).css({ "width": "100px", "height": "20px", "position": "relative", "top": "39px", "left": "85px" });
                    //impline $(currentCell).find('.clsDivNode').css({ "width": "35px", "height": "35px", "position": "relative", "left": "9px", "top": "76px", "margin-top": "13px" });

                    $(currentCell).find('.clsDivNode').css({ "width": "35px", "height": "35px", "margin-left": "70%", "margin-top": "50%" });

                    //$($($(currentCell).find('.clsdivLevelFlow')).find('div')[0]).css({ "margin-left": "30%", "display": "flex", "margin-top": "-5px" });
                    //$(currentCell).find('.clsDivNode').css({ "width": "150px" });


                }
                if (row == 0 && col == 0) {
                    $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "display": "none" });
                }

                if (col == 0) {
                    //NodeIcon
                    $(currentCell).find('.NodeIcon').addClass('icon-report-1');
                }
                if (col == 1) {
                    $(currentCell).find('.NodeIcon').addClass('icon-inventory');
                }
                if (col == 2) {
                    $(currentCell).find('.NodeIcon').addClass('icon-inventory-1');
                }
                if (col == 3) {
                    $(currentCell).find('.NodeIcon').addClass('icon-loadform');
                }
                if (col == 4) {
                    $(currentCell).find('.NodeIcon').addClass('icon-masterdocument');
                }




                ///  $('.clsdivLevelFlow:last').removeClass("hidden");
                var len = $('#AuthDesignArea').find('.clsdivLevelFlow:visible').length;

                $(currentCell).find('.clsdivLevelFlow').attr('id', "divLevel" + len);
                $(currentCell).find('.clsSpnLevelCheck').attr('id', "chkLevelCheck" + len);
                //    $($('.clsdivLevelFlow:last').find('label')[0]).text('').text('Level ' + len);
                $(currentCell).find('.clsdivLevelFlow').attr('data-authorizationdetailid', data.AuthorizationDetails[i].AuthorizationDetailId);
                $($($(currentCell).find('.clsdivLevelFlow')).find('div')[1]).attr({ "data-level": data.AuthorizationDetails[i].Level, "data-stage": data.AuthorizationDetails[i].Stage })
                if (data.AuthorizationDetails[i].Condition == null) {
                    data.AuthorizationDetails[i].Condition = "";
                }
                $(currentCell).find('.clsDivAuthorizationName').prop("title", "Condition:" + data.AuthorizationDetails[i].Condition);
                $($(currentCell).find('.clsDivAuthorizationName')).find('label').text(data.AuthorizationDetails[i].Description);
                $($(currentCell).find('.clsDivAuthorizationName')).find('label').prop("title", data.AuthorizationDetails[i].Description);
                (data.AuthorizationDetails[i].AllinLevel == true) ? $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", true) : $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", false);
            }
            debugger
            var lastNode = $($('#tblNodeBody').find('tr')[0]).find('.clsdivLevelFlow:last');
            var level = $($(lastNode).find('div')[1]).attr("data-level");
            var divLevelStop = $('.divStopNode').clone();
            var td = $($('#tblNodeBody').find('tr')[0]).find('td')[parseInt(level) + 1];
            $(td).html(divLevelStop);
            $(td).addClass("clsTdEnd");
            $($(td).find('.divStopNode')).removeClass("hidden");
            $($($('#tblNodeBody').find('tr')[0]).find('td:first')).find(".clsArrowChange").addClass("icon-font1");
            $($($('#tblNodeBody').find('tr')[0]).find('td.clsTdEnd')).find(".clsArrowChange").addClass("icon-font1");
            $(".clsArrowChange:not(.icon-font1)").css({ "font-size": "56px" });
            $(".clsArrowChange:not(.icon-font1)").addClass('grey');
            $($($($('#tblNodeBody').find('tr')[0]).find(".clsArrowChange:not(.icon-font1)")).closest('div')).css({ "padding-top": "5px" });

            //if(DeletedAuthorizationDetailsIds.length==0){
            //    $('#tblNodeBody').find('tr').each(function () {
            //        $(this).find('td').each(function(){
            //            if($(this).text().trim()=="" && !$(this).hasClass('clsTdEnd')){
            //                $(this).remove();
            //            }
            //        });
            //    });
            //    return false;
            //}
            //$($($('#tblNodeBody').find('tr')[0]).children()).each(function (index) {
            //    debugger
            //    var len = $(this).find('.clsdivLevelFlow').length;
            //    if (len == "0") {
            //        var divLevelStop = $('.divStopNode').clone();
            //        $(this).html(divLevelStop);
            //        $($(this).find('.divStopNode')).removeClass("hidden");
            //        return false;
            //    }
            //})
        }
    }
    else if (bflag == true && data == "") {
        COMMON.prototype.showMessage("Please Load Authorization flow again");
    }
    else {
        COMMON.prototype.showMessage("Error in saving node Escalation data");
    }
}
 function closeAuthDef(ele) {
    // debugger
    $('#divAuthorization').show();
    $('#id_AuthDef_popup').hide();
    $("#ulAuthBtns").find('span').each(function () {
        $(this).removeClass("grey").css({ "pointer-events": "auto" });
    });
    m_tableData = undefined;
    TempArrayForKeepUnposted = [];
}
function cellChange(cellobj, event) {
    if (cellobj.bLeave == true) {
        return (onLeave(cellobj, event));
    }
    else {
        onEnter(cellobj, event);
    }
}

function onLeave(cellobj, event) {
    debugger
    var element = null;
    var data = null;
    sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);

    if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {

        var EventCol = $($(cellobj.cell).closest('tr')).find('.CommonAlerts');
        if (cellobj.bHidden == true || EventCol.length > 0) {
            if (!$(EventCol).is(":checked")) {
                cellobj.processDefault(event);
                return true;
            }
        }

        if ((cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_Recepient" && cellobj.iRow == 1) || (event == undefined) || (event.which == 9 && cellobj.iColumn == 3 && sGridCtrlId == "id_tblUserSelection")) {
            cellobj.processDefault(event);
            return true;
        }

        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("NUMBERLIST"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (cellobj.ColumnAttribute.ctrlid == "id_tblUserSelection_User") {
                    var filterArray = [];
                    for (var i = 0; i < getTotalRows() ; i++) {
                        var obj = FGRIDCONTROL.getCellObject("id_tblUserSelection", i + 1, 1);
                        if (obj.CellData.value != "" && obj.CellData.value != undefined && i != obj.iRow - 1) {
                            filterArray.push(obj.CellData.value);
                        }
                    }
                    if (filterArray.length == "0") {
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText($(element).find("option:selected").text());
                    }
                    else if ($.inArray(parseInt(element.value), filterArray) == -1) {
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText($(element).find("option:selected").text());
                    }
                    else {
                        cellobj.setCellData("value", "");
                        cellobj.setCellText("");
                    }
                }
                else {
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText($(element).find("option:selected").text());
                }
                break;
            case MasterDataType.get("BOOLEAN"):
                //element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                //cellobj.setControl(element, cellobj.getCellData("value"));
                break;
            case MasterDataType.get("NUMBER"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                cellobj.setCellData("value", element.value);
                cellobj.setCellText(element.value);
                break;
            default:
                if (cellobj.ColumnAttribute.ctrlid == "id_tblUserSelection_LimitDefination") {
                    element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                    $('#divCondtionModal').modal("hide");
                }
                else {
                    if (cellobj.ColumnAttribute.ctrlid == "id_tblUserSelection_Variable") {
                        element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText(element.value);
                    }
                }
                break
        }
    }
    return (true);
}
var cellObjHolderForUserSelectionCondition = "";
var lastCellObj = null;
function onEnter(cellobj, event) {
    debugger
    var element = null;
    var sGridCtrlId = "";
    var iValue = 0;
    var data = null;
    lastCellObj = cellobj;
    sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);

    var EventCol = $($(cellobj.cell).closest('tr')).find('.CommonAlerts');
    if (cellobj.bHidden == true || EventCol.length > 0) {
        if (!$(EventCol).is(":checked")) {
            cellobj.processDefault(event);
            return;
        }
    }

    if ((cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_Recepient" && cellobj.iRow == 1) || (event.which == 9 && cellobj.iColumn == 2 && sGridCtrlId == "id_tblUserSelection")) {
        cellobj.processDefault(event);
        return;
    }

    switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
        case MasterDataType.get('NUMBER'):
            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            cellobj.setControl(element, cellobj.getCellData("value"));
            break;
        case MasterDataType.get("NUMBERLIST"):
            if ((cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_SMSTemplate" || cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_EmailTemplate" ||
                                    cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_Alerts" || cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_EmailHeaderTemplate")) {
                $("#id_tblAlerts_Alerts,#id_tblAlerts_SMSTemplate,#id_tblAlerts_EmailTemplate,#id_tblAlerts_EmailHeaderTemplate,#ddlAlertMessage1").empty();
                getEmailSMSTemplate();
            }
            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            if (cellobj.getCellData("value") == null) {
                cellobj.setControl(element, "0");
            }
            else {
                cellobj.setControl(element, cellobj.getCellData("value"));
            }
            $(element).show();
            break;
        case MasterDataType.get("BOOLEAN"):
            //element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            //cellobj.setControl(element, cellobj.getCellData("value"));
            cellobj.processDefault(event);
            return;
        default:
            if (cellobj.ColumnAttribute.ctrlid == "id_tblUserSelection_LimitDefination") {
                cellObjHolderForUserSelectionCondition = cellobj;
                $('#divCondtionModal').modal("show");
                $(".clsdivUserSelectionCondition").hide();
                if ($("#divUserSelectionCondition" + cellobj.iRow).length > 0) {
                    $("#divUserSelectionCondition" + cellobj.iRow).css({ "display": "block", "margin": "10px" });
                    if (!isNaN($("#hdnFilterString" + cellobj.iRow).attr("data-limiton"))) {
                        $("#ddlLimiton").val($("#hdnFilterString" + cellobj.iRow).attr("data-limiton"));
                    }
                } else {
                    var divCloned = $("#divUserSelectionCondition").clone();
                    $(divCloned).attr("data-irow", cellobj.iRow);
                    $(divCloned).attr("id", "divUserSelectionCondition" + cellobj.iRow);
                    $($(divCloned).find('input')).attr("id", "hdnFilterString" + cellobj.iRow);
                    var getFiterControlHtml = getFilterArrayUserSelectionStringBasedOnRowNo(cellobj.iRow, null);
                    $(divCloned).append(getFiterControlHtml.data);
                    $(divCloned).css({ "display": "block", "margin": "10px" });
                    $("#dvForMultipleUserSelectionCondition").append($(divCloned));

                }
            }
            else if (cellobj.ColumnAttribute.ctrlid == "id_tblUserSelection_Variable") {
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                cellobj.setControl(element, cellobj.getCellData("value"));
            }
            else {
                cellobj.processDefault(event);
            }
            break;
    }
}
function getFilterArrayUserSelectionStringBasedOnRowNo(RowNo, filter) {
    return NETWORK.executeServerMethod(GLOBAL.getContextPath("GetCondition", "Authorization", "Masters"), true,
                           { iVoucherType: parseInt($("#hdnVoucherType").val()), FilterArray: filter, bUserSelection: true, iUserSelectionSubFilterId: RowNo }, "HTML", false);
}
var arrLimitCondition = [];
function modalConditionSave(element) {
    //debugger
    var VisibleFilterControlRow = $(".clsdivUserSelectionCondition:visible").attr("data-irow");
    var arrUserSelectionFilterConditionForCurrentRow = getFilterValueForAuthorization($("#hdnAuthorizationMenuId").val(), VisibleFilterControlRow);
    //for update the Advancefilter control on Ok or Save filter control so that leave event of last row should update 
    FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();

    if (arrUserSelectionFilterConditionForCurrentRow.length > 0) {
        var getFiterStringValueForUserSelection = NETWORK.executeServerMethod(GLOBAL.getContextPath("getFiterStringValueForUserSelection", "Authorization", "Masters"), true, { arrFilterCondition: arrUserSelectionFilterConditionForCurrentRow }, "JSON", false);
        $("#hdnFilterString" + cellObjHolderForUserSelectionCondition.iRow).val(getFiterStringValueForUserSelection.data);
        $("#hdnFilterString" + cellObjHolderForUserSelectionCondition.iRow).attr("data-limiton", $("#ddlLimiton").val());
        cellObjHolderForUserSelectionCondition.setCellData("value", $("#hdnFilterString" + cellObjHolderForUserSelectionCondition.iRow).val());
        cellObjHolderForUserSelectionCondition.setCellText($("#hdnFilterString" + cellObjHolderForUserSelectionCondition.iRow).val());
    }
    else {
        cellObjHolderForUserSelectionCondition.setCellData("value", "");
        cellObjHolderForUserSelectionCondition.setCellText("");
    }
    arrLimitCondition = [];
    var iTotalRows = FGRIDCONTROL.getTotalRows(id_tblUserSelection);

    for (var i = 0; i < iTotalRows; i++) {
        var arrUserSelectionFilterCondition = getFilterValueForAuthorization($("#hdnAuthorizationMenuId").val(), parseInt(i) + 1);
        if (arrUserSelectionFilterCondition != null) {
            if (arrUserSelectionFilterCondition.length > 0) {
                arrLimitCondition.push({ myUserSelectionFilter: arrUserSelectionFilterCondition, rowNo: i });
            }
        }
    }

    return (onLeave(cellObjHolderForUserSelectionCondition));
}
function getEmailSMSTemplate() {
    debugger
    var tableData = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetEmailSMSTemplate", "Authorization", "Masters"), true, { iAuthType: $("#hdnAuthorizationType").val(),iVoucherType: parseInt($("#hdnVoucherType").val()) }, "JSON", false);
    if (tableData.data != null) {
        debugger
        var BindEmailTemplateData = tableData.data[0];
        var BindSMSTemplateData = tableData.data[1];
        for (var i = 0; i < BindEmailTemplateData.length; i++) {
            $('#id_tblAlerts_EmailTemplate').append("<option value=" + BindEmailTemplateData[i].ID + ">" + BindEmailTemplateData[i].Name + "</option>")
        }
        //for (var j = 0; j < BindSMSTemplateData.length; j++) {
        //    $('#id_tblAlerts_Alerts').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
        //    $('#id_tblAlerts_SMSTemplate').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
        //    $('#ddlAlertMessage1').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
        //    $('#id_tblAlerts_EmailHeaderTemplate').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
        //}
        for (var j = 0; j < BindSMSTemplateData.length; j++) {
               
            if(BindSMSTemplateData[j].Type == EmailHEader)
            {
                $('#id_tblAlerts_EmailHeaderTemplate').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
            }
            
            else if (BindSMSTemplateData[j].Type == SMS)
            {
                $('#id_tblAlerts_SMSTemplate').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
            }
            
            else if(BindSMSTemplateData[j].Type == DashBoard)
            {
                $('#id_tblAlerts_Alerts').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
                $('#ddlAlertMessage1').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")

            }
        }
        

    }
    else {
        COMMON.prototype.showMessage('Error in getting Email and Template Data.');
    }
}
function getAlertTableData() {
    debugger
    var tableData = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAlertsTableData", "Authorization", "Masters"), true, {}, "JSON", false);
    if (tableData.data.length > 0) {
        debugger
        var objData = tableData.data[0];
        if (tableData.data[0].Received) {
            $('#chkReceived').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= 6; iColCounter++) {
                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 1, iColCounter);
                var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["ReceivedEmailHeaderTemplateId"]);
                    $(element).val(objData["ReceivedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["ReceivedEmailTemplateId"]);
                    $(element).val(objData["ReceivedEmailTemplateId"]);
                }
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["ReceivedSmsTemplateId"]);
                    $(element).val(objData["ReceivedSmsTemplateId"]);
                }
                else if (iColCounter == 5) {
                    cellobj.setCellData("value", objData["ReceivedAlertTemplateId"]);
                    $(element).val(objData["ReceivedAlertTemplateId"]);
                }
                else if (iColCounter == 6) {
                    //cellobj.processDefault(event);
                    //return false;
                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }
            }
            //   $('#id_tblAlerts_EmailTemplate').val(tableData.data.ApprovedEmailTemplateId);
        }
        if (tableData.data[0].Approved) {
            $('#chkApproved').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= 6; iColCounter++) {

                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 2, iColCounter);
                var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["ApprovedEmailHeaderTemplateId"]);
                    $(element).val(objData["ApprovedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["ApprovedEmailTemplateId"]);
                    $(element).val(objData["ApprovedEmailTemplateId"]);
                }
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["ApprovedSmsTemplateId"]);
                    $(element).val(objData["ApprovedSmsTemplateId"]);
                }
                else if (iColCounter == 5) {
                    cellobj.setCellData("value", objData["ApprovedAlertMsg"]);
                    $(element).val(objData["ApprovedAlertMsg"]);
                }
                else if (iColCounter == 6) {
                    cellobj.setCellData("value", objData["ApprovedRecipientId"]);
                    $(element).val(objData["ApprovedRecipientId"]);
                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }
            }
        }
        if (tableData.data[0].Rejected) {
            $('#chkRejected').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= 6; iColCounter++) {
                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 3, iColCounter);
                var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["RejectedEmailHeaderTemplateId"]);
                    $(element).val(objData["RejectedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["RejectedEmailTemplateId"]);
                    $(element).val(objData["RejectedEmailTemplateId"]);
                }
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["RejectedSmsTemplateId"]);
                    $(element).val(objData["RejectedSmsTemplateId"]);
                }
                else if (iColCounter == 5) {
                    cellobj.setCellData("value", objData["RejectedAlertMsg"]);
                    $(element).val(objData["RejectedAlertMsg"]);
                }
                else if (iColCounter == 6) {
                    cellobj.setCellData("value", objData["RejectedRecipientId"]);
                    $(element).val(objData["RejectedRecipientId"]);
                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }
            }
        }
        if (tableData.data[0].Stopped) {

            $('#chkStopped').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= 6; iColCounter++) {
                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 4, iColCounter);
                var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["StoppedEmailHeaderTemplateId"]);
                    $(element).val(objData["StoppedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["StoppedEmailTemplateId"]);
                    $(element).val(objData["StoppedEmailTemplateId"]);
                }
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["StoppedSmsTemplateId"]);
                    $(element).val(objData["StoppedSmsTemplateId"]);
                }
                else if (iColCounter == 5) {
                    cellobj.setCellData("value", objData["StoppedAlertMsg"]);
                    $(element).val(objData["StoppedAlertMsg"]);
                }
                else if (iColCounter == 6) {
                    cellobj.setCellData("value", objData["StoppedRecipientId"]);
                    $(element).val(objData["StoppedRecipientId"]);
                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }

            }
        }
    }
    else {
        COMMON.prototype.showMessage("Error in getting Alert table data");
    }
}
function timeDateRangeClick(element) {
    debugger
    var chkId = $(element).attr('id');
    if (chkId == "chkDateRange") {
        if ($("#" + chkId).is(':checked')) {
            $('.clsDpDateRange').attr('disabled', false);
            $('.clsDpDateRange').removeClass('grey');
        }
        else {
            $('.clsDpDateRange').attr('disabled', true);
            $('.clsDpDateRange').addClass('grey');
        }
    }
    else {
        if ($("#" + chkId).is(':checked')) {
            $('.clsDpTimeRange').attr('disabled', false);
            $('.clsDpTimeRange').removeClass('grey');
        }
        else {
            $('.clsDpTimeRange').attr('disabled', true);
            $('.clsDpTimeRange').addClass('grey');
        }

    }
}
function StatusUpdate(element) {
    //debugger;
    $("#id_txtStatusUpdate").val($(element).attr("data-sFieldName"));
    $("#id_txtStatusUpdate").attr("data-ifieldid", $(element).attr("data-ifieldid"));
    //$("#id_txtStatusUpdate").closest('div').removeClass("open");
    $("#ddlStatusUpdate").hide();

}

    function onRightClickContext(obj, event)
{
    debugger
    var positions = setContextMenuPostionGrid(event, document.getElementById('GridContextMenu'));
//    $("#GridContextMenu").css({ left: positions.x, top: positions.y });

    $('#GridContextMenu').attr('style', 'width:120px;min-width:20px;padding-top:0px;padding-bottom:0px;border:1px solid rgb(220, 217, 217) !important; position:absolute !important;left:' + positions.x.toString() + 'px' + '!important;' +
                                                                                         'top:' + Math.abs(positions.y).toString() + 'px' + '!important;' + 'display:block;');



    $('#GridContextMenu').fadeIn(500);
    $("#GridContextMenu").attr('data-cellrow', obj.iRow);
    FCommon.UI.stopKeyProcess(event);
}

function onUserSelectionSerialNoHover(obj, event) {
    debugger
    var sControl = "";
    var sContent = "";
    var bSelect = true;

    if (obj.bEnter == true) {
        FCommon.UI.setText(obj.Cell, "");

        obj.Cell.style.paddingLeft = "";


        sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
        sControl += obj.iRow;
        sControl += "</div>";

        //sControl = "<div class='col-xs-12 Fcontrolbuttons' style='padding: 0px;'>";
        //sControl += "<div onclick='TRANSACTION_ENTRY.BODY.onDeleteRow(" + obj.iRow + ", event);' class='col-xs-6' data-toggle='tooltip' title='Remove Row' style='padding: 0px;'><span class='icon-delete icon-font8'></span></div>";
        //sControl += "<div onclick='TRANSACTION_ENTRY.BODY.onInsertRow(" + obj.iRow + ", event);' class='col-xs-6' data-toggle='tooltip' title='Insert Row' style='padding: 0px;'><span class='icon-insertrow icon-font8'></span></div>";
        //sControl += "</div>"

        $(obj.Cell).html(sControl);

        sContent = "<table>";
        sContent += "<tbody class='grid_row_menu'>";
        sContent += "<tr onclick='onUserSelectionDeleteRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Delete Current Row'>";
        sContent += "<td><span class='icon-delete icon-font8'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp;Delete Row</div></td>";
        sContent += "</tr>";
        sContent += "<tr onclick='onUserSelectionInsertRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Add Row Above'>";
        sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp;Insert Row</div></td>";
        sContent += "</tr>";

        bSelect = false;
        if (isRowSelectedForUserSelection(obj.iRow) == false) {
            bSelect = true;
        }

        sContent += "<tr onclick='onUserSelectionSelectRow(" + obj.iRow + ", " + bSelect + ", event);'>";

        if (bSelect == true) {
            sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;Select Row</div></td>";
        }
        else {
            sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;Unselect Row</div></td>";
        }

        sContent += "</tr>";
        sContent += "</tbody>";
        sContent += "</table>";

        $("#id_row_popup").popover({
            type: "tooltip",
            trigger: "manual",
            placement: $("#hdnLanguageId").val() == "0" ? "right" : "left",
            html: true,
            content: sContent
        });

        $("#id_row_popup").popover('show');
    }
    else {
        $("#id_row_popup").popover('destroy');

        FCommon.UI.removeChildren(obj.Cell);
        FCommon.UI.setText(obj.Cell, obj.iRow);
        obj.Cell.style.paddingLeft = "3px;";
    }
}
function isRowSelectedForUserSelection(iRow) {
    var bSelected = false;
    var eleRow = null;

    eleRow = FGRIDCONTROL.getRowElement("id_tblUserSelection", iRow);
    if (FCommon.UI.isValidObject(eleRow) == true) {
        if (FCommon.String.isNullOrEmpty(eleRow.style.backgroundColor, true) == false) {
            bSelected = true;
        }
    }

    return (bSelected);
}
function getTotalRows() {
    return document.getElementById('id_tblUserSelection_body').rows.length;
}
function onUserSelectionDeleteRow(iRow, event) {
    debugger
    iRow = $("#GridContextMenu").attr('data-cellrow');
    if (confirm(getResourceValue("ConfirmToDeleteRow", GetMasterTransAuthResourceMessages))) {
        FCommon.UI.stopKeyProcess(event);
        if (getTotalRows() == 1) {
            COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");

            return;
        }

        FGRIDCONTROL.update("id_tblUserSelection");

        FGRIDCONTROL.deleteRows("id_tblUserSelection", iRow, 1);
        //EXCHANGERATEDEF.resizeExchangeGridColumnsWidth();
    }
}
function onUserSelectionSelectRow(iRow, bSelect, event) {
    debugger
    iRow = $("#GridContextMenu").attr('data-cellrow');
    var eleRow = null;

    try {
        FCommon.UI.stopKeyProcess(event);
        eleRow = FGRIDCONTROL.getRowElement("id_tblUserSelection", iRow);
        if (bSelect == true) {
            eleRow.style.backgroundColor = "rgb(222, 245, 253)";
        }
        else {
            eleRow.style.backgroundColor = "";
        }
    }
    catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
    }
}
function onUserSelectionInsertRow(iRow, event) {
    debugger
    iRow = $("#GridContextMenu").attr('data-cellrow');
    try {
        FCommon.UI.stopKeyProcess(event);
        FGRIDCONTROL.insertRows("id_tblUserSelection", iRow, 1);
        FGRIDCONTROL.update("id_tblUserSelection");
        for (var i = 0; i < $(".clsdivUserSelectionCondition").length; i++) {
            if (!isNaN($($(".clsdivUserSelectionCondition")[i]).attr("data-irow"))) {
                var divCounter = parseInt($($(".clsdivUserSelectionCondition")[i]).attr("data-irow"));
                if (parseInt(divCounter) >= iRow) {
                    $($(".clsdivUserSelectionCondition")[i]).attr("data-irow", (divCounter + 1));
                    var id = $($(".clsdivUserSelectionCondition")[i]).attr("id");
                    id = id.replace(/\d+/g, divCounter + 1);
                    $($(".clsdivUserSelectionCondition")[i]).attr("id", id);
                    var filterArray = getFilterValueForAuthorization($("#hdnAuthorizationMenuId").val(), divCounter);
                    var strNewDiv = getFilterArrayUserSelectionStringBasedOnRowNo(divCounter + 1, filterArray);
                    $("#" + id).html("").html(strNewDiv.data);
                    $("#" + id).append("<input type='hidden' id=hdnFilterString" + (divCounter + 1));
                }
            }
        }
        //for (var j = iRow; j < getTotalRows(); j++) {
        //    var rowid=$($("#id_tblUserSelection_body").find('tr')[iRow]).attr(id);
        //    rowid = rowid.replace(/\d+/g, iRow+1);
        //}
    }
    catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
    }
}

function getFilterValueForTransAuthorization(iFilterId, iSubFilterId) {
    //Added by Niranjan to call the FILTER js file method to get the array filter details.
    debugger
    // return FILTER.getFilterValue(iFilterId, iSubFilterId);

    var arrfilterValue = FILTER.getFilterValue(iFilterId, iSubFilterId);
    return arrfilterValue;
    //

    //  FILTER.setContrlOrgParent(iFilterId, iSubFilterId);
    var sAdvanceFilterId = FILTER.getAdvanceFilterId(iFilterId, iSubFilterId);
    var sDefaultFilterId = FILTER.getDefaultFilterId(iFilterId, iSubFilterId);
    var iCounter = 0;
    var iCountDefaultValues = 0;
    var iComapareWith = 0;
    var iConjuction = 0;
    var iOperator = 0;
    var iDataType = 0;
    var iFieldId = 0;
    var iSubParentId = 0;
    var sCompareText = "";
    var sCompareValue = "";
    var numberlist = null;
    var eleAdvance = null;
    var arrFilter = [];
    var arrDefaultValues = [];
    var eleRow = null;
    var eleField = null;
    var eleValue = null;
    var sFieldName = "";
    var iIndex = 0;
    var isgroup = false;
    var iParentId = 0;

    //document.getElementById(sAdvanceFilterId).dataset.invalid = false;
    eleAdvance = FILTER.ADVANCEFILTER.getRowContainer(iFilterId, iSubFilterId);
    var defaulFilter = document.getElementById(FILTER.getDefaultFilterId(iFilterId, iSubFilterId));
    if (COMMON.prototype.isValidObject(eleAdvance) == true) {
        var defaulFilter = document.getElementById(FILTER.getDefaultFilterId(iFilterId, iSubFilterId));
        if (FCommon.UI.isValidObject(defaulFilter) == true) {
            if (defaulFilter.getBoundingClientRect().top > 0) {
                arrDefaultValues = FILTER.getDefaultFilterValues(iFilterId, iSubFilterId);
                FILTER.displayAdvanceFilter(arrDefaultValues, iFilterId, iSubFilterId, false);
            }
        }

        for (iCounter = 0; iCounter < eleAdvance.children.length; iCounter++) {
            eleRow = eleAdvance.children[iCounter];
            iIndex = FCommon.UI.getElementPosition(eleRow);
            if (iIndex < 1) { // Some error
                return;
            }

            iConjuction = parseInt(eleRow.children[0].children[0].value);

            if (arrFilter.length == 0 && iConjuction == -1)
                iConjuction = 0;

            eleField = eleRow.children[0].nextElementSibling.children[0];
            iOperator = FConvert.toInt(eleRow.children[0].nextElementSibling.nextElementSibling.children[0].value);
            iComapareWith = FConvert.toInt(eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.children[0].value);
            eleValue = eleRow.children[0].nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.children[0];
            sFieldName = eleField.value;
            sCompareText = "";
            sCompareValue = "";
            iDataType = parseInt(eleField.dataset.datatype);
            iFieldId = parseInt(eleField.dataset.fieldid);
            iSubParentId = parseInt(eleField.dataset.subparent);
            iParentId = parseInt(eleField.dataset.parent);
            isgroup = FConvert.toBoolean(eleValue.getAttribute('data-isgroup'));
            switch (iComapareWith) {
                case RD_CompareWith.get('VALUE'):
                    switch (iDataType) {
                        case MasterDataType.get('TEXT'):
                            sCompareValue = eleValue.value;
                            break;
                        case MasterDataType.get('NUMBER'):
                        case MasterDataType.get('FRACTION'):
                        case MasterDataType.get('BIGNUMBER'):
                        case MasterDataType.get('SMALLNUMBER'):
                        case MasterDataType.get('TINYNUMBER'):
                            sCompareValue = eleValue.value;
                            break;
                        case MasterDataType.get('BOOLEAN'):
                            sCompareValue = eleValue.checked;
                            break;
                        case MasterDataType.get('DATETIME'):
                        case MasterDataType.get('DATE'):
                            sCompareValue = eleValue.dataset.value;
                            break;
                        case MasterDataType.get('TIME'):
                            sCompareValue = eleValue.dataset.value;
                            break;
                        case MasterDataType.get('NUMBERLIST'):
                        case MasterDataType.get('STRINGLIST'):
                            sCompareValue = eleValue.dataset.value;
                            sCompareText = eleValue.value;
                            numberlist = eleValue.getAttribute('data-numberlist');
                            break;
                        case MasterDataType.get('MASTER'):
                        case MasterDataType.get('EXTERNALTABLE'):
                            sCompareValue = eleValue.dataset.value;
                            sCompareText = eleValue.value;
                            //if (eleField.value == "Name") {
                            //    iDataType = MasterDataType.get('NUMBER');
                            //}
                            break;
                    }
                    break;
                case RD_CompareWith.get('FORMULA'):
                    sCompareValue = document.getElementById("FilterFormulaContrl_" + sAdvanceFilterId + iIndex).value;
                    break;
                case RD_CompareWith.get('FIELD'):
                    switch (iDataType) {
                        case MasterDataType.get('TEXT'):
                            sCompareValue = eleValue.value;
                            break;
                        case MasterDataType.get('NUMBER'):
                        case MasterDataType.get('FRACTION'):
                        case MasterDataType.get('BIGNUMBER'):
                        case MasterDataType.get('SMALLNUMBER'):
                        case MasterDataType.get('TINYNUMBER'):
                            sCompareValue = eleValue.value;
                            break;
                        case MasterDataType.get('BOOLEAN'):
                            sCompareValue = eleValue.checked;
                            break;
                        case MasterDataType.get('DATETIME'):
                        case MasterDataType.get('DATE'):
                            sCompareValue = eleValue.dataset.value;
                            break;
                        case MasterDataType.get('TIME'):
                            sCompareValue = eleValue.dataset.value;
                            break;
                        case MasterDataType.get('NUMBERLIST'):
                        case MasterDataType.get('STRINGLIST'):
                            sCompareValue = eleValue.dataset.value;
                            sCompareText = eleValue.value;
                            numberlist = eleValue.getAttribute('data-numberlist');
                            break;
                        case MasterDataType.get('MASTER'):
                        case MasterDataType.get('EXTERNALTABLE'):
                            sCompareValue = eleValue.dataset.value;
                            sCompareText = eleValue.value;
                            break;
                    }
                    break;
                case RD_CompareWith.get('DATERANGE'):
                    sCompareValue = eleValue.dataset.id;
                    break;
                default:
                    break;
            }
            if (iFieldId > 0 && iConjuction != -1) {
                if (iOperator == -1) {
                    if (sCompareValue == undefined || sCompareValue.length == 0) {
                        COMMON.prototype.showMessage(arrFilterResourceMsgs.msgFilterConditionisNotValid, "Error");
                        return null;
                    }
                }
            }
            if (iOperator == 6 || iOperator == 7) {
                if (iConjuction != -1 && iOperator != -1 && iFieldId != NaN) {
                    arrFilter.push(
                        {
                            CompareText: sCompareText,
                            CompareValue: sCompareValue,
                            CompareWith: iComapareWith,
                            Conjuction: iConjuction,
                            DataType: iDataType,
                            FieldId: iFieldId,
                            IsGroup: isgroup,
                            Operator: iOperator,
                            SubParentId: iSubParentId,
                            ParentId: iParentId,
                            FieldName: sFieldName,
                            numberlist: numberlist
                        });
                }
                else if (bDataChanged == true) {
                    document.getElementById(sAdvanceFilterId).dataset.invalid = true;
                }
            }
            else {
                if (iComapareWith != -1 && iConjuction != -1 && iOperator != -1 && sCompareValue != undefined && sCompareValue.length != 0 && iFieldId != NaN) {
                    arrFilter.push(
                        {
                            CompareText: sCompareText,
                            CompareValue: sCompareValue,
                            CompareWith: iComapareWith,
                            Conjuction: iConjuction,
                            DataType: iDataType,
                            FieldId: iFieldId,
                            IsGroup: isgroup,
                            Operator: iOperator,
                            SubParentId: iSubParentId,
                            ParentId: iParentId,
                            FieldName: sFieldName,
                            numberlist: numberlist
                        });
                }
                else if (bDataChanged == true) {
                    document.getElementById(sAdvanceFilterId).dataset.invalid = true;
                }
            }
        }
        //if (arrFilter.length > 0) {
        //    FILTER.ClearDefaultFilter(iFilterId, iSubFilterId);
        //}
        for (var iArr = 0; iArr < arrfilterValue.length; iArr++) {
            arrfilterValue[iArr].ParentId = arrFilter[iArr].ParentId;
            arrfilterValue[iArr]['FieldName'] = arrFilter[iArr].FieldName;
        }
        return (arrfilterValue);

    }

    return null;
}

function getFilterValueForAuthorization(iFilterId, iSubFilterId) {
    //Added by Niranjan to call the FILTER js file method to get the array filter details.
    debugger
    return FILTER.getFilterValue(iFilterId, iSubFilterId);
}
function onDivScroll(body, evt) {
    //debugger
    OPTIONCONTROL.updatePopupPosition();
    DATEPICKER.collapseAllPopups();
    FILTER.CollapseFilterTree();
}
var AlertsOldValue = 0;
function AlertsDDlChange(element, eventType) {
    try {
        if (eventType.type == "click")
            AlertsOldValue = element.value;
        else {
            if (element.value == "")
                return false;
            var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("AlertsValidation", "Authorization", "Masters"),
                                                  true, {
                                                      AlertValue: element.value, iVoucherType: parseInt($("#hdnVoucherType").val()),
                                                      iAuthorizationType: FConvert.toInt($("#hdnAuthorizationType").val()), id: element.id
                                                  }, "JSON", false, "",
                                                      "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
            if (result.lValue > 0) {
                if (result.data != "") {
                    COMMON.prototype.showMessage(result.data);
                    $(element).val(AlertsOldValue);
                    return false;
                }
            } else {
                COMMON.prototype.showMessage(result.Error);
                return false;
            }
        }
    } catch (ex) {
        alert("Exception:AlertsDDlChange " + ex.message);
        return false;
    }
}





function AskRemarksonapproval(ele) {
    // debugger
    if ($('#chkAskRemarksonapproval').is(":checked")) {
        document.getElementById("chkmakeAskRemarksonapproval").disabled = false;
        //document.getElementById("chkmakeAskRemarksonapproval").checked;


    }
    else {

        document.getElementById("chkmakeAskRemarksonapproval").disabled = true;
        document.getElementById("chkmakeAskRemarksonapproval").checked = false;
        document.getElementById("chkmakeAskRemarksonapproval").style.backgroundColor = "grey";

    }

}



function AskRemarksonRejection(ele) {
    debugger
    if ($('#chkAskremarksonRejection').is(":checked")) {

        document.getElementById("chkmakeAskRemarksonRejection").disabled = false;
        //document.getElementById("chkmakeAskRemarksonRejection").checked;
    }
    else {
        document.getElementById("chkmakeAskRemarksonRejection").disabled = true;
        document.getElementById("chkmakeAskRemarksonRejection").checked = false;
        document.getElementById("chkmakeAskRemarksonRejection").style.backgroundColor = "grey";

    }
}
Authorization = {
    changeGridRow: function (cellobj, event) {
        debugger
        if (document.getElementById("chkReceived").checked == false) {

            FGRIDCONTROL.clearRowData("id_tblAlerts", 1)
            FGRIDCONTROL.update("id_tblAlerts")
        }
    },
    changeGridRow1: function (cellobj, event) {
        // debugger
        if (document.getElementById("chkApproved").checked == false) {
            FGRIDCONTROL.clearRowData("id_tblAlerts", 2)
            FGRIDCONTROL.update("id_tblAlerts")

        }
    },
    changeGridRow2: function (cellobj, event) {
        debugger
        if (document.getElementById("chkRejected").checked == false) {
            FGRIDCONTROL.clearRowData("id_tblAlerts", 3)
            FGRIDCONTROL.update("id_tblAlerts")
        }
    },
    changeGridRow3: function (cellobj, event) {
        debugger
        if (document.getElementById("chkStopped").checked == false) {
            FGRIDCONTROL.clearRowData("id_tblAlerts", 4)
            FGRIDCONTROL.update("id_tblAlerts")

        }
    }
};
var GetMasterTransAuthResourceMessages;
var AuthDesignAreaInnerHTML ;
var BudgetCount;
var Assetcount;
var g_DeletedNode;
var today;
var AllauthorizationDetails=[];
var EmailHEader;
var Dashboard;
var m_tableData;
var VoucherType;

function deleteFBProfile() {
    debugger
    var authDetailsId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
    var bMasterAuthorization = $("#hdnAuthorizationName").val().trim() == "Budget" ? false : true;
    if (authDetailsId != "0") {
        if (confirm(getFBResourceValue("msgAuthDeleteSure", GetMasterTransAuthResourceMessages))) {
            if (authDetailsId != "0") {
                var DeleteAuthorizationResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("DeleteAuthorizationProfile", "Authorization", "Masters"), true,
                    { eAuthoriztionType: $('#hdnAuthorizationType').val(), iAuthorizationId: authDetailsId }, "JSON", true, "DeleteFBAuthorizationProfileSucess", "", "");
            }
        }
        else {
            return false;
        }
    }
}

function DeleteFBAuthorizationProfileSucess(bSuccess, Data) {
    debugger
    if (bSuccess == true && Data == "") {
        $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);

        OPTIONCONTROL.clear("ctrlAuthorizationH");
        if ($('#hdnAuthorizationType').val() == 4) {
            DATEPICKER.setDate("dpAffectedDate", today);
        }
        COMMON.prototype.showMessage(getFBResourceValue("msgAuthorizationDelete", GetMasterTransAuthResourceMessages));
    }
    else {
        COMMON.prototype.showMessage("Error in deleting Authorization. " + Data);
        return false;
    }
}




function getFBVoucherData(ele, eAuthType) {
    //debugger
    $.ajax({
        url: GLOBAL.getContextPath("getVoucherList", "Authorization", "Masters"),
        type: "POST",
        dataType: "html",
        data: { term: ele.value, eAuthType: eAuthType },
        success: function (data) {

            if (data != null) {
                $("#id_Auth_menu").html("").html(data);
            }
        }
    });
}

function VoucherFBClick(ctrl) {
    //debugger
    if (ctrl != undefined) {
        AllauthorizationDetails = AllauthorizationDetails.splice(AllauthorizationDetails.length, 1);
        TempArrayForKeepUnposted = [];
        //if (bMasterAuthorization == undefined) {
        //    bMasterAuthorization = false;
        //}
        var eAuthType = $('#hdnAuthorizationType').val();
        var obj = ctrl.getAttribute("data-VoucherName")
        document.getElementById("txtDoc").value = obj;
        $('#txtDoc').attr('data-vouchertype', ctrl.getAttribute("data-VoucherType"));


        OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = ' + eAuthType + ' and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        OPTIONCONTROL.setFilter('CopyAuthorization', 'iAuthorizationType = ' + eAuthType + ' and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        OPTIONCONTROL.setControlValue("CopyAuthorization", "0");

        //if (bMasterAuthorization == false) {
        //    OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = 2 and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        //}
        //else {
        //    OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = 1 and  iDocumentId =' + ctrl.getAttribute("data-VoucherType"));
        //}
        OPTIONCONTROL.setControlValue("ctrlAuthorizationH", "0");
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationData", "Authorization", "Masters"), true, { iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $('#hdnAuthorizationType').val() }, "JSON", false);
        //debugger
        authorizationFlowResult.data.bIsItSales == true ? $(".clsInventory").show() : $(".clsInventory").hide();


        $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
        $('.clsInitialRejection').prop('checked', false);
        $('#ddlAuthStatus').val('0');
        if ($("#hdnPanelValue").val() == "1") {
            $('#spnHidePanel').css("display", "block");
        }
        else {
            $('#spnHidePanel').css("display", "none");
        }
        //if (OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == null || OPTIONCONTROL.getControlValue("ctrlAuthorizationH") == "0") {
        //    OPTIONCONTROL.setControlText("ctrlAuthorizationH", "Add New Authorization Flow");
        //}

        if (ctrl.getAttribute("data-VoucherType") == "1" || ctrl.getAttribute("data-VoucherType") == "2") {
            $('.clsDivHideProperties').show();
            ctrl.getAttribute("data-VoucherType") == "1" ? $('.clsHideProperties').hide() : $('.clsHideProperties').show();
        }

        $("#id_Auth_menu").hide();
        //debugger;
        if (authorizationFlowResult.data.myActive) {
            $('#chkActive').prop("checked", true);
        }
        else {
            $('#chkActive').prop("checked", false);
        }

        $("#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        $('#id_StartNode').removeClass('grey').addClass('theme_color-inverse');
        $("#ctrlAuthorizationH").focus();
    }
}


function showFBDropdown() {
    //debugger
    $('#id_Auth_menu').show();
    event.stopImmediatePropagation();
}


var DeletedAuthorizationDetailsIds = [];

function saveFBAuthorizationFlow(element) {
    //debugger
    var arrAuthorizationDetails = [];
    var arrDeletedAuthorizationDetailsIds = DeletedAuthorizationDetailsIds;
    var arrDeletedEscalationIds = []; var arrLevel = [];
    var arrDeletedUserSelectionIds = [];
    var KeepUnpostedInitialRejectionValue = 0;
    KeepUnpostedInitialRejectionValue = parseInt($('#ddlAuthStatus').val());
    var authorizationName = OPTIONCONTROL.getControlText('ctrlAuthorizationH').trim();
    if (authorizationName != "" && $('.clsdivLevelFlow').length > 1 && authorizationName != getFBResourceValue("msgAddNewAuthorizationFlow", GetMasterTransAuthResourceMessages)) {
        var objAuthorizationMasterTrans = {
            AccountTypeSelected: null,
            ActionOnInitialRejectionSuspendedMrpData: false,
            ActionOnInitialRejectionSuspendedVendorData: false,
            Active: $("#chkActive").is(":checked") ? true : false,
            Alwaysauthorizationstartsfromfirstlevel: $("#chkAlwaysauthorizationstartsfromfirstlevel").is(":checked") ? true : false,
            AuthorizationDetails: arrAuthorizationDetails,
            AuthorizationId: OPTIONCONTROL.getControlValue('ctrlAuthorizationH'),
            AuthorizationName: authorizationName,
            AuthorizationType: $("#hdnAuthorizationType").val(),
            CreatedBy: '0',
            CreatedDate: '0',
            DeletedAuthorizationDetailsIds: arrDeletedAuthorizationDetailsIds,
            DeletedEscalationIds: arrDeletedEscalationIds,
            DeletedUserSelectionIds: arrDeletedUserSelectionIds,
            DocumentId: $('#txtDoc').attr('data-vouchertype'),
            EditedFrom: false,
            EffectiveDate: DATEPICKER.getDate("dpAffectedDate"),
            KeepUnpostedFinalStatus: "0",
            KeepUnpostedInitialRejection: KeepUnpostedInitialRejectionValue,
            KeepUnpostedInitialStatus: "0",
            KeepUnpostedInitialSuspendCreditLimit: $('#chkSuspendCreditLimit').is(":checked") ? true : false,
            LocationId: "0",
            MarkDeleted: false,
            ModifiedBy: "0",
            ModifiedDate: "0"
        }
        $(".clsSpnLevelCheck").each(function () {
            if ($($(this).find("input[type=checkbox]")).is(":checked")) {
                var allLevel = $($(this).closest(".clsDivNode")).attr("data-level");
                arrLevel.push(parseInt(allLevel));
            }
        });
        // ////debugger;
        if (AllauthorizationDetails != null && AllauthorizationDetails.length > 0) {
            for (var i = 0; i < AllauthorizationDetails.length ; i++) {
                if (objAuthorizationMasterTrans.AuthorizationId > 0) {
                    if (AllauthorizationDetails[i].AuthorizationId != objAuthorizationMasterTrans.AuthorizationId) {
                        if ($("#chkActive").is(":checked") && AllauthorizationDetails[i].EffectiveDate <= objAuthorizationMasterTrans.EffectiveDate) {
                            COMMON.prototype.showMessage(getFBResourceValue("msgValidationForEffectiveDate", GetMasterTransAuthResourceMessages));
                            return false;
                        }
                    }
                }
                else {
                    if ($("#chkActive").is(":checked") && objAuthorizationMasterTrans.EffectiveDate <= AllauthorizationDetails[i].EffectiveDate) {
                        COMMON.prototype.showMessage(getFBResourceValue("msgValidationForEffectiveDate", GetMasterTransAuthResourceMessages));
                        return false;
                    }
                }
            }
        }

        var AuthorizationSave = NETWORK.executeServerMethod(GLOBAL.getContextPath("SaveAuthorizationFlow", "Authorization", "Masters"), true, { objAuthorizationMasterTrans: objAuthorizationMasterTrans, arrLevel: arrLevel }, "JSON", true, "FBAuthorizationSaveSuccess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");

    }
    else {
        if ($("#txtDoc").val() == "") {
            var strMessage = $('#hdnAuthorizationName').val() == "Transaction" ? "msgSelectDoc" : $('#hdnAuthorizationName').val() == "Pricebook" ? "msgSelectPriceBook" : "SelectMaster";
            COMMON.prototype.showMessage(getFBResourceValue(strMessage, GetMasterTransAuthResourceMessages));
        }
        else if (authorizationName == "") {
            COMMON.prototype.showMessage(getFBResourceValue("msgAuthCantBlank", GetMasterTransAuthResourceMessages));
            $('#ctrlAuthorizationH').focus().select();
        }
        else if ($('.clsdivLevelFlow').length == "1") {
            COMMON.prototype.showMessage(getFBResourceValue("msgCreateAuthorizationbeforesaving", GetMasterTransAuthResourceMessages));
        }

        return false;
    }
}
function FBAuthorizationSaveSuccess(bflag, data) {
    //debugger
    AllauthorizationDetails.splice(AllauthorizationDetails.length, 1);
    if (bflag == true && data == "") {
        var authorizationtype = $('#hdnAuthorizationType').val();// == "Transaction" ? 2 : 1;
        g_DeletedNode = 0;
        OPTIONCONTROL.setFilter('ctrlAuthorizationH', 'iAuthorizationType = ' + authorizationtype + ' and  iDocumentId =' + $('#txtDoc').attr("data-VoucherType"));
        OPTIONCONTROL.setControlValue("ctrlAuthorizationH", "0");
        OPTIONCONTROL.setFilter('CopyAuthorization', 'iAuthorizationType = ' + authorizationtype + ' and  iDocumentId =' + $('#txtDoc').attr("data-VoucherType"));
        OPTIONCONTROL.setControlValue("CopyAuthorization", "0");
        var isMasterAuthorization = $('#hdnAuthorizationName').val() == "Transaction" ? false : true;
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationFlow", "Authorization", "Masters"), true, { authorizationId: "0", iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $('#hdnAuthorizationType').val() }, "JSON", false);
        if (authorizationFlowResult.data != null) {
            // ////debugger
            if (authorizationFlowResult.data.lstAuthorizationMasterTrans != null) {
                for (var count = 0; count < authorizationFlowResult.data.lstAuthorizationMasterTrans.length; count++) {
                    if (authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId == $("#txtDoc").attr("data-VoucherType")) {
                        var Authdetail = {
                            AuthorizationId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationId,
                            AuthorizationName: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationName,
                            DocumentId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId,
                            EffectiveDate: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].EffectiveDate,
                        }
                        AllauthorizationDetails.push(Authdetail);
                    }
                    else {
                        AllauthorizationDetails = [];

                    }
                }
            }
            else {
                AllauthorizationDetails = [];
            }
            $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
            $('.clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel,#chkActive').prop('checked', false);
            DATEPICKER.setDate("dpAffectedDate", today);

            $('#ddlAuthStatus').val('0');
        }
        $("#id_Auth_menu").hide();
        COMMON.prototype.showMessage(getFBResourceValue("msgAuthorizationSave", GetMasterTransAuthResourceMessages));
    }
    else {
        COMMON.prototype.showMessage(data);
        ctrlFBAuthorizationLeave();
    }
}


function SucessBudgetReLoad(bflag, data) {
    if (bflag && data != "") {
        $("#page_Content").html('');
        $("#page_Content").html(data);
        COMMON.prototype.showMessage(getFBResourceValue("msgAuthorizationSave", GetMasterTransAuthResourceMessages));
    }
}

function clearClick() {
    debugger
    $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
    OPTIONCONTROL.setControlValue("ctrlAuthorizationH", "0");
    $("#ctrlAuthorizationH").val("");
    OPTIONCONTROL.setControlValue("CopyAuthorization", "0");
    $("#CopyAuthorization").val("");
    if ($("#ctrlAuthorizationH").val() == "") {
        document.getElementById("CopyAuthorization").disabled = false;
    }
    var ClearAuthorizationProfileResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("ClearAuthorizationProfile", "Authorization", "Masters"), true, {}, "JSON", true);
    $("#chkActive,.clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
    if ($('#hdnAuthorizationType').val() == 4) {
        DATEPICKER.setDate("dpAffectedDate", today);
    }
    DeletedAuthorizationDetailsIds = [];
}


function SucessclearClick(bflag, data) {
    if (bflag && data != "") {
        $("#page_Content").html('');
        $("#page_Content").html(data);
    }
}

//function clearClick() {
//  //debugger
//    $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
//    OPTIONCONTROL.setControlValue("ctrlAuthorizationH","0");
//    $("#ctrlAuthorizationH").val("");
//    var ClearAuthorizationProfileResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("ClearAuthorizationProfile", "Authorization", "Masters"), true, {}, "JSON", true);
//    // $('#txtDoc').attr({ "data-vouchertype": "" });
//    $("#chkActive,.clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
//    DeletedAuthorizationDetailsIds = [];
//}

function ctrlFBAuthorizationLeave() {
    debugger
    m_tableData = [];
    DeletedAuthorizationDetailsIds = [];
    var authorizationId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
    var bMasterAuthorization = false;
    if ($("#CopyAuthorization").val() != "" && authorizationId == 0) {
        return true;
    }
    if ($("#txtDoc").attr("data-VoucherType") != null && $("#txtDoc").attr("data-VoucherType") != "" && $("#txtDoc").attr("data-VoucherType") != undefined) {
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationFlow", "Authorization", "Masters"), true, { authorizationId: authorizationId, iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $("#hdnAuthorizationType").val() }, "JSON", false);
        if (authorizationId > 0) {
            document.getElementById("CopyAuthorization").disabled = true;
            $("#CopyAuthorization").val("");
            OPTIONCONTROL.setControlValue("CopyAuthorization", 0)
        }
        else {
            if (authorizationFlowResult.data != null && authorizationFlowResult.data.lstAuthorizationMasterTrans != null && authorizationFlowResult.data.lstAuthorizationMasterTrans.length > 0) {
                for (var i = 0; i < authorizationFlowResult.data.lstAuthorizationMasterTrans.length; i++) {
                    if (authorizationFlowResult.data.lstAuthorizationMasterTrans[i].DocumentId == $("#txtDoc").attr("data-VoucherType")) {
                        document.getElementById("CopyAuthorization").disabled = false;
                        break;
                    }
                    else {
                        document.getElementById("CopyAuthorization").disabled = true;
                    }
                }
            }
            else {
                document.getElementById("CopyAuthorization").disabled = true;
            }
        }


        if (authorizationFlowResult.data.myActive) {
            $('#chkActive').prop("checked", true);
        }
        else {
            $('#chkActive').prop("checked", false);
        }
        if (authorizationId != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
            DATEPICKER.setDate("dpAffectedDate", authorizationFlowResult.data.myAuthorizationMasterTrans.EffectiveDate);
        }
        else {
            DATEPICKER.setDate("dpAffectedDate", today);

        }
        $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        $('#li_delete').removeClass('grey');
        $('#li_delete').css({ "pointer-events": "auto" });
        if ($("#txtDoc").attr("data-VoucherType") != undefined && authorizationId != null) {//&& authorizationId != "0"

            if (authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
                // g_DeletedNode++;
                getFBAuthorizationWorkFlow(authorizationFlowResult, false);
                var OptionControlData = OPTIONCONTROL.getControlData('ctrlAuthorizationH');
                if (OptionControlData[3].exist == "1") {
                    $('#li_delete,#btnSaveAuthorization,.clsRemoveLevel').addClass('grey');
                    $('#li_delete,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "none" });
                } else {
                    $('#li_delete,#btnSaveAuthorization,.clsRemoveLevel').removeClass('grey');
                    $('#li_delete,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "auto" });
                }
            }
            else {
                $('#li_delete').addClass('grey');
                $('#li_delete').css({ "pointer-events": "none" });
            }
        }
        else {
            $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
            $("#chkActive,.clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        }
    }
}

function AuthorizationFBEdit(ele) {
    //debugger
    if (!$(ele).hasClass("clsdivLevelFlow")) {
        ele = $(ele).closest('.clsdivLevelFlow');
    }
    var authID = $(ele).attr('data-authorizationdetailid');
    if (authID != undefined) {
        SelectedFBNode(ele);
        var stage = $('.AddBlueColor').attr('data-stage');
        var level = $('.AddBlueColor').attr('data-level');
        var authorizationEditResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationEdit", "Authorization", "Masters"), true, { authorizationDtsId: authID, NodeStage: stage, NodeLevel: level, NodeType: "none", AuthorizationType: $("#hdnAuthorizationType").val(), partialview: true }, "HTML", false);
        //debugger
        if (authorizationEditResult.data != null) {
            //$('#divAuthorization').hide();
            $("#div_bdPlanHeaderdt").hide();
            $("#div_bdPlanplaybtn").hide();
            $('#div_bodyDisplay').html('').html(authorizationEditResult.data).show();
            // $('#id_AuthDef_popup').show();
            //debugger
            if (TempArrayForKeepUnposted.length > 0) {
                for (var i = 0; i < TempArrayForKeepUnposted.length; i++) {
                    $("#" + TempArrayForKeepUnposted[i].id).attr("checked", TempArrayForKeepUnposted[i].bCheck);
                }
            }
            $("#ulAuthBtns").find('span').each(function () {
                $(this).addClass("grey").css({ "pointer-events": "none" });
            });
            $("#li_close,#li_delete,#li_save,#li_clear").addClass("disabledli");
        }
        else {
            COMMON.prototype.showMessage("Error generating pop up");
        }
    }

}

function SelectedFBNode(ele) {
    $('.clsDivNode').removeClass("AddBlueColor");
    $($(ele).find('div')[1]).addClass("AddBlueColor");
    //$('#id_StartNode').removeClass('blue').addClass('grey');
    if ($($(ele).find('div')[1]).attr('data-stage') != "0") {
        $('#spnAddLevel').css({ 'pointer-events': 'none' });
        $('#spnAddLevel').addClass('grey');
    }
    else {
        $('#spnAddLevel').css({ 'pointer-events': 'auto' });
        $('#spnAddLevel').removeClass('grey');
    }
}



function getFBAuthorizationWorkFlow(authorizationFlowResult, bDeleteAuthorization) {
    //debugger

    if (bDeleteAuthorization == false) {
        AllauthorizationDetails.splice(AllauthorizationDetails.length, 1);
        if (authorizationFlowResult.data.lstAuthorizationMasterTrans != null) {
            for (var count = 0; count < authorizationFlowResult.data.lstAuthorizationMasterTrans.length; count++) {
                if (authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId == $("#txtDoc").attr("data-VoucherType")) {
                    var Authdetail = {
                        AuthorizationId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationId,
                        AuthorizationName: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].AuthorizationName,
                        DocumentId: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].DocumentId,
                        EffectiveDate: authorizationFlowResult.data.lstAuthorizationMasterTrans[count].EffectiveDate,
                    }
                    AllauthorizationDetails.push(Authdetail);
                }
                else {
                    AllauthorizationDetails = [];

                }
            }
        }
        else {
            AllauthorizationDetails = [];
        }

        authorizationFlowResult.data = authorizationFlowResult.data.myAuthorizationMasterTrans;
    }
    $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
    if ($("#hdnPanelValue").val() == "1") {
        $('#spnHidePanel').css("display", "block");
    }
    else {
        $('#spnHidePanel').css("display", "none");
    }
    if (authorizationFlowResult.data.AuthorizationDetails != null) {
        $('#hdnAuthorizationType').val(authorizationFlowResult.data.AuthorizationType);
        for (var i = 0; i < authorizationFlowResult.data.AuthorizationDetails.length; i++) {
            var divLevelFlow = $('#divLevelFlow').clone();
            var row = authorizationFlowResult.data.AuthorizationDetails[i].Stage;
            var col = authorizationFlowResult.data.AuthorizationDetails[i].Level;

            if (parseInt(row) >= 4) {
                // //debugger
                var tdhtml = "";
                var tdLen = $('#tblNodeBody').find('tr')[0].cells.length;
                for (var iColLen = 0; iColLen < tdLen; iColLen++) {
                    tdhtml = tdhtml + '<td></td>';
                }
                var dRow = '<tr>' + tdhtml + '</tr>'
                $('#tblNodeBody').append(dRow);
            }
            if (parseInt(col) >= 4) {
                ////debugger
                var trLen = $('#tblNodeBody').find('tr').length;
                for (var iRowLen = 0; iRowLen < trLen; iRowLen++) {
                    $($('#tblNodeBody').find('tr')[iRowLen]).append('<td></td>');
                }
            }


            $($($('#tblNodeBody').find('tr')[row]).find('td')[col]).html(divLevelFlow)
            //  $($('#AuthDesignArea').find('div.container')).append(divLevelFlow);
            var currentCell = $($('#tblNodeBody').find('tr')[row]).find('td')[col];
            $(currentCell).find('.clsdivLevelFlow').removeClass("hidden");
            if (parseInt(authorizationFlowResult.data.AuthorizationDetails[i].Stage) >= 1) {
                // $(currentCell).find('.clsArrowChange').toggleClass("icon-line-arrow glyphicon-arrow-down");
                $(currentCell).find('.clsSpnLevelCheck').hide();
                if ($("#hdnLanguageId").val() == "1") {
                    $($($(currentCell).find('.clsArrowChange')).closest('span')).css({ "transform": "rotate(-90deg)" });
                    $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-right": "22%" });
                } else {
                    //$($($(currentCell).find('.clsArrowChange')).closest('span')).css({ "transform": "rotate(90deg)" });
                    //$(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-left": "18%" });

                    $($($(currentCell).find('.clsArrowChange1')).closest('div')).css({ "transform": "rotate(90deg)" });
                    $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "position": "relative", "top": "10px" });
                }

                $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "text-align": "center" });
                $($($(currentCell).find('.clsdivLevelFlow')).find('div')[0]).css({ "width": "100px", "height": "20px", "position": "relative", "top": "39px", "left": "85px" });
                //$(currentCell).find('.clsDivNode').css({ "width": "150px" });
                $(currentCell).find('.clsDivNode').css({ "width": "35px", "height": "35px", "margin-left": "70%", "margin-top": "50%" });
            }
            if (col == 0) {
                //NodeIcon
                $(currentCell).find('.NodeIcon').addClass('icon-report-1');
            }
            if (col == 1) {
                $(currentCell).find('.NodeIcon').addClass('icon-inventory');
            }
            if (col == 2) {
                $(currentCell).find('.NodeIcon').addClass('icon-inventory-1');
            }
            if (col == 3) {
                $(currentCell).find('.NodeIcon').addClass('icon-loadform');
            }
            if (col == 4) {
                $(currentCell).find('.NodeIcon').addClass('icon-masterdocument');
            }
            if (row == 0 && col == 0) {
                $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "display": "none" });
            }
            //$('.clsdivLevelFlow:last').removeClass("hidden"); clsArrowChange
            var len = $('#AuthDesignArea').find('.clsdivLevelFlow:visible').length;
            // //debugger
            $(currentCell).find('.clsdivLevelFlow').attr('id', "divLevel" + len);
            $(currentCell).find('.clsSpnLevelCheck').attr('id', "chkLevelCheck" + len);
            //    $($('.clsdivLevelFlow:last').find('label')[0]).text('').text('Level ' + len);
            $(currentCell).find('.clsdivLevelFlow').attr('data-authorizationdetailid', authorizationFlowResult.data.AuthorizationDetails[i].AuthorizationDetailId);
            $($($(currentCell).find('.clsdivLevelFlow')).find('div')[1]).attr({ "data-level": authorizationFlowResult.data.AuthorizationDetails[i].Level, "data-stage": authorizationFlowResult.data.AuthorizationDetails[i].Stage })
            if (authorizationFlowResult.data.AuthorizationDetails[i].Condition == null) {
                authorizationFlowResult.data.AuthorizationDetails[i].Condition = "";
            }
            $(currentCell).find('.clsDivAuthorizationName').prop("title", "Condition:" + authorizationFlowResult.data.AuthorizationDetails[i].Condition);
            $($(currentCell).find('.clsDivAuthorizationName')).find('label').text(authorizationFlowResult.data.AuthorizationDetails[i].Description);
            $($(currentCell).find('.clsDivAuthorizationName')).find('label').prop("title", authorizationFlowResult.data.AuthorizationDetails[i].Description);
            (authorizationFlowResult.data.AuthorizationDetails[i].AllinLevel == true) ? $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", true) : $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", false);
        }
        //     $($($('#tblNodeBody').find('tr')[0]).children()).each(function (index) { AllinLevel
        //debugger
        var lastNode = $($('#tblNodeBody').find('tr')[0]).find('.clsdivLevelFlow:last');
        var level = $($(lastNode).find('div')[1]).attr("data-level");
        var divLevelStop = $('.divStopNode').clone();
        var td = $($('#tblNodeBody').find('tr')[0]).find('td')[parseInt(level) + 1];
        $(td).html(divLevelStop);
        $(td).addClass("clsTdEnd");
        $($(td).find('.divStopNode')).removeClass("hidden");
        $($($('#tblNodeBody').find('tr')[0]).find('td:first')).find(".clsArrowChange").addClass("icon-font1");
        $($($('#tblNodeBody').find('tr')[0]).find('td.clsTdEnd')).find(".clsArrowChange").addClass("icon-font1");
        $(".clsArrowChange:not(.icon-font1)").css({ "font-size": "56px" });
        $(".clsArrowChange:not(.icon-font1)").addClass('grey');
        $($($($('#tblNodeBody').find('tr')[0]).find(".clsArrowChange:not(.icon-font1)")).closest('div')).css({ "padding-top": "5px" });

        //   COMMON.prototype.showMessage(authorizationFlowResult.data.AuthorizationName)
        //if(!bDeleteAuthorization){
        //    $('#tblNodeBody').find('tr').each(function () {
        //        $(this).find('td').each(function(){
        //            if($(this).text().trim()=="" && !$(this).hasClass('clsTdEnd')){
        //                $(this).remove();
        //            }
        //        });
        //    });
        //}
        //  }
        (authorizationFlowResult.data.KeepUnpostedInitialSuspendCreditLimit == true) ? $('#chkSuspendCreditLimit').prop('checked', true) : $('#chkSuspendCreditLimit').prop('checked', false);
        (authorizationFlowResult.data.Active == true) ? $("#chkActive").prop("checked", true) : $("#chkActive").prop('checked', false);
        (authorizationFlowResult.data.Alwaysauthorizationstartsfromfirstlevel == true) ? $("#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", true) : $("#chkAlwaysauthorizationstartsfromfirstlevel").prop('checked', false);
        //debugger
        if (authorizationFlowResult.data.KeepUnpostedInitialRejection > "0") {
            if (authorizationFlowResult.data.AuthorizationType == "2") {
                var arriKeepUnpostedArr = [];
                var iKeepUnposted = parseInt(authorizationFlowResult.data.KeepUnpostedInitialRejection);
                for (var i = 0; i < 6; i++) {
                    arriKeepUnpostedArr[i] = iKeepUnposted % 2;
                    iKeepUnposted = Math.floor(iKeepUnposted / 2);
                }
                (arriKeepUnpostedArr[0] == "1") ? $('#chkFinancialAccountingMain').prop("checked", true) : $('#chkFinancialAccountingMain').prop("checked", false);
                (arriKeepUnpostedArr[1] == "1") ? $('#chkInventoryMain').prop("checked", true) : $('#chkInventoryMain').prop("checked", false);
                (arriKeepUnpostedArr[2] == "1") ? $('#chkBaseLinkMain').prop("checked", true) : $('#chkBaseLinkMain').prop("checked", false);
                (arriKeepUnpostedArr[3] == "1") ? $('#chkLinksMain').prop("checked", true) : $('#chkLinksMain').prop("checked", false);
                (arriKeepUnpostedArr[4] == "1") ? $('#chkReferencesMain').prop("checked", true) : $('#chkReferencesMain').prop("checked", false);
                (arriKeepUnpostedArr[5] == "1") ? $('#chkReservationMain').prop("checked", true) : $('#chkReservationMain').prop("checked", false);
            }
            else {
                $('#ddlAuthStatus').val(authorizationFlowResult.data.KeepUnpostedInitialRejection);
            }
        }

    }
}
function ShowPopFBOver(ele, event) {
    debugger
    var v = $(ele).closest('.clsDivNode');
    if (v != null && v.length > 0) {

        $(".popover__content").addClass('hide');
        $(".clsDivNode").css({ "border-color": "grey" });
        $(".clsDivNode").attr('data-selected', 0);
        $(v[0]).css({ "border-color": "#44799b" });
        $(v[0]).find('.NodeIcon').css({ "color": "rgb(68, 121, 155)" });
        $(v[0]).attr('data-selected', 1);
    }
    $(ele).next().removeClass('hide');
    FCommon.UI.stopKeyProcess(event);
}


function Toggle_BAuthDefTabs(ele, evt) {
    debugger

    FCommon.UI.stopKeyProcess(evt);

    var element = ele;// $(ele).find('a');
    //var anchor = $(ele).find('a')[0];
    var aPath = ele.href;//  $(ele).find('a')[0].href;
    var togglediv = aPath.split('#')[1];

    $('#AllContentsDiv').children().removeClass('active');
    $('#AllContentsDiv').children().removeClass('show');

    $('.AuthTabs,#collapsed').children().removeClass('active');
    $('.AuthTabs,#collapsed').children().removeClass('show');

    $('.AuthTabs li').find('a').removeClass('active');
    $('.AuthTabs li').find('a').removeClass('show');

    document.getElementById(togglediv).classList.add('active');
    document.getElementById(togglediv).classList.add('show');

   
    $(ele).addClass('active');
}



function getFBAuthDefPopup(element) {
    //debugger
    if ($('#txtDoc').val() != "" && $('#txtDoc').attr('data-vouchertype') != null && $('#txtDoc').attr('data-vouchertype') != undefined && $('#ctrlAuthorizationH').val() != "") {
        var authorizationId = "0";
        if ($(element).hasClass('pull-left')) {
            $($(element).closest('.clsDivNode')).addClass('AddBlueColor theme_background-color');
        }
        var stage = $('.AddBlueColor').attr('data-stage');
        var level = $('.AddBlueColor').attr('data-level');
        var nodeLength = $('.clsdivLevelFlow:visible').length;
        if (nodeLength > "0") {
            authorizationId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
        }
        var levelType = $(element).attr("data-content") == undefined ? "0" : $(element).attr("data-content");
        if (stage != undefined) {
            if (levelType == "0") {
                stage = stage;
                level = parseInt(level) + 1;
            }
            else {
                stage = parseInt(stage) + 1;
                level = level;
            }
        }
        else {
            stage = 0;
            level = 0;
        }
        if (parseInt(stage) >= 1 && $(element).hasClass('pull-left') && levelType == "0") {
            COMMON.prototype.showMessage("Only parallel node can be added to this node.");
            $(element).addClass("grey");
            $(element).css({ "pointer-events": "none" });
            return false;
        }
        //debugger;
        if ($("#hdnAuthorizationType").val() == "" || $("#hdnAuthorizationType").val() == "0") {
            var AuthType = $('#hdnAuthorizationName').val() == "Transaction" ? "2" : $('#hdnAuthorizationName').val() == "Masters" ? "1" : "3";
            $("#hdnAuthorizationType").val(AuthType);
        }
        if ($($(element).find('i')).hasClass('icon-player6')) {
            $('#id_StartNode').removeClass('grey').addClass('blue');
            $('.clsDivNode').removeClass('AddBlueColor theme_background-color');
        }
        var result = NETWORK.executeServerMethod(GLOBAL.getContextPath("BudegetAuthPartial", "Authorization", "Masters"), true, { VoucherId: $('#txtDoc').attr('data-vouchertype'), levelType: levelType, authorizationId: authorizationId, NodeStage: stage, NodeLevel: level, NodeType: levelType == "0" ? "Level" : "Stage", AuthorizationType: $("#hdnAuthorizationType").val() }, "HTML", false);

        if (result.data != null) {
            debugger
            $("#div_bdPlanHeaderdt").hide();
            $("#div_bdPlanplaybtn").hide();
            $('#div_bodyDisplay').html('').html(result.data).show();
            //$('#divAuthorization').hide();
            //$('#divAuthDefPartial').html('').html(result.data);
            //$('#id_AuthDef_popup').show();
            $("#ulAuthBtns").find('span').each(function () {
                $(this).addClass("grey").css({ "pointer-events": "none" });
            });
            $("#li_close,#li_delete,#li_save,#li_clear").addClass("disabledli");
        }
        else {
            COMMON.prototype.showMessage("Error generating pop up");
        }
    }
    else {

        if ($('#txtDoc').attr('data-vouchertype') == null || $('#txtDoc').attr('data-vouchertype') == undefined) {
            COMMON.prototype.showMessage(getFBResourceValue("msgTD_DocType", GetMasterTransAuthResourceMessages));               // $('#txtDoc').val("");
            return false;
        }
        if ($('#txtDoc').val() == "") {
            COMMON.prototype.showMessage(getFBResourceValue("msgTD_DocType", GetMasterTransAuthResourceMessages));
            return false;
        }
        if ($('#ctrlAuthorizationH').val() == "")
            COMMON.prototype.showMessage(getFBResourceValue("msgAuthCantBlank", GetMasterTransAuthResourceMessages));

        return false;
    }
}



// Get Resource Messages
function getFBResourceValue(sKey, GetResourceMessages) {
    var value = "";
    var result = null;

    result = findFbKeyValue(sKey, GetResourceMessages);
    if (result.lValue > 0) {
        value = result.data.Value;

        value = value.replace("{0}", "");
        value = value.replace("{1}", "");
    }

    return (value);
}

function findFbKeyValue(sKey, arrKeyValue) {
    var iCounter = 0;
    var result = null;
    var obj = null;

    try {
        result = COMMON.prototype.getEmptyResultObject();
        result.lValue = 0;
        result.sValue = "";
        result.data = null;

        for (iCounter = 0; iCounter < arrKeyValue.length; iCounter++) {
            obj = arrKeyValue[iCounter];
            if (obj.Key == sKey) {
                result.lValue = iCounter + 1;
                result.data = obj;
                break;
            }
        }

    }
    catch (err) {
        result.lValue = -1;
        result.sValue = err.message;
    }

    return (result);
}

window.onclick = function (event) {
    if (!event.target.matches('.dropddnbtn')) {
        $("#id_Auth_menu").hide();
    }
}


function RemoveFBLevel(ele) {
    // ////debugger
    var stage = $($($(ele).closest('.clsdivLevelFlow')).find('.clsDivNode')).attr('data-stage');
    var level = $($($(ele).closest('.clsdivLevelFlow')).find('.clsDivNode')).attr('data-level');
    if (stage == "0" && level == "0") {
        COMMON.prototype.showMessage(getFBResourceValue("msgcannotdeleteatLevelZero", GetMasterTransAuthResourceMessages));
        return false;
    }
    if (confirm(getFBResourceValue("msgWouldyouliketodeletetheselectednode", GetMasterTransAuthResourceMessages))) {
        g_DeletedNode++;
        var authdetailid = $($(ele).closest('.clsdivLevelFlow')).attr('data-authorizationdetailid');
        DeletedAuthorizationDetailsIds.push(parseInt(authdetailid));
        $(ele).closest('.clsdivLevelFlow').remove();
        if ($('.clsdivLevelFlow').length == "1") {
            $($('#tblNodeBody').find('.divStopNode')).remove();
        }

        var authorizationEditResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("DeleteNode", "Authorization", "Masters"), true, { stage: stage, level: level, AuthDetailsId: authdetailid }, "JSON", false);
        if (authorizationEditResult.data != null && authorizationEditResult.lValue == "1") {
            getFBAuthorizationWorkFlow(authorizationEditResult, true);
        }
        else {
            COMMON.prototype.showMessage("Error in deleting node");
            return false;
        }
    }
}
function CopyFBAuthorizationLeave() {
    //debugger
    m_tableData = [];
    DeletedAuthorizationDetailsIds = [];

    var authorizationId = OPTIONCONTROL.getControlValue("CopyAuthorization");
    var bMasterAuthorization = $("#hdnAuthorizationName").val().trim() == "Transaction" ? false : true;

    if ($("#txtDoc").attr("data-VoucherType") != null && $("#txtDoc").attr("data-VoucherType") != "" && $("#txtDoc").attr("data-VoucherType") != undefined) {
        var authorizationFlowResult = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAuthorizationFlow", "Authorization", "Masters"), true, { authorizationId: authorizationId, iDocumentId: $("#txtDoc").attr("data-VoucherType"), iAuthType: $("#hdnAuthorizationType").val() }, "JSON", false);

        if (authorizationFlowResult.data.myActive) {
            $('#chkActive').prop("checked", true);
        }
        else {
            $('#chkActive').prop("checked", false);
        }
        if (authorizationId != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != 0 && authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
            DATEPICKER.setDate("dpAffectedDate", authorizationFlowResult.data.myAuthorizationMasterTrans.EffectiveDate);
        }
        else {
            DATEPICKER.setDate("dpAffectedDate", today);

        }
        $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        $('#spndeleteProfile').removeClass('grey');
        $('#spndeleteProfile').css({ "pointer-events": "auto" });
        if ($("#txtDoc").attr("data-VoucherType") != undefined && authorizationId != null) {//&& authorizationId != "0"


            if (authorizationFlowResult.data.myAuthorizationMasterTrans != null) {
                getFBAuthorizationWorkFlow(authorizationFlowResult, false);
                var OptionControlData = OPTIONCONTROL.getControlData('CopyAuthorization');
                if (OptionControlData[3].exist == "1") {
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').addClass('grey');
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "none" });
                } else {
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').removeClass('grey');
                    $('#spndeleteProfile,#btnSaveAuthorization,.clsRemoveLevel').css({ "pointer-events": "auto" });
                }
            }
            else {
                $('#spndeleteProfile').addClass('grey');
                $('#spndeleteProfile').css({ "pointer-events": "none" });
            }
        }
        else {
            $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
            $(".clsInitialRejection,#chkAlwaysauthorizationstartsfromfirstlevel").prop("checked", false);
        }
    }
}
// auth def methods
function getFBUserRoles(ele) {
    debugger
    FGRIDCONTROL.clearData("id_tblUserSelection", true);
    var result = null;
    if ($(ele).val() == "0") {
        $("#id_divCriteria").show();
        $($('#id_tblUserSelection th')[1]).html('').html(getFBResourceValue("lbUser", GetMasterTransAuthResourceMessages) );
        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetUsers", "Authorization", "Masters"), true, {}, "JSON", false);
    }
    else if ($(ele).val() == "1") {
        $("#id_divCriteria").show();
        $($('#id_tblUserSelection th')[1]).html('').html(getFBResourceValue("lbRole", GetMasterTransAuthResourceMessages));
        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetRoles", "Authorization", "Masters"), true, {}, "JSON", false);
    }
    else if ($(ele).val() == "2") {
        $($('#id_tblUserSelection th')[1]).html('').html(getFBResourceValue("lbDesignation", GetMasterTransAuthResourceMessages));
        result = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetDesignations", "Authorization", "Masters"), true, {}, "JSON", false);
    }
    if (result.data != null) {
        $('.clsRoleUserDDL')[0].options.length = 0;
        var ddl = $('.clsRoleUserDDL');
        for (var i = 0; i < result.data.length; i++) {
            ddl.append("<option value=" + result.data[i].ID + ">" + result.data[i].Name + "</option>");
        }
    }
    else {
        COMMON.prototype.showMessage("Error in getting User selection data");
        return false;
    }

    //debugger;
    //BINDING USER/ROLES DATA TO GRID
    if (m_tableData != undefined) {
        tableData = m_tableData;
        if (tableData.data != null && tableData.lValue > 0) {
            for (var iRowCounter = 0; iRowCounter < tableData.data.length; iRowCounter++) {
                for (iColCounter = 1; iColCounter <= 1; iColCounter++) {
                    objData = tableData.data[iRowCounter];
                    cellobj = FGRIDCONTROL.getCellObject("id_tblUserSelection", iRowCounter + 1, iColCounter);
                    try {
                        var userRoleDesignation = "";
                        if ($("#ddlUserSelection").val() == "0") {
                            userRoleDesignation = "UserId";
                        }
                        if ($("#ddlUserSelection").val() == "1") {
                            userRoleDesignation = "RoleId";
                        }
                        if ($("#ddlUserSelection").val() == "2") {
                            userRoleDesignation = "DesignationId";
                        }
                        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
                            case MasterDataType.get("NUMBERLIST"):
                                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                                if (iColCounter == 1) {
                                    cellobj.setCellData("value", objData[userRoleDesignation]);
                                    cellobj.setCellData("AuthorizationUserSelectionId", objData["AuthorizationUserSelectionId"]);
                                    $(element).val(objData[userRoleDesignation]);
                                }
                                else if (iColCounter == 4) {
                                    cellobj.setCellData("value", objData["FrequencyId"]);
                                    $(element).val(objData["FrequencyId"]);
                                }
                                cellobj.setCellText($(element).find("option:selected").text());
                                break;

                            case MasterDataType.get("NUMBER"):
                                cellobj.setCellData("value", objData["LimitValue"]);
                                cellobj.setCellText(objData["LimitValue"]);
                                break;
                            default:
                                cellobj.setCellData("value",$("#hdnFilterString"+cellobj.iRow).val());
                                cellobj.setCellData("limiton",$("#hdnFilterString"+cellobj.iRow).attr("data-limiton"));
                                cellobj.setCellText($("#hdnFilterString"+cellobj.iRow).val());
                                break;
                        }
                    }
                    catch (err) {
                        COMMON.prototype.showMessage(err.message, "Exception");
                    }
                }

            }
        }
    }
}

function FBcellchange(cellobj, event) {
    //debugger
    if (cellobj.bLeave == true) {
        return (FBonLeave(cellobj, event));
    }
    else {
        FBonEnter(cellobj, event);
    }
}

function FBonLeave(cellobj, event) {
    // debugger
    var element = null;
    var data = null;
    sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);

    if (COMMON.prototype.isValidObject(cellobj.ColumnAttribute.ctrlid) == true) {

        var EventCol = $($(cellobj.cell).closest('tr')).find('.CommonAlerts');
        if (cellobj.bHidden == true || EventCol.length > 0) {
            if (!$(EventCol).is(":checked")) {
                cellobj.processDefault(event);
                return true;
            }
        }
        if ((cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_Recepient" && cellobj.iRow == 1)||(event==undefined)) {
            cellobj.processDefault(event);
            return true;
        }
          
        switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
            case MasterDataType.get("NUMBERLIST"):
                element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (cellobj.ColumnAttribute.ctrlid == "id_tblUserSelection_User") {
                    var filterArray = [];
                    for (var i = 0; i < getFBTotalRows(); i++) {
                        var obj = FGRIDCONTROL.getCellObject("id_tblUserSelection", i + 1, 1);
                        if (obj.CellData.value != "" && obj.CellData.value != undefined && i != obj.iRow - 1) {
                            filterArray.push(obj.CellData.value);
                        }
                    }
                    if (filterArray.length == "0") {
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText($(element).find("option:selected").text());
                    }
                    else if ($.inArray(parseInt(element.value), filterArray) == -1) {
                        cellobj.setCellData("value", element.value);
                        cellobj.setCellText($(element).find("option:selected").text());
                    }
                    else {
                        cellobj.setCellData("value", "");
                        cellobj.setCellText("");
                    }
                }
                else {
                    cellobj.setCellData("value", element.value);
                    cellobj.setCellText($(element).find("option:selected").text());
                }
                break;

        }
    }
    return (true);
}
//var cellObjHolderForUserSelectionCondition = "";
var lastCellObj = null;
function FBonEnter(cellobj, event) {
    debugger
    var element = null;
    var sGridCtrlId = "";
    var iValue = 0;
    var data = null;
    lastCellObj = cellobj;
    sGridCtrlId = FGRIDCONTROL.getGridIdFromCell(cellobj.cell);

    var EventCol = $($(cellobj.cell).closest('tr')).find('.CommonAlerts');
    if (cellobj.bHidden == true || EventCol.length > 0) {
        if (!$(EventCol).is(":checked")) {
            cellobj.processDefault(event);
            return;
        }
    }
    if ((cellobj.ColumnAttribute.ctrlid == "id_tblAlerts_Recepient" && cellobj.iRow == 1)) {
        cellobj.processDefault(event);
        return;
    }

    switch (FConvert.toInt(cellobj.ColumnAttribute.datatypeid)) {
        case MasterDataType.get("NUMBERLIST"):
            if((cellobj.ColumnAttribute.ctrlid =="id_tblAlerts_EmailTemplate" ||
                                    cellobj.ColumnAttribute.ctrlid =="id_tblAlerts_Alerts" || cellobj.ColumnAttribute.ctrlid =="id_tblAlerts_EmailHeaderTemplate")){//cellobj.ColumnAttribute.ctrlid =="id_tblAlerts_SMSTemplate" ||
                $("#id_tblAlerts_Alerts,#id_tblAlerts_EmailTemplate,#id_tblAlerts_EmailHeaderTemplate,#ddlAlertMessage1").empty();//#id_tblAlerts_SMSTemplate,
                getFBEmailSMSTemplate();
            }
            element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
            if (cellobj.getCellData("value") == null) {
                cellobj.setControl(element, "0");
            }
            else {
                cellobj.setControl(element, cellobj.getCellData("value"));
            }

            //if($('#lblalertevent1,#lblalertevent2,#lblalertevent3,#lblalertevent4').is(":checked") == true)
            //{
            //    debugger
            //    $(element).hide();
            //}
            //else{

            //}
            $(element).show();


            break

    }
}


function FBtimeDateRangeClick(element) {
    //debugger
    var chkId = $(element).attr('id');
    if (chkId == "chkDateRange") {
        if ($("#" + chkId).is(':checked')) {
            $('.clsDpDateRange').attr('disabled', false);
            $('.clsDpDateRange').removeClass('grey');
        }
        else {
            $('.clsDpDateRange').attr('disabled', true);
            $('.clsDpDateRange').addClass('grey');
        }
    }
    else {
        if ($("#" + chkId).is(':checked')) {
            $('.clsDpTimeRange').attr('disabled', false);
            $('.clsDpTimeRange').removeClass('grey');
        }
        else {
            $('.clsDpTimeRange').attr('disabled', true);
            $('.clsDpTimeRange').addClass('grey');
        }

    }
}
function getFBEmailSMSTemplate() {
    debugger
    var tableData = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetEmailSMSTemplate", "Authorization", "Masters"), true, { iAuthType:$("#hdnAuthorizationType").val(),iVoucherType: $("#hdnAuthorizationMenuId").val()}, "JSON", false);//FConvert.toInt($("#hdnAuthorizationType").val())
    if (tableData.data != null) {
        debugger
        var BindEmailTemplateData = tableData.data[0];
        var BindSMSTemplateData = tableData.data[1];
        for (var i = 0; i < BindEmailTemplateData.length; i++) {
            $('#id_tblAlerts_EmailTemplate').append("<option value=" + BindEmailTemplateData[i].ID + ">" + BindEmailTemplateData[i].Name + "</option>")
        }
        for (var j = 0; j < BindSMSTemplateData.length; j++) {
            if (BindSMSTemplateData[j].Type == EmailHEader) {
                $('#id_tblAlerts_EmailHeaderTemplate').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
            }

            else if (BindSMSTemplateData[j].Type == Dashboard) {
                $('#id_tblAlerts_Alerts').append("<option value=" + BindSMSTemplateData[j].ID + ">" + BindSMSTemplateData[j].Name + "</option>")
            }
        }


    }
    else {
        COMMON.prototype.showMessage('Error in getting Email and Template Data.');
    }
}

function SaveFBNodeData(element, event) {
    debugger
    //for update the Advancefilter control on Ok or Save filter control so that leave event of last row should update 
    FILTER.ADVANCEFILTER.onOkSaveClick_UpdateOption_DateControl();
    var arrArrAuthorizationAlters = [];
    var arrDeletedEscalation = [];
    var arrDeletedUserSelection = [];
    var arrFilterCondition = null;
    var arrListAuthorizationEscalation = [];
    var arrListAuthorizationUserSelection = [];
    if (lastCellObj != null && lastCellObj != "") {
        onLeave(lastCellObj, event);
    }
    var tableLen = document.getElementById("id_tblUserSelection_body");

    for (var i = 0; i < tableLen.rows.length; i++) {
        var AuthorizationUserSelection = {
            AuthorizationDetailId: $("#ddlUserSelection").attr('data-authorizationdetailid') == undefined ? "0" : $("#ddlUserSelection").attr('data-authorizationdetailid'),
            AuthorizationUserSelectionId: $(tableLen.rows[i].cells[1]).attr("data-authorizationuserselectionid") == undefined ? "0" : $(tableLen.rows[i].cells[1]).attr("data-authorizationuserselectionid"),//$("#hdnAuthorizationUserSelectionId").val(),
            DesignationId: $("#ddlUserSelection").val() == "2" ? $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : "0" : $(tableLen.rows[i].cells[1]).attr("data-value") : "0",
            FrequencyId: $(tableLen.rows[i].cells[4]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[4]).find('select').length > 0 ? $($(tableLen.rows[i].cells[4]).find('select')).val() : "0" : $(tableLen.rows[i].cells[4]).attr("data-value"),
            LimitCondition: "",
            LimitDefinition: "",
            LimitOn: $("#hdnFilterString" + (i + 1)).attr("data-limiton") == undefined ? ($("#ddlLimiton").attr("data-isitsales") == "False" ? "1" : "0") : $("#hdnFilterString" + (i + 1)).attr("data-limiton"),
            LimitValue: $(tableLen.rows[i].cells[3]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[3]).find('input').length > 0 ? $($(tableLen.rows[i].cells[3]).find('input')).val() : "" : $(tableLen.rows[i].cells[3]).attr("data-value"),
            MarkDeleted: false,
            RoleId: $("#ddlUserSelection").val() == "1" ? $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[1]).attr("data-value") : "0",
            RoleName: $("#ddlUserSelection").val() == "1" ? $($(tableLen.rows[i].cells[1]).find('option:selected')).text() :"",
            UserId: $("#ddlUserSelection").val() == "0" ? $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[1]).attr("data-value") : "0",
            UserName:$("#ddlUserSelection").val() == "0" ? $($(tableLen.rows[i].cells[1]).find('option:selected')).text() :"",
            UserSelectionFlagId: $("#ddlUserSelection").val()//$("#ddlUserSelection").val() == "2" ? "0" : $(tableLen.rows[i].cells[1]).attr("data-value") == undefined ? $(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL').length > 0 ? $($(tableLen.rows[i].cells[1]).find('.clsRoleUserDDL')).val() : undefined : $(tableLen.rows[i].cells[1]).attr("data-value")
        }
        switch ($("#ddlUserSelection").val()) {
            case "0":
                if (AuthorizationUserSelection.UserId != undefined && AuthorizationUserSelection.UserId != "0" && AuthorizationUserSelection.UserId != "") {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
            case "1":
                if (AuthorizationUserSelection.RoleId != undefined && AuthorizationUserSelection.RoleId != "0"&& AuthorizationUserSelection.RoleId != "") {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
            case "2":
                if (AuthorizationUserSelection.DesignationId != undefined && AuthorizationUserSelection.DesignationId != "0" && AuthorizationUserSelection.DesignationId != "") {
                    arrListAuthorizationUserSelection.push(AuthorizationUserSelection);
                }
                break;
        }

    }

  
    var KeepUnposted = 0;
    var UndoAuthBitwise = 0;
    
    if(!$("#chkConditionNotRequired").is(":checked") )

        arrFilterCondition = FILTER.getFilterValue($("#hdnAuthorizationMenuId").val(),"0");

    var tableAlerts = document.getElementById("id_tblAlerts_body");
    if (arrFilterCondition == null) {
        arrFilterCondition = [];
    }
    // debugger
    var AuthorizationDetails = {

        AllinLevel: false,
        Approved: $('#chkApproved').is(":checked") ? true : false,
        ApprovedAlertMsg: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[4]).attr("data-value") : "0",
        ApprovedEmailHeaderTemplateId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[2]).attr("data-value") : "0",
        ApprovedEmailTemplateId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[3]).attr("data-value") : "0",
        ApprovedRecipientId: $('#chkApproved').is(":checked") == true ? $(tableAlerts.rows[1].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[1].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[1].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[1].cells[5]).attr("data-value") : "0",
        ArrAuthorizationAlters: arrArrAuthorizationAlters,
        AskRemarksonapproval: $('#chkAskRemarksonapproval').is(":checked") ? true : false,
        AskremarksonRejection: $('#chkAskremarksonRejection').is(":checked") ? true : false,
        AuthorizationDetailId: $("#hdnAuthorizationId").val(),
        AuthorizationMode: $('#chkFullAuthorization').is(":checked") ? "1" : "0",
        Budgetexceeded: $("#chkBudgetExceeded").is(":checked") ? true : false,
        Condition: "",
        ConditionNotReq: $("#chkConditionNotRequired").is(":checked") ? true :false,
        CreditDaysexceeded: $("#chkCreditDaysExceeded").is(":checked") ? true : false,
        Creditlimitexceeded: $("#chkCreditLimitExceeded").is(":checked") ? true : false,
        DateRange: $("#chkDateRange").is(":checked") ? true : false,
        DeletedEscalation: arrDeletedEscalation,
        DeletedUserSelection: arrDeletedUserSelection,
        Description: $("#txtDescription").val(),
        FilterCondition: arrFilterCondition,
        Formula: "",
        FromDate: $("#chkDateRange").is(":checked") ? DATEPICKER.getDate("dpFromDate") : "0",
        FromTime: $("#chkTimeRange").is(":checked") ? FTIMECONTROL.getTime("tpFromTime") : "0",
        KeepUnposted: KeepUnposted,
        Level: $("#hdnLevel").val(),
        LineWiseAutorization: $("#chkLineWiseAuthorization").is(":checked") ? true : false,
        ListAuthorizationEscalation: arrListAuthorizationEscalation,
        ListAuthorizationUserSelection: arrListAuthorizationUserSelection,
        MarkDeleted: false,
        Negativecashcheck: $("#chkNegativeCashCheck").is(":checked") ? true : false,
        NegativeStockcheck: $("#chkNegativeStockCheck").is(":checked") ? true : false,
        NodeType: $("#hdnStage").val() == "0" ? true : false,
        Percentage: $("#txtPercentage").val(),
        Received: $("#chkReceived").is(":checked") ? true : false,
        ReceivedAlertTemplateId: $('#chkReceived').is(":checked") == true ? $(tableAlerts.rows[0].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[4]).attr("data-value") : "0",
        ReceivedEmailHeaderTemplateId: $('#chkReceived').is(":checked") == true ? $(tableAlerts.rows[0].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[2]).attr("data-value") : "0",
        ReceivedEmailTemplateId: $('#chkReceived').is(":checked") == true ? $(tableAlerts.rows[0].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[3]).attr("data-value") : "0",
        ReceivedRecipientId:  $('#chkReceived').is(":checked") == true ? $(tableAlerts.rows[0].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[0].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[0].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[0].cells[6]).attr("data-value") : "0",
        Rejected: $("#chkRejected").is(":checked") ? true : false,
        RejectedAlertMsg: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[4]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[4]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[4]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[4]).attr("data-value") : "0",
        RejectedEmailHeaderTemplateId:$("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[2]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[2]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[2]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[2]).attr("data-value") : "0",
        RejectedEmailTemplateId: $("#chkRejected").is(":checked") == true ? $(tableAlerts.rows[2].cells[3]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[3]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[3]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[3]).attr("data-value") : "0",
        RejectedRecipientId: $("#chkRejected").is(":checked") == true? $(tableAlerts.rows[2].cells[5]).attr("data-value") == undefined ? ($(tableAlerts.rows[2].cells[5]).find('.commonAlertDDL').length > 0 ? $($(tableAlerts.rows[2].cells[5]).find('.commonAlertDDL')).val() : "0") : $(tableAlerts.rows[2].cells[5]).attr("data-value") : "0",
        Reason: $("#txtAuthDefReason").val(),
        Stage: $("#hdnStage").val(),
        Status: $("#ddlStatus").val(),
        StatusUpdate: $("#id_txtStatusUpdate").attr("data-ifieldid") == undefined ? "0" : $("#id_txtStatusUpdate").attr("data-ifieldid"),
        SuspendCreditLimit: false,
        TempAuthDetailId: "0",
        TimeRange: $("#chkTimeRange").is(":checked") ? true : false,
        ToDate: $("#chkDateRange").is(":checked") ? DATEPICKER.getDate("dpToDate") : "0",
        ToTime: $("#chkTimeRange").is(":checked") ? FTIMECONTROL.getTime("tpToTime") : "0",
        UndoAutherizationOnEditing: $("#ddlUndoAuthEditing").val(),
        UndoAutherization: UndoAuthBitwise,
        UserSelectionFlag: $("#ddlUserSelection").val(),//$("#rbnUsers").is(":checked") ? "0" : $("#rbnRoles").is(":checked") ? "1" : "2",
        UserSelectionType: $("#ddlCriteria").val(),//$("#rbnAnySelectedUser").is(":checked") ? "0" : $("#rbnAllSelectedUser").is(":checked") ? "1" : $("#rbnMajority").is(":checked") ? "2" : "3",
        ApprovalRemarksMandatory: $('#chkmakeAskRemarksonapproval').is(":checked") ? true : false,
        RejectionRemarksMandatory: $('#chkmakeAskRemarksonRejection').is(":checked") ? true : false
}
    debugger
    if ($("#txtDescription").val().trim() == "") {
        COMMON.prototype.showMessage(getFBResourceValue("msgEnterDesc", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (arrFilterCondition.length == "0" && !$("#chkConditionNotRequired").is(":checked")) {
        COMMON.prototype.showMessage(getFBResourceValue("msgEntervalidCondition", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (AuthorizationDetails.DateRange == true && parseInt(AuthorizationDetails.FromDate) > parseInt(AuthorizationDetails.ToDate)) {
        COMMON.prototype.showMessage(getFBResourceValue("msgEnterValidDateRange", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (arrListAuthorizationUserSelection.length == "0" && $("#ddlUserSelection").val() != "2") {
        if (parseInt($("#ddlUserSelection").val()) == 1) {
            COMMON.prototype.showMessage(getFBResourceValue("msgRoleselectionismandatory", GetMasterTransAuthResourceMessages));
            return false;
        }
        else {
            COMMON.prototype.showMessage(getFBResourceValue("msgInUserSelectiontabselectuserUserselectionismandatory", GetMasterTransAuthResourceMessages));
            return false;
        }
    }

    else if (AuthorizationDetails.Received == true && (AuthorizationDetails.ReceivedAlertTemplateId == "0" && AuthorizationDetails.ReceivedEmailTemplateId == "0" )) {
        debugger
        COMMON.prototype.showMessage(getFBResourceValue("msgSelectEmailTemplateSMSTemplateAlertforReceiving", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (AuthorizationDetails.Approved == true && (AuthorizationDetails.ApprovedAlertMsg == "0" && AuthorizationDetails.ApprovedEmailTemplateId == "0")) {
        COMMON.prototype.showMessage(getFBResourceValue("msgSelectEmailTemplateSMSTemplateAlertApproval", GetMasterTransAuthResourceMessages));
        return false;
    }
    else if (AuthorizationDetails.Rejected == true && (AuthorizationDetails.RejectedAlertMsg == "0" && AuthorizationDetails.RejectedEmailTemplateId == "0")) {
        COMMON.prototype.showMessage(getFBResourceValue("msgSelectEmailTemplateSMSTemplateAlertforRejection", GetMasterTransAuthResourceMessages));
        return false;
    }

    else {
        VoucherType = $("#hdnVoucherType").val();
        AuthDetailsId =  $("#hdnAuthorizationId").val() == '' ? 0 :  $("#hdnAuthorizationId").val();
        var AuthorizationId = OPTIONCONTROL.getControlValue("ctrlAuthorizationH")==""? 0:OPTIONCONTROL.getControlValue("ctrlAuthorizationH");
        NodeType = $("#hdnNodeType").val();
        arrLimitCondition = [];
        //debugger;
        var NodeLvel = NETWORK.executeServerMethod(GLOBAL.getContextPath("saveNodeLevelData", "Authorization", "Masters"), true, { VoucherType: VoucherType, AuthDetailsId: AuthDetailsId, AuthorizationDetails: AuthorizationDetails, NodeType: NodeType, arrFilterCondition: arrFilterCondition, objUserSelection: arrLimitCondition, iAuthorizationID: AuthorizationId }, "JSON", true, "NodeLevelSucess", "GLOBAL.LoadingStart", "GLOBAL.LoadingEnd");
    }
}

function NodeLevelSucess(bflag, data) {
    debugger
    if (bflag == true && data != null) {
        //closeAuthDef();
        closeFBAuthorization();
        g_DeletedNode++;
        $('#AuthDesignArea').html('').html(AuthDesignAreaInnerHTML);
        if (data.AuthorizationDetails != null) {
            //   $('#hdnAuthorizationType').val(data.AuthorizationType);
            for (var i = 0; i < data.AuthorizationDetails.length; i++) {
                //debugger
                //$('#id_StartNode').removeClass('blue').addClass('grey');
                var divLevelFlow = $('#divLevelFlow').clone();
                var row = data.AuthorizationDetails[i].Stage;
                var col = data.AuthorizationDetails[i].Level;
                if (parseInt(row) >= 4) {
                    var tdhtml = "";
                    var tdLen = $('#tblNodeBody').find('tr')[0].cells.length;
                    for (var iColLen = 0; iColLen < tdLen; iColLen++) {
                        tdhtml = tdhtml + '<td></td>';
                    }
                    var dRow = '<tr>' + tdhtml + '</tr>'
                    $('#tblNodeBody').append(dRow);
                }
                if (parseInt(col) >= 4) {
                    var trLen = $('#tblNodeBody').find('tr').length;
                    for (var iRowLen = 0; iRowLen < trLen; iRowLen++) {
                        $($('#tblNodeBody').find('tr')[iRowLen]).append('<td></td>');
                    }
                }

                $($($('#tblNodeBody').find('tr')[row]).find('td')[col]).html(divLevelFlow)
                // $($('#AuthDesignArea').find('div.container')).append(divLevelFlow);
                var currentCell = $($('#tblNodeBody').find('tr')[row]).find('td')[col];
                $(currentCell).find('.clsdivLevelFlow').removeClass("hidden");
                if (parseInt(data.AuthorizationDetails[i].Stage) >= 1) {
                    //  $(currentCell).find('.clsArrowChange').toggleClass("icon-line-arrow glyphicon-arrow-down");
                    $(currentCell).find('.clsSpnLevelCheck').hide();
                    if ($("#hdnLanguageId").val() == "1") {
                        $($($(currentCell).find('.clsArrowChange')).closest('span')).css({ "transform": "rotate(-90deg)" });
                        $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-right": "22%" });

                    } else {
                        //$($($(currentCell).find('.clsArrowChange')).closest('span')).css({ "transform": "rotate(90deg)" });
                        //$(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "padding-left": "22%" });

                        $($($(currentCell).find('.clsArrowChange1')).closest('div')).css({ "transform": "rotate(90deg)" });
                        $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "position": "relative", "top": "10px" });

                    }

                    $(currentCell).find('.clsdivLevelFlow').css({ "display": "block", "text-align": "center" });
                    $($($(currentCell).find('.clsdivLevelFlow')).find('div')[0]).css({ "width": "100px", "height": "20px", "position": "relative", "top": "39px", "left": "85px" });

                    //$($($(currentCell).find('.clsdivLevelFlow')).find('div')[0]).css({ "margin-left": "30%", "display": "flex", "margin-top": "-5px" });
                    //$(currentCell).find('.clsDivNode').css({ "width": "150px" });
                    $(currentCell).find('.clsDivNode').css({ "width": "35px", "height": "35px", "margin-left": "70%", "margin-top": "50%" });


                }
                if (row == 0 && col == 0) {
                    $($($(currentCell).find('.clsArrowChange1')).closest('span')).css({ "display": "none" });
                }

                if (col == 0) {
                    //NodeIcon
                    $(currentCell).find('.NodeIcon').addClass('icon-report-1');
                }
                if (col == 1) {
                    $(currentCell).find('.NodeIcon').addClass('icon-inventory');
                }
                if (col == 2) {
                    $(currentCell).find('.NodeIcon').addClass('icon-inventory-1');
                }
                if (col == 3) {
                    $(currentCell).find('.NodeIcon').addClass('icon-loadform');
                }
                if (col == 4) {
                    $(currentCell).find('.NodeIcon').addClass('icon-masterdocument');
                }
                ///  $('.clsdivLevelFlow:last').removeClass("hidden");
                var len = $('#AuthDesignArea').find('.clsdivLevelFlow:visible').length;

                $(currentCell).find('.clsdivLevelFlow').attr('id', "divLevel" + len);
                $(currentCell).find('.clsSpnLevelCheck').attr('id', "chkLevelCheck" + len);
                //    $($('.clsdivLevelFlow:last').find('label')[0]).text('').text('Level ' + len);
                $(currentCell).find('.clsdivLevelFlow').attr('data-authorizationdetailid', data.AuthorizationDetails[i].AuthorizationDetailId);
                $($($(currentCell).find('.clsdivLevelFlow')).find('div')[1]).attr({ "data-level": data.AuthorizationDetails[i].Level, "data-stage": data.AuthorizationDetails[i].Stage })
                if (data.AuthorizationDetails[i].Condition == null) {
                    data.AuthorizationDetails[i].Condition = "";
                }
                $(currentCell).find('.clsDivAuthorizationName').prop("title", "Condition:" + data.AuthorizationDetails[i].Condition);
                $($(currentCell).find('.clsDivAuthorizationName')).find('label').text(data.AuthorizationDetails[i].Description);
                $($(currentCell).find('.clsDivAuthorizationName')).find('label').prop("title", data.AuthorizationDetails[i].Description);
                (data.AuthorizationDetails[i].AllinLevel == true) ? $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", true) : $($($(currentCell).find('.clsSpnLevelCheck')).find('input')).prop("checked", false);
            }
            //debugger
            var lastNode = $($('#tblNodeBody').find('tr')[0]).find('.clsdivLevelFlow:last');
            var level = $($(lastNode).find('div')[1]).attr("data-level");
            var divLevelStop = $('.divStopNode').clone();
            var td = $($('#tblNodeBody').find('tr')[0]).find('td')[parseInt(level) + 1];
            $(td).html(divLevelStop);
            $(td).addClass("clsTdEnd");
            if($($(td).find('.divStopNode')[0]).hasClass("hidden"))
            {
                $($(td).find('.divStopNode')).removeClass("hidden");
            }
            // $($(td).find('.divStopNode')).removeClass("hidden");
            $($($('#tblNodeBody').find('tr')[0]).find('td:first')).find(".clsArrowChange").addClass("icon-font1");
            $($($('#tblNodeBody').find('tr')[0]).find('td.clsTdEnd')).find(".clsArrowChange").addClass("icon-font1");
            $(".clsArrowChange:not(.icon-font1)").css({ "font-size": "56px" });
            $(".clsArrowChange:not(.icon-font1)").addClass('grey');
            $($($($('#tblNodeBody').find('tr')[0]).find(".clsArrowChange:not(.icon-font1)")).closest('div')).css({ "padding-top": "5px" });

        }

    }
    else {
        COMMON.prototype.showMessage("Error in saving node Escalation data");
    }
}

function closeFBAuthorization()
{
    debugger
    $("#div_bdPlanHeaderdt").show();
    $("#div_bdPlanplaybtn").show();
       
    $("#div_bodyDisplay").hide();
    $("#ulAuthBtns").find('span').each(function () {
        $(this).removeClass("grey").css({"pointer-events":"auto"});
    });
    m_tableData = undefined;
    $("#li_close,#li_delete,#li_save,#li_clear").removeClass("disabledli");
}

function FBonDivScroll(body, evt) {
    debugger
    OPTIONCONTROL.updatePopupPosition();
    DATEPICKER.collapseAllPopups();
    FILTER.CollapseFilterTree();
}
var AlertsOldValue=0;
function FBAlertsDDlChange(element,eventType) {
    // debugger
    try {
        if(eventType.type=="click")
            AlertsOldValue=element.value;
        else
        {
            if(element.value=="")
                return false;
            var  result = NETWORK.executeServerMethod(GLOBAL.getContextPath("AlertsValidation", "Authorization", "Masters"),
                                                  true,{ AlertValue: element.value,iVoucherType:parseInt($("#hdnVoucherType").val()),
                                                      iAuthorizationType:FConvert.toInt($("#hdnAuthorizationType").val()),id:element.id },"JSON",false,"",
                                                      "GLOBAL.LoadingStart","GLOBAL.LoadingEnd");
            if(result.lValue>0){
                if(result.data!="")
                {
                    COMMON.prototype.showMessage(result.data);
                    $(element).val(AlertsOldValue);
                    return false;
                }
            }else{
                COMMON.prototype.showMessage(result.Error);
                return false;
            }
        }
    } catch (ex) {
        alert("Exception:FBAlertsDDlChange "+ex.message);
        return false;
    }
}
function getFBAlertTableData() {
    debugger
    var tableData = NETWORK.executeServerMethod(GLOBAL.getContextPath("GetAlertsTableData", "Authorization", "Masters"), true, {}, "JSON", false);
    if (tableData.data.length > 0) {
        // debugger
        var i=0;
        if($("#hdnAuthorizationType").val()=='4'){
            i=4;
        }
        else{
            i=5;
        }
        var objData = tableData.data[0];
        if (tableData.data[0].Received) {
            $('#chkReceived').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= i; iColCounter++) {
                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 1, iColCounter);
                //var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                var element=$('#' + cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["ReceivedEmailHeaderTemplateId"]);
                    $(element).val(objData["ReceivedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["ReceivedEmailTemplateId"]);
                    $(element).val(objData["ReceivedEmailTemplateId"]);
                }
                    //else if (iColCounter == 4) {
                    //    cellobj.setCellData("value", objData["ReceivedSmsTemplateId"]);
                    //    $(element).val(objData["ReceivedSmsTemplateId"]);
                    //}
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["ReceivedAlertTemplateId"]);
                    $(element).val(objData["ReceivedAlertTemplateId"]);
                }

                else if (iColCounter == 5) {

                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }
            }

        }
        if (tableData.data[0].Approved) {
            $('#chkApproved').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= i; iColCounter++) {

                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 2, iColCounter);
                var element=$('#'+cellobj.ColumnAttribute.ctrlid);
                // var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["ApprovedEmailHeaderTemplateId"]);
                    $(element).val(objData["ApprovedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["ApprovedEmailTemplateId"]);
                    $(element).val(objData["ApprovedEmailTemplateId"]);
                }
                    //else if (iColCounter == 4) {
                    //    cellobj.setCellData("value", objData["ApprovedSmsTemplateId"]);
                    //    $(element).val(objData["ApprovedSmsTemplateId"]);
                    //}
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["ApprovedAlertMsg"]);
                    $(element).val(objData["ApprovedAlertMsg"]);
                }
                else if (iColCounter == 5) {
                    cellobj.setCellData("value", objData["ApprovedRecipientId"]);
                    $(element).val(objData["ApprovedRecipientId"]);
                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }
            }
        }
        if (tableData.data[0].Rejected) {
            $('#chkRejected').prop("checked", true);
            for (var iColCounter = 2; iColCounter <= i; iColCounter++) {
                var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 3, iColCounter);
                var element=$('#'+cellobj.ColumnAttribute.ctrlid);
                // var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
                if (iColCounter == 2) {
                    cellobj.setCellData("value", objData["RejectedEmailHeaderTemplateId"]);
                    $(element).val(objData["RejectedEmailHeaderTemplateId"]);
                }
                if (iColCounter == 3) {
                    cellobj.setCellData("value", objData["RejectedEmailTemplateId"]);
                    $(element).val(objData["RejectedEmailTemplateId"]);
                }
                    //else if (iColCounter == 4) {
                    //    cellobj.setCellData("value", objData["RejectedSmsTemplateId"]);
                    //    $(element).val(objData["RejectedSmsTemplateId"]);
                    //}
                else if (iColCounter == 4) {
                    cellobj.setCellData("value", objData["RejectedAlertMsg"]);
                    $(element).val(objData["RejectedAlertMsg"]);
                }
                else if (iColCounter == 5) {
                    cellobj.setCellData("value", objData["RejectedRecipientId"]);
                    $(element).val(objData["RejectedRecipientId"]);
                }
                if ($(element).find("option:selected").length > 0) {
                    cellobj.setCellText($(element).find("option:selected").text());
                }
            }
        }
        //if (tableData.data[0].Stopped) {

        //    $('#chkStopped').prop("checked", true);
        //    for (var iColCounter = 2; iColCounter <= 6; iColCounter++) {
        //        var cellobj = FGRIDCONTROL.getCellObject("id_tblAlerts", 4, iColCounter);
        //        var element=$('#'+cellobj.ColumnAttribute.ctrlid);
        //        //var element = document.getElementById(cellobj.ColumnAttribute.ctrlid);
        //        if (iColCounter == 2) {
        //            cellobj.setCellData("value", objData["StoppedEmailHeaderTemplateId"]);
        //            $(element).val(objData["StoppedEmailHeaderTemplateId"]);
        //        }
        //        if (iColCounter == 3) {
        //            cellobj.setCellData("value", objData["StoppedEmailTemplateId"]);
        //            $(element).val(objData["StoppedEmailTemplateId"]);
        //        }
        //        else if (iColCounter == 4) {
        //            cellobj.setCellData("value", objData["StoppedSmsTemplateId"]);
        //            $(element).val(objData["StoppedSmsTemplateId"]);
        //        }
        //        else if (iColCounter == 5) {
        //            cellobj.setCellData("value", objData["StoppedAlertMsg"]);
        //            $(element).val(objData["StoppedAlertMsg"]);
        //        }
        //        else if (iColCounter == 6) {
        //            cellobj.setCellData("value", objData["StoppedRecipientId"]);
        //            $(element).val(objData["StoppedRecipientId"]);
        //        }
        //        if ($(element).find("option:selected").length > 0) {
        //            cellobj.setCellText($(element).find("option:selected").text());
        //        }

        //    }
        //}
    }
    else {
        COMMON.prototype.showMessage("Error in getting Alert table data");
    }
}
function AllFBSelectedUsers(ele) {
    debugger
    if ($(ele).val() == "3") {//($(ele).find('input').is(":checked") && $($(ele).closest('div').next()).hasClass('clsPercentage')) {
        //  $($(ele).closest('div').next()).removeClass('hidden');
        $('.clsPercentage').removeClass('hidden');
    }
    else {
        $('.clsPercentage').addClass('hidden');
    }
}
function FBOnConditionNotRequiredClick(ele) {
    debugger

    if ($('#chkConditionNotRequired').is(":checked")) {
        $('.divConditionFormula').css({ 'pointer-events': 'none' });
        $('.divConditionFormula').addClass('grey');
        $($('.divConditionFormula').find('.Fselect,.Ftxtbox')).each(function () {
            $(this).addClass('grey');
        });
    }
    else {
        $('.divConditionFormula').css({ 'pointer-events': 'auto' });
        $('.divConditionFormula').removeClass('grey');
        $($('.divConditionFormula').find('.Fselect,.Ftxtbox')).each(function () {
            $(this).removeClass('grey');
        });

    }

}
function onUserSelectionSerialNoHover(obj, event) {
    debugger
    var sControl = "";
    var sContent = "";
    var bSelect = true;

    if (obj.bEnter == true) {
        FCommon.UI.setText(obj.Cell, "");

        obj.Cell.style.paddingLeft = "";


        sControl = "<div id='id_row_popup' style='padding: 0px; width: 100%; height:100%;'>";
        sControl += obj.iRow;
        sControl += "</div>";

        //sControl = "<div class='col-xs-12 Fcontrolbuttons' style='padding: 0px;'>";
        //sControl += "<div onclick='TRANSACTION_ENTRY.BODY.onDeleteRow(" + obj.iRow + ", event);' class='col-xs-6' data-toggle='tooltip' title='Remove Row' style='padding: 0px;'><span class='icon-delete icon-font8'></span></div>";
        //sControl += "<div onclick='TRANSACTION_ENTRY.BODY.onInsertRow(" + obj.iRow + ", event);' class='col-xs-6' data-toggle='tooltip' title='Insert Row' style='padding: 0px;'><span class='icon-insertrow icon-font8'></span></div>";
        //sControl += "</div>"

        $(obj.Cell).html(sControl);

        sContent = "<table>";
        sContent += "<tbody class='grid_row_menu'>";
        sContent += "<tr onclick='onUserSelectionDeleteRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Delete Current Row'>";
        sContent += "<td><span class='icon-delete icon-font8'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp;Delete Row</div></td>";
        sContent += "</tr>";
        sContent += "<tr onclick='onUserSelectionInsertRow(" + obj.iRow + ", event);' data-toggle='tooltip' title='Add Row Above'>";
        sContent += "<td><span class='icon-insertrow icon-font8'></span></td>";
        sContent += "<td><div class='font-6'>&nbsp;&nbsp;Insert Row</div></td>";
        sContent += "</tr>";

        bSelect = false;
        if (isRowSelectedForUserSelection(obj.iRow) == false) {
            bSelect = true;
        }

        sContent += "<tr onclick='onUserSelectionSelectRow(" + obj.iRow + ", " + bSelect + ", event);'>";

        if (bSelect == true) {
            sContent += "<td><span class='icon-selectall icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;Select Row</div></td>";
        }
        else {
            sContent += "<td><span class='icon-unselectall1 icon-font8'></span></td>";
            sContent += "<td><div class='font-6'>&nbsp;&nbsp;Unselect Row</div></td>";
        }

        sContent += "</tr>";
        sContent += "</tbody>";
        sContent += "</table>";

        $("#id_row_popup").popover({
            type: "tooltip",
            trigger: "manual",
            placement: $("#hdnLanguageId").val() == "0" ? "right" : "left",
            html: true,
            content: sContent
        });

        $("#id_row_popup").popover('show');
    }
    else {
        $("#id_row_popup").popover('destroy');

        FCommon.UI.removeChildren(obj.Cell);
        FCommon.UI.setText(obj.Cell, obj.iRow);
        obj.Cell.style.paddingLeft = "3px;";
    }
}
function  isRowSelectedForUserSelection (iRow) {
    debugger
    var bSelected = false;
    var eleRow = null;

    eleRow = FGRIDCONTROL.getRowElement("id_tblUserSelection", iRow);
    if (FCommon.UI.isValidObject(eleRow) == true) {
        if (FCommon.String.isNullOrEmpty(eleRow.style.backgroundColor, true) == false) {
            bSelected = true;
        }
    }

    return (bSelected);
}
function  getFBTotalRows() {
    return document.getElementById('id_tblUserSelection_body').rows.length;
}
function onUserSelectionDeleteRow(iRow, event) {
    debugger
    iRow = $("#GridContextMenu").attr('data-cellrow');
    if (confirm(getFBResourceValue("ConfirmToDeleteRow", GetMasterTransAuthResourceMessages))) {
        FCommon.UI.stopKeyProcess(event);
        if (getFBTotalRows() == 1) {
            COMMON.prototype.showMessage("Cannot delete current row. There must be a single row.", "Error");

            return;
        }

        FGRIDCONTROL.update("id_tblUserSelection");

        FGRIDCONTROL.deleteRows("id_tblUserSelection", iRow, 1);

    }
}
function onUserSelectionSelectRow (iRow, bSelect, event) {
    debugger
    iRow = $("#GridContextMenu").attr('data-cellrow');
    var eleRow = null;

    try {
        FCommon.UI.stopKeyProcess(event);
        eleRow = FGRIDCONTROL.getRowElement("id_tblUserSelection", iRow);
        if (bSelect == true) {
            eleRow.style.backgroundColor = "rgb(222, 245, 253)";
        }
        else {
            eleRow.style.backgroundColor = "";
        }
    }
    catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
    }
}
function onUserSelectionInsertRow (iRow, event) {
    debugger
    iRow = $("#GridContextMenu").attr('data-cellrow');
    try {
        FCommon.UI.stopKeyProcess(event);
        FGRIDCONTROL.insertRows("id_tblUserSelection", iRow, 1);
        FGRIDCONTROL.update("id_tblUserSelection");
    }
    catch (err) {
        COMMON.prototype.showMessage(err.message, "Exception")
    }
}

BudgetAuthorization={
    changeGridRow: function (cellobj, event) {
        debugger
        if($("#chkReceived").checked == true) {
            FGRIDCONTROL.update("id_tblAlerts");
              
        }
        else{
            FGRIDCONTROL.clearRowData("id_tblAlerts",1)
            FGRIDCONTROL.update("id_tblAlerts");

        }
    },
    changeGridRow1:function (cellobj, event) {
        debugger
        if($("#chkApproved").checked == true) {
            FGRIDCONTROL.update("id_tblAlerts");
        }
        else{
            FGRIDCONTROL.clearRowData("id_tblAlerts",2)
            FGRIDCONTROL.update("id_tblAlerts");

        }
    },
    changeGridRow2: function (cellobj, event) {
        debugger
        if($("#chkRejected").checked == true) {
              
            FGRIDCONTROL.update("id_tblAlerts");
        }
        else{
            FGRIDCONTROL.clearRowData("id_tblAlerts",3) 
            FGRIDCONTROL.update("id_tblAlerts");

        }
    }
};
